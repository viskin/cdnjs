/**
 * TinySort CharOrder: a TinySort plugin to sort non-latin characters.
 * @summary TinySort CharOrder
 * @version 2.3.0
 * @requires tinysort
 * @license MIT/GPL
 * @author Ron Valstar <ron@ronvalstar.nl>
 * @copyright Ron Valstar <ron@ronvalstar.nl>
 * @namespace tinysort.charorder
 */
!function(a,b){"use strict";"function"==typeof define&&define.amd?define(["tinysort"],b):b(a.tinysort)}(this,function(a){"use strict";/**
	 * Prepares the criterium within the tinysort sort function
	 * @memberof tinysort.charorder
	 * @private
	 * @param {criterium} criterium
	 */
function b(a){
// check charOrder (non latin chars)
// charOrder only to check whether other vars are set
// variables used on sort
//		- oSettings.charOrder to test
//		- replacements
//		- orderedCharlist to order doubles
//
if(a.charOrder!==d&&(d=a.charOrder,m=9472,n={},e=h,d)){e=l.slice(0);// first set to entire 32-255 charlist
// then loop through the charOrder rule
for(var b,c,g=[],j=function(b,c){g.push(c),n[a.cases?b:b.toLowerCase()]=c},o="z",p=d.length,q=0;p>q;q++){// loop through chars to set 'sOrderChar'
var r=d[q],s=r.charCodeAt(),t=s>96&&123>s;// 'a'.charCodeAt()===97 'z'.charCodeAt()===122
if(!t)if("["===r){// find replace chars: ë will sort similar to e
var u=g.length,v=u?g[u-1]:o,w=d.substr(q+1).match(/[^\]]*/)[0],x=w.match(/{[^}]*}/g);// find doubles: dž, ss, lj ...
if(x)for(b=0,c=x.length;c>b;b++){var y=x[b];q+=y.length,// increment i because of .replace(...
w=w.replace(y,""),j(y.replace(/[{}]/g,""),v)}for(b=0,c=w.length;c>b;b++)j(w[b],v);q+=w.length+1}else if("{"===r){// find doubles: dž, ss, lj ...
var z=d.substr(q+1).match(/[^}]*/)[0];j(z,f(m++)),// replace the double with single Unicode 0x2500+
q+=z.length+1}else g.push(r);if(g.length&&(t||q===p-1)){
// first remove non latin chars
k(g,function(a){e.splice(i.call(e,a),1)});
// then append chars to latin char
var A=g.slice(0);A.splice(0,0,i.call(e,o)+1,0),Array.prototype.splice.apply(e,A),
//
g.length=0}t&&(o=r)}}}/**
	 * The plugin sort function called from the tinysort sort function
	 * @memberof tinysort.charorder
	 * @private
	 * @param {criterium} criterium
	 * @param {Boolean} isNumeric
	 * @param {String|Number} a
	 * @param {String|Number} b
	 * @param {Number} sortReturn
	 * @returns {Number} A sorting number -1, 0 or 1
	 */
function c(a,b,c,d,f){if(c===d)f=0;else if(!b&&a.charOrder){
// replace chars (todo? first replace doubles?)
for(var j in n){var k=n[j];c=c.replace(j,k),d=d.replace(j,k)}
// then test if either word has non latin chars
// we're using the slower string.match because strangely regex.test sometimes fails
if(c.match(o)!==h||d.match(o)!==h)for(var l=0,m=g(c.length,d.length);m>l;l++){var p=i.call(e,c[l]),q=i.call(e,d[l]);if(f=a.sortReturnNumber*(q>p?-1:p>q?1:0))break}else f=c===d?0:c>d?1:-1}return f}var d,e,f=String.fromCharCode,g=Math.min,h=null,i=Array.prototype.indexOf,j=a.plugin,k=j.loop,l=function(a){// all latin chars 32-255
// using lowerCase instead of upperCase so _ will sort before
for(var b=32,c=f(b),d=255;d>b;b++,c=f(b).toLowerCase())-1===i.call(a,c)&&a.push(c);return a.sort()}([]),m=9472,n={},o=/[^a-zA-Z]/g;
// add to namespace
a.defaults.charOrder=d,// sets to undefined
j(b,c)});