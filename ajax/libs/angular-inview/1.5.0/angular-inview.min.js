(function(){"use strict";angular.module("angular-inview",[]).directive("inView",["$parse",inViewDirective]).directive("inViewContainer",inViewContainerDirective);function inViewDirective($parse){return{restrict:"A",require:"?^^inViewContainer",link:function inViewDirectiveLink(scope,element,attrs,container){var options={};if(attrs.inViewOptions){options=scope.$eval(attrs.inViewOptions)}if(options.offset){options.offset=normalizeOffset(options.offset)}if(options.viewportOffset){options.viewportOffset=normalizeOffset(options.viewportOffset)}var viewportEventSignal=signalSingle({type:"initial"}).merge(signalFromEvent(window,"scroll resize"));if(container){viewportEventSignal=viewportEventSignal.merge(container.eventsSignal)}if(options.throttle){viewportEventSignal=viewportEventSignal.throttle(options.throttle)}var inviewInfoSignal=viewportEventSignal.map(function(event){var viewportRect;if(container){viewportRect=container.getViewportRect()}else{viewportRect=getViewportRect()}viewportRect=offsetRect(viewportRect,options.viewportOffset);var elementRect=offsetRect(element[0].getBoundingClientRect(),options.offset);var info={inView:intersectRect(elementRect,viewportRect),event:event,element:element,elementRect:elementRect,viewportRect:viewportRect};if(options.generateParts&&info.inView){info.parts={};info.parts.top=elementRect.top>=viewportRect.top;info.parts.left=elementRect.left>=viewportRect.left;info.parts.bottom=elementRect.bottom<=viewportRect.bottom;info.parts.right=elementRect.right<=viewportRect.right}return info}).scan({},function(lastInfo,newInfo){if(options.generateDirection&&newInfo.inView&&lastInfo.elementRect){newInfo.direction={horizontal:newInfo.elementRect.left-lastInfo.elementRect.left,vertical:newInfo.elementRect.top-lastInfo.elementRect.top}}newInfo.changed=newInfo.inView!==lastInfo.inView||!angular.equals(newInfo.parts,lastInfo.parts)||!angular.equals(newInfo.direction,lastInfo.direction);return newInfo}).filter(function(info){if(!info.changed){return false}if(info.event.type==="initial"&&!info.inView){return false}return true});var inViewExpression=$parse(attrs.inView);var dispose=inviewInfoSignal.subscribe(function(info){scope.$applyAsync(function(){inViewExpression(scope,{$inview:info.inView,$inviewInfo:info})})});scope.$on("$destroy",dispose)}}}function inViewContainerDirective(){return{restrict:"A",controller:function($element){this.element=$element;this.eventsSignal=signalFromEvent($element,"scroll");this.getViewportRect=function(){return $element[0].getBoundingClientRect()}}}}function getViewportRect(){var result={top:0,left:0,width:window.innerWidth,right:window.innerWidth,height:window.innerHeight,bottom:window.innerHeight};if(result.height){return result}var mode=document.compatMode;if(mode==="CSS1Compat"){result.width=result.right=document.documentElement.clientWidth;result.height=result.bottom=document.documentElement.clientHeight}else{result.width=result.right=document.body.clientWidth;result.height=result.bottom=document.body.clientHeight}return result}function intersectRect(r1,r2){return!(r2.left>r1.right||r2.right<r1.left||r2.top>r1.bottom||r2.bottom<r1.top)}function normalizeOffset(offset){if(!angular.isArray(offset)){throw new Error("angular-inview: Offset should be an array")}if(offset.length==2){return offset.concat(offset)}else if(offset.length==3){return offset.concat([offset[1]])}return offset}function offsetRect(rect,offset){if(!offset){return rect}var offsetObject={top:isPercent(offset[0])?parseFloat(offset[0])*rect.height:offset[0],right:isPercent(offset[1])?parseFloat(offset[1])*rect.width:offset[1],bottom:isPercent(offset[2])?parseFloat(offset[2])*rect.height:offset[2],left:isPercent(offset[3])?parseFloat(offset[3])*rect.width:offset[3]};var result=angular.copy(rect);result.top-=offsetObject.top;result.left-=offsetObject.left;result.bottom+=offsetObject.bottom;result.right+=offsetObject.right;result.height+=offsetObject.top+offsetObject.bottom;result.width+=offsetObject.left+offsetObject.right;return result}function isPercent(n){return angular.isString(n)&&n.indexOf("%")>0}function QuickSignal(didSubscribeFunc){this.didSubscribeFunc=didSubscribeFunc}QuickSignal.prototype.subscribe=function(subscriber){this.didSubscribeFunc(subscriber);var dispose=function(){if(subscriber.$dispose){subscriber.$dispose();subscriber.$dispose=null}};return dispose};QuickSignal.prototype.map=function(f){var s=this;return new QuickSignal(function(subscriber){subscriber.$dispose=s.subscribe(function(nextValue){subscriber(f(nextValue))})})};QuickSignal.prototype.filter=function(f){var s=this;return new QuickSignal(function(subscriber){subscriber.$dispose=s.subscribe(function(nextValue){if(f(nextValue)){subscriber(nextValue)}})})};QuickSignal.prototype.scan=function(initial,scanFunc){var s=this;return new QuickSignal(function(subscriber){var last=initial;subscriber.$dispose=s.subscribe(function(nextValue){last=scanFunc(last,nextValue);subscriber(last)})})};QuickSignal.prototype.merge=function(signal){return signalMerge(this,signal)};QuickSignal.prototype.throttle=function(threshhold){var s=this,last,deferTimer;return new QuickSignal(function(subscriber){var chainDisposable=s.subscribe(function(){var now=+new Date,args=arguments;if(last&&now<last+threshhold){clearTimeout(deferTimer);deferTimer=setTimeout(function(){last=now;subscriber.apply(null,args)},threshhold)}else{last=now;subscriber.apply(null,args)}});subscriber.$dispose=function(){clearTimeout(deferTimer);if(chainDisposable)chainDisposable()}})};function signalMerge(){var signals=arguments;return new QuickSignal(function(subscriber){var disposables=[];for(var i=signals.length-1;i>=0;i--){disposables.push(signals[i].subscribe(function(){subscriber.apply(null,arguments)}))}subscriber.$dispose=function(){for(var i=disposables.length-1;i>=0;i--){if(disposables[i])disposables[i]()}}})}function signalFromEvent(target,event){return new QuickSignal(function(subscriber){var handler=function(e){subscriber(e)};var el=angular.element(target);el.on(event,handler);subscriber.$dispose=function(){el.off(event,handler)}})}function signalSingle(value){return new QuickSignal(function(subscriber){subscriber(value)})}})();
