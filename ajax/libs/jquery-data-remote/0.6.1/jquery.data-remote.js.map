{"version":3,"sources":["jquery.data-remote.js"],"names":[],"mappings":"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","file":"jquery.data-remote.js","sourcesContent":["/**\n * jQuery dataRemote Plugin\n * http://github.com/codonnell822/jquery-dataremote\n * Copyright 2014-2015, Chris O'Donnell\n *\n * Plugin to help make handling ajax requests easier.\n * Name inspired by Ruby on Rails\n */\n;(function($, window, undefined) {\n  \"use strict\";\n\n  $.fn.dataRemote = function(opts = {}) {\n    // Default Settings\n    var defaults = {\n      url: null, // request url\n      data: {}, // request data\n      debug: false,\n      eventType: 'load', // js event type to fire data request on (load, click, submit, mouseover, custom, etc.)\n      dataType: 'json', // data type that's expected in response from your request\n      type: 'GET', // type of request (currently only supports GET)\n      target: '', // selector of the element where you want your response injected\n      handlebars: false, // use handlebars to render the response?\n      template: '', // handlebar template selector. by default it will look inside target\n      placement: 'html', // where to inject response relative to target (jquery DOM insertion methods <html|append|prepend|before|after>)\n      loaderImg: null, // target selector for data response\n      oneAndDone: true, // whether to remove the event binding after the first time running\n      success: successCallback, // gets passed 3 parameters ($target, options, response)\n      error: errorCallback, // gets passed 4 parameters ($target, options, response, error)\n      complete: function($target) {}, // callback fires after the request is made (on success OR error)\n      before: function($target) {} // callback fires directly before the request is made\n    };\n\n    // Extend our default options with those provided when instantiating\n    var options = $.extend({}, defaults, opts);\n\n    /**\n     * Default success callback for ajax requests.\n     *\n     * Handles hiding of loader image, debugging (if option is set),\n     * and handling the ajax requests' response (levering handlebars if option\n     * is set or handlebars template is found inside the target element).\n     *\n     * @param  {jQuery} $target  jquery object containing the target element for the ajax response\n     * @param  {object} options  plugin options set during instantiation\n     * @param  {object} response data response from the ajax request\n     */\n    function successCallback($target, options, response) {\n      var source;\n      var template;\n      var html;\n      var $template;\n\n      $target.find('.loader-image').hide();\n\n      if (options.debug) {\n        $.fn.dataRemote.debug($target, response);\n      }\n\n      // Use handlebars if the option is set to true *or* if a handlebars template is found\n      if (options.handlebars !== false || $target.find('[type=\"text/x-handlebars-template\"]').length) {\n        $template = options.template ? $(options.template) : $target.find('[type=\"text/x-handlebars-template\"]');\n        source = $template.html();\n        template = Handlebars.compile(source);\n        html = template(response);\n      } else {\n        html = response;\n      }\n\n      // use proper jQuery method based on append option\n      // if append == true, append results to target element,\n      // or else replace inner html with results\n      var validPlacements = ['html', 'append', 'prepend', 'after', 'before'];\n      var placementIsValid = validPlacements.indexOf(options.placement) !== -1;\n      if (!placementIsValid) {\n        return;\n      }\n      $target[options.placement](html);\n    }\n\n    /**\n     * Default error callback for ajax requests\n     *\n     * Hides the loader image, triggers debugging if it's turned on.\n     *\n     * @param  {jQuery} $target   jquery object containing the target element for the ajax response\n     * @param  {object} options   plugin options set during instantiation\n     * @param  {object} response  data response from the ajax request\n     * @param  {string} error     textual portion of the HTTP status, i.e. \"Not Found\" or \"Internal Server Error.\"\n     */\n    function errorCallback($target, options, response, error) {\n      $target.find('.loader-image').hide();\n\n      if (options.debug) {\n        $.fn.dataRemote.debug($target, response, error);\n      }\n    }\n\n    /**\n     * Private helper method for making the ajax request\n     *\n     * @param {object} url       request url\n     * @param {object} settings  additional settings for the request\n     * {\n     *    @param {jQuery} element  jQuery object containing the current data remote element\n     *    @param {object} options  data remote plugin options for current data remote element\n     *    @param {jQuery} $target  jQuery object containing the target element to inject response\n     * }\n     * @return {void}\n     */\n    function fetch(url, settings) {\n      var $element = settings.element;\n      var $target = settings.target;\n      var options = settings.options;\n\n      // display loader image while retrieving content\n      if (options.loaderImg) {\n        $target.prepend(String() +\n          '<div class=\"loader-image\" style=\"clear: both;\">' +\n            '<img src=\"' + options.loaderImg + '\" alt=\"Loading...\">' +\n          '</div>'\n        );\n      }\n\n      // make the ajax request. Trigger the callbacks using $element as the\n      // context, making the value of `this` for the callbacks the $element\n      $.ajax({\n        url: url,\n        data: options.data,\n        type: options.type,\n        dataType: options.dataType,\n        cache: true,\n        success: function(response) {\n          options.success.call($element, $target, options, response);\n          options.complete.call($element, $target);\n        },\n        error: function(response, status, error) {\n          options.error.call($element, $target, options, response, error);\n          options.complete.call($element, $target);\n        }\n      });\n    }\n\n    return this.each(function(idx, element) {\n      var $element = $(element);\n\n      // Create a local copy of the options for each element. This will allow each\n      // individual element to override options from its' data attributes.\n      var _options = $.extend({}, options);\n      _options.dataType = $element.data('response-type') || options.dataType;\n      _options.eventType = $element.data('event-type') || options.eventType;\n      _options.type = $element.data('type') || options.type;\n      _options.url = $element.data('url') || options.url;\n      _options.data = $element.data('data') ? $element.data('data') : options.data;\n      _options.template = $element.data('template') || options.template;\n      _options.placement = $element.data('response-placement') || options.placement;\n      _options.target = $element.data('target') || options.target;\n      _options.debug = element.hasAttribute('data-debug') ? $element.data('debug') : options.debug;\n      _options.oneAndDone = element.hasAttribute('data-one-and-done') ? $element.data('one-and-done') : options.oneAndDone;\n      _options.handlebars = element.hasAttribute('data-handlebars') ? $element.data('handlebars') : options.handlebars;\n\n      // if no target selector is given, default to actual element\n      var $target = _options.target ? $(_options.target) : $element;\n\n      // if event type is 'load', execute the request immediately otherwise,\n      // execute ajax request on specified type (click, submit, mouseover, etc.)\n      if (_options.eventType === 'load') {\n        _options.before.call($element, $target);\n\n        // execute ajax request immediately\n        fetch(_options.url, {\n          element: $element,\n          target: $target,\n          options: _options,\n        });\n      } else {\n        // use proper jQuery method based on oneAndDone option\n        var method = _options.oneAndDone ? 'one' : 'on';\n\n        // bind to specific event type\n        $element[method](_options.eventType, function(evt) {\n          evt.preventDefault();\n\n          // if you're watching on keyup or change events, let's assume you want to\n          // send the value of the element as a query parameter.\n          // Think autosuggest search boxes.\n          // <input data-event-type=\"keyup\" name=\"q\" data-target=\"#search-results\">\n          if (['keyup', 'change'].indexOf(evt.type) !== -1) {\n            _options.data[this.name] = this.value;\n          }\n\n          // execute before request callback\n          _options.before.call($element, $target);\n\n          fetch(_options.url, {\n            element: $element,\n            target: $target,\n            options: _options,\n          });\n        });\n      } // end if else (_options.eventType)\n    }); // end this.each\n  }; // end $.fn.dataRemote\n\n  /**\n   * Helper function for debugging\n   */\n  $.fn.dataRemote.debug = function(element, output, error) {\n    if (window.console && window.console.log) {\n      window.console.log('Element: ');\n      window.console.log(element);\n      window.console.log('Response: ');\n      window.console.log(output);\n      if (error) {\n        window.console.log(' -> Error: ');\n        window.console.log(error);\n      }\n      window.console.log('------------');\n    }\n  };\n\n}(jQuery, window));\n"],"sourceRoot":"/source/"}