{"version":3,"sources":["intro.js","variables.js","utilities.js","cropper.js","load.js","build.js","render.js","preview.js","bind.js","handlers.js","change.js","methods.js","prototype.js","defaults.js","template.js","statics.js","outro.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnhxjfhptwfile":"cropper.js","sourcesContent":["/*!\n * Cropper v@VERSION\n * https://github.com/fengyuanchen/cropperjs\n *\n * Copyright (c) @YEAR Fengyuan Chen\n * Released under the MIT license\n *\n * Date: @DATE\n */\n\n(function (global, factory) {\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = global.document ? factory(global, true) : function (w) {\n      if (!w.document) {\n        throw new Error('Cropper requires a window with a document');\n      }\n\n      return factory(w);\n    };\n  } else {\n    factory(global);\n  }\n})(typeof window !== 'undefined' ? window : this, function (window, noGlobal) {\n\n  'use strict';\n","  // Globals\n  var document = window.document;\n  var location = window.location;\n\n  // Constants\n  var NAMESPACE = 'cropper';\n\n  // Classes\n  var CLASS_MODAL = 'cropper-modal';\n  var CLASS_HIDE = 'cropper-hide';\n  var CLASS_HIDDEN = 'cropper-hidden';\n  var CLASS_INVISIBLE = 'cropper-invisible';\n  var CLASS_MOVE = 'cropper-move';\n  var CLASS_CROP = 'cropper-crop';\n  var CLASS_DISABLED = 'cropper-disabled';\n  var CLASS_BG = 'cropper-bg';\n\n  // Events\n  var EVENT_MOUSE_DOWN = 'mousedown touchstart pointerdown MSPointerDown';\n  var EVENT_MOUSE_MOVE = 'mousemove touchmove pointermove MSPointerMove';\n  var EVENT_MOUSE_UP = 'mouseup touchend touchcancel pointerup pointercancel MSPointerUp MSPointerCancel';\n  var EVENT_WHEEL = 'wheel mousewheel DOMMouseScroll';\n  var EVENT_DBLCLICK = 'dblclick';\n  var EVENT_RESIZE = 'resize';\n  var EVENT_ERROR = 'error';\n  var EVENT_LOAD = 'load';\n\n  // RegExps\n  var REGEXP_ACTIONS = /^(e|w|s|n|se|sw|ne|nw|all|crop|move|zoom)$/;\n  var REGEXP_SPACES = /\\s+/;\n  var REGEXP_TRIM = /^\\s+(.*)\\s+^/;\n\n  // Data\n  var DATA_PREVIEW = 'preview';\n  var DATA_ACTION = 'action';\n\n  // Actions\n  var ACTION_EAST = 'e';\n  var ACTION_WEST = 'w';\n  var ACTION_SOUTH = 's';\n  var ACTION_NORTH = 'n';\n  var ACTION_SOUTH_EAST = 'se';\n  var ACTION_SOUTH_WEST = 'sw';\n  var ACTION_NORTH_EAST = 'ne';\n  var ACTION_NORTH_WEST = 'nw';\n  var ACTION_ALL = 'all';\n  var ACTION_CROP = 'crop';\n  var ACTION_MOVE = 'move';\n  var ACTION_ZOOM = 'zoom';\n  var ACTION_NONE = 'none';\n\n  // Supports\n  var SUPPORT_CANVAS = !!document.createElement('canvas').getContext;\n\n  // Maths\n  var num = Number;\n  var min = Math.min;\n  var max = Math.max;\n  var abs = Math.abs;\n  var sin = Math.sin;\n  var cos = Math.cos;\n  var sqrt = Math.sqrt;\n  var round = Math.round;\n\n  // Prototype\n  var prototype = {\n    version: '@VERSION'\n  };\n\n  // Utilities\n  var EMPTY_OBJECT = {};\n  var toString = EMPTY_OBJECT.toString;\n  var hasOwnProperty = EMPTY_OBJECT.hasOwnProperty;\n","  function typeOf(obj) {\n    return toString.call(obj).slice(8, -1).toLowerCase();\n  }\n\n  function isString(str) {\n    return typeof str === 'string';\n  }\n\n  function isNumber(num) {\n    return typeof num === 'number' && !isNaN(num);\n  }\n\n  function isUndefined(obj) {\n    return typeof obj === 'undefined';\n  }\n\n  function isObject(obj) {\n    return typeof obj === 'object' && obj !== null;\n  }\n\n  function isPlainObject(obj) {\n    var constructor;\n    var prototype;\n\n    if (!isObject(obj)) {\n      return false;\n    }\n\n    try {\n      constructor = obj.constructor;\n      prototype = constructor.prototype;\n\n      return constructor && prototype && hasOwnProperty.call(prototype, 'isPrototypeOf');\n    } catch (e) {\n      return false;\n    }\n  }\n\n  function isFunction(fn) {\n    return typeOf(fn) === 'function';\n  }\n\n  function isArray(arr) {\n    return Array.isArray ? Array.isArray(arr) : typeOf(arr) === 'array';\n  }\n\n  function toArray(obj, offset) {\n    var args = [];\n\n    // This is necessary for IE8\n    if (isNumber(offset)) {\n      args.push(offset);\n    }\n\n    return args.slice.apply(obj, args);\n  }\n\n  function inArray(value, arr) {\n    var index = -1;\n\n    each(arr, function (n, i) {\n      if (n === value) {\n        index = i;\n        return false;\n      }\n    });\n\n    return index;\n  }\n\n  function trim(str) {\n    if (!isString(str)) {\n      str = String(str);\n    }\n\n    if (str.trim) {\n      str = str.trim();\n    } else {\n      str = str.replace(REGEXP_TRIM, '$1');\n    }\n\n    return str;\n  }\n\n  function each(obj, callback) {\n    var length;\n    var i;\n\n    if (obj && isFunction(callback)) {\n      if (isArray(obj) || isNumber(obj.length)/* array-like */) {\n        for (i = 0, length = obj.length; i < length; i++) {\n          if (callback.call(obj, obj[i], i, obj) === false) {\n            break;\n          }\n        }\n      } else if (isObject(obj)) {\n        for (i in obj) {\n          if (hasOwnProperty.call(obj, i)) {\n            if (callback.call(obj, obj[i], i, obj) === false) {\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    return obj;\n  }\n\n  function extend(obj) {\n    var args = toArray(arguments);\n\n    if (args.length > 1) {\n      args.shift();\n    }\n\n    each(args, function (arg) {\n      each(arg, function (prop, i) {\n        obj[i] = prop;\n      });\n    });\n\n    return obj;\n  }\n\n  function proxy(fn, context) {\n    var args = toArray(arguments, 2);\n\n    return function () {\n      return fn.apply(context, args.concat(toArray(arguments)));\n    };\n  }\n\n  function parseClass(className) {\n    return trim(className).split(REGEXP_SPACES);\n  }\n\n  function hasClass(element, value) {\n    return element.className.indexOf(value) > -1;\n  }\n\n  function addClass(element, value) {\n    var classes;\n\n    if (isNumber(element.length)) {\n      return each(element, function (elem) {\n        addClass(elem, value);\n      });\n    }\n\n    classes = parseClass(element.className);\n\n    each(parseClass(value), function (n) {\n      if (inArray(n, classes) < 0) {\n        classes.push(n);\n      }\n    });\n\n    element.className = classes.join(' ');\n  }\n\n  function removeClass(element, value) {\n    var classes;\n\n    if (isNumber(element.length)) {\n      return each(element, function (elem) {\n        removeClass(elem, value);\n      });\n    }\n\n    classes = parseClass(element.className);\n\n    each(parseClass(value), function (n, i) {\n      if ((i = inArray(n, classes)) > -1) {\n        classes.splice(i, 1);\n      }\n    });\n\n    element.className = classes.join(' ');\n  }\n\n  function toggleClass(element, value, added) {\n    return added ? addClass(element, value) : removeClass(element, value);\n  }\n\n  function getData(element, name) {\n    if (isObject(element[name])) {\n      return element[name];\n    } else if (element.dataset) {\n      return element.dataset[name];\n    } else {\n      return element.getAttribute('data-' + name);\n    }\n  }\n\n  function setData(element, name, data) {\n    if (isObject(data) && isUndefined(element[name])) {\n      element[name] = data;\n    } else if (element.dataset) {\n      element.dataset[name] = data;\n    } else {\n      element.setAttribute('data-' + name, data);\n    }\n  }\n\n  function removeData(element, name) {\n    if (isObject(element[name])) {\n      delete element[name];\n    } else if (element.dataset) {\n      delete element.dataset[name];\n    } else {\n      element.removeAttribute('data-' + name);\n    }\n  }\n\n  function addListener(element, type, handler) {\n    var types;\n\n    if (!isFunction(handler)) {\n      return;\n    }\n\n    types = trim(type).split(REGEXP_SPACES);\n\n    if (types.length > 1) {\n      return each(types, function (type) {\n        addListener(element, type, handler);\n      });\n    }\n\n    if (element.addEventListener) {\n      element.addEventListener(type, handler, false);\n    } else if (element.attachEvent) {\n      element.attachEvent('on' + type, handler);\n    }\n  }\n\n  function removeListener(element, type, handler) {\n    var types;\n\n    if (!isFunction(handler)) {\n      return;\n    }\n\n    types = trim(type).split(REGEXP_SPACES);\n\n    if (types.length > 1) {\n      return each(types, function (type) {\n        removeListener(element, type, handler);\n      });\n    }\n\n    if (element.removeEventListener) {\n      element.removeEventListener(type, handler, false);\n    } else if (element.detachEvent) {\n      element.detachEvent('on' + type, handler);\n    }\n  }\n\n  function preventDefault(e) {\n    if (e) {\n      if (e.preventDefault) {\n        e.preventDefault();\n      } else {\n        e.returnValue = false;\n      }\n    }\n  }\n\n  function getEvent(event) {\n    var e = event || window.event;\n    var doc;\n\n    // Fix target property (IE8)\n    if (!e.target) {\n      e.target = e.srcElement || document;\n    }\n\n    if (!isNumber(e.pageX)) {\n      doc = document.documentElement;\n      e.pageX = e.clientX + (window.scrollX || doc && doc.scrollLeft || 0) - (doc && doc.clientLeft || 0);\n      e.pageY = e.clientY + (window.scrollY || doc && doc.scrollTop || 0) - (doc && doc.clientTop || 0);\n    }\n\n    return e;\n  }\n\n  function getOffset(element) {\n    var doc = document.documentElement;\n    var box = element.getBoundingClientRect();\n\n    return {\n      left: box.left + (window.scrollX || doc && doc.scrollLeft || 0) - (doc && doc.clientLeft || 0),\n      top: box.top  + (window.scrollY || doc && doc.scrollTop || 0)  - (doc && doc.clientTop  || 0)\n    };\n  }\n\n  function querySelector(element, selector) {\n    return element.querySelector(selector);\n  }\n\n  function querySelectorAll(element, selector) {\n    return element.querySelectorAll(selector);\n  }\n\n  function insertBefore(element, elem) {\n    element.parentNode.insertBefore(elem, element);\n  }\n\n  function appendChild(element, elem) {\n    element.appendChild(elem);\n  }\n\n  function removeChild(element) {\n    element.parentNode.removeChild(element);\n  }\n\n  function empty(element) {\n    while (element.firstChild) {\n      element.removeChild(element.firstChild);\n    }\n  }\n\n  function isCrossOriginURL(url) {\n    var parts = url.match(/^(https?:)\\/\\/([^\\:\\/\\?#]+):?(\\d*)/i);\n\n    return parts && (\n      parts[1] !== location.protocol ||\n      parts[2] !== location.hostname ||\n      parts[3] !== location.port\n    );\n  }\n\n  function setCrossOrigin(image, crossOrigin) {\n    if (crossOrigin) {\n      image.crossOrigin = crossOrigin;\n    }\n  }\n\n  function addTimestamp(url) {\n    var timestamp = 'timestamp=' + (new Date()).getTime();\n\n    return (url + (url.indexOf('?') === -1 ? '?' : '&') + timestamp);\n  }\n\n  function getImageSize(image, callback) {\n    var newImage;\n\n    // Modern browsers\n    if (image.naturalWidth) {\n      return callback(image.naturalWidth, image.naturalHeight);\n    }\n\n    // IE8: Don't use `new Image()` here\n    newImage = document.createElement('img');\n\n    newImage.onload = function () {\n      callback(this.width, this.height);\n    };\n\n    newImage.src = image.src;\n  }\n\n  function getTransform(options) {\n    var transforms = [];\n    var rotate = options.rotate;\n    var scaleX = options.scaleX;\n    var scaleY = options.scaleY;\n\n    if (isNumber(rotate)) {\n      transforms.push('rotate(' + rotate + 'deg)');\n    }\n\n    if (isNumber(scaleX) && isNumber(scaleY)) {\n      transforms.push('scale(' + scaleX + ',' + scaleY + ')');\n    }\n\n    return transforms.length ? transforms.join(' ') : 'none';\n  }\n\n  function getRotatedSizes(data, isReversed) {\n    var deg = abs(data.degree) % 180;\n    var arc = (deg > 90 ? (180 - deg) : deg) * Math.PI / 180;\n    var sinArc = sin(arc);\n    var cosArc = cos(arc);\n    var width = data.width;\n    var height = data.height;\n    var aspectRatio = data.aspectRatio;\n    var newWidth;\n    var newHeight;\n\n    if (!isReversed) {\n      newWidth = width * cosArc + height * sinArc;\n      newHeight = width * sinArc + height * cosArc;\n    } else {\n      newWidth = width / (cosArc + sinArc / aspectRatio);\n      newHeight = newWidth / aspectRatio;\n    }\n\n    return {\n      width: newWidth,\n      height: newHeight\n    };\n  }\n\n  function getSourceCanvas(image, data) {\n    var canvas = document.createElement('canvas');\n    var context = canvas.getContext('2d');\n    var x = 0;\n    var y = 0;\n    var width = data.naturalWidth;\n    var height = data.naturalHeight;\n    var rotate = data.rotate;\n    var scaleX = data.scaleX;\n    var scaleY = data.scaleY;\n    var scalable = isNumber(scaleX) && isNumber(scaleY) && (scaleX !== 1 || scaleY !== 1);\n    var rotatable = isNumber(rotate) && rotate !== 0;\n    var advanced = rotatable || scalable;\n    var canvasWidth = width;\n    var canvasHeight = height;\n    var translateX;\n    var translateY;\n    var rotated;\n\n    if (scalable) {\n      translateX = width / 2;\n      translateY = height / 2;\n    }\n\n    if (rotatable) {\n      rotated = getRotatedSizes({\n        width: width,\n        height: height,\n        degree: rotate\n      });\n\n      canvasWidth = rotated.width;\n      canvasHeight = rotated.height;\n      translateX = rotated.width / 2;\n      translateY = rotated.height / 2;\n    }\n\n    canvas.width = canvasWidth;\n    canvas.height = canvasHeight;\n\n    if (advanced) {\n      x = -width / 2;\n      y = -height / 2;\n\n      context.save();\n      context.translate(translateX, translateY);\n    }\n\n    if (rotatable) {\n      context.rotate(rotate * Math.PI / 180);\n    }\n\n    // Should call `scale` after rotated\n    if (scalable) {\n      context.scale(scaleX, scaleY);\n    }\n\n    context.drawImage(image, x, y, width, height);\n\n    if (advanced) {\n      context.restore();\n    }\n\n    return canvas;\n  }\n","  function Cropper(element, options) {\n    this.element = element;\n    this.options = extend({}, Cropper.DEFAULTS, isPlainObject(options) && options);\n    this.isLoaded = false;\n    this.isBuilt = false;\n    this.isCompleted = false;\n    this.isRotated = false;\n    this.isCropped = false;\n    this.isDisabled = false;\n    this.isReplaced = false;\n    this.isLimited = false;\n    this.isImg = false;\n    this.originalUrl = '';\n    this.crossOrigin = '';\n    this.canvasData = null;\n    this.cropBoxData = null;\n    this.previews = null;\n    this.init();\n  }\n","  extend(prototype, {\n    init: function () {\n      var element = this.element;\n      var tagName = element.tagName.toLowerCase();\n      var url;\n\n      if (getData(element, NAMESPACE)) {\n        return;\n      }\n\n      setData(element, NAMESPACE, this);\n\n      if (tagName === 'img') {\n        this.isImg = true;\n\n        // e.g.: \"img/picture.jpg\"\n        this.originalUrl = url = element.getAttribute('src');\n\n        // Stop when it's a blank image\n        if (!url) {\n          return;\n        }\n\n        // e.g.: \"http://example.com/img/picture.jpg\"\n        url = element.src;\n      } else if (tagName === 'canvas' && SUPPORT_CANVAS) {\n        url = element.toDataURL();\n      }\n\n      this.load(url);\n    },\n\n    load: function (url) {\n      var options = this.options;\n      var element = this.element;\n      var crossOrigin;\n      var bustCacheUrl;\n      var image;\n      var start;\n      var stop;\n\n      if (!url) {\n        return;\n      }\n\n      this.url = url;\n\n      if (isFunction(options.build) && options.build.call(element) === false) {\n        return;\n      }\n\n      if (options.checkCrossOrigin && isCrossOriginURL(url)) {\n        crossOrigin = element.crossOrigin;\n\n        if (!crossOrigin) {\n          crossOrigin = 'anonymous';\n          bustCacheUrl = addTimestamp(url);\n        }\n      }\n\n      this.crossOrigin = crossOrigin;\n      image = document.createElement('img');\n      setCrossOrigin(image, crossOrigin);\n      image.src = bustCacheUrl || url;\n      this.image = image;\n      this._start = start = proxy(this.start, this);\n      this._stop = stop = proxy(this.stop, this);\n\n      if (this.isImg) {\n        if (element.complete) {\n          this.start();\n        } else {\n          addListener(element, EVENT_LOAD, start);\n        }\n      } else {\n        addListener(image, EVENT_LOAD, start);\n        addListener(image, EVENT_ERROR, stop);\n        addClass(image, CLASS_HIDE);\n        insertBefore(element, image);\n      }\n    },\n\n    start: function (event) {\n      var image = this.isImg ? this.element : this.image;\n\n      if (event) {\n        removeListener(image, EVENT_LOAD, this._start);\n        removeListener(image, EVENT_ERROR, this._stop);\n      }\n\n      getImageSize(image, proxy(function (naturalWidth, naturalHeight) {\n        this.imageData = {\n          naturalWidth: naturalWidth,\n          naturalHeight: naturalHeight,\n          aspectRatio: naturalWidth / naturalHeight\n        };\n\n        this.isLoaded = true;\n        this.build();\n      }, this));\n    },\n\n    stop: function () {\n      var image = this.image;\n\n      removeListener(image, EVENT_LOAD, this._start);\n      removeListener(image, EVENT_ERROR, this._stop);\n\n      removeChild(image);\n      this.image = null;\n    }\n  });\n","  extend(prototype, {\n    build: function () {\n      var options = this.options;\n      var element = this.element;\n      var image = this.image;\n      var template;\n      var cropper;\n      var canvas;\n      var dragBox;\n      var cropBox;\n      var face;\n\n      if (!this.isLoaded) {\n        return;\n      }\n\n      // Unbuild first when replace\n      if (this.isBuilt) {\n        this.unbuild();\n      }\n\n      template = document.createElement('div');\n      template.innerHTML = Cropper.TEMPLATE;\n\n      // Create cropper elements\n      this.container = element.parentNode;\n      this.cropper = cropper = querySelector(template, '.cropper-container');\n      this.canvas = canvas = querySelector(cropper, '.cropper-canvas');\n      this.dragBox = dragBox = querySelector(cropper, '.cropper-drag-box');\n      this.cropBox = cropBox = querySelector(cropper, '.cropper-crop-box');\n      this.viewBox = querySelector(cropper, '.cropper-view-box');\n      this.face = face = querySelector(cropBox, '.cropper-face');\n\n      appendChild(canvas, image);\n\n      // Hide the original image\n      addClass(element, CLASS_HIDDEN);\n      insertBefore(element, cropper);\n\n      // Show the image if is hidden\n      if (!this.isImg) {\n        removeClass(image, CLASS_HIDE);\n      }\n\n      this.initPreview();\n      this.bind();\n\n      options.aspectRatio = max(0, options.aspectRatio) || NaN;\n      options.viewMode = max(0, min(3, round(options.viewMode))) || 0;\n\n      if (options.autoCrop) {\n        this.isCropped = true;\n\n        if (options.modal) {\n          addClass(dragBox, CLASS_MODAL);\n        }\n      } else {\n        addClass(cropBox, CLASS_HIDDEN);\n      }\n\n      if (!options.guides) {\n        addClass(querySelectorAll(cropBox, '.cropper-dashed'), CLASS_HIDDEN);\n      }\n\n      if (!options.center) {\n        addClass(querySelector(cropBox, '.cropper-center'), CLASS_HIDDEN);\n      }\n\n      if (options.background) {\n        addClass(cropper, CLASS_BG);\n      }\n\n      if (!options.highlight) {\n        addClass(face, CLASS_INVISIBLE);\n      }\n\n      if (options.cropBoxMovable) {\n        addClass(face, CLASS_MOVE);\n        setData(face, DATA_ACTION, ACTION_ALL);\n      }\n\n      if (!options.cropBoxResizable) {\n        addClass(querySelectorAll(cropBox, '.cropper-line'), CLASS_HIDDEN);\n        addClass(querySelectorAll(cropBox, '.cropper-point'), CLASS_HIDDEN);\n      }\n\n      this.setDragMode(options.dragMode);\n      this.render();\n      this.isBuilt = true;\n      this.setData(options.data);\n\n      // Call the built asynchronously to keep \"image.cropper\" is defined\n      setTimeout(proxy(function () {\n        if (isFunction(options.built)) {\n          options.built.call(element);\n        }\n\n        if (isFunction(options.crop)) {\n          options.crop.call(element, this.getData());\n        }\n\n        this.isCompleted = true;\n      }, this), 0);\n    },\n\n    unbuild: function () {\n      if (!this.isBuilt) {\n        return;\n      }\n\n      this.isBuilt = false;\n      this.initialImageData = null;\n\n      // Clear `initialCanvasData` is necessary when replace\n      this.initialCanvasData = null;\n      this.initialCropBoxData = null;\n      this.containerData = null;\n      this.canvasData = null;\n\n      // Clear `cropBoxData` is necessary when replace\n      this.cropBoxData = null;\n      this.unbind();\n\n      this.resetPreview();\n      this.previews = null;\n\n      this.viewBox = null;\n      this.cropBox = null;\n      this.dragBox = null;\n      this.canvas = null;\n      this.container = null;\n\n      removeChild(this.cropper);\n      this.cropper = null;\n    }\n  });\n","  extend(prototype, {\n    render: function () {\n      this.initContainer();\n      this.initCanvas();\n      this.initCropBox();\n\n      this.renderCanvas();\n\n      if (this.isCropped) {\n        this.renderCropBox();\n      }\n    },\n\n    initContainer: function () {\n      var options = this.options;\n      var element = this.element;\n      var container = this.container;\n      var cropper = this.cropper;\n      var containerData;\n\n      addClass(cropper, CLASS_HIDDEN);\n      removeClass(element, CLASS_HIDDEN);\n\n      this.containerData = containerData = {\n        width: max(container.offsetWidth, num(options.minContainerWidth) || 200),\n        height: max(container.offsetHeight, num(options.minContainerHeight) || 100)\n      };\n\n      cropper.style.cssText = (\n        'width:' + containerData.width + 'px;' +\n        'height:' + containerData.height + 'px;'\n      );\n\n      addClass(element, CLASS_HIDDEN);\n      removeClass(cropper, CLASS_HIDDEN);\n    },\n\n    // Canvas (image wrapper)\n    initCanvas: function () {\n      var viewMode = this.options.viewMode;\n      var containerData = this.containerData;\n      var containerWidth = containerData.width;\n      var containerHeight = containerData.height;\n      var imageData = this.imageData;\n      var aspectRatio = imageData.aspectRatio;\n      var canvasData = {\n            naturalWidth: imageData.naturalWidth,\n            naturalHeight: imageData.naturalHeight,\n            aspectRatio: aspectRatio,\n            width: containerWidth,\n            height: containerHeight\n          };\n\n      if (containerHeight * aspectRatio > containerWidth) {\n        if (viewMode === 3) {\n          canvasData.width = containerHeight * aspectRatio;\n        } else {\n          canvasData.height = containerWidth / aspectRatio;\n        }\n      } else {\n        if (viewMode === 3) {\n          canvasData.height = containerWidth / aspectRatio;\n        } else {\n          canvasData.width = containerHeight * aspectRatio;\n        }\n      }\n\n      canvasData.oldLeft = canvasData.left = (containerWidth - canvasData.width) / 2;\n      canvasData.oldTop = canvasData.top = (containerHeight - canvasData.height) / 2;\n\n      this.canvasData = canvasData;\n      this.isLimited = (viewMode === 1 || viewMode === 2);\n      this.limitCanvas(true, true);\n      this.initialImageData = extend({}, imageData);\n      this.initialCanvasData = extend({}, canvasData);\n    },\n\n    limitCanvas: function (isSizeLimited, isPositionLimited) {\n      var options = this.options;\n      var viewMode = options.viewMode;\n      var containerData = this.containerData;\n      var containerWidth = containerData.width;\n      var containerHeight = containerData.height;\n      var canvasData = this.canvasData;\n      var aspectRatio = canvasData.aspectRatio;\n      var cropBoxData = this.cropBoxData;\n      var isCropped = this.isCropped && cropBoxData;\n      var minCanvasWidth;\n      var minCanvasHeight;\n      var newCanvasLeft;\n      var newCanvasTop;\n\n      if (isSizeLimited) {\n        minCanvasWidth = num(options.minCanvasWidth) || 0;\n        minCanvasHeight = num(options.minCanvasHeight) || 0;\n\n        if (viewMode) {\n          if (viewMode > 1) {\n            minCanvasWidth = max(minCanvasWidth, containerWidth);\n            minCanvasHeight = max(minCanvasHeight, containerHeight);\n\n            if (viewMode === 3) {\n              if (minCanvasHeight * aspectRatio > minCanvasWidth) {\n                minCanvasWidth = minCanvasHeight * aspectRatio;\n              } else {\n                minCanvasHeight = minCanvasWidth / aspectRatio;\n              }\n            }\n          } else {\n            if (minCanvasWidth) {\n              minCanvasWidth = max(minCanvasWidth, isCropped ? cropBoxData.width : 0);\n            } else if (minCanvasHeight) {\n              minCanvasHeight = max(minCanvasHeight, isCropped ? cropBoxData.height : 0);\n            } else if (isCropped) {\n              minCanvasWidth = cropBoxData.width;\n              minCanvasHeight = cropBoxData.height;\n\n              if (minCanvasHeight * aspectRatio > minCanvasWidth) {\n                minCanvasWidth = minCanvasHeight * aspectRatio;\n              } else {\n                minCanvasHeight = minCanvasWidth / aspectRatio;\n              }\n            }\n          }\n        }\n\n        if (minCanvasWidth && minCanvasHeight) {\n          if (minCanvasHeight * aspectRatio > minCanvasWidth) {\n            minCanvasHeight = minCanvasWidth / aspectRatio;\n          } else {\n            minCanvasWidth = minCanvasHeight * aspectRatio;\n          }\n        } else if (minCanvasWidth) {\n          minCanvasHeight = minCanvasWidth / aspectRatio;\n        } else if (minCanvasHeight) {\n          minCanvasWidth = minCanvasHeight * aspectRatio;\n        }\n\n        canvasData.minWidth = minCanvasWidth;\n        canvasData.minHeight = minCanvasHeight;\n        canvasData.maxWidth = Infinity;\n        canvasData.maxHeight = Infinity;\n      }\n\n      if (isPositionLimited) {\n        if (viewMode) {\n          newCanvasLeft = containerWidth - canvasData.width;\n          newCanvasTop = containerHeight - canvasData.height;\n\n          canvasData.minLeft = min(0, newCanvasLeft);\n          canvasData.minTop = min(0, newCanvasTop);\n          canvasData.maxLeft = max(0, newCanvasLeft);\n          canvasData.maxTop = max(0, newCanvasTop);\n\n          if (isCropped && this.isLimited) {\n            canvasData.minLeft = min(\n              cropBoxData.left,\n              cropBoxData.left + cropBoxData.width - canvasData.width\n            );\n            canvasData.minTop = min(\n              cropBoxData.top,\n              cropBoxData.top + cropBoxData.height - canvasData.height\n            );\n            canvasData.maxLeft = cropBoxData.left;\n            canvasData.maxTop = cropBoxData.top;\n\n            if (viewMode === 2) {\n              if (canvasData.width >= containerWidth) {\n                canvasData.minLeft = min(0, newCanvasLeft);\n                canvasData.maxLeft = max(0, newCanvasLeft);\n              }\n\n              if (canvasData.height >= containerHeight) {\n                canvasData.minTop = min(0, newCanvasTop);\n                canvasData.maxTop = max(0, newCanvasTop);\n              }\n            }\n          }\n        } else {\n          canvasData.minLeft = -canvasData.width;\n          canvasData.minTop = -canvasData.height;\n          canvasData.maxLeft = containerWidth;\n          canvasData.maxTop = containerHeight;\n        }\n      }\n    },\n\n    renderCanvas: function (isChanged) {\n      var canvasData = this.canvasData;\n      var imageData = this.imageData;\n      var rotate = imageData.rotate;\n      var naturalWidth = imageData.naturalWidth;\n      var naturalHeight = imageData.naturalHeight;\n      var aspectRatio;\n      var rotatedData;\n\n      if (this.isRotated) {\n        this.isRotated = false;\n\n        // Computes rotated sizes with image sizes\n        rotatedData = getRotatedSizes({\n          width: imageData.width,\n          height: imageData.height,\n          degree: rotate\n        });\n\n        aspectRatio = rotatedData.width / rotatedData.height;\n\n        if (aspectRatio !== canvasData.aspectRatio) {\n          canvasData.left -= (rotatedData.width - canvasData.width) / 2;\n          canvasData.top -= (rotatedData.height - canvasData.height) / 2;\n          canvasData.width = rotatedData.width;\n          canvasData.height = rotatedData.height;\n          canvasData.aspectRatio = aspectRatio;\n          canvasData.naturalWidth = naturalWidth;\n          canvasData.naturalHeight = naturalHeight;\n\n          // Computes rotated sizes with natural image sizes\n          if (rotate % 180) {\n            rotatedData = getRotatedSizes({\n              width: naturalWidth,\n              height: naturalHeight,\n              degree: rotate\n            });\n\n            canvasData.naturalWidth = rotatedData.width;\n            canvasData.naturalHeight = rotatedData.height;\n          }\n\n          this.limitCanvas(true, false);\n        }\n      }\n\n      if (canvasData.width > canvasData.maxWidth || canvasData.width < canvasData.minWidth) {\n        canvasData.left = canvasData.oldLeft;\n      }\n\n      if (canvasData.height > canvasData.maxHeight || canvasData.height < canvasData.minHeight) {\n        canvasData.top = canvasData.oldTop;\n      }\n\n      canvasData.width = min(\n        max(canvasData.width, canvasData.minWidth),\n        canvasData.maxWidth\n      );\n      canvasData.height = min(\n        max(canvasData.height, canvasData.minHeight),\n        canvasData.maxHeight\n      );\n\n      this.limitCanvas(false, true);\n\n      canvasData.oldLeft = canvasData.left = min(\n        max(canvasData.left, canvasData.minLeft),\n        canvasData.maxLeft\n      );\n      canvasData.oldTop = canvasData.top = min(\n        max(canvasData.top, canvasData.minTop),\n        canvasData.maxTop\n      );\n\n      this.canvas.style.cssText = (\n        'width:' + canvasData.width + 'px;' +\n        'height:' + canvasData.height + 'px;' +\n        'left:' + canvasData.left + 'px;' +\n        'top:' + canvasData.top + 'px;'\n      );\n\n      this.renderImage();\n\n      if (this.isCropped && this.isLimited) {\n        this.limitCropBox(true, true);\n      }\n\n      if (isChanged) {\n        this.output();\n      }\n    },\n\n    renderImage: function (isChanged) {\n      var canvasData = this.canvasData;\n      var imageData = this.imageData;\n      var reversedData;\n\n      if (imageData.rotate) {\n        reversedData = getRotatedSizes({\n          width: canvasData.width,\n          height: canvasData.height,\n          degree: imageData.rotate,\n          aspectRatio: imageData.aspectRatio\n        }, true);\n      }\n\n      extend(imageData, reversedData ? {\n        width: reversedData.width,\n        height: reversedData.height,\n        left: (canvasData.width - reversedData.width) / 2,\n        top: (canvasData.height - reversedData.height) / 2\n      } : {\n        width: canvasData.width,\n        height: canvasData.height,\n        left: 0,\n        top: 0\n      });\n\n      this.image.style.cssText = (\n        'width:' + imageData.width + 'px;' +\n        'height:' + imageData.height + 'px;' +\n        'margin-left:' + imageData.left + 'px;' +\n        'margin-top:' + imageData.top + 'px;' +\n        'transform:' + getTransform(imageData) + ';'\n      );\n\n      if (isChanged) {\n        this.output();\n      }\n    },\n\n    initCropBox: function () {\n      var options = this.options;\n      var aspectRatio = options.aspectRatio;\n      var autoCropArea = num(options.autoCropArea) || 0.8;\n      var canvasData = this.canvasData;\n      var cropBoxData = {\n            width: canvasData.width,\n            height: canvasData.height\n          };\n\n      if (aspectRatio) {\n        if (canvasData.height * aspectRatio > canvasData.width) {\n          cropBoxData.height = cropBoxData.width / aspectRatio;\n        } else {\n          cropBoxData.width = cropBoxData.height * aspectRatio;\n        }\n      }\n\n      this.cropBoxData = cropBoxData;\n      this.limitCropBox(true, true);\n\n      // Initialize auto crop area\n      cropBoxData.width = min(\n        max(cropBoxData.width, cropBoxData.minWidth),\n        cropBoxData.maxWidth\n      );\n      cropBoxData.height = min(\n        max(cropBoxData.height, cropBoxData.minHeight),\n        cropBoxData.maxHeight\n      );\n\n      // The width/height of auto crop area must large than \"minWidth/Height\"\n      cropBoxData.width = max(\n        cropBoxData.minWidth,\n        cropBoxData.width * autoCropArea\n      );\n      cropBoxData.height = max(\n        cropBoxData.minHeight,\n        cropBoxData.height * autoCropArea\n      );\n      cropBoxData.oldLeft = cropBoxData.left = canvasData.left + (canvasData.width - cropBoxData.width) / 2;\n      cropBoxData.oldTop = cropBoxData.top = canvasData.top + (canvasData.height - cropBoxData.height) / 2;\n\n      this.initialCropBoxData = extend({}, cropBoxData);\n    },\n\n    limitCropBox: function (isSizeLimited, isPositionLimited) {\n      var options = this.options;\n      var aspectRatio = options.aspectRatio;\n      var containerData = this.containerData;\n      var containerWidth = containerData.width;\n      var containerHeight = containerData.height;\n      var canvasData = this.canvasData;\n      var cropBoxData = this.cropBoxData;\n      var isLimited = this.isLimited;\n      var minCropBoxWidth;\n      var minCropBoxHeight;\n      var maxCropBoxWidth;\n      var maxCropBoxHeight;\n\n      if (isSizeLimited) {\n        minCropBoxWidth = num(options.minCropBoxWidth) || 0;\n        minCropBoxHeight = num(options.minCropBoxHeight) || 0;\n\n        // The min/maxCropBoxWidth/Height must be less than containerWidth/Height\n        minCropBoxWidth = min(minCropBoxWidth, containerWidth);\n        minCropBoxHeight = min(minCropBoxHeight, containerHeight);\n        maxCropBoxWidth = min(containerWidth, isLimited ? canvasData.width : containerWidth);\n        maxCropBoxHeight = min(containerHeight, isLimited ? canvasData.height : containerHeight);\n\n        if (aspectRatio) {\n          if (minCropBoxWidth && minCropBoxHeight) {\n            if (minCropBoxHeight * aspectRatio > minCropBoxWidth) {\n              minCropBoxHeight = minCropBoxWidth / aspectRatio;\n            } else {\n              minCropBoxWidth = minCropBoxHeight * aspectRatio;\n            }\n          } else if (minCropBoxWidth) {\n            minCropBoxHeight = minCropBoxWidth / aspectRatio;\n          } else if (minCropBoxHeight) {\n            minCropBoxWidth = minCropBoxHeight * aspectRatio;\n          }\n\n          if (maxCropBoxHeight * aspectRatio > maxCropBoxWidth) {\n            maxCropBoxHeight = maxCropBoxWidth / aspectRatio;\n          } else {\n            maxCropBoxWidth = maxCropBoxHeight * aspectRatio;\n          }\n        }\n\n        // The minWidth/Height must be less than maxWidth/Height\n        cropBoxData.minWidth = min(minCropBoxWidth, maxCropBoxWidth);\n        cropBoxData.minHeight = min(minCropBoxHeight, maxCropBoxHeight);\n        cropBoxData.maxWidth = maxCropBoxWidth;\n        cropBoxData.maxHeight = maxCropBoxHeight;\n      }\n\n      if (isPositionLimited) {\n        if (isLimited) {\n          cropBoxData.minLeft = max(0, canvasData.left);\n          cropBoxData.minTop = max(0, canvasData.top);\n          cropBoxData.maxLeft = min(containerWidth, canvasData.left + canvasData.width) - cropBoxData.width;\n          cropBoxData.maxTop = min(containerHeight, canvasData.top + canvasData.height) - cropBoxData.height;\n        } else {\n          cropBoxData.minLeft = 0;\n          cropBoxData.minTop = 0;\n          cropBoxData.maxLeft = containerWidth - cropBoxData.width;\n          cropBoxData.maxTop = containerHeight - cropBoxData.height;\n        }\n      }\n    },\n\n    renderCropBox: function () {\n      var options = this.options;\n      var containerData = this.containerData;\n      var containerWidth = containerData.width;\n      var containerHeight = containerData.height;\n      var cropBoxData = this.cropBoxData;\n\n      if (cropBoxData.width > cropBoxData.maxWidth || cropBoxData.width < cropBoxData.minWidth) {\n        cropBoxData.left = cropBoxData.oldLeft;\n      }\n\n      if (cropBoxData.height > cropBoxData.maxHeight || cropBoxData.height < cropBoxData.minHeight) {\n        cropBoxData.top = cropBoxData.oldTop;\n      }\n\n      cropBoxData.width = min(\n        max(cropBoxData.width, cropBoxData.minWidth),\n        cropBoxData.maxWidth\n      );\n      cropBoxData.height = min(\n        max(cropBoxData.height, cropBoxData.minHeight),\n        cropBoxData.maxHeight\n      );\n\n      this.limitCropBox(false, true);\n\n      cropBoxData.oldLeft = cropBoxData.left = min(\n        max(cropBoxData.left, cropBoxData.minLeft),\n        cropBoxData.maxLeft\n      );\n      cropBoxData.oldTop = cropBoxData.top = min(\n        max(cropBoxData.top, cropBoxData.minTop),\n        cropBoxData.maxTop\n      );\n\n      if (options.movable && options.cropBoxDataMovable) {\n\n        // Turn to move the canvas when the crop box is equal to the container\n        setData(this.face, DATA_ACTION, (cropBoxData.width === containerWidth && cropBoxData.height === containerHeight) ? ACTION_MOVE : ACTION_ALL);\n      }\n\n      this.cropBox.style.cssText = (\n        'width:' + cropBoxData.width + 'px;' +\n        'height:' + cropBoxData.height + 'px;' +\n        'left:' + cropBoxData.left + 'px;' +\n        'top:' + cropBoxData.top + 'px;'\n      );\n\n      if (this.isCropped && this.isLimited) {\n        this.limitCanvas(true, true);\n      }\n\n      if (!this.isDisabled) {\n        this.output();\n      }\n    },\n\n    output: function () {\n      var options = this.options;\n\n      this.preview();\n\n      if (this.isCompleted && isFunction(options.crop)) {\n        options.crop.call(this.element, this.getData());\n      }\n    }\n  });\n","  extend(prototype, {\n    initPreview: function () {\n      var preview = this.options.preview;\n      var image = document.createElement('img');\n      var crossOrigin = this.crossOrigin;\n      var url = this.url;\n      var previews;\n\n      setCrossOrigin(image, crossOrigin);\n      image.src = url;\n      appendChild(this.viewBox, image);\n\n      if (!preview) {\n        return;\n      }\n\n      this.previews = previews = querySelectorAll(document, preview);\n      each(previews, function (element) {\n        var image = document.createElement('img');\n\n        // Save the original size for recover\n        setData(element, DATA_PREVIEW, {\n          width: element.offsetWidth,\n          height: element.offsetHeight,\n          html: element.innerHTML\n        });\n\n        setCrossOrigin(image, crossOrigin);\n        image.src = url;\n\n        /**\n         * Override img element styles\n         * Add `display:block` to avoid margin top issue\n         * Add `height:auto` to override `height` attribute on IE8\n         * (Occur only when margin-top <= -height)\n         */\n        image.style.cssText = (\n          'display:block;width:100%;height:auto;' +\n          'min-width:0!important;min-height:0!important;' +\n          'max-width:none!important;max-height:none!important;' +\n          'image-orientation:0deg!important;\"'\n        );\n\n        empty(element);\n        appendChild(element, image);\n      });\n    },\n\n    resetPreview: function () {\n      each(this.previews, function (element) {\n        var data = getData(element, DATA_PREVIEW);\n\n        element.style.width = data.width + 'px';\n        element.style.height = data.height + 'px';\n        element.innerHTML = data.html;\n        removeData(element, DATA_PREVIEW);\n      });\n    },\n\n    preview: function () {\n      var imageData = this.imageData;\n      var canvasData = this.canvasData;\n      var cropBoxData = this.cropBoxData;\n      var cropBoxWidth = cropBoxData.width;\n      var cropBoxHeight = cropBoxData.height;\n      var width = imageData.width;\n      var height = imageData.height;\n      var left = cropBoxData.left - canvasData.left - imageData.left;\n      var top = cropBoxData.top - canvasData.top - imageData.top;\n\n      if (!this.isCropped || this.isDisabled) {\n        return;\n      }\n\n      querySelector(this.viewBox, 'img').style.cssText = (\n        'width:' + width + 'px;' +\n        'height:' + height + 'px;' +\n        'margin-left:' + -left + 'px;' +\n        'margin-top:' + -top + 'px;' +\n        'transform:' + getTransform(imageData) + ';'\n      );\n\n      each(this.previews, function (element) {\n        var imageStyle = querySelector(element, 'img').style;\n        var data = getData(element, DATA_PREVIEW);\n        var originalWidth = data.width;\n        var originalHeight = data.height;\n        var newWidth = originalWidth;\n        var newHeight = originalHeight;\n        var ratio = 1;\n\n        if (cropBoxWidth) {\n          ratio = originalWidth / cropBoxWidth;\n          newHeight = cropBoxHeight * ratio;\n        }\n\n        if (cropBoxHeight && newHeight > originalHeight) {\n          ratio = originalHeight / cropBoxHeight;\n          newWidth = cropBoxWidth * ratio;\n          newHeight = originalHeight;\n        }\n\n        element.style.width = newWidth + 'px';\n        element.style.height = newHeight + 'px';\n        imageStyle.width = width * ratio + 'px';\n        imageStyle.height = height * ratio + 'px';\n        imageStyle.marginLeft = -left * ratio + 'px';\n        imageStyle.marginTop = -top * ratio + 'px';\n        imageStyle.transform = getTransform(imageData);\n      });\n    }\n  });\n","  extend(prototype, {\n    bind: function () {\n      var options = this.options;\n      var cropper = this.cropper;\n\n      addListener(cropper, EVENT_MOUSE_DOWN, proxy(this.cropStart, this));\n\n      if (options.zoomable && options.zoomOnWheel) {\n        addListener(cropper, EVENT_WHEEL, proxy(this.wheel, this));\n      }\n\n      if (options.toggleDragModeOnDblclick) {\n        addListener(cropper, EVENT_DBLCLICK, proxy(this.dblclick, this));\n      }\n\n      addListener(document, EVENT_MOUSE_MOVE, (this._cropMove = proxy(this.cropMove, this)));\n      addListener(document, EVENT_MOUSE_UP, (this._cropEnd = proxy(this.cropEnd, this)));\n\n      if (options.responsive) {\n        addListener(window, EVENT_RESIZE, (this._resize = proxy(this.resize, this)));\n      }\n    },\n\n    unbind: function () {\n      var options = this.options;\n      var cropper = this.cropper;\n\n      removeListener(cropper, EVENT_MOUSE_DOWN, this.cropStart);\n\n      if (options.zoomable && options.zoomOnWheel) {\n        removeListener(cropper, EVENT_WHEEL, this.wheel);\n      }\n\n      if (options.toggleDragModeOnDblclick) {\n        removeListener(cropper, EVENT_DBLCLICK, this.dblclick);\n      }\n\n      removeListener(document, EVENT_MOUSE_MOVE, this._cropMove);\n      removeListener(document, EVENT_MOUSE_UP, this._cropEnd);\n\n      if (options.responsive) {\n        removeListener(window, EVENT_RESIZE, this._resize);\n      }\n    }\n  });\n","  extend(prototype, {\n    resize: function () {\n      var container = this.container;\n      var containerData = this.containerData;\n      var canvasData;\n      var cropBoxData;\n      var ratio;\n\n      // Check `container` is necessary for IE8\n      if (this.isDisabled || !containerData) {\n        return;\n      }\n\n      ratio = container.offsetWidth / containerData.width;\n\n      // Resize when width changed or height changed\n      if (ratio !== 1 || container.offsetHeight !== containerData.height) {\n        canvasData = this.getCanvasData();\n        cropBoxData = this.getCropBoxData();\n\n        this.render();\n        this.setCanvasData(each(canvasData, function (n, i) {\n          canvasData[i] = n * ratio;\n        }));\n        this.setCropBoxData(each(cropBoxData, function (n, i) {\n          cropBoxData[i] = n * ratio;\n        }));\n      }\n    },\n\n    dblclick: function () {\n      if (this.isDisabled) {\n        return;\n      }\n\n      this.setDragMode(hasClass(this.dragBox, CLASS_CROP) ? ACTION_MOVE : ACTION_CROP);\n    },\n\n    wheel: function (event) {\n      var e = getEvent(event);\n      var ratio = num(this.options.wheelZoomRatio) || 0.1;\n      var delta = 1;\n\n      if (this.isDisabled) {\n        return;\n      }\n\n      preventDefault(e);\n\n      if (e.deltaY) {\n        delta = e.deltaY > 0 ? 1 : -1;\n      } else if (e.wheelDelta) {\n        delta = -e.wheelDelta / 120;\n      } else if (e.detail) {\n        delta = e.detail > 0 ? 1 : -1;\n      }\n\n      this.zoom(-delta * ratio, e);\n    },\n\n    cropStart: function (event) {\n      var options = this.options;\n      var e = getEvent(event);\n      var touches = e.touches;\n      var touchesLength;\n      var touch;\n      var action;\n\n      if (this.isDisabled) {\n        return;\n      }\n\n      if (touches) {\n        touchesLength = touches.length;\n\n        if (touchesLength > 1) {\n          if (options.zoomable && options.zoomOnTouch && touchesLength === 2) {\n            touch = touches[1];\n            this.startX2 = touch.pageX;\n            this.startY2 = touch.pageY;\n            action = ACTION_ZOOM;\n          } else {\n            return;\n          }\n        }\n\n        touch = touches[0];\n      }\n\n      action = action || getData(e.target, DATA_ACTION);\n\n      if (REGEXP_ACTIONS.test(action)) {\n        if (isFunction(options.cropstart) && options.cropstart.call(this.element, {\n          originalEvent: e,\n          action: action\n        }) === false) {\n          return;\n        }\n\n        preventDefault(e);\n\n        this.action = action;\n        this.cropping = false;\n\n        this.startX = touch ? touch.pageX : e.pageX;\n        this.startY = touch ? touch.pageY : e.pageY;\n\n        if (action === ACTION_CROP) {\n          this.cropping = true;\n          addClass(this.dragBox, CLASS_MODAL);\n        }\n      }\n    },\n\n    cropMove: function (event) {\n      var options = this.options;\n      var e = getEvent(event);\n      var touches = e.touches;\n      var action = this.action;\n      var touchesLength;\n      var touch;\n\n      if (this.isDisabled) {\n        return;\n      }\n\n      if (touches) {\n        touchesLength = touches.length;\n\n        if (touchesLength > 1) {\n          if (options.zoomable && options.zoomOnTouch && touchesLength === 2) {\n            touch = touches[1];\n            this.endX2 = touch.pageX;\n            this.endY2 = touch.pageY;\n          } else {\n            return;\n          }\n        }\n\n        touch = touches[0];\n      }\n\n      if (action) {\n        if (isFunction(options.cropmove) && options.cropmove.call(this.element, {\n          originalEvent: e,\n          action: action\n        }) === false) {\n          return;\n        }\n\n        preventDefault(e);\n\n        this.endX = touch ? touch.pageX : e.pageX;\n        this.endY = touch ? touch.pageY : e.pageY;\n\n        this.change(e.shiftKey, action === ACTION_ZOOM ? e : null);\n      }\n    },\n\n    cropEnd: function (event) {\n      var options = this.options;\n      var e = getEvent(event);\n      var action = this.action;\n\n      if (this.isDisabled) {\n        return;\n      }\n\n      if (action) {\n        preventDefault(e);\n\n        if (this.cropping) {\n          this.cropping = false;\n          toggleClass(this.dragBox, CLASS_MODAL, this.isCropped && options.modal);\n        }\n\n        this.action = '';\n\n        if (isFunction(options.cropend)) {\n          options.cropend.call(this.element, {\n            originalEvent: e,\n            action: action\n          });\n        }\n      }\n    }\n  });\n","  extend(prototype, {\n    change: function (shiftKey, originalEvent) {\n      var options = this.options;\n      var aspectRatio = options.aspectRatio;\n      var action = this.action;\n      var containerData = this.containerData;\n      var canvasData = this.canvasData;\n      var cropBoxData = this.cropBoxData;\n      var width = cropBoxData.width;\n      var height = cropBoxData.height;\n      var left = cropBoxData.left;\n      var top = cropBoxData.top;\n      var right = left + width;\n      var bottom = top + height;\n      var minLeft = 0;\n      var minTop = 0;\n      var maxWidth = containerData.width;\n      var maxHeight = containerData.height;\n      var renderable = true;\n      var offset;\n      var range;\n\n      // Locking aspect ratio in \"free mode\" by holding shift key\n      if (!aspectRatio && shiftKey) {\n        aspectRatio = width && height ? width / height : 1;\n      }\n\n      if (this.isLimited) {\n        minLeft = cropBoxData.minLeft;\n        minTop = cropBoxData.minTop;\n        maxWidth = minLeft + min(containerData.width, canvasData.width);\n        maxHeight = minTop + min(containerData.height, canvasData.height);\n      }\n\n      range = {\n        x: this.endX - this.startX,\n        y: this.endY - this.startY\n      };\n\n      if (aspectRatio) {\n        range.X = range.y * aspectRatio;\n        range.Y = range.x / aspectRatio;\n      }\n\n      switch (action) {\n        // Move crop box\n        case ACTION_ALL:\n          left += range.x;\n          top += range.y;\n          break;\n\n        // Resize crop box\n        case ACTION_EAST:\n          if (range.x >= 0 && (right >= maxWidth || aspectRatio &&\n            (top <= minTop || bottom >= maxHeight))) {\n\n            renderable = false;\n            break;\n          }\n\n          width += range.x;\n\n          if (aspectRatio) {\n            height = width / aspectRatio;\n            top -= range.Y / 2;\n          }\n\n          if (width < 0) {\n            action = ACTION_WEST;\n            width = 0;\n          }\n\n          break;\n\n        case ACTION_NORTH:\n          if (range.y <= 0 && (top <= minTop || aspectRatio &&\n            (left <= minLeft || right >= maxWidth))) {\n\n            renderable = false;\n            break;\n          }\n\n          height -= range.y;\n          top += range.y;\n\n          if (aspectRatio) {\n            width = height * aspectRatio;\n            left += range.X / 2;\n          }\n\n          if (height < 0) {\n            action = ACTION_SOUTH;\n            height = 0;\n          }\n\n          break;\n\n        case ACTION_WEST:\n          if (range.x <= 0 && (left <= minLeft || aspectRatio &&\n            (top <= minTop || bottom >= maxHeight))) {\n\n            renderable = false;\n            break;\n          }\n\n          width -= range.x;\n          left += range.x;\n\n          if (aspectRatio) {\n            height = width / aspectRatio;\n            top += range.Y / 2;\n          }\n\n          if (width < 0) {\n            action = ACTION_EAST;\n            width = 0;\n          }\n\n          break;\n\n        case ACTION_SOUTH:\n          if (range.y >= 0 && (bottom >= maxHeight || aspectRatio &&\n            (left <= minLeft || right >= maxWidth))) {\n\n            renderable = false;\n            break;\n          }\n\n          height += range.y;\n\n          if (aspectRatio) {\n            width = height * aspectRatio;\n            left -= range.X / 2;\n          }\n\n          if (height < 0) {\n            action = ACTION_NORTH;\n            height = 0;\n          }\n\n          break;\n\n        case ACTION_NORTH_EAST:\n          if (aspectRatio) {\n            if (range.y <= 0 && (top <= minTop || right >= maxWidth)) {\n              renderable = false;\n              break;\n            }\n\n            height -= range.y;\n            top += range.y;\n            width = height * aspectRatio;\n          } else {\n            if (range.x >= 0) {\n              if (right < maxWidth) {\n                width += range.x;\n              } else if (range.y <= 0 && top <= minTop) {\n                renderable = false;\n              }\n            } else {\n              width += range.x;\n            }\n\n            if (range.y <= 0) {\n              if (top > minTop) {\n                height -= range.y;\n                top += range.y;\n              }\n            } else {\n              height -= range.y;\n              top += range.y;\n            }\n          }\n\n          if (width < 0 && height < 0) {\n            action = ACTION_SOUTH_WEST;\n            height = 0;\n            width = 0;\n          } else if (width < 0) {\n            action = ACTION_NORTH_WEST;\n            width = 0;\n          } else if (height < 0) {\n            action = ACTION_SOUTH_EAST;\n            height = 0;\n          }\n\n          break;\n\n        case ACTION_NORTH_WEST:\n          if (aspectRatio) {\n            if (range.y <= 0 && (top <= minTop || left <= minLeft)) {\n              renderable = false;\n              break;\n            }\n\n            height -= range.y;\n            top += range.y;\n            width = height * aspectRatio;\n            left += range.X;\n          } else {\n            if (range.x <= 0) {\n              if (left > minLeft) {\n                width -= range.x;\n                left += range.x;\n              } else if (range.y <= 0 && top <= minTop) {\n                renderable = false;\n              }\n            } else {\n              width -= range.x;\n              left += range.x;\n            }\n\n            if (range.y <= 0) {\n              if (top > minTop) {\n                height -= range.y;\n                top += range.y;\n              }\n            } else {\n              height -= range.y;\n              top += range.y;\n            }\n          }\n\n          if (width < 0 && height < 0) {\n            action = ACTION_SOUTH_EAST;\n            height = 0;\n            width = 0;\n          } else if (width < 0) {\n            action = ACTION_NORTH_EAST;\n            width = 0;\n          } else if (height < 0) {\n            action = ACTION_SOUTH_WEST;\n            height = 0;\n          }\n\n          break;\n\n        case ACTION_SOUTH_WEST:\n          if (aspectRatio) {\n            if (range.x <= 0 && (left <= minLeft || bottom >= maxHeight)) {\n              renderable = false;\n              break;\n            }\n\n            width -= range.x;\n            left += range.x;\n            height = width / aspectRatio;\n          } else {\n            if (range.x <= 0) {\n              if (left > minLeft) {\n                width -= range.x;\n                left += range.x;\n              } else if (range.y >= 0 && bottom >= maxHeight) {\n                renderable = false;\n              }\n            } else {\n              width -= range.x;\n              left += range.x;\n            }\n\n            if (range.y >= 0) {\n              if (bottom < maxHeight) {\n                height += range.y;\n              }\n            } else {\n              height += range.y;\n            }\n          }\n\n          if (width < 0 && height < 0) {\n            action = ACTION_NORTH_EAST;\n            height = 0;\n            width = 0;\n          } else if (width < 0) {\n            action = ACTION_SOUTH_EAST;\n            width = 0;\n          } else if (height < 0) {\n            action = ACTION_NORTH_WEST;\n            height = 0;\n          }\n\n          break;\n\n        case ACTION_SOUTH_EAST:\n          if (aspectRatio) {\n            if (range.x >= 0 && (right >= maxWidth || bottom >= maxHeight)) {\n              renderable = false;\n              break;\n            }\n\n            width += range.x;\n            height = width / aspectRatio;\n          } else {\n            if (range.x >= 0) {\n              if (right < maxWidth) {\n                width += range.x;\n              } else if (range.y >= 0 && bottom >= maxHeight) {\n                renderable = false;\n              }\n            } else {\n              width += range.x;\n            }\n\n            if (range.y >= 0) {\n              if (bottom < maxHeight) {\n                height += range.y;\n              }\n            } else {\n              height += range.y;\n            }\n          }\n\n          if (width < 0 && height < 0) {\n            action = ACTION_NORTH_WEST;\n            height = 0;\n            width = 0;\n          } else if (width < 0) {\n            action = ACTION_SOUTH_WEST;\n            width = 0;\n          } else if (height < 0) {\n            action = ACTION_NORTH_EAST;\n            height = 0;\n          }\n\n          break;\n\n        // Move canvas\n        case ACTION_MOVE:\n          this.move(range.x, range.y);\n          renderable = false;\n          break;\n\n        // Zoom canvas\n        case ACTION_ZOOM:\n          this.zoom((function (x1, y1, x2, y2) {\n            var z1 = sqrt(x1 * x1 + y1 * y1);\n            var z2 = sqrt(x2 * x2 + y2 * y2);\n\n            return (z2 - z1) / z1;\n          })(\n            abs(this.startX - this.startX2),\n            abs(this.startY - this.startY2),\n            abs(this.endX - this.endX2),\n            abs(this.endY - this.endY2)\n          ), originalEvent);\n          this.startX2 = this.endX2;\n          this.startY2 = this.endY2;\n          renderable = false;\n          break;\n\n        // Create crop box\n        case ACTION_CROP:\n          if (!range.x || !range.y) {\n            renderable = false;\n            break;\n          }\n\n          offset = getOffset(this.cropper);\n          left = this.startX - offset.left;\n          top = this.startY - offset.top;\n          width = cropBoxData.minWidth;\n          height = cropBoxData.minHeight;\n\n          if (range.x > 0) {\n            action = range.y > 0 ? ACTION_SOUTH_EAST : ACTION_NORTH_EAST;\n          } else if (range.x < 0) {\n            left -= width;\n            action = range.y > 0 ? ACTION_SOUTH_WEST : ACTION_NORTH_WEST;\n          }\n\n          if (range.y < 0) {\n            top -= height;\n          }\n\n          // Show the crop box if is hidden\n          if (!this.isCropped) {\n            removeClass(this.cropBox, CLASS_HIDDEN);\n            this.isCropped = true;\n\n            if (this.isLimited) {\n              this.limitCropBox(true, true);\n            }\n          }\n\n          break;\n\n        // No default\n      }\n\n      if (renderable) {\n        cropBoxData.width = width;\n        cropBoxData.height = height;\n        cropBoxData.left = left;\n        cropBoxData.top = top;\n        this.action = action;\n\n        this.renderCropBox();\n      }\n\n      // Override\n      this.startX = this.endX;\n      this.startY = this.endY;\n    }\n  });\n","  extend(prototype, {\n\n    // Show the crop box manually\n    crop: function () {\n      if (this.isBuilt && !this.isDisabled) {\n        if (!this.isCropped) {\n          this.isCropped = true;\n          this.limitCropBox(true, true);\n\n          if (this.options.modal) {\n            addClass(this.dragBox, CLASS_MODAL);\n          }\n\n          removeClass(this.cropBox, CLASS_HIDDEN);\n        }\n\n        this.setCropBoxData(this.initialCropBoxData);\n      }\n\n      return this;\n    },\n\n    // Reset the image and crop box to their initial states\n    reset: function () {\n      if (this.isBuilt && !this.isDisabled) {\n        this.imageData = extend({}, this.initialImageData);\n        this.canvasData = extend({}, this.initialCanvasData);\n        this.cropBoxData = extend({}, this.initialCropBoxData);\n\n        this.renderCanvas();\n\n        if (this.isCropped) {\n          this.renderCropBox();\n        }\n      }\n\n      return this;\n    },\n\n    // Clear the crop box\n    clear: function () {\n      if (this.isCropped && !this.isDisabled) {\n        extend(this.cropBoxData, {\n          left: 0,\n          top: 0,\n          width: 0,\n          height: 0\n        });\n\n        this.isCropped = false;\n        this.renderCropBox();\n\n        this.limitCanvas();\n\n        // Render canvas after crop box rendered\n        this.renderCanvas();\n\n        removeClass(this.dragBox, CLASS_MODAL);\n        addClass(this.cropBox, CLASS_HIDDEN);\n      }\n\n      return this;\n    },\n\n    /**\n     * Replace the image's src and rebuild the cropper\n     *\n     * @param {String} url\n     */\n    replace: function (url) {\n      if (!this.isDisabled && url) {\n        if (this.isImg) {\n          this.isReplaced = true;\n          this.element.src = url;\n        }\n\n        // Clear previous data\n        this.options.data = null;\n        this.load(url);\n      }\n\n      return this;\n    },\n\n    // Enable (unfreeze) the cropper\n    enable: function () {\n      if (this.isBuilt) {\n        this.isDisabled = false;\n        removeClass(this.cropper, CLASS_DISABLED);\n      }\n\n      return this;\n    },\n\n    // Disable (freeze) the cropper\n    disable: function () {\n      if (this.isBuilt) {\n        this.isDisabled = true;\n        addClass(this.cropper, CLASS_DISABLED);\n      }\n\n      return this;\n    },\n\n    // Destroy the cropper and remove the instance from the image\n    destroy: function () {\n      var element = this.element;\n      var image = this.image;\n\n      if (this.isLoaded) {\n        if (this.isImg && this.isReplaced) {\n          element.src = this.originalUrl;\n        }\n\n        this.unbuild();\n        removeClass(element, CLASS_HIDDEN);\n      } else {\n        if (this.isImg) {\n          element.off(EVENT_LOAD, this.start);\n        } else if (image) {\n          removeChild(image);\n        }\n      }\n\n      removeData(element, NAMESPACE);\n\n      return this;\n    },\n\n    /**\n     * Move the canvas with relative offsets\n     *\n     * @param {Number} offsetX\n     * @param {Number} offsetY (optional)\n     */\n    move: function (offsetX, offsetY) {\n      var canvasData = this.canvasData;\n\n      return this.moveTo(\n        isUndefined(offsetX) ? offsetX : canvasData.left + num(offsetX),\n        isUndefined(offsetY) ? offsetY : canvasData.top + num(offsetY)\n      );\n    },\n\n    /**\n     * Move the canvas to an absolute point\n     *\n     * @param {Number} x\n     * @param {Number} y (optional)\n     */\n    moveTo: function (x, y) {\n      var canvasData = this.canvasData;\n      var isChanged = false;\n\n      // If \"y\" is not present, its default value is \"x\"\n      if (isUndefined(y)) {\n        y = x;\n      }\n\n      x = num(x);\n      y = num(y);\n\n      if (this.isBuilt && !this.isDisabled && this.options.movable) {\n        if (isNumber(x)) {\n          canvasData.left = x;\n          isChanged = true;\n        }\n\n        if (isNumber(y)) {\n          canvasData.top = y;\n          isChanged = true;\n        }\n\n        if (isChanged) {\n          this.renderCanvas(true);\n        }\n      }\n\n      return this;\n    },\n\n    /**\n     * Zoom the canvas with a relative ratio\n     *\n     * @param {Number} ratio\n     * @param {Event} _originalEvent (private)\n     */\n    zoom: function (ratio, _originalEvent) {\n      var canvasData = this.canvasData;\n\n      ratio = num(ratio);\n\n      if (ratio < 0) {\n        ratio =  1 / (1 - ratio);\n      } else {\n        ratio = 1 + ratio;\n      }\n\n      return this.zoomTo(canvasData.width * ratio / canvasData.naturalWidth, _originalEvent);\n    },\n\n    /**\n     * Zoom the canvas to an absolute ratio\n     *\n     * @param {Number} ratio\n     * @param {Event} _originalEvent (private)\n     */\n    zoomTo: function (ratio, _originalEvent) {\n      var options = this.options;\n      var canvasData = this.canvasData;\n      var width = canvasData.width;\n      var height = canvasData.height;\n      var naturalWidth = canvasData.naturalWidth;\n      var naturalHeight = canvasData.naturalHeight;\n      var newWidth;\n      var newHeight;\n\n      ratio = num(ratio);\n\n      if (ratio >= 0 && this.isBuilt && !this.isDisabled && options.zoomable) {\n        newWidth = naturalWidth * ratio;\n        newHeight = naturalHeight * ratio;\n\n        if (isFunction(options.zoom) && options.zoom.call(this.element, {\n          originalEvent: _originalEvent,\n          oldRatio: width / naturalWidth,\n          ratio: newWidth / naturalWidth\n        }) === false) {\n          return this;\n        }\n\n        canvasData.left -= (newWidth - width) / 2;\n        canvasData.top -= (newHeight - height) / 2;\n        canvasData.width = newWidth;\n        canvasData.height = newHeight;\n        this.renderCanvas(true);\n      }\n\n      return this;\n    },\n\n    /**\n     * Rotate the canvas with a relative degree\n     *\n     * @param {Number} degree\n     */\n    rotate: function (degree) {\n      return this.rotateTo((this.imageData.rotate || 0) + num(degree));\n    },\n\n    /**\n     * Rotate the canvas to an absolute degree\n     * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#rotate()\n     *\n     * @param {Number} degree\n     */\n    rotateTo: function (degree) {\n      degree = num(degree);\n\n      if (isNumber(degree) && this.isBuilt && !this.isDisabled && this.options.rotatable) {\n        this.imageData.rotate = degree % 360;\n        this.isRotated = true;\n        this.renderCanvas(true);\n      }\n\n      return this;\n    },\n\n    /**\n     * Scale the image\n     * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#scale()\n     *\n     * @param {Number} scaleX\n     * @param {Number} scaleY (optional)\n     */\n    scale: function (scaleX, scaleY) {\n      var imageData = this.imageData;\n      var isChanged = false;\n\n      // If \"scaleY\" is not present, its default value is \"scaleX\"\n      if (isUndefined(scaleY)) {\n        scaleY = scaleX;\n      }\n\n      scaleX = num(scaleX);\n      scaleY = num(scaleY);\n\n      if (this.isBuilt && !this.isDisabled && this.options.scalable) {\n        if (isNumber(scaleX)) {\n          imageData.scaleX = scaleX;\n          isChanged = true;\n        }\n\n        if (isNumber(scaleY)) {\n          imageData.scaleY = scaleY;\n          isChanged = true;\n        }\n\n        if (isChanged) {\n          this.renderImage(true);\n        }\n      }\n\n      return this;\n    },\n\n    /**\n     * Scale the abscissa of the image\n     *\n     * @param {Number} scaleX\n     */\n    scaleX: function (scaleX) {\n      var scaleY = this.imageData.scaleY;\n\n      return this.scale(scaleX, isNumber(scaleY) ? scaleY : 1);\n    },\n\n    /**\n     * Scale the ordinate of the image\n     *\n     * @param {Number} scaleY\n     */\n    scaleY: function (scaleY) {\n      var scaleX = this.imageData.scaleX;\n\n      return this.scale(isNumber(scaleX) ? scaleX : 1, scaleY);\n    },\n\n    /**\n     * Get the cropped area position and size data (base on the original image)\n     *\n     * @param {Boolean} isRounded (optional)\n     * @return {Object} data\n     */\n    getData: function (isRounded) {\n      var options = this.options;\n      var imageData = this.imageData;\n      var canvasData = this.canvasData;\n      var cropBoxData = this.cropBoxData;\n      var ratio;\n      var data;\n\n      if (this.isBuilt && this.isCropped) {\n        data = {\n          x: cropBoxData.left - canvasData.left,\n          y: cropBoxData.top - canvasData.top,\n          width: cropBoxData.width,\n          height: cropBoxData.height\n        };\n\n        ratio = imageData.width / imageData.naturalWidth;\n\n        each(data, function (n, i) {\n          n = n / ratio;\n          data[i] = isRounded ? round(n) : n;\n        });\n\n      } else {\n        data = {\n          x: 0,\n          y: 0,\n          width: 0,\n          height: 0\n        };\n      }\n\n      if (options.rotatable) {\n        data.rotate = imageData.rotate || 0;\n      }\n\n      if (options.scalable) {\n        data.scaleX = imageData.scaleX || 1;\n        data.scaleY = imageData.scaleY || 1;\n      }\n\n      return data;\n    },\n\n    /**\n     * Set the cropped area position and size with new data\n     *\n     * @param {Object} data\n     */\n    setData: function (data) {\n      var options = this.options;\n      var imageData = this.imageData;\n      var canvasData = this.canvasData;\n      var cropBoxData = {};\n      var isRotated;\n      var isScaled;\n      var ratio;\n\n      if (isFunction(data)) {\n        data = data.call(this.element);\n      }\n\n      if (this.isBuilt && !this.isDisabled && isPlainObject(data)) {\n        if (options.rotatable) {\n          if (isNumber(data.rotate) && data.rotate !== imageData.rotate) {\n            imageData.rotate = data.rotate;\n            this.isRotated = isRotated = true;\n          }\n        }\n\n        if (options.scalable) {\n          if (isNumber(data.scaleX) && data.scaleX !== imageData.scaleX) {\n            imageData.scaleX = data.scaleX;\n            isScaled = true;\n          }\n\n          if (isNumber(data.scaleY) && data.scaleY !== imageData.scaleY) {\n            imageData.scaleY = data.scaleY;\n            isScaled = true;\n          }\n        }\n\n        if (isRotated) {\n          this.renderCanvas();\n        } else if (isScaled) {\n          this.renderImage();\n        }\n\n        ratio = imageData.width / imageData.naturalWidth;\n\n        if (isNumber(data.x)) {\n          cropBoxData.left = data.x * ratio + canvasData.left;\n        }\n\n        if (isNumber(data.y)) {\n          cropBoxData.top = data.y * ratio + canvasData.top;\n        }\n\n        if (isNumber(data.width)) {\n          cropBoxData.width = data.width * ratio;\n        }\n\n        if (isNumber(data.height)) {\n          cropBoxData.height = data.height * ratio;\n        }\n\n        this.setCropBoxData(cropBoxData);\n      }\n\n      return this;\n    },\n\n    /**\n     * Get the container size data\n     *\n     * @return {Object} data\n     */\n    getContainerData: function () {\n      return this.isBuilt ? this.containerData : {};\n    },\n\n    /**\n     * Get the image position and size data\n     *\n     * @return {Object} data\n     */\n    getImageData: function () {\n      return this.isLoaded ? this.imageData : {};\n    },\n\n    /**\n     * Get the canvas position and size data\n     *\n     * @return {Object} data\n     */\n    getCanvasData: function () {\n      var canvasData = this.canvasData;\n      var data = {};\n\n      if (this.isBuilt) {\n        each([\n          'left',\n          'top',\n          'width',\n          'height',\n          'naturalWidth',\n          'naturalHeight'\n        ], function (n) {\n          data[n] = canvasData[n];\n        });\n      }\n\n      return data;\n    },\n\n    /**\n     * Set the canvas position and size with new data\n     *\n     * @param {Object} data\n     */\n    setCanvasData: function (data) {\n      var canvasData = this.canvasData;\n      var aspectRatio = canvasData.aspectRatio;\n\n      if (isFunction(data)) {\n        data = data.call(this.element);\n      }\n\n      if (this.isBuilt && !this.isDisabled && isPlainObject(data)) {\n        if (isNumber(data.left)) {\n          canvasData.left = data.left;\n        }\n\n        if (isNumber(data.top)) {\n          canvasData.top = data.top;\n        }\n\n        if (isNumber(data.width)) {\n          canvasData.width = data.width;\n          canvasData.height = data.width / aspectRatio;\n        } else if (isNumber(data.height)) {\n          canvasData.height = data.height;\n          canvasData.width = data.height * aspectRatio;\n        }\n\n        this.renderCanvas(true);\n      }\n\n      return this;\n    },\n\n    /**\n     * Get the crop box position and size data\n     *\n     * @return {Object} data\n     */\n    getCropBoxData: function () {\n      var cropBoxData = this.cropBoxData;\n      var data;\n\n      if (this.isBuilt && this.isCropped) {\n        data = {\n          left: cropBoxData.left,\n          top: cropBoxData.top,\n          width: cropBoxData.width,\n          height: cropBoxData.height\n        };\n      }\n\n      return data || {};\n    },\n\n    /**\n     * Set the crop box position and size with new data\n     *\n     * @param {Object} data\n     */\n    setCropBoxData: function (data) {\n      var cropBoxData = this.cropBoxData;\n      var aspectRatio = this.options.aspectRatio;\n      var isWidthChanged;\n      var isHeightChanged;\n\n      if (isFunction(data)) {\n        data = data.call(this.element);\n      }\n\n      if (this.isBuilt && this.isCropped && !this.isDisabled && isPlainObject(data)) {\n\n        if (isNumber(data.left)) {\n          cropBoxData.left = data.left;\n        }\n\n        if (isNumber(data.top)) {\n          cropBoxData.top = data.top;\n        }\n\n        if (isNumber(data.width) && data.width !== cropBoxData.width) {\n          isWidthChanged = true;\n          cropBoxData.width = data.width;\n        }\n\n        if (isNumber(data.height) && data.height !== cropBoxData.height) {\n          isHeightChanged = true;\n          cropBoxData.height = data.height;\n        }\n\n        if (aspectRatio) {\n          if (isWidthChanged) {\n            cropBoxData.height = cropBoxData.width / aspectRatio;\n          } else if (isHeightChanged) {\n            cropBoxData.width = cropBoxData.height * aspectRatio;\n          }\n        }\n\n        this.renderCropBox();\n      }\n\n      return this;\n    },\n\n    /**\n     * Get a canvas drawn the cropped image\n     *\n     * @param {Object} options (optional)\n     * @return {HTMLCanvasElement} canvas\n     */\n    getCroppedCanvas: function (options) {\n      var originalWidth;\n      var originalHeight;\n      var canvasWidth;\n      var canvasHeight;\n      var scaledWidth;\n      var scaledHeight;\n      var scaledRatio;\n      var aspectRatio;\n      var canvas;\n      var context;\n      var data;\n\n      if (!this.isBuilt || !this.isCropped || !SUPPORT_CANVAS) {\n        return;\n      }\n\n      if (!isPlainObject(options)) {\n        options = {};\n      }\n\n      data = this.getData();\n      originalWidth = data.width;\n      originalHeight = data.height;\n      aspectRatio = originalWidth / originalHeight;\n\n      if (isPlainObject(options)) {\n        scaledWidth = options.width;\n        scaledHeight = options.height;\n\n        if (scaledWidth) {\n          scaledHeight = scaledWidth / aspectRatio;\n          scaledRatio = scaledWidth / originalWidth;\n        } else if (scaledHeight) {\n          scaledWidth = scaledHeight * aspectRatio;\n          scaledRatio = scaledHeight / originalHeight;\n        }\n      }\n\n      // The canvas element will use `Math.floor` on a float number, so round first\n      canvasWidth = round(scaledWidth || originalWidth);\n      canvasHeight = round(scaledHeight || originalHeight);\n\n      canvas = document.createElement('canvas');\n      canvas.width = canvasWidth;\n      canvas.height = canvasHeight;\n      context = canvas.getContext('2d');\n\n      if (options.fillColor) {\n        context.fillStyle = options.fillColor;\n        context.fillRect(0, 0, canvasWidth, canvasHeight);\n      }\n\n      // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D.drawImage\n      context.drawImage.apply(context, (function () {\n        var source = getSourceCanvas(this.image, this.imageData);\n        var sourceWidth = source.width;\n        var sourceHeight = source.height;\n        var args = [source];\n\n        // Source canvas\n        var srcX = data.x;\n        var srcY = data.y;\n        var srcWidth;\n        var srcHeight;\n\n        // Destination canvas\n        var dstX;\n        var dstY;\n        var dstWidth;\n        var dstHeight;\n\n        if (srcX <= -originalWidth || srcX > sourceWidth) {\n          srcX = srcWidth = dstX = dstWidth = 0;\n        } else if (srcX <= 0) {\n          dstX = -srcX;\n          srcX = 0;\n          srcWidth = dstWidth = min(sourceWidth, originalWidth + srcX);\n        } else if (srcX <= sourceWidth) {\n          dstX = 0;\n          srcWidth = dstWidth = min(originalWidth, sourceWidth - srcX);\n        }\n\n        if (srcWidth <= 0 || srcY <= -originalHeight || srcY > sourceHeight) {\n          srcY = srcHeight = dstY = dstHeight = 0;\n        } else if (srcY <= 0) {\n          dstY = -srcY;\n          srcY = 0;\n          srcHeight = dstHeight = min(sourceHeight, originalHeight + srcY);\n        } else if (srcY <= sourceHeight) {\n          dstY = 0;\n          srcHeight = dstHeight = min(originalHeight, sourceHeight - srcY);\n        }\n\n        args.push(srcX, srcY, srcWidth, srcHeight);\n\n        // Scale destination sizes\n        if (scaledRatio) {\n          dstX *= scaledRatio;\n          dstY *= scaledRatio;\n          dstWidth *= scaledRatio;\n          dstHeight *= scaledRatio;\n        }\n\n        // Avoid \"IndexSizeError\" in IE and Firefox\n        if (dstWidth > 0 && dstHeight > 0) {\n          args.push(dstX, dstY, dstWidth, dstHeight);\n        }\n\n        return args;\n      }).call(this));\n\n      return canvas;\n    },\n\n    /**\n     * Change the aspect ratio of the crop box\n     *\n     * @param {Number} aspectRatio\n     */\n    setAspectRatio: function (aspectRatio) {\n      var options = this.options;\n\n      if (!this.isDisabled && !isUndefined(aspectRatio)) {\n\n        // 0 -> NaN\n        options.aspectRatio = max(0, aspectRatio) || NaN;\n\n        if (this.isBuilt) {\n          this.initCropBox();\n\n          if (this.isCropped) {\n            this.renderCropBox();\n          }\n        }\n      }\n\n      return this;\n    },\n\n    /**\n     * Change the drag mode\n     *\n     * @param {String} mode (optional)\n     */\n    setDragMode: function (mode) {\n      var options = this.options;\n      var dragBox = this.dragBox;\n      var face = this.face;\n      var croppable;\n      var movable;\n\n      if (this.isLoaded && !this.isDisabled) {\n        croppable = mode === ACTION_CROP;\n        movable = options.movable && mode === ACTION_MOVE;\n        mode = (croppable || movable) ? mode : ACTION_NONE;\n\n        setData(dragBox, DATA_ACTION, mode);\n        toggleClass(dragBox, CLASS_CROP, croppable);\n        toggleClass(dragBox, CLASS_MOVE, movable);\n\n        if (!options.cropBoxMovable) {\n\n          // Sync drag mode to crop box when it is not movable\n          setData(face, DATA_ACTION, mode);\n          toggleClass(face, CLASS_CROP, croppable);\n          toggleClass(face, CLASS_MOVE, movable);\n        }\n      }\n\n      return this;\n    }\n  });\n","  extend(Cropper.prototype, prototype);\n","  Cropper.DEFAULTS = {\n\n    // Define the view mode of the cropper\n    viewMode: 0, // 0, 1, 2, 3\n\n    // Define the dragging mode of the cropper\n    dragMode: 'crop', // 'crop', 'move' or 'none'\n\n    // Define the aspect ratio of the crop box\n    aspectRatio: NaN,\n\n    // An object with the previous cropping result data\n    data: null,\n\n    // A selector for adding extra containers to preview\n    preview: '',\n\n    // Rebuild when resize the window\n    responsive: true,\n\n    // Check if the target image is cross origin\n    checkCrossOrigin: true,\n\n    // Show the black modal\n    modal: true,\n\n    // Show the dashed lines for guiding\n    guides: true,\n\n    // Show the center indicator for guiding\n    center: true,\n\n    // Show the white modal to highlight the crop box\n    highlight: true,\n\n    // Show the grid background\n    background: true,\n\n    // Enable to crop the image automatically when initialize\n    autoCrop: true,\n\n    // Define the percentage of automatic cropping area when initializes\n    autoCropArea: 0.8,\n\n    // Enable to move the image\n    movable: true,\n\n    // Enable to rotate the image\n    rotatable: true,\n\n    // Enable to scale the image\n    scalable: true,\n\n    // Enable to zoom the image\n    zoomable: true,\n\n    // Enable to zoom the image by dragging touch\n    zoomOnTouch: true,\n\n    // Enable to zoom the image by wheeling mouse\n    zoomOnWheel: true,\n\n    // Define zoom ratio when zoom the image by wheeling mouse\n    wheelZoomRatio: 0.1,\n\n    // Enable to move the crop box\n    cropBoxMovable: true,\n\n    // Enable to resize the crop box\n    cropBoxResizable: true,\n\n    // Toggle drag mode between \"crop\" and \"move\" when click twice on the cropper\n    toggleDragModeOnDblclick: true,\n\n    // Size limitation\n    minCanvasWidth: 0,\n    minCanvasHeight: 0,\n    minCropBoxWidth: 0,\n    minCropBoxHeight: 0,\n    minContainerWidth: 200,\n    minContainerHeight: 100,\n\n    // Shortcuts of events\n    build: null,\n    built: null,\n    cropstart: null,\n    cropmove: null,\n    cropend: null,\n    crop: null,\n    zoom: null\n  };\n","  Cropper.TEMPLATE = (\n    '<div class=\"cropper-container\">' +\n      '<div class=\"cropper-wrap-box\">' +\n        '<div class=\"cropper-canvas\"></div>' +\n      '</div>' +\n      '<div class=\"cropper-drag-box\"></div>' +\n      '<div class=\"cropper-crop-box\">' +\n        '<span class=\"cropper-view-box\"></span>' +\n        '<span class=\"cropper-dashed dashed-h\"></span>' +\n        '<span class=\"cropper-dashed dashed-v\"></span>' +\n        '<span class=\"cropper-center\"></span>' +\n        '<span class=\"cropper-face\"></span>' +\n        '<span class=\"cropper-line line-e\" data-action=\"e\"></span>' +\n        '<span class=\"cropper-line line-n\" data-action=\"n\"></span>' +\n        '<span class=\"cropper-line line-w\" data-action=\"w\"></span>' +\n        '<span class=\"cropper-line line-s\" data-action=\"s\"></span>' +\n        '<span class=\"cropper-point point-e\" data-action=\"e\"></span>' +\n        '<span class=\"cropper-point point-n\" data-action=\"n\"></span>' +\n        '<span class=\"cropper-point point-w\" data-action=\"w\"></span>' +\n        '<span class=\"cropper-point point-s\" data-action=\"s\"></span>' +\n        '<span class=\"cropper-point point-ne\" data-action=\"ne\"></span>' +\n        '<span class=\"cropper-point point-nw\" data-action=\"nw\"></span>' +\n        '<span class=\"cropper-point point-sw\" data-action=\"sw\"></span>' +\n        '<span class=\"cropper-point point-se\" data-action=\"se\"></span>' +\n      '</div>' +\n    '</div>'\n  );\n","  var _Cropper = window.Cropper;\n\n  Cropper.noConflict = function () {\n    window.Cropper = _Cropper;\n    return Cropper;\n  };\n\n  Cropper.setDefaults = function (options) {\n    extend(Cropper.DEFAULTS, options);\n  };\n","  if (typeof define === 'function' && define.amd) {\n    define('cropper', [], function () {\n      return Cropper;\n    });\n  }\n\n  if (typeof noGlobal === 'undefined') {\n    window.Cropper = Cropper;\n  }\n\n  return Cropper;\n\n});\n"],"sourceRoot":"/source/"}