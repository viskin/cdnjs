!function(a, b) {
    "use strict";
    a.Jodit = b();
}(this, function() {
    "use strict";
    var a, b = 1, c = "2.0.4";
    function Jodit(c, d, e, f) {
        a = Jodit.modules.Dom;
        var g = this, h, i = c ? a(c).eq(0) : false, j;
        b += 1;
        if (i && i.length) {
            if (!i.data("jodit")) g.init(i[0], Jodit.extendOptions(true, Jodit.defaultOptions, a.isPlainObject(d) ? d : {})); else g = i.data("jodit");
            if ("string" === typeof d) if (g[d] && a.isFunction(g[d])) {
                h = g[d](e, f);
                if (void 0 !== h) j = h;
            }
        }
        return j;
    }
    Jodit.prototype.getDocument = function() {
        return this.editor.ownerDocument || this.editor.document;
    };
    Jodit.prototype.getWindow = function() {
        var a = this.getDocument();
        return a.defaultView || a.parentWindow;
    };
    Jodit.prototype.execCommand = function(a, b, c) {
        var d = this, e;
        if (false === d.events.fire("beforeCommand", [ a, b, c ])) return false;
        switch (a) {
          case "applyCSSProperty":
            d.applyCSSProperty(c, b);
            break;

          case "fontSize":
            d.applyCSSProperty("font-size", c + "px");
            break;

          case "formatBlock":
            if (/h([1-6])/.test(b)) c = d.browser("msie") ? "Heading " + /h([1-6])/.exec(b)[1] : b; else c = "<" + b + ">";
            d.getDocument().execCommand(a.toLowerCase(), false, c);
            break;

          default:
            d.getDocument().execCommand(a.toLowerCase(), b || false, c || null);
            e = d.$editor.find(Object.keys(Jodit.OLDTAG).join(","));
            if (e.length) {
                d.selection.save();
                e.each(function() {
                    d.node.replace(this, Jodit.OLDTAG[this.tagName], true);
                });
                this.selection.restore();
            }
        }
        this.events.fire("afterCommand", [ a, b, c ]);
    };
    Jodit.prototype.applyCSSProperty = function(b, c) {
        var d = this.selection.range(0), e = this, f, g = a('<span style="' + b + ": " + c + ';">' + Jodit.INVISIBLE_SPACE + "</span>", e.getDocument()).get(0);
        if (this.selection.isCollapsed()) {
            d.insertNode(g);
            e.selection.focusTo(g);
        } else {
            e.selection.save();
            e.getDocument().execCommand("fontSize", false, 4);
            e.$editor.find("font").each(function() {
                f = g.cloneNode(true);
                e.node.replace(this, f);
            });
            e.selection.restore();
        }
    };
    Jodit.prototype.getJodit = function() {
        return this;
    };
    Jodit.prototype.getMode = function() {
        return this.mode;
    };
    Jodit.prototype.getRealMode = function() {
        return this.mode !== Jodit.MODE_SPLIT ? this.mode : document.activeElement && "TEXTAREA" === document.activeElement.tagName ? Jodit.MODE_TEXTAREA : Jodit.MODE_WYSIWYG;
    };
    Jodit.prototype.setMode = function(b) {
        var c = {
            mode: b
        }, d = this, e = [ "jodit_wysiwyg_mode", "jodit_area_mode", "jodit_split_mode" ], f = d.mode;
        if (false === d.events.fire("beforeSetMode", [ c ])) return;
        d.syncCode();
        d.mode = a.inArray(c.mode, [ Jodit.MODE_TEXTAREA, Jodit.MODE_WYSIWYG, Jodit.MODE_SPLIT ]) !== -1 ? c.mode : Jodit.MODE_WYSIWYG;
        d.$toolbar.find(">li").each(function(b, c) {
            var e, f = c.control;
            e = void 0 === f || void 0 === f.mode ? Jodit.MODE_WYSIWYG : f.mode;
            a(c).toggleClass("disabled", e !== Jodit.MODE_SPLIT && e !== d.mode);
        });
        d.$wysiwyg.removeClass(e).addClass(e[d.mode - 1]);
        setTimeout(function() {
            if (d.getMode() === Jodit.MODE_WYSIWYG && (f === Jodit.MODE_TEXTAREA || d.options.autofocus)) {
                d.$editor.focus();
                if (d.$editor.find("p").length) d.selection.moveToCursorPosition(d.$editor.find("p")[0]); else d.selection.moveToCursorPosition(d.editor);
            } else if (d.getMode() === Jodit.MODE_TEXTAREA && (f === Jodit.MODE_WYSIWYG || d.options.autofocus)) d.$area[0].focus();
        }, 300);
        if (d.mode !== Jodit.MODE_TEXTAREA) {
            if (d.observer) d.observer.changed();
        } else if (d.observerarea) d.observerarea.changed();
        d.events.fire("afterSetMode");
    };
    Jodit.prototype.toggleMode = function() {
        var b = this.getMode();
        if (a.inArray(b + 1, [ Jodit.MODE_TEXTAREA, Jodit.MODE_WYSIWYG, this.options.useSplitMode ? Jodit.MODE_SPLIT : 9 ]) !== -1) b += 1; else b = Jodit.MODE_WYSIWYG;
        this.setMode(b);
    };
    Jodit.prototype.val = function(a) {
        if (void 0 === a) return this.getElementValue();
        this.events.fire("beforeSetValue", a);
        a = this.setElementValue(a);
        this.setEditorValue(a);
        this.setAreaValue(a);
        this.events.fire("afterSetValue");
    };
    Jodit.prototype.syncCode = function() {
        var a = this, b, c = a.getRealMode();
        if (false === a.events.fire("beforeSyncCode")) return;
        if (c === Jodit.MODE_WYSIWYG) b = a.getEditorValue(); else b = a.getAreaValue();
        a.setElementValue(b);
        b = a.val();
        if (c === Jodit.MODE_WYSIWYG) a.setAreaValue(b); else a.setEditorValue(b);
        if (!a.val() || "" === a.$editor.text() && !a.$editor.find("img,table,hr").length && a.$editor.find("br").length > 1) a.$placeholder.show(); else a.$placeholder.hide();
        a.events.fire("afterSyncCode");
    };
    Jodit.prototype.checkTargets = function(b) {
        var c = this;
        c.$toolbar.find("li").removeClass("active");
        a.each(c.options.controls, function(d, e) {
            var f = d || "empty", g, h, i, j, k = function(b) {
                var d = 0, e = 0;
                a.each(b, function(b, f) {
                    if (a.isFunction(f)) {
                        if (f.apply(c, [ j.css(b).toString().toLowerCase(), c ])) d += 1;
                    } else if (j.css(b).toString().toLowerCase() === f) d += 1;
                    e += 1;
                });
                if (e === d) c.$toolbar.find(".toolbar-" + f).addClass("active");
            };
            if (e.tags || e.options && e.options.tags) {
                g = e.tags || e.options && e.options.tags;
                h = b;
                while (h && !a(h).hasClass("jodit_editor")) {
                    if (1 !== h.nodeType) break;
                    if (a.inArray(h.tagName.toLowerCase(), g) !== -1) c.$toolbar.find(".toolbar-" + f).addClass("active");
                    h = h.parentNode;
                }
            }
            if (e.css || e.options && e.options.css) {
                i = e.css || e.options && e.options.css;
                j = a(b);
                while (j && j[0] && 1 === j[0].nodeType && !j.hasClass("jodit_editor")) {
                    k(i);
                    j = j.parent();
                }
            }
        });
    };
    Jodit.prototype.observe = function() {
        this.observer.block(1);
        this.$editor.find("img, table").each(a.proxy(function(b, c) {
            if (this.browser("msie")) a(c).attr("unselectable", "on");
            if (this.resizer && ("IMG" === c.tagName && this.options.useImageResizer || "TABLE" === c.tagName && this.options.useTableResizer)) this.resizer.bind(a(c));
            if ("TABLE" === c.tagName) if (this.options.useTableProcessor && !a(c).data("table-processor") && void 0 !== Jodit.modules.TableProcessor) a(c).data("table-processor", new Jodit.modules.TableProcessor(this, c));
            if ("IMG" === c.tagName) if (this.options.useImageProcessor && !a(c).data("image-processor") && void 0 !== Jodit.modules.ImageProcessor) a(c).data("image-processor", new Jodit.modules.ImageProcessor(this, c));
        }, this));
        this.observer.block(0);
    };
    Jodit.prototype.getVersion = function() {
        return c;
    };
    Jodit.prototype.getEditorValue = function() {
        var b = a(this.$editor[0].cloneNode(true));
        b.find(".jodit_marker").remove();
        b.find(".jodit_focused_image,.jodit_focused_cell").removeClass("jodit_focused_image jodit_focused_cell");
        return b.html();
    };
    Jodit.prototype.setEditorValue = function(a) {
        var b = {
            value: a
        };
        this.events.fire("beforeSetEditorValue", [ b ]);
        this.$editor.html(b.value);
        this.events.fire("afterSetEditorValue");
    };
    Jodit.prototype.getAreaValue = function() {
        return this.$area.val();
    };
    Jodit.prototype.setAreaValue = function(a) {
        var b = {
            value: a
        };
        this.events.fire("beforeSetAreaValue", [ b ]);
        this.$area.val(b.value);
        this.events.fire("afterSetAreaValue");
    };
    Jodit.prototype.getElementValue = function() {
        return this.$element.val();
    };
    Jodit.prototype.setElementValue = function(a) {
        var b = this.getElementValue(), c, d = {
            value: a
        };
        if (false === this.events.fire("beforeSetElementValue", [ d ])) return "";
        c = this.helper.clear(d.value);
        this.$element.val(c);
        this.events.fire("afterSetElementValue");
        if (b !== c) this.events.fire("changeElementValue");
        return c;
    };
    Jodit.prototype.closeToolbarPopap = function() {
        if (this.$toolbar_popap.is(":visible")) {
            this.$toolbar.find(".jodit_with_dropdownlist").removeClass("jodit_dropdown_open active jodit_right");
            this.$toolbar_popap.hide();
            this.$toolbar_popap.appendTo("body");
        }
    };
    Jodit.prototype.buildToolbarButton = function(b, c, d) {
        var e = a('<li><a href="javascript:void(0)"></a><div class="jodit_tooltip"></div></li>'), f, g = "string" === a.type(b) ? b : b.icon || "empty", h = "string" === a.type(b) ? b : b.name || "empty", i = e.find("a");
        e[0].control = c;
        e.addClass("toolbar-" + h);
        i.addClass("icon icon-" + g);
        if (void 0 === c || !a.isPlainObject(c)) c = {
            command: h
        };
        if (void 0 !== d) i.html(d);
        if (c.list) {
            f = a('<ul class="jodit_dropdownlist"></ul>');
            a.each(c.list, a.proxy(function(a, b) {
                var d = this.buildToolbarButton(a, {
                    exec: c.exec,
                    command: c.command,
                    args: [ c.args && c.args[0] || a, c.args && c.args[1] || b ]
                }, c.template && c.template(a, b));
                f.append(d);
            }, this));
            e.append(f);
            e.addClass("jodit_with_dropdownlist");
        }
        if (c.iconURL) i.css({
            "background-image": "url(" + c.iconURL + ")"
        });
        if (c.tooltip) e.find(".jodit_tooltip").html(c.tooltip); else e.find(".jodit_tooltip").remove();
        e.on("mousedown", a.proxy(function(b) {
            if (e.hasClass("disabled")) return false;
            b.stopImmediatePropagation();
            b.preventDefault();
            this.$toolbar.find(".jodit_with_dropdownlist").not(e).removeClass("jodit_dropdown_open active");
            this.$toolbar_popap.hide();
            if (f) e.toggleClass("jodit_dropdown_open active"); else if (void 0 !== c.exec && a.isFunction(c.exec)) c.exec.call(this, b, c, e); else if (void 0 !== c.popap && a.isFunction(c.popap)) {
                e.toggleClass("active");
                this.$toolbar_popap.show();
                e.append(this.$toolbar_popap);
                this.$toolbar_popap.empty();
                this.$toolbar_popap.html(c.popap.call(this, this.selection.current(), c));
            } else {
                if (c.command || h) this.execCommand(c.command || h, c.args && c.args[0] || null, c.args && c.args[1] || null);
                this.checkTargets(this.selection.current());
            }
            this.syncCode();
        }, this));
        return e;
    };
    Jodit.prototype.buildToolbar = function() {
        this.$toolbar = a('<ul class="toolbar"></ul>');
        if (!this.options.toolbar) this.$toolbar.hide();
        this.$toolbar_popap = a('<div class="jodit_toolbar_popap non-selected"></div>');
        this.$toolbar_dummy = a('<div class="jodit_toolbar_dummy"></div>');
        this.$toolbar_popap.on("mousedown", function(a) {
            a.stopImmediatePropagation();
        });
        a(this.getWindow()).add(this.$editor).off("mousedown.editor" + this.id).on("mousedown.editor" + this.id, a.proxy(function() {
            this.closeToolbarPopap();
        }, this));
        a.each(this.options.buttons, a.proxy(function(b) {
            if (this.options.removeButtons.indexOf(this.options.buttons[b]) !== -1) return;
            if ("|" !== this.options.buttons[b]) {
                var c = this.options.buttons[b];
                if (!a.isPlainObject(c) && void 0 !== this.options.controls[c]) c = this.options.controls[c];
                this.$toolbar.append(this.buildToolbarButton(this.options.buttons[b], c));
            } else this.$toolbar.append('<li class="separator"></li>');
        }, this));
        this.$wysiwyg.append(this.$toolbar);
        this.$wysiwyg.append(this.$toolbar_dummy);
    };
    Jodit.prototype.init = function(a, c) {
        this.element = a;
        this.mode = Jodit.MODE_WYSIWYG;
        this.$element = Jodit.modules.Dom(a);
        this.options = c;
        this.id = "jodit" + (a.id || "editor" + b);
        this.build();
        this.$element.data("jodit", this);
        this.setMode(this.options.defaultMode);
        this.observe();
        Jodit.editors[this.id] = this;
        this.events.fire("afterInit");
    };
    Jodit.prototype.loadModules = function(b) {
        var c, d = b || Object.keys(Jodit.modules);
        this.base = new Jodit.modules.Base(this);
        if (d.length) {
            for (c = 0; c < d.length; c += 1) if (!this[d[c].toLowerCase()]) this[d[c].toLowerCase()] = new Jodit.modules[d[c]](this);
            for (c = 0; c < d.length; c += 1) if ("base" !== d[c].toLowerCase()) {
                this[d[c].toLowerCase()] = a.extend(this[d[c].toLowerCase()], this.base);
                if (a.isFunction(this[d[c].toLowerCase()].init)) this[d[c].toLowerCase()].init();
            }
        }
        return this;
    };
    Jodit.prototype.destroyModules = function(b) {
        var c, d = b || Object.keys(Jodit.modules);
        if (d.length) for (c = 0; c < d.length; c += 1) {
            if (a.isFunction(this[d[c].toLowerCase()].destroy)) this[d[c].toLowerCase()].destroy();
            delete this[d[c].toLowerCase()];
        }
        return this;
    };
    Jodit.prototype.build = function() {
        var b = this, c;
        b.$wysiwyg = a('<div id="' + b.id + '" class="jodit"></div>');
        if (b.options.fullsize) b.$wysiwyg.addClass("jodit_fullsize");
        b.$workflow = a('<div class="jodit_workflow"></div>');
        b.$editor = a('<div class="jodit_editor" contenteditable="true" spellcheck="true" tabindex="' + b.options.tabIndex + '"/>');
        b.$placeholder = a('<span class="jodit_placeholder">Type something</span>');
        if (b.element.hasAttribute("placeholder")) b.$placeholder.html(b.$element.attr("placeholder"));
        b.$area = a('<textarea class="jodit_area_editor"/>');
        b.$area_flow = a('<div class="jodit_area_flow"></div>');
        b.$area_flow.append(b.$area);
        b.$wysiwyg_flow = a('<div class="jodit_wysiwyg_flow"></div>');
        b.$wysiwyg_flow.append(b.$editor);
        b.area = b.$area.get(0);
        b.$progress_bar = a('<div class="jodit_progress_bar"><div></div></div>');
        b.editor = b.$editor.get(0);
        b.$element.after(b.$wysiwyg);
        b.buildToolbar();
        b.$workflow.append(b.$placeholder);
        b.$workflow.append(b.$wysiwyg_flow);
        b.$workflow.append(b.$area_flow);
        b.$workflow.append(b.$progress_bar);
        b.loadModules();
        b.val(b.$element.val());
        b.$editor.css("min-height", b.helper.normalizeSize(b.options.minHeight));
        b.$wysiwyg.append(b.$workflow);
        b.$element.hide();
        a(window).on("scroll." + "jodit_" + b.id, function(a) {
            var c = window.pageYOffset || document.documentElement.scrollTop;
            if (c > b.$wysiwyg.offset().top && c < b.$wysiwyg.offset().top + b.$wysiwyg.outerHeight()) {
                b.$toolbar.addClass("jodit_sticky").css({
                    width: b.$wysiwyg.width() + "px"
                });
                b.$toolbar_dummy.css({
                    height: b.$toolbar.height() + "px"
                });
            } else if (b.$toolbar.hasClass("jodit_sticky")) b.$toolbar.removeClass("jodit_sticky");
        });
        b.$editor.on("click", function(a) {
            b.checkTargets(a.target || a.srcElement);
        });
        b.$editor.on("keydown", function(c) {
            var d;
            switch (c.which) {
              case Jodit.keys.TAB:
                d = b.selection.current();
                if (b.node.hasParent(d, "TD|TH")) {
                    d = b.node.parentNode(d, "TD|TH");
                    if (!c.shiftKey) b.selection.focusTo(a(d).closest("table").data("table-processor").nextCell(d, true)); else b.selection.focusTo(a(d).closest("table").data("table-processor").prevCell(d));
                    return false;
                }
                if (b.node.hasParent(d, "PRE")) {
                    d = b.getDocument().createTextNode("	");
                    b.selection.insertNode(d);
                    b.selection.insertNode(b.getDocument().createTextNode(Jodit.NBSP));
                    return false;
                }
            }
        });
        a().add(b.$area).add(b.$editor).on("keydown mousedown mouseup change update drop drag", function() {
            clearTimeout(c);
            c = setTimeout(function() {
                b.syncCode();
            }, 3);
        });
        try {
            b.getDocument().execCommand("enableObjectResizing", false, false);
            b.getDocument().execCommand("enableInlineTableEditing", false, false);
        } catch (d) {}
    };
    Jodit.prototype.destroy = function() {
        this.destroyModules();
        a(window).off("scroll." + "jodit_" + this.id);
        this.$wysiwyg.remove();
        delete this.$wysiwyg;
        this.$element.show();
    };
    Jodit.editors = {};
    Jodit.MODE_WYSIWYG = 1;
    Jodit.MODE_TEXTAREA = 2;
    Jodit.MODE_SPLIT = 3;
    Jodit.keys = {
        CTRL: 17,
        TAB: 9,
        ENTER: 13,
        LEFT: 37,
        TOP: 38,
        RIGHT: 39,
        BOTTOM: 40,
        Z: 90,
        Y: 89
    };
    Jodit.NBSP = "\xa0";
    Jodit.NBSP_REG_EXP = /\u00A0/g;
    Jodit.INVISIBLE_SPACE = "\ufeff";
    Jodit.INVISIBLE_SPACE_REG_EXP = /[\uFEFF\u200b]/g;
    Jodit.INVISIBLE_SPACE_REG_EXP_START = /^[\uFEFF]+/g;
    Jodit.INVISIBLE_SPACE_REG_EXP_END = /[\uFEFF]+$/g;
    Jodit.SPACE_REG_EXP_START = /^[\s\n\t\r\uFEFF]+/g;
    Jodit.SPACE_REG_EXP_END = /[\s\n\t\r\uFEFF]+$/g;
    Jodit.ENTER_BR = "br";
    Jodit.ENTER_P = "p";
    Jodit.ENTER_DIV = "div";
    Jodit.modules = {};
    Jodit.BLOCKS = [ "P", "DIV", "H1", "H2", "H3", "H4", "H5", "H6", "HR", "ADDRESS", "PRE", "FORM", "TABLE", "LI", "OL", "UL", "TD", "TH", "CAPTION", "BLOCKQUOTE", "CENTER", "DL", "DT", "DD", "SCRIPT", "NOSCRIPT", "STYLE" ];
    Jodit.ALONE = [ "BASE", "BR", "EMBED", "HR", "IMG", "INPUT", "LINK", "META" ];
    Jodit.OLDTAG = {
        I: "EM",
        B: "STRONG",
        STRIKE: "S"
    };
    Jodit.modules = {};
    Jodit.plugins = {};
    Jodit.modules.Base = function(a) {
        this.parent = a;
        this.ctrlKey = function(a) {
            if (navigator.userAgent.indexOf("Mac OS X") !== -1) {
                if (a.metaKey && !a.altKey) return true;
            } else if (a.ctrlKey && !a.altKey) return true;
            return false;
        };
    };
    Jodit.extendOptions = function(a) {
        var b = {}, c = false, d = 0, e, f, g, h = arguments.length;
        if ("[object Boolean]" === Object.prototype.toString.call(a)) {
            c = a;
            d += 1;
        }
        g = function(a) {
            f = Object.keys(a);
            for (e = 0; e < f.length; e += 1) if (c && "[object Object]" === Object.prototype.toString.call(a[f[e]])) b[f[e]] = Jodit.extendOptions(true, null === b[f[e]] ? {} : b[f[e]], a[f[e]]); else b[f[e]] = a[f[e]];
        };
        while (d < h) {
            if (void 0 !== arguments[d]) g(arguments[d]);
            d += 1;
        }
        return b;
    };
    Jodit.defaultOptions = {};
    return Jodit;
});

!function() {
    "use strict";
    var a = {}, b = a.toString, c = a.hasOwnProperty, d = [], e = d.indexOf, f = function(a, b) {
        var c, d = [], e = document, g = /[\s]+/, h = Array.prototype.slice, i = function(a) {
            var b;
            for (b = 0; b < d.length; b += 1) if (false === a.call(d[b], b, d[b])) break;
            return this;
        }, j = function(a) {
            var b = d;
            f(a).each(function() {
                if (b.indexOf(this) !== -1) b.splice(b.indexOf(this), 1);
            });
            return this;
        }, k = function() {
            if (!d.length) return null;
            var a = d[0].getBoundingClientRect(), b = e.body, c = e.documentElement, f = window.pageYOffset || c.scrollTop || b.scrollTop, g = window.pageXOffset || c.scrollLeft || b.scrollLeft, h = c.clientTop || b.clientTop || 0, i = c.clientLeft || b.clientLeft || 0, j = a.top + f - h, k = a.left + g - i;
            return {
                top: Math.round(j),
                left: Math.round(k)
            };
        }, l = function(a) {
            a = a ? a.split(g) : [];
            var b, c = function() {
                var c, d = this, f = a[b].split(".")[0];
                if (e.createEvent) {
                    c = e.createEvent("HTMLEvents");
                    c.initEvent(f, true, true);
                } else {
                    c = e.createEventObject();
                    c.eventType = f;
                }
                c.eventName = f;
                if (e.createEvent) d.dispatchEvent(c); else d.fireEvent("on" + c.eventType, c);
            };
            for (b = 0; b < a.length; b += 1) i(c);
            return this;
        }, m = function(a, b, c) {
            if (f.isFunction(b)) {
                c = b;
                b = false;
            }
            var d = this, e, h, j, k, l = function() {
                var g = this, h = function(a, b) {
                    var c = a;
                    while (c !== b && c.parentNode && c.parentNode !== g) c = c.parentNode;
                    return c === b;
                }, i = function(a) {
                    var e = g;
                    a = a || window.event;
                    a.originalEvent = a;
                    if (void 0 === a.target) a.target = a.srcElement;
                    if (b) {
                        e = false;
                        d.find(b).each(function() {
                            if (h(a.target, this)) {
                                e = this;
                                return false;
                            }
                        });
                    }
                    if (e && c && f.isFunction(c) && false === c.call(e, a)) {
                        a.preventDefault();
                        return false;
                    }
                };
                if (!g._rt_handlers) g._rt_handlers = {};
                if (!g._rt_namespaces) g._rt_namespaces = {};
                if (!g._rt_handlers[a[e]]) g._rt_handlers[a[e]] = [];
                g._rt_handlers[a[e]].push(i);
                if (!g._rt_namespaces[k]) g._rt_namespaces[k] = [];
                g._rt_namespaces[k].push({
                    event: j,
                    callback: i
                });
                g.addEventListener(j, i);
            };
            a = a ? a.split(g) : [];
            for (e = 0; e < a.length; e += 1) {
                h = a[e].split(".");
                j = h[0];
                k = !h[1] ? "window" : h[1];
                i(l);
            }
            return this;
        }, n = function(a, b) {
            a = a ? a.split(g) : [];
            var c = this, d, e, f = function() {
                var f = this;
                if (b) f.removeEventListener(a[d], b, false); else if (f._rt_handlers && f._rt_handlers[a[d]]) {
                    f._rt_handlers[a[d]].forEach(function(b) {
                        f.removeEventListener(a[d], b, false);
                    });
                    delete f._rt_handlers[a[d]];
                } else if (/^\./.test(a[d]) && f._rt_namespaces) {
                    e = a[d].substr(1);
                    if (f._rt_namespaces[e]) {
                        f._rt_namespaces[e].forEach(function(a) {
                            c.off(a.event, a.callback);
                        });
                        delete f._rt_namespaces[e];
                    }
                }
            };
            for (d = 0; d < a.length; d += 1) i(f);
            return this;
        }, o = function(a, b, c) {
            if (f.isFunction(b)) {
                c = b;
                b = false;
            }
            var d = function() {
                c.apply(this, h.call(arguments));
                n(a, d);
            };
            m(a, b, c);
            return this;
        }, p = function(a, b) {
            var c, e;
            if (f.isPlainObject(a) || void 0 !== b) {
                e = function(a, b, c) {
                    if (void 0 !== c && null !== c && /^left|top|bottom|right|width|height|margin|padding/i.test(b) && /^[0-9]+$/.test(c.toString())) c += "px";
                    a.style[b] = c;
                };
                i(function() {
                    if (f.isPlainObject(a)) {
                        var c = Object.keys(a), d;
                        for (d = 0; d < c.length; d += 1) e(this, f.camelCase(c[d]), a[c[d]]);
                    } else e(this, a, b);
                });
                return this;
            }
            if (d.length) c = window.getComputedStyle(d[0]).getPropertyValue(a);
            return c;
        }, q = function(a) {
            if (":visible" === a) return d[0].offsetWidth || d[0].offsetHeight;
            var b = false;
            f(a, d[0].parentNode).each(function() {
                var a = this;
                f.each(d, function(c, d) {
                    if (a === d) {
                        b = true;
                        return false;
                    }
                });
                if (b) return false;
            });
            return b;
        }, r = function() {
            if (d.length && void 0 !== d[0].offsetHeight) return parseInt(d[0].offsetHeight, 10);
            return 0;
        }, s = function(a) {
            if (void 0 === a) return d.length ? parseInt(window.getComputedStyle(d[0]).getPropertyValue("width"), 10) : 0;
            p("width", a);
            return this;
        }, t = function(a) {
            if (void 0 === a) return d.length ? parseInt(window.getComputedStyle(d[0]).getPropertyValue("height"), 10) : 0;
            p("height", a);
            return this;
        }, u = function() {
            if (d.length && void 0 !== d[0].offsetWidth) return parseInt(d[0].offsetWidth, 10);
            return 0;
        }, v = function() {
            if (d.length) return f(d[0].nextSibling);
            return f();
        }, w = function() {
            if (d.length) return f(d[0].prevSibling);
            return f();
        }, x = function(a) {
            if (d.length) {
                var b = d[0].parentNode;
                while (b && "string" === typeof a && b.tagName.toLowerCase() !== a.toLowerCase()) b = b.parentNode;
                return f(b);
            }
            return f();
        }, y = f.type, z = function(a, b, c) {
            i(function() {
                var d = a && "string" === y(a) ? a.split(g) : a || [], e = this.hasAttribute && this.hasAttribute("class") ? this.getAttribute("class").split(g) : [], f = e.join(" "), h;
                for (h = 0; h < d.length; h += 1) if (false === b(e, d[h])) return false;
                if (!c && f !== e.join(" ") && this.setAttribute) this.setAttribute("class", e.join(" "));
            });
        }, A = function(a) {
            var b = false;
            z(a, function(a, c) {
                if (a.indexOf(c) !== -1) b = true;
            }, true);
            return b;
        }, B = function(a) {
            z(a, function(a, b) {
                if (a.indexOf(b) === -1) a.push(b);
            });
            return this;
        }, C = function(a) {
            z(a, function(a, b) {
                if (a.indexOf(b) !== -1) a.splice(a.indexOf(b), 1);
            });
            return this;
        }, D = function(a, b) {
            if (void 0 === b) z(a, function(a, b) {
                if (a.indexOf(b) !== -1) a.splice(a.indexOf(b), 1); else a.push(b);
            }); else if (b) B(a); else C(a);
            return this;
        }, E = function(a) {
            if (void 0 !== a) {
                i(function() {
                    this.innerText = a.toString();
                });
                return this;
            }
            return d[0] ? d[0].innerText : "";
        }, F = function(a) {
            if (void 0 !== a) {
                if ("string" !== y(a)) this.empty().append(a); else i(function() {
                    this.innerHTML = a;
                });
                return this;
            }
            return d[0] ? d[0].innerHTML : "";
        }, G = function() {
            return this.html("");
        }, H = function(a) {
            if (d.length) {
                if (void 0 === a) return d[0].value;
                i(function() {
                    if (void 0 !== this.value) this.value = a;
                });
            }
            return void 0 === a ? "" : this;
        }, I = function(a) {
            var b = [], c;
            i(function() {
                c = this.firstChild;
                while (c) {
                    if (c && (a || c.nodeType !== Node.TEXT_NODE)) b.push(c);
                    c = c.nextSibling;
                }
            });
            return b;
        }, J = function() {
            return f(I(true));
        }, K = function() {
            return f(I());
        }, L = function(a) {
            var b = [];
            i(function() {
                b = b.concat(h.call(f(a, this)));
            });
            return f(b);
        }, M = function(a, b) {
            var c = [], d, g;
            if (Array.isArray(a)) {
                f.each(a, function(b) {
                    c = c.concat(M(a[b]));
                });
                return c;
            }
            if ((void 0 !== a.jqcut && a.jqcut === f.fn.jqcut || void 0 !== a.jquery) && a.length) return h.call(a);
            if (/^body$/i.test(a)) return [ e.body ];
            if (/^#/.test(f.trim(a)) || /^(script|link|img|div|h[1-6]|p|table|tr|tbody|thead|tfoot|td|th|span|strong|ul|li|ol|a|body|label|option|select|input|button|textarea|i|b|strike|font)(\s|\t|\n|$|>|:|\.|\#|\[)/i.test(f.trim(a)) || /^\./.test(f.trim(a)) || /^\>/.test(f.trim(a))) {
                if (/^\>/.test(f.trim(a))) a = ":scope" + a;
                return b.querySelectorAll ? h.call(b.querySelectorAll(a) || []) : [];
            }
            if ("string" === y(a)) {
                d = (b && void 0 !== b.createElement ? b : e).createElement("div");
                d.innerHTML = a;
                g = d.firstChild;
                while (g) {
                    c.push(g);
                    g = g.nextSibling;
                }
                return c;
            }
            if (a.addEventListener) return [ a ];
        }, N = function(a, b) {
            var c = this;
            i(function() {
                if (void 0 !== b) this[a] = b; else {
                    c = this[a];
                    return false;
                }
            });
            return c;
        }, O = function(a, b) {
            var c = this;
            i(function() {
                if (void 0 !== b) this.setAttribute(a, b); else {
                    c = this.getAttribute(a);
                    return false;
                }
            });
            return c;
        }, P = function(a) {
            i(function() {
                this.removeAttribute(a);
            });
            return this;
        }, Q = function() {
            i(function() {
                this.style.display = "none";
            });
            return this;
        }, R = function() {
            i(function() {
                this.style.display = "block";
            });
            return this;
        }, S = function() {
            return i(function() {
                if (this.parentNode && this.parentNode.removeChild) this.parentNode.removeChild(this);
            });
        }, T = function(a) {
            if (d && d.length) f(a).each(function() {
                d[0].parentNode.insertBefore(this, d[0]);
            });
            return this;
        }, U = function(a) {
            if (d && d.length) {
                var b = d[0].parentNode;
                f(a).each(function() {
                    if (b.lastchild === d[0]) b.appendChild(this); else d[0].parentNode.insertBefore(this, d[0].nextSibling);
                });
            }
            return this;
        }, V = function() {
            if (d.length && d[0] && void 0 !== d[0].focus && e.hasFocus && e.hasFocus()) d[0].focus();
            return this;
        }, W = function(a) {
            f(a).append(this);
            return this;
        }, X = function() {
            return f(d[0].parentNode);
        }, Y = function() {
            var a = 0, b;
            if (d && d.length) {
                b = d[0];
                while (b.previousSibling) {
                    b = b.previousSibling;
                    if (3 !== b.nodeType || !/^\s*$/.test(b.data)) a += 1;
                }
            }
            return a;
        }, Z = function(a) {
            d = d.concat(h.call(f(a)));
            this.length = d.length;
            return this;
        }, $ = "_store_dataset", _ = function(a, b) {
            a = f.camelCase(a);
            if (d.length) {
                if (void 0 === b) {
                    if (void 0 !== d[0].dataset[a]) return d[0].dataset[a];
                    if (void 0 !== d[0][$] && void 0 !== d[0][$][a]) return d[0][$][a];
                    return;
                }
                i(function() {
                    if (void 0 === this[$]) this[$] = {};
                    this[$][a] = b;
                });
                return this;
            }
            return void 0 === b ? void 0 : this;
        }, aa = function(a) {
            _(a, null);
            return this;
        }, ba = function(a) {
            i(function() {
                var b = this;
                f(a).each(function() {
                    if (b.appendChild) b.appendChild(this);
                });
            });
            return this;
        };
        if (a) if ("function" === typeof a) window.addEventListener("load", a, false); else {
            a = "string" === y(a) && !/^</.test(a) ? a ? a.split(",") : [] : [ a ];
            for (c = 0; c < a.length; c += 1) if (void 0 !== a[c]) d = d.concat(M(a[c], b || e.body));
        }
        return f.extend(true, {}, d, {
            prop: N,
            closest: x,
            next: v,
            prev: w,
            width: s,
            height: t,
            outerWidth: u,
            outerHeight: r,
            offset: k,
            focus: V,
            is: q,
            parent: X,
            not: j,
            add: Z,
            index: Y,
            val: H,
            data: _,
            removeData: aa,
            attr: O,
            removeAttr: P,
            hide: Q,
            show: R,
            fire: l,
            trigger: l,
            html: F,
            empty: G,
            text: E,
            contents: J,
            children: K,
            find: L,
            remove: S,
            detach: S,
            after: U,
            before: T,
            append: ba,
            appendTo: W,
            type: y,
            css: p,
            each: i,
            on: m,
            one: o,
            off: n,
            hasClass: A,
            addClass: B,
            removeClass: C,
            toggleClass: D,
            length: d.length,
            eq: function(a) {
                return d[a] ? f(d[a]) : f();
            },
            get: function(a) {
                return d[a];
            }
        }, f.fn);
    };
    function g(a) {
        var b = !!a && void 0 !== a.length && a.length, c = f.type(a);
        if ("function" === c || f.isWindow(a)) return false;
        return "array" === c || 0 === b || "number" === typeof b && b > 0 && void 0 !== a[b - 1];
    }
    f.fn = {
        jqcut: "1.9.1"
    };
    f.camelCase = function(a) {
        return a.replace(/-(.{1})/g, function(a, b) {
            return b.toUpperCase();
        });
    };
    f.type = function(c) {
        if (null === c) return c.toString();
        return "object" === typeof c || "function" === typeof c ? a[b.call(c)] || "object" : typeof c;
    };
    f.isWindow = function(a) {
        return null !== a && a === a.window;
    };
    f.isArray = Array.isArray;
    f.isPlainObject = function(a) {
        if ("object" !== f.type(a) || a.nodeType || f.isWindow(a)) return false;
        if (a.constructor && !c.call(a.constructor.prototype, "isPrototypeOf")) return false;
        return true;
    };
    f.each = function(a, b) {
        var c, d, e;
        if (g(a)) {
            c = a.length;
            for (e = 0; e < c; e += 1) if (false === b.call(a[e], e, a[e])) break;
        } else {
            d = Object.keys(a);
            for (e = 0; e < d.length; e += 1) if (false === b.call(a[d[e]], d[e], a[d[e]])) break;
        }
        return a;
    };
    f.each([ "Boolean", "Number", "String", "Function", "Array", "Date", "RegExp", "Object", "Error", "Symbol" ], function(b, c) {
        a["[object " + c + "]"] = c.toLowerCase();
    });
    f.isFunction = function(a) {
        return a && "function" === typeof a;
    };
    f.inArray = function(a, b, c) {
        return null === b ? -1 : e.call(b, a, c);
    };
    f.trim = function(a, b) {
        if (void 0 === b) b = "\\s";
        var c = new RegExp("^" + b, "g"), d = new RegExp(b + "$", "g");
        return a.toString().replace(c, "").replace(d, "");
    };
    f.proxy = function(a, b) {
        return function() {
            return a.apply(b, arguments);
        };
    };
    f.eventLog = false;
    f.extend = f.fn.extend = function(a) {
        var b, c, d, e, g, h, i = a || {}, j = 1, k, l = arguments.length, m, n = false;
        if ("boolean" === typeof i) {
            n = i;
            i = arguments[j] || {};
            j += 1;
        }
        if ("object" !== typeof i && !f.isFunction(i)) i = {};
        if (j === l) {
            i = this;
            j += 1;
        }
        for (j; j < l; j += 1) {
            b = arguments[j];
            if (null !== b && void 0 !== b) {
                m = Object.keys(b);
                for (k = 0; k < m.length; k += 1) {
                    c = m[k];
                    d = i[c];
                    e = b[c];
                    if (i === e) continue;
                    if (n && e && (f.isPlainObject(e) || f.isArray(e))) {
                        g = f.isArray(e);
                        if (g) {
                            g = false;
                            h = d && f.isArray(d) ? d : [];
                        } else h = d && f.isPlainObject(d) ? d : {};
                        i[c] = f.extend(n, h, e);
                    } else if (void 0 !== e) i[c] = e;
                }
            }
        }
        return i;
    };
    f.defaultAjaxOptions = {
        dataType: "json",
        type: "GET",
        url: "",
        data: null,
        contentType: "application/x-www-form-urlencoded; charset=UTF-8",
        error: function(a) {
            console.log(a);
        },
        success: function(a) {
            console.log(a);
        },
        xhr: function() {
            return new XMLHttpRequest();
        }
    };
    f.ajax = function(a) {
        a = f.extend(true, {}, f.defaultAjaxOptions, a);
        var b = a.xhr(), c = {
            status: false,
            response: false,
            is_done: false,
            is_error: false,
            __done: false,
            __error: false,
            __fire_done: function(a) {
                if (c.is_done && c.__done) c.__done.call(b, c.response, c.status);
            },
            __fire_error: function(a) {
                if (c.is_error && c.__error) c.__error.call(b, c.response, c.status);
            },
            done: function(a) {
                c.__done = a;
                c.__fire_done();
            },
            error: function(a) {
                c.__error = a;
                c.__fire_error();
            },
            abort: function() {
                b.abort();
            }
        }, d = function(a, b) {
            if ("string" === typeof a || a instanceof window.FormData) return a;
            var c = [], e, f, g;
            for (e in a) if (a.hasOwnProperty(e)) {
                f = b ? b + "[" + e + "]" : e;
                g = a[e];
                c.push("object" === typeof g ? d(g, f) : encodeURIComponent(f) + "=" + encodeURIComponent(g));
            }
            return c.join("&");
        };
        b.onreadystatechange = function(d) {
            if (b.readyState === XMLHttpRequest.DONE) {
                var e = d.target.responseText;
                if (200 === b.status) {
                    switch (a.dataType) {
                      case "json":
                        try {
                            e = JSON.parse(e);
                        } catch (f) {
                            a.error(b, b.status);
                            return;
                        }
                    }
                    a.success(e);
                    c.response = e;
                    c.status = b.status;
                    c.is_done = true;
                    c.__fire_done();
                } else {
                    a.error(b, b.status);
                    c.response = e;
                    c.status = b.status;
                    c.is_error = true;
                    c.__fire_error();
                }
            }
        };
        b.open(a.type, a.url, true);
        b.setRequestHeader("X-REQUESTED-WITH", "XMLHttpRequest");
        if (a.contentType) b.setRequestHeader("Content-type", a.contentType);
        if (a.data) b.send(d(a.data));
        return c;
    };
    if (void 0 !== window.Jodit) Jodit.modules.Dom = f;
}();

!function(a) {
    "use strict";
    Jodit.defaultOptions = {
        tabIndex: -1,
        autofocus: false,
        fullsize: false,
        toolbar: true,
        autosave: false,
        autosaveCallback: false,
        interval: 60,
        minHeight: 200,
        enter: Jodit.ENTER_P,
        defaultMode: Jodit.MODE_WYSIWYG,
        useSplitMode: true,
        colors: [ "#61BD6D", "#1ABC9C", "#54ACD2", "#2C82C9", "#9365B8", "#475577", "#CCCCCC", "#41A85F", "#00A885", "#3D8EB9", "#2969B0", "#553982", "#28324E", "#000000", "#F7DA64", "#FBA026", "#EB6B56", "#E25041", "#A38F84", "#EFEFEF", "#FFFFFF", "#FAC51C", "#F37934", "#D14841", "#B8312F", "#7C706B", "#D1D5D8" ],
        colorPickerDefaultTab: "background",
        imageDefaultWidth: 300,
        removeButtons: [],
        buttons: [ "source", "|", "bold", "italic", "|", "ul", "ol", "|", "font", "fontsize", "brush", "paragraph", "|", "image", "table", "link", "|", "left", "center", "right", "justify", "|", "undo", "redo", "|", "hr", "eraser", "fullsize", "about" ],
        controls: {
            about: {
                exec: function(a, b, c) {
                    var d = new Jodit.modules.Dialog(this);
                    d.setTitle("About Jodit");
                    d.setContent('<div class="jodit_about">                            <div>Jodit Editor v.' + this.getVersion() + ' Free Non-commercial Version</div>                            <div><a href="http://xdsoft.net/jodit/" target="_blank">http://xdsoft.net/jodit/</a></div>                            <div><a href="http://xdsoft.net/jodit/doc/" target="_blank">Jodit User\'s Guide</a> contains detailed help for using</div>                            <div>For information about the license, please go to our website:</div>                            <div><a href="http://xdsoft.net/jodit/license.html" target="_blank">http://xdsoft.net/jodit/license.html</a></div>                            <div><a href="http://xdsoft.net/jodit/#download" target="_blank">Buy full version</a></div>                            <div>Copyright \xa9 XDSoft.net - Chupurnov Valeriy. All rights reserved.</div>                        </div>');
                    d.open();
                },
                tooltip: "About Jodit",
                mode: Jodit.MODE_TEXTAREA + Jodit.MODE_WYSIWYG
            },
            fullsize: {
                exec: function(a, b, c) {
                    this.$wysiwyg.toggleClass("jodit_fullsize");
                    this.events.fire("afterResize");
                },
                tooltip: "Open editor in fullsize",
                mode: Jodit.MODE_TEXTAREA + Jodit.MODE_WYSIWYG
            },
            eraser: {
                exec: function() {
                    this.execCommand("removeFormat", false, false);
                },
                tooltip: "Clear Formatting"
            },
            brush: {
                css: {
                    backgroundColor: function(a, b) {
                        if (this.options.colors.indexOf(this.helper.colorToHex(a)) !== -1) return true;
                    }
                },
                popap: function(b) {
                    var c = this.selection.get(), d = "", e = "", f, g, h, i;
                    if (c && c.anchorNode && a(c.anchorNode.parentNode).attr("style") && a(c.anchorNode.parentNode).attr("style").indexOf("background") !== -1 && a(c.anchorNode.parentNode).css("background-color")) {
                        f = c.anchorNode.parentNode;
                        e = a(f).css("background-color");
                    }
                    if (c && c.anchorNode && a(c.anchorNode.parentNode).attr("style") && a(c.anchorNode.parentNode).attr("style").indexOf("color") !== -1 && a(c.anchorNode.parentNode).css("color")) {
                        f = c.anchorNode.parentNode;
                        d = a(f).css("color");
                    }
                    g = this.form.buildColorPicker(a.proxy(function(b) {
                        if (!f) this.applyCSSProperty("background-color", b); else a(f).css("background-color", b);
                        this.closeToolbarPopap();
                    }, this), e);
                    h = this.form.buildColorPicker(a.proxy(function(b) {
                        if (!f) this.applyCSSProperty("color", b); else a(f).css("color", b);
                        this.closeToolbarPopap();
                    }, this), d);
                    if ("background" === this.options.colorPickerDefaultTab) i = {
                        Background: g,
                        Text: h
                    }; else i = {
                        Text: h,
                        Background: g
                    };
                    return this.form.buildTabs(i);
                },
                tooltip: "Fill color or set the text color"
            },
            redo: {
                mode: Jodit.MODE_SPLIT,
                exec: function() {
                    if (this.getRealMode() !== Jodit.MODE_TEXTAREA) this.observer.redo(); else this.observerarea.redo();
                },
                tooltip: "Redo"
            },
            undo: {
                mode: Jodit.MODE_SPLIT,
                exec: function() {
                    if (this.getRealMode() !== Jodit.MODE_TEXTAREA) this.observer.undo(); else this.observerarea.undo();
                },
                tooltip: "Undo"
            },
            bold: {
                tags: [ "b", "strong" ],
                css: {
                    fontWeight: "bold"
                },
                tooltip: "Bold",
                hotkey: {
                    ctrl: 1,
                    key: 66
                }
            },
            italic: {
                tags: [ "i", "em" ],
                css: {
                    fontStyle: "italic"
                },
                tooltip: "Italic",
                hotkey: {
                    ctrl: 1,
                    key: 73
                }
            },
            ul: {
                command: "insertUnorderedList",
                controlName: "ul",
                exec: function(b, c) {
                    var d = this.selection, e = d.current(), f, g;
                    if (this.node.hasParent(e, "p")) {
                        g = this.node.parentNode(e, "p");
                        if (0 === this.helper.trim(g.innerText).length) f = a("<" + c.controlName + ">\n" + "<li>" + Jodit.INVISIBLE_SPACE + "</li>\n" + "</" + c.controlName + ">\n").get(0); else f = a("<" + c.controlName + ">\n" + "<li> " + g.innerHTML + " </li>\n" + "</" + c.controlName + ">\n").get(0);
                        a(g).replaceWith(f);
                        d.moveToCaretPosition(a(f).find("li").get(0));
                    } else this.execCommand(c.command);
                },
                tags: [ "ul" ],
                tooltip: "Insert Unordered List"
            },
            ol: {
                command: "insertOrderedList",
                controlName: "ul",
                exec: function(a, b) {
                    this.options.controls.ul.exec.call(this, a, b);
                },
                tags: [ "ol" ],
                tooltip: "Insert Ordered List"
            },
            center: {
                command: "justifyCenter",
                tags: [ "center" ],
                css: {
                    textAlign: "center"
                },
                tooltip: "Justify Center"
            },
            justify: {
                command: "justifyFull",
                css: {
                    textAlign: "justify"
                },
                tooltip: "Justify Full"
            },
            left: {
                command: "justifyLeft",
                css: {
                    textAlign: "left"
                },
                tooltip: "Justify Left"
            },
            right: {
                command: "justifyRight",
                css: {
                    textAlign: "right"
                },
                tooltip: "Justify Right"
            },
            hr: {
                command: "insertHorizontalRule",
                tags: [ "hr" ],
                tooltip: "Insert Horizontal Line"
            },
            image: {
                popap: function(b) {
                    var c = this;
                    return c.form.imageSelector({
                        url: function(b, d) {
                            var e = a(c.form.getCurrentImage() || a("<img/>", c.getDocument()).get(0));
                            e.attr("src", b);
                            e.attr("alt", d);
                            if (!c.form.getCurrentImage()) c.selection.insertImage(e.get(0));
                            c.closeToolbarPopap();
                            c.syncCode();
                        },
                        upload: function(a) {
                            var b;
                            if (a.files && a.files.length) for (b = 0; b < a.files.length; b += 1) c.selection.insertImage(a.baseurl + a.files[b]);
                            c.closeToolbarPopap();
                            c.syncCode();
                        },
                        filebrowser: function(a) {
                            if (a.files && a.files.length) {
                                var b;
                                for (b = 0; b < a.files.length; b += 1) c.selection.insertImage(a.baseurl + a.files[b]);
                                c.closeToolbarPopap();
                                c.syncCode();
                            }
                        }
                    }, b);
                },
                tags: [ "img" ],
                tooltip: "Insert Image"
            },
            link: {
                popap: function(b) {
                    var c, d = this.selection.get(), e = a("<div>" + '<input required name="url" placeholder="http://" type="text"/>' + '<input name="text" placeholder="Anchor" type="text"/>' + '<label><input name="target" type="checkbox"/> Open in new tab</label>' + '<label><input name="nofollow" type="checkbox"/> No follow</label>' + '<button type="button">Insert</button>' + "</div>");
                    if (d && d.anchorNode && "A" === d.anchorNode.parentNode.tagName) {
                        e.find("input[name=url]").val(d.anchorNode.parentNode.href);
                        e.find("input[name=text]").val(d.anchorNode.parentNode.text);
                        e.find("input[name=target]").get(0).checked = "_blank" === d.anchorNode.parentNode.target;
                        e.find("input[name=nofollow]").get(0).checked = "nofollow" === d.anchorNode.parentNode.rel;
                        if ("" === d.toString()) c = d.anchorNode.parentNode;
                    } else e.find("input[name=text]").val(d.toString());
                    this.selection.save();
                    e.find("button").on("click", a.proxy(function() {
                        this.selection.restore();
                        var b = a(c || "<a></a>");
                        b.attr("href", e.find("input[name=url]").val());
                        b.text(e.find("input[name=text]").val());
                        if (e.find("input[name=target]").get(0).checked) b.attr("target", "_blank"); else b.removeAttr("target");
                        if (e.find("input[name=nofollow]").get(0).checked) b.attr("rel", "nofollow"); else b.removeAttr("rel");
                        if (!c) this.execCommand("insertHTML", false, b.prop("outerHTML"));
                        this.closeToolbarPopap();
                        this.syncCode();
                        return false;
                    }, this));
                    return e;
                },
                tags: [ "a" ],
                tooltip: "Insert Image"
            },
            fontsize: {
                command: "fontSize",
                list: [ "8", "9", "10", "11", "12", "14", "18", "24", "30", "36", "48", "60", "72", "96" ],
                template: function(a, b) {
                    return b;
                },
                tooltip: "Font size"
            },
            font: {
                command: "applyCSSProperty",
                args: [ null, "font-family" ],
                list: {
                    "Helvetica,sans-serif": "Helvetica",
                    "Arial,Helvetica,sans-serif": "Arial",
                    "Georgia,serif": "Georgia",
                    "Impact,Charcoal,sans-serif": "Impact",
                    "Tahoma,Geneva,sans-serif": "Tahoma",
                    "'Times New Roman',Times,serif": "Times New Roman",
                    "Verdana,Geneva,sans-serif": "Verdana"
                },
                template: function(a, b) {
                    return '<span style="font-family: ' + a + '"> ' + b + " </span>";
                },
                tooltip: "Font family"
            },
            paragraph: {
                command: "formatBlock",
                list: {
                    p: "Normal",
                    h1: "Heading 1",
                    h2: "Heading 2",
                    h3: "Heading 3",
                    h4: "Heading 4",
                    blockquote: "Quote",
                    pre: "Code"
                },
                template: function(a, b) {
                    return "<" + a + ' class="jodit_list_element"><span>' + b + "</span></" + a + "></li>";
                },
                tooltip: "Insert format block"
            },
            table: {
                cols: 10,
                popap: function(b, c) {
                    var d = this, e, f, g, h, i = a('<form class="jodit_form_inserter">' + "<label>" + "<span>1</span> &times; <span>1</span>" + "</label>" + "</form>"), j = 1, k = 1, l = c.cols, m = i.find("span").eq(0), n = i.find("span").eq(1), o = [];
                    function p(b) {
                        var c = (b + 1) * l;
                        if (o.length > c) {
                            for (e = c; e < o.length; e += 1) {
                                i[0].removeChild(o[e]);
                                delete o[e];
                            }
                            o = o.splice(0, c);
                        }
                        for (e = 0; e < c; e += 1) if (!o[e]) {
                            h = d.getDocument().createElement("div");
                            h.index = e;
                            o.push(h);
                        }
                        i.append(o);
                        i.css("width", a(o[0]).outerWidth() * l + "px");
                    }
                    p(1);
                    o[0].className = "hovered";
                    i.on("mousemove", "div", function q(a) {
                        g = isNaN(a) ? this.index : a;
                        j = Math.ceil((g + 1) / l);
                        k = g % l + 1;
                        p(j);
                        if (k === l || k < l - 1 && l > 10) {
                            l = k === l ? l + 1 : l - 1;
                            return q(k + (j - 1) * l - 1);
                        }
                        for (e = 0; e < o.length; e += 1) if (k >= e % l + 1 && j >= Math.ceil((e + 1) / l)) o[e].className = "hovered"; else o[e].className = "";
                        n.text(k);
                        m.text(j);
                    });
                    i.on("mousedown", "div", function(a) {
                        a.preventDefault();
                        g = this.index;
                        j = Math.ceil((g + 1) / l);
                        k = g % l + 1;
                        var b = d.getDocument().createElement("table"), c, h, i, m, n = (100 / k).toFixed(7);
                        for (e = 1; e <= j; e += 1) {
                            h = d.getDocument().createElement("tr");
                            for (f = 1; f <= k; f += 1) {
                                i = d.getDocument().createElement("td");
                                i.style.width = n + "%";
                                if (!c) c = i;
                                m = d.getDocument().createElement("br");
                                i.appendChild(m);
                                h.appendChild(d.getDocument().createTextNode("\n"));
                                h.appendChild(d.getDocument().createTextNode("	"));
                                h.appendChild(i);
                            }
                            b.appendChild(d.getDocument().createTextNode("\n"));
                            b.appendChild(h);
                        }
                        d.selection.save();
                        d.selection.insertNode(d.getDocument().createTextNode("\n"));
                        d.selection.insertNode(b);
                        d.selection.restore();
                        d.closeToolbarPopap();
                        d.syncCode();
                    });
                    return i;
                },
                tags: [ "table" ],
                tooltip: "Insert table"
            },
            source: {
                mode: Jodit.MODE_SPLIT,
                exec: function() {
                    this.toggleMode();
                },
                tooltip: "Change WYSIWYG mode"
            }
        }
    };
}(Jodit.modules.Dom);

!function(a) {
    "use strict";
    Jodit.modules.Selection = function(b) {
        var c = {}, d = b.getDocument(), e = b.getWindow(), f = b.$editor, g = function() {
            if (e.getSelection) return e.getSelection();
            if (d.getSelection) return d.getSelection();
            return d.selection.createRange();
        }, h = function(a) {
            var b = g(), c, e = [];
            if (b && b.getRangeAt && b.rangeCount) for (c = 0; c < b.rangeCount; c += 1) e.push(b.getRangeAt(c)); else e = d.createRange ? [ d.createRange() ] : [];
            return void 0 !== a ? e[a] : e;
        }, i = function(a) {
            var d = c.range(0), e = d.startContainer, g = d.endContainer;
            if (e === g) {
                a.call(e, e);
                b.node.each(e, a);
                return;
            }
            while (e && e !== g) {
                e = b.node.findSibling(e, f[0], "firstChild", "nextSibling", false);
                if (e) a.call(e, e);
            }
            e = d.startContainer;
            while (e && e !== d.commonAncestorContainer) {
                a.call(e, e);
                e = e.parentNode;
            }
        }, j = function() {
            var a = g();
            if (a.removeAllRanges && a.removeAllRanges()) return;
            if (a.empty && a.empty()) return;
            if (a.clear) a.clear();
        }, k = function(a) {
            var c, e, f, h;
            function i(a) {
                while (a) {
                    if (a.nodeType === Node.ELEMENT_NODE || a.nodeType === Node.TEXT_NODE && a.data && /[\r\n\s]/.test(a.data)) return a;
                    a = a.nextSibling;
                }
            }
            if (!a) return;
            if (/^(LI|DT|DD)$/.test(a.nodeName)) {
                h = i(a.firstChild);
                if (h && /^(UL|OL|DL)$/.test(h.nodeName)) a.insertBefore(d.createTextNode("\xa0"), a.firstChild);
            }
            c = d.createRange();
            if (!b.browser("msie")) a.normalize();
            if (a.hasChildNodes()) {
                e = a;
                while (e) {
                    if (e.nodeType === e.TEXT_NODE) {
                        c.setStart(e, 0);
                        c.setEnd(e, 0);
                        break;
                    }
                    f = e;
                    e = b.node.findSibling(e, a, "firstChild", "nextSibling", false);
                }
                if (!e) {
                    c.setStart(f, 0);
                    c.setEnd(f, 0);
                }
            } else if ("BR" === a.nodeName) if (a.nextSibling && b.node.isBlock(a.nextSibling)) {
                c.setStartBefore(a);
                c.setEndBefore(a);
            } else {
                c.setStartAfter(a);
                c.setEndAfter(a);
            } else {
                c.setStart(a, 0);
                c.setEnd(a, 0);
            }
            j();
            g().addRange(c);
        }, l = function(a) {
            var c = h(0), d = c.startContainer, e, g, i, j = false, k = b.node.getParentNode(d, b.node.isBlock), l = c.startOffset;
            if (d.nodeType === Node.ELEMENT_NODE && d.hasChildNodes()) {
                j = l > d.childNodes.length - 1;
                d = d.childNodes[Math.min(l, d.childNodes.length - 1)] || d;
                if (j && d.nodeType === Node.TEXT_NODE) l = d.nodeValue.length; else l = 0;
            }
            if (d.nodeType === Node.TEXT_NODE) {
                i = g = d.nodeValue;
                if (Jodit.SPACE_REG_EXP_START.test(g) && l) {
                    i = g.replace(Jodit.INVISIBLE_SPACE_REG_EXP_START, "");
                    l -= g.length - i.length;
                }
                g = i;
                if (Jodit.SPACE_REG_EXP_END.test(g) && l) {
                    i = b.helper.trim(g);
                    if (l > i.length) l = i.length;
                }
                if (l < 0) l = 0;
            }
            if (d.nodeType === Node.TEXT_NODE && (a ? l > 0 : l < i.length)) return false;
            if (a && d.nodeType === Node.ELEMENT_NODE && (k && d === k.firstChild || d === f[0].firstChild)) return true;
            if (!a && d.nodeType === Node.ELEMENT_NODE && (k && d === k.lastChild || d === f[0].lastChild)) return true;
            if ("TABLE" === d.nodeName || d.previousSibling && "TABLE" === d.previousSibling.nodeName) return j && !a || !j && a;
            e = d;
            if (d.nodeType === Node.TEXT_NODE) if (a && 0 === l) e = b.node.findSibling(e, k, "lastChild", "previousSibling"); else if (!a && l === i.length) e = b.node.findSibling(e, k, "firstChild", "nextSibling");
            while (e) {
                if (e.nodeType === Node.ELEMENT_NODE) {
                    if ("BR" !== e.nodeName) return false;
                } else if (e.nodeType === Node.TEXT_NODE && !/^[ \t\r\n]*$/.test(e.nodeValue) && !b.node.isEmptyTextNode(e)) return false;
                if (a) e = b.node.findSibling(e, k, "lastChild", "previousSibling", false); else e = b.node.findSibling(e, k, "firstChild", "nextSibling", false);
            }
            return true;
        }, m = function() {
            return b.$editor[0] === b.getDocument().activeElement;
        }, n = function(a) {
            var b = d.createRange(), c;
            b.setStartAfter(a);
            b.collapse(true);
            c = g();
            j();
            c.addRange(b);
        }, o = function() {
            var a = h(), b;
            for (b = 0; b < a.length; b += 1) if (!a[b].collapsed) return false;
            return true;
        }, p = function(a) {
            var c, d;
            c = g();
            if (!m()) b.$editor.focus();
            if (!o()) b.execCommand("Delete");
            if (c.rangeCount) {
                d = h(0);
                d.collapse(false);
                d.insertNode(a);
                d = d.cloneRange();
                d.selectNodeContents(a);
                d.collapse(false);
                j();
                c.addRange(d);
            }
        }, q = function(a) {
            var c = d.createElement("DIV"), e = d.createDocumentFragment(), f, g;
            if (!m()) b.editor.focus();
            c.innerHTML = a;
            f = c.lastChild;
            while (c.firstChild) e.appendChild(c.firstChild);
            p(e);
            g = b.editor.lastChild;
            while (g && g.nodeType === Node.TEXT_NODE && g.previousSibling && /^\s*$/.test(g.data)) g = g.previousSibling;
            if (f) {
                if (g && f === g && 1 === f.nodeType) b.editor.appendChild(d.createElement("br"));
                n(f);
            }
        }, r = function(c, e) {
            var f = "string" === a.type(c) ? a("<img/>", d) : a(c), g;
            if (!o()) b.execCommand("Delete");
            if ("string" === a.type(c)) f.attr("src", c);
            g = b.options.imageDefaultWidth;
            if (g && "auto" !== g && String(g).indexOf("px") < 0 && String(g).indexOf("%") < 0) g += "px";
            f.css(e || {
                width: g
            });
            f.one("load", function() {
                if (this.naturalHeight < a(this).height() || this.naturalWidth < a(this).width()) {
                    f.css("width", "");
                    f.css("height", "");
                }
            }).each(function() {
                if (this.complete) a(this).trigger("load");
            });
            p(f[0]);
        }, s = function(a) {
            var b = d.createRange();
            b.selectNode(a);
            j();
            g().addRange(b);
        }, t = function(a, b, c, e) {
            if (!c) c = a;
            if (void 0 === e) e = b;
            var f = g(), h;
            if (!f) return;
            if (f.collapse && f.extend) {
                f.collapse(a, b);
                f.extend(c, e);
            } else {
                h = d.createRange();
                h.setStart(a, b);
                h.setEnd(c, e);
                j();
                f.addRange(h);
            }
        }, u = function() {
            f.find(".jodit_marker").remove();
        }, v = function(a, b) {
            return '<span class="jodit_marker" data-start="' + (a ? 1 : 0) + '" data-index="' + b + '"  style="display: inline-block; line-height: 0;">&#8203;</span>';
        }, w = function(c, e, f) {
            var g, h, i, j;
            try {
                j = c.cloneRange();
                j.collapse(!!e);
                g = a(v(e, f), d).get(0);
                j.insertNode(g);
                if (e && c.collapsed) {
                    h = g.nextSibling;
                    while (h && h.nodeType === Node.TEXT_NODE && !h.textContent.length) {
                        h.parentNode.removeChild(h);
                        h = g.nextSibling;
                    }
                }
                if (e && !c.collapsed) {
                    h = g.nextSibling;
                    if (h && b.node.isBlock(h)) {
                        i = [ h ];
                        do {
                            h = i[0];
                            i = h ? a(h).contents() : [];
                        } while (i[0] && b.node.isBlock(i[0]));
                        if (h.firstChild) h.insertBefore(g, h.firstChild); else h.appendChild(g);
                    }
                }
                if (!e && !c.collapsed) {
                    h = g.previousSibling;
                    if (h && b.node.isBlock(h)) {
                        i = [ h ];
                        do {
                            h = i[i.length - 1];
                            i = h ? a(h).contents() : [];
                        } while (i[i.length - 1] && b.node.isBlock(i[i.length - 1]));
                        a(h).append(g);
                    }
                    if (g.parentNode && [ "TD", "TH" ].indexOf(g.parentNode.tagName) !== -1 && g.parentNode.previousSibling && !g.previousSibling && b.node.isBlock(g.parentNode.previousSibling)) g.parentNode.previousSibling.appendChild(g);
                }
                return g;
            } catch (k) {
                console.log(k);
                return null;
            }
        }, x = false, y = function() {
            if (x) return;
            u();
            var a = h(), b;
            for (b = 0; b < a.length; b += 1) if (a[b].startContainer !== d) {
                w(a[b], true, b);
                w(a[b], false, b);
            }
            x = true;
        }, z = function(a, b) {
            var c, e, f = null;
            u();
            if (void 0 !== d.caretPositionFromPoint) {
                c = d.caretPositionFromPoint(a, b);
                f = d.createRange();
                f.setStart(c.offsetNode, c.offset);
                f.setEnd(c.offsetNode, c.offset);
            } else if (void 0 !== d.caretRangeFromPoint) {
                c = d.caretRangeFromPoint(a, b);
                f = d.createRange();
                f.setStart(c.startContainer, c.startOffset);
                f.setEnd(c.startContainer, c.startOffset);
            }
            if (null !== f) {
                j();
                g().addRange(f);
            } else if (void 0 !== d.body.createTextRange) try {
                f = d.body.createTextRange();
                f.moveToPoint(a, b);
                console.log(f);
                e = f.duplicate();
                e.moveToPoint(a, b);
                f.setEndPoint("EndToEnd", e);
                f.select();
            } catch (h) {
                return false;
            }
            x = false;
            y();
        }, A = function(c) {
            var e = f.find('.jodit_marker[data-start="1"]'), h, i, k, l, m, n, o, p, q, r, s, t = false, v;
            if (!e.length) return false;
            o = g();
            f.focus();
            j();
            function w(a, b, c) {
                var d = a.previousSibling, e = a.nextSibling, f;
                if (d && e && d.nodeType === Node.TEXT_NODE && e.nodeType === Node.TEXT_NODE) {
                    f = d.textContent.length;
                    if (c) {
                        e.textContent = d.textContent + e.textContent;
                        d.parentNode.removeChild(d);
                        a.parentNode.removeChild(a);
                        return function() {
                            b.setStart(e, f);
                        };
                    }
                    d.textContent = d.textContent + e.textContent;
                    e.parentNode.removeChild(e);
                    a.parentNode.removeChild(a);
                    return function() {
                        b.setEnd(d, f);
                    };
                }
                return false;
            }
            for (v = 0; v < e.length; v += 1) {
                h = e.eq(v).data("index");
                i = e.get(v);
                l = d.createRange();
                k = f.find('.jodit_marker[data-start="0"][data-index="' + h + '"]').get(0);
                if (k) try {
                    b.node.clearEmptyTextSibling(i);
                    b.node.clearEmptyTextSibling(k);
                    if (i.nextSibling === k || k.nextSibling === i) {
                        r = b.node.clearEmptyTextSibling(i.nextSibling === k ? i : k, true);
                        if (r && r.nodeType === Node.TEXT_NODE) while (r && r.previousSibling && r.previousSibling.nodeType === Node.TEXT_NODE) {
                            r.previousSibling.textContent = r.previousSibling.textContent + r.textContent;
                            r = r.previousSibling;
                            r.nextSibling.parentNode.removeChild(r.nextSibling);
                        }
                        s = b.node.clearEmptyTextSibling(i.nextSibling === k ? k : i);
                        if (s && s.nodeType === Node.TEXT_NODE) while (s && s.nextSibling && s.nextSibling.nodeType === Node.TEXT_NODE) {
                            s.nextSibling.textContent = s.textContent + s.nextSibling.textContent;
                            s = s.nextSibling;
                            s.previousSibling.parentNode.removeChild(s.previousSibling);
                        }
                        if (r && b.node.isAlone(r)) r = null;
                        if (s && b.node.isAlone(s)) s = null;
                        if (r && s && r.nodeType === Node.TEXT_NODE && s.nodeType === Node.TEXT_NODE) {
                            i.parentNode.removeChild(i);
                            k.parentNode.removeChild(k);
                            p = r.textContent.length;
                            r.textContent = r.textContent + s.textContent;
                            s.parentNode.removeChild(s);
                            l.setStart(r, p);
                            l.setEnd(r, p);
                            t = true;
                        } else if (!r && s && s.nodeType === Node.TEXT_NODE) {
                            k.parentNode.removeChild(k);
                            a(s).before(d.createTextNode("\u200b"));
                            l.setStart(s, 0);
                            l.setEnd(s, 0);
                            t = true;
                        } else if (!s && r && r.nodeType === Node.TEXT_NODE) {
                            i.parentNode.removeChild(i);
                            k.parentNode.removeChild(k);
                            a(r).after(d.createTextNode("\u200b"));
                            l.setStart(r, r.textContent.length);
                            l.setEnd(r, r.textContent.length);
                            t = true;
                        }
                    }
                    if (!t) {
                        if (i.nextSibling === k) {
                            m = w(k, l, true);
                            if (!m) l.setStartAfter(k);
                            n = w(i, l, false);
                            if (!n) l.setEndBefore(i);
                        } else {
                            if (i.previousSibling === k) {
                                i = k;
                                k = i.nextSibling;
                            }
                            if (!(k.nextSibling && "BR" === k.nextSibling.tagName || !k.nextSibling && b.node.isBlock(i.previousSibling) || i.previousSibling && "BR" === i.previousSibling.tagName)) {
                                i.style.display = "inline";
                                k.style.display = "inline";
                                q = a(d.createTextNode("\u200b"));
                            }
                            m = w(i, l, true);
                            if (!m) {
                                a(i).before(q);
                                l.setStartBefore(i);
                            }
                            n = w(k, l, false);
                            if (!n) {
                                a(k).after(q);
                                l.setEndAfter(k);
                            }
                        }
                        if (m) m();
                        if (n) n();
                    }
                } catch (y) {
                    console.log(y);
                }
                o.addRange(l);
            }
            if (!c) u();
            x = false;
        }, B = function() {
            if (void 0 !== e.getSelection) {
                var a = g();
                if (a.rangeCount > 0) return h(0).commonAncestorContainer;
            }
            return b.editor;
        }, C = function(a) {
            var b = d.createRange();
            b.selectNodeContents(a);
            b.collapse(false);
            j();
            g().addRange(b);
        };
        c = {
            insertAtPoint: z,
            selectImage: s,
            each: i,
            moveToCaretPosition: k,
            moveToCursorPosition: k,
            caretAtStartOrEndOfBlock: l,
            insertHTML: q,
            insertNode: p,
            isCollapsed: o,
            set: t,
            get: g,
            range: h,
            empty: j,
            unmark: u,
            marker: v,
            save: y,
            mark: w,
            restore: A,
            current: B,
            isFocused: m,
            focusAfter: n,
            focusTo: C,
            insertImage: r
        };
        return c;
    };
}(Jodit.modules.Dom);

!function(a) {
    "use strict";
    Jodit.modules.Snapshot = function(a) {
        var b = a.editor, c, d = function(a) {
            if (!a.parentNode) return 0;
            var b = a.parentNode.childNodes, c = 0, d, e;
            for (e = 0; e < b.length; e += 1) {
                if (d && !(b[e].nodeType === Node.TEXT_NODE && "" === b[e].textContent) && !(d.nodeType === Node.TEXT_NODE && b[e].nodeType === Node.TEXT_NODE)) c += 1;
                if (b[e] === a) return c;
                d = b[e];
            }
        }, e = function(a) {
            var c = [];
            if (!a.parentNode) return [];
            while (a && a !== b) {
                c.push(d(a));
                a = a.parentNode;
            }
            return c.reverse();
        }, f = function(a, b) {
            while (a && a.nodeType === Node.TEXT_NODE) {
                a = a.previousSibling;
                if (a && a.nodeType === Node.TEXT_NODE) b += a.textContent.length;
            }
            return b;
        }, g = function() {
            var c = {}, d;
            c.html = b.innerHTML;
            d = a.selection.range(0);
            if (d) c.range = {
                startContainer: e(d.startContainer),
                startOffset: f(d.startContainer, d.startOffset),
                endContainer: e(d.endContainer),
                endOffset: f(d.endContainer, d.endOffset)
            };
            return c;
        }, h = function(a) {
            var c = b, d;
            for (d = 0; c && d < a.length; d += 1) c = c.childNodes[a[d]];
            return c;
        }, i = function(a, b) {
            return a.html === b.html && JSON.stringify(a.range) === JSON.stringify(b.range);
        }, j = function(c) {
            b.innerHTML = c.html;
            if (c.range) a.selection.set(h(c.range.startContainer), c.range.startOffset, h(c.range.endContainer), c.range.endOffset);
        };
        c = {
            make: g,
            equal: i,
            restore: j
        };
        return c;
    };
}(Jodit.modules.Dom);

!function(a) {
    "use strict";
    Jodit.modules.Browser = function() {
        return function(a) {
            var b = navigator.userAgent.toLowerCase(), c = (/(chrome)[\s\/]([\w.]+)/.exec(b) || /(webkit)[\s\/]([\w.]+)/.exec(b) || /(opera)(?:.*version)[\s\/]([\w.]+)/.exec(b) || /(msie)[\s]([\w.]+)/.exec(b) || /(trident)\/([\w.]+)/.exec(b) || b.indexOf("compatible") < 0) && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(b) || [];
            if ("version" === a) return c[2];
            if ("webkit" === a) return "chrome" === c[1] || "webkit" === c[1];
            if ("msie" === a) return "trident" === c[1] || "msie" === c[1];
            return c[1] === a;
        };
    };
}(Jodit.modules.Dom);

!function(a) {
    "use strict";
    Jodit.defaultOptions = a.extend(true, Jodit.defaultOptions, {
        dialog: {
            resizable: true,
            draggable: true
        }
    });
    Jodit.modules.Dialog = function(b, c) {
        var d, e = a.extend({}, Jodit.defaultOptions.dialog, b && b.options ? b.options.dialog : {}, c), f = a('<div class="jodit jodit_dialog_box">' + '<div class="jodit_dialog_overlay"></div>' + '<div class="jodit_dialog">' + '<div class="jodit_dialog_header non-selected">' + '<h4></h4><a href="javascript:void(0)" title="Close" class="jodit_close">&times;</a>' + "</div>" + '<div class="jodit_dialog_content"></div>' + '<div class="jodit_dialog_footer"></div>' + (e.resizable ? '<div class="jodit_dialog_resizer"><i class="icon icon-resize"></i></div>' : "") + "</div>" + "</div>"), g, h, i = document.body, j = false, k = f.find(".jodit_dialog"), l = f.find(".jodit_dialog_resizer"), m = false, n = function() {
            return k;
        }, o = function() {
            return f;
        }, p = function(a, b) {
            if (a) k.css({
                width: a
            });
            if (b) k.css({
                height: b
            });
        }, q = function(a, b) {
            var c = parseInt(window.innerWidth, 10), d = parseInt(window.innerHeight, 10), e = c / 2 - k.outerWidth() / 2, f = d / 2 - k.outerHeight() / 2;
            if (void 0 !== a && void 0 !== b) {
                g = a;
                h = b;
                m = Math.abs(a - e) > 100 || Math.abs(b - f) > 100;
            }
            k.css({
                left: (a || e) + "px",
                top: (b || f) + "px"
            });
        }, r = function(a) {
            f.$header.children().detach();
            f.$header.empty();
            f.$header.append(a);
        }, s = function(a) {
            f.$content.children().detach();
            f.$content.empty();
            f.$content.append(a);
        }, t = function(a) {
            f.$footer.children().detach();
            f.$footer.empty();
            f.$footer.append(a);
            k.toggleClass("with_footer", !!a);
        }, u = function() {
            var b = 0, c, d, e;
            a(".jodit_dialog_box").each(function() {
                c = a(this).data("jodit_dialog");
                e = parseInt(c.getDialog().css("z-index"), 10);
                if (c.isOpened() && e > b) {
                    d = c;
                    b = e;
                }
            });
            return c;
        }, v = function() {
            var b = 0;
            a(".jodit_dialog_box .jodit_dialog").each(function() {
                b = Math.max(parseInt(a(this).css("z-index"), 10), b);
            });
            k.css("z-index", b + 1);
            f.find(".jodit_dialog_overlay").css("z-index", b + 1);
        }, w = function(a, c, e, i) {
            if (b) if (false === b.events.fire(d, "beforeOpen")) return;
            j = true === e;
            if (void 0 !== c) r(c);
            if (a) s(a);
            f.addClass("active");
            if (i) f.addClass("jodit_modal");
            q(g, h);
            v();
            if (b) b.events.fire(d, "afterOpen");
        }, x = function() {
            return f.hasClass("active");
        }, y = false, z = false, A, B, C = {
            x: 0,
            y: 0,
            w: 0,
            h: 0
        }, D = function(a) {
            if (z || y) {
                z = false;
                y = false;
                if (b.events) b.events.fire(d, "endResize endMove");
            }
        }, E = function(a) {
            if (!e.draggable) return;
            z = true;
            A = a.clientX;
            B = a.clientY;
            C.x = parseInt(k.css("left"), 10);
            C.y = parseInt(k.css("top"), 10);
            v();
            a.preventDefault();
            if (b.events) b.events.fire(d, "startMove");
        }, F = function(a) {
            if (z && e.draggable) {
                q(C.x + a.clientX - A, C.y + a.clientY - B);
                if (b.events) b.events.fire(d, "move", [ a.clientX - A, a.clientY - B ]);
                a.stopImmediatePropagation();
                a.preventDefault();
            }
            if (y && e.resizable) {
                p(C.w + a.clientX - A, C.h + a.clientY - B);
                if (b.events) b.events.fire(d, "resizeDialog", [ a.clientX - A, a.clientY - B ]);
                a.stopImmediatePropagation();
                a.preventDefault();
            }
        }, G, H, I = function() {
            f.remove();
            f.empty();
            a(window).off("onmouseup", D).off("onmousemove", F).off("keydown", G).off("resize", H);
        }, J = function() {
            if (b) b.events.fire(d, "beforeClose");
            f.removeClass("active");
            if (j) I();
            if (b) b.events.fire(d, "afterClose");
        }, K = function(a) {
            y = true;
            A = a.clientX;
            B = a.clientY;
            C.w = k.outerWidth();
            C.h = k.outerHeight();
            if (b.events) b.events.fire(d, "startResize");
        };
        f.$header = f.find(".jodit_dialog_header>h4");
        f.$content = f.find(".jodit_dialog_content");
        f.$footer = f.find(".jodit_dialog_footer");
        f.$close = f.find(".jodit_dialog_header>a");
        a(i).append(f);
        f.$close.on("click", function() {
            J();
        });
        G = function(a) {
            if (x() && 27 === a.which) {
                var b = u();
                if (b) b.close(); else J();
                a.stopImmediatePropagation();
            }
        };
        H = function(a) {
            if (e.resizable && !m && x() && !g && !h) q();
        };
        a(window).on("mousemove", F).on("mouseup", D).on("keydown", G).on("resize", H);
        f.find(".jodit_dialog_header").on("mousedown", E);
        if (e.resizable) l.on("mousedown", K);
        d = {
            getBox: o,
            getDialog: n,
            getMaxZIndexDialog: u,
            setMaxZIndex: v,
            setTitle: r,
            setContent: s,
            setFooter: t,
            setSize: p,
            open: w,
            isOpened: x,
            close: J,
            destroy: I
        };
        f.data("jodit_dialog", d);
        return d;
    };
    Jodit.Alert = function(b, c) {
        var d = new Jodit.modules.Dialog(), e = a('<div class="jodit_alert"></div>').html(b);
        d.open(e, c || "&nbsp;", true, true);
    };
    Jodit.Promt = function(b, c, d, e) {
        var f = new Jodit.modules.Dialog(), g, h = a('<form class="jodit_promt"></form>'), i = a('<input autofocus="true" type="text"/>'), j = a("<label></label>");
        if (e) i.attr("placeholder", e);
        j.html(b);
        h.append(j);
        h.append(i);
        g = a('<a href="javascript:void(0)" style="float:right;" class="jodit_button"><i class="icon icon-cancel"></i>&nbsp;Cancel</a>').on("click", f.close);
        f.setFooter([ a('<a href="javascript:void(0)" style="float:left;" class="jodit_button"><i class="icon icon-check"></i>&nbsp;OK</a>').on("click", function() {
            if (d) d(i.val());
            f.close();
        }), g ]);
        f.open(h, c || "&nbsp;", true, true);
        g[0].focus();
    };
    Jodit.Confirm = function(b, c, d) {
        var e = new Jodit.modules.Dialog(), f, g = a('<form class="jodit_promt"></form>'), h = a("<label></label>");
        h.html(b);
        g.append(h);
        f = a('<a href="javascript:void(0)" style="float:right;" class="jodit_button"><i class="icon icon-cancel"></i>&nbsp;Cancel</a>').on("click", function() {
            if (d) d(false);
            e.close();
        });
        e.setFooter([ a('<a href="javascript:void(0)" style="float:left;" class="jodit_button"><i class="icon icon-check"></i>&nbsp;Yes</a>').on("click", function() {
            if (d) d(true);
            e.close();
        }), f ]);
        e.open(g, c || "&nbsp;", true, true);
        f.focus();
    };
}(Jodit.modules.Dom);

!function(a) {
    "use strict";
    Jodit.modules.EnterKey = function(b) {
        var c, d = b.getDocument(), e = function() {
            b.selection.insertHTML("<br>" + Jodit.INVISIBLE_SPACE);
            return false;
        }, f = function(a, c) {
            var d = c ? "previousSibling" : "nextSibling", e = a[d];
            while (b.node.isEmptyTextNode(e)) {
                e.parentNode.removeChild(e);
                e = a[d];
            }
            if (void 0 === c) f(a, true);
        }, g = function(a) {
            if (a.nextSibling && a.nextSibling.nodeType === Node.TEXT_NODE && "\n" === a.nextSibling.nodeValue) return a.nextSibling;
            return a;
        }, h = function(a, b, c) {
            var e = a ? d.createElement(a) : b.cloneNode(false);
            if (e.hasAttribute("id")) e.removeAttribute("id");
            e.innerHTML = c || Jodit.INVISIBLE_SPACE;
            return e;
        }, i = function(c) {
            var d = b.selection, e, i, j;
            if (!d.range(0).collapsed) return true;
            j = d.current();
            f(j);
            if (b.node.hasParent(j, "pre|td|th|blockquote") && d.caretAtStartOrEndOfBlock(c)) {
                e = b.node.parentNode(j, "pre|table|blockquote");
                if (!b.node.findSibling(e, b.editor, false, c ? "previousSibling" : "nextSibling", true, function(a) {
                    return a.nodeType !== Node.TEXT_NODE || this.parent.helper.trim(a.nodeValue).length;
                })) {
                    i = h(b.options.enter);
                    a(g(e))[c ? "before" : "after"](i);
                    d.moveToCaretPosition(i);
                    return false;
                }
            }
            return true;
        }, j = function(c) {
            var i = b.selection, j = i.current(), k, l, m, n, o, p, q = d.createTextNode("\n");
            if (!i.isCollapsed()) b.execCommand("Delete");
            if (b.node.hasParent(j, "pre")) {
                f(j);
                i.range(0).deleteContents();
                i.insertNode(q);
                p = d.createTextNode(Jodit.INVISIBLE_SPACE);
                i.insertNode(p);
                i.focusAfter(q);
                return false;
            }
            if (b.node.hasParent(j, "li")) {
                i.range(0).deleteContents();
                k = b.node.parentNode(j, "li");
                n = a.trim(b.helper.trimInvisible(k.textContent || k.innerText || ""));
                if (0 === n.length) {
                    p = d.createTextNode(Jodit.INVISIBLE_SPACE);
                    a(b.node.parentNode(j, "ol|ul")).after(p);
                    a(b.node.parentNode(j, "li")).remove();
                    j = i.current();
                    i.moveToCaretPosition(p);
                }
            }
            if (b.options.enter === Jodit.ENTER_BR || c.shiftKey || b.node.hasParent(j, "TH|TD|BLOCKQUOTE")) return e();
            if (b.node.hasParent(j, "H[1-6]|P|DIV|LI|A")) {
                k = b.node.parentNode(j, "H[1-6]|P|DIV|LI|A", true);
                f(k);
                if (i.caretAtStartOrEndOfBlock()) {
                    o = h([ b.options.enter.toLowerCase(), "li" ].indexOf(k.tagName.toLowerCase()) === -1 ? b.options.enter : false, k);
                    a(g(k)).after(o);
                    i.moveToCaretPosition(o);
                    return false;
                }
                if (i.caretAtStartOrEndOfBlock(true)) {
                    o = k.parentNode.insertBefore(h(false, k), k);
                    i.moveToCaretPosition(k);
                    return false;
                }
                if (b.node.canSplitBlock(k)) {
                    m = i.range(0).cloneRange();
                    m.setEndAfter(k);
                    l = m.extractContents();
                    if (l.firstChild) {
                        o = l.firstChild;
                        a(g(k)).after(l);
                        o.normalize();
                        i.moveToCaretPosition(o);
                        return false;
                    }
                }
                o = h(b.options.enter);
                a(g(k)).after(o);
                i.moveToCaretPosition(o);
            } else {
                o = h(b.options.enter);
                i.insertNode(o);
                i.moveToCaretPosition(o);
            }
            return false;
        };
        b.$editor.on("keydown", function(a) {
            if (a.which === Jodit.keys.ENTER) {
                if (false === j(a)) {
                    a.preventDefault();
                    return false;
                }
            } else if (a.which === Jodit.keys.RIGHT || a.which === Jodit.keys.BOTTOM || a.which === Jodit.keys.LEFT || a.which === Jodit.keys.TOP) if (false === i(a.which === Jodit.keys.LEFT || a.which === Jodit.keys.TOP)) {
                a.preventDefault();
                return false;
            }
        });
        c = {
            createNewBlock: h,
            enter: j,
            enterBr: e
        };
        return c;
    };
}(Jodit.modules.Dom);

!function(a) {
    "use strict";
    Jodit.modules.Events = function(b) {
        var c = {}, d = function(d, e, f) {
            var g, h;
            if ("string" === a.type(d)) {
                f = e;
                e = d;
                d = b;
            }
            if (void 0 === d.handlers) return;
            e = e.split(/[\s,]+/);
            for (g = 0; g < e.length; g += 1) {
                if (void 0 === d.handlers[e[g]]) continue;
                if (void 0 !== f) {
                    for (h = 0; h < d.handlers[e[g]].length; h += 1) if (d.handlers[e[g]][h] === f) d.handlers[e[g]].splice(h, 1);
                } else delete d.handlers[e[g]];
            }
            return c;
        }, e = function(d, e, f) {
            var g;
            if ("string" === a.type(d)) {
                f = e;
                e = d;
                d = b;
            }
            e = e.split(/[\s,]+/);
            for (g = 0; g < e.length; g += 1) {
                if (void 0 === d.handlers) d.handlers = {};
                if (void 0 === d.handlers[e[g]]) d.handlers[e[g]] = [];
                d.handlers[e[g]].push(f);
            }
            return c;
        }, f = function(c, d, e) {
            var f, g, h;
            if ("string" === a.type(c)) {
                e = d;
                d = c;
                c = b;
            }
            if (void 0 === c.handlers) return;
            d = d.split(/[\s,]+/);
            for (f = 0; f < d.length; f += 1) {
                if (void 0 === c.handlers[d[f]]) continue;
                for (g = 0; g < c.handlers[d[f]].length; g += 1) if (false === c.handlers[d[f]][g].apply(c, e || [])) h = false;
            }
            return h;
        };
        c = {
            on: e,
            off: d,
            fire: f
        };
        return c;
    };
}(Jodit.modules.Dom);

!function(a) {
    "use strict";
    Jodit.defaultOptions = a.extend(true, Jodit.defaultOptions, {
        filebrowser: {
            howLongShowMsg: 3e3,
            createNewFolder: true,
            deleteFolder: true,
            width: "650px",
            height: "400px",
            buttons: [ "upload", "remove", "update", "select" ],
            isSuccess: function(a) {
                return !a.error;
            },
            getMsg: function(a) {
                return a.msg;
            },
            ajax: {
                url: "",
                async: true,
                beforeSend: function() {
                    return true;
                },
                data: {},
                cache: true,
                contentType: "application/x-www-form-urlencoded; charset=UTF-8",
                headers: {},
                method: "POST",
                processData: true,
                dataType: "json",
                prepareData: function(a) {
                    return a;
                },
                process: function(a) {
                    return {
                        files: a.files || [],
                        path: a.path,
                        baseurl: a.baseurl,
                        error: a.error,
                        msg: a.msg
                    };
                }
            },
            create: {
                data: {
                    action: "create"
                }
            },
            move: {
                data: {
                    action: "move"
                }
            },
            remove: {
                data: {
                    action: "remove"
                }
            },
            items: {
                data: {
                    action: "items"
                }
            },
            folder: {
                data: {
                    action: "folder"
                }
            },
            uploader: null
        }
    });
    Jodit.modules.FileBrowser = function(b) {
        var c = {}, d = b.options.filebrowser, e = "", f = false, g = new Jodit.modules.Dialog(b), h = a('<div class="jodit_filebrowser_loader"><i class="icon-loader"></i></div>'), i = a('<div class="jodit_filebrowser non-selected">' + '<div class="jodit_filebrowser_tree"></div>' + '<div class="jodit_filebrowser_files"></div>' + '<div class="jodit_filebrowser_status"></div>' + "</div>"), j = i.find(".jodit_filebrowser_status"), k = {
            upload: a('<div class="jodit_uploadfile_button jodit_button"><i class="icon icon-plus"></i><input type="file" accept="image/*" tabindex="-1" dir="auto" multiple=""/></div>'),
            remove: a('<div class="jodit_button disabled"><i class="icon icon-bin"></i></div>'),
            update: a('<div class="jodit_button"><i class="icon icon-update"></i></div>'),
            select: a('<div class="jodit_button disabled"><i class="icon icon-check"></i></div>'),
            addfolder: a('<a class="jodit_button addfolder" href="javascript:void(0)"><i class="icon icon-plus"></i> Folder</a>')
        }, l, m = i.find(".jodit_filebrowser_tree"), n = i.find(".jodit_filebrowser_files"), o = function(a) {
            return a.replace(/[\\\/]+/g, "/");
        }, p = function(a) {
            return a.replace(/[\\\/]+/g, "/");
        }, q = function() {
            return g.isOpened() && i.is(":visible");
        }, r = 0, s = function(a, b) {
            clearTimeout(r);
            j.removeClass("success").text(a).addClass("active");
            if (b) j.addClass("success");
            r = setTimeout(function() {
                j.removeClass("active");
            }, d.howLongShowMsg);
        }, t = function(b, c) {
            var e = [];
            a.each(b, function(b, f) {
                var g = a('<a href="javascript:void(0)" data-path="' + p(c + f) + '/"><span>' + f + "</span></a>");
                e.push(g);
                if (d.deleteFolder && ".." !== f && "." !== f) g.append(a('<i class="remove" data-path="' + p(c + f + "/") + '">&times;</i>'));
            });
            m.html(e);
            if (d.createNewFolder) m.append(k.addfolder);
        }, u = function(b, c, d) {
            var e = [];
            a.each(b, function(a, b) {
                e.push('<a href="' + o(d + c + b) + '" data-path="' + p((c ? c + "/" : "") + b + "/") + '" data-name="' + b + '" data-url="' + o(d + c + b) + '">' + '<img src="' + o(d + c + b) + '" alt="' + b + '">' + "</a>");
            });
            n.html(e);
        }, v = function() {
            k.remove.toggleClass("disabled", !n.find(">a.active").length);
            k.select.toggleClass("disabled", !n.find(">a.active").length);
        }, w = 0, x = function(b, c, e) {
            var f, g = a.extend(true, {}, d[b]);
            g.data = g.prepareData(g.data);
            f = a.ajax(g);
            f.done(c);
            f.error(e);
            return f;
        }, y = function(a) {
            if (a) d.items.data.path = a; else a = d.items.data.path || "";
            if (d.items.url) {
                n.addClass("active").html(h[0].cloneNode(true));
                if (w.abort) w.abort();
                w = x("items", function(a) {
                    var b = d.items.process.call(c, a);
                    u(b.files, b.path, b.baseurl);
                    v();
                }, function(a) {
                    s("Error on load list");
                });
            }
        }, z = 0, A = function(a) {
            if (a) d.folder.data.path = a;
            e = a;
            if (l) l.setPath(e);
            if (d.folder.url) {
                m.addClass("active").html(h[0].cloneNode(true));
                if (z.abort) z.abort();
                z = x("folder", function(a) {
                    var b = d.folder.process.call(c, a);
                    e = b.path;
                    t(b.files, b.path);
                }, function(a) {
                    s("Error on load folders");
                });
            } else m.removeClass("active");
            y(a);
        }, B = function(a, b) {
            d.create.data.path = b;
            d.create.data.name = a;
            x("create", function(a) {
                if (d.isSuccess(a)) A(b); else s(d.getMsg(a));
            }, function(a) {
                s(a);
            });
        }, C = function(a, b) {
            d.move.data.filepath = a;
            d.move.data.path = b;
            x("move", function(a) {
                if (d.isSuccess(a)) A(b); else s(d.getMsg(a));
            }, function(a) {
                s(a);
            });
        }, D = function(a, b) {
            d.remove.data.path = a;
            d.remove.data.target = b;
            x("remove", function(a) {
                a = d.remove.process.call(c, a);
                if (!d.isSuccess(a)) s(d.getMsg(a)); else {
                    v();
                    s(d.getMsg(a), true);
                }
            }, function(a) {
                s(a);
            });
        }, E = function() {
            g.close();
        }, F = function(b) {
            return function() {
                if (n.find(">a.active").length) {
                    var c = [];
                    n.find(">a.active").each(function() {
                        c.push(a(this).data("url"));
                    });
                    E();
                    if (a.isFunction(b)) b({
                        baseurl: "",
                        files: c
                    });
                }
                return false;
            };
        }, G = function(c) {
            if (d.items.url) {
                n.off("dblclick").on("dblclick", ">a", F(c));
                k.select.off("click").on("click", F(c));
                A(e);
                var f = [ "File Browser&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" ], h, j;
                for (h = 0; h < d.buttons.length; h += 1) if (void 0 !== k[d.buttons[h]]) f.push(k[d.buttons[h]]); else if (a.isFunction(d.buttons[h])) f.push(d.buttons[h].call(b)); else if (a.isPlainObject(d.buttons[h]) && d.buttons[h].exec && d.buttons[h].name) {
                    j = a('<div class="jodit_button"><i class="icon icon-' + d.buttons[h].name + '"></i></div>');
                    f.push(j);
                    j.on("click", d.buttons[h].exec);
                }
                g.open(i, f);
            }
        }, H = function(a, b) {
            if (d.isSuccess(b)) s("Files " + a.join(",") + " was uploaded", true); else s(d.getMsg(b));
            y();
        }, I = function() {
            if (void 0 !== Jodit.modules.Uploader) {
                l = new Jodit.modules.Uploader(b, d.uploader);
                l.setPath(e);
                l.bind(i, H);
                l.bind(k.upload, H);
            }
        }, J = false, K = {
            x: 0,
            y: 0
        }, L = {
            x: 0,
            y: 0
        };
        k.remove.on("click", function() {
            if (n.find(">a.active").length) Jodit.Confirm("Are you shure?", "", function(b) {
                if (b) {
                    n.find(">a.active").each(function() {
                        D(e, a(this).data("name"));
                    });
                    v();
                    A(e);
                }
            });
        });
        k.update.on("click", function() {
            A();
        });
        m.on("click", ">a", function() {
            if (a(this).hasClass("addfolder")) Jodit.Promt("Enter Directory name", "Create directory", function(a) {
                B(a, e);
            }, "type name"); else A(a(this).data("path"));
        }).on("click", ">a>i.remove", function(b) {
            var c = a(this).parent().data("path");
            Jodit.Confirm("Are you shure?", "", function(b) {
                if (b) {
                    D(c, a(this).parent().data("name"));
                    A(e);
                }
            });
            b.stopPropagation();
        }).on("dragstart", ">a", function(a) {
            f = this;
        }).on("drop", ">a", function(b) {
            if (f) C(a(f).data("path"), a(this).data("path"));
        });
        n.on("mousedown", ">a>img", function(b) {
            L.x = b.clientX;
            L.y = b.clientY;
            K = a(this).offset();
            J = a(this.cloneNode(true));
            J.css({
                "z-index": 1e14,
                position: "fixed",
                display: "none",
                left: K.left,
                top: K.top,
                width: a(this).width(),
                height: a(this).height()
            }).appendTo("body").get(0);
        }).on("dragstart", ">a", function(b) {
            f = this;
            b.originalEvent.dataTransfer.setData("text/plain", a(this).attr("href"));
            b.stopPropagation();
        }).on("click", function(a) {
            if (!c.ctrlKey(a)) {
                n.find(">a").removeClass("active");
                v();
            }
        }).on("click", ">a", function(b) {
            if (!c.ctrlKey(b)) n.find(">a").removeClass("active");
            a(this).addClass("active");
            v();
            b.stopPropagation();
            return false;
        });
        a(document).on("dragover", function(b) {
            if (q() && J && void 0 !== b.originalEvent.clientX) a(J).css({
                left: b.originalEvent.clientX + 20,
                top: b.originalEvent.clientY + 20,
                display: "block"
            });
        });
        a(window).on("keydown", function(a) {
            if (q() && 46 === a.which) k.remove.trigger("click");
        }).on("mouseup dragend", function(b) {
            if (J) {
                a(J).remove();
                J = false;
            }
        });
        g.setSize(d.width, d.height);
        d.create = a.extend(true, {}, d.ajax, d.create);
        d.move = a.extend(true, {}, d.ajax, d.move);
        d.remove = a.extend(true, {}, d.ajax, d.remove);
        d.folder = a.extend(true, {}, d.ajax, d.folder);
        d.items = a.extend(true, {}, d.ajax, d.items);
        c = {
            init: I,
            open: G,
            status: s,
            create: B,
            move: C,
            remove: D,
            isOpened: q
        };
        return c;
    };
}(Jodit.modules.Dom);

!function(a) {
    "use strict";
    Jodit.modules.Form = function(b) {
        var c, d, e = function(c, d) {
            var e = a('<div class="jodit_colorpicker"></div>');
            a.each(b.options.colors, function(c, f) {
                var g = a("<a " + (b.helper.colorToHex(d) === f.toUpperCase() ? ' class="active" ' : "") + ' data-color="' + f + '" href="javascript:void(0)"><i class="icon"></i></a>');
                g.css("background-color", f);
                e.append(g);
            });
            e.append('<a data-color="" href="javascript:void(0)"><i class="icon icon-eraser"></i></a>');
            e.on("mousedown", "a", function(d) {
                var f = this, g;
                e.find("a.active").removeClass("active");
                a(f).addClass("active");
                g = a(f).data("color");
                if (c && a.isFunction(c)) c.call(b, g);
                d.stopPropagation();
                return false;
            });
            return e;
        }, f = function(b) {
            var d = a('<div class="jodit_tabs"></div>'), e = a('<div class="jodit_tabs_wrapper"></div>'), f = a('<div class="jodit_tabs_buttons"></div>'), g = 0;
            d.append(f);
            d.append(e);
            a.each(b, function(b, d) {
                var h = a('<div class="jodit_tab"></div>'), i = a('<a href="javascript:void(0);"></a>');
                i.html(b);
                f.append(i);
                if (!a.isFunction(d)) h.append(d); else h.append('<div class="jodit_tab_empty"></div>');
                e.append(h);
                i.on("mousedown", function(b) {
                    f.find("a").removeClass("active");
                    e.find(".jodit_tab").removeClass("active");
                    i.addClass("active");
                    h.addClass("active");
                    if (a.isFunction(d)) d.call(c);
                    b.stopPropagation();
                    return false;
                });
                g += 1;
            });
            if (!g) return null;
            f.find("a").css("width", (100 / g).toFixed(10) + "%");
            f.find("a:first-child").addClass("active");
            e.find(".jodit_tab:first-child").addClass("active");
            return d;
        }, g = function() {
            return d;
        }, h = function(c, e) {
            var g = {}, h, i;
            if (c.upload) {
                h = a('<div class="jodit_draganddrop_file_box">' + "<strong>Drop image</strong>" + "<span><br> or click</span>" + '<input type="file" accept="image/*" tabindex="-1" dir="auto" multiple=""/>' + "</div>");
                b.uploader.bind(h, function(d, e) {
                    if (a.isFunction(c.upload)) c.upload.call(b, d);
                }, function(a) {
                    b.events.fire("errorPopap", [ b.options.uploader.getMsg(a) ]);
                });
                g['<i class="icon icon-upload"></i> Upload'] = h;
            }
            if (c.url) {
                i = a("<div>" + '<input required name="url" placeholder="http://" type="text"/>' + '<input name="text" placeholder="Alternative text" type="text"/>' + '<button type="submit">Insert</button>' + "</div>");
                d = null;
                if (e && (a(e).is("img") || a(e).find("img").length)) {
                    d = a(e).is("img") ? e : a(e).find("img").get(0);
                    i.find("input[name=url]").val(a(d).attr("src"));
                    i.find("input[name=text]").val(a(d).attr("alt"));
                    i.find("button").text("Update");
                }
                i.find("button").on("click", function() {
                    if (a.isFunction(c.url)) c.url.call(b, i.find("input[name=url]").val(), i.find("input[name=text]").val());
                    return false;
                });
                g['<i class="icon icon-link"></i> URL'] = i;
            }
            if (c.filebrowser) if (b.filebrowser && (b.options.filebrowser.url || b.options.filebrowser.ajax.url || b.options.filebrowser.items.url)) g['<i class="icon icon-folder"></i> Browse'] = function() {
                b.filebrowser.open(c.filebrowser);
            };
            return f(g);
        };
        c = {
            buildColorPicker: e,
            buildTabs: f,
            imageSelector: h,
            getCurrentImage: g
        };
        return c;
    };
}(Jodit.modules.Dom);

!function(a) {
    "use strict";
    Jodit.modules.Helper = function(a) {
        var b = function(a) {
            if (!a || "rgba(0, 0, 0, 0)" === a || "#" === a.substr(0, 1) || !a) return a;
            var b = /([\s\n\t\r]*?)rgb\((\d+), (\d+), (\d+)\)/.exec(a) || /([\s\n\t\r]*?)rgba\((\d+), (\d+), (\d+), ([\d\.]+)\)/.exec(a), c, d, e, f;
            if (!b) return a;
            c = parseInt(b[2], 10);
            d = parseInt(b[3], 10);
            e = parseInt(b[4], 10);
            f = e | d << 8 | c << 16;
            return b[1] + "#" + f.toString(16).toUpperCase();
        }, c = function(a) {
            if (/^[0-9]$/.test(a)) return a + "px";
            return a;
        }, d = function(a) {
            return a.replace(Jodit.INVISIBLE_SPACE_REG_EXP_START, "").replace(Jodit.INVISIBLE_SPACE_REG_EXP_END, "");
        }, e = function(a) {
            return a.replace(Jodit.SPACE_REG_EXP_START, "").replace(Jodit.SPACE_REG_EXP_END, "");
        }, f = function(a) {
            return e(a).replace(Jodit.INVISIBLE_SPACE_REG_EXP, "").replace(/[\s]*class=""/g, "");
        }, g = {
            normalizeSize: c,
            trimInvisible: d,
            trim: e,
            clear: f,
            colorToHex: b
        };
        return g;
    };
}(Jodit.modules.Dom);

!function(a) {
    "use strict";
    Jodit.defaultOptions = a.extend(true, Jodit.defaultOptions, {
        useImageProcessor: true,
        imageprocessor: {}
    });
    Jodit.modules.ImageProcessor = function(b, c) {
        Jodit.modules.ImageProcessor.unique += 1;
        var d, e = b.id + "_image_" + Jodit.modules.TableProcessor.unique, f = false, g = function() {
            a(b.getDocument()).off(".jodit" + e);
        }, h = function(c) {
            return {
                left: a(c).offset().left - b.$workflow.offset().left,
                top: a(c).offset().top - b.$workflow.offset().top
            };
        };
        if (c) {
            b.events.on(c, "execCommand", function(d) {
                switch (d) {
                  case "bin":
                    c.parentNode.removeChild(c);
                    break;

                  case "left":
                  case "right":
                  case "center":
                    var e = b.node.getParentNode(c, b.node.isBlock);
                    if (e) a(e).css("text-align", d);
                    break;

                  case "bottom":
                  case "middle":
                  case "top":
                    a(c).css("vertical-align", d);
                }
            });
            a(c).on("dragstart", function(a) {
                if (a.originalEvent.dataTransfer) {
                    a.originalEvent.dataTransfer.dropEffect = "move";
                    a.originalEvent.dataTransfer.setData("text/plain", "-");
                }
            }).on("mousedown", function(d) {
                a(c).addClass("jodit_focused_image");
                var e = h(c);
                b.events.fire("showPopap", [ c, Math.round(e.left + a(c).outerWidth() / 2), Math.round(e.top + a(c).outerHeight()) ]);
                f = true;
                d.stopPropagation();
            });
            a(b.getDocument()).on("keyup.jodit" + e + " mouseup.jodit" + e, function(d) {
                if (!c || !c.parentNode) {
                    g();
                    return;
                }
                if (f) f = false; else {
                    a(c).removeClass("jodit_focused_image");
                    if (!b.$editor.find(".jodit_focused_cell").length && !b.$editor.find(".jodit_focused_image").length) b.events.fire("hidePopap");
                }
            });
        }
        d = {};
        return d;
    };
    Jodit.modules.ImageProcessor.unique = 1;
}(Jodit.modules.Dom);

!function(a) {
    "use strict";
    Jodit.modules.Node = function(b) {
        var c, d = b.getDocument(), e = function(a, b, d, e, f, g) {
            var h, i;
            if (a) {
                if (!f && a[d]) return a[d];
                if (a !== b) {
                    h = a[e];
                    if (h) return h;
                    for (i = a.parentNode; i && i !== b; i = i.parentNode) {
                        h = i[e];
                        if (h && (void 0 === g || g.call(c, h))) return h;
                    }
                }
            }
        }, f = function(b, c, e, f) {
            var g = "string" === typeof c ? d.createElement(c) : c, h = [];
            if (!f) while (b.firstChild) g.appendChild(b.firstChild);
            if (e) a.each(b.attributes, function(a, b) {
                g.setAttribute(b.name, b.nodeValue);
            });
            b.parentNode.replaceChild(g, b);
            return g;
        }, g = function(a, b) {
            var c = "string" === typeof b ? d.createElement(b) : b, e = d.createElement("span");
            a.parentNode.insertBefore(e, a);
            c.appendChild(a);
            e.parentNode.replaceChild(c, e);
            return c;
        }, h = function(a, c, d) {
            if (null === a) return;
            while (a.parentNode && a !== b.editor) {
                if (c(a)) return d ? d(a) : a;
                a = a.parentNode;
            }
        }, i = function(a, b, c) {
            var d = a, e, f = function(a) {
                return a.nodeName.toLowerCase().match(new RegExp("^(" + b + ")$", "i"));
            }, g = function(a) {
                return a;
            };
            d = h(a, f, g);
            if (!c || !d) return d;
            while (d && d.parentNode) {
                e = d;
                d = h(d.parentNode, f, g);
            }
            return e;
        }, j = function(a, c) {
            var d = a;
            do {
                d = b.node.findSibling(d, a, "firstChild", "nextSibling");
                if (d) c.call(d, d);
            } while (d);
        }, k = function(a, b) {
            return !!i(a, b);
        }, l = function(a) {
            return a && a.nodeType === Node.TEXT_NODE && 0 === a.nodeValue.replace(Jodit.INVISIBLE_SPACE_REG_EXP, "").length;
        }, m = function(a, b) {
            var c;
            do {
                if (c) c.parentNode.removeChild(c);
                c = a[true === b ? "previousSibling" : "nextSibling"];
                a = c;
            } while (a && a.nodeType === Node.TEXT_NODE && !a.textContent.length);
            return a || null;
        }, n = function(a) {
            if (a) {
                if (a.nodeType !== Node.ELEMENT_NODE) return false;
                if (Jodit.BLOCKS.indexOf(a.tagName) !== -1) return true;
            }
            return false;
        }, o = function(a) {
            if (a) {
                if (a.nodeType !== Node.ELEMENT_NODE) return false;
                if (Jodit.ALONE.indexOf(a.tagName) !== -1) return true;
            }
            return false;
        }, p = function(b, c, e) {
            var f = d.createRange(), g, h, i;
            function j(a, b) {
                var c = 0, d, e;
                if (a) for (d = a.nodeType, a = a.previousSibling; a; a = a.previousSibling) {
                    e = a.nodeType;
                    if (b && e === Node.TEXT_NODE) if (e === d || !a.nodeValue.length) continue;
                    c += 1;
                    d = e;
                }
                return c;
            }
            function k(b) {
                var c, d = b.childNodes, e = b.nodeType, f;
                function g(a) {
                    var b = a.previousSibling && "SPAN" === a.previousSibling.nodeName, c = a.nextSibling && "SPAN" === a.nextSibling.nodeName;
                    return b && c;
                }
                for (c = d.length - 1; c >= 0; c -= 1) k(d[c]);
                if (e !== Node.DOCUMENT_NODE) {
                    if (e === Node.TEXT_NODE && b.nodeValue.length > 0) {
                        f = a.trim(b.nodeValue).length;
                        if ((!n(b.parentNode) || f > 0 || 0 === f) && g(b)) return;
                    } else if (e === Node.ELEMENT_NODE) {
                        d = b.childNodes;
                        if (d.length || /^(br|hr|input|img)$/i.test(b.nodeName)) return;
                    }
                    a(b).remove();
                }
                return b;
            }
            if (b && c) {
                f.setStart(b.parentNode, j(b));
                f.setEnd(c.parentNode, j(c));
                g = f.extractContents();
                f = d.createRange();
                f.setStart(c.parentNode, j(c) + 1);
                f.setEnd(b.parentNode, j(b) + 1);
                h = f.extractContents();
                i = b.parentNode;
                i.insertBefore(k(g), b);
                if (e) i.insertBefore(e, b); else i.insertBefore(c, b);
                i.insertBefore(k(h), b);
                b.parentNode.removeChild(b);
                return e || c;
            }
        }, q = function(a) {
            return a && n(a) && !/^(TD|TH|CAPTION|FORM)$/.test(a.nodeName) && !/^(fixed|absolute)/i.test(a.style.position);
        };
        c = {
            wrap: g,
            isBlock: n,
            isAlone: o,
            canSplitBlock: q,
            split: p,
            replace: f,
            findSibling: e,
            getParentNode: h,
            parentNode: i,
            each: j,
            hasParent: k,
            isEmptyTextNode: l,
            clearEmptyTextSibling: m
        };
        return c;
    };
}(Jodit.modules.Dom);

!function(a) {
    "use strict";
    Jodit.defaultOptions = a.extend(true, Jodit.defaultOptions, {
        observer: {
            subtree: true,
            childList: true,
            characterData: true,
            attributes: true
        }
    });
    Jodit.modules.Observer = function(b) {
        var c, d = new Undo.Stack(), e = false, f = b.editor, g, h, i, j, k, l, m, n = function(a) {
            if (true === a || false === a) e = a; else if (1 === a) {
                m = e;
                e = true;
            } else if (0 === a) e = void 0 !== m ? m : false;
        }, o = Undo.Command.extend({
            constructor: function(a, b) {
                this.oldValue = a;
                this.newValue = b;
            },
            execute: function() {},
            undo: function() {
                n(true);
                b.snapshot.restore(this.oldValue);
            },
            redo: function() {
                n(true);
                b.snapshot.restore(this.newValue);
            }
        }), p = function() {
            if (b.getMode() === Jodit.MODE_WYSIWYG) {
                h.toggleClass("disabled", !d.canRedo());
                i.toggleClass("disabled", !d.canUndo());
            }
        }, q = function() {
            d.redo();
        }, r = function() {
            d.undo();
        }, s = function() {
            j = b.snapshot.make();
            h = b.$toolbar.find(".toolbar-redo");
            i = b.$toolbar.find(".toolbar-undo");
            d.changed();
            l = new MutationObserver(function(a) {
                if (e) {
                    n(false);
                    return;
                }
                clearTimeout(g);
                g = setTimeout(function() {
                    k = b.snapshot.make();
                    if (!b.snapshot.equal(k, j)) {
                        d.execute(new o(j, k));
                        j = k;
                    }
                }, 300);
            });
            l.observe(f, b.options.observer);
            a(f).on("keydown", function(a) {
                if (c.ctrlKey(a)) if (a.which === Jodit.keys.Z && d.canUndo()) {
                    d.undo();
                    a.preventDefault();
                    a.stopImmediatePropagation();
                } else if (a.which === Jodit.keys.Y && d.canRedo()) {
                    d.redo();
                    a.preventDefault();
                    a.stopImmediatePropagation();
                }
            });
        };
        if (void 0 === window.MutationObserver) window.MutationObserver = function(b) {
            this.observe = function(c) {
                a(c).on("keydown mousedown drop", b);
            };
        };
        d.changed = p;
        c = {
            changed: p,
            block: n,
            redo: q,
            undo: r,
            init: s
        };
        return c;
    };
}(Jodit.modules.Dom);

!function(a) {
    "use strict";
    Jodit.modules.ObserverArea = function(b) {
        var c = {}, d = new Undo.Stack(), e = false, f, g, h, i, j, k, l, m = b.area, n = function(a) {
            if (void 0 !== a.selectionStart && document.activeElement === a) return {
                start: a.selectionStart,
                end: a.selectionEnd
            };
            if (a.createTextRange) {
                var b = document.selection.createRange(), c, d, e;
                if (b.parentElement() === a) {
                    e = a.createTextRange();
                    e.moveToBookmark(b.getBookmark());
                    for (c = 0; e.compareEndPoints("EndToStart", e) > 0; e.moveEnd("character", -1)) c += 1;
                    e.setEndPoint("StartToStart", a.createTextRange());
                    for (d = {
                        start: 0,
                        end: c
                    }; e.compareEndPoints("EndToStart", e) > 0; e.moveEnd("character", -1)) {
                        d.start += 1;
                        d.end += 1;
                    }
                    return d;
                }
            }
            return -1;
        }, o = function(b, c) {
            if (void 0 === c) c = b;
            a(m).each(function() {
                if (void 0 !== this.selectionStart) {
                    this.selectionStart = b;
                    this.selectionEnd = c;
                } else if (this.setSelectionRange) this.setSelectionRange(b, c); else if (this.createTextRange) {
                    var a = this.createTextRange();
                    a.collapse(true);
                    a.moveEnd("character", c);
                    a.moveStart("character", b);
                    a.select();
                }
            });
        }, p = Undo.Command.extend({
            constructor: function(a, b, c, d) {
                this.selectionStart = c;
                this.selectionSecond = d;
                this.oldValue = a;
                this.newValue = b;
            },
            execute: function() {},
            undo: function() {
                c.block(true);
                m.value = this.oldValue;
                o(this.selectionStart.start, this.selectionStart.end);
            },
            redo: function() {
                c.block(true);
                m.value = this.newValue;
                o(this.selectionSecond.start, this.selectionSecond.end);
            }
        }), q = function() {
            if (b.getMode() === Jodit.MODE_TEXTAREA) {
                g.toggleClass("disabled", !d.canRedo());
                h.toggleClass("disabled", !d.canUndo());
            }
        }, r = function(a) {
            e = !!a;
        }, s = function() {
            d.redo();
        }, t = function() {
            d.undo();
        }, u = function() {
            i = m.value;
            k = {
                start: 0
            };
            g = this.parent.$toolbar.find(".toolbar-redo");
            h = this.parent.$toolbar.find(".toolbar-undo");
            d.changed();
            b.$area.on("keydown", function(a) {
                var b, c, d, e, f, g;
                if (a.which === Jodit.keys.TAB) {
                    a.preventDefault();
                    b = n(m);
                    c = b.start;
                    d = b.end;
                    g = m.value;
                    f = g.substring(b.start, b.end);
                    if (b.start !== b.end && f.match(/\n/)) {
                        e = "	" + f.replace(/\n/g, "\n	");
                        d = c + e.length;
                    } else {
                        e = "	";
                        d += 1;
                        c = d;
                    }
                    m.value = g.substring(0, b.start) + e + g.substring(b.end);
                    o(c, d);
                }
            }).on("keydown", function(a) {
                if (c.ctrlKey(a)) if (a.which === Jodit.keys.Z && d.canUndo()) {
                    d.undo();
                    a.preventDefault();
                    a.stopImmediatePropagation();
                } else if (a.which === Jodit.keys.Y && d.canRedo()) {
                    d.redo();
                    a.preventDefault();
                    a.stopImmediatePropagation();
                }
            }).on("keydown mousedown change", function(a) {
                if (e || a.which === Jodit.keys.CTRL) {
                    c.block(false);
                    return;
                }
                clearTimeout(f);
                f = setTimeout(function() {
                    j = m.value;
                    if (j !== i) {
                        l = n(m);
                        d.execute(new p(i, j, k, l));
                        k = l;
                        i = j;
                    }
                }, 300);
            });
        };
        d.changed = q;
        c = {
            changed: q,
            block: r,
            redo: s,
            undo: t,
            init: u
        };
        return c;
    };
}(Jodit.modules.Dom);

!function(a) {
    "use strict";
    Jodit.modules.Plugins = function(a) {
        var b = {}, c, d, e = function() {
            if (Jodit.plugins) {
                d = Object.keys(Jodit.plugins);
                if (d.length) for (c = 0; c < d.length; c += 1) b[d[c]] = new Jodit.plugins[d[c]](a);
            }
        };
        b = {
            init: e
        };
        return b;
    };
}(Jodit.modules.Dom);

!function(a) {
    "use strict";
    Jodit.defaultOptions = a.extend(true, Jodit.defaultOptions, {
        popap: {
            img: [ {
                name: "bin"
            }, {
                name: "pencil",
                exec: function(a) {
                    if (Jodit.plugins.image.open) Jodit.plugins.image.open.call(a);
                }
            }, {
                name: "valign",
                list: {
                    top: "Top",
                    middle: "Middle",
                    bottom: "Bottom"
                }
            }, {
                name: "left",
                list: {
                    left: "Left",
                    right: "Right",
                    center: "Center"
                }
            } ],
            table: [ {
                name: "brush",
                popap: function(b, c) {
                    var d, e, f, g = a(b).find(".jodit_focused_cell"), h = g.css("color"), i = g.css("background-color");
                    d = this.form.buildColorPicker(a.proxy(function(a) {
                        g.css("background-color", a);
                        if (c) c();
                    }, this), i);
                    e = this.form.buildColorPicker(a.proxy(function(a) {
                        g.css("color", a);
                        if (c) c();
                    }, this), h);
                    f = this.form.buildTabs({
                        Background: d,
                        Text: e
                    });
                    return f;
                }
            }, {
                name: "valign",
                list: {
                    top: "Top",
                    middle: "Middle",
                    bottom: "Bottom"
                }
            }, "|", "splitv", "splitg", "\n", "merge", {
                name: "addcolumn",
                list: {
                    addcolumnbefore: "Insert column before",
                    addcolumnafter: "Insert column after"
                }
            }, {
                name: "addrow",
                list: {
                    addrowbefore: "Insert row above",
                    addrowafter: "Insert row below"
                }
            }, {
                name: "bin",
                list: {
                    bin: "Delete table",
                    binrow: "Delete row",
                    bincolumn: "Delete column",
                    empty: "Empty cell"
                }
            } ]
        }
    });
    Jodit.modules.Popap = function(b) {
        var c, d, e, f, g, h = function() {
            e.removeClass("active").find(".jodit_dropdown_open,.active").removeClass("jodit_dropdown_open active");
            f.hide();
        }, i = function(c) {
            var e = "string" === a.type(c) ? c : c.name, j = a('<li><a href="javascript:void(0)"></a></li>'), k, l = j.find("a");
            j.addClass("toolbar-" + e);
            l.addClass("icon icon-" + e);
            if (c.content) l.html(c.content);
            if (c.list) {
                k = a('<ul class="jodit_dropdownlist"></ul>');
                a.each(c.list, function(a, b) {
                    var c = i({
                        name: a,
                        content: b
                    });
                    k.append(c);
                });
                j.append(k);
                j.addClass("jodit_with_dropdownlist");
            }
            j.on("mouseup", function(a) {
                a.stopPropagation();
            }).on("mousedown", a.proxy(function(a) {
                if (j.hasClass("jodit_with_dropdownlist")) {
                    g.find(".jodit_with_dropdownlist").not(j).removeClass("jodit_dropdown_open active");
                    j.toggleClass("jodit_dropdown_open active");
                    f.hide();
                } else {
                    g.find(".jodit_with_dropdownlist").removeClass("jodit_dropdown_open active");
                    if (c.popap) {
                        f.show();
                        j.append(f);
                        f.empty();
                        f.html(c.popap.call(b, d, function() {
                            setTimeout(function() {
                                f.hide();
                            }, 30);
                        }));
                    } else if (c.exec) {
                        c.exec.call(b, d);
                        h();
                    } else {
                        b.events.fire(d, "execCommand", [ e ]);
                        h();
                    }
                }
                a.stopPropagation();
                a.preventDefault();
            }, this));
            return j;
        }, j = function(c, f) {
            h();
            g.empty();
            a.each(b.options.popap[d.tagName.toLowerCase()], function(a, b) {
                switch (b) {
                  case "\n":
                    g.append('<li class="next_row"></li>');
                    break;

                  case "|":
                    g.append('<li class="separator"></li>');
                    break;

                  default:
                    g.append(i(b));
                }
            });
            e.addClass("active");
            e.css({
                left: c + "px",
                top: f + "px",
                marginLeft: -Math.round(e.outerWidth() / 2) + "px"
            });
        }, k = function() {
            if (!e) {
                e = a('<div class="jodit_popap_inline"></div>');
                g = a('<ul class="toolbar"></ul>');
                f = a('<div class="jodit_toolbar_popap non-selected"></div>');
                f.on("mousedown", function(a) {
                    a.stopImmediatePropagation();
                });
                e.append(g);
                b.$workflow.append(e);
            }
            b.events.on("hidePopap", h);
            b.events.on("showPopap", function(a, b, c) {
                d = a;
                j(b, c);
            });
        };
        c = {
            init: k
        };
        return c;
    };
}(Jodit.modules.Dom);

!function(a) {
    "use strict";
    Jodit.defaultOptions = a.extend(true, Jodit.defaultOptions, {
        useTableResizer: true,
        useImageResizer: true,
        resizer: {
            min_width: 10,
            min_height: 10
        }
    });
    Jodit.modules.Resizer = function(b) {
        var c = {}, d = false, e = false, f, g, h, i, j, k, l, m, n, o, p = function(c) {
            return {
                left: a(c).offset().left - b.$workflow.offset().left,
                top: a(c).offset().top - b.$workflow.offset().top
            };
        }, q = a('<div class="resizer">' + '<i class="topleft"></i>' + '<i class="topright"></i>' + '<i class="bottomright"></i>' + '<i class="bottomleft"></i>' + "</div>"), r = function(b) {
            b = a(b);
            b.off(".jodit-resizer").on("drag.jodit-resizer", function(a) {
                q.hide();
            }).on("mousedown.jodit-resizer", a.proxy(function(a) {
                b.get(0).clicked = true;
            })).on("mouseup.jodit-resizer", function(a) {
                if (b.get(0).clicked) setTimeout(function() {
                    b.get(0).clicked = false;
                    q.$element = b;
                    q.show().trigger("updatesize");
                }, 50);
            });
        };
        q.find("i").on("mousedown", function(a) {
            q.$element.get(0).clicked = false;
            f = a.target || a.srcElement;
            a.preventDefault();
            a.stopImmediatePropagation();
            i = parseInt(q.$element.outerWidth(), 10);
            j = parseInt(q.$element.outerHeight(), 10);
            k = i / j;
            d = true;
            e = false;
            g = parseInt(a.clientX, 10);
            h = parseInt(a.clientY, 10);
        });
        a(window).off(".jodit-resizer" + b.id + " updateresizer.jodit-resizer" + b.id).on("mousemove.jodit-resizer" + b.id, function(a) {
            if (d) {
                e = true;
                n = parseInt(a.clientX, 10) - g;
                o = parseInt(a.clientY, 10) - h;
                if ("IMG" === q.$element[0].tagName) if (n) {
                    m = i + (f.className.match(/left/) ? -1 : 1) * n;
                    l = Math.round(m / k);
                } else {
                    l = j + (f.className.match(/top/) ? -1 : 1) * o;
                    m = Math.round(l * k);
                } else {
                    m = i + (f.className.match(/left/) ? -1 : 1) * n;
                    l = j + (f.className.match(/top/) ? -1 : 1) * o;
                }
                if (m > b.options.resizer.min_width) if (m < q.parent().outerWidth()) q.$element.css("width", m + "px"); else q.$element.css("width", "100%");
                if (l > b.options.resizer.min_height) q.$element.css("height", l + "px");
                q.trigger("updatesize");
                a.stopImmediatePropagation();
            }
        }).on("resize.jodit-resizer" + b.id + " updateresizer.jodit-resizer", function(a) {
            if (q.is(":visible")) q.trigger("updatesize");
        }).on("mouseup.jodit-resizer" + b.id + " keydown.jodit-resizer" + b.id, function(a) {
            if (q.is(":visible")) if (d) {
                if (e) b.syncCode();
                d = false;
                e = false;
                a.stopImmediatePropagation();
            } else if (!q.$element.get(0).clicked) q.hide();
        });
        q.on("updatesize.jodit-resizer" + b.id, function() {
            if (q.is(":visible")) {
                var a = p(q.$element);
                q.css({
                    top: a.top - 1 + "px",
                    left: a.left - 1 + "px",
                    width: q.$element.outerWidth() + "px",
                    height: q.$element.outerHeight() + "px"
                });
            }
        });
        b.$workflow.append(q);
        c = {
            bind: r
        };
        return c;
    };
}(Jodit.modules.Dom);

!function(a) {
    "use strict";
    Jodit.defaultOptions = a.extend(true, Jodit.defaultOptions, {
        useTableProcessor: true,
        tableprocessor: {
            accuracy: 10,
            resizerOffset: 20
        }
    });
    Jodit.modules.TableProcessor = function(b, c) {
        Jodit.modules.TableProcessor.unique += 1;
        var d, e = b.id + "_" + Jodit.modules.TableProcessor.unique, f = b.options.tableprocessor.accuracy, g = a(c), h = function() {
            return g.find("tr").length;
        }, i = function() {
            var b = g.find("tr"), c, d, e, f, h, i, j = function(a, b) {
                a.data("colcount", b);
            };
            if (b.length) b.each(function(b, g) {
                c = a(g);
                h = 0;
                c.find("td,th").each(function(b, g) {
                    f = a(g).attr("colspan") ? parseInt(a(g).attr("colspan"), 10) : 1;
                    if (a(g).attr("rowspan")) {
                        d = parseInt(a(g).attr("rowspan"), 10) - 1;
                        e = c.next();
                        for (i = 0; i < d; i += 1) {
                            j(e, f);
                            e = e.next();
                        }
                    }
                    h += f;
                });
                j(c, h);
            });
            h = 0;
            b.each(function(b, c) {
                h = Math.max(h, parseInt(a(c).data("colcount"), 10));
                a(c).removeData("colcount");
            });
            return h;
        }, j = false, k = function(a, b) {
            var c, d, e, f, k, l, m = [], n = i(), o = h(), p = I && j ? j : g.find("td,th"), q = p.get(0), r = 0, s = function(b, c, d, g) {
                if (void 0 === m[b]) m[b] = [];
                m[b][c] = d;
                if (a && false === a(b, c, d)) return false;
                if (void 0 !== g || void 0 === d) return;
                k = 0;
                e = 0;
                if (d.hasAttribute("colspan")) k = parseInt(d.getAttribute("colspan"), 10);
                if (d.hasAttribute("rowspan")) e = parseInt(d.getAttribute("rowspan"), 10);
                if (k > 1 || e > 1) {
                    f = b;
                    l = c;
                    while (f < b + e - 1 || l < c + k - 1) {
                        if (l < c + k - 1) l += 1; else {
                            l = c;
                            f += 1;
                        }
                        if (false === s(f, l, d, true)) return false;
                    }
                }
            };
            if (I && !j) j = p;
            for (c = 0; c < o; c += 1) for (d = 0; d < n; d += 1) if (void 0 === m[c] || void 0 === m[c][d]) {
                if (false === s(c, d, q)) return q;
                r += 1;
                q = p[r];
            }
            return m;
        }, l = function(a, b) {
            var c, d, e = false;
            k(function(f, g, h) {
                if (a === h && (!e || true === b && c === f || 2 === b)) {
                    c = f;
                    d = g;
                    if (!b) return false;
                    e = true;
                } else if (e) return false;
            });
            return [ c, d ];
        }, m = function(a, b) {
            var c;
            k(function(d, e, f) {
                c = f;
                if (a === d && b === e) return false;
            });
            return c;
        }, n = function() {
            return g.find(".jodit_focused_cell");
        }, o = function() {
            if (n().length) {
                var a = 0, b = 1e6, c, d, e = 0, f = 1e6;
                n().each(function(g, h) {
                    var i = l(h);
                    c = 0;
                    d = 0;
                    if (h.hasAttribute("colspan")) {
                        c = parseInt(h.getAttribute("colspan"), 10);
                        if (c) c -= 1;
                    }
                    if (h.hasAttribute("rowspan")) {
                        d = parseInt(h.getAttribute("rowspan"), 10);
                        if (d) d -= 1;
                    }
                    a = Math.max(i[1] + c, a);
                    b = Math.min(i[1], b);
                    e = Math.max(i[0] + d, e);
                    f = Math.min(i[0], f);
                });
                return [ f, b, e, a ];
            }
            return false;
        }, p = function(b, c, d) {
            var e = a(b);
            e.addClass("jodit_iamalready_was").data(c, void 0 === d ? 1 : d);
        }, q = function() {
            g.find(".jodit_iamalready_was").each(function(b, c) {
                var d = a(c);
                d.removeClass("jodit_iamalready_was");
                if (void 0 !== d.data("append")) {
                    a(d.data("append")).append(c);
                    d.removeData("append");
                }
                if (void 0 !== d.data("before")) {
                    a(d.data("before")).before(c);
                    d.removeData("before");
                }
                if (void 0 !== d.data("width")) {
                    d.css("width", d.data("width"));
                    d.removeData("width");
                }
                if (void 0 !== d.data("colspan")) {
                    if (d.data("colspan") > 1) d.attr("colspan", d.data("colspan")); else d.removeAttr("colspan");
                    d.removeData("colspan");
                }
                if (void 0 !== d.data("rowspan")) {
                    d.attr("rowspan", d.data("rowspan"));
                    d.removeData("rowspan");
                }
                if (void 0 !== d.data("remove")) {
                    d.removeData("remove");
                    d.remove();
                }
            });
        }, r = function(c) {
            n().each(function(b, d) {
                var e = k(), f = l(d, 2), g;
                for (g = 0; g < e.length; g += 1) if (!c) if (f[1] + 1 >= e[g].length || e[g][f[1]] !== e[g][f[1] + 1]) a(e[g][f[1]]).after("<td><br/></td>"); else p(e[g][f[1]], "colspan", parseInt(e[g][f[1]].getAttribute("colspan"), 10) + 1); else if (f[1] - 1 < 0 || e[g][f[1]] !== e[g][f[1] - 1]) a(e[g][f[1]]).before("<td><br/></td>"); else p(e[g][f[1]], "colspan", parseInt(e[g][f[1]].getAttribute("colspan"), 10) + 1);
                q();
            });
            a(b.getWindow()).trigger("updateresizer.jodit-resizer");
        }, s = function(c, d) {
            var e = a("<td/>", b.getDocument());
            e.append(d);
            a(c).append(e);
            return e.get(0);
        }, t = function(c) {
            n().each(function(d, e) {
                var f = k(), h = l(e, 2), i, j = a("<tr></tr>", b.getDocument(), b.getDocument()).get(0);
                for (i = 0; i < f[0].length; i += 1) if (!c) if (h[0] + 1 >= f.length || f[h[0]][i] !== f[h[0] + 1][i]) s(j, "<br>"); else p(f[h[0]][i], "rowspan", parseInt(f[h[0]][i].getAttribute("rowspan"), 10) + 1); else if (h[0] - 1 < 0 || f[h[0]][i] !== f[h[0] - 1][i]) s(j, "<br>"); else p(f[h[0]][i], "rowspan", parseInt(f[h[0]][i].getAttribute("rowspan"), 10) + 1);
                g.find("tr").eq(h[0])[c ? "before" : "after"](j);
                q();
            });
            a(b.getWindow()).trigger("updateresizer.jodit-resizer");
        }, u = function() {
            var c, d = a("<tr></tr>", b.getDocument());
            for (c = 1; c <= i(); c += 1) s(d, "<br>");
            g.append(d);
            return d.get(0);
        }, v = function() {
            n().each(function(a, b) {
                var c = l(b), d;
                d = k();
                for (a = 0; a < d.length; a += 1) if (c[1] - 1 >= 0 && d[a][c[1] - 1] === d[a][c[1]]) p(d[a][c[1] - 1], "colspan", parseInt(d[a][c[1] - 1].getAttribute("colspan"), 10) - 1); else if (c[1] + 1 < d[0].length && d[a][c[1] + 1] === d[a][c[1]]) p(d[a][c[1]], "colspan", parseInt(d[a][c[1]].getAttribute("colspan"), 10) - 1); else p(d[a][c[1]], "remove");
                q();
            });
        }, w = function() {
            var c = [];
            if (1 === g.find("tr").length) {
                g.remove();
                b.events.fire("hidePopap");
                return;
            }
            n().each(function(b, d) {
                var e = l(d), f, g, h, i = d.parentNode, j;
                if (c[e[0]]) return;
                c[e[0]] = true;
                g = k();
                for (f = 0; f < g[0].length; f += 1) if (e[0] - 1 >= 0 && g[e[0] - 1][f] === g[e[0]][f]) p(g[e[0] - 1][f], "rowspan", parseInt(g[e[0] - 1][f].getAttribute("rowspan"), 10) - 1); else if (e[0] + 1 < g.length && g[e[0] + 1][f] === g[e[0]][f]) {
                    h = f + 1;
                    j = false;
                    while (h < g[0].length && !j) {
                        if (g[e[0] + 1][h] !== g[e[0]][f] && i !== g[e[0] + 1][h].parentNode) {
                            p(g[e[0]][f], "rowspan", parseInt(g[e[0]][f].getAttribute("rowspan"), 10) - 1);
                            p(g[e[0]][f], "before", g[e[0] + 1][h]);
                            j = true;
                        }
                        h += 1;
                    }
                    if (!j) p(g[e[0]][f], "append", a(i).next());
                }
                q();
                a(i).remove();
            });
        }, x = function(b, c, d, e) {
            var h, i = k(), j, l;
            for (h = 0; h < i.length; h += 1) if (i[h][b] !== i[h][d ? b - 1 : b + 1]) {
                j = a(i[h][b]).outerWidth();
                l = (j + c) / g.outerWidth() * 100;
                p(i[h][b], "width", l.toFixed(f) + "%");
            }
            if (!e) q();
        }, y = function() {
            var a, b, c, d, e, f;
            a = k();
            for (c = 0; c < a[0].length; c += 1) {
                d = 0;
                e = 1e6;
                f = false;
                for (b = 0; b < a.length; b += 1) {
                    if (!a[b][c].hasAttribute("colspan")) {
                        f = true;
                        break;
                    }
                    d = Math.max(d, parseInt(a[b][c].getAttribute("colspan"), 10));
                    e = Math.min(d, parseInt(a[b][c].getAttribute("colspan"), 10));
                }
                if (!f) for (b = 0; b < a.length; b += 1) p(a[b][c], "colspan", d - e);
            }
            for (b = 0; b < a.length; b += 1) for (c = 0; c < a[b].length; c += 1) {
                if (a[b][c].hasAttribute("rowspan") && 1 === parseInt(a[b][c].getAttribute("rowspan"), 10)) a[b][c].removeAttribute("rowspan");
                if (a[b][c].hasAttribute("colspan") && 1 === parseInt(a[b][c].getAttribute("colspan"), 10)) a[b][c].removeAttribute("colspan");
            }
            q();
            a = k();
            for (c = 0; c < a[0].length; c += 1) x(c, 0, false, true);
            q();
        }, z = function() {
            var b = o(), c = 0, d, e, h, i = [], j = 0, l = 0, m, n;
            if (b && (b[0] - b[2] || b[1] - b[3])) {
                k(function(f, g, k) {
                    if (f >= b[0] && f <= b[2]) if (g >= b[1] && g <= b[3]) {
                        h = a(k);
                        if (h.hasClass("jodit_iamalready_was")) return;
                        h.addClass("jodit_iamalready_was");
                        if (f === b[0]) c += h.outerWidth();
                        if ("" !== a.trim(k.innerHTML.replace(/<br(\/)?>/g, ""))) i.push(k.innerHTML + "<br/>");
                        m = 0;
                        n = 0;
                        if (k.hasAttribute("colspan")) m = parseInt(k.getAttribute("colspan"), 10);
                        if (k.hasAttribute("rowspan")) n = parseInt(k.getAttribute("rowspan"), 10);
                        if (m > 1) j += m - 1;
                        if (n > 1) l += n - 1;
                        if (!d) {
                            d = a(k);
                            e = g;
                        } else p(h, "remove", 1);
                    }
                });
                j = b[3] - b[1] + 1;
                l = b[2] - b[0] + 1;
                if (j > 1) d.attr("colspan", j);
                if (l > 1) d.attr("rowspan", l);
                p(d, "width", (c / g.outerWidth() * 100).toFixed(f) + "%");
                d.html(d.html() + i.join(""));
                x(e, 0, false, true);
                q();
            }
            y();
        }, A = function(c, d) {
            var e = a(c), f;
            if (e.next().length) return e.next().get(0);
            if (e.parent().next().length) return e.parent().next().find("td:first-child,th:first-child").get(0);
            if (!d) return false;
            f = u();
            a(b.getWindow()).trigger("updateresizer.jodit-resizer");
            return a(f).find("td:first-child,th:first-child").get(0);
        }, B = function(b) {
            var c = a(b);
            if (c.prev().length) return c.prev().get(0);
            if (c.parent().prev().length) return c.parent().prev().find("td:last,th:last").get(0);
            return b;
        }, C = function() {
            var b, c, d, e, h;
            n().each(function(i, j) {
                h = a(j);
                b = l(h.get(0));
                if (!h.attr("colspan") || parseInt(h.attr("colspan"), 10) < 2) k(function(a, c, d) {
                    if (b[1] === c && b[0] !== a && d !== h.get(0)) p(d, "colspan", d.hasAttribute("colspan") ? parseInt(d.getAttribute("colspan"), 10) + 1 : 2);
                }); else p(h, "colspan", parseInt(h.attr("colspan"), 10) - 1);
                c = a("<td><br/></td>");
                if (h.attr("rowspan")) p(c, "rowspan", h.attr("rowspan"));
                h.after(c);
                d = h.outerWidth();
                e = d / g.outerWidth() / 2;
                p(h, "width", (100 * e).toFixed(f) + "%");
                p(c, "width", (100 * e).toFixed(f) + "%");
                q();
                h.removeClass("jodit_focused_cell");
            });
            y();
        }, D = function() {
            var b, c, d, e, f, h;
            n().each(function(i, j) {
                h = a(j);
                c = a("<td><br/></td>");
                d = a("<tr></tr>");
                b = l(h.get(0));
                if (!h.attr("rowspan") || parseInt(h.attr("rowspan"), 10) < 2) {
                    k(function(a, c, d) {
                        if (b[0] === a && b[1] !== c && d !== h.get(0)) p(d, "rowspan", d.hasAttribute("rowspan") ? parseInt(d.getAttribute("rowspan"), 10) + 1 : 2);
                    });
                    h.closest("tr").after(d);
                    d.append(c);
                } else {
                    p(h, "rowspan", parseInt(h.attr("rowspan"), 10) - 1);
                    k(function(c, d, i) {
                        if (c > b[0] && c < b[0] + parseInt(h.attr("rowspan"), 10) && b[1] > d && a(i).parent().index() === c) f = a(i);
                        if (b[0] < c && i === h.get(0)) e = g.find("tr").eq(c);
                    });
                    if (f) f.after(c); else e.prepend(c);
                }
                if (h.attr("colspan")) p(c, "colspan", h.attr("colspan"));
                q();
                h.removeClass("jodit_focused_cell");
            });
            y();
        }, E, F = function(c) {
            var d = a(c).offset(), e = b.$workflow.offset();
            return {
                left: d.left - e.left,
                top: d.top - e.top
            };
        }, G = function() {
            a(b.getDocument()).off(".jodit" + e).off(".jodit-border-resizer" + e);
        }, H = function() {
            var d, f, h, i, j, n, o, p, q, r;
            if (!E) {
                E = a('<div class="border_resizer">' + "<div></div>" + "</div>");
                E.on("mousedown", function(c) {
                    d = true;
                    r = false;
                    f = parseInt(c.clientX, 10);
                    p = parseInt(E.css("left"), 10);
                    E.addClass("border_resizer_clicked");
                    b.$editor.addClass("non-selected");
                    i = l(E.targets[0], true);
                    j = l(E.targets[1]);
                    n = 1e8;
                    o = 0;
                    k(function(b, c, d) {
                        if (c === i[1]) n = Math.min(F(a(d)).left, n);
                        if (c === j[1]) o = Math.max(F(a(d)).left + a(d).outerWidth(), o);
                    });
                });
                a(b.getDocument()).off(".jodit-border-resizer" + e).on("mousemove.jodit-border-resizer" + e, function(a) {
                    if (!c || !c.parentNode) {
                        G();
                        return;
                    }
                    if (d) {
                        r = true;
                        q = parseInt(a.clientX, 10) - f;
                        if (p + q > n + b.options.tableprocessor.resizerOffset && p + q < o - b.options.tableprocessor.resizerOffset) E.css("left", p + q + "px");
                    }
                }).on("mouseup.jodit-border-resizer" + e, function(a) {
                    if (!c || !c.parentNode) {
                        G();
                        return;
                    }
                    if (d && E.is(":visible")) {
                        E.removeClass("border_resizer_clicked");
                        E.hide();
                    }
                    if (r) {
                        p = parseInt(E.css("left"), 10);
                        x(i[1], q, false, true);
                        x(j[1], -q, true);
                    }
                    r = false;
                    d = false;
                    b.$editor.removeClass("non-selected");
                });
                b.$workflow.append(E);
            }
            g.off(".jodit-border-resizer").on("mousemove.jodit-border-resizer", "td,th", function(b) {
                var c = b.target || b.srcElement, d;
                if (!E.hasClass("border_resizer_clicked") && ("TD" === c.tagName || "TH" === c.tagName)) {
                    d = a(c).offset();
                    h = a(c).outerWidth();
                    if (Math.abs(d.left - b.clientX) < 10 && a(c).prev().length || Math.abs(d.left + h - b.clientX) < 10 && a(c).next().length) {
                        E.target = a(c);
                        E.$table = a(c).closest("table");
                        E.targets = [];
                        if (Math.abs(d.left - b.clientX) < 10) {
                            i = l(c);
                            E.targets[0] = m(i[0], i[1] - 1);
                            E.targets[1] = c;
                        } else {
                            i = l(c, true);
                            E.targets[0] = c;
                            E.targets[1] = m(i[0], i[1] + 1);
                        }
                        E.css({
                            display: "block",
                            left: (Math.abs(d.left - b.clientX) < 10 ? F(c).left : F(c).left + h) + "px",
                            top: F(g).top + "px",
                            height: g.outerHeight() + "px"
                        });
                    } else E.css({
                        display: "none"
                    });
                }
            });
        }, I = false, J, K = function(c, d) {
            var e = c.target || c.srcElement, f, h, i, j, k;
            a(e).addClass("jodit_focused_cell");
            if (!c.shiftKey && !I) {
                g.find("td,th").not(e).removeClass("jodit_focused_cell");
                f = o();
            } else {
                f = o();
                for (i = f[0]; i <= f[2]; i += 1) for (h = f[1]; h <= f[3]; h += 1) a(m(i, h)).addClass("jodit_focused_cell");
                if (!d) return K(c, true);
            }
            if (n().length) {
                j = a(m(f[2], f[3]));
                k = a(m(f[2], f[1]));
                b.events.fire("showPopap", [ g.get(0), F(k).left + Math.round((F(j).left + j.outerWidth() - F(k).left) / 2), F(j).top + j.outerHeight() ]);
            }
        };
        if (c) {
            H();
            g.on("dragstart", "td,th", function(a) {
                if (I) a.preventDefault();
            }).on("mousedown", "td,th", function(a) {
                K(a);
                I = true;
                J = a.target || a.srcElement;
            }).on("mousemove", "td,th", function(b) {
                var c = b.target || b.srcElement;
                if (I && J !== c) {
                    n().removeClass("jodit_focused_cell");
                    a(J).addClass("jodit_focused_cell");
                    K(b);
                    b.preventDefault();
                }
            });
            a(b.getDocument()).on("keyup.jodit" + e + " mouseup.jodit" + e, function(a) {
                if (!c || !c.parentNode) {
                    G();
                    return;
                }
                if (I) {
                    I = false;
                    a.stopPropagation();
                } else {
                    g.find("td,th").removeClass("jodit_focused_cell");
                    if (!b.$editor.find(".jodit_focused_cell").length && !b.$editor.find(".jodit_focused_image").length) b.events.fire("hidePopap");
                }
            });
            if (g.length) a(b.getDocument()).on("keydown.jodit" + e, function(a) {
                if (!c || !c.parentNode) {
                    G();
                    return;
                }
                var d, e, f, g, h = b.selection;
                g = h.current();
                if ((a.which === Jodit.keys.TOP || a.which === Jodit.keys.BOTTOM) && g && b.node.hasParent(g, "td|th") && h.caretAtStartOrEndOfBlock(a.which === Jodit.keys.TOP)) {
                    J = b.node.parentNode(g, "td|th");
                    d = l(J);
                    e = k();
                    f = d[0];
                    do {
                        f += a.which === Jodit.keys.TOP ? -1 : 1;
                        if (f >= 0 && f < e.length && e[f][d[1]] !== J) {
                            h.moveToCaretPosition(e[f][d[1]]);
                            a.preventDefault();
                            break;
                        }
                    } while (f > 0 && f < e.length);
                }
            });
            b.events.on(c, "execCommand", function(a) {
                switch (a) {
                  case "splitv":
                    D();
                    break;

                  case "splitg":
                    C();
                    break;

                  case "merge":
                    z();
                    break;

                  case "empty":
                    n().empty();
                    break;

                  case "bin":
                    g.remove();
                    break;

                  case "binrow":
                    w();
                    break;

                  case "bincolumn":
                    v();
                    break;

                  case "addcolumnafter":
                  case "addcolumnbefore":
                    r("addcolumnbefore" === a);
                    break;

                  case "addrowafter":
                  case "addrowbefore":
                    t("addrowbefore" === a);
                    break;

                  case "bottom":
                  case "middle":
                  case "top":
                    n().css("vertical-align", a);
                }
            });
        }
        d = {
            addColumn: r,
            addRow: t,
            appendCell: s,
            appendRow: u,
            deleteColumn: v,
            deleteRow: w,
            nextCell: A,
            prevCell: B,
            splitGorizontal: C,
            splitVertical: D,
            mergeSelected: z,
            destroy: G
        };
        return d;
    };
    Jodit.modules.TableProcessor.unique = 1;
}(Jodit.modules.Dom);

(function() {
    var a = function() {};
    var b = function(b, d) {
        var e;
        if (d && d.hasOwnProperty("constructor")) e = d.constructor; else e = function() {
            return b.apply(this, arguments);
        };
        a.prototype = b.prototype;
        e.prototype = new a();
        if (d) c(e.prototype, d);
        e.prototype.constructor = e;
        e.__super__ = b.prototype;
        return e;
    };
    function c(a, b) {
        var c, d;
        for (c in b) {
            d = b[c];
            if (void 0 !== d) a[c] = d;
        }
        return a;
    }
    var d = {
        version: "0.1.15"
    };
    d.Stack = function() {
        this.commands = [];
        this.stackPosition = -1;
        this.savePosition = -1;
    };
    c(d.Stack.prototype, {
        execute: function(a) {
            this._clearRedo();
            a.execute();
            this.commands.push(a);
            this.stackPosition++;
            this.changed();
        },
        undo: function() {
            this.commands[this.stackPosition].undo();
            this.stackPosition--;
            this.changed();
        },
        canUndo: function() {
            return this.stackPosition >= 0;
        },
        redo: function() {
            this.stackPosition++;
            this.commands[this.stackPosition].redo();
            this.changed();
        },
        canRedo: function() {
            return this.stackPosition < this.commands.length - 1;
        },
        save: function() {
            this.savePosition = this.stackPosition;
            this.changed();
        },
        dirty: function() {
            return this.stackPosition != this.savePosition;
        },
        _clearRedo: function() {
            this.commands = this.commands.slice(0, this.stackPosition + 1);
        },
        changed: function() {}
    });
    d.Command = function(a) {
        this.name = a;
    };
    var e = new Error("override me!");
    c(d.Command.prototype, {
        execute: function() {
            throw e;
        },
        undo: function() {
            throw e;
        },
        redo: function() {
            this.execute();
        }
    });
    d.Command.extend = function(a) {
        var c = b(this, a);
        c.extend = d.Command.extend;
        return c;
    };
    if ("function" === typeof define && define.amd) define(d); else if ("undefined" != typeof module && module.exports) module.exports = d; else this.Undo = d;
}).call(this);

!function(a) {
    "use strict";
    Jodit.defaultOptions = a.extend(true, Jodit.defaultOptions, {
        enableDragAndDropFileToEditor: true,
        uploader: {
            url: "",
            format: "json",
            pathVariableName: "path",
            filesVariableName: "files",
            prepareData: function(a) {
                return a;
            },
            isSuccess: function(a) {
                return !a.error;
            },
            getMsg: function(a) {
                return void 0 !== a.msg.join ? a.msg.join(" ") : a.msg;
            },
            process: function(a) {
                return {
                    files: a[this.options.uploader.filesVariableName] || [],
                    path: a.path,
                    baseurl: a.baseurl,
                    error: a.error,
                    msg: a.msg
                };
            },
            error: function(a) {
                this.events.fire("errorPopap", [ a.getMessage(), "error", 4e3 ]);
            },
            defaultHandlerSuccess: function(a, b) {
                var c, d = this.options.uploader.filesVariableName;
                if (a[d] && a[d].length) for (c = 0; c < a[d].length; c += 1) this.selection.insertImage(a.baseurl + a[d][c]);
            },
            defaultHandlerError: function(a) {
                this.events.fire("errorPopap", [ this.options.uploader.getMsg(a) ]);
            }
        }
    });
    Jodit.modules.Uploader = function(b, c) {
        this.parent = b;
        var d = "", e = c || b.options.uploader, f = function(b) {
            if (void 0 !== window.FormData) {
                if (b instanceof FormData) return b;
                if ("string" === a.type(b)) return b;
                var c = new FormData(), d;
                for (d in b) if (b.hasOwnProperty(d)) c.append(d, b[d]);
                return c;
            }
            return b;
        }, g = function(c, d) {
            a.ajax({
                xhr: function() {
                    var a = new window.XMLHttpRequest();
                    if (void 0 !== window.FormData) a.upload.addEventListener("progress", function(a) {
                        if (a.lengthComputable) {
                            var c = a.loaded / a.total;
                            c = parseInt(100 * c, 10);
                            b.$progress_bar.show().css("width", c + "%");
                            if (100 === c) b.$progress_bar.hide();
                        }
                    }, false); else b.$progress_bar.hide();
                    return a;
                },
                type: "POST",
                enctype: void 0 !== window.FormData && "string" !== a.type(c) ? "multipart/form-data" : "application/x-www-form-urlencoded",
                data: f(c),
                url: e.url,
                cache: false,
                contentType: void 0 !== window.FormData && "string" !== a.type(c) ? false : "application/x-www-form-urlencoded; charset=UTF-8",
                processData: void 0 === window.FormData || "string" === a.type(c),
                dataType: e.format || "json",
                error: a.proxy(e.error, b),
                success: d
            });
        }, h = function(c, f, h) {
            var i = c.length, j, k;
            if (!i) return false;
            k = new FormData();
            k.append(e.pathVariableName, d);
            for (j = 0; j < i; j += 1) k.append(e.filesVariableName + "[" + j + "]", c[j]);
            e.prepareData(k);
            g(k, function(c) {
                if (e.isSuccess.call(b, c)) {
                    if (a.isFunction(f || e.defaultHandlerSuccess)) (f || e.defaultHandlerSuccess).call(b, e.process.call(b, c), c);
                } else if (a.isFunction(h || e.defaultHandlerError)) {
                    (h || e.defaultHandlerError).call(b, c);
                    return;
                }
            });
        }, i = function(a) {
            d = a;
        }, j = function(c, d, f) {
            c = a(c);
            c.on("dragover", function(b) {
                a(this).addClass("draghover");
                b.preventDefault();
            }).on("dragleave dragend", function(b) {
                a(this).removeClass("draghover");
                b.preventDefault();
            }).on("drop", function(g) {
                a(this).removeClass("draghover");
                if (g.originalEvent.dataTransfer && g.originalEvent.dataTransfer.files && g.originalEvent.dataTransfer.files.length) {
                    g.preventDefault();
                    h(g.originalEvent.dataTransfer.files, d, f);
                } else if (g.originalEvent.dataTransfer && g.originalEvent.dataTransfer.getData("text/plain") && "-" !== g.originalEvent.dataTransfer.getData("text/plain") && c.get(0) === b.editor) {
                    g.preventDefault();
                    g.stopPropagation();
                    if (false === b.selection.insertAtPoint(g.originalEvent.clientX, g.originalEvent.clientY)) return false;
                    if (d || e.defaultHandlerSuccess) {
                        var i = {};
                        i.baseurl = "";
                        i[b.options.uploader.filesVariableName] = [ g.originalEvent.dataTransfer.getData("text/plain") ];
                        (d || e.defaultHandlerSuccess).call(b, i);
                    }
                    g.preventDefault();
                }
            });
            c.find("input").on("change", function() {
                h(this.files, d, f);
            });
        }, k = function() {
            if (b.editor) if (b.options.enableDragAndDropFileToEditor) j(b.$editor);
        };
        return {
            init: k,
            bind: j,
            setPath: i
        };
    };
}(Jodit.modules.Dom);

!function(a) {
    "use strict";
    Jodit.defaultOptions = a.extend(true, Jodit.defaultOptions, {
        beautyHTML: true
    });
    Jodit.plugins.Beautifier = function(a) {
        if (a.options.beautyHTML) a.events.on("beforeSetElementValue", function(b) {
            var c = 0, d = 100, e = [ "blockquote", "div", "dl", "fieldset", "form", "frameset", "map", "ol", "p", "select", "td", "th", "tr", "ul" ], f = [ "area", "body", "head", "hr", "i?frame", "link", "meta", "noscript", "style", "table", "tbody", "thead", "tfoot" ], g = [ "li", "dt", "dt", "h[1-6]", "option", "script" ], h = [ "<pre>" ], i = new RegExp("^<(/?" + f.join("|/?") + "|" + g.join("|") + ")[ >]"), j = new RegExp("^<(br|/?" + f.join("|/?") + "|/" + g.join("|/") + ")[ >]");
            e = new RegExp("^</?(" + e.join("|") + ")[ >]");
            function k(a) {
                a = a.replace(/\n\s*\n/g, "\n");
                a = a.replace(/^[\s\n]*/, "");
                a = a.replace(/[\s\n]*$/, "");
                c = 0;
                return a;
            }
            function l() {
                var a = "", b;
                for (b = 0; b < c; b += 1) a += "	";
                return a;
            }
            function m(a, b) {
                var d = a.match(e);
                if (a.match(i) || d) {
                    b = b.replace(/\s*$/, "");
                    b += "\n";
                }
                if (d && "/" === a.charAt(1)) c -= 1;
                if ("\n" === b.charAt(b.length - 1)) b += l();
                if (d && "/" !== a.charAt(1)) c += 1;
                b += a;
                if (a.match(j) || a.match(e)) {
                    b = b.replace(/ *$/, "");
                    b += "\n";
                }
                return b;
            }
            function n(a) {
                var b = "", c = "", d, e = /\s*([^= ]+)(?:=((['"']).*?\3|[^ ]+))?/;
                a = a.replace(/\n/g, " ");
                a = a.replace(/\s*=\s*/g, "=");
                a = a.replace(/[\s]{2,}/g, " ");
                a = a.replace(/^\s+|\s+$/g, " ");
                if (a.match(/\/$/)) {
                    c = "/";
                    a = a.replace(/\/+$/, "");
                }
                do {
                    d = e.exec(a);
                    if (d) {
                        if (d[2]) b += d[1].toLowerCase() + "=" + d[2]; else if (d[1]) b += d[1].toLowerCase();
                        b += " ";
                        a = a.substr(d[0].length);
                    }
                } while (d);
                return b.replace(/\s*$/, "") + c + ">";
            }
            function o(b) {
                var c = 0, e = 0, f = null, g = null, i = "", j = "", o = "";
                function p() {
                    var a, q;
                    for (a = c; c < b.length && c < a + d; c += 1) {
                        e = c;
                        if (-1 === b.substr(c).indexOf("<")) {
                            j += b.substr(c);
                            j = k(j);
                            return;
                        }
                        while (e < b.length && "<" !== b.charAt(e)) e += 1;
                        if (c !== e) if (-1 === h.indexOf(i)) {
                            o = b.substr(c, e - c);
                            if (!o.match(/^\s+$/)) {
                                if ("\n" === j.charAt(j.length - 1)) j += l(); else if ("\n" === o.charAt(0)) {
                                    j += "\n" + l();
                                    o = o.replace(/^\s+/, "");
                                }
                                o = o.replace(/\s+/g, " ");
                                j += o;
                            }
                            if (o.match(/\n/)) j += "\n" + l();
                        } else j += b.substr(c, e - c);
                        f = e;
                        while (e < b.length && ">" !== b.charAt(e)) e += 1;
                        i = b.substr(f, e - f);
                        c = e;
                        if ("!--" === i.substr(1, 3)) {
                            if (!i.match(/--$/)) {
                                while ("-->" !== b.substr(e, 3)) e += 1;
                                e += 2;
                                i = b.substr(f, e - f);
                                c = e;
                            }
                            if ("\n" !== j.charAt(j.length - 1)) j += "\n";
                            j += l();
                            j += i + ">\n";
                        } else if ("!" === i[1]) j = m(i + ">", j); else if ("?" === i[1]) j += i + ">\n"; else {
                            q = i.match(/^<(script|style)/i);
                            if (q) {
                                q[1] = q[1].toLowerCase();
                                i = n(i);
                                j = m(i, j);
                                g = String(b.substr(c + 1)).toLowerCase().indexOf("</" + q[1]);
                                if (g) {
                                    o = b.substr(c + 1, g);
                                    c += g;
                                    j += o;
                                }
                            } else {
                                i = n(i);
                                j = m(i, j);
                            }
                        }
                    }
                    if (c < b.length) p(); else k(j);
                }
                p();
                return a.helper.trim(j).replace(Jodit.INVISIBLE_SPACE_REG_EXP, "");
            }
            b.value = o(b.value);
        });
    };
}(Jodit.modules.Dom);

!function(a) {
    "use strict";
    Jodit.defaultOptions = a.extend(true, Jodit.defaultOptions, {
        showPopapErrors: true,
        showPopapErrorTime: 3e3,
        showPopapErrorOffsetPx: 3
    });
    Jodit.plugins.ErrorPopaps = function(b) {
        if (b.options.showPopapErrors) {
            var c = a('<div class="jodit_error_box_for_popaps"></div>'), d, e = function() {
                d = 5;
                c.children().each(function(c, e) {
                    a(e).css("bottom", d + "px");
                    d += a(e).outerHeight() + b.options.showPopapErrorOffsetPx;
                });
            };
            b.$workflow.append(c);
            b.events.on("errorPopap", function(d, f, g) {
                var h = a('<div class="active ' + (f || "") + '">' + d + "</div>");
                c.append(h);
                e();
                setTimeout(function() {
                    h.removeClass("active");
                    setTimeout(function() {
                        h.remove();
                        e();
                    }, 300);
                }, g || b.options.showPopapErrorTime);
            });
        }
    };
}(Jodit.modules.Dom);

!function(a) {
    "use strict";
    Jodit.defaultOptions = a.extend(true, Jodit.defaultOptions, {
        image: {
            openOnDblClick: true,
            editSrc: true,
            editTitle: true,
            editAlt: true,
            editLink: true,
            editSize: true,
            editMargins: true,
            editClass: true,
            editStyle: true,
            editId: true,
            editAlign: true,
            showPreview: true,
            selectimageAfterClose: true
        }
    });
    Jodit.plugins.image = function(b) {
        Jodit.plugins.image.open = function(c) {
            var d = this, e = new Jodit.modules.Dialog(b), f, g = {
                remove: a('<a href="javascript:void(0)" class="jodit_button"><i class="icon icon-bin"></i> Delete</a>')
            }, h = a('<form class="jodit_properties">' + '<div class="jodit_row">' + '<div class="jodit_col5">' + '<div class="jodit_properties_view_box">' + '<div style="' + (!b.options.image.showPreview ? "display:none" : "") + '" class="jodit_properties_image_view">' + '<img id="imageViewSrc" src="" alt=""/>' + "</div>" + '<div style="' + (!b.options.image.editSize ? "display:none" : "") + '" class="jodit_form_group jodit_properties_image_sizes">' + '<input type="number" id="imageWidth"/>' + '<a class="jodit_lock_helper jodit_lock_size" href="javascript:void(0)">' + '<i class="icon icon-lock"></i>' + "</a>" + '<input type="number" id="imageHeight"/>' + "</div>" + "</div>" + "</div>" + '<div id="tabsbox" class="jodit_col7"></div>' + "</div>" + "</form>"), i = a('<div style="' + (!b.options.image.editMargins ? "display:none" : "") + '" class="jodit_form_group">' + '<label for="marginTop">Margins</label>' + '<div class="jodit_input_group">' + '<input class="jodit_col2 margins" type="text" placeholder="top" id="marginTop"/>' + '<a style="width: 26px;" class="jodit_lock_helper jodit_lock_margin" href="javascript:void(0)">' + '<i class="icon icon-lock"></i>' + "</a>" + '<input disabled="true" style="margin-left:-1px" class="jodit_col3 margins" type="text" placeholder="right" id="marginRight"/>' + '<input disabled="true" style="margin-left:-1px" class="jodit_col3 margins" type="text" placeholder="bottom" id="marginBottom"/>' + '<input disabled="true" style="margin-left:-1px" class="jodit_col3 margins" type="text" placeholder="left" id="marginLeft"/>' + "</div>" + "</div>" + '<div style="' + (!b.options.image.editStyle ? "display:none" : "") + '" class="jodit_form_group">' + '<label for="style">Styles</label>' + '<input type="text" id="style"/>' + "</div>" + '<div style="' + (!b.options.image.editClass ? "display:none" : "") + '" class="jodit_form_group">' + '<label for="classes">Classes</label>' + '<input type="text" id="classes"/>' + "</div>" + '<div style="' + (!b.options.image.editId ? "display:none" : "") + '" class="jodit_form_group">' + '<label for="id">Id</label>' + '<input type="text" id="id"/>' + "</div>" + '<div style="' + (!b.options.image.editAlign ? "display:none" : "") + '" class="jodit_form_group">' + '<label for="align">Align</label>' + '<select class="select"  id="align">' + '<option value="">--Not Set--</option>' + '<option value="left">Left</option>' + '<option value="center">Centre</option>' + '<option value="right">Right</option>' + "</optgroup>" + "</select>" + "</div>"), j = a('<div style="' + (!b.options.image.editSrc ? "display:none" : "") + '" class="jodit_form_group">' + '<label for="imageSrc">Src</label>' + '<div class="jodit_input_group">' + '<input type="text" id="imageSrc"/>' + '<a class="jodit_button jodit_rechange" href="javascript:void(0)"><i class="icon icon-image"></i></a>' + "</div>" + "</div>" + '<div style="' + (!b.options.image.editTitle ? "display:none" : "") + '" class="jodit_form_group">' + '<label for="imageTitle">Title</label>' + '<input type="text" id="imageTitle"/>' + "</div>" + '<div style="' + (!b.options.image.editAlt ? "display:none" : "") + '" class="jodit_form_group">' + '<label for="imageAlt">Alternative</label>' + '<input type="text" id="imageAlt"/>' + "</div>" + '<div style="' + (!b.options.image.editLink ? "display:none" : "") + '" class="jodit_form_group">' + '<label for="imageLink">Link</label>' + '<input type="text" id="imageLink"/>' + "</div>" + '<div style="' + (!b.options.image.editLink ? "display:none" : "") + '" class="jodit_form_group">' + '<input type="checkbox" id="imageLinkOpenInNewTab"/> Open link in new tab' + "</div>"), k = d.naturalWidth / d.naturalHeight || 1, l = 0, m = j.find(".jodit_rechange"), n = h.find("#imageWidth"), o = h.find("#imageHeight"), p = function() {
                if (d.style["float"] && [ "left", "right" ].indexOf(d.style["float"].toLowerCase()) !== -1) h.find("#align").val(a(d).css("float")); else if ("block" === a(d).css("display") && "auto" === d.style.marginLeft && "auto" === d.style.marginRight) h.find("#align").val("center");
            }, q = function() {
                h.find("#id").val(d.getAttribute("id"));
            }, r = function() {
                h.find("#style").val(d.getAttribute("style"));
            }, s = function() {
                h.find("#classes").val((d.getAttribute("class") || "").replace(/jodit_focused_image[\s]*/, ""));
            }, t = function() {
                if (!b.options.image.editMargins) return;
                var c = false;
                h.find(".margins").each(function() {
                    var b = d.style[this.id];
                    if (!b) return;
                    if (/^[0-9]+$/.test(b) || /^[0-9]+px$/i.test(b)) b = parseInt(b, 10);
                    a(this).val(b || "");
                    if (!c && "marginTop" !== this.id && a(this).val() !== h.find("#marginTop").val()) {
                        h.find(".jodit_lock_margin>i").addClass("icon-unlock");
                        h.find(".margins").removeAttr("disabled");
                        c = true;
                    }
                });
            }, u = function() {
                n.val(a(d).outerWidth());
                o.val(a(d).outerHeight());
            }, v = function(a) {
                if (d.hasAttribute("title")) h.find("#imageTitle").val(d.getAttribute("title"));
                if (d.hasAttribute("alt")) h.find("#imageAlt").val(d.getAttribute("alt"));
                if (b.node.hasParent(d, "a")) {
                    h.find("#imageLink").val(b.node.parentNode(d, "a").getAttribute("href"));
                    h.find("#imageLinkOpenInNewTab").get(0).checked = "_blank" === b.node.parentNode(d, "a").getAttribute("target");
                }
            }, w = function() {
                h.find("#imageSrc").val(d.getAttribute("src"));
                h.find("#imageViewSrc").attr("src", d.getAttribute("src"));
            }, x = function() {
                w();
                v();
                u();
                t();
                s();
                q();
                p();
                r();
            };
            h.find("#tabsbox").html(b.form.buildTabs({
                Image: j,
                Advansed: i
            }));
            x();
            b.events.on(e, "afterClose", function() {
                b.closeToolbarPopap();
                e.destroy();
                if (d.parentNode && b.options.image.selectimageAfterClose) b.selection.selectImage(d);
            });
            g.remove.on("click", function() {
                d.parentNode.removeChild(d);
                e.close();
            });
            m.on("mousedown", function(c) {
                m.toggleClass("active");
                b.$toolbar_popap.show();
                m.append(b.$toolbar_popap);
                b.$toolbar_popap.addClass("jodit_right");
                b.$toolbar_popap.empty();
                b.$toolbar_popap.html(b.form.imageSelector({
                    upload: function(a) {
                        var c, e = this.options.uploader.filesVariableName;
                        if (a[e] && a[e].length) d.setAttribute("src", a.baseurl + a[e][0]);
                        x();
                        b.closeToolbarPopap();
                    },
                    filebrowser: function(c) {
                        if (c && c.files && a.isArray(c.files) && c.files.length) {
                            d.setAttribute("src", c.files[0]);
                            b.closeToolbarPopap();
                            x();
                        }
                    }
                }, d));
                c.stopPropagation();
            });
            h.find(".jodit_lock_helper").on("click", function() {
                a(this).find("i").toggleClass("icon-unlock");
                n.triggerHandler("change");
            });
            h.find(".jodit_lock_helper.jodit_lock_margin").on("click", function() {
                if (a(this).find("i").hasClass("icon-unlock")) h.find(".margins").not("#marginTop").removeAttr("disabled"); else h.find(".margins").not("#marginTop").attr("disabled", true);
            });
            h.find("#imageWidth,#imageHeight").on("change keydown mousedown paste", function(a) {
                if (h.find(".jodit_lock_size>i").hasClass("icon-unlock")) return;
                clearTimeout(l);
                l = setTimeout(function() {
                    var b = parseInt(n.val(), 10), c = parseInt(o.val(), 10);
                    if ("imageWidth" === a.target.id) o.val(Math.round(b / k)); else n.val(Math.round(c * k));
                }, 100);
            });
            e.setTitle([ "Image properties", g.remove ]);
            e.setContent(h);
            f = a('<a href="javascript:void(0)" style="float:right;" class="jodit_button"><i class="icon icon-cancel"></i>&nbsp;Cancel</a>').on("click", function() {
                e.close();
            });
            e.setFooter([ a('<a href="javascript:void(0)" style="float:left;" class="jodit_button"><i class="icon icon-check"></i>&nbsp;Ok</a>').on("click", function() {
                var c;
                if (b.options.image.editStyle) if (h.find("#style").val()) d.setAttribute("style", h.find("#style").val()); else d.removeAttribute("style");
                if (h.find("#imageSrc").val()) d.setAttribute("src", h.find("#imageSrc").val()); else {
                    d.parentNode.removeChild(d);
                    e.close();
                    return;
                }
                if (h.find("#imageTitle").val()) d.setAttribute("title", h.find("#imageTitle").val()); else d.removeAttribute("title");
                if (h.find("#imageAlt").val()) d.setAttribute("alt", h.find("#imageAlt").val()); else d.removeAttribute("alt");
                if (h.find("#imageLink").val()) {
                    if (!b.node.hasParent(d, "a")) b.node.wrap(d, "a");
                    c = b.node.parentNode(d, "a");
                    c.setAttribute("href", h.find("#imageLink").val());
                    if (h.find("#imageLinkOpenInNewTab").get(0).checked) c.setAttribute("target", "_blank"); else c.removeAttribute("target");
                } else if (b.node.hasParent(d, "a")) {
                    c = b.node.parentNode(d, "a");
                    c.parentNode.replaceChild(d, c);
                }
                a(d).css({
                    width: n.val() + "px",
                    height: o.val() + "px"
                });
                function f(a) {
                    return /^[0-9]+$/.test(a) ? a + "px" : a;
                }
                if (b.options.image.editMargins) if (h.find(".jodit_lock_margin>i").hasClass("icon-unlock")) h.find(".margins").each(function() {
                    a(d).css(this.id, f(a(this).val()));
                }); else a(d).css("margin", f(h.find("#marginTop").val()));
                if (b.options.image.editClass) if (h.find("#classes").val()) d.setAttribute("class", h.find("#classes").val()); else d.removeAttribute("class");
                if (b.options.image.editId) if (h.find("#id").val()) d.setAttribute("id", h.find("#id").val()); else d.removeAttribute("id");
                function g() {
                    if ("block" === a(d).css("display")) a(d).css("display", "");
                    if ("auto" === d.style.marginLeft && "auto" === d.style.marginRight) {
                        d.style.marginLeft = "";
                        d.style.marginRight = "";
                    }
                }
                if (b.options.image.editAlign) if (h.find("#align").val()) if ([ "right", "left" ].indexOf(h.find("#align").val().toLowerCase()) !== -1) {
                    a(d).css("float", h.find("#align").val());
                    g();
                } else a(d).css("float", "").css({
                    display: "block",
                    "margin-left": "auto",
                    "margin-right": "auto"
                }); else {
                    if (a(d).css("float") && [ "right", "left" ].indexOf(a(d).css("float").toLowerCase()) !== -1) a(d).css("float", "");
                    g();
                }
                e.close();
            }), f ]);
            e.setSize(500);
            e.open();
            if (c) c.preventDefault();
            return false;
        };
        if (b.options.image.openOnDblClick) b.$editor.on("dblclick", "img", Jodit.plugins.image.open); else b.$editor.on("dblclick", "img", function(a) {
            b.selection.selectImage(this);
        });
        var c = function(a) {
            a.originalEvent.dataTransfer.dropEffect = "move";
            a.originalEvent.dataTransfer.setData("text/plain", "");
            a.preventDefault();
        };
        b.$editor.on("dragenter", c).on("dragover", function(a) {
            if (b.browser("mse")) c(a);
        }).on("drop", function(c) {
            var d = b.$editor.find("img.jodit_focused_image").get(0), e, f;
            if (d) {
                c.preventDefault();
                c.stopPropagation();
                if (false === b.selection.insertAtPoint(c.originalEvent.clientX, c.originalEvent.clientY)) return false;
                if ("A" === d.parentNode.tagName && !d.parentNode.textContent.length) f = d.parentNode; else f = d;
                e = b.$editor.find(".jodit_marker");
                if (e.length) b.node.replace(e.get(0), f, false, true);
                a(d).removeClass("jodit_focused_image");
                b.selection.unmark();
                b.events.fire("hidePopap");
            }
        });
    };
}(Jodit.modules.Dom);

!function(a) {
    "use strict";
    Jodit.defaultOptions = a.extend(true, Jodit.defaultOptions, {
        cleanHTML: {
            replaceNBSP: true
        }
    });
    Jodit.plugins.cleanHTML = function(b) {
        b.events.on("afterCommand", function(c) {
            var d = b.selection, e, f, g;
            switch (c) {
              case "insertHorizontalRule":
                e = b.$editor.find("hr[id=null]").get(0);
                if (e) {
                    f = b.node.findSibling(e, b.editor, "firstChild", "nextSibling", false, b.node.isBlock);
                    if (!f) {
                        f = b.enterkey.createNewBlock(b.options.enter);
                        a(e).after(f);
                    }
                    d.moveToCursorPosition(f);
                }
                break;

              case "removeFormat":
                f = d.current();
                g = function(a) {
                    if (a.nodeType === Node.ELEMENT_NODE) {
                        if (a.hasAttribute("style")) a.removeAttribute("style");
                        if ("FONT" === a.tagName) {
                            b.node.each(a, g);
                            a = d.replace(a, "span");
                        }
                        if (a.normalize) a.normalize();
                    } else if (b.options.cleanHTML.replaceNBSP && a.nodeType === Node.TEXT_NODE && a.nodeValue.match(Jodit.NBSP_REG_EXP)) a.nodeValue = a.nodeValue.replace(Jodit.NBSP_REG_EXP, " ");
                    return a;
                };
                if (b.observer) b.observer.block(true);
                if (!d.isCollapsed()) d.each(g); else while (f && f.nodeType !== Node.ELEMENT_NODE && f !== b.editor) {
                    f = g(f);
                    f = f.parentNode;
                }
                if (b.observer) b.observer.block(false);
            }
        });
    };
}(Jodit.modules.Dom);

!function(a) {
    "use strict";
    Jodit.defaultOptions = a.extend(true, Jodit.defaultOptions, {
        codeMirror: true,
        codeMirrorOptions: {
            autofocus: false,
            lineNumbers: true,
            tabMode: "indent",
            indentWithTabs: true,
            lineWrapping: true,
            mode: "text/html",
            tabSize: 2
        },
        codeMirrorUrlJS: "//cdnjs.cloudflare.com/ajax/libs/codemirror/5.13.4/codemirror.min.js",
        codeMirrorUrlCSS: "//cdnjs.cloudflare.com/ajax/libs/codemirror/5.13.4/codemirror.min.css",
        codeMirrorXMLUrl: "//cdnjs.cloudflare.com/ajax/libs/codemirror/5.13.4/mode/xml/xml.min.js"
    });
    Jodit.plugins.codeMirror = function(b) {
        if (b.options.codeMirror) {
            var c, d = false, e = "jodit_codemirror", f = function() {
                if (!d && c && a.inArray(b.getMode(), [ Jodit.MODE_TEXTAREA, Jodit.MODE_SPLIT ]) !== -1) b.val(c.getValue());
            }, g = function(a) {
                var b = document.createElement("script");
                b.className = e;
                b.type = "text/javascript";
                b.src = a;
                document.body.appendChild(b);
            };
            b.events.on("afterSetAreaValue", function() {
                if (b.getMode() === Jodit.MODE_SPLIT && b.getRealMode() === Jodit.MODE_WYSIWYG && c) {
                    var a = c.getValue(), e = b.getAreaValue();
                    if (a !== e) {
                        d = true;
                        c.setValue(e);
                        d = false;
                    }
                }
            });
            b.events.on("beforeSetMode afterResize", f);
            b.events.on("afterSetMode afterResize", function() {
                if (-1 === a.inArray(b.getMode(), [ Jodit.MODE_TEXTAREA, Jodit.MODE_SPLIT ])) return;
                var d = function() {
                    if (void 0 === c) if (void 0 !== window.CodeMirror && void 0 !== window.CodeMirror.modes && void 0 !== window.CodeMirror.modes.xml) {
                        c = window.CodeMirror.fromTextArea(b.area, b.options.codeMirrorOptions);
                        c.on("change", f);
                    } else setTimeout(d, 300);
                    if (c) {
                        c.setSize(null, Math.max(b.$editor.outerHeight(), 150));
                        c.setValue(b.getElementValue());
                        if (b.options.autofocus) c.focus();
                        c.refresh();
                        c.clearHistory();
                    }
                };
                d();
            });
            if (void 0 === window.CodeMirror && !a("script." + e).length) {
                g(b.options.codeMirrorUrlJS);
                setTimeout(function() {
                    g(b.options.codeMirrorXMLUrl);
                }, 400);
                a("body").append('<link rel="stylesheet" href="' + b.options.codeMirrorUrlCSS + '">');
            }
        }
    };
}(Jodit.modules.Dom);

!function(a) {
    "use strict";
    Jodit.defaultOptions = a.extend(true, Jodit.defaultOptions, {
        wrapSingleTextNodes: true,
        removeEmptyNodes: true
    });
    Jodit.plugins.textProcessor = function(b) {
        if (b.options.wrapSingleTextNodes || b.options.removeEmptyNodes) b.events.on("changeElementValue afterInit", function() {
            if (b.getRealMode() === Jodit.MODE_WYSIWYG) {
                var c = b.editor.childNodes, d = "", e, f = [], g = 0;
                b.observer.block(1);
                b.selection.save();
                for (g = 0; c && g < c.length; g += 1) if (b.node.isBlock(c[g]) && "" === c[g].textContent.length && b.options.removeEmptyNodes) c[g].parentNode.removeChild(c[g]); else if (b.options.wrapSingleTextNodes) if (c[g].nodeType === Node.ELEMENT_NODE && "img" === c[g].nodeName.toLowerCase()) b.node.wrap(c[g], b.enterkey.createNewBlock(b.options.enter)); else if (c[g].nodeType === Node.TEXT_NODE && (0 !== b.helper.trim(c[g].nodeValue).length || d)) {
                    d += c[g].nodeValue;
                    f.push(c[g]);
                    e = c[g].nextSibling;
                } else if (d.length) {
                    b.node.replace(f[0], b.enterkey.createNewBlock(b.options.enter, false, d), false, true);
                    a(f).remove();
                    d = "";
                    f = [];
                }
                if (d.length) {
                    b.node.replace(f[0], b.enterkey.createNewBlock(b.options.enter, false, d), false, true);
                    a(f).remove();
                }
                b.selection.restore();
                b.observer.block(0);
                b.syncCode();
            }
        });
    };
}(Jodit.modules.Dom);