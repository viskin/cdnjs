angular.module("ngPDFViewer",[]).directive("pdfviewer",["$parse",function(){var b=null;return{restrict:"E",template:"<canvas></canvas>",scope:{onPageLoad:"&",src:"@"},controller:["$scope",function(a){a.pageNum=1;a.loadProgress=0;a.pdfDoc=null;a.scale=1;a.loadPDF=function(b){console.log("loadPDF ",b);PDFJS.getDocument(b).then(function(c){a.pdfDoc=c;a.renderPage(a.pageNum,function(){a.loadProgress=0})},function(a,b){console.log("PDF load error: "+a);throw b;},function(b){a.loadProgress=100*b.loaded/
b.total;a.loadProgress=Math.round(100*a.loadProgress)/100})};a.renderPage=function(d){console.log("renderPage ",d);a.pdfDoc.getPage(d).then(function(c){var e=c.getViewport(a.scale),d=b.getContext("2d");b.height=e.height;b.width=e.width;c.render({canvasContext:d,viewport:e}).then(function(){a.$apply(function(){a.onPageLoad({page:a.pageNum,total:a.pdfDoc.numPages})})},function(){console.log("page.render failed")})})};a.$on("pdfviewer.nextPage",function(){a.pageNum<a.pdfDoc.numPages&&(a.pageNum++,a.renderPage(a.pageNum))});
a.$on("pdfviewer.prevPage",function(){1<a.pageNum&&(a.pageNum--,a.renderPage(a.pageNum))})}],link:function(a,d,c){b=d.find("canvas")[0];console.log("link called. src = ",c.src);c.$observe("src",function(b){console.log("src attribute changed, new value is",b);void 0!==b&&(null!==b&&""!==b)&&(a.pageNum=1,a.loadPDF(a.src))})}}}]).service("PDFViewerService",["$rootScope",function(b){return{nextPage:function(){b.$broadcast("pdfviewer.nextPage")},prevPage:function(){b.$broadcast("pdfviewer.prevPage")}}}]);
