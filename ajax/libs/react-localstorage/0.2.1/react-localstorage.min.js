"use strict";function loadStateFromLocalStorage(t,e){function a(){t.__stateLoadedFromLS=!0,e()}if(ls){var o=getLocalStorageKey(t),r=!1;try{var i=JSON.parse(ls.getItem(o));i&&(r=!0,t.setState(i,a))}catch(l){console&&console.warn("Unable to load state for",getDisplayName(t),"from localStorage.")}r||a()}}function getDisplayName(t){return t.displayName||t.constructor.displayName}function getLocalStorageKey(t){return t.getLocalStorageKey?t.getLocalStorageKey():t.props.localStorageKey||getDisplayName(t)||"react-localstorage"}var React=require("react"),invariant=require("react/lib/invariant"),ls=global.localStorage,Mixin=module.exports={componentDidUpdate:function(t,e){if(ls&&"production"!==process.env.NODE_ENV&&this.__stateLoadedFromLS){var a=getLocalStorageKey(this),o=ls.getItem(a);o&&invariant(o===JSON.stringify(e),"While component "+getDisplayName(this)+" was saving state to localStorage, the localStorage entry was modified by another actor. This can happen when multiple components are using the same localStorage key. Set the property `localStorageKey` on "+getDisplayName(this)+"."),ls.setItem(a,JSON.stringify(this.state))}},componentDidMount:function(){var t=this;loadStateFromLocalStorage(this,function(){ls.setItem(getLocalStorageKey(t),JSON.stringify(t.state))})}};
//# sourceMappingURL=react-localstorage/0.2.1/react-localstorage.min.js.map