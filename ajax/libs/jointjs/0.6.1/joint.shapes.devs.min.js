/*! JointJS v0.6.0 - JavaScript diagramming library  2013-08-05 


This Source Code Form is subject to the terms of the Mozilla Public
License, v. 2.0. If a copy of the MPL was not distributed with this
file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
joint.shapes.devs={},joint.shapes.devs.Model=joint.shapes.basic.Generic.extend({markup:'<g class="rotatable"><g class="scalable"><rect/></g><text class="label"/><g class="inPorts"/><g class="outPorts"/></g>',portMarkup:'<g class="port<%= id %>"><circle/><text/></g>',defaults:joint.util.deepSupplement({type:"devs.Model",size:{width:1,height:1},inPorts:[],outPorts:[],attrs:{".":{magnet:!1},rect:{width:150,height:250,stroke:"black"},circle:{r:10,magnet:!0,stroke:"black"},text:{fill:"black","pointer-events":"none"},".label":{text:"Model",dx:5,dy:5},".inPorts text":{x:-15,y:4,"text-anchor":"end"},".outPorts text":{x:15,y:4}}},joint.shapes.basic.Generic.prototype.defaults),getPortSelector:function(a){var b=".inPorts",c=this.get("inPorts").indexOf(a);if(0>c&&(b=".outPorts",c=this.get("outPorts").indexOf(a),0>c))throw new Error("getPortSelector(): Port doesn't exist.");return b+">g:nth-child("+(c+1)+")>circle"}}),joint.shapes.devs.Atomic=joint.shapes.devs.Model.extend({defaults:joint.util.deepSupplement({type:"devs.Atomic",size:{width:80,height:80},attrs:{rect:{fill:"salmon"},".label":{text:"Atomic"},".inPorts circle":{fill:"PaleGreen"},".outPorts circle":{fill:"Tomato"}}},joint.shapes.devs.Model.prototype.defaults)}),joint.shapes.devs.Coupled=joint.shapes.devs.Model.extend({defaults:joint.util.deepSupplement({type:"devs.Coupled",size:{width:200,height:300},attrs:{rect:{fill:"seaGreen"},".label":{text:"Coupled"},".inPorts circle":{fill:"PaleGreen"},".outPorts circle":{fill:"Tomato"}}},joint.shapes.devs.Model.prototype.defaults)}),joint.shapes.devs.Link=joint.dia.Link.extend({defaults:{type:"devs.Link",attrs:{".connection":{"stroke-width":2}}}}),joint.shapes.devs.ModelView=joint.dia.ElementView.extend({initialize:function(){joint.dia.ElementView.prototype.initialize.apply(this,arguments),_.bindAll(this,"addInPorts","addOutPorts","updatePorts"),this.model.on({"change:inPorts":this.addInPorts,"change:outPorts":this.addOutPorts,"change:size":this.updatePorts}),this.portsAttrs={".inPorts":{},".outPorts":{}}},render:function(){joint.dia.ElementView.prototype.render.apply(this,arguments),this.addPorts(this.model.get("inPorts"),".inPorts"),this.addPorts(this.model.get("outPorts"),".outPorts")},addInPorts:function(a,b){return this.addPorts(b,".inPorts")},addOutPorts:function(a,b){return this.addPorts(b,".outPorts")},addPorts:function(a,b){var c=this.$(b).empty(),d=this.portsAttrs[b]={};if(a&&0!=a.length){var e=_.template(this.model.portMarkup),f=a.length;_.each(a,function(a,g){var h="port"+g,i=b+">."+h;d[i+">text"]={text:a},d[i]={ref:"rect","ref-y":(g+.5)*(1/f)},".outPorts"===b&&(d[i]["ref-dx"]=0),c.append(V(e({id:g})).node)}),this.update(this.model,_.extend(d,this.model.get("attrs")))}},updatePorts:function(){this.update(this.model,_.extend(this.portsAttrs[".inPorts"],this.portsAttrs[".outPorts"]))}}),joint.shapes.devs.AtomicView=joint.shapes.devs.ModelView,joint.shapes.devs.CoupledView=joint.shapes.devs.ModelView;