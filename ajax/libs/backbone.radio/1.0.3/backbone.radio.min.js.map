// Backbone.Radio v1.0.3
{"version":3,"sources":["backbone.radio.min.js","/source/backbone.radio.js"],"names":["_typeof","Symbol","iterator","obj","constructor","global","factory","exports","module","require","define","amd","Backbone","Radio","_","undefined","removeHandler","store","name","callback","context","event","_callback","removeHandlers","names","keys","matched","i","length","_partial","channelName","_logs","partial","log","makeCallback","isFunction","previousRadio","VERSION","noConflict","this","DEBUG","_debugText","warning","eventName","debugLog","console","warn","eventSplitter","_eventsApi","action","rest","results","key","result","apply","concat","test","extend","split","l","_callHandler","args","a1","a2","a3","call","drop","arguments","tuneIn","channel","_tunedIn","on","tuneOut","off","Requests","request","requests","_requests","handler","reply","replyOnce","self","once","stopReplying","_channels","Error","Channel","prototype","Events","reset","stopListening","systems","each","system","method","methodName","channels","invoke"],"mappings":"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","file":"backbone.radio.min.js","sourcesContent":["'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n// Backbone.Radio v1.0.3\n\n(function (global, factory) {\n  (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('underscore'), require('backbone')) : typeof define === 'function' && define.amd ? define(['underscore', 'backbone'], factory) : (global.Backbone = global.Backbone || {}, global.Backbone.Radio = factory(global._, global.Backbone));\n})(undefined, function (_, Backbone) {\n  'use strict';\n\n  _ = 'default' in _ ? _['default'] : _;\n  Backbone = 'default' in Backbone ? Backbone['default'] : Backbone;\n\n  var previousRadio = Backbone.Radio;\n\n  var Radio = Backbone.Radio = {};\n\n  Radio.VERSION = '1.0.3';\n\n  // This allows you to run multiple instances of Radio on the same\n  // webapp. After loading the new version, call `noConflict()` to\n  // get a reference to it. At the same time the old version will be\n  // returned to Backbone.Radio.\n  Radio.noConflict = function () {\n    Backbone.Radio = previousRadio;\n    return this;\n  };\n\n  // Whether or not we're in DEBUG mode or not. DEBUG mode helps you\n  // get around the issues of lack of warnings when events are mis-typed.\n  Radio.DEBUG = false;\n\n  // Format debug text.\n  Radio._debugText = function (warning, eventName, channelName) {\n    return warning + (channelName ? ' on the ' + channelName + ' channel' : '') + ': \"' + eventName + '\"';\n  };\n\n  // This is the method that's called when an unregistered event was called.\n  // By default, it logs warning to the console. By overriding this you could\n  // make it throw an Error, for instance. This would make firing a nonexistent event\n  // have the same consequence as firing a nonexistent method on an Object.\n  Radio.debugLog = function (warning, eventName, channelName) {\n    if (Radio.DEBUG && console && console.warn) {\n      console.warn(Radio._debugText(warning, eventName, channelName));\n    }\n  };\n\n  var eventSplitter = /\\s+/;\n\n  // An internal method used to handle Radio's method overloading for Requests.\n  // It's borrowed from Backbone.Events. It differs from Backbone's overload\n  // API (which is used in Backbone.Events) in that it doesn't support space-separated\n  // event names.\n  Radio._eventsApi = function (obj, action, name, rest) {\n    if (!name) {\n      return false;\n    }\n\n    var results = {};\n\n    // Handle event maps.\n    if ((typeof name === 'undefined' ? 'undefined' : _typeof(name)) === 'object') {\n      for (var key in name) {\n        var result = obj[action].apply(obj, [key, name[key]].concat(rest));\n        eventSplitter.test(key) ? _.extend(results, result) : results[key] = result;\n      }\n      return results;\n    }\n\n    // Handle space separated event names.\n    if (eventSplitter.test(name)) {\n      var names = name.split(eventSplitter);\n      for (var i = 0, l = names.length; i < l; i++) {\n        results[names[i]] = obj[action].apply(obj, [names[i]].concat(rest));\n      }\n      return results;\n    }\n\n    return false;\n  };\n\n  // An optimized way to execute callbacks.\n  Radio._callHandler = function (callback, context, args) {\n    var a1 = args[0],\n        a2 = args[1],\n        a3 = args[2];\n    switch (args.length) {\n      case 0:\n        return callback.call(context);\n      case 1:\n        return callback.call(context, a1);\n      case 2:\n        return callback.call(context, a1, a2);\n      case 3:\n        return callback.call(context, a1, a2, a3);\n      default:\n        return callback.apply(context, args);\n    }\n  };\n\n  // A helper used by `off` methods to the handler from the store\n  function removeHandler(store, name, callback, context) {\n    var event = store[name];\n    if ((!callback || callback === event.callback || callback === event.callback._callback) && (!context || context === event.context)) {\n      delete store[name];\n      return true;\n    }\n  }\n\n  function removeHandlers(store, name, callback, context) {\n    store || (store = {});\n    var names = name ? [name] : _.keys(store);\n    var matched = false;\n\n    for (var i = 0, length = names.length; i < length; i++) {\n      name = names[i];\n\n      // If there's no event by this name, log it and continue\n      // with the loop\n      if (!store[name]) {\n        continue;\n      }\n\n      if (removeHandler(store, name, callback, context)) {\n        matched = true;\n      }\n    }\n\n    return matched;\n  }\n\n  /*\n   * tune-in\n   * -------\n   * Get console logs of a channel's activity\n   *\n   */\n\n  var _logs = {};\n\n  // This is to produce an identical function in both tuneIn and tuneOut,\n  // so that Backbone.Events unregisters it.\n  function _partial(channelName) {\n    return _logs[channelName] || (_logs[channelName] = _.partial(Radio.log, channelName));\n  }\n\n  _.extend(Radio, {\n\n    // Log information about the channel and event\n    log: function log(channelName, eventName) {\n      if (typeof console === 'undefined') {\n        return;\n      }\n      var args = _.drop(arguments, 2);\n      console.log('[' + channelName + '] \"' + eventName + '\"', args);\n    },\n\n    // Logs all events on this channel to the console. It sets an\n    // internal value on the channel telling it we're listening,\n    // then sets a listener on the Backbone.Events\n    tuneIn: function tuneIn(channelName) {\n      var channel = Radio.channel(channelName);\n      channel._tunedIn = true;\n      channel.on('all', _partial(channelName));\n      return this;\n    },\n\n    // Stop logging all of the activities on this channel to the console\n    tuneOut: function tuneOut(channelName) {\n      var channel = Radio.channel(channelName);\n      channel._tunedIn = false;\n      channel.off('all', _partial(channelName));\n      delete _logs[channelName];\n      return this;\n    }\n  });\n\n  /*\n   * Backbone.Radio.Requests\n   * -----------------------\n   * A messaging system for requesting data.\n   *\n   */\n\n  function makeCallback(callback) {\n    return _.isFunction(callback) ? callback : function () {\n      return callback;\n    };\n  }\n\n  Radio.Requests = {\n\n    // Make a request\n    request: function request(name) {\n      var args = _.rest(arguments);\n      var results = Radio._eventsApi(this, 'request', name, args);\n      if (results) {\n        return results;\n      }\n      var channelName = this.channelName;\n      var requests = this._requests;\n\n      // Check if we should log the request, and if so, do it\n      if (channelName && this._tunedIn) {\n        Radio.log.apply(this, [channelName, name].concat(args));\n      }\n\n      // If the request isn't handled, log it in DEBUG mode and exit\n      if (requests && (requests[name] || requests['default'])) {\n        var handler = requests[name] || requests['default'];\n        args = requests[name] ? args : arguments;\n        return Radio._callHandler(handler.callback, handler.context, args);\n      } else {\n        Radio.debugLog('An unhandled request was fired', name, channelName);\n      }\n    },\n\n    // Set up a handler for a request\n    reply: function reply(name, callback, context) {\n      if (Radio._eventsApi(this, 'reply', name, [callback, context])) {\n        return this;\n      }\n\n      this._requests || (this._requests = {});\n\n      if (this._requests[name]) {\n        Radio.debugLog('A request was overwritten', name, this.channelName);\n      }\n\n      this._requests[name] = {\n        callback: makeCallback(callback),\n        context: context || this\n      };\n\n      return this;\n    },\n\n    // Set up a handler that can only be requested once\n    replyOnce: function replyOnce(name, callback, context) {\n      if (Radio._eventsApi(this, 'replyOnce', name, [callback, context])) {\n        return this;\n      }\n\n      var self = this;\n\n      var once = _.once(function () {\n        self.stopReplying(name);\n        return makeCallback(callback).apply(this, arguments);\n      });\n\n      return this.reply(name, once, context);\n    },\n\n    // Remove handler(s)\n    stopReplying: function stopReplying(name, callback, context) {\n      if (Radio._eventsApi(this, 'stopReplying', name)) {\n        return this;\n      }\n\n      // Remove everything if there are no arguments passed\n      if (!name && !callback && !context) {\n        delete this._requests;\n      } else if (!removeHandlers(this._requests, name, callback, context)) {\n        Radio.debugLog('Attempted to remove the unregistered request', name, this.channelName);\n      }\n\n      return this;\n    }\n  };\n\n  /*\n   * Backbone.Radio.channel\n   * ----------------------\n   * Get a reference to a channel by name.\n   *\n   */\n\n  Radio._channels = {};\n\n  Radio.channel = function (channelName) {\n    if (!channelName) {\n      throw new Error('You must provide a name for the channel.');\n    }\n\n    if (Radio._channels[channelName]) {\n      return Radio._channels[channelName];\n    } else {\n      return Radio._channels[channelName] = new Radio.Channel(channelName);\n    }\n  };\n\n  /*\n   * Backbone.Radio.Channel\n   * ----------------------\n   * A Channel is an object that extends from Backbone.Events,\n   * and Radio.Requests.\n   *\n   */\n\n  Radio.Channel = function (channelName) {\n    this.channelName = channelName;\n  };\n\n  _.extend(Radio.Channel.prototype, Backbone.Events, Radio.Requests, {\n\n    // Remove all handlers from the messaging systems of this channel\n    reset: function reset() {\n      this.off();\n      this.stopListening();\n      this.stopReplying();\n      return this;\n    }\n  });\n\n  /*\n   * Top-level API\n   * -------------\n   * Supplies the 'top-level API' for working with Channels directly\n   * from Backbone.Radio.\n   *\n   */\n\n  var channel;\n  var args;\n  var systems = [Backbone.Events, Radio.Requests];\n  _.each(systems, function (system) {\n    _.each(system, function (method, methodName) {\n      Radio[methodName] = function (channelName) {\n        args = _.rest(arguments);\n        channel = this.channel(channelName);\n        return channel[methodName].apply(channel, args);\n      };\n    });\n  });\n\n  Radio.reset = function (channelName) {\n    var channels = !channelName ? this._channels : [this._channels[channelName]];\n    _.invoke(channels, 'reset');\n  };\n\n  return Radio;\n});\n//# sourceMappingURL=./backbone.radio.js.map","// Backbone.Radio v1.0.3\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('underscore'), require('backbone')) :\n  typeof define === 'function' && define.amd ? define(['underscore', 'backbone'], factory) :\n  (global.Backbone = global.Backbone || {}, global.Backbone.Radio = factory(global._,global.Backbone));\n}(this, function (_,Backbone) { 'use strict';\n\n  _ = 'default' in _ ? _['default'] : _;\n  Backbone = 'default' in Backbone ? Backbone['default'] : Backbone;\n\n  var previousRadio = Backbone.Radio;\n\n  var Radio = Backbone.Radio = {};\n\n  Radio.VERSION = '1.0.3';\n\n  // This allows you to run multiple instances of Radio on the same\n  // webapp. After loading the new version, call `noConflict()` to\n  // get a reference to it. At the same time the old version will be\n  // returned to Backbone.Radio.\n  Radio.noConflict = function() {\n    Backbone.Radio = previousRadio;\n    return this;\n  };\n\n  // Whether or not we're in DEBUG mode or not. DEBUG mode helps you\n  // get around the issues of lack of warnings when events are mis-typed.\n  Radio.DEBUG = false;\n\n  // Format debug text.\n  Radio._debugText = function(warning, eventName, channelName) {\n    return warning + (channelName ? ' on the ' + channelName + ' channel' : '') +\n      ': \"' + eventName + '\"';\n  };\n\n  // This is the method that's called when an unregistered event was called.\n  // By default, it logs warning to the console. By overriding this you could\n  // make it throw an Error, for instance. This would make firing a nonexistent event\n  // have the same consequence as firing a nonexistent method on an Object.\n  Radio.debugLog = function(warning, eventName, channelName) {\n    if (Radio.DEBUG && console && console.warn) {\n      console.warn(Radio._debugText(warning, eventName, channelName));\n    }\n  };\n\n  var eventSplitter = /\\s+/;\n\n  // An internal method used to handle Radio's method overloading for Requests.\n  // It's borrowed from Backbone.Events. It differs from Backbone's overload\n  // API (which is used in Backbone.Events) in that it doesn't support space-separated\n  // event names.\n  Radio._eventsApi = function(obj, action, name, rest) {\n    if (!name) {\n      return false;\n    }\n\n    var results = {};\n\n    // Handle event maps.\n    if (typeof name === 'object') {\n      for (var key in name) {\n        var result = obj[action].apply(obj, [key, name[key]].concat(rest));\n        eventSplitter.test(key) ? _.extend(results, result) : results[key] = result;\n      }\n      return results;\n    }\n\n    // Handle space separated event names.\n    if (eventSplitter.test(name)) {\n      var names = name.split(eventSplitter);\n      for (var i = 0, l = names.length; i < l; i++) {\n        results[names[i]] = obj[action].apply(obj, [names[i]].concat(rest));\n      }\n      return results;\n    }\n\n    return false;\n  };\n\n  // An optimized way to execute callbacks.\n  Radio._callHandler = function(callback, context, args) {\n    var a1 = args[0], a2 = args[1], a3 = args[2];\n    switch (args.length) {\n      case 0: return callback.call(context);\n      case 1: return callback.call(context, a1);\n      case 2: return callback.call(context, a1, a2);\n      case 3: return callback.call(context, a1, a2, a3);\n      default: return callback.apply(context, args);\n    }\n  };\n\n  // A helper used by `off` methods to the handler from the store\n  function removeHandler(store, name, callback, context) {\n    var event = store[name];\n    if (\n       (!callback || (callback === event.callback || callback === event.callback._callback)) &&\n       (!context || (context === event.context))\n    ) {\n      delete store[name];\n      return true;\n    }\n  }\n\n  function removeHandlers(store, name, callback, context) {\n    store || (store = {});\n    var names = name ? [name] : _.keys(store);\n    var matched = false;\n\n    for (var i = 0, length = names.length; i < length; i++) {\n      name = names[i];\n\n      // If there's no event by this name, log it and continue\n      // with the loop\n      if (!store[name]) {\n        continue;\n      }\n\n      if (removeHandler(store, name, callback, context)) {\n        matched = true;\n      }\n    }\n\n    return matched;\n  }\n\n  /*\n   * tune-in\n   * -------\n   * Get console logs of a channel's activity\n   *\n   */\n\n  var _logs = {};\n\n  // This is to produce an identical function in both tuneIn and tuneOut,\n  // so that Backbone.Events unregisters it.\n  function _partial(channelName) {\n    return _logs[channelName] || (_logs[channelName] = _.partial(Radio.log, channelName));\n  }\n\n  _.extend(Radio, {\n\n    // Log information about the channel and event\n    log: function(channelName, eventName) {\n      if (typeof console === 'undefined') { return; }\n      var args = _.drop(arguments, 2);\n      console.log('[' + channelName + '] \"' + eventName + '\"', args);\n    },\n\n    // Logs all events on this channel to the console. It sets an\n    // internal value on the channel telling it we're listening,\n    // then sets a listener on the Backbone.Events\n    tuneIn: function(channelName) {\n      var channel = Radio.channel(channelName);\n      channel._tunedIn = true;\n      channel.on('all', _partial(channelName));\n      return this;\n    },\n\n    // Stop logging all of the activities on this channel to the console\n    tuneOut: function(channelName) {\n      var channel = Radio.channel(channelName);\n      channel._tunedIn = false;\n      channel.off('all', _partial(channelName));\n      delete _logs[channelName];\n      return this;\n    }\n  });\n\n  /*\n   * Backbone.Radio.Requests\n   * -----------------------\n   * A messaging system for requesting data.\n   *\n   */\n\n  function makeCallback(callback) {\n    return _.isFunction(callback) ? callback : function() { return callback; };\n  }\n\n  Radio.Requests = {\n\n    // Make a request\n    request: function(name) {\n      var args = _.rest(arguments);\n      var results = Radio._eventsApi(this, 'request', name, args);\n      if (results) {\n        return results;\n      }\n      var channelName = this.channelName;\n      var requests = this._requests;\n\n      // Check if we should log the request, and if so, do it\n      if (channelName && this._tunedIn) {\n        Radio.log.apply(this, [channelName, name].concat(args));\n      }\n\n      // If the request isn't handled, log it in DEBUG mode and exit\n      if (requests && (requests[name] || requests['default'])) {\n        var handler = requests[name] || requests['default'];\n        args = requests[name] ? args : arguments;\n        return Radio._callHandler(handler.callback, handler.context, args);\n      } else {\n        Radio.debugLog('An unhandled request was fired', name, channelName);\n      }\n    },\n\n    // Set up a handler for a request\n    reply: function(name, callback, context) {\n      if (Radio._eventsApi(this, 'reply', name, [callback, context])) {\n        return this;\n      }\n\n      this._requests || (this._requests = {});\n\n      if (this._requests[name]) {\n        Radio.debugLog('A request was overwritten', name, this.channelName);\n      }\n\n      this._requests[name] = {\n        callback: makeCallback(callback),\n        context: context || this\n      };\n\n      return this;\n    },\n\n    // Set up a handler that can only be requested once\n    replyOnce: function(name, callback, context) {\n      if (Radio._eventsApi(this, 'replyOnce', name, [callback, context])) {\n        return this;\n      }\n\n      var self = this;\n\n      var once = _.once(function() {\n        self.stopReplying(name);\n        return makeCallback(callback).apply(this, arguments);\n      });\n\n      return this.reply(name, once, context);\n    },\n\n    // Remove handler(s)\n    stopReplying: function(name, callback, context) {\n      if (Radio._eventsApi(this, 'stopReplying', name)) {\n        return this;\n      }\n\n      // Remove everything if there are no arguments passed\n      if (!name && !callback && !context) {\n        delete this._requests;\n      } else if (!removeHandlers(this._requests, name, callback, context)) {\n        Radio.debugLog('Attempted to remove the unregistered request', name, this.channelName);\n      }\n\n      return this;\n    }\n  };\n\n  /*\n   * Backbone.Radio.channel\n   * ----------------------\n   * Get a reference to a channel by name.\n   *\n   */\n\n  Radio._channels = {};\n\n  Radio.channel = function(channelName) {\n    if (!channelName) {\n      throw new Error('You must provide a name for the channel.');\n    }\n\n    if (Radio._channels[channelName]) {\n      return Radio._channels[channelName];\n    } else {\n      return (Radio._channels[channelName] = new Radio.Channel(channelName));\n    }\n  };\n\n  /*\n   * Backbone.Radio.Channel\n   * ----------------------\n   * A Channel is an object that extends from Backbone.Events,\n   * and Radio.Requests.\n   *\n   */\n\n  Radio.Channel = function(channelName) {\n    this.channelName = channelName;\n  };\n\n  _.extend(Radio.Channel.prototype, Backbone.Events, Radio.Requests, {\n\n    // Remove all handlers from the messaging systems of this channel\n    reset: function() {\n      this.off();\n      this.stopListening();\n      this.stopReplying();\n      return this;\n    }\n  });\n\n  /*\n   * Top-level API\n   * -------------\n   * Supplies the 'top-level API' for working with Channels directly\n   * from Backbone.Radio.\n   *\n   */\n\n  var channel;\n  var args;\n  var systems = [Backbone.Events, Radio.Requests];\n  _.each(systems, function(system) {\n    _.each(system, function(method, methodName) {\n      Radio[methodName] = function(channelName) {\n        args = _.rest(arguments);\n        channel = this.channel(channelName);\n        return channel[methodName].apply(channel, args);\n      };\n    });\n  });\n\n  Radio.reset = function(channelName) {\n    var channels = !channelName ? this._channels : [this._channels[channelName]];\n    _.invoke(channels, 'reset');\n  };\n\n  return Radio;\n\n}));\n//# sourceMappingURL=./backbone.radio.js.map"],"sourceRoot":"/source/"}