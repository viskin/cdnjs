/*! jQuery UI Virtual Keyboard Autocomplete v1.9.2 */
/*
 * for Keyboard v1.18+ only (8/17/2015)
 *
 * By Rob Garrison (aka Mottie & Fudgey)
 * Licensed under the MIT License
 *
 * Use this extension with the Virtual Keyboard to get
 * the jQuery UI Autocomplete widget to work seamlessly
 *
 * Requires:
 *  jQuery
 *  jQuery UI & css
 *  Keyboard plugin : https://github.com/Mottie/Keyboard
 *
 * Setup:
 *  $('.ui-keyboard-input')
 *   .keyboard(options)
 *   .autocomplete(options)
 *   .addAutoComplete();
 *
 *  // or if targeting a specific keyboard
 *  $('#keyboard1')
 *   .keyboard(options)     // keyboard plugin
 *   .autocomplete(options) // jQuery UI autocomplete
 *   .addAutoComplete();    // this keyboard extension
 *
 */
/*jshint browser:true, jquery:true, unused:false */
/*global require:false, define:false, module:false */
!function(a){"function"==typeof define&&define.amd?define(["jquery"],a):"object"==typeof module&&"object"==typeof module.exports?module.exports=a(require("jquery")):a(jQuery)}(function(a){"use strict";a.fn.addAutocomplete=function(b){var c={position:{of:null,my:"right top",at:"left top",collision:"flip"}};return this.each(function(){
// make sure a keyboard is attached
var d,e=a(this).data("keyboard");e&&(e.autocomplete_namespace=e.namespace+"Autocomplete",e.extensionNamespace.push(e.autocomplete_namespace),
// Setup
e.autocomplete_init=function(){d=e.autocomplete_options=a.extend(!0,{},c,b),e.options.alwaysOpen&&e.isVisible()&&e.autocomplete_setup(),e.$el.unbind(e.autocomplete_namespace).bind(a.keyboard.events.kbVisible+e.autocomplete_namespace,function(){e.autocomplete_setup()}).bind(a.keyboard.events.kbChange+e.autocomplete_namespace,function(){e.hasAutocomplete&&e.isVisible()&&e.$el.val(e.$preview.val()).trigger("keydown.autocomplete")}).bind(a.keyboard.events.kbHidden+e.autocomplete_namespace,function(){e.$el.autocomplete("close")}).bind("autocompleteopen"+e.autocomplete_namespace,function(){if(e.hasAutocomplete){var b=a.extend({},d.position);b.of=b.of||e.$keyboard,e.$autocomplete.menu.element.position(b)}}).bind("autocompleteselect"+e.autocomplete_namespace,function(a,b){var c=b.item&&b.item.value||"";e.hasAutocomplete&&""!==c&&(e.$preview.val(c).focus(),e.last.start=c.length,e.last.end=c.length)})},
// set up after keyboard is visible
e.autocomplete_setup=function(){
// look for autocomplete
e.$autocomplete=e.$el.data("autocomplete")||e.$el.data("uiAutocomplete")||e.$el.data("ui-autocomplete"),e.hasAutocomplete="undefined"==typeof e.$autocomplete?!1:e.$autocomplete.options.disabled?!1:!0,
// only bind to keydown once
e.hasAutocomplete&&(e.$preview.bind("keydown"+e.autocomplete_namespace,function(a){
// send keys to the autocomplete widget (arrow, pageup/down, etc)
e.$el.val(e.$preview.val()).triggerHandler(a)}),e.$allKeys.bind("mouseup mousedown mouseleave touchstart touchend touchcancel ".split(" ").join(e.autocomplete_namespace+" "),function(a){clearTimeout(e.$autocomplete.searching);var b=a;e.$autocomplete.searching=setTimeout(function(){
// only search if the value has changed
e.$autocomplete.term!==e.$autocomplete.element.val()&&(e.$autocomplete.selectedItem=null,e.$autocomplete.search(null,b))},e.$autocomplete.options.delay)}))},e.origEscClose=e.escClose,
// replace original function with this one
e.escClose=function(b){
// prevent selecting an item in autocomplete from closing keyboard
(!e.hasAutocomplete||"ui-active-menuitem"!==b.target.id&&!a(b.target).closest("ul").hasClass("ui-autocomplete"))&&e.origEscClose(b)},e.autocomplete_init())})}});