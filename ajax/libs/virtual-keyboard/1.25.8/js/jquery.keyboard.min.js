/*! jQuery UI Virtual Keyboard v1.25.8 */
/*

Author: Jeremy Satterfield
Modified: Rob Garrison (Mottie on github)
-----------------------------------------
Licensed under the MIT License

Caret code modified from jquery.caret.1.02.js
Licensed under the MIT License:
http://www.opensource.org/licenses/mit-license.php
-----------------------------------------

An on-screen virtual keyboard embedded within the browser window which
will popup when a specified entry field is focused. The user can then
type and preview their input before Accepting or Canceling.

As a plugin to jQuery UI styling and theme will automatically
match that used by jQuery UI with the exception of the required CSS.

Requires: jQuery v1.4.3+
Optional:
 jQuery UI (position utility only) & CSS theme
 jQuery mousewheel

Setup/Usage:
	Please refer to https://github.com/Mottie/Keyboard/wiki
*/
/*jshint browser:true, jquery:true, unused:false */
/*global require:false, define:false, module:false */
!function(a){"function"==typeof define&&define.amd?define(["jquery"],a):"object"==typeof module&&"object"==typeof module.exports?module.exports=a(require("jquery")):a(jQuery)}(function(a){"use strict";var b=a.keyboard=function(c,d){var e,f=this;f.version="1.25.8",
// Access to jQuery and DOM versions of element
f.$el=a(c),f.el=c,
// Add a reverse reference to the DOM object
f.$el.data("keyboard",f),f.init=function(){var c,g,h=b.css;f.settings=d||{},
// shallow copy position to prevent performance issues; see #357
d&&d.position&&(c=a.extend({},d.position),d.position=null),f.options=e=a.extend(!0,{},b.defaultOptions,d),c&&(e.position=c,d.position=c),
// keyboard is active (not destroyed);
f.el.active=!0,
// unique keyboard namespace
f.namespace=".keyboard"+Math.random().toString(16).slice(2),
// extension namespaces added here (to unbind listeners on base.$el upon destroy)
f.extensionNamespace=[],
// Shift and Alt key toggles, sets is true if a layout has more than one keyset
// used for mousewheel message
f.shiftActive=f.altActive=f.metaActive=f.sets=f.capsLock=!1,
// Class names of the basic key set - meta keysets are handled by the keyname
f.rows=["","-shift","-alt","-alt-shift"],f.inPlaceholder=f.$el.attr("placeholder")||"",
// html 5 placeholder/watermark
f.watermark=b.watermark&&""!==f.inPlaceholder,
// convert mouse repeater rate (characters per second) into a time in milliseconds.
f.repeatTime=1e3/(e.repeatRate||20),
// delay in ms to prevent mousedown & touchstart from both firing events at the same time
e.preventDoubleEventTime=e.preventDoubleEventTime||100,
// flag indication that a keyboard is open
f.isOpen=!1,
// is mousewheel plugin loaded?
f.wheel=a.isFunction(a.fn.mousewheel),
// keyCode of keys always allowed to be typed - caps lock, page up & down, end, home, arrow, insert &
// delete keys
f.alwaysAllowed=[20,33,34,35,36,37,38,39,40,45,46],f.$keyboard=[],
// keyboard enabled
f.enabled=!0,
// make a copy of the original keyboard position
a.isEmptyObject(e.position)||(e.position.orig_at=e.position.at),f.checkCaret=e.lockInput||b.checkCaretSupport(),
// [shift, alt, meta]
f.last={start:0,end:0,key:"",val:"",layout:"",virtual:!0,keyset:[!1,!1,!1],wheel_$Keys:null,wheelIndex:0,wheelLayers:[]},f.temp=["",0,0],// used when building the keyboard - [keyset element, row, index]
// Bind events
a.each("initialized beforeVisible visible hidden canceled accepted beforeClose".split(" "),function(b,c){a.isFunction(e[c])&&f.$el.bind(c+f.namespace,e[c])}),
// Close with esc key & clicking outside
e.alwaysOpen&&(e.stayOpen=!0),g=function(b){if(!f.opening){f.escClose(b);var c=a(b.target);
// needed for IE to allow switching between keyboards smoothly
if(c.hasClass(h.input)){var d=c.data("keyboard");
// only trigger on self
d!==f||d.$el.hasClass(h.isCurrent)||b.type!==d.options.openOn||d.focusOn()}}},a(document).bind("mousedown keyup touchstart checkkeyboard ".split(" ").join(f.namespace+" "),g),f.el.ownerDocument!==document&&a(f.el.ownerDocument).bind("mousedown keyup touchstart checkkeyboard ".split(" ").join(f.namespace+" "),g),f.$el.addClass(h.input+" "+e.css.input).attr({"aria-haspopup":"true",role:"textbox"}),(f.$el.is(":disabled")||f.$el.attr("readonly")&&!f.$el.hasClass(h.locked))&&f.$el.addClass(h.noKeyboard),e.openOn&&f.$el.bind(e.openOn+f.namespace,function(){f.focusOn()}),f.watermark||""!==f.$el.val()||""===f.inPlaceholder||""===f.$el.attr("placeholder")||f.$el.addClass(h.placeholder).val(f.inPlaceholder),f.$el.trigger(b.events.kbInit,[f,f.el]),e.alwaysOpen&&f.reveal()},f.toggle=function(){var a=f.$keyboard.find("."+b.css.keyToggle),c=!f.enabled;
// prevent physical keyboard from working
f.$preview.prop("readonly",c||f.options.lockInput),
// disable all buttons
f.$keyboard.toggleClass(b.css.keyDisabled,c).find("."+b.css.keyButton).not(a).prop("disabled",c).attr("aria-disabled",c),a.toggleClass(b.css.keyDisabled,c),
// stop auto typing
c&&f.typing_options&&(f.typing_options.text="")},f.setCurrent=function(){var c=b.css,
// close any "isCurrent" keyboard (just in case they are always open)
d=a("."+c.isCurrent),e=d.data("keyboard");a.isEmptyObject(e)||e.close(e.options.autoAccept?"true":!1),d.removeClass(c.isCurrent),
// ui-keyboard-has-focus is applied in case multiple keyboards have alwaysOpen = true and are stacked
a("."+c.hasFocus).removeClass(c.hasFocus),f.$el.addClass(c.isCurrent),f.$keyboard.addClass(c.hasFocus),f.isCurrent(!0),f.isOpen=!0},f.isCurrent=function(a){var c=b.currentKeyboard||!1;return a?c=b.currentKeyboard=f.el:a===!1&&c===f.el&&(c=b.currentKeyboard=""),c===f.el},f.isVisible=function(){return f.$keyboard&&f.$keyboard.length?f.$keyboard.is(":visible"):!1},f.focusOn=function(){(f||!f.el.active)&&(f.$el.is(":visible")&&(
// caret position is always 0,0 in webkit; and nothing is focused at this point... odd
// save caret position in the input to transfer it to the preview
// add delay to get correct caret position
f.timer2=setTimeout(function(){var a;
// Number inputs don't support selectionStart and selectionEnd
// Number/email inputs don't support selectionStart and selectionEnd
/(number|email)/i.test(f.el.type)||e.caretToEnd||f.saveCaret(a,a,f.$el)},20)),f.isVisible()||(clearTimeout(f.timer),f.reveal()))},f.reveal=function(c){f.isOpen&&(c=!0);var d=b.css;
// Don't open if disabled
// remove all 'extra' keyboards
// update keyboard after a layout change
// Don't open if disabled
// Unbind focus to prevent recursion - openOn may be empty if keyboard is opened externally
// build keyboard if it doesn't exist; or attach keyboard if it was removed, but not cleared
// clear watermark
// save starting content, in case we cancel
// disable/enable accept button
// beforeVisible event
// update keyboard - enabled or disabled?
// show keyboard
// adjust keyboard preview window width - save width so IE won't keep expanding (fix issue #6)
// preview is 100% browser width in IE7, so hide the damn thing
// set input width to match the widest keyboard row
// position after keyboard is visible (required for UI position utility) and appropriately sized
// get single target position || target stored in element data (multiple targets) || default @ element
// get preview area line height
// add roughly 4px to get line height from font height, works well for font-sizes from 14-36px
// needed for textareas
// IE caret haxx0rs
// sometimes end = 0 while start is > 0
// IE will have start -1, end of 0 when not focused (see demo: http://jsfiddle.net/Mottie/fgryQ/3/)
// ensure caret is at the end of the text (needed for IE)
// opening keyboard flag; delay allows switching between keyboards without immediately closing
// the keyboard
return f.opening=!0,a("."+d.keyboard).not("."+d.alwaysOpen).remove(),c&&(f.isOpen=!1,f.last.val=f.$preview&&f.$preview.val()||"",f.$keyboard.length&&(f.$keyboard.remove(),f.$keyboard=[],f.shiftActive=f.altActive=f.metaActive=!1)),f.$el.is(":disabled")||f.$el.attr("readonly")&&!f.$el.hasClass(d.locked)?void f.$el.addClass(d.noKeyboard):(f.$el.removeClass(d.noKeyboard),e.openOn&&f.$el.unbind(a.trim((e.openOn+" ").split(/\s+/).join(f.namespace+" "))),(!f.$keyboard||f.$keyboard&&(!f.$keyboard.length||a.contains(document.body,f.$keyboard[0])))&&f.startup(),f.watermark||f.el.value!==f.inPlaceholder||f.$el.removeClass(d.placeholder).val(""),f.originalContent=f.$el.val(),f.$preview.val(c?f.last.val:f.originalContent),e.acceptValid&&f.checkValid(),e.resetDefault&&(f.shiftActive=f.altActive=f.metaActive=!1),f.showSet(),f.$el.trigger(b.events.kbBeforeVisible,[f,f.el]),f.setCurrent(),f.toggle(),f.$keyboard.show(),e.usePreview&&b.msie&&("undefined"==typeof f.width&&(f.$preview.hide(),f.width=Math.ceil(f.$keyboard.width()),f.$preview.show()),f.$preview.width(f.width)),f.position=a.isEmptyObject(e.position)?!1:e.position,a.ui&&a.ui.position&&f.position&&(f.position.of=f.position.of||f.$el.data("keyboardPosition")||f.$el,f.position.collision=f.position.collision||"flipfit flipfit",e.position.at=e.usePreview?e.position.orig_at:e.position.at2,f.$keyboard.position(f.position)),f.checkDecimal(),f.lineHeight=parseInt(f.$preview.css("lineHeight"),10)||parseInt(f.$preview.css("font-size"),10)+4,e.caretToEnd&&f.saveCaret(f.originalContent.length,f.originalContent.length),b.allie&&(0===f.last.end&&f.last.start>0&&(f.last.end=f.last.start),f.last.start<0&&(f.last.start=f.last.end=f.originalContent.length)),f.timer2=setTimeout(function(){f.opening=!1,e.initialFocus&&b.caret(f.$preview,f.last),
// save event time for keyboards with stayOpen: true
f.last.eventTime=(new Date).getTime(),f.$el.trigger(b.events.kbVisible,[f,f.el]),f.timer=setTimeout(function(){
// get updated caret information after visible event - fixes #331
f&&// Check if base exists, this is a case when destroy is called, before timers have fired
f.saveCaret()},200)},10),f)},f.updateLanguage=function(){
// change language if layout is named something like 'french-azerty-1'
var c=b.layouts,d=e.language||c[e.layout]&&c[e.layout].lang&&c[e.layout].lang||[e.language||"en"],g=b.language;d=(a.isArray(d)?d[0]:d).split("-")[0],e.display=a.extend(!0,{},g.en.display,g[d]&&g[d].display||{},f.settings.display),e.combos=a.extend(!0,{},g.en.combos,g[d]&&g[d].combos||{},f.settings.combos),e.wheelMessage=g[d]&&g[d].wheelMessage||g.en.wheelMessage,e.rtl=c[e.layout]&&c[e.layout].rtl||g[d]&&g[d].rtl||!1,f.regex=g[d]&&g[d].comboRegex||b.comboRegex,f.decimal=/^\./.test(e.display.dec),f.$el.toggleClass("rtl",e.rtl).css("direction",e.rtl?"rtl":"")},f.startup=function(){var c=b.css;
// ensure base.$preview is defined; but don't overwrite it if keyboard is always visible
e.alwaysOpen&&f.$preview||f.makePreview(),f.$keyboard&&f.$keyboard.length||(
// custom layout - create a unique layout name based on the hash
"custom"===e.layout&&(e.layoutHash="custom"+f.customHash()),f.layout="custom"===e.layout?e.layoutHash:e.layout,f.last.layout=f.layout,f.updateLanguage(),"undefined"==typeof b.builtLayouts[f.layout]&&(a.isFunction(e.create)?
// create must call buildKeyboard() function; or create it's own keyboard
f.$keyboard=e.create(f):f.$keyboard.length||f.buildKeyboard(f.layout,!0)),f.$keyboard=b.builtLayouts[f.layout].$keyboard.clone(),f.$keyboard.data("keyboard",f),""!==(f.el.id||"")&&
// add ID to keyboard for styling purposes
f.$keyboard.attr("id",f.el.id+b.css.idSuffix),f.makePreview(),
// build preview display
e.usePreview?
// restore original positioning (in case usePreview option is altered)
a.isEmptyObject(e.position)||(e.position.at=e.position.orig_at):
// No preview display, use element and reposition the keyboard under it.
a.isEmptyObject(e.position)||(e.position.at=e.position.at2)),f.$decBtn=f.$keyboard.find("."+c.keyPrefix+"dec"),
// add enter to allowed keys; fixes #190
(e.enterNavigation||"TEXTAREA"===f.el.nodeName)&&f.alwaysAllowed.push(13),e.lockInput&&f.$preview.addClass(c.locked).attr({readonly:"readonly"}),f.bindKeyboard(),f.$keyboard.appendTo(e.appendLocally?f.$el.parent():e.appendTo||"body"),f.bindKeys(),
// adjust with window resize; don't check base.position
// here in case it is changed dynamically
e.reposition&&a.ui&&a.ui.position&&"body"==e.appendTo&&a(window).bind("resize"+f.namespace,function(){f.position&&f.isVisible()&&f.$keyboard.position(f.position)})},f.makePreview=function(){if(e.usePreview){var c,d,g,h,i=b.css;for(f.$preview=f.$el.clone(!1).data("keyboard",f).removeClass(i.placeholder+" "+i.input).addClass(i.preview+" "+e.css.input).attr("tabindex","-1").show(),// for hidden inputs
f.preview=f.$preview[0],
// Switch the number input field to text so the caret positioning will work again
"number"===f.preview.type&&(f.preview.type="text"),h=/^(data-|id|aria-haspopup)/i,d=f.$preview.get(0).attributes,c=d.length-1;c>=0;c--)g=d[c]&&d[c].name,h.test(g)&&f.preview.removeAttribute(g);
// build preview container and append preview display
a("<div />").addClass(i.wrapper).append(f.$preview).prependTo(f.$keyboard)}else f.$preview=f.$el,f.preview=f.el},f.saveCaret=function(a,c,d){var e=b.caret(d||f.$preview,a,c);f.last.start="undefined"==typeof a?e.start:a,f.last.end="undefined"==typeof c?e.end:c},f.setScroll=function(){
// Set scroll so caret & current text is in view
// needed for virtual keyboard typing, NOT manual typing - fixes #23
if(f.last.virtual){var a,b,c,d,g="TEXTAREA"===f.preview.nodeName,h=f.last.val.substring(0,Math.max(f.last.start,f.last.end));f.$previewCopy||(
// clone preview
f.$previewCopy=f.$preview.clone().removeAttr("id").css({position:"absolute",left:0,zIndex:-10,visibility:"hidden"}).addClass("ui-keyboard-preview-clone"),g||
// make input zero-width because we need an accurate scrollWidth
f.$previewCopy.css({"white-space":"pre",width:0}),e.usePreview?
// add clone inside of preview wrapper
f.$preview.after(f.$previewCopy):
// just slap that thing in there somewhere
f.$keyboard.prepend(f.$previewCopy)),g?(
// need the textarea scrollHeight, so set the clone textarea height to be the line height
f.$previewCopy.height(f.lineHeight).val(h),
// set scrollTop for Textarea
f.preview.scrollTop=f.lineHeight*(Math.floor(f.$previewCopy[0].scrollHeight/f.lineHeight)-1)):(
// add non-breaking spaces
f.$previewCopy.val(h.replace(/\s/g," ")),c=/c/i.test(e.scrollAdjustment)?f.preview.clientWidth/2:e.scrollAdjustment,a=f.$previewCopy[0].scrollWidth-1,"undefined"==typeof f.last.scrollWidth&&(f.last.scrollWidth=a,f.last.direction=!0),d=f.last.scrollWidth===a?f.last.direction:f.last.scrollWidth<a,b=f.preview.clientWidth-c,d?b>a?f.preview.scrollLeft=0:f.preview.scrollLeft=a-b:a>=f.preview.scrollWidth-b?f.preview.scrollLeft=f.preview.scrollWidth-c:a-c>0?f.preview.scrollLeft=a-c:f.preview.scrollLeft=0,f.last.scrollWidth=a,f.last.direction=d)}},f.bindKeyboard=function(){var c,d=b.builtLayouts[f.layout];f.$preview.unbind("keypress keyup keydown mouseup touchend ".split(" ").join(f.namespace+" ")).bind("click"+f.namespace,function(){
// update last caret position after user click, use at least 150ms or it doesn't work in IE
f.timer2=setTimeout(function(){f.saveCaret()},150)}).bind("keypress"+f.namespace,function(g){if(e.lockInput)return!1;var h=g.charCode||g.which,i=f.last.key=String.fromCharCode(h);
// restrict input - keyCode in keypress special keys:
// see http://www.asquare.net/javascript/tests/KeyCode.html
if(f.last.virtual=!1,f.last.event=g,f.last.$key=[],// not a virtual keyboard key
f.checkCaret&&f.saveCaret(),
// update caps lock - can only do this while typing =(
f.capsLock=h>=65&&90>=h&&!g.shiftKey||h>=97&&122>=h&&g.shiftKey?!0:!1,e.restrictInput){
// allow navigation keys to work - Chrome doesn't fire a keypress event (8 = bksp)
if((8===g.which||0===g.which)&&a.inArray(g.keyCode,f.alwaysAllowed))return;
// quick key check
-1===a.inArray(i,d.acceptedKeys)&&(g.preventDefault(),c=a.extend({},g),c.type=b.events.inputRestricted,f.$el.trigger(c,[f,f.el]),a.isFunction(e.restricted)&&e.restricted(c,f,f.el))}else if((g.ctrlKey||g.metaKey)&&(97===g.which||99===g.which||118===g.which||g.which>=120&&g.which<=122))
// Allow select all (ctrl-a:97), copy (ctrl-c:99), paste (ctrl-v:118) & cut (ctrl-x:120) &
// redo (ctrl-y:121)& undo (ctrl-z:122); meta key for mac
return;
// Mapped Keys - allows typing on a regular keyboard and the mapped key is entered
// Set up a key in the layout as follows: 'm(a):label'; m = key to map, (a) = actual keyboard key
// to map to (optional), ':label' = title/tooltip (optional)
// example: \u0391 or \u0391(A) or \u0391:alpha or \u0391(A):alpha
d.hasMappedKeys&&d.mappedKeys.hasOwnProperty(i)&&(f.last.key=d.mappedKeys[i],f.insertText(f.last.key),g.preventDefault()),f.checkMaxLength()}).bind("keyup"+f.namespace,function(c){switch(f.last.virtual=!1,c.which){
// Insert tab key
case 9:
// Added a flag to prevent from tabbing into an input, keyboard opening, then adding the tab to the keyboard preview
// area on keyup. Sadly it still happens if you don't release the tab key immediately because keydown event auto-repeats
if(f.tab&&e.tabNavigation&&!e.lockInput){f.shiftActive=c.shiftKey;
// when switching inputs, the tab keyaction returns false
var d=b.keyaction.tab(f);if(f.tab=!1,!d)return!1}else c.preventDefault();break;
// Escape will hide the keyboard
case 27:return e.ignoreEsc||f.close(e.autoAccept&&e.autoAcceptOnEsc?"true":!1),!1}
// throttle the check combo function because fast typers will have an incorrectly positioned caret
// change callback is no longer bound to the input element as the callback could be
// called during an external change event with all the necessary parameters (issue #157)
return clearTimeout(f.throttled),f.throttled=setTimeout(function(){
// fix error in OSX? see issue #102
f.isVisible()&&f.checkCombos()},100),f.checkMaxLength(),f.$el.trigger(b.events.kbChange,[f,f.el]),f.last.val=f.$preview.val(),a.isFunction(e.change)?(e.change(a.Event(b.events.inputChange),f,f.el),!1):void 0}).bind("keydown"+f.namespace,function(a){
// prevent tab key from leaving the preview window
if(
// ensure alwaysOpen keyboards are made active
e.alwaysOpen&&!f.isCurrent()&&f.reveal(),9===a.which)
// allow tab to pass through - tab to next input/shift-tab for prev
return f.tab=!0,!1;if(e.lockInput)return!1;switch(f.last.virtual=!1,a.which){case 8:b.keyaction.bksp(f,null,a),a.preventDefault();break;case 13:b.keyaction.enter(f,null,a);break;
// Show capsLock
case 20:f.shiftActive=f.capsLock=!f.capsLock,f.showSet();break;case 86:
// prevent ctrl-v/cmd-v
if(a.ctrlKey||a.metaKey){if(e.preventPaste)return void a.preventDefault();f.checkCombos()}}}).bind("mouseup touchend ".split(" ").join(f.namespace+" "),function(){f.last.virtual=!0,f.checkCaret&&f.saveCaret()}),
// prevent keyboard event bubbling
f.$keyboard.bind("mousedown click touchstart ".split(" ").join(f.namespace+" "),function(b){b.stopPropagation(),f.isCurrent()||(f.reveal(),a(document).trigger("checkkeyboard"+f.namespace)),e.noFocus||f.$preview.focus()}),
// If preventing paste, block context menu (right click)
e.preventPaste&&(f.$preview.bind("contextmenu"+f.namespace,function(a){a.preventDefault()}),f.$el.bind("contextmenu"+f.namespace,function(a){a.preventDefault()}))},f.bindKeys=function(){var c=b.css;f.$allKeys=f.$keyboard.find("button."+c.keyButton).unbind(f.namespace+" "+f.namespace+"kb").bind(e.keyBinding.split(" ").join(f.namespace+" ")+f.namespace+" "+b.events.kbRepeater,function(d){
// prevent errors when external triggers attempt to 'type' - see issue #158
if(d.preventDefault(),!f.$keyboard.is(":visible"))return!1;var g,h,i=f.last,j=this,k=a(j),
// prevent mousedown & touchstart from both firing events at the same time - see #184
l=(new Date).getTime();if(e.useWheel&&f.wheel&&(h=i.wheel_$Keys,k=h&&i.wheelIndex>-1?h.eq(i.wheelIndex):k),g=k.attr("data-action"),g=":"===g?":":(g||"").split(":")[0],!(l-(i.eventTime||0)<e.preventDoubleEventTime)){
// keyaction is added as a string, override original action & text
if(i.eventTime=l,i.event=d,i.virtual=!0,e.noFocus||f.$preview.focus(),i.$key=k,i.key=k.attr("data-value"),
// Start caret in IE when not focused (happens with each virtual keyboard button click
f.checkCaret&&b.caret(f.$preview,i),g.match("meta")&&(g="meta"),g===i.key&&"string"==typeof b.keyaction[g])i.key=g=b.keyaction[g];else if(g in b.keyaction&&a.isFunction(b.keyaction[g])){
// stop processing if action returns false (close & cancel)
if(b.keyaction[g](f,this,d)===!1)return!1;g=null}
// set caret if caret moved by action function; also, attempt to fix issue #131
return"undefined"!=typeof g&&null!==g&&(i.key=a(this).hasClass(c.keyAction)?g:i.key,f.insertText(i.key),f.capsLock||e.stickyShift||d.shiftKey||(f.shiftActive=!1,f.showSet(k.attr("data-name")))),b.caret(f.$preview,i),f.checkCombos(),f.$el.trigger(b.events.kbChange,[f,f.el]),i.val=f.$preview.val(),a.isFunction(e.change)?(e.change(a.Event(b.events.inputChange),f,f.el),!1):void 0}}).bind("mouseenter mouseleave touchstart ".split(" ").join(f.namespace+" "),function(b){if(e.alwaysOpen&&"mouseleave"!==b.type&&!f.isCurrent()&&f.reveal(),f.isCurrent()){var c,d,g=f.last,h=a(this),i=b.type;e.useWheel&&f.wheel&&(c=f.getLayers(h),d=(c.length?c.map(function(){return a(this).attr("data-value")||""}).get():"")||[h.text()],g.wheel_$Keys=c,g.wheelLayers=d,g.wheelIndex=a.inArray(h.attr("data-value"),d)),"mouseenter"!==i&&"touchstart"!==i||"password"===f.el.type||h.hasClass(e.css.buttonDisabled)||(h.addClass(e.css.buttonHover),e.useWheel&&f.wheel&&h.attr("title",function(a,b){
// show mouse wheel message
return f.wheel&&""===b&&f.sets&&d.length>1&&"touchstart"!==i?e.wheelMessage:b})),"mouseleave"===i&&(
// needed or IE flickers really bad
h.removeClass("password"===f.el.type?"":e.css.buttonHover),e.useWheel&&f.wheel&&(g.wheelIndex=0,g.wheelLayers=[],g.wheel_$Keys=null,h.attr("title",function(a,b){return b===e.wheelMessage?"":b}).html(h.attr("data-html"))))}}).bind("mouseup"+f.namespace+" "+"mouseleave touchend touchmove touchcancel ".split(" ").join(f.namespace+"kb "),function(c){f.last.virtual=!0;var d,g=a(this);if("touchmove"===c.type){if(d=g.offset(),d.right=d.left+g.outerWidth(),d.bottom=d.top+g.outerHeight(),c.originalEvent.touches[0].pageX>=d.left&&c.originalEvent.touches[0].pageX<d.right&&c.originalEvent.touches[0].pageY>=d.top&&c.originalEvent.touches[0].pageY<d.bottom)return!0}else/(mouseleave|touchend|touchcancel)/i.test(c.type)?g.removeClass(e.css.buttonHover):(!e.noFocus&&f.isVisible()&&f.isCurrent()&&f.$preview.focus(),f.checkCaret&&b.caret(f.$preview,f.last));// make sure key repeat stops!
return f.mouseRepeat=[!1,""],clearTimeout(f.repeater),!1}).bind("click"+f.namespace,function(){return!1}).not("."+c.keyAction).bind("mousewheel"+f.namespace,function(b,c){if(e.useWheel&&f.wheel){
// deltaY used by newer versions of mousewheel plugin
c=c||b.deltaY;var d,g=f.last.wheelLayers||[];return g.length>1?(d=f.last.wheelIndex+(c>0?-1:1),d>g.length-1&&(d=0),0>d&&(d=g.length-1)):d=0,f.last.wheelIndex=d,a(this).html(g[d]),!1}}).add("."+c.keyPrefix+"tab bksp space enter".split(" ").join(",."+c.keyPrefix),f.$keyboard).bind("mousedown touchstart ".split(" ").join(f.namespace+"kb "),function(){if(0!==e.repeatRate){var b=a(this);f.mouseRepeat=[!0,b],// save the key, make sure we are repeating the right one (fast typers)
setTimeout(function(){f.mouseRepeat[0]&&f.mouseRepeat[1]===b&&f.repeatKey(b)},e.repeatDelay)}return!1})},
// Insert text at caret/selection - thanks to Derek Wickwire for fixing this up!
f.insertText=function(a){if("undefined"!=typeof a){var c,d,e="\b"===a,
// use base.$preview.val() instead of base.preview.value (val.length includes carriage returns in IE).
g=f.$preview.val(),h=b.caret(f.$preview),i=g.length;// save original content length
// silly IE caret hacks... it should work correctly, but navigating using arrow keys in a textarea
// is still difficult
// in IE, pos.end can be zero after input loses focus
h.end<h.start&&(h.end=h.start),h.start>i&&(h.end=h.start=i),"TEXTAREA"===f.preview.nodeName&&b.msie&&"\n"===g.substr(h.start,1)&&(h.start+=1,h.end+=1),"{d}"===a&&(a="",d=h.start,h.end+=1),c=e&&h.start===h.end,a=e?"":a,g=g.substr(0,h.start-(c?1:0))+a+g.substr(h.end),d=h.start+(c?-1:a.length),f.$preview.val(g),f.saveCaret(d,d),// save caret in case of bksp
f.setScroll()}},
// check max length
f.checkMaxLength=function(){var a,c,d=f.$preview.val();e.maxLength!==!1&&d.length>e.maxLength&&(a=b.caret(f.$preview).start,c=Math.min(a,e.maxLength),e.maxInsert||(d=f.last.val,c=a-1),f.$preview.val(d.substring(0,e.maxLength)),f.saveCaret(c,c)),f.$decBtn.length&&f.checkDecimal()},
// mousedown repeater
f.repeatKey=function(a){a.trigger(b.events.kbRepeater),f.mouseRepeat[0]&&(f.repeater=setTimeout(function(){f.repeatKey(a)},f.repeatTime))},
// make it easier to switch keysets via API
// showKeySet('shift+alt+meta1')
f.showKeySet=function(a){"string"==typeof a?(f.last.keyset=[f.shiftActive,f.altActive,f.metaActive],f.shiftActive=/shift/i.test(a),f.altActive=/alt/i.test(a),/meta/.test(a)?(f.metaActive=!0,f.showSet(a.match(/meta\d+/i)[0])):(f.metaActive=!1,f.showSet())):f.showSet(a)},f.showSet=function(a){e=f.options;// refresh options
var c=b.css,d="."+c.keyPrefix,g=e.css.buttonActive,h="",i=(f.shiftActive?1:0)+(f.altActive?2:0);
// check meta key set
// the name attribute contains the meta set # 'meta99'
// save active meta keyset name
// if meta keyset doesn't have a shift or alt keyset, then show just the meta key set
// switching from meta key set back to default, reset shift & alt if using stickyShift
// keyset doesn't exist, so restore last keyset settings
return f.shiftActive||(f.capsLock=!1),f.metaActive?(h=/meta/i.test(a)?a:"",""===h?h=f.metaActive===!0?"":f.metaActive:f.metaActive=h,(!e.stickyShift&&f.last.keyset[2]!==f.metaActive||(f.shiftActive||f.altActive)&&!f.$keyboard.find("."+c.keySet+"-"+h+f.rows[i]).length)&&(f.shiftActive=f.altActive=!1)):!e.stickyShift&&f.last.keyset[2]!==f.metaActive&&f.shiftActive&&(f.shiftActive=f.altActive=!1),i=(f.shiftActive?1:0)+(f.altActive?2:0),h=0!==i||f.metaActive?""===h?"":"-"+h:"-normal",f.$keyboard.find("."+c.keySet+h+f.rows[i]).length?(f.$keyboard.find(d+"alt,"+d+"shift,."+c.keyAction+"[class*=meta]").removeClass(g).end().find(d+"alt").toggleClass(g,f.altActive).end().find(d+"shift").toggleClass(g,f.shiftActive).end().find(d+"lock").toggleClass(g,f.capsLock).end().find("."+c.keySet).hide().end().find("."+c.keySet+h+f.rows[i]).show().end().find("."+c.keyAction+d+h).addClass(g),f.metaActive&&f.$keyboard.find(d+f.metaActive).toggleClass(g,f.metaActive!==!1),f.last.keyset=[f.shiftActive,f.altActive,f.metaActive],void f.$el.trigger(b.events.kbKeysetChange,[f,f.el])):(f.shiftActive=f.last.keyset[0],f.altActive=f.last.keyset[1],void(f.metaActive=f.last.keyset[2]))},
// check for key combos (dead keys)
f.checkCombos=function(){if(!f.isVisible())return f.$preview.val();var a,c,d,g,
// use base.$preview.val() instead of base.preview.value (val.length includes carriage returns in IE).
h=f.$preview.val(),i=b.caret(f.$preview),j=b.builtLayouts[f.layout],k=h.length;// save original content length
// return if val is empty; fixes #352
if(""===h)return h;
// check input restrictions - in case content was pasted
if(
// silly IE caret hacks... it should work correctly, but navigating using arrow keys in a textarea
// is still difficult
// in IE, pos.end can be zero after input loses focus
i.end<i.start&&(i.end=i.start),i.start>k&&(i.end=i.start=k),
// This makes sure the caret moves to the next line after clicking on enter (manual typing works fine)
b.msie&&"\n"===h.substr(i.start,1)&&(i.start+=1,i.end+=1),e.useCombos&&(
// keep 'a' and 'o' in the regex for ae and oe ligature (æ,œ)
// thanks to KennyTM: http://stackoverflow.com/q/4275077
// original regex /([`\'~\^\"ao])([a-z])/mig moved to $.keyboard.comboRegex
b.msie?
// old IE may not have the caret positioned correctly, so just check the whole thing
h=h.replace(f.regex,function(a,b,c){return e.combos.hasOwnProperty(b)?e.combos[b][c]||a:a}):f.$preview.length&&(d=i.start-(i.start-2>=0?2:0),b.caret(f.$preview,d,i.end),g=(b.caret(f.$preview).text||"").replace(f.regex,function(a,b,c){return e.combos.hasOwnProperty(b)?e.combos[b][c]||a:a}),f.$preview.val(b.caret(f.$preview).replaceStr(g)),h=f.$preview.val())),e.restrictInput&&""!==h){for(d=h,c=j.acceptedKeys.length,a=0;c>a;a++)""!==d&&(g=j.acceptedKeys[a],h.indexOf(g)>=0&&(/[\[|\]|\\|\^|\$|\.|\||\?|\*|\+|\(|\)|\{|\}]/g.test(g)&&(g="\\"+g),d=d.replace(new RegExp(g,"g"),"")));
// what's left over are keys that aren't in the acceptedKeys array
""!==d&&(h=h.replace(d,""))}
// save changes, then reposition caret
// set scroll to keep caret in view
return i.start+=h.length-k,i.end+=h.length-k,f.$preview.val(h),f.saveCaret(i.start,i.end),f.setScroll(),f.checkMaxLength(),e.acceptValid&&f.checkValid(),h},
// Toggle accept button classes, if validating
f.checkValid=function(){var c=b.css,d=!0;a.isFunction(e.validate)&&(d=e.validate(f,f.$preview.val(),!1)),
// toggle accept button classes; defined in the css
f.$keyboard.find("."+c.keyPrefix+"accept").toggleClass(c.inputInvalid,!d).toggleClass(c.inputValid,d)},
// Decimal button for num pad - only allow one (not used by default)
f.checkDecimal=function(){
// Check US '.' or European ',' format
f.decimal&&/\./g.test(f.preview.value)||!f.decimal&&/\,/g.test(f.preview.value)?f.$decBtn.attr({disabled:"disabled","aria-disabled":"true"}).removeClass(e.css.buttonHover).addClass(e.css.buttonDisabled):f.$decBtn.removeAttr("disabled").attr({"aria-disabled":"false"}).addClass(e.css.buttonDefault).removeClass(e.css.buttonDisabled)},
// get other layer values for a specific key
f.getLayers=function(c){var d=b.css,e=c.attr("data-pos"),f=c.closest("."+d.keyboard).find('button[data-pos="'+e+'"]');return f.filter(function(){return""!==a(this).find("."+d.keyText).text()}).add(c)},
// Go to next or prev inputs
// goToNext = true, then go to next input; if false go to prev
// isAccepted is from autoAccept option or true if user presses shift+enter
f.switchInput=function(b,c){if(a.isFunction(e.switchInput))e.switchInput(f,b,c);else{
// base.$keyboard may be an empty array - see #275 (apod42)
f.$keyboard.length&&f.$keyboard.hide();var d,g=!1,h=a("button, input, textarea, a").filter(":visible").not(":disabled"),i=h.index(f.$el)+(b?1:-1);if(f.$keyboard.length&&f.$keyboard.show(),i>h.length-1&&(g=e.stopAtEnd,i=0),0>i&&(g=e.stopAtEnd,i=h.length-1),!g){if(c=f.close(c),!c)return;d=h.eq(i).data("keyboard"),d&&d.options.openOn.length?d.focusOn():h.eq(i).focus()}}return!1},
// Close the keyboard, if visible. Pass a status of true, if the content was accepted
// (for the event trigger).
f.close=function(c){if(f.isOpen){clearTimeout(f.throttled);var d=b.css,g=b.events,h=c?f.checkCombos():f.originalContent;
// validate input if accepted
if(c&&a.isFunction(e.validate)&&!e.validate(f,h,!0)&&(h=f.originalContent,c=!1,e.cancelClose))return;f.isCurrent(!1),f.isOpen=!1,
// update value for always open keyboards
f.$preview.val(h),f.$el.removeClass(d.isCurrent+" "+d.inputAutoAccepted).addClass(c?c===!0?"":d.inputAutoAccepted:"").val(h).trigger(g.inputChange).trigger(e.alwaysOpen?"":g.kbBeforeClose,[f,f.el,c||!1]).trigger(c?g.inputAccepted:g.inputCanceled,[f,f.el]).trigger(e.alwaysOpen?g.kbInactive:g.kbHidden,[f,f.el]).blur(),
// base is undefined if keyboard was destroyed - fixes #358
f&&(
// add close event time
f.last.eventTime=(new Date).getTime(),!e.alwaysOpen&&f.$keyboard&&(e.openOn&&(
// rebind input focus - delayed to fix IE issue #72
f.timer=setTimeout(function(){
// make sure keyboard isn't destroyed
// Check if base exists, this is a case when destroy is called, before timers have fired
f&&f.el.active&&(f.$el.bind(e.openOn+f.namespace,function(){f.focusOn()}),
// remove focus from element (needed for IE since blur doesn't seem to work)
a(":focus")[0]===f.el&&f.$el.blur())},500)),
// free up memory
f.$keyboard.remove(),f.$keyboard=[],f.$previewCopy=null),f.watermark||""!==f.el.value||""===f.inPlaceholder||f.$el.addClass(d.placeholder).val(f.inPlaceholder))}return!!c},f.accept=function(){return f.close(!0)},f.escClose=function(c){if(c&&"keyup"===c.type)return 27!==c.which||e.ignoreEsc?"":f.close(e.autoAccept&&e.autoAcceptOnEsc?"true":!1);
// keep keyboard open if alwaysOpen or stayOpen is true - fixes mutliple always open keyboards or
// single stay open keyboard
if(f.isOpen&&(!f.isCurrent()&&f.isOpen||f.isOpen&&c.target!==f.el)){
// don't close if stayOpen is set; but close if a different keyboard is being opened
if(e.stayOpen&&!a(c.target).hasClass("ui-keyboard-input"))return;
// stop propogation in IE - an input getting focus doesn't open a keyboard if one is already open
b.allie&&c.preventDefault(),
// send 'true' instead of a true (boolean), the input won't get a 'ui-keyboard-autoaccepted'
// class name - see issue #66
f.close(e.autoAccept?"true":!1)}},
// Build default button
f.keyBtn=a("<button />").attr({role:"button",type:"button","aria-disabled":"false",tabindex:"-1"}).addClass(b.css.keyButton),f.processName=function(a){var b,c,d=(a||"").replace(/[^a-z0-9-_]/gi,""),e=d.length,f=[];if(e>1&&a===d)
// return name if basic text
return a;if(e=a.length){for(b=0;e>b;b++)c=a[b],f.push(/[a-z0-9-_]/i.test(c)?/[-_]/.test(c)?"":c:(0===b?"":"-")+c.charCodeAt(0));return f.join("")}return a},
// Add key function
// keyName = the name of the function called in $.keyboard.keyaction when the button is clicked
// name = name added to key, or cross-referenced in the display options
// base.temp[0] = keyset to attach the new button
// regKey = true when it is not an action key
f.addKey=function(c,d,g){var h,i,j,k,l=b.css,m=d.split(":"),n=m.length-1,o=g===!0?c:e.display[m[0]]||c,p={isAction:!g,action:c,name:f.processName(c.split(/[(:]/)[0])};
// map defined keys - format 'key(A):Label_for_key'
// 'key' = key that is seen (can any character; but it might need to be escaped using '\'
//  or entered as unicode '\u####'
// '(A)' = the actual key on the real keyboard to remap, ':Label_for_key' ends up in the title/tooltip
// n = '\u0391(A):alpha'
// remove '(A)', left with '\u0391:alpha'
// extract 'A' from '(A)'
// get '\u0391' from '\u0391:alpha'
// find key label
// corner case of ':(:):;' reduced to '::;', split as ['', '', ';']
// allow alt naming of action keys
// added to title
// Action keys will have the 'ui-keyboard-actionkey' class
// '\u2190'.length = 1 because the unicode is converted, so if more than one character,
// add the wide class
// this prevents HTML from being added to the key
// copy html back to attributes
return/\(.+\)/.test(o)&&(j=o.replace(/\(([^()]+)\)/,""),i=o.match(/\(([^()]+)\)/)[1],o=j,k=j.split(":"),j=""!==k[0]&&k.length>1?k[0]:j,b.builtLayouts[f.layout].mappedKeys[i]=j),k=o.split(":"),""===k[0]&&""===k[1]&&(o=":"),o=""!==k[0]&&k.length>1?k[0]:o,p.value=a.trim(g?o:m[1]||o),p.title=k.length>1?a.trim(k[1]).replace(/_/g," ")||"":n>0?m[n]||"":"",h=p.value.length>2?" "+l.keyWide:"",h+=g?"":" "+l.keyAction,p.html='<span class="'+l.keyText+'">'+p.value.replace(/[\u00A0-\u9999<>\&]/gim,function(a){return"&#"+a.charCodeAt(0)+";"})+"</span>",p.$key=f.keyBtn.clone().attr({"data-value":p.value,"data-name":p.name,"data-pos":f.temp[1]+","+f.temp[2],title:p.title,"data-action":p.action,"data-html":p.html}).addClass((""===p.name?"":l.keyPrefix+p.name+h+" ")+e.css.buttonDefault).html(p.html).appendTo(f.temp[0]),"function"==typeof e.buildKey&&(p=e.buildKey(f,p),m=p.$key.html(),p.$key.attr("data-html",m)),p.$key},f.customHash=function(a){/*jshint bitwise:false */
var b,c,d,f,g,h=[],i=[];
// pass layout to allow for testing
a="undefined"==typeof a?e.customLayout:a;
// get all layout arrays
for(c in a)a.hasOwnProperty(c)&&h.push(a[c]);if(i=i.concat.apply(i,h).join(" "),d=0,g=i.length,0===g)return d;for(b=0;g>b;b++)f=i.charCodeAt(b),d=(d<<5)-d+f,d&=d;return d},f.buildKeyboard=function(c,d){
// o.display is empty when this is called from the scramble extension (when alwaysOpen:true)
a.isEmptyObject(e.display)&&
// set keyboard language
f.updateLanguage();var g,h,i,j=b.css,k=0,l=b.builtLayouts[c||f.layout||e.layout]={mappedKeys:{},acceptedKeys:[]},m=l.acceptedKeys=e.restrictInclude?(""+e.restrictInclude).split(/\s+/)||[]:[],
// using $layout temporarily to hold keyboard popup classnames
n=j.keyboard+" "+e.css.popup+" "+e.css.container+(e.alwaysOpen?" "+j.alwaysOpen:""),o=a("<div />").addClass(n).attr({role:"textbox"}).hide();
// verify layout or setup custom keyboard
// Main keyboard building loop
// $.isEmptyObject() requires jQuery 1.4+
return d&&"custom"===e.layout||!b.layouts.hasOwnProperty(e.layout)?(e.layout="custom",n=b.layouts.custom=e.customLayout||{normal:["{cancel}"]}):n=b.layouts[d?e.layout:c||f.layout||e.layout],a.each(n,function(b,c){
// skip layout name & lang settings
if(""!==b&&!/^(name|lang|rtl)$/i.test(b))for(
// keep backwards compatibility for change from default to normal naming
"default"===b&&(b="normal"),k++,h=a("<div />").attr("name",b).addClass(j.keySet+" "+j.keySet+"-"+b).appendTo(o).toggle("normal"===b),g=0;g<c.length;g++)i=a.trim(c[g]).replace(/\{(\.?)[\s+]?:[\s+]?(\.?)\}/g,"{$1:$2}"),f.buildRow(h,g,i.split(/\s+/),m),h.find("."+j.keyButton+",."+j.keySpacer).filter(":last").after('<br class="'+j.endRow+'"/>')}),k>1&&(f.sets=!0),l.hasMappedKeys=!a.isEmptyObject(l.mappedKeys),l.$keyboard=o,o},f.buildRow=function(c,d,g,h){var i,j,k,l,m,n,o=b.css;for(k=0;k<g.length;k++)
// ignore empty keys
if(
// used by addKey function
f.temp=[c,d,k],l=!1,0!==g[k].length)
// process here if it's an action key
if(/^\{\S+\}$/.test(g[k])){
// meta keys
if(m=g[k].match(/^\{(\S+)\}$/)[1],/\!\!/.test(m)&&(m=m.replace("!!",""),l=!0),/^sp:((\d+)?([\.|,]\d+)?)(em|px)?$/i.test(m)&&(n=parseFloat(m.replace(/,/,".").match(/^sp:((\d+)?([\.|,]\d+)?)(em|px)?$/i)[1]||0),a('<span class="'+o.keyText+'"></span>').width(m.match(/px/i)?n+"px":2*n+"em").addClass(o.keySpacer).appendTo(c)),/^empty(:((\d+)?([\.|,]\d+)?)(em|px)?)?$/i.test(m)&&(n=/:/.test(m)?parseFloat(m.replace(/,/,".").match(/^empty:((\d+)?([\.|,]\d+)?)(em|px)?$/i)[1]||0):"",f.addKey(""," ").addClass(e.css.buttonDisabled+" "+e.css.buttonEmpty).attr("aria-disabled",!0).width(n?m.match("px")?n+"px":2*n+"em":"")),/^meta\d+\:?(\w+)?/i.test(m)){f.addKey(m.split(":")[0],m).addClass(o.keyHasActive);continue}switch(j=m.split(":"),j[0].toLowerCase()){case"a":case"accept":f.addKey("accept",m).addClass(e.css.buttonAction+" "+o.keyAction);break;case"alt":case"altgr":f.addKey("alt",m).addClass(o.keyHasActive);break;case"b":case"bksp":f.addKey("bksp",m);break;case"c":case"cancel":f.addKey("cancel",m).addClass(e.css.buttonAction+" "+o.keyAction);break;
// toggle combo/diacritic key
case"combo":f.addKey("combo",m).addClass(o.keyHasActive).toggleClass(e.css.buttonActive,e.useCombos);break;
// Decimal - unique decimal point (num pad layout)
case"dec":h.push(f.decimal?".":","),f.addKey("dec",m);break;case"e":case"enter":f.addKey("enter",m).addClass(e.css.buttonAction+" "+o.keyAction);break;case"lock":f.addKey("lock",m).addClass(o.keyHasActive);break;case"s":case"shift":f.addKey("shift",m).addClass(o.keyHasActive);break;
// Change sign (for num pad layout)
case"sign":h.push("-"),f.addKey("sign",m);break;case"space":h.push(" "),f.addKey("space",m);break;case"t":case"tab":f.addKey("tab",m);break;default:b.keyaction.hasOwnProperty(j[0])&&
// acceptedKeys.push(action);
f.addKey(j[0],m).toggleClass(e.css.buttonAction+" "+o.keyAction,l)}}else i=g[k],h.push(":"===i?i:i.split(":")[0]),f.addKey(i,i,!0)},f.removeBindings=function(b){a(document).unbind(b),f.el.ownerDocument!==document&&a(f.el.ownerDocument).unbind(b),a(window).unbind(b),f.$el.unbind(b)},f.destroy=function(a){var c,d=b.css,g=f.extensionNamespace.length,h=[d.input,d.locked,d.placeholder,d.noKeyboard,d.alwaysOpen,e.css.input,d.isCurrent].join(" ");for(clearTimeout(f.timer),clearTimeout(f.timer2),f.removeBindings(f.namespace),c=0;g>c;c++)f.removeBindings(f.extensionNamespace[c]);f.el.active=!1,f.$keyboard.length&&f.$keyboard.remove(),f.$el.removeClass(h).removeAttr("aria-haspopup").removeAttr("role").removeData("keyboard"),f=null,"function"==typeof a&&a()},
// Run initializer
f.init()};
// Action key function list
// Default keyboard layouts
// for checking combos
// store current keyboard element; used by base.isCurrent()
// Old IE flag, used for caret positioning
/* Copyright (c) 2010 C. F., Wong (<a href="http://cloudgen.w0ng.hk">Cloudgen Examplet Store</a>)
 * Licensed under the MIT License:
 * http://www.opensource.org/licenses/mit-license.php
 * Highly modified from the original
 */
return b.css={
// keyboard id suffix
idSuffix:"_keyboard",
// element class names
input:"ui-keyboard-input",wrapper:"ui-keyboard-preview-wrapper",preview:"ui-keyboard-preview",keyboard:"ui-keyboard",keySet:"ui-keyboard-keyset",keyButton:"ui-keyboard-button",keyWide:"ui-keyboard-widekey",keyPrefix:"ui-keyboard-",keyText:"ui-keyboard-text",// span with button text
keyHasActive:"ui-keyboard-hasactivestate",keyAction:"ui-keyboard-actionkey",keySpacer:"ui-keyboard-spacer",// empty keys
keyToggle:"ui-keyboard-toggle",keyDisabled:"ui-keyboard-disabled",
// states
locked:"ui-keyboard-lockedinput",alwaysOpen:"ui-keyboard-always-open",noKeyboard:"ui-keyboard-nokeyboard",placeholder:"ui-keyboard-placeholder",hasFocus:"ui-keyboard-has-focus",isCurrent:"ui-keyboard-input-current",
// validation & autoaccept
inputValid:"ui-keyboard-valid-input",inputInvalid:"ui-keyboard-invalid-input",inputAutoAccepted:"ui-keyboard-autoaccepted",endRow:"ui-keyboard-button-endrow"},b.events={
// keyboard events
kbChange:"keyboardChange",kbBeforeClose:"beforeClose",kbBeforeVisible:"beforeVisible",kbVisible:"visible",kbInit:"initialized",kbInactive:"inactive",kbHidden:"hidden",kbRepeater:"repeater",kbKeysetChange:"keysetChange",
// input events
inputAccepted:"accepted",inputCanceled:"canceled",inputChange:"change",inputRestricted:"restricted"},b.keyaction={accept:function(a){// same as base.accept();
return a.close(!0),!1},alt:function(a){a.altActive=!a.altActive,a.showSet()},bksp:function(a){
// the script looks for the '\b' string and initiates a backspace
a.insertText("\b")},cancel:function(a){return a.close(),!1},clear:function(a){a.$preview.val(""),a.$decBtn.length&&a.checkDecimal()},combo:function(a){var c=!a.options.useCombos;return a.options.useCombos=c,a.$keyboard.find("."+b.css.keyPrefix+"combo").toggleClass(a.options.css.buttonActive,c),c&&a.checkCombos(),!1},dec:function(a){a.insertText(a.decimal?".":",")},del:function(a){
// the script looks for the '{d}' string and initiates a delete
a.insertText("{d}")},
// resets to base keyset (deprecated because "default" is a reserved word)
"default":function(a){a.shiftActive=a.altActive=a.metaActive=!1,a.showSet()},
// el is the pressed key (button) object; it is null when the real keyboard enter is pressed
enter:function(c,d,e){var f=c.el.nodeName,g=c.options;
// shift+enter in textareas
// shift+enter in textareas
// input only - enterMod + enter to navigate
// pressing virtual enter button inside of a textarea - add a carriage return
// e.target is span when clicking on text and button at other times
// IE8 fix (space + \n) - fixes #71 thanks Blookie!
return e.shiftKey?g.enterNavigation?c.switchInput(!e[g.enterMod],!0):c.close(!0):g.enterNavigation&&("TEXTAREA"!==f||e[g.enterMod])?c.switchInput(!e[g.enterMod],g.autoAccept?"true":!1):void("TEXTAREA"===f&&a(e.target).closest("button").length&&c.insertText((b.msie?" ":"")+"\n"))},
// caps lock key
lock:function(a){a.last.keyset[0]=a.shiftActive=a.capsLock=!a.capsLock,a.showSet()},left:function(a){var c=b.caret(a.$preview);c.start-1>=0&&(
// move both start and end of caret (prevents text selection) & save caret position
a.last.start=a.last.end=c.start-1,b.caret(a.$preview,a.last),a.setScroll())},meta:function(b,c){var d=a(c);b.metaActive=!d.hasClass(b.options.css.buttonActive),b.showSet(d.attr("data-name"))},next:function(a){return a.switchInput(!0,a.options.autoAccept),!1},
// same as 'default' - resets to base keyset
normal:function(a){a.shiftActive=a.altActive=a.metaActive=!1,a.showSet()},prev:function(a){return a.switchInput(!1,a.options.autoAccept),!1},right:function(a){var c=b.caret(a.$preview);c.start+1<=a.$preview.val().length&&(
// move both start and end of caret (prevents text selection) && save caret position
a.last.start=a.last.end=c.start+1,b.caret(a.$preview,a.last),a.setScroll())},shift:function(a){a.last.keyset[0]=a.shiftActive=!a.shiftActive,a.showSet()},sign:function(a){/^\-?\d*\.?\d*$/.test(a.$preview.val())&&a.$preview.val(-1*a.$preview.val())},space:function(a){a.insertText(" ")},tab:function(a){var b=a.el.nodeName,c=a.options;return"INPUT"===b?c.tabNavigation?a.switchInput(!a.shiftActive,!0):!1:void a.insertText("	")},toggle:function(a){a.enabled=!a.enabled,a.toggle()},
// *** Special action keys: NBSP & zero-width characters ***
// Non-breaking space
NBSP:" ",
// zero width space
ZWSP:"​",
// Zero width non-joiner
ZWNJ:"‌",
// Zero width joiner
ZWJ:"‍",
// Left-to-right Mark
LRM:"‎",
// Right-to-left Mark
RLM:"‏"},b.builtLayouts={},b.layouts={alpha:{normal:["` 1 2 3 4 5 6 7 8 9 0 - = {bksp}","{tab} a b c d e f g h i j [ ] \\","k l m n o p q r s ; ' {enter}","{shift} t u v w x y z , . / {shift}","{accept} {space} {cancel}"],shift:["~ ! @ # $ % ^ & * ( ) _ + {bksp}","{tab} A B C D E F G H I J { } |",'K L M N O P Q R S : " {enter}',"{shift} T U V W X Y Z < > ? {shift}","{accept} {space} {cancel}"]},qwerty:{normal:["` 1 2 3 4 5 6 7 8 9 0 - = {bksp}","{tab} q w e r t y u i o p [ ] \\","a s d f g h j k l ; ' {enter}","{shift} z x c v b n m , . / {shift}","{accept} {space} {cancel}"],shift:["~ ! @ # $ % ^ & * ( ) _ + {bksp}","{tab} Q W E R T Y U I O P { } |",'A S D F G H J K L : " {enter}',"{shift} Z X C V B N M < > ? {shift}","{accept} {space} {cancel}"]},international:{normal:["` 1 2 3 4 5 6 7 8 9 0 - = {bksp}","{tab} q w e r t y u i o p [ ] \\","a s d f g h j k l ; ' {enter}","{shift} z x c v b n m , . / {shift}","{accept} {alt} {space} {alt} {cancel}"],shift:["~ ! @ # $ % ^ & * ( ) _ + {bksp}","{tab} Q W E R T Y U I O P { } |",'A S D F G H J K L : " {enter}',"{shift} Z X C V B N M < > ? {shift}","{accept} {alt} {space} {alt} {cancel}"],alt:["~ ¡ ² ³ ¤ € ¼ ½ ¾ ‘ ’ ¥ × {bksp}","{tab} ä å é ® þ ü ú í ó ö « » ¬","á ß ð f g h j k ø ¶ ´ {enter}","{shift} æ x © v b ñ µ ç > ¿ {shift}","{accept} {alt} {space} {alt} {cancel}"],"alt-shift":["~ ¹ ² ³ £ € ¼ ½ ¾ ‘ ’ ¥ ÷ {bksp}","{tab} Ä Å É ® Þ Ü Ú Í Ó Ö « » ¦","Ä § Ð F G H J K Ø ° ¨ {enter}","{shift} Æ X ¢ V B Ñ µ Ç . ¿ {shift}","{accept} {alt} {space} {alt} {cancel}"]},colemak:{normal:["` 1 2 3 4 5 6 7 8 9 0 - = {bksp}","{tab} q w f p g j l u y ; [ ] \\","{bksp} a r s t d h n e i o ' {enter}","{shift} z x c v b k m , . / {shift}","{accept} {space} {cancel}"],shift:["~ ! @ # $ % ^ & * ( ) _ + {bksp}","{tab} Q W F P G J L U Y : { } |",'{bksp} A R S T D H N E I O " {enter}',"{shift} Z X C V B K M < > ? {shift}","{accept} {space} {cancel}"]},dvorak:{normal:["` 1 2 3 4 5 6 7 8 9 0 [ ] {bksp}","{tab} ' , . p y f g c r l / = \\","a o e u i d h t n s - {enter}","{shift} ; q j k x b m w v z {shift}","{accept} {space} {cancel}"],shift:["~ ! @ # $ % ^ & * ( ) { } {bksp}",'{tab} " < > P Y F G C R L ? + |',"A O E U I D H T N S _ {enter}","{shift} : Q J K X B M W V Z {shift}","{accept} {space} {cancel}"]},num:{normal:["= ( ) {b}","{clear} / * -","7 8 9 +","4 5 6 {sign}","1 2 3 %","0 {dec} {a} {c}"]}},b.language=a.extend({},b.language,{en:{display:{
// check mark - same action as accept
a:"✔:Accept (Shift+Enter)",accept:"Accept:Accept (Shift+Enter)",
// other alternatives \u2311
alt:"Alt:⌥ AltGr",
// Left arrow (same as &larr;)
b:"⌫:Backspace",bksp:"Bksp:Backspace",
// big X, close - same action as cancel
c:"✖:Cancel (Esc)",cancel:"Cancel:Cancel (Esc)",
// clear num pad
clear:"C:Clear",combo:"ö:Toggle Combo Keys",
// decimal point for num pad (optional), change '.' to ',' for European format
dec:".:Decimal",
// down, then left arrow - enter symbol
e:"⏎:Enter",empty:" ",enter:"Enter:Enter ⏎",
// left arrow (move caret)
left:"←",
// caps lock
lock:"Lock:⇪ Caps Lock",next:"Next ⇨",prev:"⇦ Prev",
// right arrow (move caret)
right:"→",
// thick hollow up arrow
s:"⇧:Shift",shift:"Shift:Shift",
// +/- sign for num pad
sign:"±:Change Sign",space:" :Space",
// right arrow to bar (used since this virtual keyboard works with one directional tabs)
t:"⇥:Tab",
// \u21b9 is the true tab symbol (left & right arrows)
tab:"⇥ Tab:Tab",
// replaced by an image
toggle:" "},
// Message added to the key title while hovering, if the mousewheel plugin exists
wheelMessage:"Use mousewheel to see other keys",comboRegex:/([`\'~\^\"ao])([a-z])/gim,combos:{
// grave
"`":{a:"à",A:"À",e:"è",E:"È",i:"ì",I:"Ì",o:"ò",O:"Ò",u:"ù",U:"Ù",y:"ỳ",Y:"Ỳ"},
// acute & cedilla
"'":{a:"á",A:"Á",e:"é",E:"É",i:"í",I:"Í",o:"ó",O:"Ó",u:"ú",U:"Ú",y:"ý",Y:"Ý"},
// umlaut/trema
'"':{a:"ä",A:"Ä",e:"ë",E:"Ë",i:"ï",I:"Ï",o:"ö",O:"Ö",u:"ü",U:"Ü",y:"ÿ",Y:"Ÿ"},
// circumflex
"^":{a:"â",A:"Â",e:"ê",E:"Ê",i:"î",I:"Î",o:"ô",O:"Ô",u:"û",U:"Û",y:"ŷ",Y:"Ŷ"},
// tilde
"~":{a:"ã",A:"Ã",e:"ẽ",E:"Ẽ",i:"ĩ",I:"Ĩ",o:"õ",O:"Õ",u:"ũ",U:"Ũ",y:"ỹ",Y:"Ỹ",n:"ñ",N:"Ñ"}}}}),b.defaultOptions={
// set this to ISO 639-1 language code to override language set by the layout
// http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes
// language defaults to 'en' if not found
language:null,rtl:!1,
// *** choose layout & positioning ***
layout:"qwerty",customLayout:null,position:{
// optional - null (attach to input/textarea) or a jQuery object (attach elsewhere)
of:null,my:"center top",at:"center top",
// used when 'usePreview' is false (centers the keyboard at the bottom of the input/textarea)
at2:"center bottom"},
// allow jQuery position utility to reposition the keyboard on window resize
reposition:!0,
// preview added above keyboard if true, original input/textarea used if false
usePreview:!0,
// if true, the keyboard will always be visible
alwaysOpen:!1,
// give the preview initial focus when the keyboard becomes visible
initialFocus:!0,
// avoid changing the focus (hardware keyboard probably won't work)
noFocus:!1,
// if true, keyboard will remain open even if the input loses focus, but closes on escape
// or when another keyboard opens.
stayOpen:!1,
// if true, keyboard will not close if you press escape.
ignoreEsc:!1,css:{
// input & preview
input:"ui-widget-content ui-corner-all",
// keyboard container
container:"ui-widget-content ui-widget ui-corner-all ui-helper-clearfix",
// keyboard container extra class (same as container, but separate)
popup:"",
// default state
buttonDefault:"ui-state-default ui-corner-all",
// hovered button
buttonHover:"ui-state-hover",
// Action keys (e.g. Accept, Cancel, Tab, etc); this replaces 'actionClass' option
buttonAction:"ui-state-active",
// Active keys (e.g. shift down, meta keyset active, combo keys active)
buttonActive:"ui-state-active",
// used when disabling the decimal button {dec} when a decimal exists in the input area
buttonDisabled:"ui-state-disabled",buttonEmpty:"ui-keyboard-empty"},
// *** Useability ***
// Auto-accept content when clicking outside the keyboard (popup will close)
autoAccept:!1,
// Auto-accept content even if the user presses escape (only works if `autoAccept` is `true`)
autoAcceptOnEsc:!1,
// Prevents direct input in the preview window when true
lockInput:!1,
// Prevent keys not in the displayed keyboard from being typed in
restrictInput:!1,
// Additional allowed characters while restrictInput is true
restrictInclude:"",// e.g. 'a b foo \ud83d\ude38'
// Check input against validate function, if valid the accept button gets a class name of
// 'ui-keyboard-valid-input'. If invalid, the accept button gets a class name of
// 'ui-keyboard-invalid-input'
acceptValid:!1,
// if acceptValid is true & the validate function returns a false, this option will cancel
// a keyboard close only after the accept button is pressed
cancelClose:!0,
// tab to go to next, shift-tab for previous (default behavior)
tabNavigation:!1,
// enter for next input; shift+enter accepts content & goes to next
// shift + 'enterMod' + enter ('enterMod' is the alt as set below) will accept content and go
// to previous in a textarea
enterNavigation:!1,
// mod key options: 'ctrlKey', 'shiftKey', 'altKey', 'metaKey' (MAC only)
enterMod:"altKey",// alt-enter to go to previous; shift-alt-enter to accept & go to previous
// if true, the next button will stop on the last keyboard input/textarea; prev button stops at first
// if false, the next button will wrap to target the first input/textarea; prev will go to the last
stopAtEnd:!0,
// Set this to append the keyboard after the input/textarea (appended to the input/textarea parent).
// This option works best when the input container doesn't have a set width & when the 'tabNavigation'
// option is true.
appendLocally:!1,
// When appendLocally is false, the keyboard will be appended to this object
appendTo:"body",
// If false, the shift key will remain active until the next key is (mouse) clicked on; if true it will
// stay active until pressed again
stickyShift:!0,
// Prevent pasting content into the area
preventPaste:!1,
// caret placed at the end of any text when keyboard becomes visible
caretToEnd:!1,
// caret stays this many pixels from the edge of the input while scrolling left/right;
// use "c" or "center" to center the caret while scrolling
scrollAdjustment:10,
// Set the max number of characters allowed in the input, setting it to false disables this option
maxLength:!1,
// allow inserting characters @ caret when maxLength is set
maxInsert:!0,
// Mouse repeat delay - when clicking/touching a virtual keyboard key, after this delay the key will
// start repeating
repeatDelay:500,
// Mouse repeat rate - after the repeatDelay, this is the rate (characters per second) at which the
// key is repeated Added to simulate holding down a real keyboard key and having it repeat. I haven't
// calculated the upper limit of this rate, but it is limited to how fast the javascript can process
// the keys. And for me, in Firefox, it's around 20.
repeatRate:20,
// resets the keyboard to the default keyset when visible
resetDefault:!0,
// Event (namespaced) on the input to reveal the keyboard. To disable it, just set it to ''.
openOn:"focus",
// Event (namepaced) for when the character is added to the input (clicking on the keyboard)
keyBinding:"mousedown touchstart",
// enable/disable mousewheel functionality
// enabling still depends on the mousewheel plugin
useWheel:!0,
// combos (emulate dead keys : http://en.wikipedia.org/wiki/Keyboard_layout#US-International)
// if user inputs `a the script converts it to à, ^o becomes ô, etc.
useCombos:!0,/*
		// *** Methods ***
		// commenting these out to reduce the size of the minified version
		// Callbacks - attach a function to any of these callbacks as desired
		initialized   : function(e, keyboard, el) {},
		beforeVisible : function(e, keyboard, el) {},
		visible       : function(e, keyboard, el) {},
		change        : function(e, keyboard, el) {},
		beforeClose   : function(e, keyboard, el, accepted) {},
		accepted      : function(e, keyboard, el) {},
		canceled      : function(e, keyboard, el) {},
		restricted    : function(e, keyboard, el) {},
		hidden        : function(e, keyboard, el) {},
		// called instead of base.switchInput
		switchInput   : function(keyboard, goToNext, isAccepted) {},
		// used if you want to create a custom layout or modify the built-in keyboard
		create        : function(keyboard) { return keyboard.buildKeyboard(); },

		// build key callback
		buildKey : function( keyboard, data ) {
			/ *
			data = {
				// READ ONLY
				isAction : [boolean] true if key is an action key
				name     : [string]  key class name suffix ( prefix = 'ui-keyboard-' ); may include decimal ascii value of character
				value    : [string]  text inserted (non-action keys)
				title    : [string]  title attribute of key
				action   : [string]  keyaction name
				html     : [string]  HTML of the key; it includes a <span> wrapping the text
				// use to modify key HTML
				$key     : [object]  jQuery selector of key which is already appended to keyboard
			}
			* /
			return data;
		},
*/
// this callback is called just before the 'beforeClose' to check the value
// if the value is valid, return true and the keyboard will continue as it should
// (close if not always open, etc). If the value is not value, return false and the clear the keyboard
// value ( like this "keyboard.$preview.val('');" ), if desired. The validate function is called after
// each input, the 'isClosing' value will be false; when the accept button is clicked,
// 'isClosing' is true
validate:function(a,b,c){return!0}},b.comboRegex=/([`\'~\^\"ao])([a-z])/gim,b.currentKeyboard="",a('<!--[if lte IE 8]><script>jQuery("body").addClass("oldie");</script><![endif]--><!--[if IE]><script>jQuery("body").addClass("ie");</script><![endif]-->').appendTo("body").remove(),b.msie=a("body").hasClass("oldie"),b.allie=a("body").hasClass("ie"),b.watermark="undefined"!=typeof document.createElement("input").placeholder,b.checkCaretSupport=function(){if("boolean"!=typeof b.checkCaret){
// Check if caret position is saved when input is hidden or loses focus
// (*cough* all versions of IE and I think Opera has/had an issue as well
var c=a('<div style="height:0px;width:0px;overflow:hidden;"><input type="text" value="testing"/></div>').prependTo("body");// stop page scrolling
b.caret(c.find("input"),3,3),
// Also save caret position of the input if it is locked
b.checkCaret=3!==b.caret(c.find("input").hide().show()).start,c.remove()}return b.checkCaret},b.caret=function(a,b,c){if(!a.length||a.is(":hidden")||"hidden"===a.css("visibility"))return{};var d,e,f,g,h=a.data("keyboard"),i=h&&h.options.noFocus;
// set caret position
// set caret position
// allow setting caret using ( $el, { start: x, end: y } )
// set caret using ( $el, start, end );
// unknown string setting, move caret to end
// *** GET CARET POSITION ***
// modify the line below to adapt to other caret plugins
// *** utilities ***
return i||a.focus(),"undefined"!=typeof b?("object"==typeof b&&"start"in b&&"end"in b?(d=b.start,e=b.end):"undefined"==typeof c&&(c=b),"number"==typeof b&&"number"==typeof c?(d=b,e=c):"start"===b?d=e=0:"string"==typeof b&&(d=e=a.val().length),a.caret(d,e,i)):(g=a.caret(),d=g.start,e=g.end,f=a[0].value||a.text()||"",{start:d,end:e,text:f.substring(d,e),replaceStr:function(a){return f.substring(0,d)+a+f.substring(e,f.length)}})},a.fn.keyboard=function(b){return this.each(function(){a(this).data("keyboard")||/*jshint nonew:false */
new a.keyboard(this,b)})},a.fn.getkeyboard=function(){return this.data("keyboard")},a.fn.caret=function(a,b,c){if("undefined"==typeof this[0]||this.is(":hidden")||"hidden"===this.css("visibility"))return this;var d,e,f,g,h,i=document.selection,j=this,k=j[0],l=k.scrollTop,m=!1,n=!0;try{m="selectionStart"in k}catch(o){n=!1}
// must be visible or IE8 crashes; IE9 in compatibility mode works fine - issue #56
// fix suggested by raduanastase (https://github.com/Mottie/Keyboard/issues/105#issuecomment-40456535)
// thanks to the awesome comments in the rangy plugin
// caret positioning not supported
return n&&"undefined"!=typeof a?(/(email|number)/i.test(k.type)||(m?(k.selectionStart=a,k.selectionEnd=b):(d=k.createTextRange(),d.collapse(!0),d.moveStart("character",a),d.moveEnd("character",b-a),d.select())),c||!j.is(":visible")&&"hidden"===j.css("visibility")||k.focus(),k.scrollTop=l,this):(/(email|number)/i.test(k.type)?a=b=j.val().length:m?(a=k.selectionStart,b=k.selectionEnd):i?"TEXTAREA"===k.nodeName?(h=j.val(),e=i.createRange(),f=e.duplicate(),f.moveToElementText(k),f.setEndPoint("EndToEnd",e),a=f.text.replace(/\r/g,"\n").length,b=a+e.text.replace(/\r/g,"\n").length):(h=j.val().replace(/\r/g,"\n"),e=i.createRange().duplicate(),e.moveEnd("character",h.length),a=""===e.text?h.length:h.lastIndexOf(e.text),e=i.createRange().duplicate(),e.moveStart("character",-h.length),b=e.text.length):a=b=(k.value||"").length,g=k.value||"",{start:a,end:b,text:g.substring(a,b),replace:function(c){return g.substring(0,a)+c+g.substring(b,g.length)}})},b});