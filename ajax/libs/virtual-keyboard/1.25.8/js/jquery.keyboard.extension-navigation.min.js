/*! jQuery UI Virtual Keyboard Navigation v1.6.1 */
/*
 * for Keyboard v1.18+ only (updated 7/7/2015)
 *
 * By Rob Garrison (aka Mottie & Fudgey)
 * Licensed under the MIT License
 *
 * Use this extension with the Virtual Keyboard to navigate
 * the virtual keyboard keys using the arrow, page, home and end keys
 * Using this extension WILL prevent keyboard navigation inside of all
 * input and textareas
 *
 * Requires:
 *  jQuery
 *  Keyboard plugin : https://github.com/Mottie/Keyboard
 *
 * Setup:
 *  $('.ui-keyboard-input')
 *   .keyboard(options)
 *   .addNavigation();
 *
 *  // or if targeting a specific keyboard
 *  $('#keyboard1')
 *   .keyboard(options)     // keyboard plugin
 *   .addNavigation();    // this keyboard extension
 *
 */
/*jshint browser:true, jquery:true, unused:false */
/*global require:false, define:false, module:false */
!function(a){"function"==typeof define&&define.amd?define(["jquery"],a):"object"==typeof module&&"object"==typeof module.exports?module.exports=a(require("jquery")):a(jQuery)}(function(a){"use strict";a.keyboard=a.keyboard||{},a.keyboard.navigationKeys={
// all keys
toggle:112,// toggle key; F1 = 112 (event.which value for function 1 key)
enter:13,pageup:33,pagedown:34,end:35,home:36,left:37,up:38,right:39,down:40,
// move caret WITH navigate toggle active
caretrt:45,// Insert key
caretlt:46,// delete key
// ** custom navigationKeys functions **
// move caret without navigate toggle active
caretright:function(b){a.keyboard.keyaction.right(b)},caretleft:function(b){a.keyboard.keyaction.left(b)}},a.fn.addNavigation=function(b){return this.each(function(){
// make sure a keyboard is attached
var c,d,e=a(this).data("keyboard"),f=e.options,g={position:[0,0],// set start position [row-number, key-index]
toggleMode:!1,// true = navigate the virtual keyboard, false = navigate in input/textarea
focusClass:"hasFocus",// css class added when toggle mode is on
toggleKey:null},h=a.keyboard.events;e&&(e.navigation_options=c=a.extend({},g,b),e.navigation_keys=d=a.extend({},a.keyboard.navigationKeys),e.navigation_namespace=e.namespace+"Nav",e.extensionNamespace.push(e.navigation_namespace),
// save navigation settings - disabled when the toggled
e.saveNav=[e.options.tabNavigation,e.options.enterNavigation],e.allNavKeys=a.map(d,function(a,b){return a}),
// Setup
e.navigation_init=function(){var b=a.keyboard.css;e.$keyboard.toggleClass(c.focusClass,c.toggleMode).find("."+b.keySet+":visible").find("."+b.keyButton+'[data-pos="'+c.position[0]+","+c.position[1]+'"]').addClass(f.css.buttonHover),e.$preview.unbind(e.navigation_namespace).bind("keydown"+e.navigation_namespace,function(a){return e.checkKeys(a.which)})},e.checkKeys=function(b,d){if("undefined"!=typeof b){var f=e.navigation_keys,g=a.keyboard.css;return(b===(c.toggleKey||f.toggle)||d)&&(c.toggleMode=d?!1:!c.toggleMode,e.options.tabNavigation=c.toggleMode?!1:e.saveNav[0],e.options.enterNavigation=c.toggleMode?!1:e.saveNav[1]),e.$keyboard.toggleClass(c.focusClass,c.toggleMode),c.toggleMode&&b===f.enter?(e.$keyboard.find("."+g.keySet+":visible").find("."+g.keyButton+'[data-pos="'+c.position[0]+","+c.position[1]+'"]').trigger(h.kbRepeater),!1):c.toggleMode&&a.inArray(b,e.allNavKeys)>=0?(e.navigateKeys(b),!1):void 0}},e.navigateKeys=function(b,d,g){g="number"==typeof g?g:c.position[1],d="number"==typeof d?d:c.position[0];var h=a.keyboard.css,i=e.$keyboard.find("."+h.keySet+":visible"),j=i.find("."+h.endRow).length-1,k=i.find("."+h.keyButton+'[data-pos^="'+d+',"]').length-1,l=e.last,m=e.$preview.val().length,n=e.navigation_keys;switch(b){case n.pageup:d=0;break;// pageUp
case n.pagedown:d=j;break;// pageDown
case n.end:g=k;break;// End
case n.home:g=0;break;// Home
case n.left:g+=g>0?-1:0;break;// Left
case n.up:d+=d>0?-1:0;break;// Up
case n.right:g+=1;break;// Right
case n.down:d+=d+1>j?0:1;break;// Down
case n.caretrt:l.start++;break;// caret right
case n.caretlt:l.start--}
// move caret
(b===n.caretrt||b===n.caretlt)&&(l.start=l.start<0?0:l.start>m?m:l.start,e.last.start=e.last.end=l.end=l.start,a.keyboard.caret(e.$preview,e.last)),k=i.find("."+h.keyButton+'[data-pos^="'+d+',"]').length-1,g>k&&(g=k),i.find("."+f.css.buttonHover).removeClass(f.css.buttonHover),i.find("."+h.keyButton+'[data-pos="'+d+","+g+'"]').addClass(f.css.buttonHover),c.position=[d,g]},
// visible event is fired before this extension is initialized, so check!
e.options.alwaysOpen&&e.isVisible&&(e.$keyboard.find("."+f.css.buttonHover).removeClass(f.css.buttonHover),e.navigation_init()),
// navigation bindings
e.$el.unbind(e.navigation_namespace).bind(h.kbVisible,function(){e.$keyboard.find("."+f.css.buttonHover).removeClass(f.css.buttonHover),e.navigation_init()}).bind(h.kbInactive+" "+h.kbHidden,function(a){e.checkKeys(a.which,!0)}).bind(h.kbKeysetChange,function(){e.navigateKeys(null)}).bind("navigate navigateTo",function(b,c,d){var f;c=isNaN(c)?c.toLowerCase():c,c in e.navigation_keys?(f=e.navigation_keys[c],isNaN(f)&&f in a.keyboard.keyaction?a.keyboard.keyaction[f](e,this,b):a.isFunction(f)?f(e):e.checkKeys(f)):"string"==typeof c&&c in a.keyboard.keyaction?a.keyboard.keyaction[c](e,this,b):e.navigateKeys(null,c,d)}))})}});