{"version":3,"file":"css-layout.min.js","sources":["css-layout.js"],"names":["root","factory","define","amd","exports","module","computeLayout","this","capitalizeFirst","str","charAt","toUpperCase","slice","getSpacing","node","type","suffix","locations","i","length","location","key","style","fillNodes","layout","width","undefined","height","top","left","right","bottom","children","forEach","getPositiveSpacing","isUndefined","value","isRowDirection","flexDirection","CSS_FLEX_DIRECTION_ROW","CSS_FLEX_DIRECTION_ROW_REVERSE","isColumnDirection","CSS_FLEX_DIRECTION_COLUMN","CSS_FLEX_DIRECTION_COLUMN_REVERSE","getLeadingLocations","axis","leading","unshift","getTrailingLocations","trailing","getMargin","getLeadingMargin","getTrailingMargin","getPadding","getLeadingPadding","getTrailingPadding","getBorder","getLeadingBorder","getTrailingBorder","getLeadingPaddingAndBorder","getTrailingPaddingAndBorder","getBorderAxis","getMarginAxis","getPaddingAndBorderAxis","getJustifyContent","justifyContent","getAlignContent","alignContent","getAlignItem","child","alignSelf","alignItems","resolveAxis","direction","CSS_DIRECTION_RTL","resolveDirection","parentDirection","CSS_DIRECTION_INHERIT","CSS_DIRECTION_LTR","getFlexDirection","getCrossFlexDirection","getPositionType","position","isFlex","CSS_POSITION_RELATIVE","flex","isFlexWrap","flexWrap","getDimWithMargin","dim","isDimDefined","isPosDefined","pos","isMeasureDefined","getPosition","boundAxis","min","row","minWidth","row-reverse","column","minHeight","column-reverse","max","maxWidth","maxHeight","boundValue","fmaxf","a","b","setDimensionFromStyle","setTrailingPosition","getRelativePosition","layoutNode","parentMaxWidth","mainAxis","crossAxis","resolvedRowAxis","childCount","paddingAndBorderAxisResolvedRow","isResolvedRowDimDefined","CSS_UNDEFINED","isRowUndefined","isColumnUndefined","measureDim","measure","ii","isNodeFlexWrap","leadingPaddingAndBorderMain","leadingPaddingAndBorderCross","paddingAndBorderAxisMain","paddingAndBorderAxisCross","isMainDimDefined","isCrossDimDefined","isMainRowDirection","firstAbsoluteChild","currentAbsoluteChild","definedMainDim","startLine","endLine","alreadyComputedNextLayout","linesCrossDim","linesMainDim","linesCount","mainContentDim","flexibleChildrenCount","totalFlexible","nonFlexibleChildrenCount","isSimpleStackMain","CSS_JUSTIFY_FLEX_START","CSS_JUSTIFY_CENTER","firstComplexMain","isSimpleStackCross","firstComplexCross","firstFlexChild","currentFlexChild","mainDim","crossDim","lineIndex","nextAbsoluteChild","nextFlexChild","alignItem","CSS_ALIGN_STRETCH","CSS_POSITION_ABSOLUTE","nextContentDim","CSS_ALIGN_FLEX_START","leadingMainDim","betweenMainDim","remainingMainDim","baseMainDim","boundMainDim","flexibleMainDim","CSS_JUSTIFY_FLEX_END","CSS_JUSTIFY_SPACE_BETWEEN","CSS_JUSTIFY_SPACE_AROUND","containerCrossAxis","leadingCrossDim","remainingCrossDim","CSS_ALIGN_CENTER","nodeCrossAxisInnerSize","remainingAlignContentDim","crossDimLead","currentLead","CSS_ALIGN_FLEX_END","endIndex","startIndex","lineHeight","alignContentAlignItem","childHeight","needsMainTrailingPos","needsCrossTrailingPos"],"mappings":"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","sourcesContent":["// UMD (Universal Module Definition)\n// See https://github.com/umdjs/umd for reference\n//\n// This file uses the following specific UMD implementation:\n// https://github.com/umdjs/umd/blob/master/returnExports.js\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory();\n  } else {\n    // Browser globals (root is window)\n    root.computeLayout = factory();\n  }\n}(this, function () {\n    /**\n * Copyright (c) 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\nvar computeLayout = (function() {\n\n  var CSS_UNDEFINED;\n\n  var CSS_DIRECTION_INHERIT = 'inherit';\n  var CSS_DIRECTION_LTR = 'ltr';\n  var CSS_DIRECTION_RTL = 'rtl';\n\n  var CSS_FLEX_DIRECTION_ROW = 'row';\n  var CSS_FLEX_DIRECTION_ROW_REVERSE = 'row-reverse';\n  var CSS_FLEX_DIRECTION_COLUMN = 'column';\n  var CSS_FLEX_DIRECTION_COLUMN_REVERSE = 'column-reverse';\n\n  var CSS_JUSTIFY_FLEX_START = 'flex-start';\n  var CSS_JUSTIFY_CENTER = 'center';\n  var CSS_JUSTIFY_FLEX_END = 'flex-end';\n  var CSS_JUSTIFY_SPACE_BETWEEN = 'space-between';\n  var CSS_JUSTIFY_SPACE_AROUND = 'space-around';\n\n  var CSS_ALIGN_FLEX_START = 'flex-start';\n  var CSS_ALIGN_CENTER = 'center';\n  var CSS_ALIGN_FLEX_END = 'flex-end';\n  var CSS_ALIGN_STRETCH = 'stretch';\n\n  var CSS_POSITION_RELATIVE = 'relative';\n  var CSS_POSITION_ABSOLUTE = 'absolute';\n\n  var leading = {\n    'row': 'left',\n    'row-reverse': 'right',\n    'column': 'top',\n    'column-reverse': 'bottom'\n  };\n  var trailing = {\n    'row': 'right',\n    'row-reverse': 'left',\n    'column': 'bottom',\n    'column-reverse': 'top'\n  };\n  var pos = {\n    'row': 'left',\n    'row-reverse': 'right',\n    'column': 'top',\n    'column-reverse': 'bottom'\n  };\n  var dim = {\n    'row': 'width',\n    'row-reverse': 'width',\n    'column': 'height',\n    'column-reverse': 'height'\n  };\n\n  function capitalizeFirst(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  }\n\n  function getSpacing(node, type, suffix, locations) {\n    for (var i = 0; i < locations.length; ++i) {\n      var location = locations[i];\n\n      var key = type + capitalizeFirst(location) + suffix;\n      if (key in node.style) {\n        return node.style[key];\n      }\n\n      key = type + suffix;\n      if (key in node.style) {\n        return node.style[key];\n      }\n    }\n\n    return 0;\n  }\n\n  // When transpiled to Java / C the node type has layout, children and style\n  // properties. For the JavaScript version this function adds these properties\n  // if they don't already exist.\n  function fillNodes(node) {\n    if (!node.layout) {\n      node.layout = {\n        width: undefined,\n        height: undefined,\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0\n      };\n    }\n\n    if (!node.style) {\n      node.style = {};\n    }\n\n    if (!node.children) {\n      node.children = [];\n    }\n    node.children.forEach(fillNodes);\n    return node;\n  }\n\n  function getPositiveSpacing(node, type, suffix, locations) {\n    for (var i = 0; i < locations.length; ++i) {\n      var location = locations[i];\n\n      var key = type + capitalizeFirst(location) + suffix;\n      if (key in node.style && node.style[key] >= 0) {\n        return node.style[key];\n      }\n\n      key = type + suffix;\n      if (key in node.style && node.style[key] >= 0) {\n        return node.style[key];\n      }\n    }\n\n    return 0;\n  }\n\n  function isUndefined(value) {\n    return value === undefined;\n  }\n\n  function isRowDirection(flexDirection) {\n    return flexDirection === CSS_FLEX_DIRECTION_ROW ||\n           flexDirection === CSS_FLEX_DIRECTION_ROW_REVERSE;\n  }\n\n  function isColumnDirection(flexDirection) {\n    return flexDirection === CSS_FLEX_DIRECTION_COLUMN ||\n           flexDirection === CSS_FLEX_DIRECTION_COLUMN_REVERSE;\n  }\n\n  function getLeadingLocations(axis) {\n    var locations = [leading[axis]];\n    if (isRowDirection(axis)) {\n      locations.unshift('start');\n    }\n\n    return locations;\n  }\n\n  function getTrailingLocations(axis) {\n    var locations = [trailing[axis]];\n    if (isRowDirection(axis)) {\n      locations.unshift('end');\n    }\n\n    return locations;\n  }\n\n  function getMargin(node, locations) {\n    return getSpacing(node, 'margin', '', locations);\n  }\n\n  function getLeadingMargin(node, axis) {\n    return getMargin(node, getLeadingLocations(axis));\n  }\n\n  function getTrailingMargin(node, axis) {\n    return getMargin(node, getTrailingLocations(axis));\n  }\n\n  function getPadding(node, locations) {\n    return getPositiveSpacing(node, 'padding', '', locations);\n  }\n\n  function getLeadingPadding(node, axis) {\n    return getPadding(node, getLeadingLocations(axis));\n  }\n\n  function getTrailingPadding(node, axis) {\n    return getPadding(node, getTrailingLocations(axis));\n  }\n\n  function getBorder(node, locations) {\n    return getPositiveSpacing(node, 'border', 'Width', locations);\n  }\n\n  function getLeadingBorder(node, axis) {\n    return getBorder(node, getLeadingLocations(axis));\n  }\n\n  function getTrailingBorder(node, axis) {\n    return getBorder(node, getTrailingLocations(axis));\n  }\n\n  function getLeadingPaddingAndBorder(node, axis) {\n    return getLeadingPadding(node, axis) + getLeadingBorder(node, axis);\n  }\n\n  function getTrailingPaddingAndBorder(node, axis) {\n    return getTrailingPadding(node, axis) + getTrailingBorder(node, axis);\n  }\n\n  function getBorderAxis(node, axis) {\n    return getLeadingBorder(node, axis) + getTrailingBorder(node, axis);\n  }\n\n  function getMarginAxis(node, axis) {\n    return getLeadingMargin(node, axis) + getTrailingMargin(node, axis);\n  }\n\n  function getPaddingAndBorderAxis(node, axis) {\n    return getLeadingPaddingAndBorder(node, axis) +\n        getTrailingPaddingAndBorder(node, axis);\n  }\n\n  function getJustifyContent(node) {\n    if ('justifyContent' in node.style) {\n      return node.style.justifyContent;\n    }\n    return 'flex-start';\n  }\n\n  function getAlignContent(node) {\n    if ('alignContent' in node.style) {\n      return node.style.alignContent;\n    }\n    return 'flex-start';\n  }\n\n  function getAlignItem(node, child) {\n    if ('alignSelf' in child.style) {\n      return child.style.alignSelf;\n    }\n    if ('alignItems' in node.style) {\n      return node.style.alignItems;\n    }\n    return 'stretch';\n  }\n\n  function resolveAxis(axis, direction) {\n    if (direction === CSS_DIRECTION_RTL) {\n      if (axis === CSS_FLEX_DIRECTION_ROW) {\n        return CSS_FLEX_DIRECTION_ROW_REVERSE;\n      } else if (axis === CSS_FLEX_DIRECTION_ROW_REVERSE) {\n        return CSS_FLEX_DIRECTION_ROW;\n      }\n    }\n\n    return axis;\n  }\n\n  function resolveDirection(node, parentDirection) {\n    var direction;\n    if ('direction' in node.style) {\n      direction = node.style.direction;\n    } else {\n      direction = CSS_DIRECTION_INHERIT;\n    }\n\n    if (direction === CSS_DIRECTION_INHERIT) {\n      direction = (parentDirection === undefined ? CSS_DIRECTION_LTR : parentDirection);\n    }\n\n    return direction;\n  }\n\n  function getFlexDirection(node) {\n    if ('flexDirection' in node.style) {\n      return node.style.flexDirection;\n    }\n    return CSS_FLEX_DIRECTION_COLUMN;\n  }\n\n  function getCrossFlexDirection(flexDirection, direction) {\n    if (isColumnDirection(flexDirection)) {\n      return resolveAxis(CSS_FLEX_DIRECTION_ROW, direction);\n    } else {\n      return CSS_FLEX_DIRECTION_COLUMN;\n    }\n  }\n\n  function getPositionType(node) {\n    if ('position' in node.style) {\n      return node.style.position;\n    }\n    return 'relative';\n  }\n\n  function isFlex(node) {\n    return (\n      getPositionType(node) === CSS_POSITION_RELATIVE &&\n      node.style.flex > 0\n    );\n  }\n\n  function isFlexWrap(node) {\n    return node.style.flexWrap === 'wrap';\n  }\n\n  function getDimWithMargin(node, axis) {\n    return node.layout[dim[axis]] + getMarginAxis(node, axis);\n  }\n\n  function isDimDefined(node, axis) {\n    return !isUndefined(node.style[dim[axis]]) && node.style[dim[axis]] >= 0;\n  }\n\n  function isPosDefined(node, pos) {\n    return !isUndefined(node.style[pos]);\n  }\n\n  function isMeasureDefined(node) {\n    return 'measure' in node.style;\n  }\n\n  function getPosition(node, pos) {\n    if (pos in node.style) {\n      return node.style[pos];\n    }\n    return 0;\n  }\n\n  function boundAxis(node, axis, value) {\n    var min = {\n      'row': node.style.minWidth,\n      'row-reverse': node.style.minWidth,\n      'column': node.style.minHeight,\n      'column-reverse': node.style.minHeight\n    }[axis];\n\n    var max = {\n      'row': node.style.maxWidth,\n      'row-reverse': node.style.maxWidth,\n      'column': node.style.maxHeight,\n      'column-reverse': node.style.maxHeight\n    }[axis];\n\n    var boundValue = value;\n    if (!isUndefined(max) && max >= 0 && boundValue > max) {\n      boundValue = max;\n    }\n    if (!isUndefined(min) && min >= 0 && boundValue < min) {\n      boundValue = min;\n    }\n    return boundValue;\n  }\n\n  function fmaxf(a, b) {\n    if (a > b) {\n      return a;\n    }\n    return b;\n  }\n\n  // When the user specifically sets a value for width or height\n  function setDimensionFromStyle(node, axis) {\n    // The parent already computed us a width or height. We just skip it\n    if (!isUndefined(node.layout[dim[axis]])) {\n      return;\n    }\n    // We only run if there's a width or height defined\n    if (!isDimDefined(node, axis)) {\n      return;\n    }\n\n    // The dimensions can never be smaller than the padding and border\n    node.layout[dim[axis]] = fmaxf(\n      boundAxis(node, axis, node.style[dim[axis]]),\n      getPaddingAndBorderAxis(node, axis)\n    );\n  }\n\n  function setTrailingPosition(node, child, axis) {\n    child.layout[trailing[axis]] = node.layout[dim[axis]] -\n        child.layout[dim[axis]] - child.layout[pos[axis]];\n  }\n\n  // If both left and right are defined, then use left. Otherwise return\n  // +left or -right depending on which is defined.\n  function getRelativePosition(node, axis) {\n    if (leading[axis] in node.style) {\n      return getPosition(node, leading[axis]);\n    }\n    return -getPosition(node, trailing[axis]);\n  }\n\n  function layoutNode(node, parentMaxWidth, /*css_direction_t*/parentDirection) {\n    var/*css_direction_t*/ direction = resolveDirection(node, parentDirection);\n    var/*(c)!css_flex_direction_t*//*(java)!int*/ mainAxis = resolveAxis(getFlexDirection(node), direction);\n    var/*(c)!css_flex_direction_t*//*(java)!int*/ crossAxis = getCrossFlexDirection(mainAxis, direction);\n    var/*(c)!css_flex_direction_t*//*(java)!int*/ resolvedRowAxis = resolveAxis(CSS_FLEX_DIRECTION_ROW, direction);\n\n    // Handle width and height style attributes\n    setDimensionFromStyle(node, mainAxis);\n    setDimensionFromStyle(node, crossAxis);\n\n    // Set the resolved resolution in the node's layout\n    node.layout.direction = direction;\n\n    // The position is set by the parent, but we need to complete it with a\n    // delta composed of the margin and left/top/right/bottom\n    node.layout[leading[mainAxis]] += getLeadingMargin(node, mainAxis) +\n      getRelativePosition(node, mainAxis);\n    node.layout[trailing[mainAxis]] += getTrailingMargin(node, mainAxis) +\n      getRelativePosition(node, mainAxis);\n    node.layout[leading[crossAxis]] += getLeadingMargin(node, crossAxis) +\n      getRelativePosition(node, crossAxis);\n    node.layout[trailing[crossAxis]] += getTrailingMargin(node, crossAxis) +\n      getRelativePosition(node, crossAxis);\n\n    // Inline immutable values from the target node to avoid excessive method\n    // invocations during the layout calculation.\n    var/*int*/ childCount = node.children.length;\n    var/*float*/ paddingAndBorderAxisResolvedRow = getPaddingAndBorderAxis(node, resolvedRowAxis);\n\n    if (isMeasureDefined(node)) {\n      var/*bool*/ isResolvedRowDimDefined = !isUndefined(node.layout[dim[resolvedRowAxis]]);\n\n      var/*float*/ width = CSS_UNDEFINED;\n      if (isDimDefined(node, resolvedRowAxis)) {\n        width = node.style.width;\n      } else if (isResolvedRowDimDefined) {\n        width = node.layout[dim[resolvedRowAxis]];\n      } else {\n        width = parentMaxWidth -\n          getMarginAxis(node, resolvedRowAxis);\n      }\n      width -= paddingAndBorderAxisResolvedRow;\n\n      // We only need to give a dimension for the text if we haven't got any\n      // for it computed yet. It can either be from the style attribute or because\n      // the element is flexible.\n      var/*bool*/ isRowUndefined = !isDimDefined(node, resolvedRowAxis) && !isResolvedRowDimDefined;\n      var/*bool*/ isColumnUndefined = !isDimDefined(node, CSS_FLEX_DIRECTION_COLUMN) &&\n        isUndefined(node.layout[dim[CSS_FLEX_DIRECTION_COLUMN]]);\n\n      // Let's not measure the text if we already know both dimensions\n      if (isRowUndefined || isColumnUndefined) {\n        var/*css_dim_t*/ measureDim = node.style.measure(\n          /*(c)!node->context,*/\n          /*(java)!layoutContext.measureOutput,*/\n          width\n        );\n        if (isRowUndefined) {\n          node.layout.width = measureDim.width +\n            paddingAndBorderAxisResolvedRow;\n        }\n        if (isColumnUndefined) {\n          node.layout.height = measureDim.height +\n            getPaddingAndBorderAxis(node, CSS_FLEX_DIRECTION_COLUMN);\n        }\n      }\n      if (childCount === 0) {\n        return;\n      }\n    }\n\n    var/*bool*/ isNodeFlexWrap = isFlexWrap(node);\n\n    var/*css_justify_t*/ justifyContent = getJustifyContent(node);\n\n    var/*float*/ leadingPaddingAndBorderMain = getLeadingPaddingAndBorder(node, mainAxis);\n    var/*float*/ leadingPaddingAndBorderCross = getLeadingPaddingAndBorder(node, crossAxis);\n    var/*float*/ paddingAndBorderAxisMain = getPaddingAndBorderAxis(node, mainAxis);\n    var/*float*/ paddingAndBorderAxisCross = getPaddingAndBorderAxis(node, crossAxis);\n\n    var/*bool*/ isMainDimDefined = !isUndefined(node.layout[dim[mainAxis]]);\n    var/*bool*/ isCrossDimDefined = !isUndefined(node.layout[dim[crossAxis]]);\n    var/*bool*/ isMainRowDirection = isRowDirection(mainAxis);\n\n    var/*int*/ i;\n    var/*int*/ ii;\n    var/*css_node_t**/ child;\n    var/*(c)!css_flex_direction_t*//*(java)!int*/ axis;\n\n    var/*css_node_t**/ firstAbsoluteChild = null;\n    var/*css_node_t**/ currentAbsoluteChild = null;\n\n    var/*float*/ definedMainDim = CSS_UNDEFINED;\n    if (isMainDimDefined) {\n      definedMainDim = node.layout[dim[mainAxis]] - paddingAndBorderAxisMain;\n    }\n\n    // We want to execute the next two loops one per line with flex-wrap\n    var/*int*/ startLine = 0;\n    var/*int*/ endLine = 0;\n    // var/*int*/ nextOffset = 0;\n    var/*int*/ alreadyComputedNextLayout = 0;\n    // We aggregate the total dimensions of the container in those two variables\n    var/*float*/ linesCrossDim = 0;\n    var/*float*/ linesMainDim = 0;\n    var/*int*/ linesCount = 0;\n    while (endLine < childCount) {\n      // <Loop A> Layout non flexible children and count children by type\n\n      // mainContentDim is accumulation of the dimensions and margin of all the\n      // non flexible children. This will be used in order to either set the\n      // dimensions of the node if none already exist, or to compute the\n      // remaining space left for the flexible children.\n      var/*float*/ mainContentDim = 0;\n\n      // There are three kind of children, non flexible, flexible and absolute.\n      // We need to know how many there are in order to distribute the space.\n      var/*int*/ flexibleChildrenCount = 0;\n      var/*float*/ totalFlexible = 0;\n      var/*int*/ nonFlexibleChildrenCount = 0;\n\n      // Use the line loop to position children in the main axis for as long\n      // as they are using a simple stacking behaviour. Children that are\n      // immediately stacked in the initial loop will not be touched again\n      // in <Loop C>.\n      var/*bool*/ isSimpleStackMain =\n          (isMainDimDefined && justifyContent == CSS_JUSTIFY_FLEX_START) ||\n          (!isMainDimDefined && justifyContent != CSS_JUSTIFY_CENTER);\n      var/*int*/ firstComplexMain = (isSimpleStackMain ? childCount : startLine);\n\n      // Use the initial line loop to position children in the cross axis for\n      // as long as they are relatively positioned with alignment STRETCH or\n      // FLEX_START. Children that are immediately stacked in the initial loop\n      // will not be touched again in <Loop D>.\n      var/*bool*/ isSimpleStackCross = true;\n      var/*int*/ firstComplexCross = childCount;\n\n      var/*css_node_t**/ firstFlexChild = null;\n      var/*css_node_t**/ currentFlexChild = null;\n\n      var/*float*/ mainDim = leadingPaddingAndBorderMain;\n      var/*float*/ crossDim = 0;\n\n      var/*float*/ maxWidth;\n      for (i = startLine; i < childCount; ++i) {\n        child = node.children[i];\n        child.lineIndex = linesCount;\n\n        child.nextAbsoluteChild = null;\n        child.nextFlexChild = null;\n\n        var/*css_align_t*/ alignItem = getAlignItem(node, child);\n\n        // Pre-fill cross axis dimensions when the child is using stretch before\n        // we call the recursive layout pass\n        if (alignItem === CSS_ALIGN_STRETCH &&\n            getPositionType(child) === CSS_POSITION_RELATIVE &&\n            isCrossDimDefined &&\n            !isDimDefined(child, crossAxis)) {\n          child.layout[dim[crossAxis]] = fmaxf(\n            boundAxis(child, crossAxis, node.layout[dim[crossAxis]] -\n              paddingAndBorderAxisCross - getMarginAxis(child, crossAxis)),\n            // You never want to go smaller than padding\n            getPaddingAndBorderAxis(child, crossAxis)\n          );\n        } else if (getPositionType(child) === CSS_POSITION_ABSOLUTE) {\n          // Store a private linked list of absolutely positioned children\n          // so that we can efficiently traverse them later.\n          if (firstAbsoluteChild === null) {\n            firstAbsoluteChild = child;\n          }\n          if (currentAbsoluteChild !== null) {\n            currentAbsoluteChild.nextAbsoluteChild = child;\n          }\n          currentAbsoluteChild = child;\n\n          // Pre-fill dimensions when using absolute position and both offsets for the axis are defined (either both\n          // left and right or top and bottom).\n          for (ii = 0; ii < 2; ii++) {\n            axis = (ii !== 0) ? CSS_FLEX_DIRECTION_ROW : CSS_FLEX_DIRECTION_COLUMN;\n            if (!isUndefined(node.layout[dim[axis]]) &&\n                !isDimDefined(child, axis) &&\n                isPosDefined(child, leading[axis]) &&\n                isPosDefined(child, trailing[axis])) {\n              child.layout[dim[axis]] = fmaxf(\n                boundAxis(child, axis, node.layout[dim[axis]] -\n                  getPaddingAndBorderAxis(node, axis) -\n                  getMarginAxis(child, axis) -\n                  getPosition(child, leading[axis]) -\n                  getPosition(child, trailing[axis])),\n                // You never want to go smaller than padding\n                getPaddingAndBorderAxis(child, axis)\n              );\n            }\n          }\n        }\n\n        var/*float*/ nextContentDim = 0;\n\n        // It only makes sense to consider a child flexible if we have a computed\n        // dimension for the node.\n        if (isMainDimDefined && isFlex(child)) {\n          flexibleChildrenCount++;\n          totalFlexible += child.style.flex;\n\n          // Store a private linked list of flexible children so that we can\n          // efficiently traverse them later.\n          if (firstFlexChild === null) {\n            firstFlexChild = child;\n          }\n          if (currentFlexChild !== null) {\n            currentFlexChild.nextFlexChild = child;\n          }\n          currentFlexChild = child;\n\n          // Even if we don't know its exact size yet, we already know the padding,\n          // border and margin. We'll use this partial information, which represents\n          // the smallest possible size for the child, to compute the remaining\n          // available space.\n          nextContentDim = getPaddingAndBorderAxis(child, mainAxis) +\n            getMarginAxis(child, mainAxis);\n\n        } else {\n          maxWidth = CSS_UNDEFINED;\n          if (!isMainRowDirection) {\n            if (isDimDefined(node, resolvedRowAxis)) {\n              maxWidth = node.layout[dim[resolvedRowAxis]] -\n                paddingAndBorderAxisResolvedRow;\n            } else {\n              maxWidth = parentMaxWidth -\n                getMarginAxis(node, resolvedRowAxis) -\n                paddingAndBorderAxisResolvedRow;\n            }\n          }\n\n          // This is the main recursive call. We layout non flexible children.\n          if (alreadyComputedNextLayout === 0) {\n            layoutNode(/*(java)!layoutContext, */child, maxWidth, direction);\n          }\n\n          // Absolute positioned elements do not take part of the layout, so we\n          // don't use them to compute mainContentDim\n          if (getPositionType(child) === CSS_POSITION_RELATIVE) {\n            nonFlexibleChildrenCount++;\n            // At this point we know the final size and margin of the element.\n            nextContentDim = getDimWithMargin(child, mainAxis);\n          }\n        }\n\n        // The element we are about to add would make us go to the next line\n        if (isNodeFlexWrap &&\n            isMainDimDefined &&\n            mainContentDim + nextContentDim > definedMainDim &&\n            // If there's only one element, then it's bigger than the content\n            // and needs its own line\n            i !== startLine) {\n          nonFlexibleChildrenCount--;\n          alreadyComputedNextLayout = 1;\n          break;\n        }\n\n        // Disable simple stacking in the main axis for the current line as\n        // we found a non-trivial child. The remaining children will be laid out\n        // in <Loop C>.\n        if (isSimpleStackMain &&\n            (getPositionType(child) != CSS_POSITION_RELATIVE || isFlex(child))) {\n          isSimpleStackMain = false;\n          firstComplexMain = i;\n        }\n\n        // Disable simple stacking in the cross axis for the current line as\n        // we found a non-trivial child. The remaining children will be laid out\n        // in <Loop D>.\n        if (isSimpleStackCross &&\n            (getPositionType(child) != CSS_POSITION_RELATIVE ||\n                (alignItem !== CSS_ALIGN_STRETCH && alignItem != CSS_ALIGN_FLEX_START) ||\n                isUndefined(child.layout[dim[crossAxis]]))) {\n          isSimpleStackCross = false;\n          firstComplexCross = i;\n        }\n\n        if (isSimpleStackMain) {\n          child.layout[pos[mainAxis]] += mainDim;\n          if (isMainDimDefined) {\n            setTrailingPosition(node, child, mainAxis);\n          }\n\n          mainDim += getDimWithMargin(child, mainAxis);\n          crossDim = fmaxf(crossDim, boundAxis(child, crossAxis, getDimWithMargin(child, crossAxis)));\n        }\n\n        if (isSimpleStackCross) {\n          child.layout[pos[crossAxis]] += linesCrossDim + leadingPaddingAndBorderCross;\n          if (isCrossDimDefined) {\n            setTrailingPosition(node, child, crossAxis);\n          }\n        }\n\n        alreadyComputedNextLayout = 0;\n        mainContentDim += nextContentDim;\n        endLine = i + 1;\n      }\n\n      // <Loop B> Layout flexible children and allocate empty space\n\n      // In order to position the elements in the main axis, we have two\n      // controls. The space between the beginning and the first element\n      // and the space between each two elements.\n      var/*float*/ leadingMainDim = 0;\n      var/*float*/ betweenMainDim = 0;\n\n      // The remaining available space that needs to be allocated\n      var/*float*/ remainingMainDim = 0;\n      if (isMainDimDefined) {\n        remainingMainDim = definedMainDim - mainContentDim;\n      } else {\n        remainingMainDim = fmaxf(mainContentDim, 0) - mainContentDim;\n      }\n\n      // If there are flexible children in the mix, they are going to fill the\n      // remaining space\n      if (flexibleChildrenCount !== 0) {\n        var/*float*/ flexibleMainDim = remainingMainDim / totalFlexible;\n        var/*float*/ baseMainDim;\n        var/*float*/ boundMainDim;\n\n        // If the flex share of remaining space doesn't meet min/max bounds,\n        // remove this child from flex calculations.\n        currentFlexChild = firstFlexChild;\n        while (currentFlexChild !== null) {\n          baseMainDim = flexibleMainDim * currentFlexChild.style.flex +\n              getPaddingAndBorderAxis(currentFlexChild, mainAxis);\n          boundMainDim = boundAxis(currentFlexChild, mainAxis, baseMainDim);\n\n          if (baseMainDim !== boundMainDim) {\n            remainingMainDim -= boundMainDim;\n            totalFlexible -= currentFlexChild.style.flex;\n          }\n\n          currentFlexChild = currentFlexChild.nextFlexChild;\n        }\n        flexibleMainDim = remainingMainDim / totalFlexible;\n\n        // The non flexible children can overflow the container, in this case\n        // we should just assume that there is no space available.\n        if (flexibleMainDim < 0) {\n          flexibleMainDim = 0;\n        }\n\n        currentFlexChild = firstFlexChild;\n        while (currentFlexChild !== null) {\n          // At this point we know the final size of the element in the main\n          // dimension\n          currentFlexChild.layout[dim[mainAxis]] = boundAxis(currentFlexChild, mainAxis,\n            flexibleMainDim * currentFlexChild.style.flex +\n                getPaddingAndBorderAxis(currentFlexChild, mainAxis)\n          );\n\n          maxWidth = CSS_UNDEFINED;\n          if (isDimDefined(node, resolvedRowAxis)) {\n            maxWidth = node.layout[dim[resolvedRowAxis]] -\n              paddingAndBorderAxisResolvedRow;\n          } else if (!isMainRowDirection) {\n            maxWidth = parentMaxWidth -\n              getMarginAxis(node, resolvedRowAxis) -\n              paddingAndBorderAxisResolvedRow;\n          }\n\n          // And we recursively call the layout algorithm for this child\n          layoutNode(/*(java)!layoutContext, */currentFlexChild, maxWidth, direction);\n\n          child = currentFlexChild;\n          currentFlexChild = currentFlexChild.nextFlexChild;\n          child.nextFlexChild = null;\n        }\n\n      // We use justifyContent to figure out how to allocate the remaining\n      // space available\n      } else if (justifyContent !== CSS_JUSTIFY_FLEX_START) {\n        if (justifyContent === CSS_JUSTIFY_CENTER) {\n          leadingMainDim = remainingMainDim / 2;\n        } else if (justifyContent === CSS_JUSTIFY_FLEX_END) {\n          leadingMainDim = remainingMainDim;\n        } else if (justifyContent === CSS_JUSTIFY_SPACE_BETWEEN) {\n          remainingMainDim = fmaxf(remainingMainDim, 0);\n          if (flexibleChildrenCount + nonFlexibleChildrenCount - 1 !== 0) {\n            betweenMainDim = remainingMainDim /\n              (flexibleChildrenCount + nonFlexibleChildrenCount - 1);\n          } else {\n            betweenMainDim = 0;\n          }\n        } else if (justifyContent === CSS_JUSTIFY_SPACE_AROUND) {\n          // Space on the edges is half of the space between elements\n          betweenMainDim = remainingMainDim /\n            (flexibleChildrenCount + nonFlexibleChildrenCount);\n          leadingMainDim = betweenMainDim / 2;\n        }\n      }\n\n      // <Loop C> Position elements in the main axis and compute dimensions\n\n      // At this point, all the children have their dimensions set. We need to\n      // find their position. In order to do that, we accumulate data in\n      // variables that are also useful to compute the total dimensions of the\n      // container!\n      mainDim += leadingMainDim;\n\n      for (i = firstComplexMain; i < endLine; ++i) {\n        child = node.children[i];\n\n        if (getPositionType(child) === CSS_POSITION_ABSOLUTE &&\n            isPosDefined(child, leading[mainAxis])) {\n          // In case the child is position absolute and has left/top being\n          // defined, we override the position to whatever the user said\n          // (and margin/border).\n          child.layout[pos[mainAxis]] = getPosition(child, leading[mainAxis]) +\n            getLeadingBorder(node, mainAxis) +\n            getLeadingMargin(child, mainAxis);\n        } else {\n          // If the child is position absolute (without top/left) or relative,\n          // we put it at the current accumulated offset.\n          child.layout[pos[mainAxis]] += mainDim;\n\n          // Define the trailing position accordingly.\n          if (isMainDimDefined) {\n            setTrailingPosition(node, child, mainAxis);\n          }\n\n          // Now that we placed the element, we need to update the variables\n          // We only need to do that for relative elements. Absolute elements\n          // do not take part in that phase.\n          if (getPositionType(child) === CSS_POSITION_RELATIVE) {\n            // The main dimension is the sum of all the elements dimension plus\n            // the spacing.\n            mainDim += betweenMainDim + getDimWithMargin(child, mainAxis);\n            // The cross dimension is the max of the elements dimension since there\n            // can only be one element in that cross dimension.\n            crossDim = fmaxf(crossDim, boundAxis(child, crossAxis, getDimWithMargin(child, crossAxis)));\n          }\n        }\n      }\n\n      var/*float*/ containerCrossAxis = node.layout[dim[crossAxis]];\n      if (!isCrossDimDefined) {\n        containerCrossAxis = fmaxf(\n          // For the cross dim, we add both sides at the end because the value\n          // is aggregate via a max function. Intermediate negative values\n          // can mess this computation otherwise\n          boundAxis(node, crossAxis, crossDim + paddingAndBorderAxisCross),\n          paddingAndBorderAxisCross\n        );\n      }\n\n      // <Loop D> Position elements in the cross axis\n      for (i = firstComplexCross; i < endLine; ++i) {\n        child = node.children[i];\n\n        if (getPositionType(child) === CSS_POSITION_ABSOLUTE &&\n            isPosDefined(child, leading[crossAxis])) {\n          // In case the child is absolutely positionned and has a\n          // top/left/bottom/right being set, we override all the previously\n          // computed positions to set it correctly.\n          child.layout[pos[crossAxis]] = getPosition(child, leading[crossAxis]) +\n            getLeadingBorder(node, crossAxis) +\n            getLeadingMargin(child, crossAxis);\n\n        } else {\n          var/*float*/ leadingCrossDim = leadingPaddingAndBorderCross;\n\n          // For a relative children, we're either using alignItems (parent) or\n          // alignSelf (child) in order to determine the position in the cross axis\n          if (getPositionType(child) === CSS_POSITION_RELATIVE) {\n            var/*css_align_t*/ alignItem = getAlignItem(node, child);\n            if (alignItem === CSS_ALIGN_STRETCH) {\n              // You can only stretch if the dimension has not already been set\n              // previously.\n              if (isUndefined(child.layout[dim[crossAxis]])) {\n                child.layout[dim[crossAxis]] = fmaxf(\n                  boundAxis(child, crossAxis, containerCrossAxis -\n                    paddingAndBorderAxisCross - getMarginAxis(child, crossAxis)),\n                  // You never want to go smaller than padding\n                  getPaddingAndBorderAxis(child, crossAxis)\n                );\n              }\n            } else if (alignItem !== CSS_ALIGN_FLEX_START) {\n              // The remaining space between the parent dimensions+padding and child\n              // dimensions+margin.\n              var/*float*/ remainingCrossDim = containerCrossAxis -\n                paddingAndBorderAxisCross - getDimWithMargin(child, crossAxis);\n\n              if (alignItem === CSS_ALIGN_CENTER) {\n                leadingCrossDim += remainingCrossDim / 2;\n              } else { // CSS_ALIGN_FLEX_END\n                leadingCrossDim += remainingCrossDim;\n              }\n            }\n          }\n\n          // And we apply the position\n          child.layout[pos[crossAxis]] += linesCrossDim + leadingCrossDim;\n\n          // Define the trailing position accordingly.\n          if (isCrossDimDefined) {\n            setTrailingPosition(node, child, crossAxis);\n          }\n        }\n      }\n\n      linesCrossDim += crossDim;\n      linesMainDim = fmaxf(linesMainDim, mainDim);\n      linesCount += 1;\n      startLine = endLine;\n    }\n\n    // <Loop E>\n    //\n    // Note(prenaux): More than one line, we need to layout the crossAxis\n    // according to alignContent.\n    //\n    // Note that we could probably remove <Loop D> and handle the one line case\n    // here too, but for the moment this is safer since it won't interfere with\n    // previously working code.\n    //\n    // See specs:\n    // http://www.w3.org/TR/2012/CR-css3-flexbox-20120918/#layout-algorithm\n    // section 9.4\n    //\n    if (linesCount > 1 && isCrossDimDefined) {\n      var/*float*/ nodeCrossAxisInnerSize = node.layout[dim[crossAxis]] -\n          paddingAndBorderAxisCross;\n      var/*float*/ remainingAlignContentDim = nodeCrossAxisInnerSize - linesCrossDim;\n\n      var/*float*/ crossDimLead = 0;\n      var/*float*/ currentLead = leadingPaddingAndBorderCross;\n\n      var/*css_align_t*/ alignContent = getAlignContent(node);\n      if (alignContent === CSS_ALIGN_FLEX_END) {\n        currentLead += remainingAlignContentDim;\n      } else if (alignContent === CSS_ALIGN_CENTER) {\n        currentLead += remainingAlignContentDim / 2;\n      } else if (alignContent === CSS_ALIGN_STRETCH) {\n        if (nodeCrossAxisInnerSize > linesCrossDim) {\n          crossDimLead = (remainingAlignContentDim / linesCount);\n        }\n      }\n\n      var/*int*/ endIndex = 0;\n      for (i = 0; i < linesCount; ++i) {\n        var/*int*/ startIndex = endIndex;\n\n        // compute the line's height and find the endIndex\n        var/*float*/ lineHeight = 0;\n        for (ii = startIndex; ii < childCount; ++ii) {\n          child = node.children[ii];\n          if (getPositionType(child) !== CSS_POSITION_RELATIVE) {\n            continue;\n          }\n          if (child.lineIndex !== i) {\n            break;\n          }\n          if (!isUndefined(child.layout[dim[crossAxis]])) {\n            lineHeight = fmaxf(\n              lineHeight,\n              child.layout[dim[crossAxis]] + getMarginAxis(child, crossAxis)\n            );\n          }\n        }\n        endIndex = ii;\n        lineHeight += crossDimLead;\n\n        for (ii = startIndex; ii < endIndex; ++ii) {\n          child = node.children[ii];\n          if (getPositionType(child) !== CSS_POSITION_RELATIVE) {\n            continue;\n          }\n\n          var/*css_align_t*/ alignContentAlignItem = getAlignItem(node, child);\n          if (alignContentAlignItem === CSS_ALIGN_FLEX_START) {\n            child.layout[pos[crossAxis]] = currentLead + getLeadingMargin(child, crossAxis);\n          } else if (alignContentAlignItem === CSS_ALIGN_FLEX_END) {\n            child.layout[pos[crossAxis]] = currentLead + lineHeight - getTrailingMargin(child, crossAxis) - child.layout[dim[crossAxis]];\n          } else if (alignContentAlignItem === CSS_ALIGN_CENTER) {\n            var/*float*/ childHeight = child.layout[dim[crossAxis]];\n            child.layout[pos[crossAxis]] = currentLead + (lineHeight - childHeight) / 2;\n          } else if (alignContentAlignItem === CSS_ALIGN_STRETCH) {\n            child.layout[pos[crossAxis]] = currentLead + getLeadingMargin(child, crossAxis);\n            // TODO(prenaux): Correctly set the height of items with undefined\n            //                (auto) crossAxis dimension.\n          }\n        }\n\n        currentLead += lineHeight;\n      }\n    }\n\n    var/*bool*/ needsMainTrailingPos = false;\n    var/*bool*/ needsCrossTrailingPos = false;\n\n    // If the user didn't specify a width or height, and it has not been set\n    // by the container, then we set it via the children.\n    if (!isMainDimDefined) {\n      node.layout[dim[mainAxis]] = fmaxf(\n        // We're missing the last padding at this point to get the final\n        // dimension\n        boundAxis(node, mainAxis, linesMainDim + getTrailingPaddingAndBorder(node, mainAxis)),\n        // We can never assign a width smaller than the padding and borders\n        paddingAndBorderAxisMain\n      );\n\n      if (mainAxis == CSS_FLEX_DIRECTION_ROW_REVERSE ||\n          mainAxis == CSS_FLEX_DIRECTION_COLUMN_REVERSE) {\n        needsMainTrailingPos = true;\n      }\n    }\n\n    if (!isCrossDimDefined) {\n      node.layout[dim[crossAxis]] = fmaxf(\n        // For the cross dim, we add both sides at the end because the value\n        // is aggregate via a max function. Intermediate negative values\n        // can mess this computation otherwise\n        boundAxis(node, crossAxis, linesCrossDim + paddingAndBorderAxisCross),\n        paddingAndBorderAxisCross\n      );\n\n      if (crossAxis == CSS_FLEX_DIRECTION_ROW_REVERSE ||\n          crossAxis == CSS_FLEX_DIRECTION_COLUMN_REVERSE) {\n        needsCrossTrailingPos = true;\n      }\n    }\n\n    // <Loop F> Set trailing position if necessary\n    if (needsMainTrailingPos || needsCrossTrailingPos) {\n      for (i = 0; i < childCount; ++i) {\n        child = node.children[i];\n\n        if (needsMainTrailingPos) {\n          setTrailingPosition(node, child, mainAxis);\n        }\n\n        if (needsCrossTrailingPos) {\n          setTrailingPosition(node, child, crossAxis);\n        }\n      }\n    }\n\n    // <Loop G> Calculate dimensions for absolutely positioned elements\n    currentAbsoluteChild = firstAbsoluteChild;\n    while (currentAbsoluteChild !== null) {\n      // Pre-fill dimensions when using absolute position and both offsets for\n      // the axis are defined (either both left and right or top and bottom).\n      for (ii = 0; ii < 2; ii++) {\n        axis = (ii !== 0) ? CSS_FLEX_DIRECTION_ROW : CSS_FLEX_DIRECTION_COLUMN;\n\n        if (!isUndefined(node.layout[dim[axis]]) &&\n            !isDimDefined(currentAbsoluteChild, axis) &&\n            isPosDefined(currentAbsoluteChild, leading[axis]) &&\n            isPosDefined(currentAbsoluteChild, trailing[axis])) {\n          currentAbsoluteChild.layout[dim[axis]] = fmaxf(\n            boundAxis(currentAbsoluteChild, axis, node.layout[dim[axis]] -\n              getBorderAxis(node, axis) -\n              getMarginAxis(currentAbsoluteChild, axis) -\n              getPosition(currentAbsoluteChild, leading[axis]) -\n              getPosition(currentAbsoluteChild, trailing[axis])\n            ),\n            // You never want to go smaller than padding\n            getPaddingAndBorderAxis(currentAbsoluteChild, axis)\n          );\n        }\n\n        if (isPosDefined(currentAbsoluteChild, trailing[axis]) &&\n            !isPosDefined(currentAbsoluteChild, leading[axis])) {\n          currentAbsoluteChild.layout[leading[axis]] =\n            node.layout[dim[axis]] -\n            currentAbsoluteChild.layout[dim[axis]] -\n            getPosition(currentAbsoluteChild, trailing[axis]);\n        }\n      }\n\n      child = currentAbsoluteChild;\n      currentAbsoluteChild = currentAbsoluteChild.nextAbsoluteChild;\n      child.nextAbsoluteChild = null;\n    }\n  }\n\n  return {\n    computeLayout: layoutNode,\n    fillNodes: fillNodes\n  };\n})();\n\n// This module export is only used for the purposes of unit testing this file. When\n// the library is packaged this file is included within css-layout.js which forms\n// the public API.\nif (typeof exports === 'object') {\n  module.exports = computeLayout;\n}\n\n\n    return function(node) {\n      computeLayout.fillNodes(node);\n      computeLayout.computeLayout(node);\n  };\n}));\n"]}