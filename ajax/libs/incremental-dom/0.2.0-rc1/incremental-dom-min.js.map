{"version":3,"sources":["incremental-dom-min.js","src/node_data.js","src/tree_walker.js","src/walker.js","src/namespace.js","src/traversal.js","src/attributes.js","src/nodes.js","src/alignment.js","src/patch.js","src/virtual_elements.js"],"names":["global","factory","exports","module","define","amd","IncrementalDOM","this","NodeData","nodeName","key","attrs","attrsArr","newAttrs","keyMap","lastVisitedChild","text","TreeWalker","node","stack_","currentNode","doc","ownerDocument","nsStack_","undefined","walker_","getWalker","setWalker","walker","initData","data","getData","toLowerCase","Element","getAttribute","SVG_NS","enterTag","tag","enterNamespace","exitTag","exitNamespace","getNamespaceForTag","getCurrentNamespace","enterNode","exitNode","markVisited","parent","getCurrentParent","firstChild","nextSibling","parentNode","prototype","length","namespace","push","pop","attributes","applyAttr","el","name","value","type","removeAttribute","setAttribute","applyStyle","style","cssText","prop","updateAttribute","createElement","statics","createElementNS","i","createNode","createTextNode","createKeyMap","map","children","count","child","getKeyMap","getChild","registerChild","matches","alignWithDOM","matchingNode","existingNode","insertBefore","clearUnvisitedDOM","lastChild","removeChild","patch","fn","prevWalker","ATTRIBUTES_OFFSET","argsBuilder","elementOpen","var_args","attrsChanged","j","arguments","attr","elementOpenStart","elementOpenEnd","apply","elementClose","elementVoid","formatted"],"mappings":"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","file":"incremental-dom-min.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  factory((global.IncrementalDOM = {}))\n}(this, function (exports) { 'use strict';\n\n  /**\n   * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *      http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS-IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  /**\n   * @type {TreeWalker}\n   */\n  var walker_;\n\n\n  /**\n   * @return {TreeWalker} the current TreeWalker\n   */\n  var getWalker = function() {\n    return walker_;\n  };\n\n\n  /**\n   * Sets the current TreeWalker\n   * @param {TreeWalker} walker\n   */\n  var setWalker = function(walker) {\n    walker_ = walker;\n  };\n\n\n  /** */\n\n  /**\n   * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *      http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS-IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n\n  /**\n   * Keeps track of information needed to perform diffs for a given DOM node.\n   * @param {?string} nodeName\n   * @param {?string} key\n   * @constructor\n   */\n  function NodeData(nodeName, key) {\n    /**\n     * The attributes and their values.\n     * @const\n     */\n    this.attrs = {};\n\n    /**\n     * An array of attribute name/value pairs, used for quickly diffing the\n     * incomming attributes to see if the DOM node's attributes need to be\n     * updated.\n     * @const {Array<*>}\n     */\n    this.attrsArr = [];\n\n    /**\n     * The incoming attributes for this Node, before they are updated.\n     * @const {!Object<string, *>}\n     */\n    this.newAttrs = {};\n\n    /**\n     * The key used to identify this node, used to preserve DOM nodes when they\n     * move within their parent.\n     * @const\n     */\n    this.key = key;\n\n    /**\n     * Keeps track of children within this node by their key.\n     * {?Object<string, Node>}\n     */\n    this.keyMap = null;\n\n    /**\n     * The last child to have been visited within the current pass.\n     * {?Node}\n     */\n    this.lastVisitedChild = null;\n\n    /**\n     * The node name for this node.\n     * @const\n     */\n    this.nodeName = nodeName;\n\n    /**\n     * @const {string}\n     */\n    this.text = null;\n  }\n\n\n  /**\n   * Initializes a NodeData object for a Node.\n   *\n   * @param {!Node} node The node to initialize data for.\n   * @param {string} nodeName The node name of node.\n   * @param {?string} key The key that identifies the node.\n   * @return {!NodeData} The newly initialized data object\n   */\n  var initData = function(node, nodeName, key) {\n    var data = new NodeData(nodeName, key);\n    node['__incrementalDOMData'] = data;\n    return data;\n  };\n\n\n  /**\n   * Retrieves the NodeData object for a Node, creating it if necessary.\n   *\n   * @param {!Node} node The node to retrieve the data for.\n   * @return {NodeData} The NodeData for this Node.\n   */\n  var getData = function(node) {\n    var data = node['__incrementalDOMData'];\n\n    if (!data) {\n      var nodeName = node.nodeName.toLowerCase();\n      var key = null;\n\n      if (node instanceof Element) {\n        key = node.getAttribute('key');\n      }\n\n      data = initData(node, nodeName, key);\n    }\n\n    return data;\n  };\n\n\n  /** */\n\n  /**\n   * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *      http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS-IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  var SVG_NS = 'http://www.w3.org/2000/svg';\n\n  /**\n   * Enters a tag, checking to see if it is a namespace boundary, and if so,\n   * updates the current namespace.\n   * @param {string} tag The tag to enter.\n   */\n  var enterTag = function(tag) {\n    if (tag === 'svg') {\n      getWalker().enterNamespace(SVG_NS);\n    } else if (tag === 'foreignObject') {\n      getWalker().enterNamespace(undefined);\n    }\n  };\n\n\n  /**\n   * Exits a tag, checking to see if it is a namespace boundary, and if so,\n   * updates the current namespace.\n   * @param {string} tag The tag to enter.\n   */\n  var exitTag = function(tag) {\n    if (tag === 'svg' || tag === 'foreignObject') {\n      getWalker().exitNamespace();\n    }\n  };\n\n\n  /**\n   * Gets the namespace to create an element (of a given tag) in.\n   * @param {string} tag The tag to get the namespace for.\n   * @return {string} The namespace to create the tag in.\n   */\n  var getNamespaceForTag = function(tag) {\n    if (tag === 'svg') {\n      return SVG_NS;\n    }\n\n    return getWalker().getCurrentNamespace();\n  };\n\n\n  /** */\n\n  /**\n   * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *      http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS-IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  var traversal__dummy;\n\n\n  /**\n   * Enters an Element, setting the current namespace for nested elements.\n   * @param {!Element} node\n   */\n  var enterNode = function(node) {\n    var data = getData(node);\n    enterTag(data.nodeName);\n  };\n\n\n  /**\n   * Exits an Element, unwinding the current namespace to the previous value.\n   * @param {!Element} node\n   */\n  var exitNode = function(node) {\n    var data = getData(node);\n    exitTag(data.nodeName);\n  };\n\n\n  /**\n   * Marks node's parent as having visited node.\n   * @param {!Node} node\n   */\n  var markVisited = function(node) {\n    var walker = getWalker();\n    var parent = walker.getCurrentParent();\n    var data = getData(parent);\n    data.lastVisitedChild = node;\n  };\n\n\n  /**\n   * Changes to the first child of the current node.\n   */\n  var firstChild = function() {\n    var walker = getWalker();\n    enterNode(walker.currentNode);\n    walker.firstChild();\n  };\n\n\n  /**\n   * Changes to the next sibling of the current node.\n   */\n  var nextSibling = function() {\n    var walker = getWalker();\n    markVisited(walker.currentNode);\n    walker.nextSibling();\n  };\n\n\n  /**\n   * Changes to the parent of the current node, removing any unvisited children.\n   */\n  var parentNode = function() {\n    var walker = getWalker();\n    walker.parentNode();\n    exitNode(walker.currentNode);\n  };\n\n\n  /** */\n\n  /**\n   * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *      http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS-IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  /**\n   * Similar to the built-in Treewalker class, but simplified and allows direct\n   * access to modify the currentNode property.\n   * @param {!Node} node The root Node of the subtree the walker should start\n   *     traversing.\n   * @constructor\n   */\n  function TreeWalker(node) {\n    /**\n     * Keeps track of the current parent node. This is necessary as the traversal\n     * methods may traverse past the last child and we still need a way to get\n     * back to the parent.\n     * @const @private {!Array<!Node>}\n     */\n    this.stack_ = [];\n\n    /** {?Node} */\n    this.currentNode = node;\n\n    /** {!Document} */\n    this.doc = node.ownerDocument;\n\n    /**\n     * Keeps track of what namespace to create new Elements in.\n     * @const @private {!Array<string>}\n     */\n    this.nsStack_ = [undefined];\n  }\n\n\n  /**\n   * @return {!Node} The current parent of the current location in the subtree.\n   */\n  TreeWalker.prototype.getCurrentParent = function() {\n    return this.stack_[this.stack_.length - 1];\n  };\n\n\n  /**\n   * @return {string} The current namespace to create Elements in.\n   */\n  TreeWalker.prototype.getCurrentNamespace = function() {\n    return this.nsStack_[this.nsStack_.length - 1];\n  };\n\n\n  /**\n   * @param {string} namespace The namespace to enter.\n   */\n  TreeWalker.prototype.enterNamespace = function(namespace) {\n    this.nsStack_.push(namespace);\n  };\n\n\n  /**\n   * Exits the current namespace\n   */\n  TreeWalker.prototype.exitNamespace = function() {\n    this.nsStack_.pop();\n  };\n\n\n  /**\n   * Changes the current location the firstChild of the current location.\n   */\n  TreeWalker.prototype.firstChild = function() {\n    this.stack_.push(this.currentNode);\n    this.currentNode = this.currentNode.firstChild;\n  };\n\n\n  /**\n   * Changes the current location the nextSibling of the current location.\n   */\n  TreeWalker.prototype.nextSibling = function() {\n    this.currentNode = this.currentNode.nextSibling;\n  };\n\n\n  /**\n   * Changes the current location the parentNode of the current location.\n   */\n  TreeWalker.prototype.parentNode = function() {\n    this.currentNode = this.stack_.pop();\n  };\n\n\n  /** */\n\n  /**\n   * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *      http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS-IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  var attributes = {\n    /**\n     * Applies an attribute or property to a given Element. If the value is a\n     * object or a function (which includes null), it is set as a property on the\n     * Element. Otherwise, the value is set as an attribute.\n     * @param {!Element} el\n     * @param {string} name The attribute's name.\n     * @param {*} value The attribute's value. If the value is a string, it is set\n     *     as an HTML attribute, otherwise, it is set on node.\n     */\n    applyAttr: function(el, name, value) {\n      var type = typeof value;\n\n      if (type === 'object' || type === 'function') {\n        el[name] = value;\n      } else if (value === undefined) {\n        el.removeAttribute(name);\n      } else {\n        el.setAttribute(name, value);\n      }\n    },\n\n\n    /**\n     * Applies a style to an Element. No vendor prefix expansion is done for\n     * property names/values.\n     * @param {!Element} el\n     * @param {string|Object<string,string>} style The style to set. Either a\n     *     string of css or an object containing property-value pairs.\n     */\n    applyStyle: function(el, style) {\n      if (typeof style === 'string') {\n        el.style.cssText = style;\n      } else {\n        el.style.cssText = '';\n\n        for (var prop in style) {\n          el.style[prop] = style[prop];\n        }\n      }\n    },\n\n\n    /**\n     * Updates a single attribute on an Element.\n     * @param {!Element} el\n     * @param {string} name The attribute's name.\n     * @param {*} value The attribute's value. If the value is a string, it is set\n     *     as an HTML attribute, otherwise, it is set on node.\n     */\n    updateAttribute: function(el, name, value) {\n      var data = getData(el);\n      var attrs = data.attrs;\n\n      if (attrs[name] === value) {\n        return;\n      }\n\n      if (name === 'style') {\n        attributes.applyStyle(el, value);\n      } else {\n        attributes.applyAttr(el, name, value);\n      }\n\n      attrs[name] = value;\n    }\n  };\n\n\n  /** */\n\n  exports.attributes = attributes;\n\n  /**\n   * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *      http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS-IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  var nodes__dummy;\n\n\n  /**\n   * Creates an Element.\n   * @param {!Document} doc The document with which to create the Element.\n   * @param {string} tag The tag for the Element.\n   * @param {?string} key A key to identify the Element.\n   * @param {?Array<*>} statics An array of attribute name/value pairs of\n   *     the static attributes for the Element.\n   * @return {!Element}\n   */\n  var createElement = function(doc, tag, key, statics) {\n    var namespace = getNamespaceForTag(tag);\n    var el;\n\n    if (namespace) {\n      el = doc.createElementNS(namespace, tag);\n    } else {\n      el = doc.createElement(tag);\n    }\n\n    initData(el, tag, key);\n\n    if (statics) {\n      for (var i = 0; i < statics.length; i += 2) {\n        attributes.updateAttribute(el, statics[i], statics[i + 1]);\n      }\n    }\n\n    return el;\n  };\n\n\n  /**\n   * Creates a Node, either a Text or an Element depending on the node name\n   * provided.\n   * @param {!Document} doc The document with which to create the Node.\n   * @param {string} nodeName The tag if creating an element or #text to create\n   *     a Text.\n   * @param {?string} key A key to identify the Element.\n   * @param {?Array<*>} statics The static data to initialize the Node\n   *     with. For an Element, an array of attribute name/value pairs of\n   *     the static attributes for the Element.\n   * @return {!Node}\n   */\n  var createNode = function(doc, nodeName, key, statics) {\n    if (nodeName === '#text') {\n      return doc.createTextNode('');\n    }\n\n    return createElement(doc, nodeName, key, statics);\n  };\n\n\n  /**\n   * Creates a mapping that can be used to look up children using a key.\n   * @param {!Element} el\n   * @return {!Object<string, !Node>} A mapping of keys to the children of the\n   *     Element.\n   */\n  var createKeyMap = function(el) {\n    var map = {};\n    var children = el.children;\n    var count = children.length;\n\n    for (var i = 0; i < count; i += 1) {\n      var child = children[i];\n      var key = getData(child).key;\n\n      if (key) {\n        map[key] = child;\n      }\n    }\n\n    return map;\n  };\n\n\n  /**\n   * Retrieves the mapping of key to child node for a given Element, creating it\n   * if necessary.\n   * @param {!Element} el\n   * @return {!Object<string,!Node>} A mapping of keys to child Nodes\n   */\n  var getKeyMap = function(el) {\n    var data = getData(el);\n\n    if (!data.keyMap) {\n      data.keyMap = createKeyMap(el);\n    }\n\n    return data.keyMap;\n  };\n\n\n  /**\n   * Retrieves a child from the parent with the given key.\n   * @param {!Element} parent\n   * @param {?string} key\n   * @return {?Node} The child corresponding to the key.\n   */\n  var getChild = function(parent, key) {\n    return getKeyMap(parent)[key];\n  };\n\n\n  /**\n   * Registers a node as being a child. The parent will keep track of the child\n   * using the key. The child can be retrieved using the same key using\n   * getKeyMap. The provided key should be unique within the parent Element.\n   * @param {!Element} parent The parent of child.\n   * @param {string} key A key to identify the child with.\n   * @param {!Node} child The child to register.\n   */\n  var registerChild = function(parent, key, child) {\n    getKeyMap(parent)[key] = child;\n  };\n\n\n  /** */\n\n  /**\n   * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *      http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS-IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  var alignment__dummy;\n\n\n  /**\n   * Checks whether or not a given node matches the specified nodeName and key.\n   *\n   * @param {!Node} node An HTML node, typically an HTMLElement or Text.\n   * @param {?string} nodeName The nodeName for this node.\n   * @param {?string} key An optional key that identifies a node.\n   * @return {boolean} True if the node matches, false otherwise.\n   */\n  var matches = function(node, nodeName, key) {\n    var data = getData(node);\n\n    // Key check is done using double equals as we want to treat a null key the\n    // same as undefined. This should be okay as the only values allowed are\n    // strings, null and undefined so the == semantics are not too weird.\n    return key == data.key &&\n           nodeName === data.nodeName;\n  };\n\n\n  /**\n   * Aligns the virtual Element definition with the actual DOM, moving the\n   * corresponding DOM node to the correct location or creating it if necessary.\n   * @param {?string} nodeName For an Element, this should be a valid tag string.\n   *     For a Text, this should be #text.\n   * @param {?string} key The key used to identify this element.\n   * @param {?Array<*>} statics For an Element, this should be an array of\n   *     name-value pairs.\n   * @return {!Node} The matching node.\n   */\n  var alignWithDOM = function(nodeName, key, statics) {\n    var walker = getWalker();\n    var currentNode = walker.currentNode;\n    var parent = walker.getCurrentParent();\n    var matchingNode;\n\n    // Check to see if we have a node to reuse\n    if (currentNode && matches(currentNode, nodeName, key)) {\n      matchingNode = currentNode;\n    } else {\n      var existingNode = key && getChild(parent, key);\n\n      // Check to see if the node has moved within the parent or if a new one\n      // should be created\n      if (existingNode && matches(existingNode, nodeName, key)) {\n        matchingNode = existingNode;\n      } else {\n        matchingNode = createNode(walker.doc, nodeName, key, statics);\n        if (key) {\n          registerChild(parent, key, matchingNode);\n        }\n      }\n\n      parent.insertBefore(matchingNode, currentNode);\n      walker.currentNode = matchingNode;\n    }\n\n    return matchingNode;\n  };\n\n\n  /**\n   * Clears out any unvisited Nodes, as the corresponding virtual element\n   * functions were never called for them.\n   * @param {!Element} node\n   */\n  var clearUnvisitedDOM = function(node) {\n    var data = getData(node);\n    var lastChild = node.lastChild;\n    var lastVisitedChild = data.lastVisitedChild;\n    data.lastVisitedChild = null;\n\n    if (lastChild === lastVisitedChild) {\n      return;\n    }\n\n    while (lastChild !== lastVisitedChild) {\n      node.removeChild(lastChild);\n      lastChild = node.lastChild;\n    }\n\n    // Invalidate the key map since we removed children. It will get recreated\n    // next time we need it.\n    data.keyMap = null;\n  };\n\n\n  /** */\n\n  /**\n   * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *      http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS-IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  var src_patch__dummy;\n\n\n  /**\n   * @const {boolean}\n   */\n  if (process.env.NODE_ENV !== 'production') {\n    var assertNoUnclosedTags = function(root) {\n      var openElement = getWalker().getCurrentParent();\n      if (!openElement) {\n        return;\n      }\n\n      var openTags = [];\n      while (openElement && openElement !== root) {\n        openTags.push(openElement.nodeName.toLowerCase());\n        openElement = openElement.parentNode;\n      }\n\n      throw new Error('One or more tags were not closed:\\n' +\n          openTags.join('\\n'));\n    };\n  }\n\n\n  /**\n   * Patches the document starting at el with the provided function. This function\n   * may be called during an existing patch operation.\n   * @param {!Element|!Document} node The Element or Document to patch.\n   * @param {!function} fn A function containing elementOpen/elementClose/etc.\n   *     calls that describe the DOM.\n   * @param {*} data An argument passed to fn to represent DOM state.\n   */\n  var patch = function(node, fn, data) {\n    var prevWalker = getWalker();\n    setWalker(new TreeWalker(node));\n\n    firstChild();\n    fn(data);\n    parentNode();\n    clearUnvisitedDOM(node);\n\n    if (process.env.NODE_ENV !== 'production') {\n      assertNoUnclosedTags(node);\n    }\n\n    setWalker(prevWalker);\n  };\n\n\n  /** */\n\n  exports.patch = patch;\n\n  /**\n   * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *      http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS-IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  var virtual_elements__dummy;\n\n\n  /**\n   * The offset in the virtual element declaration where the attributes are\n   * specified.\n   * @const\n   */\n  var ATTRIBUTES_OFFSET = 3;\n\n\n  /**\n   * Builds an array of arguments for use with elementOpenStart, attr and\n   * elementOpenEnd.\n   * @const {Array<*>}\n   */\n  var argsBuilder = [];\n\n\n  if (process.env.NODE_ENV !== 'production') {\n    /**\n     * Keeps track whether or not we are in an attributes declaration (after\n     * elementOpenStart, but before elementOpenEnd).\n     * @type {boolean}\n     */\n    var inAttributes = false;\n\n\n    /** Makes sure that the caller is not where attributes are expected. */\n    var assertNotInAttributes = function() {\n      if (inAttributes) {\n        throw new Error('Was not expecting a call to attr or elementOpenEnd, ' +\n            'they must follow a call to elementOpenStart.');\n      }\n    };\n\n\n    /** Makes sure that the caller is where attributes are expected. */\n    var assertInAttributes = function() {\n      if (!inAttributes) {\n        throw new Error('Was expecting a call to attr or elementOpenEnd. ' +\n            'elementOpenStart must be followed by zero or more calls to attr, ' +\n            'then one call to elementOpenEnd.');\n      }\n    };\n\n\n    /**\n     * Makes sure that tags are correctly nested.\n     * @param {string} tag\n     */\n    var assertCloseMatchesOpenTag = function(tag) {\n      var closingNode = getWalker().getCurrentParent();\n      var data = getData(closingNode);\n\n      if (tag !== data.nodeName) {\n        throw new Error('Received a call to close ' + tag + ' but ' +\n              data.nodeName + ' was open.');\n      }\n    };\n\n\n    /** Updates the state to being in an attribute declaration. */\n    var setInAttributes = function() {\n      inAttributes = true;\n    };\n\n\n    /** Updates the state to not being in an attribute declaration. */\n    var setNotInAttributes = function() {\n      inAttributes = false;\n    };\n  }\n\n\n  var elementOpen = function(tag, key, statics, var_args) {\n    if (process.env.NODE_ENV !== 'production') {\n      assertNotInAttributes();\n    }\n\n    var node = alignWithDOM(tag, key, statics);\n    var data = getData(node);\n\n    /*\n     * Checks to see if one or more attributes have changed for a given Element.\n     * When no attributes have changed, this is much faster than checking each\n     * individual argument. When attributes have changed, the overhead of this is\n     * minimal.\n     */\n    var attrsArr = data.attrsArr;\n    var attrsChanged = false;\n    var i = ATTRIBUTES_OFFSET;\n    var j = 0;\n\n    for (; i < arguments.length; i += 1, j += 1) {\n      if (attrsArr[j] !== arguments[i]) {\n        attrsChanged = true;\n        break;\n      }\n    }\n\n    for (; i < arguments.length; i += 1, j += 1) {\n      attrsArr[j] = arguments[i];\n    }\n\n    if (j < attrsArr.length) {\n      attrsChanged = true;\n      attrsArr.length = j;\n    }\n\n    /*\n     * Actually perform the attribute update.\n     */\n    if (attrsChanged) {\n      var newAttrs = data.newAttrs;\n\n      for (var attr in newAttrs) {\n        newAttrs[attr] = undefined;\n      }\n\n      for (var i = ATTRIBUTES_OFFSET; i < arguments.length; i += 2) {\n        newAttrs[arguments[i]] = arguments[i + 1];\n      }\n\n      for (var attr in newAttrs) {\n        attributes.updateAttribute(node, attr, newAttrs[attr]);\n      }\n    }\n\n    firstChild();\n    return node;\n  };\n\n\n  /**\n   * Declares a virtual Element at the current location in the document. This\n   * corresponds to an opening tag and a elementClose tag is required. This is\n   * like elementOpen, but the attributes are defined using the attr function\n   * rather than being passed as arguments. Must be folllowed by 0 or more calls\n   * to attr, then a call to elementOpenEnd.\n   * @param {string} tag The element's tag.\n   * @param {?string} key The key used to identify this element. This can be an\n   *     empty string, but performance may be better if a unique value is used\n   *     when iterating over an array of items.\n   * @param {?Array<*>} statics An array of attribute name/value pairs of the\n   *     static attributes for the Element. These will only be set once when the\n   *     Element is created.\n   */\n  var elementOpenStart = function(tag, key, statics) {\n    if (process.env.NODE_ENV !== 'production') {\n      assertNotInAttributes();\n      setInAttributes();\n    }\n\n    argsBuilder[0] = tag;\n    argsBuilder[1] = key;\n    argsBuilder[2] = statics;\n  };\n\n\n  /***\n   * Defines a virtual attribute at this point of the DOM. This is only valid\n   * when called between elementOpenStart and elementOpenEnd.\n   *\n   * @param {string} name\n   * @param {*} value\n   */\n  var attr = function(name, value) {\n    if (process.env.NODE_ENV !== 'production') {\n      assertInAttributes();\n    }\n\n    argsBuilder.push(name, value);\n  };\n\n\n  /**\n   * Closes an open tag started with elementOpenStart.\n   * @return {!Element} The corresponding Element.\n   */\n  var elementOpenEnd = function() {\n    if (process.env.NODE_ENV !== 'production') {\n      assertInAttributes();\n      setNotInAttributes();\n    }\n\n    var node = elementOpen.apply(null, argsBuilder);\n    argsBuilder.length = 0;\n    return node;\n  };\n\n\n  /**\n   * Closes an open virtual Element.\n   *\n   * @param {string} tag The element's tag.\n   * @return {!Element} The corresponding Element.\n   */\n  var elementClose = function(tag) {\n    if (process.env.NODE_ENV !== 'production') {\n      assertNotInAttributes();\n      assertCloseMatchesOpenTag(tag);\n    }\n\n    parentNode();\n\n    var node = getWalker().currentNode;\n    clearUnvisitedDOM(node);\n\n    nextSibling();\n    return node;\n  };\n\n\n  /**\n   * Declares a virtual Element at the current location in the document that has\n   * no children.\n   * @param {string} tag The element's tag.\n   * @param {?string} key The key used to identify this element. This can be an\n   *     empty string, but performance may be better if a unique value is used\n   *     when iterating over an array of items.\n   * @param {?Array<*>} statics An array of attribute name/value pairs of the\n   *     static attributes for the Element. These will only be set once when the\n   *     Element is created.\n   * @param {...*} var_args Attribute name/value pairs of the dynamic attributes\n   *     for the Element.\n   * @return {!Element} The corresponding Element.\n   */\n  var elementVoid = function(tag, key, statics, var_args) {\n    if (process.env.NODE_ENV !== 'production') {\n      assertNotInAttributes();\n    }\n\n    var node = elementOpen.apply(null, arguments);\n    elementClose.apply(null, arguments);\n    return node;\n  };\n\n\n  /**\n   * Declares a virtual Text at this point in the document.\n   *\n   * @param {string|number|boolean} value The value of the Text.\n   * @param {...(function(string|number|boolean):string|number|boolean)} var_args\n   *     Functions to format the value which are called only when the value has\n   *     changed.\n   */\n  var text = function(value, var_args) {\n    if (process.env.NODE_ENV !== 'production') {\n      assertNotInAttributes();\n    }\n\n    var node = alignWithDOM('#text', null);\n    var data = getData(node);\n\n    if (data.text !== value) {\n      data.text = value;\n\n      var formatted = value;\n      for (var i = 1; i < arguments.length; i += 1) {\n        formatted = arguments[i](formatted);\n      }\n\n      node.data = formatted;\n    }\n\n    nextSibling();\n  };\n\n\n  /** */\n\n  exports.elementVoid = elementVoid;\n  exports.elementOpenStart = elementOpenStart;\n  exports.elementOpenEnd = elementOpenEnd;\n  exports.elementOpen = elementOpen;\n  exports.elementClose = elementClose;\n  exports.text = text;\n  exports.attr = attr;\n\n  /**\n   * @license\n   * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *      http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS-IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n}));\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Keeps track of information needed to perform diffs for a given DOM node.\n * @param {?string} nodeName\n * @param {?string} key\n * @constructor\n */\nfunction NodeData(nodeName, key) {\n  /**\n   * The attributes and their values.\n   * @const\n   */\n  this.attrs = {};\n\n  /**\n   * An array of attribute name/value pairs, used for quickly diffing the\n   * incomming attributes to see if the DOM node's attributes need to be\n   * updated.\n   * @const {Array<*>}\n   */\n  this.attrsArr = [];\n\n  /**\n   * The incoming attributes for this Node, before they are updated.\n   * @const {!Object<string, *>}\n   */\n  this.newAttrs = {};\n\n  /**\n   * The key used to identify this node, used to preserve DOM nodes when they\n   * move within their parent.\n   * @const\n   */\n  this.key = key;\n\n  /**\n   * Keeps track of children within this node by their key.\n   * {?Object<string, Node>}\n   */\n  this.keyMap = null;\n\n  /**\n   * The last child to have been visited within the current pass.\n   * {?Node}\n   */\n  this.lastVisitedChild = null;\n\n  /**\n   * The node name for this node.\n   * @const\n   */\n  this.nodeName = nodeName;\n\n  /**\n   * @const {string}\n   */\n  this.text = null;\n}\n\n\n/**\n * Initializes a NodeData object for a Node.\n *\n * @param {!Node} node The node to initialize data for.\n * @param {string} nodeName The node name of node.\n * @param {?string} key The key that identifies the node.\n * @return {!NodeData} The newly initialized data object\n */\nvar initData = function(node, nodeName, key) {\n  var data = new NodeData(nodeName, key);\n  node['__incrementalDOMData'] = data;\n  return data;\n};\n\n\n/**\n * Retrieves the NodeData object for a Node, creating it if necessary.\n *\n * @param {!Node} node The node to retrieve the data for.\n * @return {NodeData} The NodeData for this Node.\n */\nvar getData = function(node) {\n  var data = node['__incrementalDOMData'];\n\n  if (!data) {\n    var nodeName = node.nodeName.toLowerCase();\n    var key = null;\n\n    if (node instanceof Element) {\n      key = node.getAttribute('key');\n    }\n\n    data = initData(node, nodeName, key);\n  }\n\n  return data;\n};\n\n\n/** */\nexport {\n  getData,\n  initData\n};\n\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Similar to the built-in Treewalker class, but simplified and allows direct\n * access to modify the currentNode property.\n * @param {!Node} node The root Node of the subtree the walker should start\n *     traversing.\n * @constructor\n */\nfunction TreeWalker(node) {\n  /**\n   * Keeps track of the current parent node. This is necessary as the traversal\n   * methods may traverse past the last child and we still need a way to get\n   * back to the parent.\n   * @const @private {!Array<!Node>}\n   */\n  this.stack_ = [];\n\n  /** {?Node} */\n  this.currentNode = node;\n\n  /** {!Document} */\n  this.doc = node.ownerDocument;\n\n  /**\n   * Keeps track of what namespace to create new Elements in.\n   * @const @private {!Array<string>}\n   */\n  this.nsStack_ = [undefined];\n}\n\n\n/**\n * @return {!Node} The current parent of the current location in the subtree.\n */\nTreeWalker.prototype.getCurrentParent = function() {\n  return this.stack_[this.stack_.length - 1];\n};\n\n\n/**\n * @return {string} The current namespace to create Elements in.\n */\nTreeWalker.prototype.getCurrentNamespace = function() {\n  return this.nsStack_[this.nsStack_.length - 1];\n};\n\n\n/**\n * @param {string} namespace The namespace to enter.\n */\nTreeWalker.prototype.enterNamespace = function(namespace) {\n  this.nsStack_.push(namespace);\n};\n\n\n/**\n * Exits the current namespace\n */\nTreeWalker.prototype.exitNamespace = function() {\n  this.nsStack_.pop();\n};\n\n\n/**\n * Changes the current location the firstChild of the current location.\n */\nTreeWalker.prototype.firstChild = function() {\n  this.stack_.push(this.currentNode);\n  this.currentNode = this.currentNode.firstChild;\n};\n\n\n/**\n * Changes the current location the nextSibling of the current location.\n */\nTreeWalker.prototype.nextSibling = function() {\n  this.currentNode = this.currentNode.nextSibling;\n};\n\n\n/**\n * Changes the current location the parentNode of the current location.\n */\nTreeWalker.prototype.parentNode = function() {\n  this.currentNode = this.stack_.pop();\n};\n\n\n/** */\nexport {\n  TreeWalker\n};\n\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @type {TreeWalker}\n */\nvar walker_;\n\n\n/**\n * @return {TreeWalker} the current TreeWalker\n */\nvar getWalker = function() {\n  return walker_;\n};\n\n\n/**\n * Sets the current TreeWalker\n * @param {TreeWalker} walker\n */\nvar setWalker = function(walker) {\n  walker_ = walker;\n};\n\n\n/** */\nexport {\n  getWalker,\n  setWalker\n};\n\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getWalker } from './walker';\n\nvar SVG_NS = 'http://www.w3.org/2000/svg';\n\n/**\n * Enters a tag, checking to see if it is a namespace boundary, and if so,\n * updates the current namespace.\n * @param {string} tag The tag to enter.\n */\nvar enterTag = function(tag) {\n  if (tag === 'svg') {\n    getWalker().enterNamespace(SVG_NS);\n  } else if (tag === 'foreignObject') {\n    getWalker().enterNamespace(undefined);\n  }\n};\n\n\n/**\n * Exits a tag, checking to see if it is a namespace boundary, and if so,\n * updates the current namespace.\n * @param {string} tag The tag to enter.\n */\nvar exitTag = function(tag) {\n  if (tag === 'svg' || tag === 'foreignObject') {\n    getWalker().exitNamespace();\n  }\n};\n\n\n/**\n * Gets the namespace to create an element (of a given tag) in.\n * @param {string} tag The tag to get the namespace for.\n * @return {string} The namespace to create the tag in.\n */\nvar getNamespaceForTag = function(tag) {\n  if (tag === 'svg') {\n    return SVG_NS;\n  }\n\n  return getWalker().getCurrentNamespace();\n};\n\n\n/** */\nexport {\n  enterTag,\n  exitTag,\n  getNamespaceForTag\n};\n\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getWalker } from './walker';\nimport { getData } from './node_data';\nimport {\n  enterTag,\n  exitTag\n} from './namespace';\n\n\n// For https://github.com/esperantojs/esperanto/issues/187\nvar dummy;\n\n\n/**\n * Enters an Element, setting the current namespace for nested elements.\n * @param {!Element} node\n */\nvar enterNode = function(node) {\n  var data = getData(node);\n  enterTag(data.nodeName);\n};\n\n\n/**\n * Exits an Element, unwinding the current namespace to the previous value.\n * @param {!Element} node\n */\nvar exitNode = function(node) {\n  var data = getData(node);\n  exitTag(data.nodeName);\n};\n\n\n/**\n * Marks node's parent as having visited node.\n * @param {!Node} node\n */\nvar markVisited = function(node) {\n  var walker = getWalker();\n  var parent = walker.getCurrentParent();\n  var data = getData(parent);\n  data.lastVisitedChild = node;\n};\n\n\n/**\n * Changes to the first child of the current node.\n */\nvar firstChild = function() {\n  var walker = getWalker();\n  enterNode(walker.currentNode);\n  walker.firstChild();\n};\n\n\n/**\n * Changes to the next sibling of the current node.\n */\nvar nextSibling = function() {\n  var walker = getWalker();\n  markVisited(walker.currentNode);\n  walker.nextSibling();\n};\n\n\n/**\n * Changes to the parent of the current node, removing any unvisited children.\n */\nvar parentNode = function() {\n  var walker = getWalker();\n  walker.parentNode();\n  exitNode(walker.currentNode);\n};\n\n\n/** */\nexport {\n  firstChild,\n  nextSibling,\n  parentNode\n};\n\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getData } from './node_data';\n\n\nvar attributes = {\n  /**\n   * Applies an attribute or property to a given Element. If the value is a\n   * object or a function (which includes null), it is set as a property on the\n   * Element. Otherwise, the value is set as an attribute.\n   * @param {!Element} el\n   * @param {string} name The attribute's name.\n   * @param {*} value The attribute's value. If the value is a string, it is set\n   *     as an HTML attribute, otherwise, it is set on node.\n   */\n  applyAttr: function(el, name, value) {\n    var type = typeof value;\n\n    if (type === 'object' || type === 'function') {\n      el[name] = value;\n    } else if (value === undefined) {\n      el.removeAttribute(name);\n    } else {\n      el.setAttribute(name, value);\n    }\n  },\n\n\n  /**\n   * Applies a style to an Element. No vendor prefix expansion is done for\n   * property names/values.\n   * @param {!Element} el\n   * @param {string|Object<string,string>} style The style to set. Either a\n   *     string of css or an object containing property-value pairs.\n   */\n  applyStyle: function(el, style) {\n    if (typeof style === 'string') {\n      el.style.cssText = style;\n    } else {\n      el.style.cssText = '';\n\n      for (var prop in style) {\n        el.style[prop] = style[prop];\n      }\n    }\n  },\n\n\n  /**\n   * Updates a single attribute on an Element.\n   * @param {!Element} el\n   * @param {string} name The attribute's name.\n   * @param {*} value The attribute's value. If the value is a string, it is set\n   *     as an HTML attribute, otherwise, it is set on node.\n   */\n  updateAttribute: function(el, name, value) {\n    var data = getData(el);\n    var attrs = data.attrs;\n\n    if (attrs[name] === value) {\n      return;\n    }\n\n    if (name === 'style') {\n      attributes.applyStyle(el, value);\n    } else {\n      attributes.applyAttr(el, name, value);\n    }\n\n    attrs[name] = value;\n  }\n};\n\n\n/** */\nexport {\n  attributes\n};\n\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { attributes } from './attributes';\nimport {\n    getData,\n    initData\n} from './node_data';\nimport { getNamespaceForTag } from './namespace';\n\n\n// For https://github.com/esperantojs/esperanto/issues/187\nvar dummy;\n\n\n/**\n * Creates an Element.\n * @param {!Document} doc The document with which to create the Element.\n * @param {string} tag The tag for the Element.\n * @param {?string} key A key to identify the Element.\n * @param {?Array<*>} statics An array of attribute name/value pairs of\n *     the static attributes for the Element.\n * @return {!Element}\n */\nvar createElement = function(doc, tag, key, statics) {\n  var namespace = getNamespaceForTag(tag);\n  var el;\n\n  if (namespace) {\n    el = doc.createElementNS(namespace, tag);\n  } else {\n    el = doc.createElement(tag);\n  }\n\n  initData(el, tag, key);\n\n  if (statics) {\n    for (var i = 0; i < statics.length; i += 2) {\n      attributes.updateAttribute(el, statics[i], statics[i + 1]);\n    }\n  }\n\n  return el;\n};\n\n\n/**\n * Creates a Node, either a Text or an Element depending on the node name\n * provided.\n * @param {!Document} doc The document with which to create the Node.\n * @param {string} nodeName The tag if creating an element or #text to create\n *     a Text.\n * @param {?string} key A key to identify the Element.\n * @param {?Array<*>} statics The static data to initialize the Node\n *     with. For an Element, an array of attribute name/value pairs of\n *     the static attributes for the Element.\n * @return {!Node}\n */\nvar createNode = function(doc, nodeName, key, statics) {\n  if (nodeName === '#text') {\n    return doc.createTextNode('');\n  }\n\n  return createElement(doc, nodeName, key, statics);\n};\n\n\n/**\n * Creates a mapping that can be used to look up children using a key.\n * @param {!Element} el\n * @return {!Object<string, !Node>} A mapping of keys to the children of the\n *     Element.\n */\nvar createKeyMap = function(el) {\n  var map = {};\n  var children = el.children;\n  var count = children.length;\n\n  for (var i = 0; i < count; i += 1) {\n    var child = children[i];\n    var key = getData(child).key;\n\n    if (key) {\n      map[key] = child;\n    }\n  }\n\n  return map;\n};\n\n\n/**\n * Retrieves the mapping of key to child node for a given Element, creating it\n * if necessary.\n * @param {!Element} el\n * @return {!Object<string,!Node>} A mapping of keys to child Nodes\n */\nvar getKeyMap = function(el) {\n  var data = getData(el);\n\n  if (!data.keyMap) {\n    data.keyMap = createKeyMap(el);\n  }\n\n  return data.keyMap;\n};\n\n\n/**\n * Retrieves a child from the parent with the given key.\n * @param {!Element} parent\n * @param {?string} key\n * @return {?Node} The child corresponding to the key.\n */\nvar getChild = function(parent, key) {\n  return getKeyMap(parent)[key];\n};\n\n\n/**\n * Registers a node as being a child. The parent will keep track of the child\n * using the key. The child can be retrieved using the same key using\n * getKeyMap. The provided key should be unique within the parent Element.\n * @param {!Element} parent The parent of child.\n * @param {string} key A key to identify the child with.\n * @param {!Node} child The child to register.\n */\nvar registerChild = function(parent, key, child) {\n  getKeyMap(parent)[key] = child;\n};\n\n\n/** */\nexport {\n  createNode,\n  getChild,\n  registerChild\n};\n\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    createNode,\n    getChild,\n    registerChild\n} from './nodes';\nimport { getData } from './node_data';\nimport { getWalker } from './walker';\n\n\n// For https://github.com/esperantojs/esperanto/issues/187\nvar dummy;\n\n\n/**\n * Checks whether or not a given node matches the specified nodeName and key.\n *\n * @param {!Node} node An HTML node, typically an HTMLElement or Text.\n * @param {?string} nodeName The nodeName for this node.\n * @param {?string} key An optional key that identifies a node.\n * @return {boolean} True if the node matches, false otherwise.\n */\nvar matches = function(node, nodeName, key) {\n  var data = getData(node);\n\n  // Key check is done using double equals as we want to treat a null key the\n  // same as undefined. This should be okay as the only values allowed are\n  // strings, null and undefined so the == semantics are not too weird.\n  return key == data.key &&\n         nodeName === data.nodeName;\n};\n\n\n/**\n * Aligns the virtual Element definition with the actual DOM, moving the\n * corresponding DOM node to the correct location or creating it if necessary.\n * @param {?string} nodeName For an Element, this should be a valid tag string.\n *     For a Text, this should be #text.\n * @param {?string} key The key used to identify this element.\n * @param {?Array<*>} statics For an Element, this should be an array of\n *     name-value pairs.\n * @return {!Node} The matching node.\n */\nvar alignWithDOM = function(nodeName, key, statics) {\n  var walker = getWalker();\n  var currentNode = walker.currentNode;\n  var parent = walker.getCurrentParent();\n  var matchingNode;\n\n  // Check to see if we have a node to reuse\n  if (currentNode && matches(currentNode, nodeName, key)) {\n    matchingNode = currentNode;\n  } else {\n    var existingNode = key && getChild(parent, key);\n\n    // Check to see if the node has moved within the parent or if a new one\n    // should be created\n    if (existingNode && matches(existingNode, nodeName, key)) {\n      matchingNode = existingNode;\n    } else {\n      matchingNode = createNode(walker.doc, nodeName, key, statics);\n      if (key) {\n        registerChild(parent, key, matchingNode);\n      }\n    }\n\n    parent.insertBefore(matchingNode, currentNode);\n    walker.currentNode = matchingNode;\n  }\n\n  return matchingNode;\n};\n\n\n/**\n * Clears out any unvisited Nodes, as the corresponding virtual element\n * functions were never called for them.\n * @param {!Element} node\n */\nvar clearUnvisitedDOM = function(node) {\n  var data = getData(node);\n  var lastChild = node.lastChild;\n  var lastVisitedChild = data.lastVisitedChild;\n  data.lastVisitedChild = null;\n\n  if (lastChild === lastVisitedChild) {\n    return;\n  }\n\n  while (lastChild !== lastVisitedChild) {\n    node.removeChild(lastChild);\n    lastChild = node.lastChild;\n  }\n\n  // Invalidate the key map since we removed children. It will get recreated\n  // next time we need it.\n  data.keyMap = null;\n};\n\n\n/** */\nexport {\n  alignWithDOM,\n  clearUnvisitedDOM\n};\n\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    firstChild,\n    parentNode\n} from './traversal';\nimport { TreeWalker } from './tree_walker';\nimport {\n    getWalker,\n    setWalker\n} from './walker';\nimport { clearUnvisitedDOM } from './alignment';\n\n\n// For https://github.com/esperantojs/esperanto/issues/187\nvar dummy;\n\n\n/**\n * @const {boolean}\n */\nif (process.env.NODE_ENV !== 'production') {\n  var assertNoUnclosedTags = function(root) {\n    var openElement = getWalker().getCurrentParent();\n    if (!openElement) {\n      return;\n    }\n\n    var openTags = [];\n    while (openElement && openElement !== root) {\n      openTags.push(openElement.nodeName.toLowerCase());\n      openElement = openElement.parentNode;\n    }\n\n    throw new Error('One or more tags were not closed:\\n' +\n        openTags.join('\\n'));\n  };\n}\n\n\n/**\n * Patches the document starting at el with the provided function. This function\n * may be called during an existing patch operation.\n * @param {!Element|!Document} node The Element or Document to patch.\n * @param {!function} fn A function containing elementOpen/elementClose/etc.\n *     calls that describe the DOM.\n * @param {*} data An argument passed to fn to represent DOM state.\n */\nvar patch = function(node, fn, data) {\n  var prevWalker = getWalker();\n  setWalker(new TreeWalker(node));\n\n  firstChild();\n  fn(data);\n  parentNode();\n  clearUnvisitedDOM(node);\n\n  if (process.env.NODE_ENV !== 'production') {\n    assertNoUnclosedTags(node);\n  }\n\n  setWalker(prevWalker);\n};\n\n\n/** */\nexport {\n  patch\n};\n\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  alignWithDOM,\n  clearUnvisitedDOM\n} from './alignment';\nimport { attributes } from './attributes';\nimport { getData } from './node_data';\nimport { getWalker } from './walker';\nimport {\n    firstChild,\n    nextSibling,\n    parentNode\n} from './traversal';\n\n\n// For https://github.com/esperantojs/esperanto/issues/187\nvar dummy;\n\n\n/**\n * The offset in the virtual element declaration where the attributes are\n * specified.\n * @const\n */\nvar ATTRIBUTES_OFFSET = 3;\n\n\n/**\n * Builds an array of arguments for use with elementOpenStart, attr and\n * elementOpenEnd.\n * @const {Array<*>}\n */\nvar argsBuilder = [];\n\n\nif (process.env.NODE_ENV !== 'production') {\n  /**\n   * Keeps track whether or not we are in an attributes declaration (after\n   * elementOpenStart, but before elementOpenEnd).\n   * @type {boolean}\n   */\n  var inAttributes = false;\n\n\n  /** Makes sure that the caller is not where attributes are expected. */\n  var assertNotInAttributes = function() {\n    if (inAttributes) {\n      throw new Error('Was not expecting a call to attr or elementOpenEnd, ' +\n          'they must follow a call to elementOpenStart.');\n    }\n  };\n\n\n  /** Makes sure that the caller is where attributes are expected. */\n  var assertInAttributes = function() {\n    if (!inAttributes) {\n      throw new Error('Was expecting a call to attr or elementOpenEnd. ' +\n          'elementOpenStart must be followed by zero or more calls to attr, ' +\n          'then one call to elementOpenEnd.');\n    }\n  };\n\n\n  /**\n   * Makes sure that tags are correctly nested.\n   * @param {string} tag\n   */\n  var assertCloseMatchesOpenTag = function(tag) {\n    var closingNode = getWalker().getCurrentParent();\n    var data = getData(closingNode);\n\n    if (tag !== data.nodeName) {\n      throw new Error('Received a call to close ' + tag + ' but ' +\n            data.nodeName + ' was open.');\n    }\n  };\n\n\n  /** Updates the state to being in an attribute declaration. */\n  var setInAttributes = function() {\n    inAttributes = true;\n  };\n\n\n  /** Updates the state to not being in an attribute declaration. */\n  var setNotInAttributes = function() {\n    inAttributes = false;\n  };\n}\n\n\nvar elementOpen = function(tag, key, statics, var_args) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNotInAttributes();\n  }\n\n  var node = alignWithDOM(tag, key, statics);\n  var data = getData(node);\n\n  /*\n   * Checks to see if one or more attributes have changed for a given Element.\n   * When no attributes have changed, this is much faster than checking each\n   * individual argument. When attributes have changed, the overhead of this is\n   * minimal.\n   */\n  var attrsArr = data.attrsArr;\n  var attrsChanged = false;\n  var i = ATTRIBUTES_OFFSET;\n  var j = 0;\n\n  for (; i < arguments.length; i += 1, j += 1) {\n    if (attrsArr[j] !== arguments[i]) {\n      attrsChanged = true;\n      break;\n    }\n  }\n\n  for (; i < arguments.length; i += 1, j += 1) {\n    attrsArr[j] = arguments[i];\n  }\n\n  if (j < attrsArr.length) {\n    attrsChanged = true;\n    attrsArr.length = j;\n  }\n\n  /*\n   * Actually perform the attribute update.\n   */\n  if (attrsChanged) {\n    var newAttrs = data.newAttrs;\n\n    for (var attr in newAttrs) {\n      newAttrs[attr] = undefined;\n    }\n\n    for (var i = ATTRIBUTES_OFFSET; i < arguments.length; i += 2) {\n      newAttrs[arguments[i]] = arguments[i + 1];\n    }\n\n    for (var attr in newAttrs) {\n      attributes.updateAttribute(node, attr, newAttrs[attr]);\n    }\n  }\n\n  firstChild();\n  return node;\n};\n\n\n/**\n * Declares a virtual Element at the current location in the document. This\n * corresponds to an opening tag and a elementClose tag is required. This is\n * like elementOpen, but the attributes are defined using the attr function\n * rather than being passed as arguments. Must be folllowed by 0 or more calls\n * to attr, then a call to elementOpenEnd.\n * @param {string} tag The element's tag.\n * @param {?string} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param {?Array<*>} statics An array of attribute name/value pairs of the\n *     static attributes for the Element. These will only be set once when the\n *     Element is created.\n */\nvar elementOpenStart = function(tag, key, statics) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNotInAttributes();\n    setInAttributes();\n  }\n\n  argsBuilder[0] = tag;\n  argsBuilder[1] = key;\n  argsBuilder[2] = statics;\n};\n\n\n/***\n * Defines a virtual attribute at this point of the DOM. This is only valid\n * when called between elementOpenStart and elementOpenEnd.\n *\n * @param {string} name\n * @param {*} value\n */\nvar attr = function(name, value) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertInAttributes();\n  }\n\n  argsBuilder.push(name, value);\n};\n\n\n/**\n * Closes an open tag started with elementOpenStart.\n * @return {!Element} The corresponding Element.\n */\nvar elementOpenEnd = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    assertInAttributes();\n    setNotInAttributes();\n  }\n\n  var node = elementOpen.apply(null, argsBuilder);\n  argsBuilder.length = 0;\n  return node;\n};\n\n\n/**\n * Closes an open virtual Element.\n *\n * @param {string} tag The element's tag.\n * @return {!Element} The corresponding Element.\n */\nvar elementClose = function(tag) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNotInAttributes();\n    assertCloseMatchesOpenTag(tag);\n  }\n\n  parentNode();\n\n  var node = getWalker().currentNode;\n  clearUnvisitedDOM(node);\n\n  nextSibling();\n  return node;\n};\n\n\n/**\n * Declares a virtual Element at the current location in the document that has\n * no children.\n * @param {string} tag The element's tag.\n * @param {?string} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param {?Array<*>} statics An array of attribute name/value pairs of the\n *     static attributes for the Element. These will only be set once when the\n *     Element is created.\n * @param {...*} var_args Attribute name/value pairs of the dynamic attributes\n *     for the Element.\n * @return {!Element} The corresponding Element.\n */\nvar elementVoid = function(tag, key, statics, var_args) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNotInAttributes();\n  }\n\n  var node = elementOpen.apply(null, arguments);\n  elementClose.apply(null, arguments);\n  return node;\n};\n\n\n/**\n * Declares a virtual Text at this point in the document.\n *\n * @param {string|number|boolean} value The value of the Text.\n * @param {...(function(string|number|boolean):string|number|boolean)} var_args\n *     Functions to format the value which are called only when the value has\n *     changed.\n */\nvar text = function(value, var_args) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNotInAttributes();\n  }\n\n  var node = alignWithDOM('#text', null);\n  var data = getData(node);\n\n  if (data.text !== value) {\n    data.text = value;\n\n    var formatted = value;\n    for (var i = 1; i < arguments.length; i += 1) {\n      formatted = arguments[i](formatted);\n    }\n\n    node.data = formatted;\n  }\n\n  nextSibling();\n};\n\n\n/** */\nexport {\n  elementOpenStart,\n  elementOpenEnd,\n  elementOpen,\n  elementVoid,\n  elementClose,\n  text,\n  attr\n};\n\n"],"sourceRoot":"/source/"}