{"version":3,"sources":["incremental-dom-min.js","src/tree_walker.js","src/context.js","src/node_data.js","src/notifications.js","src/util.js","src/symbols.js","src/attributes.js","src/namespace.js","src/nodes.js","src/alignment.js","src/traversal.js","src/patch.js","src/virtual_elements.js"],"names":["global","factory","exports","module","define","amd","IncrementalDOM","this","TreeWalker","node","stack_","root","currentNode","Context","prevContext","walker","doc","ownerDocument","nsStack_","undefined","created","notifications","nodesCreated","deleted","nodesDeleted","NodeData","nodeName","key","attrs","createMap","attrsArr","newAttrs","keyMap","keyMapValid","lastVisitedChild","text","prototype","getCurrentParent","length","firstChild","push","nextSibling","parentNode","pop","getCurrentNamespace","enterNamespace","namespace","exitNamespace","markCreated","markDeleted","notifyChanges","context","enterContext","restoreContext","getContext","hasOwnProperty","Object","create","has","map","property","call","initData","data","getData","toLowerCase","Element","getAttribute","symbols","default","placeholder","applyAttr","el","name","value","removeAttribute","setAttribute","applyProp","applyStyle","style","cssText","elStyle","prop","applyAttributeTyped","type","updateAttribute","mutator","attributes","SVG_NS","enterTag","tag","exitTag","getNamespaceForTag","createElement","statics","createElementNS","i","createNode","createTextNode","createKeyMap","children","count","child","getKeyMap","getChild","parent","registerChild","matches","alignWithDOM","matchingNode","existingNode","replaceChild","insertBefore","clearUnvisitedDOM","lastChild","removeChild","enterNode","exitNode","markVisited","patch","fn","ATTRIBUTES_OFFSET","argsBuilder","elementOpen","var_args","attrsChanged","j","arguments","attr","elementOpenStart","elementOpenEnd","apply","elementClose","elementVoid","elementPlaceholder","formatted"],"mappings":";;;;;;;;;;;;;;;;CAkBA,SAAWA,EAAQC,GACE,gBAAZC,UAA0C,mBAAXC,QAAyBF,EAAQC,SACrD,kBAAXE,SAAyBA,OAAOC,IAAMD,QAAQ,WAAYH,GACjEA,EAASD,EAAOM,oBAChBC,KAAM,SAAUL,GAAW,YCE7B,SAASM,GAAWC,GAOlBF,KAAKG,UAKLH,KAAKI,KAAOF,EAKZF,KAAKK,YAAcH,ECdrB,QAASI,GAAQJ,EAAMK,GAIrBP,KAAKQ,OAAS,GAAIP,GAAWC,GAK7BF,KAAKS,IAAMP,EAAKQ,cAOhBV,KAAKW,UAAYC,QAKjBZ,KAAKO,YAAcA,EAKnBP,KAAKa,QArDPlB,EAAAmB,cAqD+BC,iBAK7Bf,KAAKgB,QA1DPrB,EAAAmB,cA0D+BG,iBCjC/B,QAASC,GAASC,EAAUC,GAK1BpB,KAAKqB,MAAQC,IAQbtB,KAAKuB,YAMLvB,KAAKwB,SAAWF,IAOhBtB,KAAKoB,IAAMA,EAMXpB,KAAKyB,OAAS,KAMdzB,KAAK0B,aAAc,EAMnB1B,KAAK2B,iBAAmB,KAMxB3B,KAAKmB,SAAWA,EAKhBnB,KAAK4B,KAAO,KChFdjC,EAAAmB,eAuBEC,aAAc,KAQdE,aAAc,MHiBhBhB,EAAW4B,UAAUC,iBAAmB,WACtC,MAAO9B,MAAKG,OAAOH,KAAKG,OAAO4B,OAAS,IAO1C9B,EAAW4B,UAAUG,WAAa,WAChChC,KAAKG,OAAO8B,KAAKjC,KAAKK,aACtBL,KAAKK,YAAcL,KAAKK,YAAY2B,YAOtC/B,EAAW4B,UAAUK,YAAc,WACjClC,KAAKK,YAAcL,KAAKK,YAAY6B,aAOtCjC,EAAW4B,UAAUM,WAAa,WAChCnC,KAAKK,YAAcL,KAAKG,OAAOiC,OCTjC9B,EAAQuB,UAAUQ,oBAAsB,WACtC,MAAOrC,MAAKW,SAASX,KAAKW,SAASoB,OAAS,IAO9CzB,EAAQuB,UAAUS,eAAiB,SAASC,GAC1CvC,KAAKW,SAASsB,KAAKM,IAOrBjC,EAAQuB,UAAUW,cAAgB,WAChCxC,KAAKW,SAASyB,OAOhB9B,EAAQuB,UAAUY,YAAc,SAASvC,GACnCF,KAAKa,SACPb,KAAKa,QAAQoB,KAAK/B,IAQtBI,EAAQuB,UAAUa,YAAc,SAASxC,GACnCF,KAAKgB,SACPhB,KAAKgB,QAAQiB,KAAK/B,IAQtBI,EAAQuB,UAAUc,cAAgB,WAC5B3C,KAAKa,SAAWb,KAAKa,QAAQkB,OAAS,GA9G5CpC,EAAAmB,cA+GkBC,aAAaf,KAAKa,SAG9Bb,KAAKgB,SAAWhB,KAAKgB,QAAQe,OAAS,GAlH5CpC,EAAAmB,cAmHkBG,aAAajB,KAAKgB,SASpC,IAAI4B,GAOAC,EAAe,SAAS3C,GAC1B0C,EAAU,GAAItC,GAAQJ,EAAM0C,IAO1BE,EAAiB,WACnBF,EAAUA,EAAQrC,aAQhBwC,EAAa,WACf,MAAOH,IGjILI,EAAiBC,OAAOpB,UAAUmB,eAMlCE,EAASD,OAAOC,OAShBC,EAAM,SAASC,EAAKC,GACtB,MAAOL,GAAeM,KAAKF,EAAKC,IAQ9B/B,EAAY,WACd,MAAO4B,GAAO,OF+CZK,EAAW,SAASrD,EAAMiB,EAAUC,GACtC,GAAIoC,GAAO,GAAItC,GAASC,EAAUC,EAElC,OADAlB,GAA2B,qBAAIsD,EACxBA,GAULC,EAAU,SAASvD,GACrB,GAAIsD,GAAOtD,EAA2B,oBAEtC,KAAKsD,EAAM,CACT,GAAIrC,GAAWjB,EAAKiB,SAASuC,cACzBtC,EAAM,IAENlB,aAAgByD,WAClBvC,EAAMlB,EAAK0D,aAAa,QAG1BJ,EAAOD,EAASrD,EAAMiB,EAAUC,GAGlC,MAAOoC,GGvHT7D,GAAAkE,SAiBEC,UAAS,YAETC,YAAa,iBCnBfpE,EAAAqE,UAgCgB,SAASC,EAAIC,EAAMC,GACpB,MAATA,EACFF,EAAGG,gBAAgBF,GAEnBD,EAAGI,aAAaH,EAAMC,IApC1BxE,EAAA2E,UA8CgB,SAASL,EAAIC,EAAMC,GACjCF,EAAGC,GAAQC,EAYb,IAAII,GAAa,SAASN,EAAIC,EAAMM,GAClC,GAAqB,gBAAVA,GACTP,EAAGO,MAAMC,QAAUD,MACd,CACLP,EAAGO,MAAMC,QAAU,EACnB,IAAIC,GAAUT,EAAGO,KAEjB,KAAK,GAAIG,KAAQH,GACXrB,EAAIqB,EAAOG,KACbD,EAAQC,GAAQH,EAAMG,MAe1BC,EAAsB,SAASX,EAAIC,EAAMC,GAC3C,GAAIU,SAAcV,EAEL,YAATU,GAA8B,aAATA,EAtF3BlF,EAAA2E,UAuFcL,EAAIC,EAAMC,GAvFxBxE,EAAAqE,UAyFcC,EAAIC,EAA8CC,IAW5DW,EAAkB,SAASb,EAAIC,EAAMC,GACvC,GAAIX,GAAOC,EAAQQ,GACf5C,EAAQmC,EAAKnC,KAEjB,IAAIA,EAAM6C,KAAUC,EAApB,CAIA,GAAIY,GA5GNpF,EAAAqF,WA4G2Bd,IA5G3BvE,EAAAqF,WAAArF,EAAAkE,QAAAlE,WA6GEoF,GAAQd,EAAIC,EAAMC,GAElB9C,EAAM6C,GAAQC,GA/GhBxE,GAAAqF,WAuHiB1D,IAvHjB3B,EAAAqF,WAAArF,EAAAkE,QAAAlE,YA2H8BiF,EA3H9BjF,EAAAqF,WAAArF,EAAAkE,QA6HmBE,aAAe,aA7HlCpE,EAAAqF,WA+HkB,MAAIT,CC7GtB,IAAIU,GAAS,6BAOTC,EAAW,SAASC,GACV,QAARA,EACFpC,IAAaT,eAAe2C,GACX,kBAARE,GACTpC,IAAaT,eAAe1B,SAU5BwE,EAAU,SAASD,IACT,QAARA,GAAyB,kBAARA,IACnBpC,IAAaP,iBAUb6C,EAAqB,SAASF,GAChC,MAAY,QAARA,EACKF,EAGFlC,IAAaV,uBClBlBiD,EAAgB,SAAS7E,EAAK0E,EAAK/D,EAAKmE,GAC1C,GACItB,GADA1B,EAAY8C,EAAmBF,EAWnC,IAPElB,EADE1B,EACG9B,EAAI+E,gBAAgBjD,EAAW4C,GAE/B1E,EAAI6E,cAAcH,GAGzB5B,EAASU,EAAIkB,EAAK/D,GAEdmE,EACF,IAAK,GAAIE,GAAI,EAAGA,EAAIF,EAAQxD,OAAQ0D,GAAK,EACvCX,EAAgBb,EAA0BsB,EAAQE,GAAKF,EAAQE,EAAI,GAIvE,OAAOxB,IAgBLyB,EAAa,SAASjF,EAAKU,EAAUC,EAAKmE,GAC5C,MAAiB,UAAbpE,EACKV,EAAIkF,eAAe,IAGrBL,EAAc7E,EAAKU,EAAUC,EAAKmE,IAUvCK,EAAe,SAAS3B,GAK1B,IAAK,GAJDb,GAAM9B,IACNuE,EAAW5B,EAAG4B,SACdC,EAAQD,EAAS9D,OAEZ0D,EAAI,EAAOK,EAAJL,EAAWA,GAAK,EAAG,CACjC,GAAIM,GAAQF,EAASJ,GACjBrE,EAAMqC,EAAQsC,GAAO3E,GAErBA,KACFgC,EAAIhC,GAAO2E,GAIf,MAAO3C,IAUL4C,EAAY,SAAS/B,GACvB,GAAIT,GAAOC,EAAQQ,EAMnB,OAJKT,GAAK/B,SACR+B,EAAK/B,OAASmE,EAAa3B,IAGtBT,EAAK/B,QAUVwE,EAAW,SAASC,EAAQ9E,GAC9B,MAA+BA,IAAO4E,EAAUE,GAAQ9E,IAYtD+E,EAAgB,SAASD,EAAQ9E,EAAK2E,GACxCC,EAAUE,GAAQ9E,GAAO2E,GCxFvBK,EAAU,SAASlG,EAAMiB,EAAUC,GACrC,GAAIoC,GAAOC,EAAQvD,EAKnB,OAAOkB,IAAOoC,EAAKpC,KAAOD,IAAaqC,EAAKrC,UAc1CkF,EAAe,SAASlF,EAAUC,EAAKmE,GACzC,GAIIe,GAJA1D,EAAUG,IACVvC,EAASoC,EAAQpC,OACjBH,EAAcG,EAAOH,YACrB6F,EAAS1F,EAAOsB,kBAIpB,IAAIzB,GAAe+F,EAAQ/F,EAAac,EAAUC,GAChDkF,EAAejG,MACV,CACL,GAAIkG,GAAeN,EAASC,EAAQ9E,EAIhCmF,GAKFD,EAAeC,GAEfD,EAAeZ,EAAW9C,EAAQnC,IAAKU,EAAUC,EAAKmE,GAElDnE,GACF+E,EAAcD,EAAQ9E,EAAKkF,GAG7B1D,EAAQH,YAAY6D,IAOlBjG,GAAeoD,EAAQpD,GAAae,KACtC8E,EAAOM,aAAaF,EAAcjG,GAClCoD,EAAQyC,GAAQxE,aAAc,GAE9BwE,EAAOO,aAAaH,EAAcjG,GAGpCG,EAAOH,YAAciG,EAGvB,MAAOA,IASLI,EAAoB,SAASxG,GAC/B,GAOIkB,GAPAwB,EAAUG,IACVvC,EAASoC,EAAQpC,OACjBgD,EAAOC,EAAQvD,GACfuB,EAAS+B,EAAK/B,OACdC,EAAc8B,EAAK9B,YACnBC,EAAmB6B,EAAK7B,iBACxBoE,EAAQ7F,EAAKyG,SAKjB,IAFAnD,EAAK7B,iBAAmB,OAEpBoE,IAAUpE,GAAoBD,GAI9B8B,EAAKnC,MAhJX1B,EAAAkE,QAgJyBE,cAAgBvD,EAAOH,cAAgBG,EAAOJ,MAArE,CAIA,KAAO2F,IAAUpE,GACfzB,EAAK0G,YAAYb,GACjBnD,EAAQF,YAAgCqD,GAExC3E,EAAMqC,EAAQsC,GAAO3E,IACjBA,SACKK,GAAOL,GAEhB2E,EAAQ7F,EAAKyG,SAIf,KAAKvF,IAAOK,GACVsE,EAAQtE,EAAOL,GACV2E,EAAM5D,aACTS,EAAQF,YAAYqD,SACbtE,GAAOL,GAIlBoC,GAAK9B,aAAc,ICxIjBmF,EAAY,SAAS3G,GACvB,GAAIsD,GAAOC,EAAQvD,EACnBgF,GAAS1B,EAAKrC,WAQZ2F,EAAW,SAAS5G,GACtB,GAAIsD,GAAOC,EAAQvD,EACnBkF,GAAQ5B,EAAKrC,WAQX4F,EAAc,SAAS7G,GACzB,GAAI0C,GAAUG,IACVvC,EAASoC,EAAQpC,OACjB0F,EAAS1F,EAAOsB,mBAChB0B,EAAOC,EAAQyC,EACnB1C,GAAK7B,iBAAmBzB,GAOtB8B,EAAa,WACf,GAAIY,GAAUG,IACVvC,EAASoC,EAAQpC,MACrBqG,GAAUrG,EAAOH,aACjBG,EAAOwB,cAOLE,EAAc,WAChB,GAAIU,GAAUG,IACVvC,EAASoC,EAAQpC,MACrBuG,GAAYvG,EAAOH,aACnBG,EAAO0B,eAOLC,EAAa,WACf,GAAIS,GAAUG,IACVvC,EAASoC,EAAQpC,MACrBA,GAAO2B,aACP2E,EAAStG,EAAOH,aC1FlBV,GAAAqH,MA+DY,SAAS9G,EAAM+G,EAAIzD,GAC7BX,EAAa3C,GAEb8B,IACAiF,EAAGzD,GACHrB,IACAuE,EAAkBxG,GAMlB6C,IAAaJ,gBACbG,ICpCF,IAAIoE,GAAoB,EAQpBC,IAhDJxH,GAAAyH,YAsIkB,SAASjC,EAAK/D,EAAKmE,EAAS8B,GAmB5C,IAdA,GAAInH,GAA8BmG,EAAalB,EAAK/D,EAAKmE,GACrD/B,EAAOC,EAAQvD,GAQfqB,EAAWiC,EAAKjC,SAChB+F,GAAe,EACf7B,EAAIyB,EACJK,EAAI,EAED9B,EAAI+B,UAAUzF,OAAQ0D,GAAK,EAAG8B,GAAK,EACxC,GAAIhG,EAASgG,KAAOC,UAAU/B,GAAI,CAChC6B,GAAe,CACf,OAIJ,KAAO7B,EAAI+B,UAAUzF,OAAQ0D,GAAK,EAAG8B,GAAK,EACxChG,EAASgG,GAAKC,UAAU/B,EAW1B,IARI8B,EAAIhG,EAASQ,SACfuF,GAAe,EACf/F,EAASQ,OAASwF,GAMhBD,EAAc,CAChB,GAAIG,GAAMjG,EAAWgC,EAAKhC,QAE1B,KAAKiG,IAAQjG,GACXA,EAASiG,GAAQ7G,MAGnB,KAAK6E,EAAIyB,EAAmBzB,EAAI+B,UAAUzF,OAAQ0D,GAAK,EACrDjE,EAASgG,UAAU/B,IAAM+B,UAAU/B,EAAI,EAGzC,KAAKgC,IAAQjG,GACXsD,EAAgB5E,EAAMuH,EAAMjG,EAASiG,IAKzC,MADAzF,KACO9B,GA7LTP,EAAA+H,iBA+MuB,SAASvC,EAAK/D,EAAKmE,GAMxC4B,EAAY,GAAKhC,EACjBgC,EAAY,GAAK/F,EACjB+F,EAAY,GAAK5B,GAvNnB5F,EAAA8H,KAkOW,SAASvD,EAAMC,GAKxBgD,EAAYlF,KAAKiC,EAAMC,IAvOzBxE,EAAAgI,eA+OqB,WAMnB,GAAIzH,GArPNP,EAAAyH,YAqPyBQ,MAAM,KAAMT,EAEnC,OADAA,GAAYpF,OAAS,EACd7B,GAvPTP,EAAAkI,aAiQmB,SAAS1C,GAM1BhD,GAEA,IAAIjC,GAA+B6C,IAAavC,OAAOH,WAKvD,OAHAqG,GAAkBxG,GAElBgC,IACOhC,GA9QTP,EAAAmI,YAgSkB,SAAS3C,EAAK/D,EAAKmE,EAAS8B,GAC5C,GAAInH,GAjSNP,EAAAyH,YAiSyBQ,MAAM,KAAMJ,UAEnC,OAnSF7H,GAAAkI,aAkSeD,MAAM,KAAMJ,WAClBtH,GAnSTP,EAAAoI,mBAwTyB,SAAS5C,EAAK/D,EAAKmE,EAAS8B,GAKnD,GAAInH,GA7TNP,EAAAyH,YA6TyBQ,MAAM,KAAMJ,UAGnC,OAFA1C,GAAgB5E,EA9TlBP,EAAAkE,QA8TgCE,aAAa,GA9T7CpE,EAAAkI,aA+TeD,MAAM,KAAMJ,WAClBtH,GAhUTP,EAAAiC,KA6UW,SAASuC,EAAOkD,GAKzB,GAAInH,GAA2BmG,EAAa,QAAS,MACjD7C,EAAOC,EAAQvD,EAEnB,IAAIsD,EAAK5B,OAASuC,EAAO,CACvBX,EAAK5B,KAA6BuC,CAGlC,KAAK,GADD6D,GAAY7D,EACPsB,EAAI,EAAGA,EAAI+B,UAAUzF,OAAQ0D,GAAK,EACzCuC,EAAYR,UAAU/B,GAAGuC,EAG3B9H,GAAKsD,KAAOwE,EAId,MADA9F,KACOhC","file":"incremental-dom-min.js","sourcesContent":["\n/**\n * @license\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  factory((global.IncrementalDOM = {}));\n}(this, function (exports) { 'use strict';\n\n  /**\n   * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *      http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS-IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  /** */\n  exports.notifications = {\n    /**\n     * Called after patch has compleated with any Nodes that have been created\n     * and added to the DOM.\n     * @type {?function(Array<!Node>)}\n     */\n    nodesCreated: null,\n\n    /**\n     * Called after patch has compleated with any Nodes that have been removed\n     * from the DOM.\n     * Note it's an applications responsibility to handle any childNodes.\n     * @type {?function(Array<!Node>)}\n     */\n    nodesDeleted: null\n  };\n\n  /**\n   * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *      http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS-IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n\n  /**\n   * Similar to the built-in Treewalker class, but simplified and allows direct\n   * access to modify the currentNode property.\n   * @param {!Element|!DocumentFragment} node The root Node of the subtree the\n   *     walker should start traversing.\n   * @constructor\n   */\n  function TreeWalker(node) {\n    /**\n     * Keeps track of the current parent node. This is necessary as the traversal\n     * methods may traverse past the last child and we still need a way to get\n     * back to the parent.\n     * @const @private {!Array<!Node>}\n     */\n    this.stack_ = [];\n\n    /**\n     * @const {!Element|!DocumentFragment}\n     */\n    this.root = node;\n\n    /**\n     * @type {?Node}\n     */\n    this.currentNode = node;\n  }\n\n\n  /**\n   * @return {!Node} The current parent of the current location in the subtree.\n   */\n  TreeWalker.prototype.getCurrentParent = function() {\n    return this.stack_[this.stack_.length - 1];\n  };\n\n\n  /**\n   * Changes the current location the firstChild of the current location.\n   */\n  TreeWalker.prototype.firstChild = function() {\n    this.stack_.push(this.currentNode);\n    this.currentNode = this.currentNode.firstChild;\n  };\n\n\n  /**\n   * Changes the current location the nextSibling of the current location.\n   */\n  TreeWalker.prototype.nextSibling = function() {\n    this.currentNode = this.currentNode.nextSibling;\n  };\n\n\n  /**\n   * Changes the current location the parentNode of the current location.\n   */\n  TreeWalker.prototype.parentNode = function() {\n    this.currentNode = this.stack_.pop();\n  };\n\n  /**\n   * Keeps track of the state of a patch.\n   * @param {!Element|!DocumentFragment} node The root Node of the subtree the\n   *     is for.\n   * @param {?Context} prevContext The previous context.\n   * @constructor\n   */\n  function Context(node, prevContext) {\n    /**\n     * @const {TreeWalker}\n     */\n    this.walker = new TreeWalker(node);\n\n    /**\n     * @const {Document}\n     */\n    this.doc = node.ownerDocument;\n\n    /**\n     * Keeps track of what namespace to create new Elements in.\n     * @private\n     * @const {!Array<(string|undefined)>}\n     */\n    this.nsStack_ = [undefined];\n\n    /**\n     * @const {?Context}\n     */\n    this.prevContext = prevContext;\n\n    /**\n     * @type {(Array<!Node>|undefined)}\n     */\n    this.created = exports.notifications.nodesCreated && [];\n\n    /**\n     * @type {(Array<!Node>|undefined)}\n     */\n    this.deleted = exports.notifications.nodesDeleted && [];\n  }\n\n\n  /**\n   * @return {(string|undefined)} The current namespace to create Elements in.\n   */\n  Context.prototype.getCurrentNamespace = function() {\n    return this.nsStack_[this.nsStack_.length - 1];\n  };\n\n\n  /**\n   * @param {string=} namespace The namespace to enter.\n   */\n  Context.prototype.enterNamespace = function(namespace) {\n    this.nsStack_.push(namespace);\n  };\n\n\n  /**\n   * Exits the current namespace\n   */\n  Context.prototype.exitNamespace = function() {\n    this.nsStack_.pop();\n  };\n\n\n  /**\n   * @param {!Node} node\n   */\n  Context.prototype.markCreated = function(node) {\n    if (this.created) {\n      this.created.push(node);\n    }\n  };\n\n\n  /**\n   * @param {!Node} node\n   */\n  Context.prototype.markDeleted = function(node) {\n    if (this.deleted) {\n      this.deleted.push(node);\n    }\n  };\n\n\n  /**\n   * Notifies about nodes that were created during the patch opearation.\n   */\n  Context.prototype.notifyChanges = function() {\n    if (this.created && this.created.length > 0) {\n      exports.notifications.nodesCreated(this.created);\n    }\n\n    if (this.deleted && this.deleted.length > 0) {\n      exports.notifications.nodesDeleted(this.deleted);\n    }\n  };\n\n\n  /**\n   * The current context.\n   * @type {?Context}\n   */\n  var context;\n\n\n  /**\n   * Enters a new patch context.\n   * @param {!Element|!DocumentFragment} node\n   */\n  var enterContext = function(node) {\n    context = new Context(node, context);\n  };\n\n\n  /**\n   * Restores the previous patch context.\n   */\n  var restoreContext = function() {\n    context = context.prevContext;\n  };\n\n\n  /**\n   * Gets the current patch context.\n   * @return {?Context}\n   */\n  var getContext = function() {\n    return context;\n  };\n\n  /**\n   * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *      http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS-IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n\n  /**\n   * A cached reference to the hasOwnProperty function.\n   */\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n\n\n  /**\n   * A cached reference to the create function.\n   */\n  var create = Object.create;\n\n\n  /**\n   * Used to prevent property collisions between our \"map\" and its prototype.\n   * @param {!Object<string, *>} map The map to check.\n   * @param {string} property The property to check.\n   * @return {boolean} Whether map has property.\n   */\n  var has = function(map, property) {\n    return hasOwnProperty.call(map, property);\n  };\n\n\n  /**\n   * Creates an map object without a prototype.\n   * @return {!Object}\n   */\n  var createMap = function() {\n    return create(null);\n  };\n\n  /**\n   * Keeps track of information needed to perform diffs for a given DOM node.\n   * @param {!string} nodeName\n   * @param {?string=} key\n   * @constructor\n   */\n  function NodeData(nodeName, key) {\n    /**\n     * The attributes and their values.\n     * @const\n     */\n    this.attrs = createMap();\n\n    /**\n     * An array of attribute name/value pairs, used for quickly diffing the\n     * incomming attributes to see if the DOM node's attributes need to be\n     * updated.\n     * @const {Array<*>}\n     */\n    this.attrsArr = [];\n\n    /**\n     * The incoming attributes for this Node, before they are updated.\n     * @const {!Object<string, *>}\n     */\n    this.newAttrs = createMap();\n\n    /**\n     * The key used to identify this node, used to preserve DOM nodes when they\n     * move within their parent.\n     * @const\n     */\n    this.key = key;\n\n    /**\n     * Keeps track of children within this node by their key.\n     * {?Object<string, !Element>}\n     */\n    this.keyMap = null;\n\n    /**\n     * Whether or not the keyMap is currently valid.\n     * {boolean}\n     */\n    this.keyMapValid = true;\n\n    /**\n     * The last child to have been visited within the current pass.\n     * @type {?Node}\n     */\n    this.lastVisitedChild = null;\n\n    /**\n     * The node name for this node.\n     * @const {string}\n     */\n    this.nodeName = nodeName;\n\n    /**\n     * @type {?string}\n     */\n    this.text = null;\n  }\n\n\n  /**\n   * Initializes a NodeData object for a Node.\n   *\n   * @param {Node} node The node to initialize data for.\n   * @param {string} nodeName The node name of node.\n   * @param {?string=} key The key that identifies the node.\n   * @return {!NodeData} The newly initialized data object\n   */\n  var initData = function(node, nodeName, key) {\n    var data = new NodeData(nodeName, key);\n    node['__incrementalDOMData'] = data;\n    return data;\n  };\n\n\n  /**\n   * Retrieves the NodeData object for a Node, creating it if necessary.\n   *\n   * @param {Node} node The node to retrieve the data for.\n   * @return {!NodeData} The NodeData for this Node.\n   */\n  var getData = function(node) {\n    var data = node['__incrementalDOMData'];\n\n    if (!data) {\n      var nodeName = node.nodeName.toLowerCase();\n      var key = null;\n\n      if (node instanceof Element) {\n        key = node.getAttribute('key');\n      }\n\n      data = initData(node, nodeName, key);\n    }\n\n    return data;\n  };\n\n  /**\n   * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *      http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS-IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports.symbols = {\n    default: '__default',\n\n    placeholder: '__placeholder'\n  };\n\n  /**\n   * Applies an attribute or property to a given Element. If the value is null\n   * or undefined, it is removed from the Element. Otherwise, the value is set\n   * as an attribute.\n   * @param {!Element} el\n   * @param {string} name The attribute's name.\n   * @param {?(boolean|number|string)=} value The attribute's value.\n   */\n  exports.applyAttr = function(el, name, value) {\n    if (value == null) {\n      el.removeAttribute(name);\n    } else {\n      el.setAttribute(name, value);\n    }\n  };\n\n  /**\n   * Applies a property to a given Element.\n   * @param {!Element} el\n   * @param {string} name The property's name.\n   * @param {*} value The property's value.\n   */\n  exports.applyProp = function(el, name, value) {\n    el[name] = value;\n  };\n\n\n  /**\n   * Applies a style to an Element. No vendor prefix expansion is done for\n   * property names/values.\n   * @param {!Element} el\n   * @param {string} name The attribute's name.\n   * @param {string|Object<string,string>} style The style to set. Either a\n   *     string of css or an object containing property-value pairs.\n   */\n  var applyStyle = function(el, name, style) {\n    if (typeof style === 'string') {\n      el.style.cssText = style;\n    } else {\n      el.style.cssText = '';\n      var elStyle = el.style;\n\n      for (var prop in style) {\n        if (has(style, prop)) {\n          elStyle[prop] = style[prop];\n        }\n      }\n    }\n  };\n\n\n  /**\n   * Updates a single attribute on an Element.\n   * @param {!Element} el\n   * @param {string} name The attribute's name.\n   * @param {*} value The attribute's value. If the value is an object or\n   *     function it is set on the Element, otherwise, it is set as an HTML\n   *     attribute.\n   */\n  var applyAttributeTyped = function(el, name, value) {\n    var type = typeof value;\n\n    if (type === 'object' || type === 'function') {\n      exports.applyProp(el, name, value);\n    } else {\n      exports.applyAttr(el, name, /** @type {?(boolean|number|string)} */(value));\n    }\n  };\n\n\n  /**\n   * Calls the appropriate attribute mutator for this attribute.\n   * @param {!Element} el\n   * @param {string} name The attribute's name.\n   * @param {*} value The attribute's value.\n   */\n  var updateAttribute = function(el, name, value) {\n    var data = getData(el);\n    var attrs = data.attrs;\n\n    if (attrs[name] === value) {\n      return;\n    }\n\n    var mutator = exports.attributes[name] || exports.attributes[exports.symbols.default];\n    mutator(el, name, value);\n\n    attrs[name] = value;\n  };\n\n\n  /**\n   * A publicly mutable object to provide custom mutators for attributes.\n   * @const {!Object<string, function(!Element, string, *)>}\n   */\n  exports.attributes = createMap();\n\n  // Special generic mutator that's called for any attribute that does not\n  // have a specific mutator.\n  exports.attributes[exports.symbols.default] = applyAttributeTyped;\n\n  exports.attributes[exports.symbols.placeholder] = function() {};\n\n  exports.attributes['style'] = applyStyle;\n\n  var SVG_NS = 'http://www.w3.org/2000/svg';\n\n  /**\n   * Enters a tag, checking to see if it is a namespace boundary, and if so,\n   * updates the current namespace.\n   * @param {string} tag The tag to enter.\n   */\n  var enterTag = function(tag) {\n    if (tag === 'svg') {\n      getContext().enterNamespace(SVG_NS);\n    } else if (tag === 'foreignObject') {\n      getContext().enterNamespace(undefined);\n    }\n  };\n\n\n  /**\n   * Exits a tag, checking to see if it is a namespace boundary, and if so,\n   * updates the current namespace.\n   * @param {string} tag The tag to enter.\n   */\n  var exitTag = function(tag) {\n    if (tag === 'svg' || tag === 'foreignObject') {\n      getContext().exitNamespace();\n    }\n  };\n\n\n  /**\n   * Gets the namespace to create an element (of a given tag) in.\n   * @param {string} tag The tag to get the namespace for.\n   * @return {(string|undefined)} The namespace to create the tag in.\n   */\n  var getNamespaceForTag = function(tag) {\n    if (tag === 'svg') {\n      return SVG_NS;\n    }\n\n    return getContext().getCurrentNamespace();\n  };\n\n  /**\n   * Creates an Element.\n   * @param {Document} doc The document with which to create the Element.\n   * @param {string} tag The tag for the Element.\n   * @param {?string=} key A key to identify the Element.\n   * @param {?Array<*>=} statics An array of attribute name/value pairs of\n   *     the static attributes for the Element.\n   * @return {!Element}\n   */\n  var createElement = function(doc, tag, key, statics) {\n    var namespace = getNamespaceForTag(tag);\n    var el;\n\n    if (namespace) {\n      el = doc.createElementNS(namespace, tag);\n    } else {\n      el = doc.createElement(tag);\n    }\n\n    initData(el, tag, key);\n\n    if (statics) {\n      for (var i = 0; i < statics.length; i += 2) {\n        updateAttribute(el, /** @type {!string}*/(statics[i]), statics[i + 1]);\n      }\n    }\n\n    return el;\n  };\n\n\n  /**\n   * Creates a Node, either a Text or an Element depending on the node name\n   * provided.\n   * @param {Document} doc The document with which to create the Node.\n   * @param {string} nodeName The tag if creating an element or #text to create\n   *     a Text.\n   * @param {?string=} key A key to identify the Element.\n   * @param {?Array<*>=} statics The static data to initialize the Node\n   *     with. For an Element, an array of attribute name/value pairs of\n   *     the static attributes for the Element.\n   * @return {!Node}\n   */\n  var createNode = function(doc, nodeName, key, statics) {\n    if (nodeName === '#text') {\n      return doc.createTextNode('');\n    }\n\n    return createElement(doc, nodeName, key, statics);\n  };\n\n\n  /**\n   * Creates a mapping that can be used to look up children using a key.\n   * @param {!Node} el\n   * @return {!Object<string, !Element>} A mapping of keys to the children of the\n   *     Element.\n   */\n  var createKeyMap = function(el) {\n    var map = createMap();\n    var children = el.children;\n    var count = children.length;\n\n    for (var i = 0; i < count; i += 1) {\n      var child = children[i];\n      var key = getData(child).key;\n\n      if (key) {\n        map[key] = child;\n      }\n    }\n\n    return map;\n  };\n\n\n  /**\n   * Retrieves the mapping of key to child node for a given Element, creating it\n   * if necessary.\n   * @param {!Node} el\n   * @return {!Object<string, !Node>} A mapping of keys to child Elements\n   */\n  var getKeyMap = function(el) {\n    var data = getData(el);\n\n    if (!data.keyMap) {\n      data.keyMap = createKeyMap(el);\n    }\n\n    return data.keyMap;\n  };\n\n\n  /**\n   * Retrieves a child from the parent with the given key.\n   * @param {!Node} parent\n   * @param {?string=} key\n   * @return {?Element} The child corresponding to the key.\n   */\n  var getChild = function(parent, key) {\n    return /** @type {?Element} */(key && getKeyMap(parent)[key]);\n  };\n\n\n  /**\n   * Registers an element as being a child. The parent will keep track of the\n   * child using the key. The child can be retrieved using the same key using\n   * getKeyMap. The provided key should be unique within the parent Element.\n   * @param {!Node} parent The parent of child.\n   * @param {string} key A key to identify the child with.\n   * @param {!Node} child The child to register.\n   */\n  var registerChild = function(parent, key, child) {\n    getKeyMap(parent)[key] = child;\n  };\n\n  if (process.env.NODE_ENV !== 'production') {\n    /**\n    * Makes sure that keyed Element matches the tag name provided.\n    * @param {!Element} node The node that is being matched.\n    * @param {string=} tag The tag name of the Element.\n    * @param {?string=} key The key of the Element.\n    */\n    var assertKeyedTagMatches = function(node, tag, key) {\n      var nodeName = getData(node).nodeName;\n      if (nodeName !== tag) {\n        throw new Error('Was expecting node with key \"' + key + '\" to be a ' +\n            tag + ', not a ' + nodeName + '.');\n      }\n    };\n  }\n\n\n  /**\n   * Checks whether or not a given node matches the specified nodeName and key.\n   *\n   * @param {!Node} node An HTML node, typically an HTMLElement or Text.\n   * @param {?string} nodeName The nodeName for this node.\n   * @param {?string=} key An optional key that identifies a node.\n   * @return {boolean} True if the node matches, false otherwise.\n   */\n  var matches = function(node, nodeName, key) {\n    var data = getData(node);\n\n    // Key check is done using double equals as we want to treat a null key the\n    // same as undefined. This should be okay as the only values allowed are\n    // strings, null and undefined so the == semantics are not too weird.\n    return key == data.key && nodeName === data.nodeName;\n  };\n\n\n  /**\n   * Aligns the virtual Element definition with the actual DOM, moving the\n   * corresponding DOM node to the correct location or creating it if necessary.\n   * @param {string} nodeName For an Element, this should be a valid tag string.\n   *     For a Text, this should be #text.\n   * @param {?string=} key The key used to identify this element.\n   * @param {?Array<*>=} statics For an Element, this should be an array of\n   *     name-value pairs.\n   * @return {!Node} The matching node.\n   */\n  var alignWithDOM = function(nodeName, key, statics) {\n    var context = getContext();\n    var walker = context.walker;\n    var currentNode = walker.currentNode;\n    var parent = walker.getCurrentParent();\n    var matchingNode;\n\n    // Check to see if we have a node to reuse\n    if (currentNode && matches(currentNode, nodeName, key)) {\n      matchingNode = currentNode;\n    } else {\n      var existingNode = getChild(parent, key);\n\n      // Check to see if the node has moved within the parent or if a new one\n      // should be created\n      if (existingNode) {\n        if (process.env.NODE_ENV !== 'production') {\n          assertKeyedTagMatches(existingNode, nodeName, key);\n        }\n\n        matchingNode = existingNode;\n      } else {\n        matchingNode = createNode(context.doc, nodeName, key, statics);\n\n        if (key) {\n          registerChild(parent, key, matchingNode);\n        }\n\n        context.markCreated(matchingNode);\n      }\n\n      // If the node has a key, remove it from the DOM to prevent a large number\n      // of re-orders in the case that it moved far or was completely removed.\n      // Since we hold on to a reference through the keyMap, we can always add it\n      // back.\n      if (currentNode && getData(currentNode).key) {\n        parent.replaceChild(matchingNode, currentNode);\n        getData(parent).keyMapValid = false;\n      } else {\n        parent.insertBefore(matchingNode, currentNode);\n      }\n\n      walker.currentNode = matchingNode;\n    }\n\n    return matchingNode;\n  };\n\n\n  /**\n   * Clears out any unvisited Nodes, as the corresponding virtual element\n   * functions were never called for them.\n   * @param {Node} node\n   */\n  var clearUnvisitedDOM = function(node) {\n    var context = getContext();\n    var walker = context.walker;\n    var data = getData(node);\n    var keyMap = data.keyMap;\n    var keyMapValid = data.keyMapValid;\n    var lastVisitedChild = data.lastVisitedChild;\n    var child = node.lastChild;\n    var key;\n\n    data.lastVisitedChild = null;\n\n    if (child === lastVisitedChild && keyMapValid) {\n      return;\n    }\n\n    if (data.attrs[exports.symbols.placeholder] && walker.currentNode !== walker.root) {\n      return;\n    }\n\n    while (child !== lastVisitedChild) {\n      node.removeChild(child);\n      context.markDeleted(/** @type {!Node}*/(child));\n\n      key = getData(child).key;\n      if (key) {\n        delete keyMap[key];\n      }\n      child = node.lastChild;\n    }\n\n    // Clean the keyMap, removing any unusued keys.\n    for (key in keyMap) {\n      child = keyMap[key];\n      if (!child.parentNode) {\n        context.markDeleted(child);\n        delete keyMap[key];\n      }\n    }\n\n    data.keyMapValid = true;\n  };\n\n  /**\n   * Enters an Element, setting the current namespace for nested elements.\n   * @param {Node} node\n   */\n  var enterNode = function(node) {\n    var data = getData(node);\n    enterTag(data.nodeName);\n  };\n\n\n  /**\n   * Exits an Element, unwinding the current namespace to the previous value.\n   * @param {Node} node\n   */\n  var exitNode = function(node) {\n    var data = getData(node);\n    exitTag(data.nodeName);\n  };\n\n\n  /**\n   * Marks node's parent as having visited node.\n   * @param {Node} node\n   */\n  var markVisited = function(node) {\n    var context = getContext();\n    var walker = context.walker;\n    var parent = walker.getCurrentParent();\n    var data = getData(parent);\n    data.lastVisitedChild = node;\n  };\n\n\n  /**\n   * Changes to the first child of the current node.\n   */\n  var firstChild = function() {\n    var context = getContext();\n    var walker = context.walker;\n    enterNode(walker.currentNode);\n    walker.firstChild();\n  };\n\n\n  /**\n   * Changes to the next sibling of the current node.\n   */\n  var nextSibling = function() {\n    var context = getContext();\n    var walker = context.walker;\n    markVisited(walker.currentNode);\n    walker.nextSibling();\n  };\n\n\n  /**\n   * Changes to the parent of the current node, removing any unvisited children.\n   */\n  var parentNode = function() {\n    var context = getContext();\n    var walker = context.walker;\n    walker.parentNode();\n    exitNode(walker.currentNode);\n  };\n\n  if (process.env.NODE_ENV !== 'production') {\n    var assertNoUnclosedTags = function(root) {\n      var openElement = getContext().walker.getCurrentParent();\n      if (!openElement) {\n        return;\n      }\n\n      var openTags = [];\n      while (openElement && openElement !== root) {\n        openTags.push(openElement.nodeName.toLowerCase());\n        openElement = openElement.parentNode;\n      }\n\n      throw new Error('One or more tags were not closed:\\n' +\n          openTags.join('\\n'));\n    };\n  }\n\n\n  /**\n   * Patches the document starting at el with the provided function. This function\n   * may be called during an existing patch operation.\n   * @param {!Element|!DocumentFragment} node The Element or Document\n   *     to patch.\n   * @param {!function(T)} fn A function containing elementOpen/elementClose/etc.\n   *     calls that describe the DOM.\n   * @param {T=} data An argument passed to fn to represent DOM state.\n   * @template T\n   */\n  exports.patch = function(node, fn, data) {\n    enterContext(node);\n\n    firstChild();\n    fn(data);\n    parentNode();\n    clearUnvisitedDOM(node);\n\n    if (process.env.NODE_ENV !== 'production') {\n      assertNoUnclosedTags(node);\n    }\n\n    getContext().notifyChanges();\n    restoreContext();\n  };\n\n  /**\n   * The offset in the virtual element declaration where the attributes are\n   * specified.\n   * @const\n   */\n  var ATTRIBUTES_OFFSET = 3;\n\n\n  /**\n   * Builds an array of arguments for use with elementOpenStart, attr and\n   * elementOpenEnd.\n   * @const {Array<*>}\n   */\n  var argsBuilder = [];\n\n\n  if (process.env.NODE_ENV !== 'production') {\n    /**\n     * Keeps track whether or not we are in an attributes declaration (after\n     * elementOpenStart, but before elementOpenEnd).\n     * @type {boolean}\n     */\n    var inAttributes = false;\n\n\n    /** Makes sure that the caller is not where attributes are expected. */\n    var assertNotInAttributes = function() {\n      if (inAttributes) {\n        throw new Error('Was not expecting a call to attr or elementOpenEnd, ' +\n            'they must follow a call to elementOpenStart.');\n      }\n    };\n\n\n    /** Makes sure that the caller is where attributes are expected. */\n    var assertInAttributes = function() {\n      if (!inAttributes) {\n        throw new Error('Was expecting a call to attr or elementOpenEnd. ' +\n            'elementOpenStart must be followed by zero or more calls to attr, ' +\n            'then one call to elementOpenEnd.');\n      }\n    };\n\n\n    /**\n     * Makes sure that placeholders have a key specified. Otherwise, conditional\n     * placeholders and conditional elements next to placeholders will cause\n     * placeholder elements to be re-used as non-placeholders and vice versa.\n     * @param {string} key\n     */\n    var assertPlaceholderKeySpecified = function(key) {\n      if (!key) {\n        throw new Error('Placeholder elements must have a key specified.');\n      }\n    };\n\n\n    /**\n     * Makes sure that tags are correctly nested.\n     * @param {string} tag\n     */\n    var assertCloseMatchesOpenTag = function(tag) {\n      var context = getContext();\n      var walker = context.walker;\n      var closingNode = walker.getCurrentParent();\n      var data = getData(closingNode);\n\n      if (tag !== data.nodeName) {\n        throw new Error('Received a call to close ' + tag + ' but ' +\n              data.nodeName + ' was open.');\n      }\n    };\n\n\n    /** Updates the state to being in an attribute declaration. */\n    var setInAttributes = function() {\n      inAttributes = true;\n    };\n\n\n    /** Updates the state to not being in an attribute declaration. */\n    var setNotInAttributes = function() {\n      inAttributes = false;\n    };\n  }\n\n\n  /**\n   * @param {string} tag The element's tag.\n   * @param {?string=} key The key used to identify this element. This can be an\n   *     empty string, but performance may be better if a unique value is used\n   *     when iterating over an array of items.\n   * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n   *     static attributes for the Element. These will only be set once when the\n   *     Element is created.\n   * @param {...*} var_args Attribute name/value pairs of the dynamic attributes\n   *     for the Element.\n   * @return {!Element} The corresponding Element.\n   */\n  exports.elementOpen = function(tag, key, statics, var_args) {\n    if (process.env.NODE_ENV !== 'production') {\n      assertNotInAttributes();\n    }\n\n    var node = /** @type {!Element}*/(alignWithDOM(tag, key, statics));\n    var data = getData(node);\n\n    /*\n     * Checks to see if one or more attributes have changed for a given Element.\n     * When no attributes have changed, this is much faster than checking each\n     * individual argument. When attributes have changed, the overhead of this is\n     * minimal.\n     */\n    var attrsArr = data.attrsArr;\n    var attrsChanged = false;\n    var i = ATTRIBUTES_OFFSET;\n    var j = 0;\n\n    for (; i < arguments.length; i += 1, j += 1) {\n      if (attrsArr[j] !== arguments[i]) {\n        attrsChanged = true;\n        break;\n      }\n    }\n\n    for (; i < arguments.length; i += 1, j += 1) {\n      attrsArr[j] = arguments[i];\n    }\n\n    if (j < attrsArr.length) {\n      attrsChanged = true;\n      attrsArr.length = j;\n    }\n\n    /*\n     * Actually perform the attribute update.\n     */\n    if (attrsChanged) {\n      var attr, newAttrs = data.newAttrs;\n\n      for (attr in newAttrs) {\n        newAttrs[attr] = undefined;\n      }\n\n      for (i = ATTRIBUTES_OFFSET; i < arguments.length; i += 2) {\n        newAttrs[arguments[i]] = arguments[i + 1];\n      }\n\n      for (attr in newAttrs) {\n        updateAttribute(node, attr, newAttrs[attr]);\n      }\n    }\n\n    firstChild();\n    return node;\n  };\n\n\n  /**\n   * Declares a virtual Element at the current location in the document. This\n   * corresponds to an opening tag and a elementClose tag is required. This is\n   * like elementOpen, but the attributes are defined using the attr function\n   * rather than being passed as arguments. Must be folllowed by 0 or more calls\n   * to attr, then a call to elementOpenEnd.\n   * @param {string} tag The element's tag.\n   * @param {?string=} key The key used to identify this element. This can be an\n   *     empty string, but performance may be better if a unique value is used\n   *     when iterating over an array of items.\n   * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n   *     static attributes for the Element. These will only be set once when the\n   *     Element is created.\n   */\n  exports.elementOpenStart = function(tag, key, statics) {\n    if (process.env.NODE_ENV !== 'production') {\n      assertNotInAttributes();\n      setInAttributes();\n    }\n\n    argsBuilder[0] = tag;\n    argsBuilder[1] = key;\n    argsBuilder[2] = statics;\n  };\n\n\n  /***\n   * Defines a virtual attribute at this point of the DOM. This is only valid\n   * when called between elementOpenStart and elementOpenEnd.\n   *\n   * @param {string} name\n   * @param {*} value\n   */\n  exports.attr = function(name, value) {\n    if (process.env.NODE_ENV !== 'production') {\n      assertInAttributes();\n    }\n\n    argsBuilder.push(name, value);\n  };\n\n\n  /**\n   * Closes an open tag started with elementOpenStart.\n   * @return {!Element} The corresponding Element.\n   */\n  exports.elementOpenEnd = function() {\n    if (process.env.NODE_ENV !== 'production') {\n      assertInAttributes();\n      setNotInAttributes();\n    }\n\n    var node = exports.elementOpen.apply(null, argsBuilder);\n    argsBuilder.length = 0;\n    return node;\n  };\n\n\n  /**\n   * Closes an open virtual Element.\n   *\n   * @param {string} tag The element's tag.\n   * @return {!Element} The corresponding Element.\n   */\n  exports.elementClose = function(tag) {\n    if (process.env.NODE_ENV !== 'production') {\n      assertNotInAttributes();\n      assertCloseMatchesOpenTag(tag);\n    }\n\n    parentNode();\n\n    var node = /** @type {!Element} */(getContext().walker.currentNode);\n\n    clearUnvisitedDOM(node);\n\n    nextSibling();\n    return node;\n  };\n\n\n  /**\n   * Declares a virtual Element at the current location in the document that has\n   * no children.\n   * @param {string} tag The element's tag.\n   * @param {?string=} key The key used to identify this element. This can be an\n   *     empty string, but performance may be better if a unique value is used\n   *     when iterating over an array of items.\n   * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n   *     static attributes for the Element. These will only be set once when the\n   *     Element is created.\n   * @param {...*} var_args Attribute name/value pairs of the dynamic attributes\n   *     for the Element.\n   * @return {!Element} The corresponding Element.\n   */\n  exports.elementVoid = function(tag, key, statics, var_args) {\n    var node = exports.elementOpen.apply(null, arguments);\n    exports.elementClose.apply(null, arguments);\n    return node;\n  };\n\n\n  /**\n   * Declares a virtual Element at the current location in the document that is a\n   * placeholder element. Children of this Element can be manually managed and\n   * will not be cleared by the library.\n   *\n   * A key must be specified to make sure that this node is correctly preserved\n   * across all conditionals.\n   *\n   * @param {string} tag The element's tag.\n   * @param {string} key The key used to identify this element.\n   * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n   *     static attributes for the Element. These will only be set once when the\n   *     Element is created.\n   * @param {...*} var_args Attribute name/value pairs of the dynamic attributes\n   *     for the Element.\n   * @return {!Element} The corresponding Element.\n   */\n  exports.elementPlaceholder = function(tag, key, statics, var_args) {\n    if (process.env.NODE_ENV !== 'production') {\n      assertPlaceholderKeySpecified(key);\n    }\n\n    var node = exports.elementOpen.apply(null, arguments);\n    updateAttribute(node, exports.symbols.placeholder, true);\n    exports.elementClose.apply(null, arguments);\n    return node;\n  };\n\n\n  /**\n   * Declares a virtual Text at this point in the document.\n   *\n   * @param {string|number|boolean} value The value of the Text.\n   * @param {...(function((string|number|boolean)):string)} var_args\n   *     Functions to format the value which are called only when the value has\n   *     changed.\n   * @return {!Text} The corresponding text node.\n   */\n  exports.text = function(value, var_args) {\n    if (process.env.NODE_ENV !== 'production') {\n      assertNotInAttributes();\n    }\n\n    var node = /** @type {!Text}*/(alignWithDOM('#text', null));\n    var data = getData(node);\n\n    if (data.text !== value) {\n      data.text = /** @type {string} */(value);\n\n      var formatted = value;\n      for (var i = 1; i < arguments.length; i += 1) {\n        formatted = arguments[i](formatted);\n      }\n\n      node.data = formatted;\n    }\n\n    nextSibling();\n    return node;\n  };\n\n}));\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Similar to the built-in Treewalker class, but simplified and allows direct\n * access to modify the currentNode property.\n * @param {!Element|!DocumentFragment} node The root Node of the subtree the\n *     walker should start traversing.\n * @constructor\n */\nfunction TreeWalker(node) {\n  /**\n   * Keeps track of the current parent node. This is necessary as the traversal\n   * methods may traverse past the last child and we still need a way to get\n   * back to the parent.\n   * @const @private {!Array<!Node>}\n   */\n  this.stack_ = [];\n\n  /**\n   * @const {!Element|!DocumentFragment}\n   */\n  this.root = node;\n\n  /**\n   * @type {?Node}\n   */\n  this.currentNode = node;\n}\n\n\n/**\n * @return {!Node} The current parent of the current location in the subtree.\n */\nTreeWalker.prototype.getCurrentParent = function() {\n  return this.stack_[this.stack_.length - 1];\n};\n\n\n/**\n * Changes the current location the firstChild of the current location.\n */\nTreeWalker.prototype.firstChild = function() {\n  this.stack_.push(this.currentNode);\n  this.currentNode = this.currentNode.firstChild;\n};\n\n\n/**\n * Changes the current location the nextSibling of the current location.\n */\nTreeWalker.prototype.nextSibling = function() {\n  this.currentNode = this.currentNode.nextSibling;\n};\n\n\n/**\n * Changes the current location the parentNode of the current location.\n */\nTreeWalker.prototype.parentNode = function() {\n  this.currentNode = this.stack_.pop();\n};\n\n\n/** */\nexport {\n  TreeWalker\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TreeWalker } from './tree_walker';\nimport { notifications } from './notifications';\n\n\n/**\n * Keeps track of the state of a patch.\n * @param {!Element|!DocumentFragment} node The root Node of the subtree the\n *     is for.\n * @param {?Context} prevContext The previous context.\n * @constructor\n */\nfunction Context(node, prevContext) {\n  /**\n   * @const {TreeWalker}\n   */\n  this.walker = new TreeWalker(node);\n\n  /**\n   * @const {Document}\n   */\n  this.doc = node.ownerDocument;\n\n  /**\n   * Keeps track of what namespace to create new Elements in.\n   * @private\n   * @const {!Array<(string|undefined)>}\n   */\n  this.nsStack_ = [undefined];\n\n  /**\n   * @const {?Context}\n   */\n  this.prevContext = prevContext;\n\n  /**\n   * @type {(Array<!Node>|undefined)}\n   */\n  this.created = notifications.nodesCreated && [];\n\n  /**\n   * @type {(Array<!Node>|undefined)}\n   */\n  this.deleted = notifications.nodesDeleted && [];\n}\n\n\n/**\n * @return {(string|undefined)} The current namespace to create Elements in.\n */\nContext.prototype.getCurrentNamespace = function() {\n  return this.nsStack_[this.nsStack_.length - 1];\n};\n\n\n/**\n * @param {string=} namespace The namespace to enter.\n */\nContext.prototype.enterNamespace = function(namespace) {\n  this.nsStack_.push(namespace);\n};\n\n\n/**\n * Exits the current namespace\n */\nContext.prototype.exitNamespace = function() {\n  this.nsStack_.pop();\n};\n\n\n/**\n * @param {!Node} node\n */\nContext.prototype.markCreated = function(node) {\n  if (this.created) {\n    this.created.push(node);\n  }\n};\n\n\n/**\n * @param {!Node} node\n */\nContext.prototype.markDeleted = function(node) {\n  if (this.deleted) {\n    this.deleted.push(node);\n  }\n};\n\n\n/**\n * Notifies about nodes that were created during the patch opearation.\n */\nContext.prototype.notifyChanges = function() {\n  if (this.created && this.created.length > 0) {\n    notifications.nodesCreated(this.created);\n  }\n\n  if (this.deleted && this.deleted.length > 0) {\n    notifications.nodesDeleted(this.deleted);\n  }\n};\n\n\n/**\n * The current context.\n * @type {?Context}\n */\nvar context;\n\n\n/**\n * Enters a new patch context.\n * @param {!Element|!DocumentFragment} node\n */\nvar enterContext = function(node) {\n  context = new Context(node, context);\n};\n\n\n/**\n * Restores the previous patch context.\n */\nvar restoreContext = function() {\n  context = context.prevContext;\n};\n\n\n/**\n * Gets the current patch context.\n * @return {?Context}\n */\nvar getContext = function() {\n  return context;\n};\n\n\n/** */\nexport {\n  enterContext,\n  restoreContext,\n  getContext\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createMap } from './util';\n\n\n/**\n * Keeps track of information needed to perform diffs for a given DOM node.\n * @param {!string} nodeName\n * @param {?string=} key\n * @constructor\n */\nfunction NodeData(nodeName, key) {\n  /**\n   * The attributes and their values.\n   * @const\n   */\n  this.attrs = createMap();\n\n  /**\n   * An array of attribute name/value pairs, used for quickly diffing the\n   * incomming attributes to see if the DOM node's attributes need to be\n   * updated.\n   * @const {Array<*>}\n   */\n  this.attrsArr = [];\n\n  /**\n   * The incoming attributes for this Node, before they are updated.\n   * @const {!Object<string, *>}\n   */\n  this.newAttrs = createMap();\n\n  /**\n   * The key used to identify this node, used to preserve DOM nodes when they\n   * move within their parent.\n   * @const\n   */\n  this.key = key;\n\n  /**\n   * Keeps track of children within this node by their key.\n   * {?Object<string, !Element>}\n   */\n  this.keyMap = null;\n\n  /**\n   * Whether or not the keyMap is currently valid.\n   * {boolean}\n   */\n  this.keyMapValid = true;\n\n  /**\n   * The last child to have been visited within the current pass.\n   * @type {?Node}\n   */\n  this.lastVisitedChild = null;\n\n  /**\n   * The node name for this node.\n   * @const {string}\n   */\n  this.nodeName = nodeName;\n\n  /**\n   * @type {?string}\n   */\n  this.text = null;\n}\n\n\n/**\n * Initializes a NodeData object for a Node.\n *\n * @param {Node} node The node to initialize data for.\n * @param {string} nodeName The node name of node.\n * @param {?string=} key The key that identifies the node.\n * @return {!NodeData} The newly initialized data object\n */\nvar initData = function(node, nodeName, key) {\n  var data = new NodeData(nodeName, key);\n  node['__incrementalDOMData'] = data;\n  return data;\n};\n\n\n/**\n * Retrieves the NodeData object for a Node, creating it if necessary.\n *\n * @param {Node} node The node to retrieve the data for.\n * @return {!NodeData} The NodeData for this Node.\n */\nvar getData = function(node) {\n  var data = node['__incrementalDOMData'];\n\n  if (!data) {\n    var nodeName = node.nodeName.toLowerCase();\n    var key = null;\n\n    if (node instanceof Element) {\n      key = node.getAttribute('key');\n    }\n\n    data = initData(node, nodeName, key);\n  }\n\n  return data;\n};\n\n\n/** */\nexport {\n  getData,\n  initData\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** */\nvar notifications = {\n  /**\n   * Called after patch has compleated with any Nodes that have been created\n   * and added to the DOM.\n   * @type {?function(Array<!Node>)}\n   */\n  nodesCreated: null,\n\n  /**\n   * Called after patch has compleated with any Nodes that have been removed\n   * from the DOM.\n   * Note it's an applications responsibility to handle any childNodes.\n   * @type {?function(Array<!Node>)}\n   */\n  nodesDeleted: null\n};\n\nexport {\n  notifications\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * A cached reference to the hasOwnProperty function.\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\n\n/**\n * A cached reference to the create function.\n */\nvar create = Object.create;\n\n\n/**\n * Used to prevent property collisions between our \"map\" and its prototype.\n * @param {!Object<string, *>} map The map to check.\n * @param {string} property The property to check.\n * @return {boolean} Whether map has property.\n */\nvar has = function(map, property) {\n  return hasOwnProperty.call(map, property);\n};\n\n\n/**\n * Creates an map object without a prototype.\n * @return {!Object}\n */\nvar createMap = function() {\n  return create(null);\n};\n\n\n/** */\nexport {\n  createMap,\n  has\n};\n\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar symbols = {\n  default: '__default',\n\n  placeholder: '__placeholder'\n};\n\n/** */\nexport {\n  symbols\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getData } from './node_data';\nimport { symbols } from './symbols';\nimport {\n  createMap,\n  has\n} from './util';\n\n\n/**\n * Applies an attribute or property to a given Element. If the value is null\n * or undefined, it is removed from the Element. Otherwise, the value is set\n * as an attribute.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {?(boolean|number|string)=} value The attribute's value.\n */\nvar applyAttr = function(el, name, value) {\n  if (value == null) {\n    el.removeAttribute(name);\n  } else {\n    el.setAttribute(name, value);\n  }\n};\n\n/**\n * Applies a property to a given Element.\n * @param {!Element} el\n * @param {string} name The property's name.\n * @param {*} value The property's value.\n */\nvar applyProp = function(el, name, value) {\n  el[name] = value;\n};\n\n\n/**\n * Applies a style to an Element. No vendor prefix expansion is done for\n * property names/values.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {string|Object<string,string>} style The style to set. Either a\n *     string of css or an object containing property-value pairs.\n */\nvar applyStyle = function(el, name, style) {\n  if (typeof style === 'string') {\n    el.style.cssText = style;\n  } else {\n    el.style.cssText = '';\n    var elStyle = el.style;\n\n    for (var prop in style) {\n      if (has(style, prop)) {\n        elStyle[prop] = style[prop];\n      }\n    }\n  }\n};\n\n\n/**\n * Updates a single attribute on an Element.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {*} value The attribute's value. If the value is an object or\n *     function it is set on the Element, otherwise, it is set as an HTML\n *     attribute.\n */\nvar applyAttributeTyped = function(el, name, value) {\n  var type = typeof value;\n\n  if (type === 'object' || type === 'function') {\n    applyProp(el, name, value);\n  } else {\n    applyAttr(el, name, /** @type {?(boolean|number|string)} */(value));\n  }\n};\n\n\n/**\n * Calls the appropriate attribute mutator for this attribute.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {*} value The attribute's value.\n */\nvar updateAttribute = function(el, name, value) {\n  var data = getData(el);\n  var attrs = data.attrs;\n\n  if (attrs[name] === value) {\n    return;\n  }\n\n  var mutator = attributes[name] || attributes[symbols.default];\n  mutator(el, name, value);\n\n  attrs[name] = value;\n};\n\n\n/**\n * A publicly mutable object to provide custom mutators for attributes.\n * @const {!Object<string, function(!Element, string, *)>}\n */\nvar attributes = createMap();\n\n// Special generic mutator that's called for any attribute that does not\n// have a specific mutator.\nattributes[symbols.default] = applyAttributeTyped;\n\nattributes[symbols.placeholder] = function() {};\n\nattributes['style'] = applyStyle;\n\n\n/** */\nexport {\n  updateAttribute,\n  applyProp,\n  applyAttr,\n  attributes\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getContext } from './context';\n\nvar SVG_NS = 'http://www.w3.org/2000/svg';\n\n/**\n * Enters a tag, checking to see if it is a namespace boundary, and if so,\n * updates the current namespace.\n * @param {string} tag The tag to enter.\n */\nvar enterTag = function(tag) {\n  if (tag === 'svg') {\n    getContext().enterNamespace(SVG_NS);\n  } else if (tag === 'foreignObject') {\n    getContext().enterNamespace(undefined);\n  }\n};\n\n\n/**\n * Exits a tag, checking to see if it is a namespace boundary, and if so,\n * updates the current namespace.\n * @param {string} tag The tag to enter.\n */\nvar exitTag = function(tag) {\n  if (tag === 'svg' || tag === 'foreignObject') {\n    getContext().exitNamespace();\n  }\n};\n\n\n/**\n * Gets the namespace to create an element (of a given tag) in.\n * @param {string} tag The tag to get the namespace for.\n * @return {(string|undefined)} The namespace to create the tag in.\n */\nvar getNamespaceForTag = function(tag) {\n  if (tag === 'svg') {\n    return SVG_NS;\n  }\n\n  return getContext().getCurrentNamespace();\n};\n\n\n/** */\nexport {\n  enterTag,\n  exitTag,\n  getNamespaceForTag\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { updateAttribute } from './attributes';\nimport {\n    getData,\n    initData\n} from './node_data';\nimport { getNamespaceForTag } from './namespace';\nimport { createMap } from './util';\n\n\n// For https://github.com/esperantojs/esperanto/issues/187\nvar dummy;\n\n\n/**\n * Creates an Element.\n * @param {Document} doc The document with which to create the Element.\n * @param {string} tag The tag for the Element.\n * @param {?string=} key A key to identify the Element.\n * @param {?Array<*>=} statics An array of attribute name/value pairs of\n *     the static attributes for the Element.\n * @return {!Element}\n */\nvar createElement = function(doc, tag, key, statics) {\n  var namespace = getNamespaceForTag(tag);\n  var el;\n\n  if (namespace) {\n    el = doc.createElementNS(namespace, tag);\n  } else {\n    el = doc.createElement(tag);\n  }\n\n  initData(el, tag, key);\n\n  if (statics) {\n    for (var i = 0; i < statics.length; i += 2) {\n      updateAttribute(el, /** @type {!string}*/(statics[i]), statics[i + 1]);\n    }\n  }\n\n  return el;\n};\n\n\n/**\n * Creates a Node, either a Text or an Element depending on the node name\n * provided.\n * @param {Document} doc The document with which to create the Node.\n * @param {string} nodeName The tag if creating an element or #text to create\n *     a Text.\n * @param {?string=} key A key to identify the Element.\n * @param {?Array<*>=} statics The static data to initialize the Node\n *     with. For an Element, an array of attribute name/value pairs of\n *     the static attributes for the Element.\n * @return {!Node}\n */\nvar createNode = function(doc, nodeName, key, statics) {\n  if (nodeName === '#text') {\n    return doc.createTextNode('');\n  }\n\n  return createElement(doc, nodeName, key, statics);\n};\n\n\n/**\n * Creates a mapping that can be used to look up children using a key.\n * @param {!Node} el\n * @return {!Object<string, !Element>} A mapping of keys to the children of the\n *     Element.\n */\nvar createKeyMap = function(el) {\n  var map = createMap();\n  var children = el.children;\n  var count = children.length;\n\n  for (var i = 0; i < count; i += 1) {\n    var child = children[i];\n    var key = getData(child).key;\n\n    if (key) {\n      map[key] = child;\n    }\n  }\n\n  return map;\n};\n\n\n/**\n * Retrieves the mapping of key to child node for a given Element, creating it\n * if necessary.\n * @param {!Node} el\n * @return {!Object<string, !Node>} A mapping of keys to child Elements\n */\nvar getKeyMap = function(el) {\n  var data = getData(el);\n\n  if (!data.keyMap) {\n    data.keyMap = createKeyMap(el);\n  }\n\n  return data.keyMap;\n};\n\n\n/**\n * Retrieves a child from the parent with the given key.\n * @param {!Node} parent\n * @param {?string=} key\n * @return {?Element} The child corresponding to the key.\n */\nvar getChild = function(parent, key) {\n  return /** @type {?Element} */(key && getKeyMap(parent)[key]);\n};\n\n\n/**\n * Registers an element as being a child. The parent will keep track of the\n * child using the key. The child can be retrieved using the same key using\n * getKeyMap. The provided key should be unique within the parent Element.\n * @param {!Node} parent The parent of child.\n * @param {string} key A key to identify the child with.\n * @param {!Node} child The child to register.\n */\nvar registerChild = function(parent, key, child) {\n  getKeyMap(parent)[key] = child;\n};\n\n\n/** */\nexport {\n  createNode,\n  getChild,\n  registerChild\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    createNode,\n    getChild,\n    registerChild\n} from './nodes';\nimport { getData } from './node_data';\nimport { getContext } from './context';\nimport { symbols } from './symbols';\n\n// For https://github.com/esperantojs/esperanto/issues/187\nvar dummy;\n\n\nif (process.env.NODE_ENV !== 'production') {\n  /**\n  * Makes sure that keyed Element matches the tag name provided.\n  * @param {!Element} node The node that is being matched.\n  * @param {string=} tag The tag name of the Element.\n  * @param {?string=} key The key of the Element.\n  */\n  var assertKeyedTagMatches = function(node, tag, key) {\n    var nodeName = getData(node).nodeName;\n    if (nodeName !== tag) {\n      throw new Error('Was expecting node with key \"' + key + '\" to be a ' +\n          tag + ', not a ' + nodeName + '.');\n    }\n  };\n}\n\n\n/**\n * Checks whether or not a given node matches the specified nodeName and key.\n *\n * @param {!Node} node An HTML node, typically an HTMLElement or Text.\n * @param {?string} nodeName The nodeName for this node.\n * @param {?string=} key An optional key that identifies a node.\n * @return {boolean} True if the node matches, false otherwise.\n */\nvar matches = function(node, nodeName, key) {\n  var data = getData(node);\n\n  // Key check is done using double equals as we want to treat a null key the\n  // same as undefined. This should be okay as the only values allowed are\n  // strings, null and undefined so the == semantics are not too weird.\n  return key == data.key && nodeName === data.nodeName;\n};\n\n\n/**\n * Aligns the virtual Element definition with the actual DOM, moving the\n * corresponding DOM node to the correct location or creating it if necessary.\n * @param {string} nodeName For an Element, this should be a valid tag string.\n *     For a Text, this should be #text.\n * @param {?string=} key The key used to identify this element.\n * @param {?Array<*>=} statics For an Element, this should be an array of\n *     name-value pairs.\n * @return {!Node} The matching node.\n */\nvar alignWithDOM = function(nodeName, key, statics) {\n  var context = getContext();\n  var walker = context.walker;\n  var currentNode = walker.currentNode;\n  var parent = walker.getCurrentParent();\n  var matchingNode;\n\n  // Check to see if we have a node to reuse\n  if (currentNode && matches(currentNode, nodeName, key)) {\n    matchingNode = currentNode;\n  } else {\n    var existingNode = getChild(parent, key);\n\n    // Check to see if the node has moved within the parent or if a new one\n    // should be created\n    if (existingNode) {\n      if (process.env.NODE_ENV !== 'production') {\n        assertKeyedTagMatches(existingNode, nodeName, key);\n      }\n\n      matchingNode = existingNode;\n    } else {\n      matchingNode = createNode(context.doc, nodeName, key, statics);\n\n      if (key) {\n        registerChild(parent, key, matchingNode);\n      }\n\n      context.markCreated(matchingNode);\n    }\n\n    // If the node has a key, remove it from the DOM to prevent a large number\n    // of re-orders in the case that it moved far or was completely removed.\n    // Since we hold on to a reference through the keyMap, we can always add it\n    // back.\n    if (currentNode && getData(currentNode).key) {\n      parent.replaceChild(matchingNode, currentNode);\n      getData(parent).keyMapValid = false;\n    } else {\n      parent.insertBefore(matchingNode, currentNode);\n    }\n\n    walker.currentNode = matchingNode;\n  }\n\n  return matchingNode;\n};\n\n\n/**\n * Clears out any unvisited Nodes, as the corresponding virtual element\n * functions were never called for them.\n * @param {Node} node\n */\nvar clearUnvisitedDOM = function(node) {\n  var context = getContext();\n  var walker = context.walker;\n  var data = getData(node);\n  var keyMap = data.keyMap;\n  var keyMapValid = data.keyMapValid;\n  var lastVisitedChild = data.lastVisitedChild;\n  var child = node.lastChild;\n  var key;\n\n  data.lastVisitedChild = null;\n\n  if (child === lastVisitedChild && keyMapValid) {\n    return;\n  }\n\n  if (data.attrs[symbols.placeholder] && walker.currentNode !== walker.root) {\n    return;\n  }\n\n  while (child !== lastVisitedChild) {\n    node.removeChild(child);\n    context.markDeleted(/** @type {!Node}*/(child));\n\n    key = getData(child).key;\n    if (key) {\n      delete keyMap[key];\n    }\n    child = node.lastChild;\n  }\n\n  // Clean the keyMap, removing any unusued keys.\n  for (key in keyMap) {\n    child = keyMap[key];\n    if (!child.parentNode) {\n      context.markDeleted(child);\n      delete keyMap[key];\n    }\n  }\n\n  data.keyMapValid = true;\n};\n\n\n/** */\nexport {\n  alignWithDOM,\n  clearUnvisitedDOM\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getContext } from './context';\nimport { getData } from './node_data';\nimport {\n  enterTag,\n  exitTag\n} from './namespace';\n\n\n// For https://github.com/esperantojs/esperanto/issues/187\nvar dummy;\n\n\n/**\n * Enters an Element, setting the current namespace for nested elements.\n * @param {Node} node\n */\nvar enterNode = function(node) {\n  var data = getData(node);\n  enterTag(data.nodeName);\n};\n\n\n/**\n * Exits an Element, unwinding the current namespace to the previous value.\n * @param {Node} node\n */\nvar exitNode = function(node) {\n  var data = getData(node);\n  exitTag(data.nodeName);\n};\n\n\n/**\n * Marks node's parent as having visited node.\n * @param {Node} node\n */\nvar markVisited = function(node) {\n  var context = getContext();\n  var walker = context.walker;\n  var parent = walker.getCurrentParent();\n  var data = getData(parent);\n  data.lastVisitedChild = node;\n};\n\n\n/**\n * Changes to the first child of the current node.\n */\nvar firstChild = function() {\n  var context = getContext();\n  var walker = context.walker;\n  enterNode(walker.currentNode);\n  walker.firstChild();\n};\n\n\n/**\n * Changes to the next sibling of the current node.\n */\nvar nextSibling = function() {\n  var context = getContext();\n  var walker = context.walker;\n  markVisited(walker.currentNode);\n  walker.nextSibling();\n};\n\n\n/**\n * Changes to the parent of the current node, removing any unvisited children.\n */\nvar parentNode = function() {\n  var context = getContext();\n  var walker = context.walker;\n  walker.parentNode();\n  exitNode(walker.currentNode);\n};\n\n\n/** */\nexport {\n  firstChild,\n  nextSibling,\n  parentNode\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    firstChild,\n    parentNode\n} from './traversal';\nimport { TreeWalker } from './tree_walker';\nimport {\n    getContext,\n    enterContext,\n    restoreContext\n} from './context';\nimport { clearUnvisitedDOM } from './alignment';\nimport { notifications } from './notifications';\n\n\n// For https://github.com/esperantojs/esperanto/issues/187\nvar dummy;\n\n\nif (process.env.NODE_ENV !== 'production') {\n  var assertNoUnclosedTags = function(root) {\n    var openElement = getContext().walker.getCurrentParent();\n    if (!openElement) {\n      return;\n    }\n\n    var openTags = [];\n    while (openElement && openElement !== root) {\n      openTags.push(openElement.nodeName.toLowerCase());\n      openElement = openElement.parentNode;\n    }\n\n    throw new Error('One or more tags were not closed:\\n' +\n        openTags.join('\\n'));\n  };\n}\n\n\n/**\n * Patches the document starting at el with the provided function. This function\n * may be called during an existing patch operation.\n * @param {!Element|!DocumentFragment} node The Element or Document\n *     to patch.\n * @param {!function(T)} fn A function containing elementOpen/elementClose/etc.\n *     calls that describe the DOM.\n * @param {T=} data An argument passed to fn to represent DOM state.\n * @template T\n */\nvar patch = function(node, fn, data) {\n  enterContext(node);\n\n  firstChild();\n  fn(data);\n  parentNode();\n  clearUnvisitedDOM(node);\n\n  if (process.env.NODE_ENV !== 'production') {\n    assertNoUnclosedTags(node);\n  }\n\n  getContext().notifyChanges();\n  restoreContext();\n};\n\n\n/** */\nexport {\n  patch\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  alignWithDOM,\n  clearUnvisitedDOM\n} from './alignment';\nimport { updateAttribute } from './attributes';\nimport { getData } from './node_data';\nimport { getContext } from './context';\nimport {\n    firstChild,\n    nextSibling,\n    parentNode\n} from './traversal';\nimport { symbols } from './symbols';\n\n\n// For https://github.com/esperantojs/esperanto/issues/187\nvar dummy;\n\n\n/**\n * The offset in the virtual element declaration where the attributes are\n * specified.\n * @const\n */\nvar ATTRIBUTES_OFFSET = 3;\n\n\n/**\n * Builds an array of arguments for use with elementOpenStart, attr and\n * elementOpenEnd.\n * @const {Array<*>}\n */\nvar argsBuilder = [];\n\n\nif (process.env.NODE_ENV !== 'production') {\n  /**\n   * Keeps track whether or not we are in an attributes declaration (after\n   * elementOpenStart, but before elementOpenEnd).\n   * @type {boolean}\n   */\n  var inAttributes = false;\n\n\n  /** Makes sure that the caller is not where attributes are expected. */\n  var assertNotInAttributes = function() {\n    if (inAttributes) {\n      throw new Error('Was not expecting a call to attr or elementOpenEnd, ' +\n          'they must follow a call to elementOpenStart.');\n    }\n  };\n\n\n  /** Makes sure that the caller is where attributes are expected. */\n  var assertInAttributes = function() {\n    if (!inAttributes) {\n      throw new Error('Was expecting a call to attr or elementOpenEnd. ' +\n          'elementOpenStart must be followed by zero or more calls to attr, ' +\n          'then one call to elementOpenEnd.');\n    }\n  };\n\n\n  /**\n   * Makes sure that placeholders have a key specified. Otherwise, conditional\n   * placeholders and conditional elements next to placeholders will cause\n   * placeholder elements to be re-used as non-placeholders and vice versa.\n   * @param {string} key\n   */\n  var assertPlaceholderKeySpecified = function(key) {\n    if (!key) {\n      throw new Error('Placeholder elements must have a key specified.');\n    }\n  };\n\n\n  /**\n   * Makes sure that tags are correctly nested.\n   * @param {string} tag\n   */\n  var assertCloseMatchesOpenTag = function(tag) {\n    var context = getContext();\n    var walker = context.walker;\n    var closingNode = walker.getCurrentParent();\n    var data = getData(closingNode);\n\n    if (tag !== data.nodeName) {\n      throw new Error('Received a call to close ' + tag + ' but ' +\n            data.nodeName + ' was open.');\n    }\n  };\n\n\n  /** Updates the state to being in an attribute declaration. */\n  var setInAttributes = function() {\n    inAttributes = true;\n  };\n\n\n  /** Updates the state to not being in an attribute declaration. */\n  var setNotInAttributes = function() {\n    inAttributes = false;\n  };\n}\n\n\n/**\n * @param {string} tag The element's tag.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n *     static attributes for the Element. These will only be set once when the\n *     Element is created.\n * @param {...*} var_args Attribute name/value pairs of the dynamic attributes\n *     for the Element.\n * @return {!Element} The corresponding Element.\n */\nvar elementOpen = function(tag, key, statics, var_args) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNotInAttributes();\n  }\n\n  var node = /** @type {!Element}*/(alignWithDOM(tag, key, statics));\n  var data = getData(node);\n\n  /*\n   * Checks to see if one or more attributes have changed for a given Element.\n   * When no attributes have changed, this is much faster than checking each\n   * individual argument. When attributes have changed, the overhead of this is\n   * minimal.\n   */\n  var attrsArr = data.attrsArr;\n  var attrsChanged = false;\n  var i = ATTRIBUTES_OFFSET;\n  var j = 0;\n\n  for (; i < arguments.length; i += 1, j += 1) {\n    if (attrsArr[j] !== arguments[i]) {\n      attrsChanged = true;\n      break;\n    }\n  }\n\n  for (; i < arguments.length; i += 1, j += 1) {\n    attrsArr[j] = arguments[i];\n  }\n\n  if (j < attrsArr.length) {\n    attrsChanged = true;\n    attrsArr.length = j;\n  }\n\n  /*\n   * Actually perform the attribute update.\n   */\n  if (attrsChanged) {\n    var attr, newAttrs = data.newAttrs;\n\n    for (attr in newAttrs) {\n      newAttrs[attr] = undefined;\n    }\n\n    for (i = ATTRIBUTES_OFFSET; i < arguments.length; i += 2) {\n      newAttrs[arguments[i]] = arguments[i + 1];\n    }\n\n    for (attr in newAttrs) {\n      updateAttribute(node, attr, newAttrs[attr]);\n    }\n  }\n\n  firstChild();\n  return node;\n};\n\n\n/**\n * Declares a virtual Element at the current location in the document. This\n * corresponds to an opening tag and a elementClose tag is required. This is\n * like elementOpen, but the attributes are defined using the attr function\n * rather than being passed as arguments. Must be folllowed by 0 or more calls\n * to attr, then a call to elementOpenEnd.\n * @param {string} tag The element's tag.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n *     static attributes for the Element. These will only be set once when the\n *     Element is created.\n */\nvar elementOpenStart = function(tag, key, statics) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNotInAttributes();\n    setInAttributes();\n  }\n\n  argsBuilder[0] = tag;\n  argsBuilder[1] = key;\n  argsBuilder[2] = statics;\n};\n\n\n/***\n * Defines a virtual attribute at this point of the DOM. This is only valid\n * when called between elementOpenStart and elementOpenEnd.\n *\n * @param {string} name\n * @param {*} value\n */\nvar attr = function(name, value) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertInAttributes();\n  }\n\n  argsBuilder.push(name, value);\n};\n\n\n/**\n * Closes an open tag started with elementOpenStart.\n * @return {!Element} The corresponding Element.\n */\nvar elementOpenEnd = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    assertInAttributes();\n    setNotInAttributes();\n  }\n\n  var node = elementOpen.apply(null, argsBuilder);\n  argsBuilder.length = 0;\n  return node;\n};\n\n\n/**\n * Closes an open virtual Element.\n *\n * @param {string} tag The element's tag.\n * @return {!Element} The corresponding Element.\n */\nvar elementClose = function(tag) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNotInAttributes();\n    assertCloseMatchesOpenTag(tag);\n  }\n\n  parentNode();\n\n  var node = /** @type {!Element} */(getContext().walker.currentNode);\n\n  clearUnvisitedDOM(node);\n\n  nextSibling();\n  return node;\n};\n\n\n/**\n * Declares a virtual Element at the current location in the document that has\n * no children.\n * @param {string} tag The element's tag.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n *     static attributes for the Element. These will only be set once when the\n *     Element is created.\n * @param {...*} var_args Attribute name/value pairs of the dynamic attributes\n *     for the Element.\n * @return {!Element} The corresponding Element.\n */\nvar elementVoid = function(tag, key, statics, var_args) {\n  var node = elementOpen.apply(null, arguments);\n  elementClose.apply(null, arguments);\n  return node;\n};\n\n\n/**\n * Declares a virtual Element at the current location in the document that is a\n * placeholder element. Children of this Element can be manually managed and\n * will not be cleared by the library.\n *\n * A key must be specified to make sure that this node is correctly preserved\n * across all conditionals.\n *\n * @param {string} tag The element's tag.\n * @param {string} key The key used to identify this element.\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n *     static attributes for the Element. These will only be set once when the\n *     Element is created.\n * @param {...*} var_args Attribute name/value pairs of the dynamic attributes\n *     for the Element.\n * @return {!Element} The corresponding Element.\n */\nvar elementPlaceholder = function(tag, key, statics, var_args) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertPlaceholderKeySpecified(key);\n  }\n\n  var node = elementOpen.apply(null, arguments);\n  updateAttribute(node, symbols.placeholder, true);\n  elementClose.apply(null, arguments);\n  return node;\n};\n\n\n/**\n * Declares a virtual Text at this point in the document.\n *\n * @param {string|number|boolean} value The value of the Text.\n * @param {...(function((string|number|boolean)):string)} var_args\n *     Functions to format the value which are called only when the value has\n *     changed.\n * @return {!Text} The corresponding text node.\n */\nvar text = function(value, var_args) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNotInAttributes();\n  }\n\n  var node = /** @type {!Text}*/(alignWithDOM('#text', null));\n  var data = getData(node);\n\n  if (data.text !== value) {\n    data.text = /** @type {string} */(value);\n\n    var formatted = value;\n    for (var i = 1; i < arguments.length; i += 1) {\n      formatted = arguments[i](formatted);\n    }\n\n    node.data = formatted;\n  }\n\n  nextSibling();\n  return node;\n};\n\n\n/** */\nexport {\n  elementOpenStart,\n  elementOpenEnd,\n  elementOpen,\n  elementVoid,\n  elementClose,\n  elementPlaceholder,\n  text,\n  attr\n};\n"],"sourceRoot":"/source/"}