!function(t,e){"function"==typeof define&&define.amd?define(function(){return e()}):"undefined"!=typeof module&&"object"==typeof exports?module.exports=e():t.Wkt=e()}(this,function(){var t,e,s,i;return s=this,i=function(t){return t instanceof i?t:this instanceof i?void(this._wrapped=t):new i(t)},t=function(t,e){return t.substring(0,e.length)===e},e=function(t,e){return t.substring(t.length-e.length)===e},i.delimiter=" ",i.isArray=function(t){return!(!t||t.constructor!==Array)},i.trim=function(s,i){for(i=i||" ";t(s,i);)s=s.substring(1);for(;e(s,i);)s=s.substring(0,s.length-1);return s},i.Wkt=function(t){this.delimiter=i.delimiter||" ",this.wrapVertices=!0,this.regExes={typeStr:/^\s*(\w+)\s*\(\s*(.*)\s*\)\s*$/,spaces:/\s+|\+/,numeric:/-*\d+(\.*\d+)?/,comma:/\s*,\s*/,parenComma:/\)\s*,\s*\(/,coord:/-*\d+\.*\d+ -*\d+\.*\d+/,doubleParenComma:/\)\s*\)\s*,\s*\(\s*\(/,trimParens:/^\s*\(?(.*?)\)?\s*$/,ogcTypes:/^(multi)?(point|line|polygon|box)?(string)?$/i,crudeJson:/^{.*"(type|coordinates|geometries|features)":.*}$/},this.components=void 0,t&&"string"==typeof t?this.read(t):t&&void 0!==typeof t&&this.fromObject(t)},i.Wkt.prototype.isCollection=function(){switch(this.type.slice(0,5)){case"multi":return!0;case"polyg":return!0;default:return!1}},i.Wkt.prototype.sameCoords=function(t,e){return t.x===e.x&&t.y===e.y},i.Wkt.prototype.fromObject=function(t){var e;return e=t.hasOwnProperty("type")&&t.hasOwnProperty("coordinates")?this.fromJson(t):this.deconstruct.call(this,t),this.components=e.components,this.isRectangle=e.isRectangle||!1,this.type=e.type,this},i.Wkt.prototype.toObject=function(t){var e=this.construct[this.type].call(this,t);return"object"!=typeof e||i.isArray(e)||(e.properties=this.properties),e},i.Wkt.prototype.toString=function(t){return this.write()},i.Wkt.prototype.fromJson=function(t){var e,s,n,o,r,p;if(this.type=t.type.toLowerCase(),this.components=[],t.hasOwnProperty("geometry"))return this.fromJson(t.geometry),this.properties=t.properties,this;if(o=t.coordinates,i.isArray(o[0])){for(e in o)if(o.hasOwnProperty(e))if(i.isArray(o[e][0])){p=[];for(s in o[e])if(o[e].hasOwnProperty(s))if(i.isArray(o[e][s][0])){r=[];for(n in o[e][s])o[e][s].hasOwnProperty(n)&&r.push({x:o[e][s][n][0],y:o[e][s][n][1]});p.push(r)}else p.push({x:o[e][s][0],y:o[e][s][1]});this.components.push(p)}else"multipoint"===this.type?this.components.push([{x:o[e][0],y:o[e][1]}]):this.components.push({x:o[e][0],y:o[e][1]})}else this.components.push({x:o[0],y:o[1]});return this},i.Wkt.prototype.toJson=function(){var t,e,s,n,o,r,p;if(t=this.components,e={coordinates:[],type:function(){var t,e,s;e=this.regExes.ogcTypes.exec(this.type).slice(1),s=[];for(t in e)e.hasOwnProperty(t)&&void 0!==e[t]&&s.push(e[t].toLowerCase().slice(0,1).toUpperCase()+e[t].toLowerCase().slice(1));return s}.call(this).join("")},"box"===this.type.toLowerCase()){e.type="Polygon",e.bbox=[];for(s in t)t.hasOwnProperty(s)&&(e.bbox=e.bbox.concat([t[s].x,t[s].y]));return e.coordinates=[[[t[0].x,t[0].y],[t[0].x,t[1].y],[t[1].x,t[1].y],[t[1].x,t[0].y],[t[0].x,t[0].y]]],e}for(s in t)if(t.hasOwnProperty(s))if(i.isArray(t[s])){p=[];for(n in t[s])if(t[s].hasOwnProperty(n))if(i.isArray(t[s][n])){r=[];for(o in t[s][n])t[s][n].hasOwnProperty(o)&&r.push([t[s][n][o].x,t[s][n][o].y]);p.push(r)}else t[s].length>1?p.push([t[s][n].x,t[s][n].y]):p=p.concat([t[s][n].x,t[s][n].y]);e.coordinates.push(p)}else t.length>1?e.coordinates.push([t[s].x,t[s].y]):e.coordinates=e.coordinates.concat([t[s].x,t[s].y]);return e},i.Wkt.prototype.merge=function(t){var e=this.type.slice(0,5);if(this.type!==t.type&&this.type.slice(5,this.type.length)!==t.type)throw TypeError("The input geometry types must agree or the calling this.Wkt.Wkt instance must be a multigeometry of the other");switch(e){case"point":this.components=[this.components.concat(t.components)];break;case"multi":this.components=this.components.concat("multi"===t.type.slice(0,5)?t.components:[t.components]);break;default:this.components=[this.components,t.components]}return"multi"!==e&&(this.type="multi"+this.type),this},i.Wkt.prototype.read=function(t){var e;if(e=this.regExes.typeStr.exec(t))this.type=e[1].toLowerCase(),this.base=e[2],this.ingest[this.type]&&(this.components=this.ingest[this.type].apply(this,[this.base]));else{if(!this.regExes.crudeJson.test(t))throw console.log("Invalid WKT string provided to read()"),{name:"WKTError",message:"Invalid WKT string provided to read()"};if("object"!=typeof JSON||"function"!=typeof JSON.parse)throw console.log("JSON.parse() is not available; cannot parse GeoJSON strings"),{name:"JSONError",message:"JSON.parse() is not available; cannot parse GeoJSON strings"};this.fromJson(JSON.parse(t))}return this},i.Wkt.prototype.write=function(t){var e,s,i;for(t=t||this.components,s=[],s.push(this.type.toUpperCase()+"("),e=0;e<t.length;e+=1){if(this.isCollection()&&e>0&&s.push(","),!this.extract[this.type])return null;i=this.extract[this.type].apply(this,[t[e]]),this.isCollection()&&"multipoint"!==this.type?s.push("("+i+")"):(s.push(i),e!==t.length-1&&"multipoint"!==this.type&&s.push(","))}return s.push(")"),s.join("")},i.Wkt.prototype.extract={point:function(t){return String(t.x)+this.delimiter+String(t.y)},multipoint:function(t){var e,s,i=[];for(e=0;e<t.length;e+=1)s=this.extract.point.apply(this,[t[e]]),this.wrapVertices&&(s="("+s+")"),i.push(s);return i.join(",")},linestring:function(t){return this.extract.point.apply(this,[t])},multilinestring:function(t){var e,s=[];for(e=0;e<t.length;e+=1)s.push(this.extract.linestring.apply(this,[t[e]]));return s.join(",")},polygon:function(t){return this.extract.multilinestring.apply(this,[t])},multipolygon:function(t){var e,s=[];for(e=0;e<t.length;e+=1)s.push("("+this.extract.polygon.apply(this,[t[e]])+")");return s.join(",")},box:function(t){return this.extract.linestring.apply(this,[t])},geometrycollection:function(t){console.log("The geometrycollection WKT type is not yet supported.")}},i.Wkt.prototype.ingest={point:function(t){var e=i.trim(t).split(this.regExes.spaces);return[{x:parseFloat(this.regExes.numeric.exec(e[0])[0]),y:parseFloat(this.regExes.numeric.exec(e[1])[0])}]},multipoint:function(t){var e,s,n;for(s=[],n=i.trim(t).split(this.regExes.comma),e=0;e<n.length;e+=1)s.push(this.ingest.point.apply(this,[n[e]]));return s},linestring:function(t){var e,s,i;for(s=this.ingest.multipoint.apply(this,[t]),i=[],e=0;e<s.length;e+=1)i=i.concat(s[e]);return i},multilinestring:function(t){var e,s,n,o;for(s=[],o=i.trim(t).split(this.regExes.doubleParenComma),1===o.length&&(o=i.trim(t).split(this.regExes.parenComma)),e=0;e<o.length;e+=1)n=o[e].replace(this.regExes.trimParens,"$1"),s.push(this.ingest.linestring.apply(this,[n]));return s},polygon:function(t){var e,s,n,o,r,p;for(p=i.trim(t).split(this.regExes.parenComma),n=[],e=0;e<p.length;e+=1){for(r=p[e].replace(this.regExes.trimParens,"$1").split(this.regExes.comma),o=[],s=0;s<r.length;s+=1){var h=r[s].split(this.regExes.spaces);if(h.length>2&&(h=h.filter(function(t){return""!=t})),2===h.length){var a=h[0],c=h[1];o.push({x:parseFloat(a),y:parseFloat(c)})}}n.push(o)}return n},box:function(t){var e,s,i;for(s=this.ingest.multipoint.apply(this,[t]),i=[],e=0;e<s.length;e+=1)i=i.concat(s[e]);return i},multipolygon:function(t){var e,s,n,o;for(s=[],o=i.trim(t).split(this.regExes.doubleParenComma),e=0;e<o.length;e+=1)n=o[e].replace(this.regExes.trimParens,"$1"),s.push(this.ingest.polygon.apply(this,[n]));return s},geometrycollection:function(t){console.log("The geometrycollection WKT type is not yet supported.")}},i});
//# sourceMappingURL=wicket.min.js.map