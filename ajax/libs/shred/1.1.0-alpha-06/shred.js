// Generated by CoffeeScript 1.8.0
(function() {
  var Authorization, base64, clone, include, overload, querystring, request, resolve, resolve_url, resource, type, _ref,
    __slice = [].slice;

  querystring = require("querystring");

  resolve_url = (_ref = require("fairmont"), include = _ref.include, clone = _ref.clone, type = _ref.type, base64 = _ref.base64, _ref);

  overload = require("typely").overload;

  request = require("./request").request;

  resolve = (function() {
    var URL, _resolve;
    URL = require("url");
    _resolve = URL.resolve;
    return function() {
      return decodeURIComponent(_resolve.apply(null, arguments));
    };
  })();

  Authorization = {
    basic: function(_arg) {
      var password, username;
      username = _arg.username, password = _arg.password;
      return "Basic " + base64("" + username + ":" + password);
    },
    bearer: function(token) {
      return "Bearer " + token;
    }
  };

  resource = overload(function(match) {
    match("string", function(url) {
      return resource({
        url: url
      });
    });
    match("string", "object", function(url, description) {
      return resource({
        url: url,
        description: description
      });
    });
    return match("object", function(_arg) {
      var definition, description, from_parameters, from_path, make_request, name, url, _fn, _resource;
      url = _arg.url, description = _arg.description;
      from_path = function(path, _description) {
        if (_description == null) {
          _description = description;
        }
        return resource({
          url: resolve(url, path),
          description: _description
        });
      };
      from_parameters = (function() {
        var template;
        template = (require("url-template")).parse(url);
        return function(parameters, _description) {
          if (_description == null) {
            _description = description;
          }
          return resource({
            url: template.expand(parameters),
            description: _description
          });
        };
      })();
      make_request = function(definition) {
        var fn;
        if (definition.url == null) {
          definition.url = url;
        }
        if (definition.headers == null) {
          definition.headers = {};
        }
        fn = function() {
          return request.apply(null, [definition].concat(__slice.call(arguments)));
        };
        include(fn, {
          invoke: function() {
            return fn.apply(null, arguments);
          },
          curl: function() {
            var headers, key, method, value;
            url = definition.url, method = definition.method, headers = definition.headers;
            return ("curl -v -X" + (method.toUpperCase()) + " " + url) + (function() {
              var _results;
              _results = [];
              for (key in headers) {
                value = headers[key];
                _results.push(" -H'" + key + ": " + value + "'");
              }
              return _results;
            })();
          },
          authorize: function(credentials) {
            var authorization, scheme, transform, _definition;
            scheme = Object.keys(credentials)[0];
            transform = (function() {
              var _ref1;
              if (((_ref1 = definition.authorization) != null ? _ref1[scheme] : void 0) != null) {
                return definition.authorization[scheme];
              } else if (Authorization[scheme] != null) {
                return Authorization[scheme];
              } else {
                return function(_arg1) {
                  var k, v;
                  k = _arg1.k, v = _arg1.v;
                  return "" + k + ": " + v;
                };
              }
            })();
            authorization = transform(credentials[scheme]);
            _definition = clone(definition);
            _definition.headers.authorization = authorization;
            return make_request(_definition);
          }
        });
        return fn;
      };
      _resource = overload(function(match) {
        match("string", function(path) {
          return from_path(path);
        });
        match("string", "object", function(path, description) {
          return from_path(path, description);
        });
        match("object", function(parameters) {
          return from_parameters(parameters);
        });
        return match("object", "object", function(parameters, description) {
          return from_parameters(parameters, description);
        });
      });
      _fn = function(name, definition) {
        return _resource[name] = (function() {
          switch (type(definition)) {
            case "object":
              return make_request(clone(definition));
            case "function":
              return definition(function() {
                if (arguments.length === 1) {
                  return _resource.apply(null, __slice.call(arguments).concat([{}]));
                } else {
                  return _resource.apply(null, arguments);
                }
              });
          }
        })();
      };
      for (name in description) {
        definition = description[name];
        _fn(name, definition);
      }
      return _resource;
    });
  });

  module.exports = {
    resource: resource
  };

}).call(this);
