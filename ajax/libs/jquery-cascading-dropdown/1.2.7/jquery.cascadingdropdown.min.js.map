{"version":3,"sources":["jquery.cascadingdropdown.js"],"names":["$","undefined","Dropdown","options","parent","this","el","selector","extend","defaultOptions","name","paramName","attr","requiredDropdowns","requires","length","join","isLoadingClassName","CascadingDropdown","element","selectBoxes","_init","usePost","useJson","prototype","_create","self","pending","initialised","initialState","clone","data","originalDropdownItems","children","onChange","change","event","requirementsMet","_requirementsMet","value","call","val","getRequiredValues","onEnable","on","onDisable","update","_initSource","_destroy","replaceWith","removeData","enable","removeAttr","triggerHandler","disable","requireAll","filter","isArray","source","request","response","map","item","label","selected","url","xhr","abort","ajax","JSON","stringify","dataType","type","contentType","success","error","each","instance","setSelected","_triggerReady","addClass","_response","items","_renderItems","removeClass","find","remove","append","getOption","selectedAttr","push","toString","index","key","itemData","i","indexOrValue","triggerChange","dropdownItems","selectedItems","concat","selectedValue","is","readyEventHandler","counter","dropdowns","unbind","onReady","getValues","changeEventHandler","bind","destroy","values","fn","cascadingDropdown","methodOrOptions","$this","args","arguments","apply","Array","slice","jQuery"],"mappings":"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","file":"jquery.cascadingdropdown.min.js","sourcesContent":["/*! jquery-cascading-dropdown 1.2.7 | (c) 2016 Dzulqarnain Nasir <dzul1983@gmail.com> | MIT */\n(function ($, undefined) {\r\n    'use strict';\r\n\r\n    var defaultOptions = {\r\n        usePost: false,\r\n        useJson: false\r\n    };\r\n\r\n    // Constructor\r\n    function Dropdown(options, parent) {\r\n        this.el = $(options.selector, parent.el);\r\n        this.parent = parent;\r\n        this.options = $.extend({}, defaultOptions, options);\r\n        this.name = this.options.paramName || this.el.attr('name');\r\n        this.requiredDropdowns = options.requires && options.requires.length ? $(options.requires.join(','), parent.el) : null;\r\n        this.isLoadingClassName = this.options.isLoadingClassName || parent.options.isLoadingClassName || 'cascading-dropdown-loading';\r\n    }\r\n\r\n    // Methods\r\n    Dropdown.prototype = {\r\n        _create: function() {\r\n            var self = this;\r\n\r\n            self.pending = 0;\r\n            self.initialised = false;\r\n            self.initialState = self.el.clone(true);\r\n            self.el.data('plugin_cascadingDropdown', this);\r\n            self.originalDropdownItems = self.el.children('option');\r\n\r\n            // Init event handlers\r\n            if(typeof self.options.onChange === 'function') {\r\n                self.el.change(function(event) {\r\n                    var requirementsMet = self._requirementsMet() && self.el[0].value;\r\n                    self.options.onChange.call(self, event, self.el.val(), self.getRequiredValues(), requirementsMet);\r\n                });\r\n            }\r\n\r\n            if(typeof self.options.onEnable === 'function') {\r\n                self.el.on('enabled', function(event) {\r\n                    self.options.onEnable.call(self, event, self.el.val());\r\n                });\r\n            }\r\n\r\n            if(typeof self.options.onDisable === 'function') {\r\n                self.el.on('disabled', function(event) {\r\n                    self.options.onDisable.call(self, event, self.el.val());\r\n                });\r\n            }\r\n\r\n            if(self.requiredDropdowns) {\r\n                self.requiredDropdowns.change(function(event) {\r\n                    self.update();\r\n                });\r\n            }\r\n\r\n            // Init source\r\n            self._initSource();\r\n\r\n            // Call update\r\n            self.update();\r\n        },\r\n        \r\n        // Destroys the instance and reverts everything back to initial state\r\n        _destroy: function() {\r\n            this.el.replaceWith(this.initialState).removeData('plugin_cascadingDropdown');\r\n        },\r\n\r\n        // Enables the dropdown\r\n        enable: function() {\r\n            if(this.el.attr('disabled') === undefined) return;\r\n            this.el.removeAttr('disabled').triggerHandler('enabled');\r\n        },\r\n\r\n        // Disables the dropdown\r\n        disable: function() {\r\n            if(this.el.attr('disabled') !== undefined) return;\r\n            this.el.attr('disabled', 'disabled').triggerHandler('disabled');\r\n        },\r\n\r\n        // Checks if required dropdowns have value\r\n        _requirementsMet: function() {\r\n            var self = this;\r\n\r\n            if(!self.requiredDropdowns) {\r\n                return true;\r\n            }\r\n\r\n            if(self.options.requireAll) { // If requireAll is true, return true if all dropdowns have values\r\n                return (self.requiredDropdowns.filter(function() {\r\n                    return !!$(this).val();\r\n                }).length == self.options.requires.length);\r\n            } else { // Otherwise, return true if any one of the required dropdowns has value\r\n                return (self.requiredDropdowns.filter(function() {\r\n                    return !!$(this).val();\r\n                }).length > 0);\r\n            }\r\n        },\r\n\r\n        // Defines dropdown item list source - inspired by jQuery UI Autocomplete\r\n        _initSource: function() {\r\n            var self = this;\r\n\r\n            if($.isArray(self.options.source)) {\r\n                this.source = function(request, response) {\r\n                    response($.map(self.options.source, function(item) {\r\n                        return {\r\n                            label: item.label || item.value || item,\r\n                            value: item.value || item.label || item,\r\n                            selected: item.selected\r\n                        };\r\n                    }));\r\n                };\r\n            } else if ( typeof self.options.source === 'string' ) {\r\n                var url = self.options.source;\r\n\r\n                this.source = function(request, response) {\r\n                    if ( self.xhr ) {\r\n                        self.xhr.abort();\r\n                    }\r\n                    self.xhr = $.ajax({\r\n                        url: url,\r\n                        data: self.options.useJson ? JSON.stringify(request) : request,\r\n                        dataType: self.options.useJson ? 'json' : undefined,\r\n                        type: self.options.usePost ? 'post' : 'get',\r\n                        contentType: 'application/json; charset=utf-8',\r\n                        success: function(data) {\r\n                            response(data);\r\n                        },\r\n                        error: function() {\r\n                            response([]);\r\n                        }\r\n                    });\r\n                };\r\n            } else {\r\n                this.source = self.options.source;\r\n            }\r\n        },\r\n\r\n        getRequiredValues: function() {\r\n            var data = {};\r\n            if(this.requiredDropdowns) {\r\n                $.each(this.requiredDropdowns, function() {\r\n                    var instance = $(this).data('plugin_cascadingDropdown');\r\n                    if(instance.name) {\r\n                        data[instance.name] = instance.el.val();\r\n                    }\r\n                });\r\n            }\r\n\r\n            return data;\r\n        },\r\n\r\n        // Update the dropdown\r\n        update: function() {\r\n            var self = this;\r\n\r\n            // Disable it first\r\n            self.disable();\r\n\r\n            // If required dropdowns have no value, return\r\n            if(!self._requirementsMet()) {\r\n                self.setSelected(0);\r\n                self._triggerReady();\r\n                return self.el;\r\n            }\r\n\r\n            // If source isn't defined, it's most likely a static dropdown, so just enable it\r\n            if(!self.source) {\r\n                self.enable();\r\n                self._triggerReady();\r\n                return self.el;\r\n            }\r\n\r\n            // Reset the dropdown value so we don't trigger a false call\r\n            self.el.val('').change();\r\n\r\n            // Fetch data from required dropdowns\r\n            var data = self.getRequiredValues();\r\n\r\n            // Pass it to defined source for processing\r\n            self.pending++;\r\n            self.el.addClass(self.isLoadingClassName);\r\n            self.source(data, self._response());\r\n\r\n            return self.el;\r\n        },\r\n\r\n        _response: function(items) {\r\n            var self = this;\r\n\r\n            return function(items) {\r\n                self._renderItems(items);\r\n\r\n                self.pending--;\r\n                if(!self.pending) {\r\n                    self.el.removeClass(self.isLoadingClassName);\r\n                }\r\n            }\r\n        },\r\n\r\n        // Render the dropdown items\r\n        _renderItems: function(items) {\r\n            var self = this;\r\n\r\n            // Remove all dropdown items and restore to initial state\r\n            self.el.find('option, optgroup').remove();\r\n            self.el.append(self.originalDropdownItems);\r\n\r\n            if(!items) {\r\n                self._triggerReady();\r\n                return;\r\n            }\r\n\r\n            var selected = [];\r\n\r\n            // Add all items as dropdown item\r\n            var getOption = function(item) {\r\n              var selectedAttr = '';\r\n              if(item.selected) {\r\n                selected.push(item.value.toString());\r\n              }\r\n\r\n              return '<option value=\"' + item.value + '\"' + selectedAttr + '>' + item.label + '</option>';\r\n            };\r\n\r\n            if ($.isArray(items)) {\r\n              $.each(items, function(index, item) {\r\n                self.el.append(getOption(item));\r\n              });\r\n            } else {\r\n              $.each(items, function(key, value) {\r\n                var itemData = [];\r\n                itemData.push('<optgroup label=\"' + key + '\">');\r\n                for (var i = 0; i < value.length; i++) {\r\n                  var item = value[i];\r\n                  itemData.push(getOption(item));\r\n                }\r\n                itemData.push('</optgroup>');\r\n                self.el.append(itemData.join(''));\r\n              });\r\n            }\r\n\r\n            // Enable the dropdown\r\n            self.enable();\r\n\r\n            // If a selected item exists, set it as default\r\n            selected.length && self.setSelected(selected);\r\n\r\n            self._triggerReady();\r\n        },\r\n\r\n        // Trigger the ready event when instance is initialised for the first time\r\n        _triggerReady: function() {\r\n            if(this.initialised) return;\r\n\r\n            // Set selected dropdown item if defined\r\n            this.options.selected && this.setSelected(this.options.selected);\r\n\r\n            this.initialised = true;\r\n            this.el.triggerHandler('ready');\r\n        },\r\n\r\n        // Sets the selected dropdown item\r\n        setSelected: function(indexOrValue, triggerChange) {\r\n            var self = this,\r\n                dropdownItems = self.el.find('option');\r\n\r\n            // Trigger change event by default\r\n            if(typeof triggerChange === 'undefined') {\r\n                triggerChange = true;\r\n            }\r\n            \r\n            var selectedItems = [];\r\n            \r\n            // check if indexOrValue is an array\r\n            if($.isArray(indexOrValue)) {\r\n                selectedItems = indexOrValue;\r\n            } else {\r\n                selectedItems = selectedItems.concat(indexOrValue);\r\n            }\r\n\r\n            var selectedValue;\r\n            if(self.el.is('[multiple]')) {\r\n                selectedValue = selectedItems.map(function(item) {\r\n                    if(typeof item === 'number'\r\n                        && (item !== undefined \r\n                        && item > -1 \r\n                        && item < dropdownItems.length)) {\r\n                        return dropdownItems[item].value\r\n                    }\r\n                    \r\n                    return item;\r\n                });\r\n\r\n            } else {\r\n                selectedValue = selectedItems[0];\r\n\r\n                // if selected item is a number, get the value for the item at that index\r\n                if(typeof selectedItems[0] === 'number' \r\n                    && (selectedItems[0] !== undefined \r\n                    && selectedItems[0] > -1 \r\n                    && selectedItems[0] < dropdownItems.length)) {\r\n                    selectedValue = dropdownItems[selectedItems[0]].value;\r\n                }\r\n            }\r\n            \r\n            // Set the dropdown item\r\n            self.el.val(selectedValue);\r\n\r\n            // Trigger change event\r\n            if(triggerChange) {\r\n                self.el.change();\r\n            }\r\n\r\n            return self.el;\r\n        }\r\n    };\r\n\r\n    function CascadingDropdown(element, options) {\r\n        this.el = $(element);\r\n        this.options = $.extend({ selectBoxes: [] }, options);\r\n        this._init();\r\n    }\r\n\r\n    CascadingDropdown.prototype = {\r\n        _init: function() {\r\n            var self = this;\r\n\r\n            self.pending = 0;\r\n\r\n            // Instance array\r\n            self.dropdowns = [];\r\n            \r\n            var dropdowns = $($.map(self.options.selectBoxes, function(item) {\r\n                return item.selector;\r\n            }).join(','), self.el);\r\n\r\n            // Init event handlers\r\n            var counter = 0;\r\n            function readyEventHandler(event) {\r\n                if(++counter == dropdowns.length) { // Once all dropdowns are ready, unbind the event handler, and execute onReady\r\n                    dropdowns.unbind('ready', readyEventHandler);\r\n                    self.options.onReady.call(self, event, self.getValues());\r\n                }\r\n            }\r\n\r\n            function changeEventHandler(event) {\r\n                self.options.onChange.call(self, event, self.getValues());\r\n            }\r\n            \r\n            if(typeof self.options.onReady === 'function') {\r\n                dropdowns.bind('ready', readyEventHandler);\r\n            }\r\n\r\n            if(typeof self.options.onChange === 'function') {\r\n                dropdowns.bind('change', changeEventHandler);\r\n            }\r\n\r\n            // Init dropdowns\r\n            $.each(self.options.selectBoxes, function(index, item) {\r\n                // Create the instance\r\n                var instance = new Dropdown(this, self);\r\n\r\n                // Insert it into the dropdown instance array\r\n                self.dropdowns.push(instance);\r\n\r\n                // Call the create method\r\n                instance._create();\r\n            });\r\n        },\r\n        \r\n        // Destroys the instance and reverts everything back to its initial state \r\n        destroy: function() {\r\n            $.each(this.dropdowns, function(index, item){\r\n                item._destroy();\r\n            });\r\n            this.el.removeData('plugin_cascadingDropdown');\r\n            \r\n            return this.el;\r\n        },\r\n\r\n        // Fetches the values from all dropdowns in this group\r\n        getValues: function() {\r\n            var values = {};\r\n\r\n            // Build the object and insert values from instances with name\r\n            $.each(this.dropdowns, function(index, instance) {\r\n                if(instance.name) {\r\n                    values[instance.name] = instance.el.val();\r\n                }\r\n            });\r\n\r\n            return values;\r\n        }\r\n    }\r\n\r\n    // jQuery plugin declaration\r\n    $.fn.cascadingDropdown = function(methodOrOptions) {\r\n        var $this = $(this),\r\n            args = arguments,\r\n            instance = $this.data('plugin_cascadingDropdown');\r\n\r\n        if(typeof methodOrOptions === 'object' || !methodOrOptions) {\r\n            return !instance && $this.data('plugin_cascadingDropdown', new CascadingDropdown(this, methodOrOptions));\r\n        } else if(typeof methodOrOptions === 'string') {\r\n            if(!instance) {\r\n                $.error('Cannot call method ' + methodOrOptions + ' before init.');\r\n            } else if(instance[methodOrOptions]) {\r\n                return instance[methodOrOptions].apply(instance, Array.prototype.slice.call(args, 1))\r\n            }\r\n        } else {\r\n            $.error('Method ' + methodOrOptions + ' does not exist in jQuery.cascadingDropdown');\r\n        }\r\n    };\r\n})(jQuery);\r\n"],"sourceRoot":"/source/"}