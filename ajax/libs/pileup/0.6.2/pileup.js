(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.pileup = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
!function(t,e){if("function"==typeof define&&define.amd)define(["underscore","jquery","exports"],function(i,n,s){t.Backbone=e(t,s,i,n)});else if("undefined"!=typeof exports){var i=require("underscore");e(t,exports,i)}else t.Backbone=e(t,{},t._,t.jQuery||t.Zepto||t.ender||t.$)}(this,function(t,e,i,n){var s=t.Backbone,r=[],a=(r.push,r.slice);r.splice;e.VERSION="1.1.2",e.$=n,e.noConflict=function(){return t.Backbone=s,this},e.emulateHTTP=!1,e.emulateJSON=!1;var o=e.Events={on:function(t,e,i){if(!u(this,"on",t,[e,i])||!e)return this;this._events||(this._events={});var n=this._events[t]||(this._events[t]=[]);return n.push({callback:e,context:i,ctx:i||this}),this},once:function(t,e,n){if(!u(this,"once",t,[e,n])||!e)return this;var s=this,r=i.once(function(){s.off(t,r),e.apply(this,arguments)});return r._callback=e,this.on(t,r,n)},off:function(t,e,n){var s,r,a,o,h,c,l,d;if(!this._events||!u(this,"off",t,[e,n]))return this;if(!t&&!e&&!n)return this._events=void 0,this;for(o=t?[t]:i.keys(this._events),h=0,c=o.length;c>h;h++)if(t=o[h],a=this._events[t]){if(this._events[t]=s=[],e||n)for(l=0,d=a.length;d>l;l++)r=a[l],(e&&e!==r.callback&&e!==r.callback._callback||n&&n!==r.context)&&s.push(r);s.length||delete this._events[t]}return this},trigger:function(t){if(!this._events)return this;var e=a.call(arguments,1);if(!u(this,"trigger",t,e))return this;var i=this._events[t],n=this._events.all;return i&&c(i,e),n&&c(n,arguments),this},stopListening:function(t,e,n){var s=this._listeningTo;if(!s)return this;var r=!e&&!n;n||"object"!=typeof e||(n=this),t&&((s={})[t._listenId]=t);for(var a in s)t=s[a],t.off(e,n,this),(r||i.isEmpty(t._events))&&delete this._listeningTo[a];return this}},h=/\s+/,u=function(t,e,i,n){if(!i)return!0;if("object"==typeof i){for(var s in i)t[e].apply(t,[s,i[s]].concat(n));return!1}if(h.test(i)){for(var r=i.split(h),a=0,o=r.length;o>a;a++)t[e].apply(t,[r[a]].concat(n));return!1}return!0},c=function(t,e){var i,n=-1,s=t.length,r=e[0],a=e[1],o=e[2];switch(e.length){case 0:for(;++n<s;)(i=t[n]).callback.call(i.ctx);return;case 1:for(;++n<s;)(i=t[n]).callback.call(i.ctx,r);return;case 2:for(;++n<s;)(i=t[n]).callback.call(i.ctx,r,a);return;case 3:for(;++n<s;)(i=t[n]).callback.call(i.ctx,r,a,o);return;default:for(;++n<s;)(i=t[n]).callback.apply(i.ctx,e);return}},l={listenTo:"on",listenToOnce:"once"};i.each(l,function(t,e){o[e]=function(e,n,s){var r=this._listeningTo||(this._listeningTo={}),a=e._listenId||(e._listenId=i.uniqueId("l"));return r[a]=e,s||"object"!=typeof n||(s=this),e[t](n,s,this),this}}),o.bind=o.on,o.unbind=o.off,i.extend(e,o);var d=e.Model=function(t,e){var n=t||{};e||(e={}),this.cid=i.uniqueId("c"),this.attributes={},e.collection&&(this.collection=e.collection),e.parse&&(n=this.parse(n,e)||{}),n=i.defaults({},n,i.result(this,"defaults")),this.set(n,e),this.changed={},this.initialize.apply(this,arguments)};i.extend(d.prototype,o,{changed:null,validationError:null,idAttribute:"id",initialize:function(){},toJSON:function(t){return i.clone(this.attributes)},sync:function(){return e.sync.apply(this,arguments)},get:function(t){return this.attributes[t]},escape:function(t){return i.escape(this.get(t))},has:function(t){return null!=this.get(t)},set:function(t,e,n){var s,r,a,o,h,u,c,l;if(null==t)return this;if("object"==typeof t?(r=t,n=e):(r={})[t]=e,n||(n={}),!this._validate(r,n))return!1;a=n.unset,h=n.silent,o=[],u=this._changing,this._changing=!0,u||(this._previousAttributes=i.clone(this.attributes),this.changed={}),l=this.attributes,c=this._previousAttributes,this.idAttribute in r&&(this.id=r[this.idAttribute]);for(s in r)e=r[s],i.isEqual(l[s],e)||o.push(s),i.isEqual(c[s],e)?delete this.changed[s]:this.changed[s]=e,a?delete l[s]:l[s]=e;if(!h){o.length&&(this._pending=n);for(var d=0,f=o.length;f>d;d++)this.trigger("change:"+o[d],this,l[o[d]],n)}if(u)return this;if(!h)for(;this._pending;)n=this._pending,this._pending=!1,this.trigger("change",this,n);return this._pending=!1,this._changing=!1,this},unset:function(t,e){return this.set(t,void 0,i.extend({},e,{unset:!0}))},clear:function(t){var e={};for(var n in this.attributes)e[n]=void 0;return this.set(e,i.extend({},t,{unset:!0}))},hasChanged:function(t){return null==t?!i.isEmpty(this.changed):i.has(this.changed,t)},changedAttributes:function(t){if(!t)return this.hasChanged()?i.clone(this.changed):!1;var e,n=!1,s=this._changing?this._previousAttributes:this.attributes;for(var r in t)i.isEqual(s[r],e=t[r])||((n||(n={}))[r]=e);return n},previous:function(t){return null!=t&&this._previousAttributes?this._previousAttributes[t]:null},previousAttributes:function(){return i.clone(this._previousAttributes)},fetch:function(t){t=t?i.clone(t):{},void 0===t.parse&&(t.parse=!0);var e=this,n=t.success;return t.success=function(i){return e.set(e.parse(i,t),t)?(n&&n(e,i,t),void e.trigger("sync",e,i,t)):!1},U(this,t),this.sync("read",this,t)},save:function(t,e,n){var s,r,a,o=this.attributes;if(null==t||"object"==typeof t?(s=t,n=e):(s={})[t]=e,n=i.extend({validate:!0},n),s&&!n.wait){if(!this.set(s,n))return!1}else if(!this._validate(s,n))return!1;s&&n.wait&&(this.attributes=i.extend({},o,s)),void 0===n.parse&&(n.parse=!0);var h=this,u=n.success;return n.success=function(t){h.attributes=o;var e=h.parse(t,n);return n.wait&&(e=i.extend(s||{},e)),i.isObject(e)&&!h.set(e,n)?!1:(u&&u(h,t,n),void h.trigger("sync",h,t,n))},U(this,n),r=this.isNew()?"create":n.patch?"patch":"update","patch"===r&&(n.attrs=s),a=this.sync(r,this,n),s&&n.wait&&(this.attributes=o),a},destroy:function(t){t=t?i.clone(t):{};var e=this,n=t.success,s=function(){e.trigger("destroy",e,e.collection,t)};if(t.success=function(i){(t.wait||e.isNew())&&s(),n&&n(e,i,t),e.isNew()||e.trigger("sync",e,i,t)},this.isNew())return t.success(),!1;U(this,t);var r=this.sync("delete",this,t);return t.wait||s(),r},url:function(){var t=i.result(this,"urlRoot")||i.result(this.collection,"url")||j();return this.isNew()?t:t.replace(/([^\/])$/,"$1/")+encodeURIComponent(this.id)},parse:function(t,e){return t},clone:function(){return new this.constructor(this.attributes)},isNew:function(){return!this.has(this.idAttribute)},isValid:function(t){return this._validate({},i.extend(t||{},{validate:!0}))},_validate:function(t,e){if(!e.validate||!this.validate)return!0;t=i.extend({},this.attributes,t);var n=this.validationError=this.validate(t,e)||null;return n?(this.trigger("invalid",this,n,i.extend(e,{validationError:n})),!1):!0}});var f=["keys","values","pairs","invert","pick","omit"];i.each(f,function(t){d.prototype[t]=function(){var e=a.call(arguments);return e.unshift(this.attributes),i[t].apply(i,e)}});var p=e.Collection=function(t,e){e||(e={}),e.model&&(this.model=e.model),void 0!==e.comparator&&(this.comparator=e.comparator),this._reset(),this.initialize.apply(this,arguments),t&&this.reset(t,i.extend({silent:!0},e))},g={add:!0,remove:!0,merge:!0},v={add:!0,remove:!1};i.extend(p.prototype,o,{model:d,initialize:function(){},toJSON:function(t){return this.map(function(e){return e.toJSON(t)})},sync:function(){return e.sync.apply(this,arguments)},add:function(t,e){return this.set(t,i.extend({merge:!1},e,v))},remove:function(t,e){var n=!i.isArray(t);t=n?[t]:i.clone(t),e||(e={});var s,r,a,o;for(s=0,r=t.length;r>s;s++)o=t[s]=this.get(t[s]),o&&(delete this._byId[o.id],delete this._byId[o.cid],a=this.indexOf(o),this.models.splice(a,1),this.length--,e.silent||(e.index=a,o.trigger("remove",o,this,e)),this._removeReference(o,e));return n?t[0]:t},set:function(t,e){e=i.defaults({},e,g),e.parse&&(t=this.parse(t,e));var n=!i.isArray(t);t=n?t?[t]:[]:i.clone(t);var s,r,a,o,h,u,c,l=e.at,f=this.model,p=this.comparator&&null==l&&e.sort!==!1,v=i.isString(this.comparator)?this.comparator:null,m=[],y=[],_={},b=e.add,w=e.merge,x=e.remove,E=!p&&b&&x?[]:!1;for(s=0,r=t.length;r>s;s++){if(h=t[s]||{},a=h instanceof d?o=h:h[f.prototype.idAttribute||"id"],u=this.get(a))x&&(_[u.cid]=!0),w&&(h=h===o?o.attributes:h,e.parse&&(h=u.parse(h,e)),u.set(h,e),p&&!c&&u.hasChanged(v)&&(c=!0)),t[s]=u;else if(b){if(o=t[s]=this._prepareModel(h,e),!o)continue;m.push(o),this._addReference(o,e)}o=u||o,!E||!o.isNew()&&_[o.id]||E.push(o),_[o.id]=!0}if(x){for(s=0,r=this.length;r>s;++s)_[(o=this.models[s]).cid]||y.push(o);y.length&&this.remove(y,e)}if(m.length||E&&E.length)if(p&&(c=!0),this.length+=m.length,null!=l)for(s=0,r=m.length;r>s;s++)this.models.splice(l+s,0,m[s]);else{E&&(this.models.length=0);var k=E||m;for(s=0,r=k.length;r>s;s++)this.models.push(k[s])}if(c&&this.sort({silent:!0}),!e.silent){for(s=0,r=m.length;r>s;s++)(o=m[s]).trigger("add",o,this,e);(c||E&&E.length)&&this.trigger("sort",this,e)}return n?t[0]:t},reset:function(t,e){e||(e={});for(var n=0,s=this.models.length;s>n;n++)this._removeReference(this.models[n],e);return e.previousModels=this.models,this._reset(),t=this.add(t,i.extend({silent:!0},e)),e.silent||this.trigger("reset",this,e),t},push:function(t,e){return this.add(t,i.extend({at:this.length},e))},pop:function(t){var e=this.at(this.length-1);return this.remove(e,t),e},unshift:function(t,e){return this.add(t,i.extend({at:0},e))},shift:function(t){var e=this.at(0);return this.remove(e,t),e},slice:function(){return a.apply(this.models,arguments)},get:function(t){return null==t?void 0:this._byId[t]||this._byId[t.id]||this._byId[t.cid]},at:function(t){return this.models[t]},where:function(t,e){return i.isEmpty(t)?e?void 0:[]:this[e?"find":"filter"](function(e){for(var i in t)if(t[i]!==e.get(i))return!1;return!0})},findWhere:function(t){return this.where(t,!0)},sort:function(t){if(!this.comparator)throw new Error("Cannot sort a set without a comparator");return t||(t={}),i.isString(this.comparator)||1===this.comparator.length?this.models=this.sortBy(this.comparator,this):this.models.sort(i.bind(this.comparator,this)),t.silent||this.trigger("sort",this,t),this},pluck:function(t){return i.invoke(this.models,"get",t)},fetch:function(t){t=t?i.clone(t):{},void 0===t.parse&&(t.parse=!0);var e=t.success,n=this;return t.success=function(i){var s=t.reset?"reset":"set";n[s](i,t),e&&e(n,i,t),n.trigger("sync",n,i,t)},U(this,t),this.sync("read",this,t)},create:function(t,e){if(e=e?i.clone(e):{},!(t=this._prepareModel(t,e)))return!1;e.wait||this.add(t,e);var n=this,s=e.success;return e.success=function(t,i){e.wait&&n.add(t,e),s&&s(t,i,e)},t.save(null,e),t},parse:function(t,e){return t},clone:function(){return new this.constructor(this.models)},_reset:function(){this.length=0,this.models=[],this._byId={}},_prepareModel:function(t,e){if(t instanceof d)return t;e=e?i.clone(e):{},e.collection=this;var n=new this.model(t,e);return n.validationError?(this.trigger("invalid",this,n.validationError,e),!1):n},_addReference:function(t,e){this._byId[t.cid]=t,null!=t.id&&(this._byId[t.id]=t),t.collection||(t.collection=this),t.on("all",this._onModelEvent,this)},_removeReference:function(t,e){this===t.collection&&delete t.collection,t.off("all",this._onModelEvent,this)},_onModelEvent:function(t,e,i,n){("add"!==t&&"remove"!==t||i===this)&&("destroy"===t&&this.remove(e,n),e&&t==="change:"+e.idAttribute&&(delete this._byId[e.previous(e.idAttribute)],null!=e.id&&(this._byId[e.id]=e)),this.trigger.apply(this,arguments))}});var m=["forEach","each","map","collect","reduce","foldl","inject","reduceRight","foldr","find","detect","filter","select","reject","every","all","some","any","include","contains","invoke","max","min","toArray","size","first","head","take","initial","rest","tail","drop","last","without","difference","indexOf","shuffle","lastIndexOf","isEmpty","chain","sample"];i.each(m,function(t){p.prototype[t]=function(){var e=a.call(arguments);return e.unshift(this.models),i[t].apply(i,e)}});var y=["groupBy","countBy","sortBy","indexBy"];i.each(y,function(t){p.prototype[t]=function(e,n){var s=i.isFunction(e)?e:function(t){return t.get(e)};return i[t](this.models,s,n)}});var _=e.View=function(t){this.cid=i.uniqueId("view"),t||(t={}),i.extend(this,i.pick(t,w)),this._ensureElement(),this.initialize.apply(this,arguments),this.delegateEvents()},b=/^(\S+)\s*(.*)$/,w=["model","collection","el","id","attributes","className","tagName","events"];i.extend(_.prototype,o,{tagName:"div",$:function(t){return this.$el.find(t)},initialize:function(){},render:function(){return this},remove:function(){return this.$el.remove(),this.stopListening(),this},setElement:function(t,i){return this.$el&&this.undelegateEvents(),this.$el=t instanceof e.$?t:e.$(t),this.el=this.$el[0],i!==!1&&this.delegateEvents(),this},delegateEvents:function(t){if(!t&&!(t=i.result(this,"events")))return this;this.undelegateEvents();for(var e in t){var n=t[e];if(i.isFunction(n)||(n=this[t[e]]),n){var s=e.match(b),r=s[1],a=s[2];n=i.bind(n,this),r+=".delegateEvents"+this.cid,""===a?this.$el.on(r,n):this.$el.on(r,a,n)}}return this},undelegateEvents:function(){return this.$el.off(".delegateEvents"+this.cid),this},_ensureElement:function(){if(this.el)this.setElement(i.result(this,"el"),!1);else{var t=i.extend({},i.result(this,"attributes"));this.id&&(t.id=i.result(this,"id")),this.className&&(t["class"]=i.result(this,"className"));var n=e.$("<"+i.result(this,"tagName")+">").attr(t);this.setElement(n,!1)}}}),e.sync=function(t,n,s){var r=E[t];i.defaults(s||(s={}),{emulateHTTP:e.emulateHTTP,emulateJSON:e.emulateJSON});var a={type:r,dataType:"json"};if(s.url||(a.url=i.result(n,"url")||j()),null!=s.data||!n||"create"!==t&&"update"!==t&&"patch"!==t||(a.contentType="application/json",a.data=JSON.stringify(s.attrs||n.toJSON(s))),s.emulateJSON&&(a.contentType="application/x-www-form-urlencoded",a.data=a.data?{model:a.data}:{}),s.emulateHTTP&&("PUT"===r||"DELETE"===r||"PATCH"===r)){a.type="POST",s.emulateJSON&&(a.data._method=r);var o=s.beforeSend;s.beforeSend=function(t){return t.setRequestHeader("X-HTTP-Method-Override",r),o?o.apply(this,arguments):void 0}}"GET"===a.type||s.emulateJSON||(a.processData=!1),"PATCH"===a.type&&x&&(a.xhr=function(){return new ActiveXObject("Microsoft.XMLHTTP")});var h=s.xhr=e.ajax(i.extend(a,s));return n.trigger("request",n,h,s),h};var x=!("undefined"==typeof window||!window.ActiveXObject||window.XMLHttpRequest&&(new XMLHttpRequest).dispatchEvent),E={create:"POST",update:"PUT",patch:"PATCH","delete":"DELETE",read:"GET"};e.ajax=function(){return e.$.ajax.apply(e.$,arguments)};var k=e.Router=function(t){t||(t={}),t.routes&&(this.routes=t.routes),this._bindRoutes(),this.initialize.apply(this,arguments)},T=/\((.*?)\)/g,$=/(\(\?)?:\w+/g,S=/\*\w+/g,H=/[\-{}\[\]+?.,\\\^$|#\s]/g;i.extend(k.prototype,o,{initialize:function(){},route:function(t,n,s){i.isRegExp(t)||(t=this._routeToRegExp(t)),i.isFunction(n)&&(s=n,n=""),s||(s=this[n]);var r=this;return e.history.route(t,function(i){var a=r._extractParameters(t,i);r.execute(s,a),r.trigger.apply(r,["route:"+n].concat(a)),r.trigger("route",n,a),e.history.trigger("route",r,n,a)}),this},execute:function(t,e){t&&t.apply(this,e)},navigate:function(t,i){return e.history.navigate(t,i),this},_bindRoutes:function(){if(this.routes){this.routes=i.result(this,"routes");for(var t,e=i.keys(this.routes);null!=(t=e.pop());)this.route(t,this.routes[t])}},_routeToRegExp:function(t){return t=t.replace(H,"\\$&").replace(T,"(?:$1)?").replace($,function(t,e){return e?t:"([^/?]+)"}).replace(S,"([^?]*?)"),new RegExp("^"+t+"(?:\\?([\\s\\S]*))?$")},_extractParameters:function(t,e){var n=t.exec(e).slice(1);return i.map(n,function(t,e){return e===n.length-1?t||null:t?decodeURIComponent(t):null})}});var A=e.History=function(){this.handlers=[],i.bindAll(this,"checkUrl"),"undefined"!=typeof window&&(this.location=window.location,this.history=window.history)},I=/^[#\/]|\s+$/g,N=/^\/+|\/+$/g,R=/msie [\w.]+/,O=/\/$/,P=/#.*$/;A.started=!1,i.extend(A.prototype,o,{interval:50,atRoot:function(){return this.location.pathname.replace(/[^\/]$/,"$&/")===this.root},getHash:function(t){var e=(t||this).location.href.match(/#(.*)$/);return e?e[1]:""},getFragment:function(t,e){if(null==t)if(this._hasPushState||!this._wantsHashChange||e){t=decodeURI(this.location.pathname+this.location.search);var i=this.root.replace(O,"");t.indexOf(i)||(t=t.slice(i.length))}else t=this.getHash();return t.replace(I,"")},start:function(t){if(A.started)throw new Error("Backbone.history has already been started");A.started=!0,this.options=i.extend({root:"/"},this.options,t),this.root=this.options.root,this._wantsHashChange=this.options.hashChange!==!1,this._wantsPushState=!!this.options.pushState,this._hasPushState=!!(this.options.pushState&&this.history&&this.history.pushState);var n=this.getFragment(),s=document.documentMode,r=R.exec(navigator.userAgent.toLowerCase())&&(!s||7>=s);if(this.root=("/"+this.root+"/").replace(N,"/"),r&&this._wantsHashChange){var a=e.$('<iframe src="javascript:0" tabindex="-1">');this.iframe=a.hide().appendTo("body")[0].contentWindow,this.navigate(n)}this._hasPushState?e.$(window).on("popstate",this.checkUrl):this._wantsHashChange&&"onhashchange"in window&&!r?e.$(window).on("hashchange",this.checkUrl):this._wantsHashChange&&(this._checkUrlInterval=setInterval(this.checkUrl,this.interval)),this.fragment=n;var o=this.location;if(this._wantsHashChange&&this._wantsPushState){if(!this._hasPushState&&!this.atRoot())return this.fragment=this.getFragment(null,!0),this.location.replace(this.root+"#"+this.fragment),!0;this._hasPushState&&this.atRoot()&&o.hash&&(this.fragment=this.getHash().replace(I,""),this.history.replaceState({},document.title,this.root+this.fragment))}return this.options.silent?void 0:this.loadUrl()},stop:function(){e.$(window).off("popstate",this.checkUrl).off("hashchange",this.checkUrl),this._checkUrlInterval&&clearInterval(this._checkUrlInterval),A.started=!1},route:function(t,e){this.handlers.unshift({route:t,callback:e})},checkUrl:function(t){var e=this.getFragment();return e===this.fragment&&this.iframe&&(e=this.getFragment(this.getHash(this.iframe))),e===this.fragment?!1:(this.iframe&&this.navigate(e),void this.loadUrl())},loadUrl:function(t){return t=this.fragment=this.getFragment(t),i.any(this.handlers,function(e){return e.route.test(t)?(e.callback(t),!0):void 0})},navigate:function(t,e){if(!A.started)return!1;e&&e!==!0||(e={trigger:!!e});var i=this.root+(t=this.getFragment(t||""));if(t=t.replace(P,""),this.fragment!==t){if(this.fragment=t,""===t&&"/"!==i&&(i=i.slice(0,-1)),this._hasPushState)this.history[e.replace?"replaceState":"pushState"]({},document.title,i);else{if(!this._wantsHashChange)return this.location.assign(i);this._updateHash(this.location,t,e.replace),this.iframe&&t!==this.getFragment(this.getHash(this.iframe))&&(e.replace||this.iframe.document.open().close(),this._updateHash(this.iframe.location,t,e.replace))}return e.trigger?this.loadUrl(t):void 0}},_updateHash:function(t,e,i){if(i){var n=t.href.replace(/(javascript:|#).*$/,"");t.replace(n+"#"+e)}else t.hash="#"+e}}),e.history=new A;var C=function(t,e){var n,s=this;n=t&&i.has(t,"constructor")?t.constructor:function(){return s.apply(this,arguments)},i.extend(n,s,e);var r=function(){this.constructor=n};return r.prototype=s.prototype,n.prototype=new r,t&&i.extend(n.prototype,t),n.__super__=s.prototype,n};d.extend=p.extend=k.extend=_.extend=A.extend=C;var j=function(){throw new Error('A "url" property or function must be specified')},U=function(t,e){var i=e.error;e.error=function(n){i&&i(t,n,e),t.trigger("error",t,n,e)}};return e});

},{"underscore":177}],2:[function(require,module,exports){
(function (global){
function typedArraySupport(){function t(){}try{var e=new Uint8Array(1);return e.foo=function(){return 42},e.constructor=t,42===e.foo()&&e.constructor===t&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(r){return!1}}function kMaxLength(){return Buffer.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function Buffer(t){return this instanceof Buffer?(this.length=0,this.parent=void 0,"number"==typeof t?fromNumber(this,t):"string"==typeof t?fromString(this,t,arguments.length>1?arguments[1]:"utf8"):fromObject(this,t)):arguments.length>1?new Buffer(t,arguments[1]):new Buffer(t)}function fromNumber(t,e){if(t=allocate(t,0>e?0:0|checked(e)),!Buffer.TYPED_ARRAY_SUPPORT)for(var r=0;e>r;r++)t[r]=0;return t}function fromString(t,e,r){("string"!=typeof r||""===r)&&(r="utf8");var n=0|byteLength(e,r);return t=allocate(t,n),t.write(e,r),t}function fromObject(t,e){if(Buffer.isBuffer(e))return fromBuffer(t,e);if(isArray(e))return fromArray(t,e);if(null==e)throw new TypeError("must start with number, buffer, array or string");if("undefined"!=typeof ArrayBuffer){if(e.buffer instanceof ArrayBuffer)return fromTypedArray(t,e);if(e instanceof ArrayBuffer)return fromArrayBuffer(t,e)}return e.length?fromArrayLike(t,e):fromJsonObject(t,e)}function fromBuffer(t,e){var r=0|checked(e.length);return t=allocate(t,r),e.copy(t,0,0,r),t}function fromArray(t,e){var r=0|checked(e.length);t=allocate(t,r);for(var n=0;r>n;n+=1)t[n]=255&e[n];return t}function fromTypedArray(t,e){var r=0|checked(e.length);t=allocate(t,r);for(var n=0;r>n;n+=1)t[n]=255&e[n];return t}function fromArrayBuffer(t,e){return Buffer.TYPED_ARRAY_SUPPORT?(e.byteLength,t=Buffer._augment(new Uint8Array(e))):t=fromTypedArray(t,new Uint8Array(e)),t}function fromArrayLike(t,e){var r=0|checked(e.length);t=allocate(t,r);for(var n=0;r>n;n+=1)t[n]=255&e[n];return t}function fromJsonObject(t,e){var r,n=0;"Buffer"===e.type&&isArray(e.data)&&(r=e.data,n=0|checked(r.length)),t=allocate(t,n);for(var i=0;n>i;i+=1)t[i]=255&r[i];return t}function allocate(t,e){Buffer.TYPED_ARRAY_SUPPORT?(t=Buffer._augment(new Uint8Array(e)),t.__proto__=Buffer.prototype):(t.length=e,t._isBuffer=!0);var r=0!==e&&e<=Buffer.poolSize>>>1;return r&&(t.parent=rootParent),t}function checked(t){if(t>=kMaxLength())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+kMaxLength().toString(16)+" bytes");return 0|t}function SlowBuffer(t,e){if(!(this instanceof SlowBuffer))return new SlowBuffer(t,e);var r=new Buffer(t,e);return delete r.parent,r}function byteLength(t,e){"string"!=typeof t&&(t=""+t);var r=t.length;if(0===r)return 0;for(var n=!1;;)switch(e){case"ascii":case"binary":case"raw":case"raws":return r;case"utf8":case"utf-8":return utf8ToBytes(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return base64ToBytes(t).length;default:if(n)return utf8ToBytes(t).length;e=(""+e).toLowerCase(),n=!0}}function slowToString(t,e,r){var n=!1;if(e=0|e,r=void 0===r||r===1/0?this.length:0|r,t||(t="utf8"),0>e&&(e=0),r>this.length&&(r=this.length),e>=r)return"";for(;;)switch(t){case"hex":return hexSlice(this,e,r);case"utf8":case"utf-8":return utf8Slice(this,e,r);case"ascii":return asciiSlice(this,e,r);case"binary":return binarySlice(this,e,r);case"base64":return base64Slice(this,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return utf16leSlice(this,e,r);default:if(n)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),n=!0}}function hexWrite(t,e,r,n){r=Number(r)||0;var i=t.length-r;n?(n=Number(n),n>i&&(n=i)):n=i;var f=e.length;if(f%2!==0)throw new Error("Invalid hex string");n>f/2&&(n=f/2);for(var o=0;n>o;o++){var u=parseInt(e.substr(2*o,2),16);if(isNaN(u))throw new Error("Invalid hex string");t[r+o]=u}return o}function utf8Write(t,e,r,n){return blitBuffer(utf8ToBytes(e,t.length-r),t,r,n)}function asciiWrite(t,e,r,n){return blitBuffer(asciiToBytes(e),t,r,n)}function binaryWrite(t,e,r,n){return asciiWrite(t,e,r,n)}function base64Write(t,e,r,n){return blitBuffer(base64ToBytes(e),t,r,n)}function ucs2Write(t,e,r,n){return blitBuffer(utf16leToBytes(e,t.length-r),t,r,n)}function base64Slice(t,e,r){return 0===e&&r===t.length?base64.fromByteArray(t):base64.fromByteArray(t.slice(e,r))}function utf8Slice(t,e,r){r=Math.min(t.length,r);for(var n=[],i=e;r>i;){var f=t[i],o=null,u=f>239?4:f>223?3:f>191?2:1;if(r>=i+u){var s,a,h,c;switch(u){case 1:128>f&&(o=f);break;case 2:s=t[i+1],128===(192&s)&&(c=(31&f)<<6|63&s,c>127&&(o=c));break;case 3:s=t[i+1],a=t[i+2],128===(192&s)&&128===(192&a)&&(c=(15&f)<<12|(63&s)<<6|63&a,c>2047&&(55296>c||c>57343)&&(o=c));break;case 4:s=t[i+1],a=t[i+2],h=t[i+3],128===(192&s)&&128===(192&a)&&128===(192&h)&&(c=(15&f)<<18|(63&s)<<12|(63&a)<<6|63&h,c>65535&&1114112>c&&(o=c))}}null===o?(o=65533,u=1):o>65535&&(o-=65536,n.push(o>>>10&1023|55296),o=56320|1023&o),n.push(o),i+=u}return decodeCodePointsArray(n)}function decodeCodePointsArray(t){var e=t.length;if(MAX_ARGUMENTS_LENGTH>=e)return String.fromCharCode.apply(String,t);for(var r="",n=0;e>n;)r+=String.fromCharCode.apply(String,t.slice(n,n+=MAX_ARGUMENTS_LENGTH));return r}function asciiSlice(t,e,r){var n="";r=Math.min(t.length,r);for(var i=e;r>i;i++)n+=String.fromCharCode(127&t[i]);return n}function binarySlice(t,e,r){var n="";r=Math.min(t.length,r);for(var i=e;r>i;i++)n+=String.fromCharCode(t[i]);return n}function hexSlice(t,e,r){var n=t.length;(!e||0>e)&&(e=0),(!r||0>r||r>n)&&(r=n);for(var i="",f=e;r>f;f++)i+=toHex(t[f]);return i}function utf16leSlice(t,e,r){for(var n=t.slice(e,r),i="",f=0;f<n.length;f+=2)i+=String.fromCharCode(n[f]+256*n[f+1]);return i}function checkOffset(t,e,r){if(t%1!==0||0>t)throw new RangeError("offset is not uint");if(t+e>r)throw new RangeError("Trying to access beyond buffer length")}function checkInt(t,e,r,n,i,f){if(!Buffer.isBuffer(t))throw new TypeError("buffer must be a Buffer instance");if(e>i||f>e)throw new RangeError("value is out of bounds");if(r+n>t.length)throw new RangeError("index out of range")}function objectWriteUInt16(t,e,r,n){0>e&&(e=65535+e+1);for(var i=0,f=Math.min(t.length-r,2);f>i;i++)t[r+i]=(e&255<<8*(n?i:1-i))>>>8*(n?i:1-i)}function objectWriteUInt32(t,e,r,n){0>e&&(e=4294967295+e+1);for(var i=0,f=Math.min(t.length-r,4);f>i;i++)t[r+i]=e>>>8*(n?i:3-i)&255}function checkIEEE754(t,e,r,n,i,f){if(e>i||f>e)throw new RangeError("value is out of bounds");if(r+n>t.length)throw new RangeError("index out of range");if(0>r)throw new RangeError("index out of range")}function writeFloat(t,e,r,n,i){return i||checkIEEE754(t,e,r,4,3.4028234663852886e38,-3.4028234663852886e38),ieee754.write(t,e,r,n,23,4),r+4}function writeDouble(t,e,r,n,i){return i||checkIEEE754(t,e,r,8,1.7976931348623157e308,-1.7976931348623157e308),ieee754.write(t,e,r,n,52,8),r+8}function base64clean(t){if(t=stringtrim(t).replace(INVALID_BASE64_RE,""),t.length<2)return"";for(;t.length%4!==0;)t+="=";return t}function stringtrim(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}function toHex(t){return 16>t?"0"+t.toString(16):t.toString(16)}function utf8ToBytes(t,e){e=e||1/0;for(var r,n=t.length,i=null,f=[],o=0;n>o;o++){if(r=t.charCodeAt(o),r>55295&&57344>r){if(!i){if(r>56319){(e-=3)>-1&&f.push(239,191,189);continue}if(o+1===n){(e-=3)>-1&&f.push(239,191,189);continue}i=r;continue}if(56320>r){(e-=3)>-1&&f.push(239,191,189),i=r;continue}r=i-55296<<10|r-56320|65536}else i&&(e-=3)>-1&&f.push(239,191,189);if(i=null,128>r){if((e-=1)<0)break;f.push(r)}else if(2048>r){if((e-=2)<0)break;f.push(r>>6|192,63&r|128)}else if(65536>r){if((e-=3)<0)break;f.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(1114112>r))throw new Error("Invalid code point");if((e-=4)<0)break;f.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return f}function asciiToBytes(t){for(var e=[],r=0;r<t.length;r++)e.push(255&t.charCodeAt(r));return e}function utf16leToBytes(t,e){for(var r,n,i,f=[],o=0;o<t.length&&!((e-=2)<0);o++)r=t.charCodeAt(o),n=r>>8,i=r%256,f.push(i),f.push(n);return f}function base64ToBytes(t){return base64.toByteArray(base64clean(t))}function blitBuffer(t,e,r,n){for(var i=0;n>i&&!(i+r>=e.length||i>=t.length);i++)e[i+r]=t[i];return i}var base64=require("base64-js"),ieee754=require("ieee754"),isArray=require("is-array");exports.Buffer=Buffer,exports.SlowBuffer=SlowBuffer,exports.INSPECT_MAX_BYTES=50,Buffer.poolSize=8192;var rootParent={};Buffer.TYPED_ARRAY_SUPPORT=void 0!==global.TYPED_ARRAY_SUPPORT?global.TYPED_ARRAY_SUPPORT:typedArraySupport(),Buffer.TYPED_ARRAY_SUPPORT&&(Buffer.prototype.__proto__=Uint8Array.prototype,Buffer.__proto__=Uint8Array),Buffer.isBuffer=function(t){return!(null==t||!t._isBuffer)},Buffer.compare=function(t,e){if(!Buffer.isBuffer(t)||!Buffer.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var r=t.length,n=e.length,i=0,f=Math.min(r,n);f>i&&t[i]===e[i];)++i;return i!==f&&(r=t[i],n=e[i]),n>r?-1:r>n?1:0},Buffer.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"raw":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},Buffer.concat=function(t,e){if(!isArray(t))throw new TypeError("list argument must be an Array of Buffers.");if(0===t.length)return new Buffer(0);var r;if(void 0===e)for(e=0,r=0;r<t.length;r++)e+=t[r].length;var n=new Buffer(e),i=0;for(r=0;r<t.length;r++){var f=t[r];f.copy(n,i),i+=f.length}return n},Buffer.byteLength=byteLength,Buffer.prototype.length=void 0,Buffer.prototype.parent=void 0,Buffer.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?utf8Slice(this,0,t):slowToString.apply(this,arguments)},Buffer.prototype.equals=function(t){if(!Buffer.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t?!0:0===Buffer.compare(this,t)},Buffer.prototype.inspect=function(){var t="",e=exports.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,e).match(/.{2}/g).join(" "),this.length>e&&(t+=" ... ")),"<Buffer "+t+">"},Buffer.prototype.compare=function(t){if(!Buffer.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t?0:Buffer.compare(this,t)},Buffer.prototype.indexOf=function(t,e){function r(t,e,r){for(var n=-1,i=0;r+i<t.length;i++)if(t[r+i]===e[-1===n?0:i-n]){if(-1===n&&(n=i),i-n+1===e.length)return r+n}else n=-1;return-1}if(e>2147483647?e=2147483647:-2147483648>e&&(e=-2147483648),e>>=0,0===this.length)return-1;if(e>=this.length)return-1;if(0>e&&(e=Math.max(this.length+e,0)),"string"==typeof t)return 0===t.length?-1:String.prototype.indexOf.call(this,t,e);if(Buffer.isBuffer(t))return r(this,t,e);if("number"==typeof t)return Buffer.TYPED_ARRAY_SUPPORT&&"function"===Uint8Array.prototype.indexOf?Uint8Array.prototype.indexOf.call(this,t,e):r(this,[t],e);throw new TypeError("val must be string, number or Buffer")},Buffer.prototype.get=function(t){return console.log(".get() is deprecated. Access using array indexes instead."),this.readUInt8(t)},Buffer.prototype.set=function(t,e){return console.log(".set() is deprecated. Access using array indexes instead."),this.writeUInt8(t,e)},Buffer.prototype.write=function(t,e,r,n){if(void 0===e)n="utf8",r=this.length,e=0;else if(void 0===r&&"string"==typeof e)n=e,r=this.length,e=0;else if(isFinite(e))e=0|e,isFinite(r)?(r=0|r,void 0===n&&(n="utf8")):(n=r,r=void 0);else{var i=n;n=e,e=0|r,r=i}var f=this.length-e;if((void 0===r||r>f)&&(r=f),t.length>0&&(0>r||0>e)||e>this.length)throw new RangeError("attempt to write outside buffer bounds");n||(n="utf8");for(var o=!1;;)switch(n){case"hex":return hexWrite(this,t,e,r);case"utf8":case"utf-8":return utf8Write(this,t,e,r);case"ascii":return asciiWrite(this,t,e,r);case"binary":return binaryWrite(this,t,e,r);case"base64":return base64Write(this,t,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return ucs2Write(this,t,e,r);default:if(o)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),o=!0}},Buffer.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var MAX_ARGUMENTS_LENGTH=4096;Buffer.prototype.slice=function(t,e){var r=this.length;t=~~t,e=void 0===e?r:~~e,0>t?(t+=r,0>t&&(t=0)):t>r&&(t=r),0>e?(e+=r,0>e&&(e=0)):e>r&&(e=r),t>e&&(e=t);var n;if(Buffer.TYPED_ARRAY_SUPPORT)n=Buffer._augment(this.subarray(t,e));else{var i=e-t;n=new Buffer(i,void 0);for(var f=0;i>f;f++)n[f]=this[f+t]}return n.length&&(n.parent=this.parent||this),n},Buffer.prototype.readUIntLE=function(t,e,r){t=0|t,e=0|e,r||checkOffset(t,e,this.length);for(var n=this[t],i=1,f=0;++f<e&&(i*=256);)n+=this[t+f]*i;return n},Buffer.prototype.readUIntBE=function(t,e,r){t=0|t,e=0|e,r||checkOffset(t,e,this.length);for(var n=this[t+--e],i=1;e>0&&(i*=256);)n+=this[t+--e]*i;return n},Buffer.prototype.readUInt8=function(t,e){return e||checkOffset(t,1,this.length),this[t]},Buffer.prototype.readUInt16LE=function(t,e){return e||checkOffset(t,2,this.length),this[t]|this[t+1]<<8},Buffer.prototype.readUInt16BE=function(t,e){return e||checkOffset(t,2,this.length),this[t]<<8|this[t+1]},Buffer.prototype.readUInt32LE=function(t,e){return e||checkOffset(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},Buffer.prototype.readUInt32BE=function(t,e){return e||checkOffset(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},Buffer.prototype.readIntLE=function(t,e,r){t=0|t,e=0|e,r||checkOffset(t,e,this.length);for(var n=this[t],i=1,f=0;++f<e&&(i*=256);)n+=this[t+f]*i;return i*=128,n>=i&&(n-=Math.pow(2,8*e)),n},Buffer.prototype.readIntBE=function(t,e,r){t=0|t,e=0|e,r||checkOffset(t,e,this.length);for(var n=e,i=1,f=this[t+--n];n>0&&(i*=256);)f+=this[t+--n]*i;return i*=128,f>=i&&(f-=Math.pow(2,8*e)),f},Buffer.prototype.readInt8=function(t,e){return e||checkOffset(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},Buffer.prototype.readInt16LE=function(t,e){e||checkOffset(t,2,this.length);var r=this[t]|this[t+1]<<8;return 32768&r?4294901760|r:r},Buffer.prototype.readInt16BE=function(t,e){e||checkOffset(t,2,this.length);var r=this[t+1]|this[t]<<8;return 32768&r?4294901760|r:r},Buffer.prototype.readInt32LE=function(t,e){return e||checkOffset(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},Buffer.prototype.readInt32BE=function(t,e){return e||checkOffset(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},Buffer.prototype.readFloatLE=function(t,e){return e||checkOffset(t,4,this.length),ieee754.read(this,t,!0,23,4)},Buffer.prototype.readFloatBE=function(t,e){return e||checkOffset(t,4,this.length),ieee754.read(this,t,!1,23,4)},Buffer.prototype.readDoubleLE=function(t,e){return e||checkOffset(t,8,this.length),ieee754.read(this,t,!0,52,8)},Buffer.prototype.readDoubleBE=function(t,e){return e||checkOffset(t,8,this.length),ieee754.read(this,t,!1,52,8)},Buffer.prototype.writeUIntLE=function(t,e,r,n){t=+t,e=0|e,r=0|r,n||checkInt(this,t,e,r,Math.pow(2,8*r),0);var i=1,f=0;for(this[e]=255&t;++f<r&&(i*=256);)this[e+f]=t/i&255;return e+r},Buffer.prototype.writeUIntBE=function(t,e,r,n){t=+t,e=0|e,r=0|r,n||checkInt(this,t,e,r,Math.pow(2,8*r),0);var i=r-1,f=1;for(this[e+i]=255&t;--i>=0&&(f*=256);)this[e+i]=t/f&255;return e+r},Buffer.prototype.writeUInt8=function(t,e,r){return t=+t,e=0|e,r||checkInt(this,t,e,1,255,0),Buffer.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},Buffer.prototype.writeUInt16LE=function(t,e,r){return t=+t,e=0|e,r||checkInt(this,t,e,2,65535,0),Buffer.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):objectWriteUInt16(this,t,e,!0),e+2},Buffer.prototype.writeUInt16BE=function(t,e,r){return t=+t,e=0|e,r||checkInt(this,t,e,2,65535,0),Buffer.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):objectWriteUInt16(this,t,e,!1),e+2},Buffer.prototype.writeUInt32LE=function(t,e,r){return t=+t,e=0|e,r||checkInt(this,t,e,4,4294967295,0),Buffer.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):objectWriteUInt32(this,t,e,!0),e+4},Buffer.prototype.writeUInt32BE=function(t,e,r){return t=+t,e=0|e,r||checkInt(this,t,e,4,4294967295,0),Buffer.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):objectWriteUInt32(this,t,e,!1),e+4},Buffer.prototype.writeIntLE=function(t,e,r,n){if(t=+t,e=0|e,!n){var i=Math.pow(2,8*r-1);checkInt(this,t,e,r,i-1,-i)}var f=0,o=1,u=0>t?1:0;for(this[e]=255&t;++f<r&&(o*=256);)this[e+f]=(t/o>>0)-u&255;return e+r},Buffer.prototype.writeIntBE=function(t,e,r,n){if(t=+t,e=0|e,!n){var i=Math.pow(2,8*r-1);checkInt(this,t,e,r,i-1,-i)}var f=r-1,o=1,u=0>t?1:0;for(this[e+f]=255&t;--f>=0&&(o*=256);)this[e+f]=(t/o>>0)-u&255;return e+r},Buffer.prototype.writeInt8=function(t,e,r){return t=+t,e=0|e,r||checkInt(this,t,e,1,127,-128),Buffer.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),0>t&&(t=255+t+1),this[e]=255&t,e+1},Buffer.prototype.writeInt16LE=function(t,e,r){return t=+t,e=0|e,r||checkInt(this,t,e,2,32767,-32768),Buffer.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):objectWriteUInt16(this,t,e,!0),e+2},Buffer.prototype.writeInt16BE=function(t,e,r){return t=+t,e=0|e,r||checkInt(this,t,e,2,32767,-32768),Buffer.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):objectWriteUInt16(this,t,e,!1),e+2},Buffer.prototype.writeInt32LE=function(t,e,r){return t=+t,e=0|e,r||checkInt(this,t,e,4,2147483647,-2147483648),Buffer.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):objectWriteUInt32(this,t,e,!0),e+4},Buffer.prototype.writeInt32BE=function(t,e,r){return t=+t,e=0|e,r||checkInt(this,t,e,4,2147483647,-2147483648),0>t&&(t=4294967295+t+1),Buffer.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):objectWriteUInt32(this,t,e,!1),e+4},Buffer.prototype.writeFloatLE=function(t,e,r){return writeFloat(this,t,e,!0,r)},Buffer.prototype.writeFloatBE=function(t,e,r){return writeFloat(this,t,e,!1,r)},Buffer.prototype.writeDoubleLE=function(t,e,r){return writeDouble(this,t,e,!0,r)},Buffer.prototype.writeDoubleBE=function(t,e,r){return writeDouble(this,t,e,!1,r)},Buffer.prototype.copy=function(t,e,r,n){if(r||(r=0),n||0===n||(n=this.length),e>=t.length&&(e=t.length),e||(e=0),n>0&&r>n&&(n=r),n===r)return 0;if(0===t.length||0===this.length)return 0;if(0>e)throw new RangeError("targetStart out of bounds");if(0>r||r>=this.length)throw new RangeError("sourceStart out of bounds");if(0>n)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),t.length-e<n-r&&(n=t.length-e+r);var i,f=n-r;if(this===t&&e>r&&n>e)for(i=f-1;i>=0;i--)t[i+e]=this[i+r];else if(1e3>f||!Buffer.TYPED_ARRAY_SUPPORT)for(i=0;f>i;i++)t[i+e]=this[i+r];else t._set(this.subarray(r,r+f),e);return f},Buffer.prototype.fill=function(t,e,r){if(t||(t=0),e||(e=0),r||(r=this.length),e>r)throw new RangeError("end < start");if(r!==e&&0!==this.length){if(0>e||e>=this.length)throw new RangeError("start out of bounds");if(0>r||r>this.length)throw new RangeError("end out of bounds");var n;if("number"==typeof t)for(n=e;r>n;n++)this[n]=t;else{var i=utf8ToBytes(t.toString()),f=i.length;for(n=e;r>n;n++)this[n]=i[n%f]}return this}},Buffer.prototype.toArrayBuffer=function(){if("undefined"!=typeof Uint8Array){if(Buffer.TYPED_ARRAY_SUPPORT)return new Buffer(this).buffer;for(var t=new Uint8Array(this.length),e=0,r=t.length;r>e;e+=1)t[e]=this[e];return t.buffer}throw new TypeError("Buffer.toArrayBuffer not supported in this browser")};var BP=Buffer.prototype;Buffer._augment=function(t){return t.constructor=Buffer,t._isBuffer=!0,t._set=t.set,t.get=BP.get,t.set=BP.set,t.write=BP.write,t.toString=BP.toString,t.toLocaleString=BP.toString,t.toJSON=BP.toJSON,t.equals=BP.equals,t.compare=BP.compare,t.indexOf=BP.indexOf,t.copy=BP.copy,t.slice=BP.slice,t.readUIntLE=BP.readUIntLE,t.readUIntBE=BP.readUIntBE,t.readUInt8=BP.readUInt8,t.readUInt16LE=BP.readUInt16LE,t.readUInt16BE=BP.readUInt16BE,t.readUInt32LE=BP.readUInt32LE,t.readUInt32BE=BP.readUInt32BE,t.readIntLE=BP.readIntLE,t.readIntBE=BP.readIntBE,t.readInt8=BP.readInt8,t.readInt16LE=BP.readInt16LE,t.readInt16BE=BP.readInt16BE,t.readInt32LE=BP.readInt32LE,t.readInt32BE=BP.readInt32BE,t.readFloatLE=BP.readFloatLE,t.readFloatBE=BP.readFloatBE,t.readDoubleLE=BP.readDoubleLE,t.readDoubleBE=BP.readDoubleBE,t.writeUInt8=BP.writeUInt8,t.writeUIntLE=BP.writeUIntLE,t.writeUIntBE=BP.writeUIntBE,t.writeUInt16LE=BP.writeUInt16LE,t.writeUInt16BE=BP.writeUInt16BE,t.writeUInt32LE=BP.writeUInt32LE,t.writeUInt32BE=BP.writeUInt32BE,t.writeIntLE=BP.writeIntLE,t.writeIntBE=BP.writeIntBE,t.writeInt8=BP.writeInt8,t.writeInt16LE=BP.writeInt16LE,t.writeInt16BE=BP.writeInt16BE,t.writeInt32LE=BP.writeInt32LE,t.writeInt32BE=BP.writeInt32BE,t.writeFloatLE=BP.writeFloatLE,t.writeFloatBE=BP.writeFloatBE,t.writeDoubleLE=BP.writeDoubleLE,t.writeDoubleBE=BP.writeDoubleBE,t.fill=BP.fill,t.inspect=BP.inspect,t.toArrayBuffer=BP.toArrayBuffer,t};var INVALID_BASE64_RE=/[^+\/0-9A-Za-z-_]/g;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"base64-js":3,"ieee754":4,"is-array":5}],3:[function(require,module,exports){
var lookup="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";!function(t){"use strict";function r(t){var r=t.charCodeAt(0);return r===h||r===u?62:r===c||r===f?63:o>r?-1:o+10>r?r-o+26+26:i+26>r?r-i:A+26>r?r-A+26:void 0}function e(t){function e(t){i[f++]=t}var n,h,c,o,A,i;if(t.length%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var u=t.length;A="="===t.charAt(u-2)?2:"="===t.charAt(u-1)?1:0,i=new a(3*t.length/4-A),c=A>0?t.length-4:t.length;var f=0;for(n=0,h=0;c>n;n+=4,h+=3)o=r(t.charAt(n))<<18|r(t.charAt(n+1))<<12|r(t.charAt(n+2))<<6|r(t.charAt(n+3)),e((16711680&o)>>16),e((65280&o)>>8),e(255&o);return 2===A?(o=r(t.charAt(n))<<2|r(t.charAt(n+1))>>4,e(255&o)):1===A&&(o=r(t.charAt(n))<<10|r(t.charAt(n+1))<<4|r(t.charAt(n+2))>>2,e(o>>8&255),e(255&o)),i}function n(t){function r(t){return lookup.charAt(t)}function e(t){return r(t>>18&63)+r(t>>12&63)+r(t>>6&63)+r(63&t)}var n,a,h,c=t.length%3,o="";for(n=0,h=t.length-c;h>n;n+=3)a=(t[n]<<16)+(t[n+1]<<8)+t[n+2],o+=e(a);switch(c){case 1:a=t[t.length-1],o+=r(a>>2),o+=r(a<<4&63),o+="==";break;case 2:a=(t[t.length-2]<<8)+t[t.length-1],o+=r(a>>10),o+=r(a>>4&63),o+=r(a<<2&63),o+="="}return o}var a="undefined"!=typeof Uint8Array?Uint8Array:Array,h="+".charCodeAt(0),c="/".charCodeAt(0),o="0".charCodeAt(0),A="a".charCodeAt(0),i="A".charCodeAt(0),u="-".charCodeAt(0),f="_".charCodeAt(0);t.toByteArray=e,t.fromByteArray=n}("undefined"==typeof exports?this.base64js={}:exports);

},{}],4:[function(require,module,exports){
exports.read=function(a,o,t,r,h){var M,p,w=8*h-r-1,f=(1<<w)-1,e=f>>1,i=-7,N=t?h-1:0,n=t?-1:1,s=a[o+N];for(N+=n,M=s&(1<<-i)-1,s>>=-i,i+=w;i>0;M=256*M+a[o+N],N+=n,i-=8);for(p=M&(1<<-i)-1,M>>=-i,i+=r;i>0;p=256*p+a[o+N],N+=n,i-=8);if(0===M)M=1-e;else{if(M===f)return p?NaN:(s?-1:1)*(1/0);p+=Math.pow(2,r),M-=e}return(s?-1:1)*p*Math.pow(2,M-r)},exports.write=function(a,o,t,r,h,M){var p,w,f,e=8*M-h-1,i=(1<<e)-1,N=i>>1,n=23===h?Math.pow(2,-24)-Math.pow(2,-77):0,s=r?0:M-1,u=r?1:-1,l=0>o||0===o&&0>1/o?1:0;for(o=Math.abs(o),isNaN(o)||o===1/0?(w=isNaN(o)?1:0,p=i):(p=Math.floor(Math.log(o)/Math.LN2),o*(f=Math.pow(2,-p))<1&&(p--,f*=2),o+=p+N>=1?n/f:n*Math.pow(2,1-N),o*f>=2&&(p++,f/=2),p+N>=i?(w=0,p=i):p+N>=1?(w=(o*f-1)*Math.pow(2,h),p+=N):(w=o*Math.pow(2,N-1)*Math.pow(2,h),p=0));h>=8;a[t+s]=255&w,s+=u,w/=256,h-=8);for(p=p<<h|w,e+=h;e>0;a[t+s]=255&p,s+=u,p/=256,e-=8);a[t+s-u]|=128*l};

},{}],5:[function(require,module,exports){
var isArray=Array.isArray,str=Object.prototype.toString;module.exports=isArray||function(r){return!!r&&"[object Array]"==str.call(r)};

},{}],6:[function(require,module,exports){
function cleanUpNextTick(){draining=!1,currentQueue.length?queue=currentQueue.concat(queue):queueIndex=-1,queue.length&&drainQueue()}function drainQueue(){if(!draining){var e=setTimeout(cleanUpNextTick);draining=!0;for(var n=queue.length;n;){for(currentQueue=queue,queue=[];++queueIndex<n;)currentQueue&&currentQueue[queueIndex].run();queueIndex=-1,n=queue.length}currentQueue=null,draining=!1,clearTimeout(e)}}function Item(e,n){this.fun=e,this.array=n}function noop(){}var process=module.exports={},queue=[],draining=!1,currentQueue,queueIndex=-1;process.nextTick=function(e){var n=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)n[r-1]=arguments[r];queue.push(new Item(e,n)),1!==queue.length||draining||setTimeout(drainQueue,0)},Item.prototype.run=function(){this.fun.apply(null,this.array)},process.title="browser",process.browser=!0,process.env={},process.argv=[],process.version="",process.versions={},process.on=noop,process.addListener=noop,process.once=noop,process.off=noop,process.removeListener=noop,process.removeAllListeners=noop,process.emit=noop,process.binding=function(e){throw new Error("process.binding is not supported")},process.cwd=function(){return"/"},process.chdir=function(e){throw new Error("process.chdir is not supported")},process.umask=function(){return 0};

},{}],7:[function(require,module,exports){
!function(){"use strict";function t(t,e,n){n=n||!1;for(var r in e)!function(r){"function"==typeof e[r]?n||(t[r]=e[r].bind(e)):Object.defineProperty(t,r,{get:function(){return e[r]},set:function(t){e[r]=t}})}(r)}function e(e){t(this,e),this.pushObject=this.popObject=this.reset=function(){}}function n(t){if(t instanceof HTMLCanvasElement)return n(t.getContext("2d"));var r=t;if(u)return u(r);for(var o=0;o<n.cache.length;o++){var i=n.cache[o];if(i[0]==r)return i[1]}var c=new e(r);return n.cache.push([r,c]),c}function r(e){t(this,e,!0);var n=[];this.calls=n;for(var i in e)(function(t){"function"==typeof e[t]&&(this[t]=function(){var r=Array.prototype.slice.call(arguments);return n.push([t].concat(r)),e[t].apply(e,arguments)})}).bind(this)(i);this.pushObject=function(t){n.push(["pushObject",t])},this.popObject=function(){n.push(["popObject"])},this.reset=function(){this.calls=n=[]};var c=this.drawImage;this.drawImage=function(t){var i=r.recorderForCanvas(t);i?(e.drawImage.apply(e,arguments),n=n.concat(o(i.calls,arguments)),this.calls=n):c.apply(e,arguments)}}function o(t,e){var n,r,o=e[0],a=0,s=0,u=o.width,h=o.height,d=o.width,p=o.height;3==e.length?(n=e[1],r=e[2]):5==e.length?(n=e[1],r=e[2],d=e[3],p=e[4]):9==e.length&&(a=e[1],s=e[2],u=e[3],h=e[4],n=e[5],r=e[6],d=e[7],p=e[8]);var v=i(a,a+u,n,n+d),g=c(a,a+u,n,n+d),b=i(s,s+h,r,r+p),m=c(s,s+h,r,r+p),C=function(t){var e=t.slice(),n=e[0];if(n in l){var r=l[n];"number"==typeof r&&(r=[r]),r.forEach(function(t){e[1+t]=g(e[1+t]),e[2+t]=m(e[2+t])})}if(n in f){var o=f[n];"number"==typeof o&&(o=[o]),o.forEach(function(t){e[1+t]*=v,e[2+t]*=b})}return e};return t.map(C)}function i(t,e,n,r){return(r-n)/(e-t)}function c(t,e,n,r){var o=i(t,e,n,r);return function(e){return n+o*(e-t)}}function a(t,e){if(t)return r.recorderForSelector(t,e);if(r.recorders){if(0==r.recorders.length)throw"Called a RecordingContext method, but no canvases are being recorded.";if(r.recorders.length>1)throw"Called a RecordingContext method while multiple canvases were being recorded. Specify one using a div and selector.";return r.recorders[0][1]}throw"You must call RecordingContext.recordAll() before using other RecordingContext static methods"}function s(e,n,r){function o(){c.hits.unshift(Array.prototype.slice.call(i)),c.hit=c.hits[0]}t(this,e);var i=[];this.hits=[],this.hit=null;var c=this;this.pushObject=function(t){i.unshift(t)},this.popObject=function(){i.shift()},this.reset=function(){this.hits=[],this.hit=null},this.clearRect=function(t,e,n,r){},this.fillRect=function(t,e,i,c){n>=t&&t+i>=n&&r>=e&&e+c>=r&&o()},this.strokeRect=function(t,e,n,r){},this.fill=function(t){e.isPointInPath(n,r)&&o()},this.stroke=function(){e.isPointInStroke(n,r)&&o()},this.fillText=function(t,e,n,r){},this.strokeText=function(t,e,n,r){}}var u=null;n.cache=[];var l={clearRect:0,fillRect:0,strokeRect:0,fillText:1,strokeText:1,moveTo:0,lineTo:0,bezierCurveTo:[0,2,4],quadraticCurveTo:[0,2],rect:0},f={clearRect:2,fillRect:2,strokeRect:2,rect:2};r.prototype.drawnObjectsWith=function(t){return t||(t=function(){return!0}),this.callsOf("pushObject").filter(function(e){return t(e[1])}).map(function(t){return t[1]})},r.prototype.drawnObjects=r.prototype.drawnObjectsWith,r.prototype.callsOf=function(t){return this.calls.filter(function(e){return e[0]==t})},r.recordAll=function(){if(null!=u)throw"You forgot to call RecordingContext.reset()";r.recorders=[],u=function(t){var e=r.recorderForCanvas(t.canvas);return e?e:(e=new r(t),r.recorders.push([t.canvas,e]),e)}},r.reset=function(){if(!u)throw"Called RecordingContext.reset() before RecordingContext.recordAll()";u=null,r.recorders=null},r.recorderForCanvas=function(t){var e=r.recorders;if(null==e)throw"You must call RecordingContext.recordAll() before using other RecordingContext static methods";for(var n=0;n<e.length;n++){var o=e[n];if(o[0]==t)return o[1]}return null},r.recorderForSelector=function(t,e){var n=t.querySelector(e+" canvas")||t.querySelector(e);if(!n)throw"Unable to find a canvas matching "+e;if(!(n instanceof HTMLCanvasElement))throw"Selector "+e+" neither matches nor contains a canvas";return r.recorderForCanvas(n)},r.drawnObjectsWith=function(t,e,n){("function"==typeof t||0==arguments.length)&&(n=t,t=null);var r=a(t,e);return n=n||function(){return!0},r?r.drawnObjectsWith(n):[]},r.drawnObjects=r.drawnObjectsWith,r.callsOf=function(t,e,n){"string"==typeof t&&(n=t,t=null);var r=a(t,e);return r?r.callsOf(n):[]};var h={DataContext:e,RecordingContext:r,ClickTrackingContext:s,getDataContext:n};"undefined"!=typeof module?module.exports=h:window.dataCanvas=h}();

},{}],8:[function(require,module,exports){
!function(t){var e=this;"object"==typeof exports?module.exports=t(e,require("jdataview")):"function"==typeof define&&define.amd?define(["jdataview"],function(i){return t(e,i)}):e.jBinary=t(e,e.jDataView)}(function(t,e){"use strict";function i(t,e){return e&&t instanceof e}function n(t){for(var e=1,i=arguments.length;i>e;++e){var n=arguments[e];for(var r in n)void 0!==n[r]&&(t[r]=n[r])}return t}function r(t){return arguments[0]=l(t),n.apply(null,arguments)}function a(t,e,n){return i(n,Function)?n.call(t,e.contexts[0]):n}function s(t){return function(){var e=arguments,n=e.length-1,r=t.length-1,a=e[n];if(e.length=r+1,!i(a,Function)){var s=this;return new f(function(i,n){e[r]=function(t,e){return t?n(t):i(e)},t.apply(s,e)})}e[n]=void 0,e[r]=a,t.apply(this,e)}}function o(t,n){return i(t,o)?t.as(n):(i(t,e)||(t=new e(t,void 0,void 0,n?n["jBinary.littleEndian"]:void 0)),i(this,o)?(this.view=t,this.view.seek(0),this.contexts=[],this.as(n,!0)):new o(t,n))}function h(t){return r(h.prototype,t)}function u(t){return r(u.prototype,t,{createProperty:function(){var e=(t.createProperty||u.prototype.createProperty).apply(this,arguments);return e.getBaseType&&(e.baseType=e.binary.getType(e.getBaseType(e.binary.contexts[0]))),e}})}var c=t.document;"atob"in t&&"btoa"in t||!function(){function e(t){var e,i,r,a,s,o;for(r=t.length,i=0,e="";r>i;){if(a=255&t.charCodeAt(i++),i==r){e+=n.charAt(a>>2),e+=n.charAt((3&a)<<4),e+="==";break}if(s=t.charCodeAt(i++),i==r){e+=n.charAt(a>>2),e+=n.charAt((3&a)<<4|(240&s)>>4),e+=n.charAt((15&s)<<2),e+="=";break}o=t.charCodeAt(i++),e+=n.charAt(a>>2),e+=n.charAt((3&a)<<4|(240&s)>>4),e+=n.charAt((15&s)<<2|(192&o)>>6),e+=n.charAt(63&o)}return e}function i(t){var e,i,n,a,s,o,h;for(o=t.length,s=0,h="";o>s;){do e=r[255&t.charCodeAt(s++)];while(o>s&&-1==e);if(-1==e)break;do i=r[255&t.charCodeAt(s++)];while(o>s&&-1==i);if(-1==i)break;h+=String.fromCharCode(e<<2|(48&i)>>4);do{if(n=255&t.charCodeAt(s++),61==n)return h;n=r[n]}while(o>s&&-1==n);if(-1==n)break;h+=String.fromCharCode((15&i)<<4|(60&n)>>2);do{if(a=255&t.charCodeAt(s++),61==a)return h;a=r[a]}while(o>s&&-1==a);if(-1==a)break;h+=String.fromCharCode((3&n)<<6|a)}return h}var n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",r=[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,63,52,53,54,55,56,57,58,59,60,61,-1,-1,-1,-1,-1,-1,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,-1,-1,-1,-1,-1,-1,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,-1,-1,-1,-1,-1];t.btoa||(t.btoa=e),t.atob||(t.atob=i)}();var f=t.Promise||function(t){this.then=t},l=Object.create;l||(l=function(t){var e=function(){};return e.prototype=t,new e});var p=o.prototype,y=p.typeSet={};p.toValue=function(t){return a(this,this,t)},p._named=function(t,e,i){return t.displayName=e+" @ "+(void 0!==i?i:this.view.tell()),t};var d=Object.defineProperty;if(d)try{d({},"x",{})}catch(v){d=void 0}else d=function(t,e,i,n){n&&(t[e]=i.value)};var g="jBinary.Cache",b=0;if(p._getCached=function(t,e,i){if(t.hasOwnProperty(this.cacheKey))return t[this.cacheKey];var n=e.call(this,t);return d(t,this.cacheKey,{value:n},i),n},p.getContext=function(t){switch(typeof t){case"undefined":t=0;case"number":return this.contexts[t];case"string":return this.getContext(function(e){return t in e});case"function":for(var e=0,i=this.contexts.length;i>e;e++){var n=this.contexts[e];if(t.call(this,n))return n}}},p.inContext=function(t,e){this.contexts.unshift(t);var i=e.call(this);return this.contexts.shift(),i},h.prototype={inherit:function(t,e){function i(t,e){var i=a[t];i&&(n||(n=r(a)),e.call(n,i),n[t]=null)}var n,a=this;return i("params",function(e){for(var i=0,n=e.length;n>i;i++)this[e[i]]=t[i]}),i("setParams",function(e){e.apply(this,t)}),i("typeParams",function(t){for(var i=0,n=t.length;n>i;i++){var r=t[i],a=this[r];a&&(this[r]=e(a))}}),i("resolve",function(t){t.call(this,e)}),n||a},createProperty:function(t){return r(this,{binary:t,view:t.view})},toValue:function(t,e){return e!==!1&&"string"==typeof t?this.binary.getContext(t)[t]:a(this,this.binary,t)}},o.Type=h,u.prototype=r(h.prototype,{setParams:function(){this.baseType&&(this.typeParams=["baseType"].concat(this.typeParams||[]))},baseRead:function(){return this.binary.read(this.baseType)},baseWrite:function(t){return this.binary.write(this.baseType,t)}}),n(u.prototype,{read:u.prototype.baseRead,write:u.prototype.baseWrite}),o.Template=u,p.as=function(t,e){var i=e?this:r(this);return t=t||y,i.typeSet=t===y||y.isPrototypeOf(t)?t:r(y,t),i.cacheKey=g,i.cacheKey=i._getCached(t,function(){return g+"."+ ++b},!0),i},p.seek=function(t,e){if(t=this.toValue(t),void 0!==e){var i=this.view.tell();this.view.seek(t);var n=e.call(this);return this.view.seek(i),n}return this.view.seek(t)},p.tell=function(){return this.view.tell()},p.skip=function(t,e){return this.seek(this.tell()+this.toValue(t),e)},p.slice=function(t,e,i){return new o(this.view.slice(t,e,i),this.typeSet)},p._getType=function(t,e){switch(typeof t){case"string":if(!(t in this.typeSet))throw new ReferenceError("Unknown type: "+t);return this._getType(this.typeSet[t],e);case"number":return this._getType(y.bitfield,[t]);case"object":if(i(t,h)){var n=this;return t.inherit(e||[],function(t){return n.getType(t)})}return i(t,Array)?this._getCached(t,function(t){return this.getType(t[0],t.slice(1))},!0):this._getCached(t,function(t){return this.getType(y.object,[t])},!1)}},p.getType=function(t,e){var n=this._getType(t,e);return n&&!i(t,h)&&(n.name="object"==typeof t?i(t,Array)?t[0]+"("+t.slice(1).join(", ")+")":"object":String(t)),n},p._action=function(t,e,i){if(void 0!==t){t=this.getType(t);var n=this._named(function(){return i.call(this,t.createProperty(this),this.contexts[0])},"["+t.name+"]",e);return void 0!==e?this.seek(e,n):n.call(this)}},p.read=function(t,e){return this._action(t,e,function(t,e){return t.read(e)})},p.readAll=function(){return this.read("jBinary.all",0)},p.write=function(t,e,i){return this._action(t,i,function(t,i){var n=this.tell();return t.write(e,i),this.tell()-n})},p.writeAll=function(t){return this.write("jBinary.all",t,0)},function(t,e){for(var i=0,n=e.length;n>i;i++){var a=e[i];y[a.toLowerCase()]=r(t,{dataType:a})}}(h({params:["littleEndian"],read:function(){return this.view["get"+this.dataType](void 0,this.littleEndian)},write:function(t){this.view["write"+this.dataType](t,this.littleEndian)}}),["Uint8","Uint16","Uint32","Uint64","Int8","Int16","Int32","Int64","Float32","Float64","Char"]),n(y,{"byte":y.uint8,"float":y.float32,"double":y.float64}),y.array=u({params:["baseType","length"],read:function(){var t=this.toValue(this.length);if(this.baseType===y.uint8)return this.view.getBytes(t,void 0,!0,!0);var e;if(void 0!==t){e=new Array(t);for(var i=0;t>i;i++)e[i]=this.baseRead()}else{var n=this.view.byteLength;for(e=[];this.binary.tell()<n;)e.push(this.baseRead())}return e},write:function(t){if(this.baseType===y.uint8)return this.view.writeBytes(t);for(var e=0,i=t.length;i>e;e++)this.baseWrite(t[e])}}),y.binary=u({params:["length","typeSet"],read:function(){var t=this.binary.tell(),e=this.binary.skip(this.toValue(this.length)),i=this.view.slice(t,e);return new o(i,this.typeSet)},write:function(t){this.binary.write("blob",t.read("blob",0))}}),y.bitfield=h({params:["bitSize"],read:function(){return this.view.getUnsigned(this.bitSize)},write:function(t){this.view.writeUnsigned(t,this.bitSize)}}),y.blob=h({params:["length"],read:function(){return this.view.getBytes(this.toValue(this.length))},write:function(t){this.view.writeBytes(t,!0)}}),y["const"]=u({params:["baseType","value","strict"],read:function(){var t=this.baseRead();if(this.strict&&t!==this.value){if(i(this.strict,Function))return this.strict(t);throw new TypeError("Unexpected value ("+t+" !== "+this.value+").")}return t},write:function(t){this.baseWrite(this.strict||void 0===t?this.value:t)}}),y["enum"]=u({params:["baseType","matches"],setParams:function(t,e){this.backMatches={};for(var i in e)this.backMatches[e[i]]=i},read:function(){var t=this.baseRead();return t in this.matches?this.matches[t]:t},write:function(t){this.baseWrite(t in this.backMatches?this.backMatches[t]:t)}}),y.extend=h({setParams:function(){this.parts=arguments},resolve:function(t){for(var e=this.parts,i=e.length,n=new Array(i),r=0;i>r;r++)n[r]=t(e[r]);this.parts=n},read:function(){var t=this.parts,e=this.binary.read(t[0]);return this.binary.inContext(e,function(){for(var i=1,r=t.length;r>i;i++)n(e,this.read(t[i]))}),e},write:function(t){var e=this.parts;this.binary.inContext(t,function(){for(var i=0,n=e.length;n>i;i++)this.write(e[i],t)})}}),y["if"]=u({params:["condition","trueType","falseType"],typeParams:["trueType","falseType"],getBaseType:function(){return this.toValue(this.condition)?this.trueType:this.falseType}}),y.if_not=y.ifNot=u({setParams:function(t,e,i){this.baseType=["if",t,i,e]}}),y.lazy=u({marker:"jBinary.Lazy",params:["innerType","length"],getBaseType:function(){return["binary",this.length,this.binary.typeSet]},read:function(){var t=function(e){return 0===arguments.length?"value"in t?t.value:t.value=t.binary.read(t.innerType):n(t,{wasChanged:!0,value:e}).value};return t[this.marker]=!0,n(t,{binary:n(this.baseRead(),{contexts:this.binary.contexts.slice()}),innerType:this.innerType})},write:function(t){t.wasChanged||!t[this.marker]?this.binary.write(this.innerType,t()):this.baseWrite(t.binary)}}),y.object=h({params:["structure","proto"],resolve:function(t){var e={};for(var n in this.structure)e[n]=i(this.structure[n],Function)?this.structure[n]:t(this.structure[n]);this.structure=e},read:function(){var t=this,e=this.structure,n=this.proto?r(this.proto):{};return this.binary.inContext(n,function(){for(var r in e)this._named(function(){var a=i(e[r],Function)?e[r].call(t,n):this.read(e[r]);void 0!==a&&(n[r]=a)},r).call(this)}),n},write:function(t){var e=this,n=this.structure;this.binary.inContext(t,function(){for(var r in n)this._named(function(){i(n[r],Function)?t[r]=n[r].call(e,t):this.write(n[r],t[r])},r).call(this)})}}),y.skip=h({params:["length"],read:function(){this.view.skip(this.toValue(this.length))},write:function(){this.read()}}),y.string=u({params:["length","encoding"],read:function(){return this.view.getString(this.toValue(this.length),void 0,this.encoding)},write:function(t){this.view.writeString(t,this.encoding)}}),y.string0=h({params:["length","encoding"],read:function(){var t=this.view,e=this.length;if(void 0===e){var i,n=t.tell(),r=0;for(e=t.byteLength-n;e>r&&(i=t.getUint8());)r++;var a=t.getString(r,n,this.encoding);return e>r&&t.skip(1),a}return t.getString(e,void 0,this.encoding).replace(/\0.*$/,"")},write:function(t){var e=this.view,i=void 0===this.length?1:this.length-t.length;e.writeString(t,void 0,this.encoding),i>0&&(e.writeUint8(0),e.skip(i-1))}}),o.loadData=s(function(e,n){var r;if(i(e,t.Blob)){var a;if("FileReader"in t)a=new FileReader,a.onload=a.onerror=function(){n(this.error,this.result)},a.readAsArrayBuffer(e);else{a=new FileReaderSync;var s,o;try{o=a.readAsArrayBuffer(e)}catch(h){s=h}finally{n(s,o)}}}else if("string"!=typeof e)n(new TypeError("Unsupported source type."));else if(r=e.match(/^data:(.+?)(;base64)?,(.*)$/))try{var u=r[2],c=r[3];n(null,(u?atob:decodeURIComponent)(c))}catch(h){n(h)}else if("XMLHttpRequest"in t){var f=new XMLHttpRequest;f.open("GET",e,!0),"responseType"in f?f.responseType="arraybuffer":"overrideMimeType"in f?f.overrideMimeType("text/plain; charset=x-user-defined"):f.setRequestHeader("Accept-Charset","x-user-defined"),"onload"in f||(f.onreadystatechange=function(){4===this.readyState&&this.onload()});var l=function(t){n(new Error(t))};f.onload=function(){return 0!==this.status&&200!==this.status?l("HTTP Error #"+this.status+": "+this.statusText):("response"in this||(this.response=new VBArray(this.responseBody).toArray()),void n(null,this.response))},f.onerror=function(){l("Network error.")},f.send(null)}else n(new TypeError("Unsupported source type."))}),o.load=s(function(t,e,i){var n=o.loadData(t);o.load.getTypeSet(t,e,function(t){n.then(function(e){i(null,new o(e,t))},i)})}),o.load.getTypeSet=function(t,e,i){i(e)},p._toURI="URL"in t&&"createObjectURL"in URL?function(t){var e=this.seek(0,function(){return this.view.getBytes()});return URL.createObjectURL(new Blob([e],{type:t}))}:function(t){var e=this.seek(0,function(){return this.view.getString(void 0,void 0,"binary")});return"data:"+t+";base64,"+btoa(e)},p._mimeType=function(t){return t||this.typeSet["jBinary.mimeType"]||"application/octet-stream"},p.toURI=function(t){return this._toURI(this._mimeType(t))},c){var w=o.downloader=c.createElement("a");w.style.display="none"}return p.saveAs=s(function(t,e,i){"string"==typeof t?("msSaveBlob"in navigator?navigator.msSaveBlob(new Blob([this.read("blob",0)],{type:this._mimeType(e)}),t):c?(w.parentNode||c.body.appendChild(w),w.href=this.toURI(e),w.download=t,w.click(),w.href=w.download=""):i(new TypeError("Saving from Web Worker is not supported.")),i()):i(new TypeError("Unsupported storage type."))}),o});

},{"jdataview":9}],9:[function(require,module,exports){
(function (Buffer){
!function(t){var e=this;module.exports=t(e)}(function(t){"use strict";function e(t,e){return"object"!=typeof t||null===t?!1:t.constructor===e||Object.prototype.toString.call(t)==="[object "+e.name+"]"}function i(t,i){return!i&&e(t,Array)?t:Array.prototype.slice.call(t)}function n(t,e){return void 0!==t?t:e}function r(t,i,f,s){if(r.is(t)){var o=t.slice(i,i+f);return o._littleEndian=n(s,o._littleEndian),o}if(!r.is(this))return new r(t,i,f,s);if(this.buffer=t=r.wrapBuffer(t),this._isArrayBuffer=h.ArrayBuffer&&e(t,ArrayBuffer),this._isPixelData=!1,this._isDataView=h.DataView&&this._isArrayBuffer,this._isNodeBuffer=h.NodeBuffer&&e(t,Buffer),!this._isNodeBuffer&&!this._isArrayBuffer&&!e(t,Array))throw new TypeError("jDataView buffer has an incompatible type");this._littleEndian=!!s;var u="byteLength"in t?t.byteLength:t.length;this.byteOffset=i=n(i,0),this.byteLength=f=n(f,u-i),this._offset=this._bitOffset=0,this._isDataView?this._view=new DataView(t,i,f):this._checkBounds(i,f,u),this._engineAction=this._isDataView?this._dataViewAction:this._isNodeBuffer?this._nodeBufferAction:this._isArrayBuffer?this._arrayBufferAction:this._arrayAction}function f(t){if(h.NodeBuffer)return new Buffer(t,"binary");for(var e=h.ArrayBuffer?Uint8Array:Array,i=new e(t.length),n=0,r=t.length;r>n;n++)i[n]=255&t.charCodeAt(n);return i}function s(t){return t>=0&&31>t?1<<t:s[t]||(s[t]=Math.pow(2,t))}function o(t,e){this.lo=t,this.hi=e}function u(){o.apply(this,arguments)}var h={NodeBuffer:"Buffer"in t,DataView:"DataView"in t,ArrayBuffer:"ArrayBuffer"in t,PixelData:!1},a=t.TextEncoder,_=t.TextDecoder;h.NodeBuffer&&!function(t){try{t.writeFloatLE(1/0,0)}catch(e){h.NodeBuffer=!1}}(new Buffer(4));var c={Int8:1,Int16:2,Int32:4,Uint8:1,Uint16:2,Uint32:4,Float32:4,Float64:8};r.wrapBuffer=function(t){switch(typeof t){case"number":if(h.NodeBuffer)t=new Buffer(t),t.fill(0);else if(h.ArrayBuffer)t=new Uint8Array(t).buffer;else{t=new Array(t);for(var n=0;n<t.length;n++)t[n]=0}return t;case"string":t=f(t);default:return"length"in t&&!(h.NodeBuffer&&e(t,Buffer)||h.ArrayBuffer&&e(t,ArrayBuffer))&&(h.NodeBuffer?t=new Buffer(t):h.ArrayBuffer?e(t,ArrayBuffer)||(t=new Uint8Array(t).buffer,e(t,ArrayBuffer)||(t=new Uint8Array(i(t,!0)).buffer)):t=i(t)),t}},r.is=function(t){return t&&t.jDataView},r.from=function(){return new r(arguments)},r.Uint64=o,o.prototype={valueOf:function(){return this.lo+s(32)*this.hi},toString:function(){return Number.prototype.toString.apply(this.valueOf(),arguments)}},o.fromNumber=function(t){var e=Math.floor(t/s(32)),i=t-e*s(32);return new o(i,e)},r.Int64=u,u.prototype="create"in Object?Object.create(o.prototype):new o,u.prototype.valueOf=function(){return this.hi<s(31)?o.prototype.valueOf.apply(this,arguments):-(s(32)-this.lo+s(32)*(s(32)-1-this.hi))},u.fromNumber=function(t){var e,i;if(t>=0){var n=o.fromNumber(t);e=n.lo,i=n.hi}else i=Math.floor(t/s(32)),e=t-i*s(32),i+=s(32);return new u(e,i)};var y=r.prototype={compatibility:h,jDataView:!0,_checkBounds:function(t,e,i){if("number"!=typeof t)throw new TypeError("Offset is not a number.");if("number"!=typeof e)throw new TypeError("Size is not a number.");if(0>e)throw new RangeError("Length is negative.");if(0>t||t+e>n(i,this.byteLength))throw new RangeError("Offsets are out of bounds.")},_action:function(t,e,i,r,f){return this._engineAction(t,e,n(i,this._offset),n(r,this._littleEndian),f)},_dataViewAction:function(t,e,i,n,r){return this._offset=i+c[t],e?this._view["get"+t](i,n):this._view["set"+t](i,r,n)},_arrayBufferAction:function(e,i,r,f,s){var o,u=c[e],h=t[e+"Array"];if(f=n(f,this._littleEndian),1===u||(this.byteOffset+r)%u===0&&f)return o=new h(this.buffer,this.byteOffset+r,1),this._offset=r+u,i?o[0]:o[0]=s;var a=new Uint8Array(i?this.getBytes(u,r,f,!0):u);return o=new h(a.buffer,0,1),i?o[0]:(o[0]=s,void this._setBytes(r,a,f))},_arrayAction:function(t,e,i,n,r){return e?this["_get"+t](i,n):this["_set"+t](i,r,n)},_getBytes:function(t,e,r){r=n(r,this._littleEndian),e=n(e,this._offset),t=n(t,this.byteLength-e),this._checkBounds(e,t),e+=this.byteOffset,this._offset=e-this.byteOffset+t;var f=this._isArrayBuffer?new Uint8Array(this.buffer,e,t):(this.buffer.slice||Array.prototype.slice).call(this.buffer,e,e+t);return r||1>=t?f:i(f).reverse()},getBytes:function(t,e,r,f){var s=this._getBytes(t,e,n(r,!0));return f?i(s):s},_setBytes:function(t,e,r){var f=e.length;if(0!==f){if(r=n(r,this._littleEndian),t=n(t,this._offset),this._checkBounds(t,f),!r&&f>1&&(e=i(e,!0).reverse()),t+=this.byteOffset,this._isArrayBuffer)new Uint8Array(this.buffer,t,f).set(e);else if(this._isNodeBuffer)new Buffer(e).copy(this.buffer,t);else for(var s=0;f>s;s++)this.buffer[t+s]=e[s];this._offset=t-this.byteOffset+f}},setBytes:function(t,e,i){this._setBytes(t,e,n(i,!0))},getString:function(t,e,i){if(this._isNodeBuffer)return e=n(e,this._offset),t=n(t,this.byteLength-e),this._checkBounds(e,t),this._offset=e+t,this.buffer.toString(i||"binary",this.byteOffset+e,this.byteOffset+this._offset);var r=this._getBytes(t,e,!0);if(i="utf8"===i?"utf-8":i||"binary",_&&"binary"!==i)return new _(i).decode(this._isArrayBuffer?r:new Uint8Array(r));var f="";t=r.length;for(var s=0;t>s;s++)f+=String.fromCharCode(r[s]);return"utf-8"===i&&(f=decodeURIComponent(escape(f))),f},setString:function(t,e,i){if(this._isNodeBuffer)return t=n(t,this._offset),this._checkBounds(t,e.length),void(this._offset=t+this.buffer.write(e,this.byteOffset+t,i||"binary"));i="utf8"===i?"utf-8":i||"binary";var r;a&&"binary"!==i?r=new a(i).encode(e):("utf-8"===i&&(e=unescape(encodeURIComponent(e))),r=f(e)),this._setBytes(t,r,!0)},getChar:function(t){return this.getString(1,t)},setChar:function(t,e){this.setString(t,e)},tell:function(){return this._offset},seek:function(t){return this._checkBounds(t,0),this._offset=t},skip:function(t){return this.seek(this._offset+t)},slice:function(t,e,i){function f(t,e){return 0>t?t+e:t}return t=f(t,this.byteLength),e=f(n(e,this.byteLength),this.byteLength),i?new r(this.getBytes(e-t,t,!0,!0),void 0,void 0,this._littleEndian):new r(this.buffer,this.byteOffset+t,e-t,this._littleEndian)},alignBy:function(t){return this._bitOffset=0,1!==n(t,1)?this.skip(t-(this._offset%t||t)):this._offset},_getFloat64:function(t,e){var i=this._getBytes(8,t,e),n=1-2*(i[7]>>7),r=((i[7]<<1&255)<<3|i[6]>>4)-1023,f=(15&i[6])*s(48)+i[5]*s(40)+i[4]*s(32)+i[3]*s(24)+i[2]*s(16)+i[1]*s(8)+i[0];return 1024===r?0!==f?NaN:1/0*n:-1023===r?n*f*s(-1074):n*(1+f*s(-52))*s(r)},_getFloat32:function(t,e){var i=this._getBytes(4,t,e),n=1-2*(i[3]>>7),r=(i[3]<<1&255|i[2]>>7)-127,f=(127&i[2])<<16|i[1]<<8|i[0];return 128===r?0!==f?NaN:1/0*n:-127===r?n*f*s(-149):n*(1+f*s(-23))*s(r)},_get64:function(t,e,i){i=n(i,this._littleEndian),e=n(e,this._offset);for(var r=i?[0,4]:[4,0],f=0;2>f;f++)r[f]=this.getUint32(e+r[f],i);return this._offset=e+8,new t(r[0],r[1])},getInt64:function(t,e){return this._get64(u,t,e)},getUint64:function(t,e){return this._get64(o,t,e)},_getInt32:function(t,e){var i=this._getBytes(4,t,e);return i[3]<<24|i[2]<<16|i[1]<<8|i[0]},_getUint32:function(t,e){return this._getInt32(t,e)>>>0},_getInt16:function(t,e){return this._getUint16(t,e)<<16>>16},_getUint16:function(t,e){var i=this._getBytes(2,t,e);return i[1]<<8|i[0]},_getInt8:function(t){return this._getUint8(t)<<24>>24},_getUint8:function(t){return this._getBytes(1,t)[0]},_getBitRangeData:function(t,e){var i=(n(e,this._offset)<<3)+this._bitOffset,r=i+t,f=i>>>3,s=r+7>>>3,o=this._getBytes(s-f,f,!0),u=0;(this._bitOffset=7&r)&&(this._bitOffset-=8);for(var h=0,a=o.length;a>h;h++)u=u<<8|o[h];return{start:f,bytes:o,wideValue:u}},getSigned:function(t,e){var i=32-t;return this.getUnsigned(t,e)<<i>>i},getUnsigned:function(t,e){var i=this._getBitRangeData(t,e).wideValue>>>-this._bitOffset;return 32>t?i&~(-1<<t):i},_setBinaryFloat:function(t,e,i,n,r){var f,o,u=0>e?1:0,h=~(-1<<n-1),a=1-h;0>e&&(e=-e),0===e?(f=0,o=0):isNaN(e)?(f=2*h+1,o=1):1/0===e?(f=2*h+1,o=0):(f=Math.floor(Math.log(e)/Math.LN2),f>=a&&h>=f?(o=Math.floor((e*s(-f)-1)*s(i)),f+=h):(o=Math.floor(e/s(a-i)),f=0));for(var _=[];i>=8;)_.push(o%256),o=Math.floor(o/256),i-=8;for(f=f<<i|o,n+=i;n>=8;)_.push(255&f),f>>>=8,n-=8;_.push(u<<n|f),this._setBytes(t,_,r)},_setFloat32:function(t,e,i){this._setBinaryFloat(t,e,23,8,i)},_setFloat64:function(t,e,i){this._setBinaryFloat(t,e,52,11,i)},_set64:function(t,e,i,r){"object"!=typeof i&&(i=t.fromNumber(i)),r=n(r,this._littleEndian),e=n(e,this._offset);var f=r?{lo:0,hi:4}:{lo:4,hi:0};for(var s in f)this.setUint32(e+f[s],i[s],r);this._offset=e+8},setInt64:function(t,e,i){this._set64(u,t,e,i)},setUint64:function(t,e,i){this._set64(o,t,e,i)},_setUint32:function(t,e,i){this._setBytes(t,[255&e,e>>>8&255,e>>>16&255,e>>>24],i)},_setUint16:function(t,e,i){this._setBytes(t,[255&e,e>>>8&255],i)},_setUint8:function(t,e){this._setBytes(t,[255&e])},setUnsigned:function(t,e,i){var n=this._getBitRangeData(i,t),r=n.wideValue,f=n.bytes;r&=~(~(-1<<i)<<-this._bitOffset),r|=(32>i?e&~(-1<<i):e)<<-this._bitOffset;for(var s=f.length-1;s>=0;s--)f[s]=255&r,r>>>=8;this._setBytes(n.start,f,!0)}},l={Int8:"Int8",Int16:"Int16",Int32:"Int32",Uint8:"UInt8",Uint16:"UInt16",Uint32:"UInt32",Float32:"Float",Float64:"Double"};y._nodeBufferAction=function(t,e,i,n,r){this._offset=i+c[t];var f=l[t]+("Int8"===t||"Uint8"===t?"":n?"LE":"BE");return i+=this.byteOffset,e?this.buffer["read"+f](i):this.buffer["write"+f](r,i)};for(var g in c)!function(t){y["get"+t]=function(e,i){return this._action(t,!0,e,i)},y["set"+t]=function(e,i,n){this._action(t,!1,e,n,i)}}(g);y._setInt32=y._setUint32,y._setInt16=y._setUint16,y._setInt8=y._setUint8,y.setSigned=y.setUnsigned;for(var B in y)"set"===B.slice(0,3)&&!function(t){y["write"+t]=function(){Array.prototype.unshift.call(arguments,void 0),this["set"+t].apply(this,arguments)}}(B.slice(3));return r});

}).call(this,require("buffer").Buffer)

},{"buffer":2}],10:[function(require,module,exports){
"use strict";function inflate(t,i){var n=new Inflate(i);if(n.push(t,!0),n.err)throw n.msg;return n.result}function inflateRaw(t,i){return i=i||{},i.raw=!0,inflate(t,i)}var zlib_inflate=require("./zlib/inflate.js"),utils=require("./utils/common"),strings=require("./utils/strings"),c=require("./zlib/constants"),msg=require("./zlib/messages"),zstream=require("./zlib/zstream"),gzheader=require("./zlib/gzheader"),toString=Object.prototype.toString,Inflate=function(t){this.options=utils.assign({chunkSize:16384,windowBits:0,to:""},t||{});var i=this.options;i.raw&&i.windowBits>=0&&i.windowBits<16&&(i.windowBits=-i.windowBits,0===i.windowBits&&(i.windowBits=-15)),!(i.windowBits>=0&&i.windowBits<16)||t&&t.windowBits||(i.windowBits+=32),i.windowBits>15&&i.windowBits<48&&0===(15&i.windowBits)&&(i.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new zstream,this.strm.avail_out=0;var n=zlib_inflate.inflateInit2(this.strm,i.windowBits);if(n!==c.Z_OK)throw new Error(msg[n]);this.header=new gzheader,zlib_inflate.inflateGetHeader(this.strm,this.header)};Inflate.prototype.push=function(t,i){var n,s,e,r,o,a=this.strm,u=this.options.chunkSize,l=!1;if(this.ended)return!1;s=i===~~i?i:i===!0?c.Z_FINISH:c.Z_NO_FLUSH,"string"==typeof t?a.input=strings.binstring2buf(t):"[object ArrayBuffer]"===toString.call(t)?a.input=new Uint8Array(t):a.input=t,a.next_in=0,a.avail_in=a.input.length;do{if(0===a.avail_out&&(a.output=new utils.Buf8(u),a.next_out=0,a.avail_out=u),n=zlib_inflate.inflate(a,c.Z_NO_FLUSH),n===c.Z_BUF_ERROR&&l===!0&&(n=c.Z_OK,l=!1),n!==c.Z_STREAM_END&&n!==c.Z_OK)return this.onEnd(n),this.ended=!0,!1;a.next_out&&(0===a.avail_out||n===c.Z_STREAM_END||0===a.avail_in&&(s===c.Z_FINISH||s===c.Z_SYNC_FLUSH))&&("string"===this.options.to?(e=strings.utf8border(a.output,a.next_out),r=a.next_out-e,o=strings.buf2string(a.output,e),a.next_out=r,a.avail_out=u-r,r&&utils.arraySet(a.output,a.output,e,r,0),this.onData(o)):this.onData(utils.shrinkBuf(a.output,a.next_out))),0===a.avail_in&&0===a.avail_out&&(l=!0)}while((a.avail_in>0||0===a.avail_out)&&n!==c.Z_STREAM_END);return n===c.Z_STREAM_END&&(s=c.Z_FINISH),s===c.Z_FINISH?(n=zlib_inflate.inflateEnd(this.strm),this.onEnd(n),this.ended=!0,n===c.Z_OK):s===c.Z_SYNC_FLUSH?(this.onEnd(c.Z_OK),a.avail_out=0,!0):!0},Inflate.prototype.onData=function(t){this.chunks.push(t)},Inflate.prototype.onEnd=function(t){t===c.Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=utils.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg},exports.Inflate=Inflate,exports.inflate=inflate,exports.inflateRaw=inflateRaw,exports.ungzip=inflate;

},{"./utils/common":11,"./utils/strings":12,"./zlib/constants":14,"./zlib/gzheader":16,"./zlib/inflate.js":18,"./zlib/messages":20,"./zlib/zstream":21}],11:[function(require,module,exports){
"use strict";var TYPED_OK="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;exports.assign=function(r){for(var t=Array.prototype.slice.call(arguments,1);t.length;){var e=t.shift();if(e){if("object"!=typeof e)throw new TypeError(e+"must be non-object");for(var n in e)e.hasOwnProperty(n)&&(r[n]=e[n])}}return r},exports.shrinkBuf=function(r,t){return r.length===t?r:r.subarray?r.subarray(0,t):(r.length=t,r)};var fnTyped={arraySet:function(r,t,e,n,a){if(t.subarray&&r.subarray)return void r.set(t.subarray(e,e+n),a);for(var o=0;n>o;o++)r[a+o]=t[e+o]},flattenChunks:function(r){var t,e,n,a,o,s;for(n=0,t=0,e=r.length;e>t;t++)n+=r[t].length;for(s=new Uint8Array(n),a=0,t=0,e=r.length;e>t;t++)o=r[t],s.set(o,a),a+=o.length;return s}},fnUntyped={arraySet:function(r,t,e,n,a){for(var o=0;n>o;o++)r[a+o]=t[e+o]},flattenChunks:function(r){return[].concat.apply([],r)}};exports.setTyped=function(r){r?(exports.Buf8=Uint8Array,exports.Buf16=Uint16Array,exports.Buf32=Int32Array,exports.assign(exports,fnTyped)):(exports.Buf8=Array,exports.Buf16=Array,exports.Buf32=Array,exports.assign(exports,fnUntyped))},exports.setTyped(TYPED_OK);

},{}],12:[function(require,module,exports){
"use strict";function buf2binstring(r,t){if(65537>t&&(r.subarray&&STR_APPLY_UIA_OK||!r.subarray&&STR_APPLY_OK))return String.fromCharCode.apply(null,utils.shrinkBuf(r,t));for(var n="",e=0;t>e;e++)n+=String.fromCharCode(r[e]);return n}var utils=require("./common"),STR_APPLY_OK=!0,STR_APPLY_UIA_OK=!0;try{String.fromCharCode.apply(null,[0])}catch(__){STR_APPLY_OK=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(__){STR_APPLY_UIA_OK=!1}for(var _utf8len=new utils.Buf8(256),q=0;256>q;q++)_utf8len[q]=q>=252?6:q>=248?5:q>=240?4:q>=224?3:q>=192?2:1;_utf8len[254]=_utf8len[254]=1,exports.string2buf=function(r){var t,n,e,u,f,o=r.length,i=0;for(u=0;o>u;u++)n=r.charCodeAt(u),55296===(64512&n)&&o>u+1&&(e=r.charCodeAt(u+1),56320===(64512&e)&&(n=65536+(n-55296<<10)+(e-56320),u++)),i+=128>n?1:2048>n?2:65536>n?3:4;for(t=new utils.Buf8(i),f=0,u=0;i>f;u++)n=r.charCodeAt(u),55296===(64512&n)&&o>u+1&&(e=r.charCodeAt(u+1),56320===(64512&e)&&(n=65536+(n-55296<<10)+(e-56320),u++)),128>n?t[f++]=n:2048>n?(t[f++]=192|n>>>6,t[f++]=128|63&n):65536>n?(t[f++]=224|n>>>12,t[f++]=128|n>>>6&63,t[f++]=128|63&n):(t[f++]=240|n>>>18,t[f++]=128|n>>>12&63,t[f++]=128|n>>>6&63,t[f++]=128|63&n);return t},exports.buf2binstring=function(r){return buf2binstring(r,r.length)},exports.binstring2buf=function(r){for(var t=new utils.Buf8(r.length),n=0,e=t.length;e>n;n++)t[n]=r.charCodeAt(n);return t},exports.buf2string=function(r,t){var n,e,u,f,o=t||r.length,i=new Array(2*o);for(e=0,n=0;o>n;)if(u=r[n++],128>u)i[e++]=u;else if(f=_utf8len[u],f>4)i[e++]=65533,n+=f-1;else{for(u&=2===f?31:3===f?15:7;f>1&&o>n;)u=u<<6|63&r[n++],f--;f>1?i[e++]=65533:65536>u?i[e++]=u:(u-=65536,i[e++]=55296|u>>10&1023,i[e++]=56320|1023&u)}return buf2binstring(i,e)},exports.utf8border=function(r,t){var n;for(t=t||r.length,t>r.length&&(t=r.length),n=t-1;n>=0&&128===(192&r[n]);)n--;return 0>n?t:0===n?t:n+_utf8len[r[n]]>t?n:t};

},{"./common":11}],13:[function(require,module,exports){
"use strict";function adler32(e,r,o,t){for(var d=65535&e|0,l=e>>>16&65535|0,u=0;0!==o;){u=o>2e3?2e3:o,o-=u;do d=d+r[t++]|0,l=l+d|0;while(--u);d%=65521,l%=65521}return d|l<<16|0}module.exports=adler32;

},{}],14:[function(require,module,exports){
module.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8};

},{}],15:[function(require,module,exports){
"use strict";function makeTable(){for(var r,a=[],c=0;256>c;c++){r=c;for(var e=0;8>e;e++)r=1&r?3988292384^r>>>1:r>>>1;a[c]=r}return a}function crc32(r,a,c,e){var o=crcTable,t=e+c;r=-1^r;for(var n=e;t>n;n++)r=r>>>8^o[255&(r^a[n])];return-1^r}var crcTable=makeTable();module.exports=crc32;

},{}],16:[function(require,module,exports){
"use strict";function GZheader(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}module.exports=GZheader;

},{}],17:[function(require,module,exports){
"use strict";var BAD=30,TYPE=12;module.exports=function(i,e){var o,a,t,d,n,l,s,f,r,b,c,u,v,m,w,h,k,_,x,g,A,B,D,p,E;o=i.state,a=i.next_in,p=i.input,t=a+(i.avail_in-5),d=i.next_out,E=i.output,n=d-(e-i.avail_out),l=d+(i.avail_out-257),s=o.dmax,f=o.wsize,r=o.whave,b=o.wnext,c=o.window,u=o.hold,v=o.bits,m=o.lencode,w=o.distcode,h=(1<<o.lenbits)-1,k=(1<<o.distbits)-1;i:do{15>v&&(u+=p[a++]<<v,v+=8,u+=p[a++]<<v,v+=8),_=m[u&h];e:for(;;){if(x=_>>>24,u>>>=x,v-=x,x=_>>>16&255,0===x)E[d++]=65535&_;else{if(!(16&x)){if(0===(64&x)){_=m[(65535&_)+(u&(1<<x)-1)];continue e}if(32&x){o.mode=TYPE;break i}i.msg="invalid literal/length code",o.mode=BAD;break i}g=65535&_,x&=15,x&&(x>v&&(u+=p[a++]<<v,v+=8),g+=u&(1<<x)-1,u>>>=x,v-=x),15>v&&(u+=p[a++]<<v,v+=8,u+=p[a++]<<v,v+=8),_=w[u&k];o:for(;;){if(x=_>>>24,u>>>=x,v-=x,x=_>>>16&255,!(16&x)){if(0===(64&x)){_=w[(65535&_)+(u&(1<<x)-1)];continue o}i.msg="invalid distance code",o.mode=BAD;break i}if(A=65535&_,x&=15,x>v&&(u+=p[a++]<<v,v+=8,x>v&&(u+=p[a++]<<v,v+=8)),A+=u&(1<<x)-1,A>s){i.msg="invalid distance too far back",o.mode=BAD;break i}if(u>>>=x,v-=x,x=d-n,A>x){if(x=A-x,x>r&&o.sane){i.msg="invalid distance too far back",o.mode=BAD;break i}if(B=0,D=c,0===b){if(B+=f-x,g>x){g-=x;do E[d++]=c[B++];while(--x);B=d-A,D=E}}else if(x>b){if(B+=f+b-x,x-=b,g>x){g-=x;do E[d++]=c[B++];while(--x);if(B=0,g>b){x=b,g-=x;do E[d++]=c[B++];while(--x);B=d-A,D=E}}}else if(B+=b-x,g>x){g-=x;do E[d++]=c[B++];while(--x);B=d-A,D=E}for(;g>2;)E[d++]=D[B++],E[d++]=D[B++],E[d++]=D[B++],g-=3;g&&(E[d++]=D[B++],g>1&&(E[d++]=D[B++]))}else{B=d-A;do E[d++]=E[B++],E[d++]=E[B++],E[d++]=E[B++],g-=3;while(g>2);g&&(E[d++]=E[B++],g>1&&(E[d++]=E[B++]))}break}}break}}while(t>a&&l>d);g=v>>3,a-=g,v-=g<<3,u&=(1<<v)-1,i.next_in=a,i.next_out=d,i.avail_in=t>a?5+(t-a):5-(a-t),i.avail_out=l>d?257+(l-d):257-(d-l),o.hold=u,o.bits=v};

},{}],18:[function(require,module,exports){
"use strict";function ZSWAP32(e){return(e>>>24&255)+(e>>>8&65280)+((65280&e)<<8)+((255&e)<<24)}function InflateState(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new utils.Buf16(320),this.work=new utils.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function inflateResetKeep(e){var t;return e&&e.state?(t=e.state,e.total_in=e.total_out=t.total=0,e.msg="",t.wrap&&(e.adler=1&t.wrap),t.mode=HEAD,t.last=0,t.havedict=0,t.dmax=32768,t.head=null,t.hold=0,t.bits=0,t.lencode=t.lendyn=new utils.Buf32(ENOUGH_LENS),t.distcode=t.distdyn=new utils.Buf32(ENOUGH_DISTS),t.sane=1,t.back=-1,Z_OK):Z_STREAM_ERROR}function inflateReset(e){var t;return e&&e.state?(t=e.state,t.wsize=0,t.whave=0,t.wnext=0,inflateResetKeep(e)):Z_STREAM_ERROR}function inflateReset2(e,t){var a,i;return e&&e.state?(i=e.state,0>t?(a=0,t=-t):(a=(t>>4)+1,48>t&&(t&=15)),t&&(8>t||t>15)?Z_STREAM_ERROR:(null!==i.window&&i.wbits!==t&&(i.window=null),i.wrap=a,i.wbits=t,inflateReset(e))):Z_STREAM_ERROR}function inflateInit2(e,t){var a,i;return e?(i=new InflateState,e.state=i,i.window=null,a=inflateReset2(e,t),a!==Z_OK&&(e.state=null),a):Z_STREAM_ERROR}function inflateInit(e){return inflateInit2(e,DEF_WBITS)}function fixedtables(e){if(virgin){var t;for(lenfix=new utils.Buf32(512),distfix=new utils.Buf32(32),t=0;144>t;)e.lens[t++]=8;for(;256>t;)e.lens[t++]=9;for(;280>t;)e.lens[t++]=7;for(;288>t;)e.lens[t++]=8;for(inflate_table(LENS,e.lens,0,288,lenfix,0,e.work,{bits:9}),t=0;32>t;)e.lens[t++]=5;inflate_table(DISTS,e.lens,0,32,distfix,0,e.work,{bits:5}),virgin=!1}e.lencode=lenfix,e.lenbits=9,e.distcode=distfix,e.distbits=5}function updatewindow(e,t,a,i){var n,s=e.state;return null===s.window&&(s.wsize=1<<s.wbits,s.wnext=0,s.whave=0,s.window=new utils.Buf8(s.wsize)),i>=s.wsize?(utils.arraySet(s.window,t,a-s.wsize,s.wsize,0),s.wnext=0,s.whave=s.wsize):(n=s.wsize-s.wnext,n>i&&(n=i),utils.arraySet(s.window,t,a-i,n,s.wnext),i-=n,i?(utils.arraySet(s.window,t,a-i,i,0),s.wnext=i,s.whave=s.wsize):(s.wnext+=n,s.wnext===s.wsize&&(s.wnext=0),s.whave<s.wsize&&(s.whave+=n))),0}function inflate(e,t){var a,i,n,s,l,r,o,d,f,c,h,E,b,k,_,m,u,w,R,T,g,D,S,x,A=0,v=new utils.Buf8(4),O=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!e||!e.state||!e.output||!e.input&&0!==e.avail_in)return Z_STREAM_ERROR;a=e.state,a.mode===TYPE&&(a.mode=TYPEDO),l=e.next_out,n=e.output,o=e.avail_out,s=e.next_in,i=e.input,r=e.avail_in,d=a.hold,f=a.bits,c=r,h=o,D=Z_OK;e:for(;;)switch(a.mode){case HEAD:if(0===a.wrap){a.mode=TYPEDO;break}for(;16>f;){if(0===r)break e;r--,d+=i[s++]<<f,f+=8}if(2&a.wrap&&35615===d){a.check=0,v[0]=255&d,v[1]=d>>>8&255,a.check=crc32(a.check,v,2,0),d=0,f=0,a.mode=FLAGS;break}if(a.flags=0,a.head&&(a.head.done=!1),!(1&a.wrap)||(((255&d)<<8)+(d>>8))%31){e.msg="incorrect header check",a.mode=BAD;break}if((15&d)!==Z_DEFLATED){e.msg="unknown compression method",a.mode=BAD;break}if(d>>>=4,f-=4,g=(15&d)+8,0===a.wbits)a.wbits=g;else if(g>a.wbits){e.msg="invalid window size",a.mode=BAD;break}a.dmax=1<<g,e.adler=a.check=1,a.mode=512&d?DICTID:TYPE,d=0,f=0;break;case FLAGS:for(;16>f;){if(0===r)break e;r--,d+=i[s++]<<f,f+=8}if(a.flags=d,(255&a.flags)!==Z_DEFLATED){e.msg="unknown compression method",a.mode=BAD;break}if(57344&a.flags){e.msg="unknown header flags set",a.mode=BAD;break}a.head&&(a.head.text=d>>8&1),512&a.flags&&(v[0]=255&d,v[1]=d>>>8&255,a.check=crc32(a.check,v,2,0)),d=0,f=0,a.mode=TIME;case TIME:for(;32>f;){if(0===r)break e;r--,d+=i[s++]<<f,f+=8}a.head&&(a.head.time=d),512&a.flags&&(v[0]=255&d,v[1]=d>>>8&255,v[2]=d>>>16&255,v[3]=d>>>24&255,a.check=crc32(a.check,v,4,0)),d=0,f=0,a.mode=OS;case OS:for(;16>f;){if(0===r)break e;r--,d+=i[s++]<<f,f+=8}a.head&&(a.head.xflags=255&d,a.head.os=d>>8),512&a.flags&&(v[0]=255&d,v[1]=d>>>8&255,a.check=crc32(a.check,v,2,0)),d=0,f=0,a.mode=EXLEN;case EXLEN:if(1024&a.flags){for(;16>f;){if(0===r)break e;r--,d+=i[s++]<<f,f+=8}a.length=d,a.head&&(a.head.extra_len=d),512&a.flags&&(v[0]=255&d,v[1]=d>>>8&255,a.check=crc32(a.check,v,2,0)),d=0,f=0}else a.head&&(a.head.extra=null);a.mode=EXTRA;case EXTRA:if(1024&a.flags&&(E=a.length,E>r&&(E=r),E&&(a.head&&(g=a.head.extra_len-a.length,a.head.extra||(a.head.extra=new Array(a.head.extra_len)),utils.arraySet(a.head.extra,i,s,E,g)),512&a.flags&&(a.check=crc32(a.check,i,E,s)),r-=E,s+=E,a.length-=E),a.length))break e;a.length=0,a.mode=NAME;case NAME:if(2048&a.flags){if(0===r)break e;E=0;do g=i[s+E++],a.head&&g&&a.length<65536&&(a.head.name+=String.fromCharCode(g));while(g&&r>E);if(512&a.flags&&(a.check=crc32(a.check,i,E,s)),r-=E,s+=E,g)break e}else a.head&&(a.head.name=null);a.length=0,a.mode=COMMENT;case COMMENT:if(4096&a.flags){if(0===r)break e;E=0;do g=i[s+E++],a.head&&g&&a.length<65536&&(a.head.comment+=String.fromCharCode(g));while(g&&r>E);if(512&a.flags&&(a.check=crc32(a.check,i,E,s)),r-=E,s+=E,g)break e}else a.head&&(a.head.comment=null);a.mode=HCRC;case HCRC:if(512&a.flags){for(;16>f;){if(0===r)break e;r--,d+=i[s++]<<f,f+=8}if(d!==(65535&a.check)){e.msg="header crc mismatch",a.mode=BAD;break}d=0,f=0}a.head&&(a.head.hcrc=a.flags>>9&1,a.head.done=!0),e.adler=a.check=0,a.mode=TYPE;break;case DICTID:for(;32>f;){if(0===r)break e;r--,d+=i[s++]<<f,f+=8}e.adler=a.check=ZSWAP32(d),d=0,f=0,a.mode=DICT;case DICT:if(0===a.havedict)return e.next_out=l,e.avail_out=o,e.next_in=s,e.avail_in=r,a.hold=d,a.bits=f,Z_NEED_DICT;e.adler=a.check=1,a.mode=TYPE;case TYPE:if(t===Z_BLOCK||t===Z_TREES)break e;case TYPEDO:if(a.last){d>>>=7&f,f-=7&f,a.mode=CHECK;break}for(;3>f;){if(0===r)break e;r--,d+=i[s++]<<f,f+=8}switch(a.last=1&d,d>>>=1,f-=1,3&d){case 0:a.mode=STORED;break;case 1:if(fixedtables(a),a.mode=LEN_,t===Z_TREES){d>>>=2,f-=2;break e}break;case 2:a.mode=TABLE;break;case 3:e.msg="invalid block type",a.mode=BAD}d>>>=2,f-=2;break;case STORED:for(d>>>=7&f,f-=7&f;32>f;){if(0===r)break e;r--,d+=i[s++]<<f,f+=8}if((65535&d)!==(d>>>16^65535)){e.msg="invalid stored block lengths",a.mode=BAD;break}if(a.length=65535&d,d=0,f=0,a.mode=COPY_,t===Z_TREES)break e;case COPY_:a.mode=COPY;case COPY:if(E=a.length){if(E>r&&(E=r),E>o&&(E=o),0===E)break e;utils.arraySet(n,i,s,E,l),r-=E,s+=E,o-=E,l+=E,a.length-=E;break}a.mode=TYPE;break;case TABLE:for(;14>f;){if(0===r)break e;r--,d+=i[s++]<<f,f+=8}if(a.nlen=(31&d)+257,d>>>=5,f-=5,a.ndist=(31&d)+1,d>>>=5,f-=5,a.ncode=(15&d)+4,d>>>=4,f-=4,a.nlen>286||a.ndist>30){e.msg="too many length or distance symbols",a.mode=BAD;break}a.have=0,a.mode=LENLENS;case LENLENS:for(;a.have<a.ncode;){for(;3>f;){if(0===r)break e;r--,d+=i[s++]<<f,f+=8}a.lens[O[a.have++]]=7&d,d>>>=3,f-=3}for(;a.have<19;)a.lens[O[a.have++]]=0;if(a.lencode=a.lendyn,a.lenbits=7,S={bits:a.lenbits},D=inflate_table(CODES,a.lens,0,19,a.lencode,0,a.work,S),a.lenbits=S.bits,D){e.msg="invalid code lengths set",a.mode=BAD;break}a.have=0,a.mode=CODELENS;case CODELENS:for(;a.have<a.nlen+a.ndist;){for(;A=a.lencode[d&(1<<a.lenbits)-1],_=A>>>24,m=A>>>16&255,u=65535&A,!(f>=_);){if(0===r)break e;r--,d+=i[s++]<<f,f+=8}if(16>u)d>>>=_,f-=_,a.lens[a.have++]=u;else{if(16===u){for(x=_+2;x>f;){if(0===r)break e;r--,d+=i[s++]<<f,f+=8}if(d>>>=_,f-=_,0===a.have){e.msg="invalid bit length repeat",a.mode=BAD;break}g=a.lens[a.have-1],E=3+(3&d),d>>>=2,f-=2}else if(17===u){for(x=_+3;x>f;){if(0===r)break e;r--,d+=i[s++]<<f,f+=8}d>>>=_,f-=_,g=0,E=3+(7&d),d>>>=3,f-=3}else{for(x=_+7;x>f;){if(0===r)break e;r--,d+=i[s++]<<f,f+=8}d>>>=_,f-=_,g=0,E=11+(127&d),d>>>=7,f-=7}if(a.have+E>a.nlen+a.ndist){e.msg="invalid bit length repeat",a.mode=BAD;break}for(;E--;)a.lens[a.have++]=g}}if(a.mode===BAD)break;if(0===a.lens[256]){e.msg="invalid code -- missing end-of-block",a.mode=BAD;break}if(a.lenbits=9,S={bits:a.lenbits},D=inflate_table(LENS,a.lens,0,a.nlen,a.lencode,0,a.work,S),a.lenbits=S.bits,D){e.msg="invalid literal/lengths set",a.mode=BAD;break}if(a.distbits=6,a.distcode=a.distdyn,S={bits:a.distbits},D=inflate_table(DISTS,a.lens,a.nlen,a.ndist,a.distcode,0,a.work,S),a.distbits=S.bits,D){e.msg="invalid distances set",a.mode=BAD;break}if(a.mode=LEN_,t===Z_TREES)break e;case LEN_:a.mode=LEN;case LEN:if(r>=6&&o>=258){e.next_out=l,e.avail_out=o,e.next_in=s,e.avail_in=r,a.hold=d,a.bits=f,inflate_fast(e,h),l=e.next_out,n=e.output,o=e.avail_out,s=e.next_in,i=e.input,r=e.avail_in,d=a.hold,f=a.bits,a.mode===TYPE&&(a.back=-1);break}for(a.back=0;A=a.lencode[d&(1<<a.lenbits)-1],_=A>>>24,m=A>>>16&255,u=65535&A,!(f>=_);){if(0===r)break e;r--,d+=i[s++]<<f,f+=8}if(m&&0===(240&m)){for(w=_,R=m,T=u;A=a.lencode[T+((d&(1<<w+R)-1)>>w)],_=A>>>24,m=A>>>16&255,u=65535&A,!(f>=w+_);){if(0===r)break e;r--,d+=i[s++]<<f,f+=8}d>>>=w,f-=w,a.back+=w}if(d>>>=_,f-=_,a.back+=_,a.length=u,0===m){a.mode=LIT;break}if(32&m){a.back=-1,a.mode=TYPE;break}if(64&m){e.msg="invalid literal/length code",a.mode=BAD;break}a.extra=15&m,a.mode=LENEXT;case LENEXT:if(a.extra){for(x=a.extra;x>f;){if(0===r)break e;r--,d+=i[s++]<<f,f+=8}a.length+=d&(1<<a.extra)-1,d>>>=a.extra,f-=a.extra,a.back+=a.extra}a.was=a.length,a.mode=DIST;case DIST:for(;A=a.distcode[d&(1<<a.distbits)-1],_=A>>>24,m=A>>>16&255,u=65535&A,!(f>=_);){if(0===r)break e;r--,d+=i[s++]<<f,f+=8}if(0===(240&m)){for(w=_,R=m,T=u;A=a.distcode[T+((d&(1<<w+R)-1)>>w)],_=A>>>24,m=A>>>16&255,u=65535&A,!(f>=w+_);){if(0===r)break e;r--,d+=i[s++]<<f,f+=8}d>>>=w,f-=w,a.back+=w}if(d>>>=_,f-=_,a.back+=_,64&m){e.msg="invalid distance code",a.mode=BAD;break}a.offset=u,a.extra=15&m,a.mode=DISTEXT;case DISTEXT:if(a.extra){for(x=a.extra;x>f;){if(0===r)break e;r--,d+=i[s++]<<f,f+=8}a.offset+=d&(1<<a.extra)-1,d>>>=a.extra,f-=a.extra,a.back+=a.extra}if(a.offset>a.dmax){e.msg="invalid distance too far back",a.mode=BAD;break}a.mode=MATCH;case MATCH:if(0===o)break e;if(E=h-o,a.offset>E){if(E=a.offset-E,E>a.whave&&a.sane){e.msg="invalid distance too far back",a.mode=BAD;break}E>a.wnext?(E-=a.wnext,b=a.wsize-E):b=a.wnext-E,E>a.length&&(E=a.length),k=a.window}else k=n,b=l-a.offset,E=a.length;E>o&&(E=o),o-=E,a.length-=E;do n[l++]=k[b++];while(--E);0===a.length&&(a.mode=LEN);break;case LIT:if(0===o)break e;n[l++]=a.length,o--,a.mode=LEN;break;case CHECK:if(a.wrap){for(;32>f;){if(0===r)break e;r--,d|=i[s++]<<f,f+=8}if(h-=o,e.total_out+=h,a.total+=h,h&&(e.adler=a.check=a.flags?crc32(a.check,n,h,l-h):adler32(a.check,n,h,l-h)),h=o,(a.flags?d:ZSWAP32(d))!==a.check){e.msg="incorrect data check",a.mode=BAD;break}d=0,f=0}a.mode=LENGTH;case LENGTH:if(a.wrap&&a.flags){for(;32>f;){if(0===r)break e;r--,d+=i[s++]<<f,f+=8}if(d!==(4294967295&a.total)){e.msg="incorrect length check",a.mode=BAD;break}d=0,f=0}a.mode=DONE;case DONE:D=Z_STREAM_END;break e;case BAD:D=Z_DATA_ERROR;break e;case MEM:return Z_MEM_ERROR;case SYNC:default:return Z_STREAM_ERROR}return e.next_out=l,e.avail_out=o,e.next_in=s,e.avail_in=r,a.hold=d,a.bits=f,(a.wsize||h!==e.avail_out&&a.mode<BAD&&(a.mode<CHECK||t!==Z_FINISH))&&updatewindow(e,e.output,e.next_out,h-e.avail_out)?(a.mode=MEM,Z_MEM_ERROR):(c-=e.avail_in,h-=e.avail_out,e.total_in+=c,e.total_out+=h,a.total+=h,a.wrap&&h&&(e.adler=a.check=a.flags?crc32(a.check,n,h,e.next_out-h):adler32(a.check,n,h,e.next_out-h)),e.data_type=a.bits+(a.last?64:0)+(a.mode===TYPE?128:0)+(a.mode===LEN_||a.mode===COPY_?256:0),(0===c&&0===h||t===Z_FINISH)&&D===Z_OK&&(D=Z_BUF_ERROR),D)}function inflateEnd(e){if(!e||!e.state)return Z_STREAM_ERROR;var t=e.state;return t.window&&(t.window=null),e.state=null,Z_OK}function inflateGetHeader(e,t){var a;return e&&e.state?(a=e.state,0===(2&a.wrap)?Z_STREAM_ERROR:(a.head=t,t.done=!1,Z_OK)):Z_STREAM_ERROR}var utils=require("../utils/common"),adler32=require("./adler32"),crc32=require("./crc32"),inflate_fast=require("./inffast"),inflate_table=require("./inftrees"),CODES=0,LENS=1,DISTS=2,Z_FINISH=4,Z_BLOCK=5,Z_TREES=6,Z_OK=0,Z_STREAM_END=1,Z_NEED_DICT=2,Z_STREAM_ERROR=-2,Z_DATA_ERROR=-3,Z_MEM_ERROR=-4,Z_BUF_ERROR=-5,Z_DEFLATED=8,HEAD=1,FLAGS=2,TIME=3,OS=4,EXLEN=5,EXTRA=6,NAME=7,COMMENT=8,HCRC=9,DICTID=10,DICT=11,TYPE=12,TYPEDO=13,STORED=14,COPY_=15,COPY=16,TABLE=17,LENLENS=18,CODELENS=19,LEN_=20,LEN=21,LENEXT=22,DIST=23,DISTEXT=24,MATCH=25,LIT=26,CHECK=27,LENGTH=28,DONE=29,BAD=30,MEM=31,SYNC=32,ENOUGH_LENS=852,ENOUGH_DISTS=592,MAX_WBITS=15,DEF_WBITS=MAX_WBITS,virgin=!0,lenfix,distfix;exports.inflateReset=inflateReset,exports.inflateReset2=inflateReset2,exports.inflateResetKeep=inflateResetKeep,exports.inflateInit=inflateInit,exports.inflateInit2=inflateInit2,exports.inflate=inflate,exports.inflateEnd=inflateEnd,exports.inflateGetHeader=inflateGetHeader,exports.inflateInfo="pako inflate (from Nodeca project)";

},{"../utils/common":11,"./adler32":13,"./crc32":15,"./inffast":17,"./inftrees":19}],19:[function(require,module,exports){
"use strict";var utils=require("../utils/common"),MAXBITS=15,ENOUGH_LENS=852,ENOUGH_DISTS=592,CODES=0,LENS=1,DISTS=2,lbase=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],lext=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],dbase=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],dext=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];module.exports=function(r,S,e,f,t,i,u,o){var E,l,s,n,I,N,T,B,D,O=o.bits,a=0,b=0,A=0,L=0,M=0,X=0,d=0,G=0,H=0,U=0,_=null,x=0,c=new utils.Buf16(MAXBITS+1),m=new utils.Buf16(MAXBITS+1),v=null,w=0;for(a=0;MAXBITS>=a;a++)c[a]=0;for(b=0;f>b;b++)c[S[e+b]]++;for(M=O,L=MAXBITS;L>=1&&0===c[L];L--);if(M>L&&(M=L),0===L)return t[i++]=20971520,t[i++]=20971520,o.bits=1,0;for(A=1;L>A&&0===c[A];A++);for(A>M&&(M=A),G=1,a=1;MAXBITS>=a;a++)if(G<<=1,G-=c[a],0>G)return-1;if(G>0&&(r===CODES||1!==L))return-1;for(m[1]=0,a=1;MAXBITS>a;a++)m[a+1]=m[a]+c[a];for(b=0;f>b;b++)0!==S[e+b]&&(u[m[S[e+b]]++]=b);if(r===CODES?(_=v=u,N=19):r===LENS?(_=lbase,x-=257,v=lext,w-=257,N=256):(_=dbase,v=dext,N=-1),U=0,b=0,a=A,I=i,X=M,d=0,s=-1,H=1<<M,n=H-1,r===LENS&&H>ENOUGH_LENS||r===DISTS&&H>ENOUGH_DISTS)return 1;for(var C=0;;){C++,T=a-d,u[b]<N?(B=0,D=u[b]):u[b]>N?(B=v[w+u[b]],D=_[x+u[b]]):(B=96,D=0),E=1<<a-d,l=1<<X,A=l;do l-=E,t[I+(U>>d)+l]=T<<24|B<<16|D|0;while(0!==l);for(E=1<<a-1;U&E;)E>>=1;if(0!==E?(U&=E-1,U+=E):U=0,b++,0===--c[a]){if(a===L)break;a=S[e+u[b]]}if(a>M&&(U&n)!==s){for(0===d&&(d=M),I+=A,X=a-d,G=1<<X;L>X+d&&(G-=c[X+d],!(0>=G));)X++,G<<=1;if(H+=1<<X,r===LENS&&H>ENOUGH_LENS||r===DISTS&&H>ENOUGH_DISTS)return 1;s=U&n,t[s]=M<<24|X<<16|I-i|0}}return 0!==U&&(t[I+U]=a-d<<24|64<<16|0),o.bits=M,0};

},{"../utils/common":11}],20:[function(require,module,exports){
"use strict";module.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"};

},{}],21:[function(require,module,exports){
"use strict";function ZStream(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}module.exports=ZStream;

},{}],22:[function(require,module,exports){
(function (process){
!function(t){"use strict";if("function"==typeof bootstrap)bootstrap("promise",t);else if("object"==typeof exports&&"object"==typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define(t);else if("undefined"!=typeof ses){if(!ses.ok())return;ses.makeQ=t}else{if("undefined"==typeof window&&"undefined"==typeof self)throw new Error("This environment was not anticipated by Q. Please file a bug.");var n="undefined"!=typeof window?window:self,e=n.Q;n.Q=t(),n.Q.noConflict=function(){return n.Q=e,this}}}(function(){"use strict";function t(t){return function(){return K.apply(t,arguments)}}function n(t){return t===Object(t)}function e(t){return"[object StopIteration]"===et(t)||t instanceof _}function r(t,n){if(V&&n.stack&&"object"==typeof t&&null!==t&&t.stack&&-1===t.stack.indexOf(rt)){for(var e=[],r=n;r;r=r.source)r.stack&&e.unshift(r.stack);e.unshift(t.stack);var i=e.join("\n"+rt+"\n");t.stack=o(i)}}function o(t){for(var n=t.split("\n"),e=[],r=0;r<n.length;++r){var o=n[r];c(o)||i(o)||!o||e.push(o)}return e.join("\n")}function i(t){return-1!==t.indexOf("(module.js:")||-1!==t.indexOf("(node.js:")}function u(t){var n=/at .+ \((.+):(\d+):(?:\d+)\)$/.exec(t);if(n)return[n[1],Number(n[2])];var e=/at ([^ ]+):(\d+):(?:\d+)$/.exec(t);if(e)return[e[1],Number(e[2])];var r=/.*@(.+):(\d+)$/.exec(t);return r?[r[1],Number(r[2])]:void 0}function c(t){var n=u(t);if(!n)return!1;var e=n[0],r=n[1];return e===H&&r>=q&&st>=r}function s(){if(V)try{throw new Error}catch(t){var n=t.stack.split("\n"),e=n[0].indexOf("@")>0?n[1]:n[2],r=u(e);if(!r)return;return H=r[0],r[1]}}function f(t,n,e){return function(){return"undefined"!=typeof console&&"function"==typeof console.warn&&console.warn(n+" is deprecated, use "+e+" instead.",new Error("").stack),t.apply(t,arguments)}}function p(t){return t instanceof h?t:g(t)?O(t):E(t)}function a(){function t(t){n=t,i.source=t,W(e,function(n,e){p.nextTick(function(){t.promiseDispatch.apply(t,e)})},void 0),e=void 0,r=void 0}var n,e=[],r=[],o=Z(a.prototype),i=Z(h.prototype);if(i.promiseDispatch=function(t,o,i){var u=L(arguments);e?(e.push(u),"when"===o&&i[1]&&r.push(i[1])):p.nextTick(function(){n.promiseDispatch.apply(n,u)})},i.valueOf=function(){if(e)return i;var t=v(n);return m(t)&&(n=t),t},i.inspect=function(){return n?n.inspect():{state:"pending"}},p.longStackSupport&&V)try{throw new Error}catch(u){i.stack=u.stack.substring(u.stack.indexOf("\n")+1)}return o.promise=i,o.resolve=function(e){n||t(p(e))},o.fulfill=function(e){n||t(E(e))},o.reject=function(e){n||t(R(e))},o.notify=function(t){n||W(r,function(n,e){p.nextTick(function(){e(t)})},void 0)},o}function l(t){if("function"!=typeof t)throw new TypeError("resolver must be a function.");var n=a();try{t(n.resolve,n.reject,n.notify)}catch(e){n.reject(e)}return n.promise}function d(t){return l(function(n,e){for(var r=0,o=t.length;o>r;r++)p(t[r]).then(n,e)})}function h(t,n,e){void 0===n&&(n=function(t){return R(new Error("Promise does not support operation: "+t))}),void 0===e&&(e=function(){return{state:"unknown"}});var r=Z(h.prototype);if(r.promiseDispatch=function(e,o,i){var u;try{u=t[o]?t[o].apply(r,i):n.call(r,o,i)}catch(c){u=R(c)}e&&e(u)},r.inspect=e,e){var o=e();"rejected"===o.state&&(r.exception=o.reason),r.valueOf=function(){var t=e();return"pending"===t.state||"rejected"===t.state?r:t.value}}return r}function y(t,n,e,r){return p(t).then(n,e,r)}function v(t){if(m(t)){var n=t.inspect();if("fulfilled"===n.state)return n.value}return t}function m(t){return t instanceof h}function g(t){return n(t)&&"function"==typeof t.then}function k(t){return m(t)&&"pending"===t.inspect().state}function j(t){return!m(t)||"fulfilled"===t.inspect().state}function w(t){return m(t)&&"rejected"===t.inspect().state}function b(){ot.length=0,it.length=0,ct||(ct=!0)}function x(t,n){ct&&("object"==typeof process&&"function"==typeof process.emit&&p.nextTick.runAfter(function(){-1!==X(it,t)&&(process.emit("unhandledRejection",n,t),ut.push(t))}),it.push(t),n&&"undefined"!=typeof n.stack?ot.push(n.stack):ot.push("(no stack) "+n))}function T(t){if(ct){var n=X(it,t);-1!==n&&("object"==typeof process&&"function"==typeof process.emit&&p.nextTick.runAfter(function(){var e=X(ut,t);-1!==e&&(process.emit("rejectionHandled",ot[n],t),ut.splice(e,1))}),it.splice(n,1),ot.splice(n,1))}}function R(t){var n=h({when:function(n){return n&&T(this),n?n(t):this}},function(){return this},function(){return{state:"rejected",reason:t}});return x(n,t),n}function E(t){return h({when:function(){return t},get:function(n){return t[n]},set:function(n,e){t[n]=e},"delete":function(n){delete t[n]},post:function(n,e){return null===n||void 0===n?t.apply(void 0,e):t[n].apply(t,e)},apply:function(n,e){return t.apply(n,e)},keys:function(){return nt(t)}},void 0,function(){return{state:"fulfilled",value:t}})}function O(t){var n=a();return p.nextTick(function(){try{t.then(n.resolve,n.reject,n.notify)}catch(e){n.reject(e)}}),n.promise}function S(t){return h({isDef:function(){}},function(n,e){return A(t,n,e)},function(){return p(t).inspect()})}function N(t,n,e){return p(t).spread(n,e)}function D(t){return function(){function n(t,n){var u;if("undefined"==typeof StopIteration){try{u=r[t](n)}catch(c){return R(c)}return u.done?p(u.value):y(u.value,o,i)}try{u=r[t](n)}catch(c){return e(c)?p(c.value):R(c)}return y(u,o,i)}var r=t.apply(this,arguments),o=n.bind(n,"next"),i=n.bind(n,"throw");return o()}}function P(t){p.done(p.async(t)())}function C(t){throw new _(t)}function Q(t){return function(){return N([this,I(arguments)],function(n,e){return t.apply(n,e)})}}function A(t,n,e){return p(t).dispatch(n,e)}function I(t){return y(t,function(t){var n=0,e=a();return W(t,function(r,o,i){var u;m(o)&&"fulfilled"===(u=o.inspect()).state?t[i]=u.value:(++n,y(o,function(r){t[i]=r,0===--n&&e.resolve(t)},e.reject,function(t){e.notify({index:i,value:t})}))},void 0),0===n&&e.resolve(t),e.promise})}function U(t){if(0===t.length)return p.resolve();var n=p.defer(),e=0;return W(t,function(r,o,i){function u(t){n.resolve(t)}function c(){e--,0===e&&n.reject(new Error("Can't get fulfillment value from any promise, all promises were rejected."))}function s(t){n.notify({index:i,value:t})}var f=t[i];e++,y(f,u,c,s)},void 0),n.promise}function F(t){return y(t,function(t){return t=Y(t,p),y(I(Y(t,function(t){return y(t,z,z)})),function(){return t})})}function M(t){return p(t).allSettled()}function B(t,n){return p(t).then(void 0,void 0,n)}function $(t,n){return p(t).nodeify(n)}var V=!1;try{throw new Error}catch(G){V=!!G.stack}var H,_,q=s(),z=function(){},J=function(){function t(){for(var t,r;e.next;)e=e.next,t=e.task,e.task=void 0,r=e.domain,r&&(e.domain=void 0,r.enter()),n(t,r);for(;c.length;)t=c.pop(),n(t);o=!1}function n(n,e){try{n()}catch(r){if(u)throw e&&e.exit(),setTimeout(t,0),e&&e.enter(),r;setTimeout(function(){throw r},0)}e&&e.exit()}var e={task:void 0,next:null},r=e,o=!1,i=void 0,u=!1,c=[];if(J=function(t){r=r.next={task:t,domain:u&&process.domain,next:null},o||(o=!0,i())},"object"==typeof process&&"[object process]"===process.toString()&&process.nextTick)u=!0,i=function(){process.nextTick(t)};else if("function"==typeof setImmediate)i="undefined"!=typeof window?setImmediate.bind(window,t):function(){setImmediate(t)};else if("undefined"!=typeof MessageChannel){var s=new MessageChannel;s.port1.onmessage=function(){i=f,s.port1.onmessage=t,t()};var f=function(){s.port2.postMessage(0)};i=function(){setTimeout(t,0),f()}}else i=function(){setTimeout(t,0)};return J.runAfter=function(t){c.push(t),o||(o=!0,i())},J}(),K=Function.call,L=t(Array.prototype.slice),W=t(Array.prototype.reduce||function(t,n){var e=0,r=this.length;if(1===arguments.length)for(;;){if(e in this){n=this[e++];break}if(++e>=r)throw new TypeError}for(;r>e;e++)e in this&&(n=t(n,this[e],e));return n}),X=t(Array.prototype.indexOf||function(t){for(var n=0;n<this.length;n++)if(this[n]===t)return n;return-1}),Y=t(Array.prototype.map||function(t,n){var e=this,r=[];return W(e,function(o,i,u){r.push(t.call(n,i,u,e))},void 0),r}),Z=Object.create||function(t){function n(){}return n.prototype=t,new n},tt=t(Object.prototype.hasOwnProperty),nt=Object.keys||function(t){var n=[];for(var e in t)tt(t,e)&&n.push(e);return n},et=t(Object.prototype.toString);_="undefined"!=typeof ReturnValue?ReturnValue:function(t){this.value=t};var rt="From previous event:";p.resolve=p,p.nextTick=J,p.longStackSupport=!1,"object"==typeof process&&process&&process.env&&process.env.Q_DEBUG&&(p.longStackSupport=!0),p.defer=a,a.prototype.makeNodeResolver=function(){var t=this;return function(n,e){n?t.reject(n):arguments.length>2?t.resolve(L(arguments,1)):t.resolve(e)}},p.Promise=l,p.promise=l,l.race=d,l.all=I,l.reject=R,l.resolve=p,p.passByCopy=function(t){return t},h.prototype.passByCopy=function(){return this},p.join=function(t,n){return p(t).join(n)},h.prototype.join=function(t){return p([this,t]).spread(function(t,n){if(t===n)return t;throw new Error("Can't join: not the same: "+t+" "+n)})},p.race=d,h.prototype.race=function(){return this.then(p.race)},p.makePromise=h,h.prototype.toString=function(){return"[object Promise]"},h.prototype.then=function(t,n,e){function o(n){try{return"function"==typeof t?t(n):n}catch(e){return R(e)}}function i(t){if("function"==typeof n){r(t,c);try{return n(t)}catch(e){return R(e)}}return R(t)}function u(t){return"function"==typeof e?e(t):t}var c=this,s=a(),f=!1;return p.nextTick(function(){c.promiseDispatch(function(t){f||(f=!0,s.resolve(o(t)))},"when",[function(t){f||(f=!0,s.resolve(i(t)))}])}),c.promiseDispatch(void 0,"when",[void 0,function(t){var n,e=!1;try{n=u(t)}catch(r){if(e=!0,!p.onerror)throw r;p.onerror(r)}e||s.notify(n)}]),s.promise},p.tap=function(t,n){return p(t).tap(n)},h.prototype.tap=function(t){return t=p(t),this.then(function(n){return t.fcall(n).thenResolve(n)})},p.when=y,h.prototype.thenResolve=function(t){return this.then(function(){return t})},p.thenResolve=function(t,n){return p(t).thenResolve(n)},h.prototype.thenReject=function(t){return this.then(function(){throw t})},p.thenReject=function(t,n){return p(t).thenReject(n)},p.nearer=v,p.isPromise=m,p.isPromiseAlike=g,p.isPending=k,h.prototype.isPending=function(){return"pending"===this.inspect().state},p.isFulfilled=j,h.prototype.isFulfilled=function(){return"fulfilled"===this.inspect().state},p.isRejected=w,h.prototype.isRejected=function(){return"rejected"===this.inspect().state};var ot=[],it=[],ut=[],ct=!0;p.resetUnhandledRejections=b,p.getUnhandledReasons=function(){return ot.slice()},p.stopUnhandledRejectionTracking=function(){b(),ct=!1},b(),p.reject=R,p.fulfill=E,p.master=S,p.spread=N,h.prototype.spread=function(t,n){return this.all().then(function(n){return t.apply(void 0,n)},n)},p.async=D,p.spawn=P,p["return"]=C,p.promised=Q,p.dispatch=A,h.prototype.dispatch=function(t,n){var e=this,r=a();return p.nextTick(function(){e.promiseDispatch(r.resolve,t,n)}),r.promise},p.get=function(t,n){return p(t).dispatch("get",[n])},h.prototype.get=function(t){return this.dispatch("get",[t])},p.set=function(t,n,e){return p(t).dispatch("set",[n,e])},h.prototype.set=function(t,n){return this.dispatch("set",[t,n])},p.del=p["delete"]=function(t,n){return p(t).dispatch("delete",[n])},h.prototype.del=h.prototype["delete"]=function(t){return this.dispatch("delete",[t])},p.mapply=p.post=function(t,n,e){return p(t).dispatch("post",[n,e])},h.prototype.mapply=h.prototype.post=function(t,n){return this.dispatch("post",[t,n])},p.send=p.mcall=p.invoke=function(t,n){return p(t).dispatch("post",[n,L(arguments,2)])},h.prototype.send=h.prototype.mcall=h.prototype.invoke=function(t){return this.dispatch("post",[t,L(arguments,1)])},p.fapply=function(t,n){return p(t).dispatch("apply",[void 0,n])},h.prototype.fapply=function(t){return this.dispatch("apply",[void 0,t])},p["try"]=p.fcall=function(t){return p(t).dispatch("apply",[void 0,L(arguments,1)])},h.prototype.fcall=function(){return this.dispatch("apply",[void 0,L(arguments)])},p.fbind=function(t){var n=p(t),e=L(arguments,1);return function(){return n.dispatch("apply",[this,e.concat(L(arguments))])}},h.prototype.fbind=function(){var t=this,n=L(arguments);return function(){return t.dispatch("apply",[this,n.concat(L(arguments))])}},p.keys=function(t){return p(t).dispatch("keys",[])},h.prototype.keys=function(){return this.dispatch("keys",[])},p.all=I,h.prototype.all=function(){return I(this)},p.any=U,h.prototype.any=function(){return U(this)},p.allResolved=f(F,"allResolved","allSettled"),h.prototype.allResolved=function(){return F(this)},p.allSettled=M,h.prototype.allSettled=function(){return this.then(function(t){return I(Y(t,function(t){function n(){return t.inspect()}return t=p(t),t.then(n,n)}))})},p.fail=p["catch"]=function(t,n){return p(t).then(void 0,n)},h.prototype.fail=h.prototype["catch"]=function(t){return this.then(void 0,t)},p.progress=B,h.prototype.progress=function(t){return this.then(void 0,void 0,t)},p.fin=p["finally"]=function(t,n){return p(t)["finally"](n)},h.prototype.fin=h.prototype["finally"]=function(t){return t=p(t),this.then(function(n){return t.fcall().then(function(){return n})},function(n){return t.fcall().then(function(){throw n})})},p.done=function(t,n,e,r){return p(t).done(n,e,r)},h.prototype.done=function(t,n,e){var o=function(t){p.nextTick(function(){if(r(t,i),!p.onerror)throw t;p.onerror(t)})},i=t||n||e?this.then(t,n,e):this;"object"==typeof process&&process&&process.domain&&(o=process.domain.bind(o)),i.then(void 0,o)},p.timeout=function(t,n,e){return p(t).timeout(n,e)},h.prototype.timeout=function(t,n){var e=a(),r=setTimeout(function(){n&&"string"!=typeof n||(n=new Error(n||"Timed out after "+t+" ms"),n.code="ETIMEDOUT"),e.reject(n)},t);return this.then(function(t){clearTimeout(r),e.resolve(t)},function(t){clearTimeout(r),e.reject(t)},e.notify),e.promise},p.delay=function(t,n){return void 0===n&&(n=t,t=void 0),p(t).delay(n)},h.prototype.delay=function(t){return this.then(function(n){var e=a();return setTimeout(function(){e.resolve(n)},t),e.promise})},p.nfapply=function(t,n){return p(t).nfapply(n)},h.prototype.nfapply=function(t){var n=a(),e=L(t);return e.push(n.makeNodeResolver()),this.fapply(e).fail(n.reject),n.promise},p.nfcall=function(t){var n=L(arguments,1);return p(t).nfapply(n)},h.prototype.nfcall=function(){var t=L(arguments),n=a();return t.push(n.makeNodeResolver()),this.fapply(t).fail(n.reject),n.promise},p.nfbind=p.denodeify=function(t){var n=L(arguments,1);return function(){var e=n.concat(L(arguments)),r=a();return e.push(r.makeNodeResolver()),p(t).fapply(e).fail(r.reject),r.promise}},h.prototype.nfbind=h.prototype.denodeify=function(){var t=L(arguments);return t.unshift(this),p.denodeify.apply(void 0,t)},p.nbind=function(t,n){var e=L(arguments,2);return function(){function r(){return t.apply(n,arguments)}var o=e.concat(L(arguments)),i=a();return o.push(i.makeNodeResolver()),p(r).fapply(o).fail(i.reject),i.promise}},h.prototype.nbind=function(){var t=L(arguments,0);return t.unshift(this),p.nbind.apply(void 0,t)},p.nmapply=p.npost=function(t,n,e){return p(t).npost(n,e)},h.prototype.nmapply=h.prototype.npost=function(t,n){var e=L(n||[]),r=a();return e.push(r.makeNodeResolver()),this.dispatch("post",[t,e]).fail(r.reject),r.promise},p.nsend=p.nmcall=p.ninvoke=function(t,n){var e=L(arguments,2),r=a();return e.push(r.makeNodeResolver()),p(t).dispatch("post",[n,e]).fail(r.reject),r.promise},h.prototype.nsend=h.prototype.nmcall=h.prototype.ninvoke=function(t){var n=L(arguments,1),e=a();return n.push(e.makeNodeResolver()),this.dispatch("post",[t,n]).fail(e.reject),e.promise},p.nodeify=$,h.prototype.nodeify=function(t){return t?void this.then(function(n){p.nextTick(function(){t(null,n)})},function(n){p.nextTick(function(){t(n)})}):this},p.noConflict=function(){throw new Error("Q.noConflict only works when Q is used as a global")};var st=s();return p});

}).call(this,require('_process'))

},{"_process":6}],23:[function(require,module,exports){
"use strict";module.exports=require("react/lib/ReactDOM");

},{"react/lib/ReactDOM":58}],24:[function(require,module,exports){
"use strict";var ReactMount=require("./ReactMount"),findDOMNode=require("./findDOMNode"),focusNode=require("fbjs/lib/focusNode"),Mixin={componentDidMount:function(){this.props.autoFocus&&focusNode(findDOMNode(this))}},AutoFocusUtils={Mixin:Mixin,focusDOMComponent:function(){focusNode(ReactMount.getNode(this._rootNodeID))}};module.exports=AutoFocusUtils;

},{"./ReactMount":86,"./findDOMNode":129,"fbjs/lib/focusNode":159}],25:[function(require,module,exports){
"use strict";function isPresto(){var e=window.opera;return"object"==typeof e&&"function"==typeof e.version&&parseInt(e.version(),10)<=12}function isKeypressCommand(e){return(e.ctrlKey||e.altKey||e.metaKey)&&!(e.ctrlKey&&e.altKey)}function getCompositionEventType(e){switch(e){case topLevelTypes.topCompositionStart:return eventTypes.compositionStart;case topLevelTypes.topCompositionEnd:return eventTypes.compositionEnd;case topLevelTypes.topCompositionUpdate:return eventTypes.compositionUpdate}}function isFallbackCompositionStart(e,t){return e===topLevelTypes.topKeyDown&&t.keyCode===START_KEYCODE}function isFallbackCompositionEnd(e,t){switch(e){case topLevelTypes.topKeyUp:return-1!==END_KEYCODES.indexOf(t.keyCode);case topLevelTypes.topKeyDown:return t.keyCode!==START_KEYCODE;case topLevelTypes.topKeyPress:case topLevelTypes.topMouseDown:case topLevelTypes.topBlur:return!0;default:return!1}}function getDataFromCustomEvent(e){var t=e.detail;return"object"==typeof t&&"data"in t?t.data:null}function extractCompositionEvent(e,t,o,n,p){var s,i;if(canUseCompositionEvent?s=getCompositionEventType(e):currentComposition?isFallbackCompositionEnd(e,n)&&(s=eventTypes.compositionEnd):isFallbackCompositionStart(e,n)&&(s=eventTypes.compositionStart),!s)return null;useFallbackCompositionData&&(currentComposition||s!==eventTypes.compositionStart?s===eventTypes.compositionEnd&&currentComposition&&(i=currentComposition.getData()):currentComposition=FallbackCompositionState.getPooled(t));var r=SyntheticCompositionEvent.getPooled(s,o,n,p);if(i)r.data=i;else{var a=getDataFromCustomEvent(n);null!==a&&(r.data=a)}return EventPropagators.accumulateTwoPhaseDispatches(r),r}function getNativeBeforeInputChars(e,t){switch(e){case topLevelTypes.topCompositionEnd:return getDataFromCustomEvent(t);case topLevelTypes.topKeyPress:var o=t.which;return o!==SPACEBAR_CODE?null:(hasSpaceKeypress=!0,SPACEBAR_CHAR);case topLevelTypes.topTextInput:var n=t.data;return n===SPACEBAR_CHAR&&hasSpaceKeypress?null:n;default:return null}}function getFallbackBeforeInputChars(e,t){if(currentComposition){if(e===topLevelTypes.topCompositionEnd||isFallbackCompositionEnd(e,t)){var o=currentComposition.getData();return FallbackCompositionState.release(currentComposition),currentComposition=null,o}return null}switch(e){case topLevelTypes.topPaste:return null;case topLevelTypes.topKeyPress:return t.which&&!isKeypressCommand(t)?String.fromCharCode(t.which):null;case topLevelTypes.topCompositionEnd:return useFallbackCompositionData?null:t.data;default:return null}}function extractBeforeInputEvent(e,t,o,n,p){var s;if(s=canUseTextInputEvent?getNativeBeforeInputChars(e,n):getFallbackBeforeInputChars(e,n),!s)return null;var i=SyntheticInputEvent.getPooled(eventTypes.beforeInput,o,n,p);return i.data=s,EventPropagators.accumulateTwoPhaseDispatches(i),i}var EventConstants=require("./EventConstants"),EventPropagators=require("./EventPropagators"),ExecutionEnvironment=require("fbjs/lib/ExecutionEnvironment"),FallbackCompositionState=require("./FallbackCompositionState"),SyntheticCompositionEvent=require("./SyntheticCompositionEvent"),SyntheticInputEvent=require("./SyntheticInputEvent"),keyOf=require("fbjs/lib/keyOf"),END_KEYCODES=[9,13,27,32],START_KEYCODE=229,canUseCompositionEvent=ExecutionEnvironment.canUseDOM&&"CompositionEvent"in window,documentMode=null;ExecutionEnvironment.canUseDOM&&"documentMode"in document&&(documentMode=document.documentMode);var canUseTextInputEvent=ExecutionEnvironment.canUseDOM&&"TextEvent"in window&&!documentMode&&!isPresto(),useFallbackCompositionData=ExecutionEnvironment.canUseDOM&&(!canUseCompositionEvent||documentMode&&documentMode>8&&11>=documentMode),SPACEBAR_CODE=32,SPACEBAR_CHAR=String.fromCharCode(SPACEBAR_CODE),topLevelTypes=EventConstants.topLevelTypes,eventTypes={beforeInput:{phasedRegistrationNames:{bubbled:keyOf({onBeforeInput:null}),captured:keyOf({onBeforeInputCapture:null})},dependencies:[topLevelTypes.topCompositionEnd,topLevelTypes.topKeyPress,topLevelTypes.topTextInput,topLevelTypes.topPaste]},compositionEnd:{phasedRegistrationNames:{bubbled:keyOf({onCompositionEnd:null}),captured:keyOf({onCompositionEndCapture:null})},dependencies:[topLevelTypes.topBlur,topLevelTypes.topCompositionEnd,topLevelTypes.topKeyDown,topLevelTypes.topKeyPress,topLevelTypes.topKeyUp,topLevelTypes.topMouseDown]},compositionStart:{phasedRegistrationNames:{bubbled:keyOf({onCompositionStart:null}),captured:keyOf({onCompositionStartCapture:null})},dependencies:[topLevelTypes.topBlur,topLevelTypes.topCompositionStart,topLevelTypes.topKeyDown,topLevelTypes.topKeyPress,topLevelTypes.topKeyUp,topLevelTypes.topMouseDown]},compositionUpdate:{phasedRegistrationNames:{bubbled:keyOf({onCompositionUpdate:null}),captured:keyOf({onCompositionUpdateCapture:null})},dependencies:[topLevelTypes.topBlur,topLevelTypes.topCompositionUpdate,topLevelTypes.topKeyDown,topLevelTypes.topKeyPress,topLevelTypes.topKeyUp,topLevelTypes.topMouseDown]}},hasSpaceKeypress=!1,currentComposition=null,BeforeInputEventPlugin={eventTypes:eventTypes,extractEvents:function(e,t,o,n,p){return[extractCompositionEvent(e,t,o,n,p),extractBeforeInputEvent(e,t,o,n,p)]}};module.exports=BeforeInputEventPlugin;

},{"./EventConstants":37,"./EventPropagators":41,"./FallbackCompositionState":42,"./SyntheticCompositionEvent":111,"./SyntheticInputEvent":115,"fbjs/lib/ExecutionEnvironment":151,"fbjs/lib/keyOf":169}],26:[function(require,module,exports){
"use strict";function prefixKey(o,r){return o+r.charAt(0).toUpperCase()+r.substring(1)}var isUnitlessNumber={animationIterationCount:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,stopOpacity:!0,strokeDashoffset:!0,strokeOpacity:!0,strokeWidth:!0},prefixes=["Webkit","ms","Moz","O"];Object.keys(isUnitlessNumber).forEach(function(o){prefixes.forEach(function(r){isUnitlessNumber[prefixKey(r,o)]=isUnitlessNumber[o]})});var shorthandPropertyExpansions={background:{backgroundAttachment:!0,backgroundColor:!0,backgroundImage:!0,backgroundPositionX:!0,backgroundPositionY:!0,backgroundRepeat:!0},backgroundPosition:{backgroundPositionX:!0,backgroundPositionY:!0},border:{borderWidth:!0,borderStyle:!0,borderColor:!0},borderBottom:{borderBottomWidth:!0,borderBottomStyle:!0,borderBottomColor:!0},borderLeft:{borderLeftWidth:!0,borderLeftStyle:!0,borderLeftColor:!0},borderRight:{borderRightWidth:!0,borderRightStyle:!0,borderRightColor:!0},borderTop:{borderTopWidth:!0,borderTopStyle:!0,borderTopColor:!0},font:{fontStyle:!0,fontVariant:!0,fontWeight:!0,fontSize:!0,lineHeight:!0,fontFamily:!0},outline:{outlineWidth:!0,outlineStyle:!0,outlineColor:!0}},CSSProperty={isUnitlessNumber:isUnitlessNumber,shorthandPropertyExpansions:shorthandPropertyExpansions};module.exports=CSSProperty;

},{}],27:[function(require,module,exports){
"use strict";var CSSProperty=require("./CSSProperty"),ExecutionEnvironment=require("fbjs/lib/ExecutionEnvironment"),ReactPerf=require("./ReactPerf"),camelizeStyleName=require("fbjs/lib/camelizeStyleName"),dangerousStyleValue=require("./dangerousStyleValue"),hyphenateStyleName=require("fbjs/lib/hyphenateStyleName"),memoizeStringOnly=require("fbjs/lib/memoizeStringOnly"),warning=require("fbjs/lib/warning"),processStyleName=memoizeStringOnly(function(e){return hyphenateStyleName(e)}),hasShorthandPropertyBug=!1,styleFloatAccessor="cssFloat";if(ExecutionEnvironment.canUseDOM){var tempStyle=document.createElement("div").style;try{tempStyle.font=""}catch(e){hasShorthandPropertyBug=!0}void 0===document.documentElement.style.cssFloat&&(styleFloatAccessor="styleFloat")}var badVendoredStyleNamePattern,badStyleValueWithSemicolonPattern,warnedStyleNames,warnedStyleValues,warnHyphenatedStyleName,warnBadVendoredStyleName,warnStyleValueWithSemicolon,warnValidStyle,CSSPropertyOperations={createMarkupForStyles:function(e){var r="";for(var t in e)if(e.hasOwnProperty(t)){var a=e[t];null!=a&&(r+=processStyleName(t)+":",r+=dangerousStyleValue(t,a)+";")}return r||null},setValueForStyles:function(e,r){var t=e.style;for(var a in r)if(r.hasOwnProperty(a)){var n=dangerousStyleValue(a,r[a]);if("float"===a&&(a=styleFloatAccessor),n)t[a]=n;else{var l=hasShorthandPropertyBug&&CSSProperty.shorthandPropertyExpansions[a];if(l)for(var o in l)t[o]="";else t[a]=""}}}};ReactPerf.measureMethods(CSSPropertyOperations,"CSSPropertyOperations",{setValueForStyles:"setValueForStyles"}),module.exports=CSSPropertyOperations;

},{"./CSSProperty":26,"./ReactPerf":92,"./dangerousStyleValue":126,"fbjs/lib/ExecutionEnvironment":151,"fbjs/lib/camelizeStyleName":153,"fbjs/lib/hyphenateStyleName":164,"fbjs/lib/memoizeStringOnly":171,"fbjs/lib/warning":174}],28:[function(require,module,exports){
"use strict";function CallbackQueue(){this._callbacks=null,this._contexts=null}var PooledClass=require("./PooledClass"),assign=require("./Object.assign"),invariant=require("fbjs/lib/invariant");assign(CallbackQueue.prototype,{enqueue:function(t,l){this._callbacks=this._callbacks||[],this._contexts=this._contexts||[],this._callbacks.push(t),this._contexts.push(l)},notifyAll:function(){var t=this._callbacks,l=this._contexts;if(t){t.length!==l.length?invariant(!1):void 0,this._callbacks=null,this._contexts=null;for(var s=0;s<t.length;s++)t[s].call(l[s]);t.length=0,l.length=0}},reset:function(){this._callbacks=null,this._contexts=null},destructor:function(){this.reset()}}),PooledClass.addPoolingTo(CallbackQueue),module.exports=CallbackQueue;

},{"./Object.assign":45,"./PooledClass":46,"fbjs/lib/invariant":165}],29:[function(require,module,exports){
"use strict";function shouldUseChangeEvent(e){var t=e.nodeName&&e.nodeName.toLowerCase();return"select"===t||"input"===t&&"file"===e.type}function manualDispatchChangeEvent(e){var t=SyntheticEvent.getPooled(eventTypes.change,activeElementID,e,getEventTarget(e));EventPropagators.accumulateTwoPhaseDispatches(t),ReactUpdates.batchedUpdates(runEventInBatch,t)}function runEventInBatch(e){EventPluginHub.enqueueEvents(e),EventPluginHub.processEventQueue(!1)}function startWatchingForChangeEventIE8(e,t){activeElement=e,activeElementID=t,activeElement.attachEvent("onchange",manualDispatchChangeEvent)}function stopWatchingForChangeEventIE8(){activeElement&&(activeElement.detachEvent("onchange",manualDispatchChangeEvent),activeElement=null,activeElementID=null)}function getTargetIDForChangeEvent(e,t,n){return e===topLevelTypes.topChange?n:void 0}function handleEventsForChangeEventIE8(e,t,n){e===topLevelTypes.topFocus?(stopWatchingForChangeEventIE8(),startWatchingForChangeEventIE8(t,n)):e===topLevelTypes.topBlur&&stopWatchingForChangeEventIE8()}function startWatchingForValueChange(e,t){activeElement=e,activeElementID=t,activeElementValue=e.value,activeElementValueProp=Object.getOwnPropertyDescriptor(e.constructor.prototype,"value"),Object.defineProperty(activeElement,"value",newValueProp),activeElement.attachEvent("onpropertychange",handlePropertyChange)}function stopWatchingForValueChange(){activeElement&&(delete activeElement.value,activeElement.detachEvent("onpropertychange",handlePropertyChange),activeElement=null,activeElementID=null,activeElementValue=null,activeElementValueProp=null)}function handlePropertyChange(e){if("value"===e.propertyName){var t=e.srcElement.value;t!==activeElementValue&&(activeElementValue=t,manualDispatchChangeEvent(e))}}function getTargetIDForInputEvent(e,t,n){return e===topLevelTypes.topInput?n:void 0}function handleEventsForInputEventIE(e,t,n){e===topLevelTypes.topFocus?(stopWatchingForValueChange(),startWatchingForValueChange(t,n)):e===topLevelTypes.topBlur&&stopWatchingForValueChange()}function getTargetIDForInputEventIE(e,t,n){return e!==topLevelTypes.topSelectionChange&&e!==topLevelTypes.topKeyUp&&e!==topLevelTypes.topKeyDown||!activeElement||activeElement.value===activeElementValue?void 0:(activeElementValue=activeElement.value,activeElementID)}function shouldUseClickEvent(e){return e.nodeName&&"input"===e.nodeName.toLowerCase()&&("checkbox"===e.type||"radio"===e.type)}function getTargetIDForClickEvent(e,t,n){return e===topLevelTypes.topClick?n:void 0}var EventConstants=require("./EventConstants"),EventPluginHub=require("./EventPluginHub"),EventPropagators=require("./EventPropagators"),ExecutionEnvironment=require("fbjs/lib/ExecutionEnvironment"),ReactUpdates=require("./ReactUpdates"),SyntheticEvent=require("./SyntheticEvent"),getEventTarget=require("./getEventTarget"),isEventSupported=require("./isEventSupported"),isTextInputElement=require("./isTextInputElement"),keyOf=require("fbjs/lib/keyOf"),topLevelTypes=EventConstants.topLevelTypes,eventTypes={change:{phasedRegistrationNames:{bubbled:keyOf({onChange:null}),captured:keyOf({onChangeCapture:null})},dependencies:[topLevelTypes.topBlur,topLevelTypes.topChange,topLevelTypes.topClick,topLevelTypes.topFocus,topLevelTypes.topInput,topLevelTypes.topKeyDown,topLevelTypes.topKeyUp,topLevelTypes.topSelectionChange]}},activeElement=null,activeElementID=null,activeElementValue=null,activeElementValueProp=null,doesChangeEventBubble=!1;ExecutionEnvironment.canUseDOM&&(doesChangeEventBubble=isEventSupported("change")&&(!("documentMode"in document)||document.documentMode>8));var isInputEventSupported=!1;ExecutionEnvironment.canUseDOM&&(isInputEventSupported=isEventSupported("input")&&(!("documentMode"in document)||document.documentMode>9));var newValueProp={get:function(){return activeElementValueProp.get.call(this)},set:function(e){activeElementValue=""+e,activeElementValueProp.set.call(this,e)}},ChangeEventPlugin={eventTypes:eventTypes,extractEvents:function(e,t,n,a,o){var l,u;if(shouldUseChangeEvent(t)?doesChangeEventBubble?l=getTargetIDForChangeEvent:u=handleEventsForChangeEventIE8:isTextInputElement(t)?isInputEventSupported?l=getTargetIDForInputEvent:(l=getTargetIDForInputEventIE,u=handleEventsForInputEventIE):shouldUseClickEvent(t)&&(l=getTargetIDForClickEvent),l){var v=l(e,t,n);if(v){var p=SyntheticEvent.getPooled(eventTypes.change,v,a,o);return p.type="change",EventPropagators.accumulateTwoPhaseDispatches(p),p}}u&&u(e,t,n)}};module.exports=ChangeEventPlugin;

},{"./EventConstants":37,"./EventPluginHub":38,"./EventPropagators":41,"./ReactUpdates":104,"./SyntheticEvent":113,"./getEventTarget":135,"./isEventSupported":140,"./isTextInputElement":141,"fbjs/lib/ExecutionEnvironment":151,"fbjs/lib/keyOf":169}],30:[function(require,module,exports){
"use strict";var nextReactRootIndex=0,ClientReactRootIndex={createReactRootIndex:function(){return nextReactRootIndex++}};module.exports=ClientReactRootIndex;

},{}],31:[function(require,module,exports){
"use strict";function insertChildAt(e,t,n){var r=n>=e.childNodes.length?null:e.childNodes.item(n);e.insertBefore(t,r)}var Danger=require("./Danger"),ReactMultiChildUpdateTypes=require("./ReactMultiChildUpdateTypes"),ReactPerf=require("./ReactPerf"),setInnerHTML=require("./setInnerHTML"),setTextContent=require("./setTextContent"),invariant=require("fbjs/lib/invariant"),DOMChildrenOperations={dangerouslyReplaceNodeWithMarkup:Danger.dangerouslyReplaceNodeWithMarkup,updateTextContent:setTextContent,processUpdates:function(e,t){for(var n,r=null,a=null,i=0;i<e.length;i++)if(n=e[i],n.type===ReactMultiChildUpdateTypes.MOVE_EXISTING||n.type===ReactMultiChildUpdateTypes.REMOVE_NODE){var d=n.fromIndex,l=n.parentNode.childNodes[d],p=n.parentID;l?void 0:invariant(!1),r=r||{},r[p]=r[p]||[],r[p][d]=l,a=a||[],a.push(l)}var s;if(s=t.length&&"string"==typeof t[0]?Danger.dangerouslyRenderMarkup(t):t,a)for(var o=0;o<a.length;o++)a[o].parentNode.removeChild(a[o]);for(var u=0;u<e.length;u++)switch(n=e[u],n.type){case ReactMultiChildUpdateTypes.INSERT_MARKUP:insertChildAt(n.parentNode,s[n.markupIndex],n.toIndex);break;case ReactMultiChildUpdateTypes.MOVE_EXISTING:insertChildAt(n.parentNode,r[n.parentID][n.fromIndex],n.toIndex);break;case ReactMultiChildUpdateTypes.SET_MARKUP:setInnerHTML(n.parentNode,n.content);break;case ReactMultiChildUpdateTypes.TEXT_CONTENT:setTextContent(n.parentNode,n.content);break;case ReactMultiChildUpdateTypes.REMOVE_NODE:}}};ReactPerf.measureMethods(DOMChildrenOperations,"DOMChildrenOperations",{updateTextContent:"updateTextContent"}),module.exports=DOMChildrenOperations;

},{"./Danger":34,"./ReactMultiChildUpdateTypes":88,"./ReactPerf":92,"./setInnerHTML":145,"./setTextContent":146,"fbjs/lib/invariant":165}],32:[function(require,module,exports){
"use strict";function checkMask(t,e){return(t&e)===e}var invariant=require("fbjs/lib/invariant"),DOMPropertyInjection={MUST_USE_ATTRIBUTE:1,MUST_USE_PROPERTY:2,HAS_SIDE_EFFECTS:4,HAS_BOOLEAN_VALUE:8,HAS_NUMERIC_VALUE:16,HAS_POSITIVE_NUMERIC_VALUE:48,HAS_OVERLOADED_BOOLEAN_VALUE:64,injectDOMPropertyConfig:function(t){var e=DOMPropertyInjection,r=t.Properties||{},a=t.DOMAttributeNamespaces||{},o=t.DOMAttributeNames||{},i=t.DOMPropertyNames||{},s=t.DOMMutationMethods||{};t.isCustomAttribute&&DOMProperty._isCustomAttributeFunctions.push(t.isCustomAttribute);for(var u in r){DOMProperty.properties.hasOwnProperty(u)?invariant(!1):void 0;var n=u.toLowerCase(),c=r[u],E={attributeName:n,attributeNamespace:null,propertyName:u,mutationMethod:null,mustUseAttribute:checkMask(c,e.MUST_USE_ATTRIBUTE),mustUseProperty:checkMask(c,e.MUST_USE_PROPERTY),hasSideEffects:checkMask(c,e.HAS_SIDE_EFFECTS),hasBooleanValue:checkMask(c,e.HAS_BOOLEAN_VALUE),hasNumericValue:checkMask(c,e.HAS_NUMERIC_VALUE),hasPositiveNumericValue:checkMask(c,e.HAS_POSITIVE_NUMERIC_VALUE),hasOverloadedBooleanValue:checkMask(c,e.HAS_OVERLOADED_BOOLEAN_VALUE)};if(E.mustUseAttribute&&E.mustUseProperty?invariant(!1):void 0,!E.mustUseProperty&&E.hasSideEffects?invariant(!1):void 0,E.hasBooleanValue+E.hasNumericValue+E.hasOverloadedBooleanValue<=1?void 0:invariant(!1),o.hasOwnProperty(u)){var A=o[u];E.attributeName=A}a.hasOwnProperty(u)&&(E.attributeNamespace=a[u]),i.hasOwnProperty(u)&&(E.propertyName=i[u]),s.hasOwnProperty(u)&&(E.mutationMethod=s[u]),DOMProperty.properties[u]=E}}},defaultValueCache={},DOMProperty={ID_ATTRIBUTE_NAME:"data-reactid",properties:{},getPossibleStandardName:null,_isCustomAttributeFunctions:[],isCustomAttribute:function(t){for(var e=0;e<DOMProperty._isCustomAttributeFunctions.length;e++){var r=DOMProperty._isCustomAttributeFunctions[e];if(r(t))return!0}return!1},getDefaultValueForProperty:function(t,e){var r,a=defaultValueCache[t];return a||(defaultValueCache[t]=a={}),e in a||(r=document.createElement(t),a[e]=r[e]),a[e]},injection:DOMPropertyInjection};module.exports=DOMProperty;

},{"fbjs/lib/invariant":165}],33:[function(require,module,exports){
"use strict";function isAttributeNameSafe(e){return validatedAttributeNameCache.hasOwnProperty(e)?!0:illegalAttributeNameCache.hasOwnProperty(e)?!1:VALID_ATTRIBUTE_NAME_REGEX.test(e)?(validatedAttributeNameCache[e]=!0,!0):(illegalAttributeNameCache[e]=!0,!1)}function shouldIgnoreValue(e,t){return null==t||e.hasBooleanValue&&!t||e.hasNumericValue&&isNaN(t)||e.hasPositiveNumericValue&&1>t||e.hasOverloadedBooleanValue&&t===!1}var DOMProperty=require("./DOMProperty"),ReactPerf=require("./ReactPerf"),quoteAttributeValueForBrowser=require("./quoteAttributeValueForBrowser"),warning=require("fbjs/lib/warning"),VALID_ATTRIBUTE_NAME_REGEX=/^[a-zA-Z_][\w\.\-]*$/,illegalAttributeNameCache={},validatedAttributeNameCache={},reactProps,warnedProperties,warnUnknownProperty,DOMPropertyOperations={createMarkupForID:function(e){return DOMProperty.ID_ATTRIBUTE_NAME+"="+quoteAttributeValueForBrowser(e)},setAttributeForID:function(e,t){e.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME,t)},createMarkupForProperty:function(e,t){var r=DOMProperty.properties.hasOwnProperty(e)?DOMProperty.properties[e]:null;if(r){if(shouldIgnoreValue(r,t))return"";var o=r.attributeName;return r.hasBooleanValue||r.hasOverloadedBooleanValue&&t===!0?o+'=""':o+"="+quoteAttributeValueForBrowser(t)}return DOMProperty.isCustomAttribute(e)?null==t?"":e+"="+quoteAttributeValueForBrowser(t):null},createMarkupForCustomAttribute:function(e,t){return isAttributeNameSafe(e)&&null!=t?e+"="+quoteAttributeValueForBrowser(t):""},setValueForProperty:function(e,t,r){var o=DOMProperty.properties.hasOwnProperty(t)?DOMProperty.properties[t]:null;if(o){var a=o.mutationMethod;if(a)a(e,r);else if(shouldIgnoreValue(o,r))this.deleteValueForProperty(e,t);else if(o.mustUseAttribute){var u=o.attributeName,i=o.attributeNamespace;i?e.setAttributeNS(i,u,""+r):o.hasBooleanValue||o.hasOverloadedBooleanValue&&r===!0?e.setAttribute(u,""):e.setAttribute(u,""+r)}else{var s=o.propertyName;o.hasSideEffects&&""+e[s]==""+r||(e[s]=r)}}else DOMProperty.isCustomAttribute(t)&&DOMPropertyOperations.setValueForAttribute(e,t,r)},setValueForAttribute:function(e,t,r){isAttributeNameSafe(t)&&(null==r?e.removeAttribute(t):e.setAttribute(t,""+r))},deleteValueForProperty:function(e,t){var r=DOMProperty.properties.hasOwnProperty(t)?DOMProperty.properties[t]:null;if(r){var o=r.mutationMethod;if(o)o(e,void 0);else if(r.mustUseAttribute)e.removeAttribute(r.attributeName);else{var a=r.propertyName,u=DOMProperty.getDefaultValueForProperty(e.nodeName,a);r.hasSideEffects&&""+e[a]===u||(e[a]=u)}}else DOMProperty.isCustomAttribute(t)&&e.removeAttribute(t)}};ReactPerf.measureMethods(DOMPropertyOperations,"DOMPropertyOperations",{setValueForProperty:"setValueForProperty",setValueForAttribute:"setValueForAttribute",deleteValueForProperty:"deleteValueForProperty"}),module.exports=DOMPropertyOperations;

},{"./DOMProperty":32,"./ReactPerf":92,"./quoteAttributeValueForBrowser":143,"fbjs/lib/warning":174}],34:[function(require,module,exports){
"use strict";function getNodeName(e){return e.substring(1,e.indexOf(" "))}var ExecutionEnvironment=require("fbjs/lib/ExecutionEnvironment"),createNodesFromMarkup=require("fbjs/lib/createNodesFromMarkup"),emptyFunction=require("fbjs/lib/emptyFunction"),getMarkupWrap=require("fbjs/lib/getMarkupWrap"),invariant=require("fbjs/lib/invariant"),OPEN_TAG_NAME_EXP=/^(<[^ \/>]+)/,RESULT_INDEX_ATTR="data-danger-index",Danger={dangerouslyRenderMarkup:function(e){ExecutionEnvironment.canUseDOM?void 0:invariant(!1);for(var r,n={},t=0;t<e.length;t++)e[t]?void 0:invariant(!1),r=getNodeName(e[t]),r=getMarkupWrap(r)?r:"*",n[r]=n[r]||[],n[r][t]=e[t];var i=[],a=0;for(r in n)if(n.hasOwnProperty(r)){var o,u=n[r];for(o in u)if(u.hasOwnProperty(o)){var v=u[o];u[o]=v.replace(OPEN_TAG_NAME_EXP,"$1 "+RESULT_INDEX_ATTR+'="'+o+'" ')}for(var d=createNodesFromMarkup(u.join(""),emptyFunction),p=0;p<d.length;++p){var s=d[p];s.hasAttribute&&s.hasAttribute(RESULT_INDEX_ATTR)&&(o=+s.getAttribute(RESULT_INDEX_ATTR),s.removeAttribute(RESULT_INDEX_ATTR),i.hasOwnProperty(o)?invariant(!1):void 0,i[o]=s,a+=1)}}return a!==i.length?invariant(!1):void 0,i.length!==e.length?invariant(!1):void 0,i},dangerouslyReplaceNodeWithMarkup:function(e,r){ExecutionEnvironment.canUseDOM?void 0:invariant(!1),r?void 0:invariant(!1),"html"===e.tagName.toLowerCase()?invariant(!1):void 0;var n;n="string"==typeof r?createNodesFromMarkup(r,emptyFunction)[0]:r,e.parentNode.replaceChild(n,e)}};module.exports=Danger;

},{"fbjs/lib/ExecutionEnvironment":151,"fbjs/lib/createNodesFromMarkup":156,"fbjs/lib/emptyFunction":157,"fbjs/lib/getMarkupWrap":161,"fbjs/lib/invariant":165}],35:[function(require,module,exports){
"use strict";var keyOf=require("fbjs/lib/keyOf"),DefaultEventPluginOrder=[keyOf({ResponderEventPlugin:null}),keyOf({SimpleEventPlugin:null}),keyOf({TapEventPlugin:null}),keyOf({EnterLeaveEventPlugin:null}),keyOf({ChangeEventPlugin:null}),keyOf({SelectEventPlugin:null}),keyOf({BeforeInputEventPlugin:null})];module.exports=DefaultEventPluginOrder;

},{"fbjs/lib/keyOf":169}],36:[function(require,module,exports){
"use strict";var EventConstants=require("./EventConstants"),EventPropagators=require("./EventPropagators"),SyntheticMouseEvent=require("./SyntheticMouseEvent"),ReactMount=require("./ReactMount"),keyOf=require("fbjs/lib/keyOf"),topLevelTypes=EventConstants.topLevelTypes,getFirstReactDOM=ReactMount.getFirstReactDOM,eventTypes={mouseEnter:{registrationName:keyOf({onMouseEnter:null}),dependencies:[topLevelTypes.topMouseOut,topLevelTypes.topMouseOver]},mouseLeave:{registrationName:keyOf({onMouseLeave:null}),dependencies:[topLevelTypes.topMouseOut,topLevelTypes.topMouseOver]}},extractedEvents=[null,null],EnterLeaveEventPlugin={eventTypes:eventTypes,extractEvents:function(e,t,n,o,r){if(e===topLevelTypes.topMouseOver&&(o.relatedTarget||o.fromElement))return null;if(e!==topLevelTypes.topMouseOut&&e!==topLevelTypes.topMouseOver)return null;var s;if(t.window===t)s=t;else{var a=t.ownerDocument;s=a?a.defaultView||a.parentWindow:window}var u,v,p="",l="";if(e===topLevelTypes.topMouseOut?(u=t,p=n,v=getFirstReactDOM(o.relatedTarget||o.toElement),v?l=ReactMount.getID(v):v=s,v=v||s):(u=s,v=t,l=n),u===v)return null;var i=SyntheticMouseEvent.getPooled(eventTypes.mouseLeave,p,o,r);i.type="mouseleave",i.target=u,i.relatedTarget=v;var y=SyntheticMouseEvent.getPooled(eventTypes.mouseEnter,l,o,r);return y.type="mouseenter",y.target=v,y.relatedTarget=u,EventPropagators.accumulateEnterLeaveDispatches(i,y,p,l),extractedEvents[0]=i,extractedEvents[1]=y,extractedEvents}};module.exports=EnterLeaveEventPlugin;

},{"./EventConstants":37,"./EventPropagators":41,"./ReactMount":86,"./SyntheticMouseEvent":117,"fbjs/lib/keyOf":169}],37:[function(require,module,exports){
"use strict";var keyMirror=require("fbjs/lib/keyMirror"),PropagationPhases=keyMirror({bubbled:null,captured:null}),topLevelTypes=keyMirror({topAbort:null,topBlur:null,topCanPlay:null,topCanPlayThrough:null,topChange:null,topClick:null,topCompositionEnd:null,topCompositionStart:null,topCompositionUpdate:null,topContextMenu:null,topCopy:null,topCut:null,topDoubleClick:null,topDrag:null,topDragEnd:null,topDragEnter:null,topDragExit:null,topDragLeave:null,topDragOver:null,topDragStart:null,topDrop:null,topDurationChange:null,topEmptied:null,topEncrypted:null,topEnded:null,topError:null,topFocus:null,topInput:null,topKeyDown:null,topKeyPress:null,topKeyUp:null,topLoad:null,topLoadedData:null,topLoadedMetadata:null,topLoadStart:null,topMouseDown:null,topMouseMove:null,topMouseOut:null,topMouseOver:null,topMouseUp:null,topPaste:null,topPause:null,topPlay:null,topPlaying:null,topProgress:null,topRateChange:null,topReset:null,topScroll:null,topSeeked:null,topSeeking:null,topSelectionChange:null,topStalled:null,topSubmit:null,topSuspend:null,topTextInput:null,topTimeUpdate:null,topTouchCancel:null,topTouchEnd:null,topTouchMove:null,topTouchStart:null,topVolumeChange:null,topWaiting:null,topWheel:null}),EventConstants={topLevelTypes:topLevelTypes,PropagationPhases:PropagationPhases};module.exports=EventConstants;

},{"fbjs/lib/keyMirror":168}],38:[function(require,module,exports){
"use strict";function validateInstanceHandle(){InstanceHandle&&InstanceHandle.traverseTwoPhase&&InstanceHandle.traverseEnterLeave}var EventPluginRegistry=require("./EventPluginRegistry"),EventPluginUtils=require("./EventPluginUtils"),ReactErrorUtils=require("./ReactErrorUtils"),accumulateInto=require("./accumulateInto"),forEachAccumulated=require("./forEachAccumulated"),invariant=require("fbjs/lib/invariant"),warning=require("fbjs/lib/warning"),listenerBank={},eventQueue=null,executeDispatchesAndRelease=function(e,n){e&&(EventPluginUtils.executeDispatchesInOrder(e,n),e.isPersistent()||e.constructor.release(e))},executeDispatchesAndReleaseSimulated=function(e){return executeDispatchesAndRelease(e,!0)},executeDispatchesAndReleaseTopLevel=function(e){return executeDispatchesAndRelease(e,!1)},InstanceHandle=null,EventPluginHub={injection:{injectMount:EventPluginUtils.injection.injectMount,injectInstanceHandle:function(e){InstanceHandle=e},getInstanceHandle:function(){return InstanceHandle},injectEventPluginOrder:EventPluginRegistry.injectEventPluginOrder,injectEventPluginsByName:EventPluginRegistry.injectEventPluginsByName},eventNameDispatchConfigs:EventPluginRegistry.eventNameDispatchConfigs,registrationNameModules:EventPluginRegistry.registrationNameModules,putListener:function(e,n,t){"function"!=typeof t?invariant(!1):void 0;var i=listenerBank[n]||(listenerBank[n]={});i[e]=t;var r=EventPluginRegistry.registrationNameModules[n];r&&r.didPutListener&&r.didPutListener(e,n,t)},getListener:function(e,n){var t=listenerBank[n];return t&&t[e]},deleteListener:function(e,n){var t=EventPluginRegistry.registrationNameModules[n];t&&t.willDeleteListener&&t.willDeleteListener(e,n);var i=listenerBank[n];i&&delete i[e]},deleteAllListeners:function(e){for(var n in listenerBank)if(listenerBank[n][e]){var t=EventPluginRegistry.registrationNameModules[n];t&&t.willDeleteListener&&t.willDeleteListener(e,n),delete listenerBank[n][e]}},extractEvents:function(e,n,t,i,r){for(var a,u=EventPluginRegistry.plugins,s=0;s<u.length;s++){var l=u[s];if(l){var c=l.extractEvents(e,n,t,i,r);c&&(a=accumulateInto(a,c))}}return a},enqueueEvents:function(e){e&&(eventQueue=accumulateInto(eventQueue,e))},processEventQueue:function(e){var n=eventQueue;eventQueue=null,e?forEachAccumulated(n,executeDispatchesAndReleaseSimulated):forEachAccumulated(n,executeDispatchesAndReleaseTopLevel),eventQueue?invariant(!1):void 0,ReactErrorUtils.rethrowCaughtError()},__purge:function(){listenerBank={}},__getListenerBank:function(){return listenerBank}};module.exports=EventPluginHub;

},{"./EventPluginRegistry":39,"./EventPluginUtils":40,"./ReactErrorUtils":77,"./accumulateInto":123,"./forEachAccumulated":131,"fbjs/lib/invariant":165,"fbjs/lib/warning":174}],39:[function(require,module,exports){
"use strict";function recomputePluginOrdering(){if(EventPluginOrder)for(var e in namesToPlugins){var n=namesToPlugins[e],i=EventPluginOrder.indexOf(e);if(i>-1?void 0:invariant(!1),!EventPluginRegistry.plugins[i]){n.extractEvents?void 0:invariant(!1),EventPluginRegistry.plugins[i]=n;var r=n.eventTypes;for(var t in r)publishEventForPlugin(r[t],n,t)?void 0:invariant(!1)}}}function publishEventForPlugin(e,n,i){EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(i)?invariant(!1):void 0,EventPluginRegistry.eventNameDispatchConfigs[i]=e;var r=e.phasedRegistrationNames;if(r){for(var t in r)if(r.hasOwnProperty(t)){var a=r[t];publishRegistrationName(a,n,i)}return!0}return e.registrationName?(publishRegistrationName(e.registrationName,n,i),!0):!1}function publishRegistrationName(e,n,i){EventPluginRegistry.registrationNameModules[e]?invariant(!1):void 0,EventPluginRegistry.registrationNameModules[e]=n,EventPluginRegistry.registrationNameDependencies[e]=n.eventTypes[i].dependencies}var invariant=require("fbjs/lib/invariant"),EventPluginOrder=null,namesToPlugins={},EventPluginRegistry={plugins:[],eventNameDispatchConfigs:{},registrationNameModules:{},registrationNameDependencies:{},injectEventPluginOrder:function(e){EventPluginOrder?invariant(!1):void 0,EventPluginOrder=Array.prototype.slice.call(e),recomputePluginOrdering()},injectEventPluginsByName:function(e){var n=!1;for(var i in e)if(e.hasOwnProperty(i)){var r=e[i];namesToPlugins.hasOwnProperty(i)&&namesToPlugins[i]===r||(namesToPlugins[i]?invariant(!1):void 0,namesToPlugins[i]=r,n=!0)}n&&recomputePluginOrdering()},getPluginModuleForEvent:function(e){var n=e.dispatchConfig;if(n.registrationName)return EventPluginRegistry.registrationNameModules[n.registrationName]||null;for(var i in n.phasedRegistrationNames)if(n.phasedRegistrationNames.hasOwnProperty(i)){var r=EventPluginRegistry.registrationNameModules[n.phasedRegistrationNames[i]];if(r)return r}return null},_resetEventPlugins:function(){EventPluginOrder=null;for(var e in namesToPlugins)namesToPlugins.hasOwnProperty(e)&&delete namesToPlugins[e];EventPluginRegistry.plugins.length=0;var n=EventPluginRegistry.eventNameDispatchConfigs;for(var i in n)n.hasOwnProperty(i)&&delete n[i];var r=EventPluginRegistry.registrationNameModules;for(var t in r)r.hasOwnProperty(t)&&delete r[t]}};module.exports=EventPluginRegistry;

},{"fbjs/lib/invariant":165}],40:[function(require,module,exports){
"use strict";function isEndish(e){return e===topLevelTypes.topMouseUp||e===topLevelTypes.topTouchEnd||e===topLevelTypes.topTouchCancel}function isMoveish(e){return e===topLevelTypes.topMouseMove||e===topLevelTypes.topTouchMove}function isStartish(e){return e===topLevelTypes.topMouseDown||e===topLevelTypes.topTouchStart}function executeDispatch(e,t,i,n){var s=e.type||"unknown-event";e.currentTarget=injection.Mount.getNode(n),t?ReactErrorUtils.invokeGuardedCallbackWithCatch(s,i,e,n):ReactErrorUtils.invokeGuardedCallback(s,i,e,n),e.currentTarget=null}function executeDispatchesInOrder(e,t){var i=e._dispatchListeners,n=e._dispatchIDs;if(Array.isArray(i))for(var s=0;s<i.length&&!e.isPropagationStopped();s++)executeDispatch(e,t,i[s],n[s]);else i&&executeDispatch(e,t,i,n);e._dispatchListeners=null,e._dispatchIDs=null}function executeDispatchesInOrderStopAtTrueImpl(e){var t=e._dispatchListeners,i=e._dispatchIDs;if(Array.isArray(t)){for(var n=0;n<t.length&&!e.isPropagationStopped();n++)if(t[n](e,i[n]))return i[n]}else if(t&&t(e,i))return i;return null}function executeDispatchesInOrderStopAtTrue(e){var t=executeDispatchesInOrderStopAtTrueImpl(e);return e._dispatchIDs=null,e._dispatchListeners=null,t}function executeDirectDispatch(e){var t=e._dispatchListeners,i=e._dispatchIDs;Array.isArray(t)?invariant(!1):void 0;var n=t?t(e,i):null;return e._dispatchListeners=null,e._dispatchIDs=null,n}function hasDispatches(e){return!!e._dispatchListeners}var EventConstants=require("./EventConstants"),ReactErrorUtils=require("./ReactErrorUtils"),invariant=require("fbjs/lib/invariant"),warning=require("fbjs/lib/warning"),injection={Mount:null,injectMount:function(e){injection.Mount=e}},topLevelTypes=EventConstants.topLevelTypes,validateEventDispatches,EventPluginUtils={isEndish:isEndish,isMoveish:isMoveish,isStartish:isStartish,executeDirectDispatch:executeDirectDispatch,executeDispatchesInOrder:executeDispatchesInOrder,executeDispatchesInOrderStopAtTrue:executeDispatchesInOrderStopAtTrue,hasDispatches:hasDispatches,getNode:function(e){return injection.Mount.getNode(e)},getID:function(e){return injection.Mount.getID(e)},injection:injection};module.exports=EventPluginUtils;

},{"./EventConstants":37,"./ReactErrorUtils":77,"fbjs/lib/invariant":165,"fbjs/lib/warning":174}],41:[function(require,module,exports){
"use strict";function listenerAtPhase(e,a,t){var c=a.dispatchConfig.phasedRegistrationNames[t];return getListener(e,c)}function accumulateDirectionalDispatches(e,a,t){var c=a?PropagationPhases.bubbled:PropagationPhases.captured,s=listenerAtPhase(e,t,c);s&&(t._dispatchListeners=accumulateInto(t._dispatchListeners,s),t._dispatchIDs=accumulateInto(t._dispatchIDs,e))}function accumulateTwoPhaseDispatchesSingle(e){e&&e.dispatchConfig.phasedRegistrationNames&&EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(e.dispatchMarker,accumulateDirectionalDispatches,e)}function accumulateTwoPhaseDispatchesSingleSkipTarget(e){e&&e.dispatchConfig.phasedRegistrationNames&&EventPluginHub.injection.getInstanceHandle().traverseTwoPhaseSkipTarget(e.dispatchMarker,accumulateDirectionalDispatches,e)}function accumulateDispatches(e,a,t){if(t&&t.dispatchConfig.registrationName){var c=t.dispatchConfig.registrationName,s=getListener(e,c);s&&(t._dispatchListeners=accumulateInto(t._dispatchListeners,s),t._dispatchIDs=accumulateInto(t._dispatchIDs,e))}}function accumulateDirectDispatchesSingle(e){e&&e.dispatchConfig.registrationName&&accumulateDispatches(e.dispatchMarker,null,e)}function accumulateTwoPhaseDispatches(e){forEachAccumulated(e,accumulateTwoPhaseDispatchesSingle)}function accumulateTwoPhaseDispatchesSkipTarget(e){forEachAccumulated(e,accumulateTwoPhaseDispatchesSingleSkipTarget)}function accumulateEnterLeaveDispatches(e,a,t,c){EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(t,c,accumulateDispatches,e,a)}function accumulateDirectDispatches(e){forEachAccumulated(e,accumulateDirectDispatchesSingle)}var EventConstants=require("./EventConstants"),EventPluginHub=require("./EventPluginHub"),warning=require("fbjs/lib/warning"),accumulateInto=require("./accumulateInto"),forEachAccumulated=require("./forEachAccumulated"),PropagationPhases=EventConstants.PropagationPhases,getListener=EventPluginHub.getListener,EventPropagators={accumulateTwoPhaseDispatches:accumulateTwoPhaseDispatches,accumulateTwoPhaseDispatchesSkipTarget:accumulateTwoPhaseDispatchesSkipTarget,accumulateDirectDispatches:accumulateDirectDispatches,accumulateEnterLeaveDispatches:accumulateEnterLeaveDispatches};module.exports=EventPropagators;

},{"./EventConstants":37,"./EventPluginHub":38,"./accumulateInto":123,"./forEachAccumulated":131,"fbjs/lib/warning":174}],42:[function(require,module,exports){
"use strict";function FallbackCompositionState(t){this._root=t,this._startText=this.getText(),this._fallbackText=null}var PooledClass=require("./PooledClass"),assign=require("./Object.assign"),getTextContentAccessor=require("./getTextContentAccessor");assign(FallbackCompositionState.prototype,{destructor:function(){this._root=null,this._startText=null,this._fallbackText=null},getText:function(){return"value"in this._root?this._root.value:this._root[getTextContentAccessor()]},getData:function(){if(this._fallbackText)return this._fallbackText;var t,e,o=this._startText,s=o.length,a=this.getText(),l=a.length;for(t=0;s>t&&o[t]===a[t];t++);var i=s-t;for(e=1;i>=e&&o[s-e]===a[l-e];e++);var r=e>1?1-e:void 0;return this._fallbackText=a.slice(t,r),this._fallbackText}}),PooledClass.addPoolingTo(FallbackCompositionState),module.exports=FallbackCompositionState;

},{"./Object.assign":45,"./PooledClass":46,"./getTextContentAccessor":138}],43:[function(require,module,exports){
"use strict";var DOMProperty=require("./DOMProperty"),ExecutionEnvironment=require("fbjs/lib/ExecutionEnvironment"),MUST_USE_ATTRIBUTE=DOMProperty.injection.MUST_USE_ATTRIBUTE,MUST_USE_PROPERTY=DOMProperty.injection.MUST_USE_PROPERTY,HAS_BOOLEAN_VALUE=DOMProperty.injection.HAS_BOOLEAN_VALUE,HAS_SIDE_EFFECTS=DOMProperty.injection.HAS_SIDE_EFFECTS,HAS_NUMERIC_VALUE=DOMProperty.injection.HAS_NUMERIC_VALUE,HAS_POSITIVE_NUMERIC_VALUE=DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE,HAS_OVERLOADED_BOOLEAN_VALUE=DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE,hasSVG;if(ExecutionEnvironment.canUseDOM){var implementation=document.implementation;hasSVG=implementation&&implementation.hasFeature&&implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure","1.1")}var HTMLDOMPropertyConfig={isCustomAttribute:RegExp.prototype.test.bind(/^(data|aria)-[a-z_][a-z\d_.\-]*$/),Properties:{accept:null,acceptCharset:null,accessKey:null,action:null,allowFullScreen:MUST_USE_ATTRIBUTE|HAS_BOOLEAN_VALUE,allowTransparency:MUST_USE_ATTRIBUTE,alt:null,async:HAS_BOOLEAN_VALUE,autoComplete:null,autoPlay:HAS_BOOLEAN_VALUE,capture:MUST_USE_ATTRIBUTE|HAS_BOOLEAN_VALUE,cellPadding:null,cellSpacing:null,charSet:MUST_USE_ATTRIBUTE,challenge:MUST_USE_ATTRIBUTE,checked:MUST_USE_PROPERTY|HAS_BOOLEAN_VALUE,classID:MUST_USE_ATTRIBUTE,className:hasSVG?MUST_USE_ATTRIBUTE:MUST_USE_PROPERTY,cols:MUST_USE_ATTRIBUTE|HAS_POSITIVE_NUMERIC_VALUE,colSpan:null,content:null,contentEditable:null,contextMenu:MUST_USE_ATTRIBUTE,controls:MUST_USE_PROPERTY|HAS_BOOLEAN_VALUE,coords:null,crossOrigin:null,data:null,dateTime:MUST_USE_ATTRIBUTE,"default":HAS_BOOLEAN_VALUE,defer:HAS_BOOLEAN_VALUE,dir:null,disabled:MUST_USE_ATTRIBUTE|HAS_BOOLEAN_VALUE,download:HAS_OVERLOADED_BOOLEAN_VALUE,draggable:null,encType:null,form:MUST_USE_ATTRIBUTE,formAction:MUST_USE_ATTRIBUTE,formEncType:MUST_USE_ATTRIBUTE,formMethod:MUST_USE_ATTRIBUTE,formNoValidate:HAS_BOOLEAN_VALUE,formTarget:MUST_USE_ATTRIBUTE,frameBorder:MUST_USE_ATTRIBUTE,headers:null,height:MUST_USE_ATTRIBUTE,hidden:MUST_USE_ATTRIBUTE|HAS_BOOLEAN_VALUE,high:null,href:null,hrefLang:null,htmlFor:null,httpEquiv:null,icon:null,id:MUST_USE_PROPERTY,inputMode:MUST_USE_ATTRIBUTE,integrity:null,is:MUST_USE_ATTRIBUTE,keyParams:MUST_USE_ATTRIBUTE,keyType:MUST_USE_ATTRIBUTE,kind:null,label:null,lang:null,list:MUST_USE_ATTRIBUTE,loop:MUST_USE_PROPERTY|HAS_BOOLEAN_VALUE,low:null,manifest:MUST_USE_ATTRIBUTE,marginHeight:null,marginWidth:null,max:null,maxLength:MUST_USE_ATTRIBUTE,media:MUST_USE_ATTRIBUTE,mediaGroup:null,method:null,min:null,minLength:MUST_USE_ATTRIBUTE,multiple:MUST_USE_PROPERTY|HAS_BOOLEAN_VALUE,muted:MUST_USE_PROPERTY|HAS_BOOLEAN_VALUE,name:null,noValidate:HAS_BOOLEAN_VALUE,open:HAS_BOOLEAN_VALUE,optimum:null,pattern:null,placeholder:null,poster:null,preload:null,radioGroup:null,readOnly:MUST_USE_PROPERTY|HAS_BOOLEAN_VALUE,rel:null,required:HAS_BOOLEAN_VALUE,role:MUST_USE_ATTRIBUTE,rows:MUST_USE_ATTRIBUTE|HAS_POSITIVE_NUMERIC_VALUE,rowSpan:null,sandbox:null,scope:null,scoped:HAS_BOOLEAN_VALUE,scrolling:null,seamless:MUST_USE_ATTRIBUTE|HAS_BOOLEAN_VALUE,selected:MUST_USE_PROPERTY|HAS_BOOLEAN_VALUE,shape:null,size:MUST_USE_ATTRIBUTE|HAS_POSITIVE_NUMERIC_VALUE,sizes:MUST_USE_ATTRIBUTE,span:HAS_POSITIVE_NUMERIC_VALUE,spellCheck:null,src:null,srcDoc:MUST_USE_PROPERTY,srcLang:null,srcSet:MUST_USE_ATTRIBUTE,start:HAS_NUMERIC_VALUE,step:null,style:null,summary:null,tabIndex:null,target:null,title:null,type:null,useMap:null,value:MUST_USE_PROPERTY|HAS_SIDE_EFFECTS,width:MUST_USE_ATTRIBUTE,wmode:MUST_USE_ATTRIBUTE,wrap:null,about:MUST_USE_ATTRIBUTE,datatype:MUST_USE_ATTRIBUTE,inlist:MUST_USE_ATTRIBUTE,prefix:MUST_USE_ATTRIBUTE,property:MUST_USE_ATTRIBUTE,resource:MUST_USE_ATTRIBUTE,"typeof":MUST_USE_ATTRIBUTE,vocab:MUST_USE_ATTRIBUTE,autoCapitalize:null,autoCorrect:null,autoSave:null,color:null,itemProp:MUST_USE_ATTRIBUTE,itemScope:MUST_USE_ATTRIBUTE|HAS_BOOLEAN_VALUE,itemType:MUST_USE_ATTRIBUTE,itemID:MUST_USE_ATTRIBUTE,itemRef:MUST_USE_ATTRIBUTE,results:null,security:MUST_USE_ATTRIBUTE,unselectable:MUST_USE_ATTRIBUTE},DOMAttributeNames:{acceptCharset:"accept-charset",className:"class",htmlFor:"for",httpEquiv:"http-equiv"},DOMPropertyNames:{autoCapitalize:"autocapitalize",autoComplete:"autocomplete",autoCorrect:"autocorrect",autoFocus:"autofocus",autoPlay:"autoplay",autoSave:"autosave",encType:"encoding",hrefLang:"hreflang",radioGroup:"radiogroup",spellCheck:"spellcheck",srcDoc:"srcdoc",srcSet:"srcset"}};module.exports=HTMLDOMPropertyConfig;

},{"./DOMProperty":32,"fbjs/lib/ExecutionEnvironment":151}],44:[function(require,module,exports){
"use strict";function _assertSingleLink(e){null!=e.checkedLink&&null!=e.valueLink?invariant(!1):void 0}function _assertValueLink(e){_assertSingleLink(e),null!=e.value||null!=e.onChange?invariant(!1):void 0}function _assertCheckedLink(e){_assertSingleLink(e),null!=e.checked||null!=e.onChange?invariant(!1):void 0}function getDeclarationErrorAddendum(e){if(e){var n=e.getName();if(n)return" Check the render method of `"+n+"`."}return""}var ReactPropTypes=require("./ReactPropTypes"),ReactPropTypeLocations=require("./ReactPropTypeLocations"),invariant=require("fbjs/lib/invariant"),warning=require("fbjs/lib/warning"),hasReadOnlyValue={button:!0,checkbox:!0,image:!0,hidden:!0,radio:!0,reset:!0,submit:!0},propTypes={value:function(e,n,a){return!e[n]||hasReadOnlyValue[e.type]||e.onChange||e.readOnly||e.disabled?null:new Error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.")},checked:function(e,n,a){return!e[n]||e.onChange||e.readOnly||e.disabled?null:new Error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.")},onChange:ReactPropTypes.func},loggedTypeFailures={},LinkedValueUtils={checkPropTypes:function(e,n,a){for(var r in propTypes){if(propTypes.hasOwnProperty(r))var i=propTypes[r](n,r,e,ReactPropTypeLocations.prop);if(i instanceof Error&&!(i.message in loggedTypeFailures)){loggedTypeFailures[i.message]=!0;getDeclarationErrorAddendum(a)}}},getValue:function(e){return e.valueLink?(_assertValueLink(e),e.valueLink.value):e.value},getChecked:function(e){return e.checkedLink?(_assertCheckedLink(e),e.checkedLink.value):e.checked},executeOnChange:function(e,n){return e.valueLink?(_assertValueLink(e),e.valueLink.requestChange(n.target.value)):e.checkedLink?(_assertCheckedLink(e),e.checkedLink.requestChange(n.target.checked)):e.onChange?e.onChange.call(void 0,n):void 0}};module.exports=LinkedValueUtils;

},{"./ReactPropTypeLocations":94,"./ReactPropTypes":95,"fbjs/lib/invariant":165,"fbjs/lib/warning":174}],45:[function(require,module,exports){
"use strict";function assign(r,e){if(null==r)throw new TypeError("Object.assign target cannot be null or undefined");for(var n=Object(r),t=Object.prototype.hasOwnProperty,a=1;a<arguments.length;a++){var o=arguments[a];if(null!=o){var s=Object(o);for(var l in s)t.call(s,l)&&(n[l]=s[l])}}return n}module.exports=assign;

},{}],46:[function(require,module,exports){
"use strict";var invariant=require("fbjs/lib/invariant"),oneArgumentPooler=function(o){var e=this;if(e.instancePool.length){var n=e.instancePool.pop();return e.call(n,o),n}return new e(o)},twoArgumentPooler=function(o,e){var n=this;if(n.instancePool.length){var r=n.instancePool.pop();return n.call(r,o,e),r}return new n(o,e)},threeArgumentPooler=function(o,e,n){var r=this;if(r.instancePool.length){var t=r.instancePool.pop();return r.call(t,o,e,n),t}return new r(o,e,n)},fourArgumentPooler=function(o,e,n,r){var t=this;if(t.instancePool.length){var l=t.instancePool.pop();return t.call(l,o,e,n,r),l}return new t(o,e,n,r)},fiveArgumentPooler=function(o,e,n,r,t){var l=this;if(l.instancePool.length){var i=l.instancePool.pop();return l.call(i,o,e,n,r,t),i}return new l(o,e,n,r,t)},standardReleaser=function(o){var e=this;o instanceof e?void 0:invariant(!1),o.destructor(),e.instancePool.length<e.poolSize&&e.instancePool.push(o)},DEFAULT_POOL_SIZE=10,DEFAULT_POOLER=oneArgumentPooler,addPoolingTo=function(o,e){var n=o;return n.instancePool=[],n.getPooled=e||DEFAULT_POOLER,n.poolSize||(n.poolSize=DEFAULT_POOL_SIZE),n.release=standardReleaser,n},PooledClass={addPoolingTo:addPoolingTo,oneArgumentPooler:oneArgumentPooler,twoArgumentPooler:twoArgumentPooler,threeArgumentPooler:threeArgumentPooler,fourArgumentPooler:fourArgumentPooler,fiveArgumentPooler:fiveArgumentPooler};module.exports=PooledClass;

},{"fbjs/lib/invariant":165}],47:[function(require,module,exports){
"use strict";var ReactDOM=require("./ReactDOM"),ReactDOMServer=require("./ReactDOMServer"),ReactIsomorphic=require("./ReactIsomorphic"),assign=require("./Object.assign"),deprecated=require("./deprecated"),React={};assign(React,ReactIsomorphic),assign(React,{findDOMNode:deprecated("findDOMNode","ReactDOM","react-dom",ReactDOM,ReactDOM.findDOMNode),render:deprecated("render","ReactDOM","react-dom",ReactDOM,ReactDOM.render),unmountComponentAtNode:deprecated("unmountComponentAtNode","ReactDOM","react-dom",ReactDOM,ReactDOM.unmountComponentAtNode),renderToString:deprecated("renderToString","ReactDOMServer","react-dom/server",ReactDOMServer,ReactDOMServer.renderToString),renderToStaticMarkup:deprecated("renderToStaticMarkup","ReactDOMServer","react-dom/server",ReactDOMServer,ReactDOMServer.renderToStaticMarkup)}),React.__SECRET_DOM_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ReactDOM,module.exports=React;

},{"./Object.assign":45,"./ReactDOM":58,"./ReactDOMServer":68,"./ReactIsomorphic":84,"./deprecated":127}],48:[function(require,module,exports){
"use strict";var ReactInstanceMap=require("./ReactInstanceMap"),findDOMNode=require("./findDOMNode"),warning=require("fbjs/lib/warning"),didWarnKey="_getDOMNodeDidWarn",ReactBrowserComponentMixin={getDOMNode:function(){return this.constructor[didWarnKey]=!0,findDOMNode(this)}};module.exports=ReactBrowserComponentMixin;

},{"./ReactInstanceMap":83,"./findDOMNode":129,"fbjs/lib/warning":174}],49:[function(require,module,exports){
"use strict";function getListeningForDocument(e){return Object.prototype.hasOwnProperty.call(e,topListenersIDKey)||(e[topListenersIDKey]=reactTopListenersCounter++,alreadyListeningTo[e[topListenersIDKey]]={}),alreadyListeningTo[e[topListenersIDKey]]}var EventConstants=require("./EventConstants"),EventPluginHub=require("./EventPluginHub"),EventPluginRegistry=require("./EventPluginRegistry"),ReactEventEmitterMixin=require("./ReactEventEmitterMixin"),ReactPerf=require("./ReactPerf"),ViewportMetrics=require("./ViewportMetrics"),assign=require("./Object.assign"),isEventSupported=require("./isEventSupported"),alreadyListeningTo={},isMonitoringScrollValue=!1,reactTopListenersCounter=0,topEventMapping={topAbort:"abort",topBlur:"blur",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topChange:"change",topClick:"click",topCompositionEnd:"compositionend",topCompositionStart:"compositionstart",topCompositionUpdate:"compositionupdate",topContextMenu:"contextmenu",topCopy:"copy",topCut:"cut",topDoubleClick:"dblclick",topDrag:"drag",topDragEnd:"dragend",topDragEnter:"dragenter",topDragExit:"dragexit",topDragLeave:"dragleave",topDragOver:"dragover",topDragStart:"dragstart",topDrop:"drop",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topFocus:"focus",topInput:"input",topKeyDown:"keydown",topKeyPress:"keypress",topKeyUp:"keyup",topLoadedData:"loadeddata",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topMouseDown:"mousedown",topMouseMove:"mousemove",topMouseOut:"mouseout",topMouseOver:"mouseover",topMouseUp:"mouseup",topPaste:"paste",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topScroll:"scroll",topSeeked:"seeked",topSeeking:"seeking",topSelectionChange:"selectionchange",topStalled:"stalled",topSuspend:"suspend",topTextInput:"textInput",topTimeUpdate:"timeupdate",topTouchCancel:"touchcancel",topTouchEnd:"touchend",topTouchMove:"touchmove",topTouchStart:"touchstart",topVolumeChange:"volumechange",topWaiting:"waiting",topWheel:"wheel"},topListenersIDKey="_reactListenersID"+String(Math.random()).slice(2),ReactBrowserEventEmitter=assign({},ReactEventEmitterMixin,{ReactEventListener:null,injection:{injectReactEventListener:function(e){e.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel),ReactBrowserEventEmitter.ReactEventListener=e}},setEnabled:function(e){ReactBrowserEventEmitter.ReactEventListener&&ReactBrowserEventEmitter.ReactEventListener.setEnabled(e)},isEnabled:function(){return!(!ReactBrowserEventEmitter.ReactEventListener||!ReactBrowserEventEmitter.ReactEventListener.isEnabled())},listenTo:function(e,t){for(var r=t,n=getListeningForDocument(r),o=EventPluginRegistry.registrationNameDependencies[e],i=EventConstants.topLevelTypes,a=0;a<o.length;a++){var s=o[a];n.hasOwnProperty(s)&&n[s]||(s===i.topWheel?isEventSupported("wheel")?ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(i.topWheel,"wheel",r):isEventSupported("mousewheel")?ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(i.topWheel,"mousewheel",r):ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(i.topWheel,"DOMMouseScroll",r):s===i.topScroll?isEventSupported("scroll",!0)?ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(i.topScroll,"scroll",r):ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(i.topScroll,"scroll",ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE):s===i.topFocus||s===i.topBlur?(isEventSupported("focus",!0)?(ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(i.topFocus,"focus",r),ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(i.topBlur,"blur",r)):isEventSupported("focusin")&&(ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(i.topFocus,"focusin",r),ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(i.topBlur,"focusout",r)),n[i.topBlur]=!0,n[i.topFocus]=!0):topEventMapping.hasOwnProperty(s)&&ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(s,topEventMapping[s],r),n[s]=!0)}},trapBubbledEvent:function(e,t,r){return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(e,t,r)},trapCapturedEvent:function(e,t,r){return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(e,t,r)},ensureScrollValueMonitoring:function(){if(!isMonitoringScrollValue){var e=ViewportMetrics.refreshScrollValues;ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(e),isMonitoringScrollValue=!0}},eventNameDispatchConfigs:EventPluginHub.eventNameDispatchConfigs,registrationNameModules:EventPluginHub.registrationNameModules,putListener:EventPluginHub.putListener,getListener:EventPluginHub.getListener,deleteListener:EventPluginHub.deleteListener,deleteAllListeners:EventPluginHub.deleteAllListeners});ReactPerf.measureMethods(ReactBrowserEventEmitter,"ReactBrowserEventEmitter",{putListener:"putListener",deleteListener:"deleteListener"}),module.exports=ReactBrowserEventEmitter;

},{"./EventConstants":37,"./EventPluginHub":38,"./EventPluginRegistry":39,"./Object.assign":45,"./ReactEventEmitterMixin":78,"./ReactPerf":92,"./ViewportMetrics":122,"./isEventSupported":140}],50:[function(require,module,exports){
"use strict";function instantiateChild(e,n,t){var r=void 0===e[t];null!=n&&r&&(e[t]=instantiateReactComponent(n,null))}var ReactReconciler=require("./ReactReconciler"),instantiateReactComponent=require("./instantiateReactComponent"),shouldUpdateReactComponent=require("./shouldUpdateReactComponent"),traverseAllChildren=require("./traverseAllChildren"),warning=require("fbjs/lib/warning"),ReactChildReconciler={instantiateChildren:function(e,n,t){if(null==e)return null;var r={};return traverseAllChildren(e,instantiateChild,r),r},updateChildren:function(e,n,t,r){if(!n&&!e)return null;var i;for(i in n)if(n.hasOwnProperty(i)){var o=e&&e[i],a=o&&o._currentElement,l=n[i];if(null!=o&&shouldUpdateReactComponent(a,l))ReactReconciler.receiveComponent(o,l,t,r),n[i]=o;else{o&&ReactReconciler.unmountComponent(o,i);var c=instantiateReactComponent(l,null);n[i]=c}}for(i in e)!e.hasOwnProperty(i)||n&&n.hasOwnProperty(i)||ReactReconciler.unmountComponent(e[i]);return n},unmountChildren:function(e){for(var n in e)if(e.hasOwnProperty(n)){var t=e[n];ReactReconciler.unmountComponent(t)}}};module.exports=ReactChildReconciler;

},{"./ReactReconciler":97,"./instantiateReactComponent":139,"./shouldUpdateReactComponent":147,"./traverseAllChildren":148,"fbjs/lib/warning":174}],51:[function(require,module,exports){
"use strict";function escapeUserProvidedKey(e){return(""+e).replace(userProvidedKeyEscapeRegex,"//")}function ForEachBookKeeping(e,n){this.func=e,this.context=n,this.count=0}function forEachSingleChild(e,n,t){var r=e.func,o=e.context;r.call(o,n,e.count++)}function forEachChildren(e,n,t){if(null==e)return e;var r=ForEachBookKeeping.getPooled(n,t);traverseAllChildren(e,forEachSingleChild,r),ForEachBookKeeping.release(r)}function MapBookKeeping(e,n,t,r){this.result=e,this.keyPrefix=n,this.func=t,this.context=r,this.count=0}function mapSingleChildIntoContext(e,n,t){var r=e.result,o=e.keyPrefix,l=e.func,i=e.context,u=l.call(i,n,e.count++);Array.isArray(u)?mapIntoWithKeyPrefixInternal(u,r,t,emptyFunction.thatReturnsArgument):null!=u&&(ReactElement.isValidElement(u)&&(u=ReactElement.cloneAndReplaceKey(u,o+(u!==n?escapeUserProvidedKey(u.key||"")+"/":"")+t)),r.push(u))}function mapIntoWithKeyPrefixInternal(e,n,t,r,o){var l="";null!=t&&(l=escapeUserProvidedKey(t)+"/");var i=MapBookKeeping.getPooled(n,l,r,o);traverseAllChildren(e,mapSingleChildIntoContext,i),MapBookKeeping.release(i)}function mapChildren(e,n,t){if(null==e)return e;var r=[];return mapIntoWithKeyPrefixInternal(e,r,null,n,t),r}function forEachSingleChildDummy(e,n,t){return null}function countChildren(e,n){return traverseAllChildren(e,forEachSingleChildDummy,null)}function toArray(e){var n=[];return mapIntoWithKeyPrefixInternal(e,n,null,emptyFunction.thatReturnsArgument),n}var PooledClass=require("./PooledClass"),ReactElement=require("./ReactElement"),emptyFunction=require("fbjs/lib/emptyFunction"),traverseAllChildren=require("./traverseAllChildren"),twoArgumentPooler=PooledClass.twoArgumentPooler,fourArgumentPooler=PooledClass.fourArgumentPooler,userProvidedKeyEscapeRegex=/\/(?!\/)/g;ForEachBookKeeping.prototype.destructor=function(){this.func=null,this.context=null,this.count=0},PooledClass.addPoolingTo(ForEachBookKeeping,twoArgumentPooler),MapBookKeeping.prototype.destructor=function(){this.result=null,this.keyPrefix=null,this.func=null,this.context=null,this.count=0},PooledClass.addPoolingTo(MapBookKeeping,fourArgumentPooler);var ReactChildren={forEach:forEachChildren,map:mapChildren,mapIntoWithKeyPrefixInternal:mapIntoWithKeyPrefixInternal,count:countChildren,toArray:toArray};module.exports=ReactChildren;

},{"./PooledClass":46,"./ReactElement":73,"./traverseAllChildren":148,"fbjs/lib/emptyFunction":157}],52:[function(require,module,exports){
"use strict";function warnSetProps(){warnedSetProps||(warnedSetProps=!0)}function validateTypeDef(e,t,n){for(var i in t)t.hasOwnProperty(i)}function validateMethodOverride(e,t){var n=ReactClassInterface.hasOwnProperty(t)?ReactClassInterface[t]:null;ReactClassMixin.hasOwnProperty(t)&&(n!==SpecPolicy.OVERRIDE_BASE?invariant(!1):void 0),e.hasOwnProperty(t)&&(n!==SpecPolicy.DEFINE_MANY&&n!==SpecPolicy.DEFINE_MANY_MERGED?invariant(!1):void 0)}function mixSpecIntoComponent(e,t){if(t){"function"==typeof t?invariant(!1):void 0,ReactElement.isValidElement(t)?invariant(!1):void 0;var n=e.prototype;t.hasOwnProperty(MIXINS_KEY)&&RESERVED_SPEC_KEYS.mixins(e,t.mixins);for(var i in t)if(t.hasOwnProperty(i)&&i!==MIXINS_KEY){var o=t[i];if(validateMethodOverride(n,i),RESERVED_SPEC_KEYS.hasOwnProperty(i))RESERVED_SPEC_KEYS[i](e,o);else{var a=ReactClassInterface.hasOwnProperty(i),r=n.hasOwnProperty(i),c="function"==typeof o,p=c&&!a&&!r&&t.autobind!==!1;if(p)n.__reactAutoBindMap||(n.__reactAutoBindMap={}),n.__reactAutoBindMap[i]=o,n[i]=o;else if(r){var s=ReactClassInterface[i];!a||s!==SpecPolicy.DEFINE_MANY_MERGED&&s!==SpecPolicy.DEFINE_MANY?invariant(!1):void 0,s===SpecPolicy.DEFINE_MANY_MERGED?n[i]=createMergedResultFunction(n[i],o):s===SpecPolicy.DEFINE_MANY&&(n[i]=createChainedFunction(n[i],o))}else n[i]=o}}}}function mixStaticSpecIntoComponent(e,t){if(t)for(var n in t){var i=t[n];if(t.hasOwnProperty(n)){var o=n in RESERVED_SPEC_KEYS;o?invariant(!1):void 0;var a=n in e;a?invariant(!1):void 0,e[n]=i}}}function mergeIntoWithNoDuplicateKeys(e,t){e&&t&&"object"==typeof e&&"object"==typeof t?void 0:invariant(!1);for(var n in t)t.hasOwnProperty(n)&&(void 0!==e[n]?invariant(!1):void 0,e[n]=t[n]);return e}function createMergedResultFunction(e,t){return function(){var n=e.apply(this,arguments),i=t.apply(this,arguments);if(null==n)return i;if(null==i)return n;var o={};return mergeIntoWithNoDuplicateKeys(o,n),mergeIntoWithNoDuplicateKeys(o,i),o}}function createChainedFunction(e,t){return function(){e.apply(this,arguments),t.apply(this,arguments)}}function bindAutoBindMethod(e,t){var n=t.bind(e);return n}function bindAutoBindMethods(e){for(var t in e.__reactAutoBindMap)if(e.__reactAutoBindMap.hasOwnProperty(t)){var n=e.__reactAutoBindMap[t];e[t]=bindAutoBindMethod(e,n)}}var ReactComponent=require("./ReactComponent"),ReactElement=require("./ReactElement"),ReactPropTypeLocations=require("./ReactPropTypeLocations"),ReactPropTypeLocationNames=require("./ReactPropTypeLocationNames"),ReactNoopUpdateQueue=require("./ReactNoopUpdateQueue"),assign=require("./Object.assign"),emptyObject=require("fbjs/lib/emptyObject"),invariant=require("fbjs/lib/invariant"),keyMirror=require("fbjs/lib/keyMirror"),keyOf=require("fbjs/lib/keyOf"),warning=require("fbjs/lib/warning"),MIXINS_KEY=keyOf({mixins:null}),SpecPolicy=keyMirror({DEFINE_ONCE:null,DEFINE_MANY:null,OVERRIDE_BASE:null,DEFINE_MANY_MERGED:null}),injectedMixins=[],warnedSetProps=!1,ReactClassInterface={mixins:SpecPolicy.DEFINE_MANY,statics:SpecPolicy.DEFINE_MANY,propTypes:SpecPolicy.DEFINE_MANY,contextTypes:SpecPolicy.DEFINE_MANY,childContextTypes:SpecPolicy.DEFINE_MANY,getDefaultProps:SpecPolicy.DEFINE_MANY_MERGED,getInitialState:SpecPolicy.DEFINE_MANY_MERGED,getChildContext:SpecPolicy.DEFINE_MANY_MERGED,render:SpecPolicy.DEFINE_ONCE,componentWillMount:SpecPolicy.DEFINE_MANY,componentDidMount:SpecPolicy.DEFINE_MANY,componentWillReceiveProps:SpecPolicy.DEFINE_MANY,shouldComponentUpdate:SpecPolicy.DEFINE_ONCE,componentWillUpdate:SpecPolicy.DEFINE_MANY,componentDidUpdate:SpecPolicy.DEFINE_MANY,componentWillUnmount:SpecPolicy.DEFINE_MANY,updateComponent:SpecPolicy.OVERRIDE_BASE},RESERVED_SPEC_KEYS={displayName:function(e,t){e.displayName=t},mixins:function(e,t){if(t)for(var n=0;n<t.length;n++)mixSpecIntoComponent(e,t[n])},childContextTypes:function(e,t){e.childContextTypes=assign({},e.childContextTypes,t)},contextTypes:function(e,t){e.contextTypes=assign({},e.contextTypes,t)},getDefaultProps:function(e,t){e.getDefaultProps?e.getDefaultProps=createMergedResultFunction(e.getDefaultProps,t):e.getDefaultProps=t},propTypes:function(e,t){e.propTypes=assign({},e.propTypes,t)},statics:function(e,t){mixStaticSpecIntoComponent(e,t)},autobind:function(){}},ReactClassMixin={replaceState:function(e,t){this.updater.enqueueReplaceState(this,e),t&&this.updater.enqueueCallback(this,t)},isMounted:function(){return this.updater.isMounted(this)},setProps:function(e,t){this.updater.enqueueSetProps(this,e),t&&this.updater.enqueueCallback(this,t)},replaceProps:function(e,t){this.updater.enqueueReplaceProps(this,e),t&&this.updater.enqueueCallback(this,t)}},ReactClassComponent=function(){};assign(ReactClassComponent.prototype,ReactComponent.prototype,ReactClassMixin);var ReactClass={createClass:function(e){var t=function(e,t,n){this.__reactAutoBindMap&&bindAutoBindMethods(this),this.props=e,this.context=t,this.refs=emptyObject,this.updater=n||ReactNoopUpdateQueue,this.state=null;var i=this.getInitialState?this.getInitialState():null;"object"!=typeof i||Array.isArray(i)?invariant(!1):void 0,this.state=i};t.prototype=new ReactClassComponent,t.prototype.constructor=t,injectedMixins.forEach(mixSpecIntoComponent.bind(null,t)),mixSpecIntoComponent(t,e),t.getDefaultProps&&(t.defaultProps=t.getDefaultProps()),t.prototype.render?void 0:invariant(!1);for(var n in ReactClassInterface)t.prototype[n]||(t.prototype[n]=null);return t},injection:{injectMixin:function(e){injectedMixins.push(e)}}};module.exports=ReactClass;

},{"./Object.assign":45,"./ReactComponent":53,"./ReactElement":73,"./ReactNoopUpdateQueue":90,"./ReactPropTypeLocationNames":93,"./ReactPropTypeLocations":94,"fbjs/lib/emptyObject":158,"fbjs/lib/invariant":165,"fbjs/lib/keyMirror":168,"fbjs/lib/keyOf":169,"fbjs/lib/warning":174}],53:[function(require,module,exports){
"use strict";function ReactComponent(e,t,n){this.props=e,this.context=t,this.refs=emptyObject,this.updater=n||ReactNoopUpdateQueue}var ReactNoopUpdateQueue=require("./ReactNoopUpdateQueue"),canDefineProperty=require("./canDefineProperty"),emptyObject=require("fbjs/lib/emptyObject"),invariant=require("fbjs/lib/invariant"),warning=require("fbjs/lib/warning");ReactComponent.prototype.isReactComponent={},ReactComponent.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e?invariant(!1):void 0,this.updater.enqueueSetState(this,e),t&&this.updater.enqueueCallback(this,t)},ReactComponent.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this),e&&this.updater.enqueueCallback(this,e)};var deprecatedAPIs,defineDeprecationWarning,fnName;module.exports=ReactComponent;

},{"./ReactNoopUpdateQueue":90,"./canDefineProperty":125,"fbjs/lib/emptyObject":158,"fbjs/lib/invariant":165,"fbjs/lib/warning":174}],54:[function(require,module,exports){
"use strict";var ReactDOMIDOperations=require("./ReactDOMIDOperations"),ReactMount=require("./ReactMount"),ReactComponentBrowserEnvironment={processChildrenUpdates:ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,replaceNodeWithMarkupByID:ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,unmountIDFromEnvironment:function(e){ReactMount.purgeID(e)}};module.exports=ReactComponentBrowserEnvironment;

},{"./ReactDOMIDOperations":63,"./ReactMount":86}],55:[function(require,module,exports){
"use strict";var invariant=require("fbjs/lib/invariant"),injected=!1,ReactComponentEnvironment={unmountIDFromEnvironment:null,replaceNodeWithMarkupByID:null,processChildrenUpdates:null,injection:{injectEnvironment:function(n){injected?invariant(!1):void 0,ReactComponentEnvironment.unmountIDFromEnvironment=n.unmountIDFromEnvironment,ReactComponentEnvironment.replaceNodeWithMarkupByID=n.replaceNodeWithMarkupByID,ReactComponentEnvironment.processChildrenUpdates=n.processChildrenUpdates,injected=!0}}};module.exports=ReactComponentEnvironment;

},{"fbjs/lib/invariant":165}],56:[function(require,module,exports){
"use strict";function getDeclarationErrorAddendum(e){var t=e._currentElement._owner||null;if(t){var n=t.getName();if(n)return" Check the render method of `"+n+"`."}return""}function StatelessComponent(e){}var ReactComponentEnvironment=require("./ReactComponentEnvironment"),ReactCurrentOwner=require("./ReactCurrentOwner"),ReactElement=require("./ReactElement"),ReactInstanceMap=require("./ReactInstanceMap"),ReactPerf=require("./ReactPerf"),ReactPropTypeLocations=require("./ReactPropTypeLocations"),ReactPropTypeLocationNames=require("./ReactPropTypeLocationNames"),ReactReconciler=require("./ReactReconciler"),ReactUpdateQueue=require("./ReactUpdateQueue"),assign=require("./Object.assign"),emptyObject=require("fbjs/lib/emptyObject"),invariant=require("fbjs/lib/invariant"),shouldUpdateReactComponent=require("./shouldUpdateReactComponent"),warning=require("fbjs/lib/warning");StatelessComponent.prototype.render=function(){var e=ReactInstanceMap.get(this)._currentElement.type;return e(this.props,this.context,this.updater)};var nextMountID=1,ReactCompositeComponentMixin={construct:function(e){this._currentElement=e,this._rootNodeID=null,this._instance=null,this._pendingElement=null,this._pendingStateQueue=null,this._pendingReplaceState=!1,this._pendingForceUpdate=!1,this._renderedComponent=null,this._context=null,this._mountOrder=0,this._topLevelWrapper=null,this._pendingCallbacks=null},mountComponent:function(e,t,n){this._context=n,this._mountOrder=nextMountID++,this._rootNodeID=e;var o,i,r=this._processProps(this._currentElement.props),a=this._processContext(n),s=this._currentElement.type,c="prototype"in s;c&&(o=new s(r,a,ReactUpdateQueue)),(!c||null===o||o===!1||ReactElement.isValidElement(o))&&(i=o,o=new StatelessComponent(s)),o.props=r,o.context=a,o.refs=emptyObject,o.updater=ReactUpdateQueue,this._instance=o,ReactInstanceMap.set(o,this);var p=o.state;void 0===p&&(o.state=p=null),"object"!=typeof p||Array.isArray(p)?invariant(!1):void 0,this._pendingStateQueue=null,this._pendingReplaceState=!1,this._pendingForceUpdate=!1,o.componentWillMount&&(o.componentWillMount(),this._pendingStateQueue&&(o.state=this._processPendingState(o.props,o.context))),void 0===i&&(i=this._renderValidatedComponent()),this._renderedComponent=this._instantiateReactComponent(i);var u=ReactReconciler.mountComponent(this._renderedComponent,e,t,this._processChildContext(n));return o.componentDidMount&&t.getReactMountReady().enqueue(o.componentDidMount,o),u},unmountComponent:function(){var e=this._instance;e.componentWillUnmount&&e.componentWillUnmount(),ReactReconciler.unmountComponent(this._renderedComponent),this._renderedComponent=null,this._instance=null,this._pendingStateQueue=null,this._pendingReplaceState=!1,this._pendingForceUpdate=!1,this._pendingCallbacks=null,this._pendingElement=null,this._context=null,this._rootNodeID=null,this._topLevelWrapper=null,ReactInstanceMap.remove(e)},_maskContext:function(e){var t=null,n=this._currentElement.type,o=n.contextTypes;if(!o)return emptyObject;t={};for(var i in o)t[i]=e[i];return t},_processContext:function(e){var t=this._maskContext(e);return t},_processChildContext:function(e){var t=this._currentElement.type,n=this._instance,o=n.getChildContext&&n.getChildContext();if(o){"object"!=typeof t.childContextTypes?invariant(!1):void 0;for(var i in o)i in t.childContextTypes?void 0:invariant(!1);return assign({},e,o)}return e},_processProps:function(e){return e},_checkPropTypes:function(e,t,n){var o=this.getName();for(var i in e)if(e.hasOwnProperty(i)){var r;try{"function"!=typeof e[i]?invariant(!1):void 0,r=e[i](t,i,o,n)}catch(a){r=a}if(r instanceof Error){getDeclarationErrorAddendum(this);n===ReactPropTypeLocations.prop}}},receiveComponent:function(e,t,n){var o=this._currentElement,i=this._context;this._pendingElement=null,this.updateComponent(t,o,e,i,n)},performUpdateIfNecessary:function(e){null!=this._pendingElement&&ReactReconciler.receiveComponent(this,this._pendingElement||this._currentElement,e,this._context),(null!==this._pendingStateQueue||this._pendingForceUpdate)&&this.updateComponent(e,this._currentElement,this._currentElement,this._context,this._context)},updateComponent:function(e,t,n,o,i){var r,a=this._instance,s=this._context===i?a.context:this._processContext(i);t===n?r=n.props:(r=this._processProps(n.props),a.componentWillReceiveProps&&a.componentWillReceiveProps(r,s));var c=this._processPendingState(r,s),p=this._pendingForceUpdate||!a.shouldComponentUpdate||a.shouldComponentUpdate(r,c,s);p?(this._pendingForceUpdate=!1,this._performComponentUpdate(n,r,c,s,e,i)):(this._currentElement=n,this._context=i,a.props=r,a.state=c,a.context=s)},_processPendingState:function(e,t){var n=this._instance,o=this._pendingStateQueue,i=this._pendingReplaceState;if(this._pendingReplaceState=!1,this._pendingStateQueue=null,!o)return n.state;if(i&&1===o.length)return o[0];for(var r=assign({},i?o[0]:n.state),a=i?1:0;a<o.length;a++){var s=o[a];assign(r,"function"==typeof s?s.call(n,r,e,t):s)}return r},_performComponentUpdate:function(e,t,n,o,i,r){var a,s,c,p=this._instance,u=Boolean(p.componentDidUpdate);u&&(a=p.props,s=p.state,c=p.context),p.componentWillUpdate&&p.componentWillUpdate(t,n,o),this._currentElement=e,this._context=r,p.props=t,p.state=n,p.context=o,this._updateRenderedComponent(i,r),u&&i.getReactMountReady().enqueue(p.componentDidUpdate.bind(p,a,s,c),p)},_updateRenderedComponent:function(e,t){var n=this._renderedComponent,o=n._currentElement,i=this._renderValidatedComponent();if(shouldUpdateReactComponent(o,i))ReactReconciler.receiveComponent(n,i,e,this._processChildContext(t));else{var r=this._rootNodeID,a=n._rootNodeID;ReactReconciler.unmountComponent(n),this._renderedComponent=this._instantiateReactComponent(i);var s=ReactReconciler.mountComponent(this._renderedComponent,r,e,this._processChildContext(t));this._replaceNodeWithMarkupByID(a,s)}},_replaceNodeWithMarkupByID:function(e,t){ReactComponentEnvironment.replaceNodeWithMarkupByID(e,t)},_renderValidatedComponentWithoutOwnerOrContext:function(){var e=this._instance,t=e.render();return t},_renderValidatedComponent:function(){var e;ReactCurrentOwner.current=this;try{e=this._renderValidatedComponentWithoutOwnerOrContext()}finally{ReactCurrentOwner.current=null}return null===e||e===!1||ReactElement.isValidElement(e)?void 0:invariant(!1),e},attachRef:function(e,t){var n=this.getPublicInstance();null==n?invariant(!1):void 0;var o=t.getPublicInstance(),i=n.refs===emptyObject?n.refs={}:n.refs;i[e]=o},detachRef:function(e){var t=this.getPublicInstance().refs;delete t[e]},getName:function(){var e=this._currentElement.type,t=this._instance&&this._instance.constructor;return e.displayName||t&&t.displayName||e.name||t&&t.name||null},getPublicInstance:function(){var e=this._instance;return e instanceof StatelessComponent?null:e},_instantiateReactComponent:null};ReactPerf.measureMethods(ReactCompositeComponentMixin,"ReactCompositeComponent",{mountComponent:"mountComponent",updateComponent:"updateComponent",_renderValidatedComponent:"_renderValidatedComponent"});var ReactCompositeComponent={Mixin:ReactCompositeComponentMixin};module.exports=ReactCompositeComponent;

},{"./Object.assign":45,"./ReactComponentEnvironment":55,"./ReactCurrentOwner":57,"./ReactElement":73,"./ReactInstanceMap":83,"./ReactPerf":92,"./ReactPropTypeLocationNames":93,"./ReactPropTypeLocations":94,"./ReactReconciler":97,"./ReactUpdateQueue":103,"./shouldUpdateReactComponent":147,"fbjs/lib/emptyObject":158,"fbjs/lib/invariant":165,"fbjs/lib/warning":174}],57:[function(require,module,exports){
"use strict";var ReactCurrentOwner={current:null};module.exports=ReactCurrentOwner;

},{}],58:[function(require,module,exports){
"use strict";var ReactCurrentOwner=require("./ReactCurrentOwner"),ReactDOMTextComponent=require("./ReactDOMTextComponent"),ReactDefaultInjection=require("./ReactDefaultInjection"),ReactInstanceHandles=require("./ReactInstanceHandles"),ReactMount=require("./ReactMount"),ReactPerf=require("./ReactPerf"),ReactReconciler=require("./ReactReconciler"),ReactUpdates=require("./ReactUpdates"),ReactVersion=require("./ReactVersion"),findDOMNode=require("./findDOMNode"),renderSubtreeIntoContainer=require("./renderSubtreeIntoContainer"),warning=require("fbjs/lib/warning");ReactDefaultInjection.inject();var render=ReactPerf.measure("React","render",ReactMount.render),React={findDOMNode:findDOMNode,render:render,unmountComponentAtNode:ReactMount.unmountComponentAtNode,version:ReactVersion,unstable_batchedUpdates:ReactUpdates.batchedUpdates,unstable_renderSubtreeIntoContainer:renderSubtreeIntoContainer};"undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject&&__REACT_DEVTOOLS_GLOBAL_HOOK__.inject({CurrentOwner:ReactCurrentOwner,InstanceHandles:ReactInstanceHandles,Mount:ReactMount,Reconciler:ReactReconciler,TextComponent:ReactDOMTextComponent});var ExecutionEnvironment,ieCompatibilityMode,expectedFeatures,i;module.exports=React;

},{"./ReactCurrentOwner":57,"./ReactDOMTextComponent":69,"./ReactDefaultInjection":72,"./ReactInstanceHandles":82,"./ReactMount":86,"./ReactPerf":92,"./ReactReconciler":97,"./ReactUpdates":104,"./ReactVersion":105,"./findDOMNode":129,"./renderSubtreeIntoContainer":144,"fbjs/lib/warning":174}],59:[function(require,module,exports){
"use strict";var mouseListenerNames={onClick:!0,onDoubleClick:!0,onMouseDown:!0,onMouseMove:!0,onMouseUp:!0,onClickCapture:!0,onDoubleClickCapture:!0,onMouseDownCapture:!0,onMouseMoveCapture:!0,onMouseUpCapture:!0},ReactDOMButton={getNativeProps:function(e,o,n){if(!o.disabled)return o;var t={};for(var u in o)o.hasOwnProperty(u)&&!mouseListenerNames[u]&&(t[u]=o[u]);return t}};module.exports=ReactDOMButton;

},{}],60:[function(require,module,exports){
"use strict";function getDeclarationErrorAddendum(e){if(e){var t=e._currentElement._owner||null;if(t){var r=t.getName();if(r)return" This DOM node was rendered by `"+r+"`."}}return""}function legacyGetDOMNode(){return this}function legacyIsMounted(){var e=this._reactInternalComponent;return!!e}function legacySetStateEtc(){}function legacySetProps(e,t){var r=this._reactInternalComponent;r&&(ReactUpdateQueue.enqueueSetPropsInternal(r,e),t&&ReactUpdateQueue.enqueueCallbackInternal(r,t))}function legacyReplaceProps(e,t){var r=this._reactInternalComponent;r&&(ReactUpdateQueue.enqueueReplacePropsInternal(r,e),t&&ReactUpdateQueue.enqueueCallbackInternal(r,t))}function friendlyStringify(e){if("object"==typeof e){if(Array.isArray(e))return"["+e.map(friendlyStringify).join(", ")+"]";var t=[];for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=/^[a-z$_][\w$_]*$/i.test(r)?r:JSON.stringify(r);t.push(n+": "+friendlyStringify(e[r]))}return"{"+t.join(", ")+"}"}return"string"==typeof e?JSON.stringify(e):"function"==typeof e?"[function object]":String(e)}function checkAndWarnForMutatedStyle(e,t,r){if(null!=e&&null!=t&&!shallowEqual(e,t)){var n,a=r._tag,o=r._currentElement._owner;o&&(n=o.getName());var i=n+"|"+a;styleMutationWarning.hasOwnProperty(i)||(styleMutationWarning[i]=!0)}}function assertValidProps(e,t){t&&(null!=t.dangerouslySetInnerHTML&&(null!=t.children?invariant(!1):void 0,"object"==typeof t.dangerouslySetInnerHTML&&HTML in t.dangerouslySetInnerHTML?void 0:invariant(!1)),null!=t.style&&"object"!=typeof t.style?invariant(!1):void 0)}function enqueuePutListener(e,t,r,n){var a=ReactMount.findReactContainerForID(e);if(a){var o=a.nodeType===ELEMENT_NODE_TYPE?a.ownerDocument:a;listenTo(t,o)}n.getReactMountReady().enqueue(putListener,{id:e,registrationName:t,listener:r})}function putListener(){var e=this;ReactBrowserEventEmitter.putListener(e.id,e.registrationName,e.listener)}function trapBubbledEventsLocal(){var e=this;e._rootNodeID?void 0:invariant(!1);var t=ReactMount.getNode(e._rootNodeID);switch(t?void 0:invariant(!1),e._tag){case"iframe":e._wrapperState.listeners=[ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad,"load",t)];break;case"video":case"audio":e._wrapperState.listeners=[];for(var r in mediaEvents)mediaEvents.hasOwnProperty(r)&&e._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes[r],mediaEvents[r],t));break;case"img":e._wrapperState.listeners=[ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topError,"error",t),ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad,"load",t)];break;case"form":e._wrapperState.listeners=[ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topReset,"reset",t),ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit,"submit",t)]}}function mountReadyInputWrapper(){ReactDOMInput.mountReadyWrapper(this)}function postUpdateSelectWrapper(){ReactDOMSelect.postUpdateWrapper(this)}function validateDangerousTag(e){hasOwnProperty.call(validatedTagCache,e)||(VALID_TAG_REGEX.test(e)?void 0:invariant(!1),validatedTagCache[e]=!0)}function processChildContextDev(e,t){e=assign({},e);var r=e[validateDOMNesting.ancestorInfoContextKey];return e[validateDOMNesting.ancestorInfoContextKey]=validateDOMNesting.updatedAncestorInfo(r,t._tag,t),e}function isCustomComponent(e,t){return e.indexOf("-")>=0||null!=t.is}function ReactDOMComponent(e){validateDangerousTag(e),this._tag=e.toLowerCase(),this._renderedChildren=null,this._previousStyle=null,this._previousStyleCopy=null,this._rootNodeID=null,this._wrapperState=null,this._topLevelWrapper=null,this._nodeWithLegacyProperties=null}var AutoFocusUtils=require("./AutoFocusUtils"),CSSPropertyOperations=require("./CSSPropertyOperations"),DOMProperty=require("./DOMProperty"),DOMPropertyOperations=require("./DOMPropertyOperations"),EventConstants=require("./EventConstants"),ReactBrowserEventEmitter=require("./ReactBrowserEventEmitter"),ReactComponentBrowserEnvironment=require("./ReactComponentBrowserEnvironment"),ReactDOMButton=require("./ReactDOMButton"),ReactDOMInput=require("./ReactDOMInput"),ReactDOMOption=require("./ReactDOMOption"),ReactDOMSelect=require("./ReactDOMSelect"),ReactDOMTextarea=require("./ReactDOMTextarea"),ReactMount=require("./ReactMount"),ReactMultiChild=require("./ReactMultiChild"),ReactPerf=require("./ReactPerf"),ReactUpdateQueue=require("./ReactUpdateQueue"),assign=require("./Object.assign"),canDefineProperty=require("./canDefineProperty"),escapeTextContentForBrowser=require("./escapeTextContentForBrowser"),invariant=require("fbjs/lib/invariant"),isEventSupported=require("./isEventSupported"),keyOf=require("fbjs/lib/keyOf"),setInnerHTML=require("./setInnerHTML"),setTextContent=require("./setTextContent"),shallowEqual=require("fbjs/lib/shallowEqual"),validateDOMNesting=require("./validateDOMNesting"),warning=require("fbjs/lib/warning"),deleteListener=ReactBrowserEventEmitter.deleteListener,listenTo=ReactBrowserEventEmitter.listenTo,registrationNameModules=ReactBrowserEventEmitter.registrationNameModules,CONTENT_TYPES={string:!0,number:!0},CHILDREN=keyOf({children:null}),STYLE=keyOf({style:null}),HTML=keyOf({__html:null}),ELEMENT_NODE_TYPE=1,legacyPropsDescriptor,styleMutationWarning={},mediaEvents={topAbort:"abort",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topLoadedData:"loadeddata",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topSeeked:"seeked",topSeeking:"seeking",topStalled:"stalled",topSuspend:"suspend",topTimeUpdate:"timeupdate",topVolumeChange:"volumechange",topWaiting:"waiting"},omittedCloseTags={area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0},newlineEatingTags={listing:!0,pre:!0,textarea:!0},voidElementTags=assign({menuitem:!0},omittedCloseTags),VALID_TAG_REGEX=/^[a-zA-Z][a-zA-Z:_\.\-\d]*$/,validatedTagCache={},hasOwnProperty={}.hasOwnProperty;ReactDOMComponent.displayName="ReactDOMComponent",ReactDOMComponent.Mixin={construct:function(e){this._currentElement=e},mountComponent:function(e,t,r){this._rootNodeID=e;var n=this._currentElement.props;switch(this._tag){case"iframe":case"img":case"form":case"video":case"audio":this._wrapperState={listeners:null},t.getReactMountReady().enqueue(trapBubbledEventsLocal,this);break;case"button":n=ReactDOMButton.getNativeProps(this,n,r);break;case"input":ReactDOMInput.mountWrapper(this,n,r),n=ReactDOMInput.getNativeProps(this,n,r);break;case"option":ReactDOMOption.mountWrapper(this,n,r),n=ReactDOMOption.getNativeProps(this,n,r);break;case"select":ReactDOMSelect.mountWrapper(this,n,r),n=ReactDOMSelect.getNativeProps(this,n,r),r=ReactDOMSelect.processChildContext(this,n,r);break;case"textarea":ReactDOMTextarea.mountWrapper(this,n,r),n=ReactDOMTextarea.getNativeProps(this,n,r)}assertValidProps(this,n);var a;if(t.useCreateElement){var o=r[ReactMount.ownerDocumentContextKey],i=o.createElement(this._currentElement.type);DOMPropertyOperations.setAttributeForID(i,this._rootNodeID),ReactMount.getID(i),this._updateDOMProperties({},n,t,i),this._createInitialChildren(t,n,r,i),a=i}else{var s=this._createOpenTagMarkupAndPutListeners(t,n),p=this._createContentMarkup(t,n,r);a=!p&&omittedCloseTags[this._tag]?s+"/>":s+">"+p+"</"+this._currentElement.type+">"}switch(this._tag){case"input":t.getReactMountReady().enqueue(mountReadyInputWrapper,this);case"button":case"select":case"textarea":n.autoFocus&&t.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent,this)}return a},_createOpenTagMarkupAndPutListeners:function(e,t){var r="<"+this._currentElement.type;for(var n in t)if(t.hasOwnProperty(n)){var a=t[n];if(null!=a)if(registrationNameModules.hasOwnProperty(n))a&&enqueuePutListener(this._rootNodeID,n,a,e);else{n===STYLE&&(a&&(a=this._previousStyleCopy=assign({},t.style)),a=CSSPropertyOperations.createMarkupForStyles(a));var o=null;null!=this._tag&&isCustomComponent(this._tag,t)?n!==CHILDREN&&(o=DOMPropertyOperations.createMarkupForCustomAttribute(n,a)):o=DOMPropertyOperations.createMarkupForProperty(n,a),o&&(r+=" "+o)}}if(e.renderToStaticMarkup)return r;var i=DOMPropertyOperations.createMarkupForID(this._rootNodeID);return r+" "+i},_createContentMarkup:function(e,t,r){var n="",a=t.dangerouslySetInnerHTML;if(null!=a)null!=a.__html&&(n=a.__html);else{var o=CONTENT_TYPES[typeof t.children]?t.children:null,i=null!=o?null:t.children;if(null!=o)n=escapeTextContentForBrowser(o);else if(null!=i){var s=this.mountChildren(i,e,r);n=s.join("")}}return newlineEatingTags[this._tag]&&"\n"===n.charAt(0)?"\n"+n:n},_createInitialChildren:function(e,t,r,n){var a=t.dangerouslySetInnerHTML;if(null!=a)null!=a.__html&&setInnerHTML(n,a.__html);else{var o=CONTENT_TYPES[typeof t.children]?t.children:null,i=null!=o?null:t.children;if(null!=o)setTextContent(n,o);else if(null!=i)for(var s=this.mountChildren(i,e,r),p=0;p<s.length;p++)n.appendChild(s[p])}},receiveComponent:function(e,t,r){var n=this._currentElement;this._currentElement=e,this.updateComponent(t,n,e,r)},updateComponent:function(e,t,r,n){var a=t.props,o=this._currentElement.props;switch(this._tag){case"button":a=ReactDOMButton.getNativeProps(this,a),o=ReactDOMButton.getNativeProps(this,o);break;case"input":ReactDOMInput.updateWrapper(this),a=ReactDOMInput.getNativeProps(this,a),o=ReactDOMInput.getNativeProps(this,o);break;case"option":a=ReactDOMOption.getNativeProps(this,a),o=ReactDOMOption.getNativeProps(this,o);break;case"select":a=ReactDOMSelect.getNativeProps(this,a),o=ReactDOMSelect.getNativeProps(this,o);break;case"textarea":ReactDOMTextarea.updateWrapper(this),a=ReactDOMTextarea.getNativeProps(this,a),o=ReactDOMTextarea.getNativeProps(this,o)}assertValidProps(this,o),this._updateDOMProperties(a,o,e,null),this._updateDOMChildren(a,o,e,n),!canDefineProperty&&this._nodeWithLegacyProperties&&(this._nodeWithLegacyProperties.props=o),"select"===this._tag&&e.getReactMountReady().enqueue(postUpdateSelectWrapper,this)},_updateDOMProperties:function(e,t,r,n){var a,o,i;for(a in e)if(!t.hasOwnProperty(a)&&e.hasOwnProperty(a))if(a===STYLE){var s=this._previousStyleCopy;for(o in s)s.hasOwnProperty(o)&&(i=i||{},i[o]="");this._previousStyleCopy=null}else registrationNameModules.hasOwnProperty(a)?e[a]&&deleteListener(this._rootNodeID,a):(DOMProperty.properties[a]||DOMProperty.isCustomAttribute(a))&&(n||(n=ReactMount.getNode(this._rootNodeID)),DOMPropertyOperations.deleteValueForProperty(n,a));for(a in t){var p=t[a],u=a===STYLE?this._previousStyleCopy:e[a];if(t.hasOwnProperty(a)&&p!==u)if(a===STYLE)if(p?p=this._previousStyleCopy=assign({},p):this._previousStyleCopy=null,u){for(o in u)!u.hasOwnProperty(o)||p&&p.hasOwnProperty(o)||(i=i||{},i[o]="");for(o in p)p.hasOwnProperty(o)&&u[o]!==p[o]&&(i=i||{},i[o]=p[o])}else i=p;else registrationNameModules.hasOwnProperty(a)?p?enqueuePutListener(this._rootNodeID,a,p,r):u&&deleteListener(this._rootNodeID,a):isCustomComponent(this._tag,t)?(n||(n=ReactMount.getNode(this._rootNodeID)),a===CHILDREN&&(p=null),DOMPropertyOperations.setValueForAttribute(n,a,p)):(DOMProperty.properties[a]||DOMProperty.isCustomAttribute(a))&&(n||(n=ReactMount.getNode(this._rootNodeID)),null!=p?DOMPropertyOperations.setValueForProperty(n,a,p):DOMPropertyOperations.deleteValueForProperty(n,a))}i&&(n||(n=ReactMount.getNode(this._rootNodeID)),CSSPropertyOperations.setValueForStyles(n,i))},_updateDOMChildren:function(e,t,r,n){var a=CONTENT_TYPES[typeof e.children]?e.children:null,o=CONTENT_TYPES[typeof t.children]?t.children:null,i=e.dangerouslySetInnerHTML&&e.dangerouslySetInnerHTML.__html,s=t.dangerouslySetInnerHTML&&t.dangerouslySetInnerHTML.__html,p=null!=a?null:e.children,u=null!=o?null:t.children,l=null!=a||null!=i,c=null!=o||null!=s;null!=p&&null==u?this.updateChildren(null,r,n):l&&!c&&this.updateTextContent(""),null!=o?a!==o&&this.updateTextContent(""+o):null!=s?i!==s&&this.updateMarkup(""+s):null!=u&&this.updateChildren(u,r,n)},unmountComponent:function(){switch(this._tag){case"iframe":case"img":case"form":case"video":case"audio":var e=this._wrapperState.listeners;if(e)for(var t=0;t<e.length;t++)e[t].remove();break;case"input":ReactDOMInput.unmountWrapper(this);break;case"html":case"head":case"body":invariant(!1)}if(this.unmountChildren(),ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID),ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID),this._rootNodeID=null,this._wrapperState=null,this._nodeWithLegacyProperties){var r=this._nodeWithLegacyProperties;r._reactInternalComponent=null,this._nodeWithLegacyProperties=null}},getPublicInstance:function(){if(!this._nodeWithLegacyProperties){var e=ReactMount.getNode(this._rootNodeID);e._reactInternalComponent=this,e.getDOMNode=legacyGetDOMNode,e.isMounted=legacyIsMounted,e.setState=legacySetStateEtc,e.replaceState=legacySetStateEtc,e.forceUpdate=legacySetStateEtc,e.setProps=legacySetProps,e.replaceProps=legacyReplaceProps,e.props=this._currentElement.props,this._nodeWithLegacyProperties=e}return this._nodeWithLegacyProperties}},ReactPerf.measureMethods(ReactDOMComponent,"ReactDOMComponent",{mountComponent:"mountComponent",updateComponent:"updateComponent"}),assign(ReactDOMComponent.prototype,ReactDOMComponent.Mixin,ReactMultiChild.Mixin),module.exports=ReactDOMComponent;

},{"./AutoFocusUtils":24,"./CSSPropertyOperations":27,"./DOMProperty":32,"./DOMPropertyOperations":33,"./EventConstants":37,"./Object.assign":45,"./ReactBrowserEventEmitter":49,"./ReactComponentBrowserEnvironment":54,"./ReactDOMButton":59,"./ReactDOMInput":64,"./ReactDOMOption":65,"./ReactDOMSelect":66,"./ReactDOMTextarea":70,"./ReactMount":86,"./ReactMultiChild":87,"./ReactPerf":92,"./ReactUpdateQueue":103,"./canDefineProperty":125,"./escapeTextContentForBrowser":128,"./isEventSupported":140,"./setInnerHTML":145,"./setTextContent":146,"./validateDOMNesting":149,"fbjs/lib/invariant":165,"fbjs/lib/keyOf":169,"fbjs/lib/shallowEqual":172,"fbjs/lib/warning":174}],61:[function(require,module,exports){
"use strict";function createDOMFactory(e){return ReactElement.createFactory(e)}var ReactElement=require("./ReactElement"),ReactElementValidator=require("./ReactElementValidator"),mapObject=require("fbjs/lib/mapObject"),ReactDOMFactories=mapObject({a:"a",abbr:"abbr",address:"address",area:"area",article:"article",aside:"aside",audio:"audio",b:"b",base:"base",bdi:"bdi",bdo:"bdo",big:"big",blockquote:"blockquote",body:"body",br:"br",button:"button",canvas:"canvas",caption:"caption",cite:"cite",code:"code",col:"col",colgroup:"colgroup",data:"data",datalist:"datalist",dd:"dd",del:"del",details:"details",dfn:"dfn",dialog:"dialog",div:"div",dl:"dl",dt:"dt",em:"em",embed:"embed",fieldset:"fieldset",figcaption:"figcaption",figure:"figure",footer:"footer",form:"form",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",head:"head",header:"header",hgroup:"hgroup",hr:"hr",html:"html",i:"i",iframe:"iframe",img:"img",input:"input",ins:"ins",kbd:"kbd",keygen:"keygen",label:"label",legend:"legend",li:"li",link:"link",main:"main",map:"map",mark:"mark",menu:"menu",menuitem:"menuitem",meta:"meta",meter:"meter",nav:"nav",noscript:"noscript",object:"object",ol:"ol",optgroup:"optgroup",option:"option",output:"output",p:"p",param:"param",picture:"picture",pre:"pre",progress:"progress",q:"q",rp:"rp",rt:"rt",ruby:"ruby",s:"s",samp:"samp",script:"script",section:"section",select:"select",small:"small",source:"source",span:"span",strong:"strong",style:"style",sub:"sub",summary:"summary",sup:"sup",table:"table",tbody:"tbody",td:"td",textarea:"textarea",tfoot:"tfoot",th:"th",thead:"thead",time:"time",title:"title",tr:"tr",track:"track",u:"u",ul:"ul","var":"var",video:"video",wbr:"wbr",circle:"circle",clipPath:"clipPath",defs:"defs",ellipse:"ellipse",g:"g",image:"image",line:"line",linearGradient:"linearGradient",mask:"mask",path:"path",pattern:"pattern",polygon:"polygon",polyline:"polyline",radialGradient:"radialGradient",rect:"rect",stop:"stop",svg:"svg",text:"text",tspan:"tspan"},createDOMFactory);module.exports=ReactDOMFactories;

},{"./ReactElement":73,"./ReactElementValidator":74,"fbjs/lib/mapObject":170}],62:[function(require,module,exports){
"use strict";var ReactDOMFeatureFlags={useCreateElement:!1};module.exports=ReactDOMFeatureFlags;

},{}],63:[function(require,module,exports){
"use strict";var DOMChildrenOperations=require("./DOMChildrenOperations"),DOMPropertyOperations=require("./DOMPropertyOperations"),ReactMount=require("./ReactMount"),ReactPerf=require("./ReactPerf"),invariant=require("fbjs/lib/invariant"),INVALID_PROPERTY_ERRORS={dangerouslySetInnerHTML:"`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.",style:"`style` must be set using `updateStylesByID()`."},ReactDOMIDOperations={updatePropertyByID:function(e,r,t){var a=ReactMount.getNode(e);INVALID_PROPERTY_ERRORS.hasOwnProperty(r)?invariant(!1):void 0,null!=t?DOMPropertyOperations.setValueForProperty(a,r,t):DOMPropertyOperations.deleteValueForProperty(a,r)},dangerouslyReplaceNodeWithMarkupByID:function(e,r){var t=ReactMount.getNode(e);DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(t,r)},dangerouslyProcessChildrenUpdates:function(e,r){for(var t=0;t<e.length;t++)e[t].parentNode=ReactMount.getNode(e[t].parentID);DOMChildrenOperations.processUpdates(e,r)}};ReactPerf.measureMethods(ReactDOMIDOperations,"ReactDOMIDOperations",{dangerouslyReplaceNodeWithMarkupByID:"dangerouslyReplaceNodeWithMarkupByID",dangerouslyProcessChildrenUpdates:"dangerouslyProcessChildrenUpdates"}),module.exports=ReactDOMIDOperations;

},{"./DOMChildrenOperations":31,"./DOMPropertyOperations":33,"./ReactMount":86,"./ReactPerf":92,"fbjs/lib/invariant":165}],64:[function(require,module,exports){
"use strict";function forceUpdateIfMounted(){this._rootNodeID&&ReactDOMInput.updateWrapper(this)}function _handleChange(e){var t=this._currentElement.props,a=LinkedValueUtils.executeOnChange(t,e);ReactUpdates.asap(forceUpdateIfMounted,this);var n=t.name;if("radio"===t.type&&null!=n){for(var r=ReactMount.getNode(this._rootNodeID),i=r;i.parentNode;)i=i.parentNode;for(var o=i.querySelectorAll("input[name="+JSON.stringify(""+n)+'][type="radio"]'),u=0;u<o.length;u++){var d=o[u];if(d!==r&&d.form===r.form){var l=ReactMount.getID(d);l?void 0:invariant(!1);var p=instancesByReactID[l];p?void 0:invariant(!1),ReactUpdates.asap(forceUpdateIfMounted,p)}}}return a}var ReactDOMIDOperations=require("./ReactDOMIDOperations"),LinkedValueUtils=require("./LinkedValueUtils"),ReactMount=require("./ReactMount"),ReactUpdates=require("./ReactUpdates"),assign=require("./Object.assign"),invariant=require("fbjs/lib/invariant"),instancesByReactID={},ReactDOMInput={getNativeProps:function(e,t,a){var n=LinkedValueUtils.getValue(t),r=LinkedValueUtils.getChecked(t),i=assign({},t,{defaultChecked:void 0,defaultValue:void 0,value:null!=n?n:e._wrapperState.initialValue,checked:null!=r?r:e._wrapperState.initialChecked,onChange:e._wrapperState.onChange});return i},mountWrapper:function(e,t){var a=t.defaultValue;e._wrapperState={initialChecked:t.defaultChecked||!1,initialValue:null!=a?a:null,onChange:_handleChange.bind(e)}},mountReadyWrapper:function(e){instancesByReactID[e._rootNodeID]=e},unmountWrapper:function(e){delete instancesByReactID[e._rootNodeID]},updateWrapper:function(e){var t=e._currentElement.props,a=t.checked;null!=a&&ReactDOMIDOperations.updatePropertyByID(e._rootNodeID,"checked",a||!1);var n=LinkedValueUtils.getValue(t);null!=n&&ReactDOMIDOperations.updatePropertyByID(e._rootNodeID,"value",""+n)}};module.exports=ReactDOMInput;

},{"./LinkedValueUtils":44,"./Object.assign":45,"./ReactDOMIDOperations":63,"./ReactMount":86,"./ReactUpdates":104,"fbjs/lib/invariant":165}],65:[function(require,module,exports){
"use strict";var ReactChildren=require("./ReactChildren"),ReactDOMSelect=require("./ReactDOMSelect"),assign=require("./Object.assign"),warning=require("fbjs/lib/warning"),valueContextKey=ReactDOMSelect.valueContextKey,ReactDOMOption={mountWrapper:function(e,t,r){var a=r[valueContextKey],n=null;if(null!=a)if(n=!1,Array.isArray(a)){for(var l=0;l<a.length;l++)if(""+a[l]==""+t.value){n=!0;break}}else n=""+a==""+t.value;e._wrapperState={selected:n}},getNativeProps:function(e,t,r){var a=assign({selected:void 0,children:void 0},t);null!=e._wrapperState.selected&&(a.selected=e._wrapperState.selected);var n="";return ReactChildren.forEach(t.children,function(e){null!=e&&("string"==typeof e||"number"==typeof e)&&(n+=e)}),a.children=n,a}};module.exports=ReactDOMOption;

},{"./Object.assign":45,"./ReactChildren":51,"./ReactDOMSelect":66,"fbjs/lib/warning":174}],66:[function(require,module,exports){
"use strict";function updateOptionsIfPendingUpdateAndMounted(){if(this._rootNodeID&&this._wrapperState.pendingUpdate){this._wrapperState.pendingUpdate=!1;var e=this._currentElement.props,t=LinkedValueUtils.getValue(e);null!=t&&updateOptions(this,e,t)}}function getDeclarationErrorAddendum(e){if(e){var t=e.getName();if(t)return" Check the render method of `"+t+"`."}return""}function checkSelectPropTypes(e,t){var a=e._currentElement._owner;LinkedValueUtils.checkPropTypes("select",t,a);for(var n=0;n<valuePropNames.length;n++){var l=valuePropNames[n];null!=t[l]&&t.multiple}}function updateOptions(e,t,a){var n,l,r=ReactMount.getNode(e._rootNodeID).options;if(t){for(n={},l=0;l<a.length;l++)n[""+a[l]]=!0;for(l=0;l<r.length;l++){var i=n.hasOwnProperty(r[l].value);r[l].selected!==i&&(r[l].selected=i)}}else{for(n=""+a,l=0;l<r.length;l++)if(r[l].value===n)return void(r[l].selected=!0);r.length&&(r[0].selected=!0)}}function _handleChange(e){var t=this._currentElement.props,a=LinkedValueUtils.executeOnChange(t,e);return this._wrapperState.pendingUpdate=!0,ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted,this),a}var LinkedValueUtils=require("./LinkedValueUtils"),ReactMount=require("./ReactMount"),ReactUpdates=require("./ReactUpdates"),assign=require("./Object.assign"),warning=require("fbjs/lib/warning"),valueContextKey="__ReactDOMSelect_value$"+Math.random().toString(36).slice(2),valuePropNames=["value","defaultValue"],ReactDOMSelect={valueContextKey:valueContextKey,getNativeProps:function(e,t,a){return assign({},t,{onChange:e._wrapperState.onChange,value:void 0})},mountWrapper:function(e,t){var a=LinkedValueUtils.getValue(t);e._wrapperState={pendingUpdate:!1,initialValue:null!=a?a:t.defaultValue,onChange:_handleChange.bind(e),wasMultiple:Boolean(t.multiple)}},processChildContext:function(e,t,a){var n=assign({},a);return n[valueContextKey]=e._wrapperState.initialValue,n},postUpdateWrapper:function(e){var t=e._currentElement.props;e._wrapperState.initialValue=void 0;var a=e._wrapperState.wasMultiple;e._wrapperState.wasMultiple=Boolean(t.multiple);var n=LinkedValueUtils.getValue(t);null!=n?(e._wrapperState.pendingUpdate=!1,updateOptions(e,Boolean(t.multiple),n)):a!==Boolean(t.multiple)&&(null!=t.defaultValue?updateOptions(e,Boolean(t.multiple),t.defaultValue):updateOptions(e,Boolean(t.multiple),t.multiple?[]:""))}};module.exports=ReactDOMSelect;

},{"./LinkedValueUtils":44,"./Object.assign":45,"./ReactMount":86,"./ReactUpdates":104,"fbjs/lib/warning":174}],67:[function(require,module,exports){
"use strict";function isCollapsed(e,t,n,o){return e===n&&t===o}function getIEOffsets(e){var t=document.selection,n=t.createRange(),o=n.text.length,s=n.duplicate();s.moveToElementText(e),s.setEndPoint("EndToStart",n);var r=s.text.length,a=r+o;return{start:r,end:a}}function getModernOffsets(e){var t=window.getSelection&&window.getSelection();if(!t||0===t.rangeCount)return null;var n=t.anchorNode,o=t.anchorOffset,s=t.focusNode,r=t.focusOffset,a=t.getRangeAt(0);try{a.startContainer.nodeType,a.endContainer.nodeType}catch(f){return null}var d=isCollapsed(t.anchorNode,t.anchorOffset,t.focusNode,t.focusOffset),c=d?0:a.toString().length,i=a.cloneRange();i.selectNodeContents(e),i.setEnd(a.startContainer,a.startOffset);var l=isCollapsed(i.startContainer,i.startOffset,i.endContainer,i.endOffset),u=l?0:i.toString().length,g=u+c,O=document.createRange();O.setStart(n,o),O.setEnd(s,r);var E=O.collapsed;return{start:E?g:u,end:E?u:g}}function setIEOffsets(e,t){var n,o,s=document.selection.createRange().duplicate();"undefined"==typeof t.end?(n=t.start,o=n):t.start>t.end?(n=t.end,o=t.start):(n=t.start,o=t.end),s.moveToElementText(e),s.moveStart("character",n),s.setEndPoint("EndToStart",s),s.moveEnd("character",o-n),s.select()}function setModernOffsets(e,t){if(window.getSelection){var n=window.getSelection(),o=e[getTextContentAccessor()].length,s=Math.min(t.start,o),r="undefined"==typeof t.end?s:Math.min(t.end,o);if(!n.extend&&s>r){var a=r;r=s,s=a}var f=getNodeForCharacterOffset(e,s),d=getNodeForCharacterOffset(e,r);if(f&&d){var c=document.createRange();c.setStart(f.node,f.offset),n.removeAllRanges(),s>r?(n.addRange(c),n.extend(d.node,d.offset)):(c.setEnd(d.node,d.offset),n.addRange(c))}}}var ExecutionEnvironment=require("fbjs/lib/ExecutionEnvironment"),getNodeForCharacterOffset=require("./getNodeForCharacterOffset"),getTextContentAccessor=require("./getTextContentAccessor"),useIEOffsets=ExecutionEnvironment.canUseDOM&&"selection"in document&&!("getSelection"in window),ReactDOMSelection={getOffsets:useIEOffsets?getIEOffsets:getModernOffsets,setOffsets:useIEOffsets?setIEOffsets:setModernOffsets};module.exports=ReactDOMSelection;

},{"./getNodeForCharacterOffset":137,"./getTextContentAccessor":138,"fbjs/lib/ExecutionEnvironment":151}],68:[function(require,module,exports){
"use strict";var ReactDefaultInjection=require("./ReactDefaultInjection"),ReactServerRendering=require("./ReactServerRendering"),ReactVersion=require("./ReactVersion");ReactDefaultInjection.inject();var ReactDOMServer={renderToString:ReactServerRendering.renderToString,renderToStaticMarkup:ReactServerRendering.renderToStaticMarkup,version:ReactVersion};module.exports=ReactDOMServer;

},{"./ReactDefaultInjection":72,"./ReactServerRendering":101,"./ReactVersion":105}],69:[function(require,module,exports){
"use strict";var DOMChildrenOperations=require("./DOMChildrenOperations"),DOMPropertyOperations=require("./DOMPropertyOperations"),ReactComponentBrowserEnvironment=require("./ReactComponentBrowserEnvironment"),ReactMount=require("./ReactMount"),assign=require("./Object.assign"),escapeTextContentForBrowser=require("./escapeTextContentForBrowser"),setTextContent=require("./setTextContent"),validateDOMNesting=require("./validateDOMNesting"),ReactDOMTextComponent=function(e){};assign(ReactDOMTextComponent.prototype,{construct:function(e){this._currentElement=e,this._stringText=""+e,this._rootNodeID=null,this._mountIndex=0},mountComponent:function(e,t,n){if(this._rootNodeID=e,t.useCreateElement){var r=n[ReactMount.ownerDocumentContextKey],o=r.createElement("span");return DOMPropertyOperations.setAttributeForID(o,e),ReactMount.getID(o),setTextContent(o,this._stringText),o}var i=escapeTextContentForBrowser(this._stringText);return t.renderToStaticMarkup?i:"<span "+DOMPropertyOperations.createMarkupForID(e)+">"+i+"</span>"},receiveComponent:function(e,t){if(e!==this._currentElement){this._currentElement=e;var n=""+e;if(n!==this._stringText){this._stringText=n;var r=ReactMount.getNode(this._rootNodeID);DOMChildrenOperations.updateTextContent(r,n)}}},unmountComponent:function(){ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID)}}),module.exports=ReactDOMTextComponent;

},{"./DOMChildrenOperations":31,"./DOMPropertyOperations":33,"./Object.assign":45,"./ReactComponentBrowserEnvironment":54,"./ReactMount":86,"./escapeTextContentForBrowser":128,"./setTextContent":146,"./validateDOMNesting":149}],70:[function(require,module,exports){
"use strict";function forceUpdateIfMounted(){this._rootNodeID&&ReactDOMTextarea.updateWrapper(this)}function _handleChange(e){var a=this._currentElement.props,t=LinkedValueUtils.executeOnChange(a,e);return ReactUpdates.asap(forceUpdateIfMounted,this),t}var LinkedValueUtils=require("./LinkedValueUtils"),ReactDOMIDOperations=require("./ReactDOMIDOperations"),ReactUpdates=require("./ReactUpdates"),assign=require("./Object.assign"),invariant=require("fbjs/lib/invariant"),warning=require("fbjs/lib/warning"),ReactDOMTextarea={getNativeProps:function(e,a,t){null!=a.dangerouslySetInnerHTML?invariant(!1):void 0;var n=assign({},a,{defaultValue:void 0,value:void 0,children:e._wrapperState.initialValue,onChange:e._wrapperState.onChange});return n},mountWrapper:function(e,a){var t=a.defaultValue,n=a.children;null!=n&&(null!=t?invariant(!1):void 0,Array.isArray(n)&&(n.length<=1?void 0:invariant(!1),n=n[0]),t=""+n),null==t&&(t="");var r=LinkedValueUtils.getValue(a);e._wrapperState={initialValue:""+(null!=r?r:t),onChange:_handleChange.bind(e)}},updateWrapper:function(e){var a=e._currentElement.props,t=LinkedValueUtils.getValue(a);null!=t&&ReactDOMIDOperations.updatePropertyByID(e._rootNodeID,"value",""+t)}};module.exports=ReactDOMTextarea;

},{"./LinkedValueUtils":44,"./Object.assign":45,"./ReactDOMIDOperations":63,"./ReactUpdates":104,"fbjs/lib/invariant":165,"fbjs/lib/warning":174}],71:[function(require,module,exports){
"use strict";function ReactDefaultBatchingStrategyTransaction(){this.reinitializeTransaction()}var ReactUpdates=require("./ReactUpdates"),Transaction=require("./Transaction"),assign=require("./Object.assign"),emptyFunction=require("fbjs/lib/emptyFunction"),RESET_BATCHED_UPDATES={initialize:emptyFunction,close:function(){ReactDefaultBatchingStrategy.isBatchingUpdates=!1}},FLUSH_BATCHED_UPDATES={initialize:emptyFunction,close:ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)},TRANSACTION_WRAPPERS=[FLUSH_BATCHED_UPDATES,RESET_BATCHED_UPDATES];assign(ReactDefaultBatchingStrategyTransaction.prototype,Transaction.Mixin,{getTransactionWrappers:function(){return TRANSACTION_WRAPPERS}});var transaction=new ReactDefaultBatchingStrategyTransaction,ReactDefaultBatchingStrategy={isBatchingUpdates:!1,batchedUpdates:function(t,a,e,i,n,c){var r=ReactDefaultBatchingStrategy.isBatchingUpdates;ReactDefaultBatchingStrategy.isBatchingUpdates=!0,r?t(a,e,i,n,c):transaction.perform(t,null,a,e,i,n,c)}};module.exports=ReactDefaultBatchingStrategy;

},{"./Object.assign":45,"./ReactUpdates":104,"./Transaction":121,"fbjs/lib/emptyFunction":157}],72:[function(require,module,exports){
"use strict";function inject(){if(!alreadyInjected){alreadyInjected=!0,ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener),ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder),ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles),ReactInjection.EventPluginHub.injectMount(ReactMount),ReactInjection.EventPluginHub.injectEventPluginsByName({SimpleEventPlugin:SimpleEventPlugin,EnterLeaveEventPlugin:EnterLeaveEventPlugin,ChangeEventPlugin:ChangeEventPlugin,SelectEventPlugin:SelectEventPlugin,BeforeInputEventPlugin:BeforeInputEventPlugin}),ReactInjection.NativeComponent.injectGenericComponentClass(ReactDOMComponent),ReactInjection.NativeComponent.injectTextComponentClass(ReactDOMTextComponent),ReactInjection.Class.injectMixin(ReactBrowserComponentMixin),ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig),ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig),ReactInjection.EmptyComponent.injectEmptyComponent("noscript"),ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction),ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy),ReactInjection.RootIndex.injectCreateReactRootIndex(ExecutionEnvironment.canUseDOM?ClientReactRootIndex.createReactRootIndex:ServerReactRootIndex.createReactRootIndex),ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment)}}var BeforeInputEventPlugin=require("./BeforeInputEventPlugin"),ChangeEventPlugin=require("./ChangeEventPlugin"),ClientReactRootIndex=require("./ClientReactRootIndex"),DefaultEventPluginOrder=require("./DefaultEventPluginOrder"),EnterLeaveEventPlugin=require("./EnterLeaveEventPlugin"),ExecutionEnvironment=require("fbjs/lib/ExecutionEnvironment"),HTMLDOMPropertyConfig=require("./HTMLDOMPropertyConfig"),ReactBrowserComponentMixin=require("./ReactBrowserComponentMixin"),ReactComponentBrowserEnvironment=require("./ReactComponentBrowserEnvironment"),ReactDefaultBatchingStrategy=require("./ReactDefaultBatchingStrategy"),ReactDOMComponent=require("./ReactDOMComponent"),ReactDOMTextComponent=require("./ReactDOMTextComponent"),ReactEventListener=require("./ReactEventListener"),ReactInjection=require("./ReactInjection"),ReactInstanceHandles=require("./ReactInstanceHandles"),ReactMount=require("./ReactMount"),ReactReconcileTransaction=require("./ReactReconcileTransaction"),SelectEventPlugin=require("./SelectEventPlugin"),ServerReactRootIndex=require("./ServerReactRootIndex"),SimpleEventPlugin=require("./SimpleEventPlugin"),SVGDOMPropertyConfig=require("./SVGDOMPropertyConfig"),alreadyInjected=!1;module.exports={inject:inject};

},{"./BeforeInputEventPlugin":25,"./ChangeEventPlugin":29,"./ClientReactRootIndex":30,"./DefaultEventPluginOrder":35,"./EnterLeaveEventPlugin":36,"./HTMLDOMPropertyConfig":43,"./ReactBrowserComponentMixin":48,"./ReactComponentBrowserEnvironment":54,"./ReactDOMComponent":60,"./ReactDOMTextComponent":69,"./ReactDefaultBatchingStrategy":71,"./ReactEventListener":79,"./ReactInjection":80,"./ReactInstanceHandles":82,"./ReactMount":86,"./ReactReconcileTransaction":96,"./SVGDOMPropertyConfig":106,"./SelectEventPlugin":107,"./ServerReactRootIndex":108,"./SimpleEventPlugin":109,"fbjs/lib/ExecutionEnvironment":151}],73:[function(require,module,exports){
"use strict";var ReactCurrentOwner=require("./ReactCurrentOwner"),assign=require("./Object.assign"),canDefineProperty=require("./canDefineProperty"),REACT_ELEMENT_TYPE="function"==typeof Symbol&&Symbol["for"]&&Symbol["for"]("react.element")||60103,RESERVED_PROPS={key:!0,ref:!0,__self:!0,__source:!0},ReactElement=function(e,r,n,t,l,o,a){var c={$$typeof:REACT_ELEMENT_TYPE,type:e,key:r,ref:n,props:a,_owner:o};return c};ReactElement.createElement=function(e,r,n){var t,l={},o=null,a=null,c=null,u=null;if(null!=r){a=void 0===r.ref?null:r.ref,o=void 0===r.key?null:""+r.key,c=void 0===r.__self?null:r.__self,u=void 0===r.__source?null:r.__source;for(t in r)r.hasOwnProperty(t)&&!RESERVED_PROPS.hasOwnProperty(t)&&(l[t]=r[t])}var f=arguments.length-2;if(1===f)l.children=n;else if(f>1){for(var i=Array(f),E=0;f>E;E++)i[E]=arguments[E+2];l.children=i}if(e&&e.defaultProps){var s=e.defaultProps;for(t in s)"undefined"==typeof l[t]&&(l[t]=s[t])}return ReactElement(e,o,a,c,u,ReactCurrentOwner.current,l)},ReactElement.createFactory=function(e){var r=ReactElement.createElement.bind(null,e);return r.type=e,r},ReactElement.cloneAndReplaceKey=function(e,r){var n=ReactElement(e.type,r,e.ref,e._self,e._source,e._owner,e.props);return n},ReactElement.cloneAndReplaceProps=function(e,r){var n=ReactElement(e.type,e.key,e.ref,e._self,e._source,e._owner,r);return n},ReactElement.cloneElement=function(e,r,n){var t,l=assign({},e.props),o=e.key,a=e.ref,c=e._self,u=e._source,f=e._owner;if(null!=r){void 0!==r.ref&&(a=r.ref,f=ReactCurrentOwner.current),void 0!==r.key&&(o=""+r.key);for(t in r)r.hasOwnProperty(t)&&!RESERVED_PROPS.hasOwnProperty(t)&&(l[t]=r[t])}var i=arguments.length-2;if(1===i)l.children=n;else if(i>1){for(var E=Array(i),s=0;i>s;s++)E[s]=arguments[s+2];l.children=E}return ReactElement(e.type,o,a,c,u,f,l)},ReactElement.isValidElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===REACT_ELEMENT_TYPE},module.exports=ReactElement;

},{"./Object.assign":45,"./ReactCurrentOwner":57,"./canDefineProperty":125}],74:[function(require,module,exports){
"use strict";function getDeclarationErrorAddendum(){if(ReactCurrentOwner.current){var e=ReactCurrentOwner.current.getName();if(e)return" Check the render method of `"+e+"`."}return""}function validateExplicitKey(e,r){if(e._store&&!e._store.validated&&null==e.key){e._store.validated=!0;getAddendaForKeyUse("uniqueKey",e,r)}}function getAddendaForKeyUse(e,r,t){var a=getDeclarationErrorAddendum();if(!a){var n="string"==typeof t?t:t.displayName||t.name;n&&(a=" Check the top-level render call using <"+n+">.")}var i=ownerHasKeyUseWarning[e]||(ownerHasKeyUseWarning[e]={});if(i[a])return null;i[a]=!0;var o={parentOrOwner:a,url:" See https://fb.me/react-warning-keys for more information.",childOwner:null};return r&&r._owner&&r._owner!==ReactCurrentOwner.current&&(o.childOwner=" It was passed a child from "+r._owner.getName()+"."),o}function validateChildKeys(e,r){if("object"==typeof e)if(Array.isArray(e))for(var t=0;t<e.length;t++){var a=e[t];ReactElement.isValidElement(a)&&validateExplicitKey(a,r)}else if(ReactElement.isValidElement(e))e._store&&(e._store.validated=!0);else if(e){var n=getIteratorFn(e);if(n&&n!==e.entries)for(var i,o=n.call(e);!(i=o.next()).done;)ReactElement.isValidElement(i.value)&&validateExplicitKey(i.value,r)}}function checkPropTypes(e,r,t,a){for(var n in r)if(r.hasOwnProperty(n)){var i;try{"function"!=typeof r[n]?invariant(!1):void 0,i=r[n](t,n,e,a)}catch(o){i=o}if(i instanceof Error&&!(i.message in loggedTypeFailures)){loggedTypeFailures[i.message]=!0;getDeclarationErrorAddendum()}}}function validatePropTypes(e){var r=e.type;if("function"==typeof r){var t=r.displayName||r.name;r.propTypes&&checkPropTypes(t,r.propTypes,e.props,ReactPropTypeLocations.prop),"function"==typeof r.getDefaultProps}}var ReactElement=require("./ReactElement"),ReactPropTypeLocations=require("./ReactPropTypeLocations"),ReactPropTypeLocationNames=require("./ReactPropTypeLocationNames"),ReactCurrentOwner=require("./ReactCurrentOwner"),canDefineProperty=require("./canDefineProperty"),getIteratorFn=require("./getIteratorFn"),invariant=require("fbjs/lib/invariant"),warning=require("fbjs/lib/warning"),ownerHasKeyUseWarning={},loggedTypeFailures={},ReactElementValidator={createElement:function(e,r,t){var a="string"==typeof e||"function"==typeof e,n=ReactElement.createElement.apply(this,arguments);if(null==n)return n;if(a)for(var i=2;i<arguments.length;i++)validateChildKeys(arguments[i],e);return validatePropTypes(n),n},createFactory:function(e){var r=ReactElementValidator.createElement.bind(null,e);return r.type=e,r},cloneElement:function(e,r,t){for(var a=ReactElement.cloneElement.apply(this,arguments),n=2;n<arguments.length;n++)validateChildKeys(arguments[n],a.type);return validatePropTypes(a),a}};module.exports=ReactElementValidator;

},{"./ReactCurrentOwner":57,"./ReactElement":73,"./ReactPropTypeLocationNames":93,"./ReactPropTypeLocations":94,"./canDefineProperty":125,"./getIteratorFn":136,"fbjs/lib/invariant":165,"fbjs/lib/warning":174}],75:[function(require,module,exports){
"use strict";var ReactElement=require("./ReactElement"),ReactEmptyComponentRegistry=require("./ReactEmptyComponentRegistry"),ReactReconciler=require("./ReactReconciler"),assign=require("./Object.assign"),placeholderElement,ReactEmptyComponentInjection={injectEmptyComponent:function(e){placeholderElement=ReactElement.createElement(e)}},ReactEmptyComponent=function(e){this._currentElement=null,this._rootNodeID=null,this._renderedComponent=e(placeholderElement)};assign(ReactEmptyComponent.prototype,{construct:function(e){},mountComponent:function(e,t,n){return ReactEmptyComponentRegistry.registerNullComponentID(e),this._rootNodeID=e,ReactReconciler.mountComponent(this._renderedComponent,e,t,n)},receiveComponent:function(){},unmountComponent:function(e,t,n){ReactReconciler.unmountComponent(this._renderedComponent),ReactEmptyComponentRegistry.deregisterNullComponentID(this._rootNodeID),this._rootNodeID=null,this._renderedComponent=null}}),ReactEmptyComponent.injection=ReactEmptyComponentInjection,module.exports=ReactEmptyComponent;

},{"./Object.assign":45,"./ReactElement":73,"./ReactEmptyComponentRegistry":76,"./ReactReconciler":97}],76:[function(require,module,exports){
"use strict";function isNullComponentID(e){return!!nullComponentIDsRegistry[e]}function registerNullComponentID(e){nullComponentIDsRegistry[e]=!0}function deregisterNullComponentID(e){delete nullComponentIDsRegistry[e]}var nullComponentIDsRegistry={},ReactEmptyComponentRegistry={isNullComponentID:isNullComponentID,registerNullComponentID:registerNullComponentID,deregisterNullComponentID:deregisterNullComponentID};module.exports=ReactEmptyComponentRegistry;

},{}],77:[function(require,module,exports){
"use strict";function invokeGuardedCallback(r,a,t,o){try{return a(t,o)}catch(u){return void(null===caughtError&&(caughtError=u))}}var caughtError=null,ReactErrorUtils={invokeGuardedCallback:invokeGuardedCallback,invokeGuardedCallbackWithCatch:invokeGuardedCallback,rethrowCaughtError:function(){if(caughtError){var r=caughtError;throw caughtError=null,r}}},fakeNode;module.exports=ReactErrorUtils;

},{}],78:[function(require,module,exports){
"use strict";function runEventQueueInBatch(e){EventPluginHub.enqueueEvents(e),EventPluginHub.processEventQueue(!1)}var EventPluginHub=require("./EventPluginHub"),ReactEventEmitterMixin={handleTopLevel:function(e,n,t,u,i){var v=EventPluginHub.extractEvents(e,n,t,u,i);runEventQueueInBatch(v)}};module.exports=ReactEventEmitterMixin;

},{"./EventPluginHub":38}],79:[function(require,module,exports){
"use strict";function findParent(e){var t=ReactMount.getID(e),n=ReactInstanceHandles.getReactRootIDFromNodeID(t),a=ReactMount.findReactContainerForID(n),o=ReactMount.getFirstReactDOM(a);return o}function TopLevelCallbackBookKeeping(e,t){this.topLevelType=e,this.nativeEvent=t,this.ancestors=[]}function handleTopLevelImpl(e){handleTopLevelWithoutPath(e)}function handleTopLevelWithoutPath(e){for(var t=ReactMount.getFirstReactDOM(getEventTarget(e.nativeEvent))||window,n=t;n;)e.ancestors.push(n),n=findParent(n);for(var a=0;a<e.ancestors.length;a++){t=e.ancestors[a];var o=ReactMount.getID(t)||"";ReactEventListener._handleTopLevel(e.topLevelType,t,o,e.nativeEvent,getEventTarget(e.nativeEvent))}}function handleTopLevelWithPath(e){for(var t=e.nativeEvent.path,n=t[0],a=0,o=0;o<t.length;o++){var l=t[o];l.nodeType===DOCUMENT_FRAGMENT_NODE_TYPE&&(n=t[o+1]);var i=ReactMount.getFirstReactDOM(l);if(i===l){var r=ReactMount.getID(l),s=ReactInstanceHandles.getReactRootIDFromNodeID(r);e.ancestors.push(l);var v=ReactMount.getID(l)||"";for(a++,ReactEventListener._handleTopLevel(e.topLevelType,l,v,e.nativeEvent,n);r!==s;)o++,l=t[o],r=ReactMount.getID(l)}}0===a&&ReactEventListener._handleTopLevel(e.topLevelType,window,"",e.nativeEvent,getEventTarget(e.nativeEvent))}function scrollValueMonitor(e){var t=getUnboundedScrollPosition(window);e(t)}var EventListener=require("fbjs/lib/EventListener"),ExecutionEnvironment=require("fbjs/lib/ExecutionEnvironment"),PooledClass=require("./PooledClass"),ReactInstanceHandles=require("./ReactInstanceHandles"),ReactMount=require("./ReactMount"),ReactUpdates=require("./ReactUpdates"),assign=require("./Object.assign"),getEventTarget=require("./getEventTarget"),getUnboundedScrollPosition=require("fbjs/lib/getUnboundedScrollPosition"),DOCUMENT_FRAGMENT_NODE_TYPE=11;assign(TopLevelCallbackBookKeeping.prototype,{destructor:function(){this.topLevelType=null,this.nativeEvent=null,this.ancestors.length=0}}),PooledClass.addPoolingTo(TopLevelCallbackBookKeeping,PooledClass.twoArgumentPooler);var ReactEventListener={_enabled:!0,_handleTopLevel:null,WINDOW_HANDLE:ExecutionEnvironment.canUseDOM?window:null,setHandleTopLevel:function(e){ReactEventListener._handleTopLevel=e},setEnabled:function(e){ReactEventListener._enabled=!!e},isEnabled:function(){return ReactEventListener._enabled},trapBubbledEvent:function(e,t,n){var a=n;return a?EventListener.listen(a,t,ReactEventListener.dispatchEvent.bind(null,e)):null},trapCapturedEvent:function(e,t,n){var a=n;return a?EventListener.capture(a,t,ReactEventListener.dispatchEvent.bind(null,e)):null},monitorScrollValue:function(e){var t=scrollValueMonitor.bind(null,e);EventListener.listen(window,"scroll",t)},dispatchEvent:function(e,t){if(ReactEventListener._enabled){var n=TopLevelCallbackBookKeeping.getPooled(e,t);try{ReactUpdates.batchedUpdates(handleTopLevelImpl,n)}finally{TopLevelCallbackBookKeeping.release(n)}}}};module.exports=ReactEventListener;

},{"./Object.assign":45,"./PooledClass":46,"./ReactInstanceHandles":82,"./ReactMount":86,"./ReactUpdates":104,"./getEventTarget":135,"fbjs/lib/EventListener":150,"fbjs/lib/ExecutionEnvironment":151,"fbjs/lib/getUnboundedScrollPosition":162}],80:[function(require,module,exports){
"use strict";var DOMProperty=require("./DOMProperty"),EventPluginHub=require("./EventPluginHub"),ReactComponentEnvironment=require("./ReactComponentEnvironment"),ReactClass=require("./ReactClass"),ReactEmptyComponent=require("./ReactEmptyComponent"),ReactBrowserEventEmitter=require("./ReactBrowserEventEmitter"),ReactNativeComponent=require("./ReactNativeComponent"),ReactPerf=require("./ReactPerf"),ReactRootIndex=require("./ReactRootIndex"),ReactUpdates=require("./ReactUpdates"),ReactInjection={Component:ReactComponentEnvironment.injection,Class:ReactClass.injection,DOMProperty:DOMProperty.injection,EmptyComponent:ReactEmptyComponent.injection,EventPluginHub:EventPluginHub.injection,EventEmitter:ReactBrowserEventEmitter.injection,NativeComponent:ReactNativeComponent.injection,Perf:ReactPerf.injection,RootIndex:ReactRootIndex.injection,Updates:ReactUpdates.injection};module.exports=ReactInjection;

},{"./DOMProperty":32,"./EventPluginHub":38,"./ReactBrowserEventEmitter":49,"./ReactClass":52,"./ReactComponentEnvironment":55,"./ReactEmptyComponent":75,"./ReactNativeComponent":89,"./ReactPerf":92,"./ReactRootIndex":99,"./ReactUpdates":104}],81:[function(require,module,exports){
"use strict";function isInDocument(e){return containsNode(document.documentElement,e)}var ReactDOMSelection=require("./ReactDOMSelection"),containsNode=require("fbjs/lib/containsNode"),focusNode=require("fbjs/lib/focusNode"),getActiveElement=require("fbjs/lib/getActiveElement"),ReactInputSelection={hasSelectionCapabilities:function(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&"text"===e.type||"textarea"===t||"true"===e.contentEditable)},getSelectionInformation:function(){var e=getActiveElement();return{focusedElem:e,selectionRange:ReactInputSelection.hasSelectionCapabilities(e)?ReactInputSelection.getSelection(e):null}},restoreSelection:function(e){var t=getActiveElement(),n=e.focusedElem,o=e.selectionRange;t!==n&&isInDocument(n)&&(ReactInputSelection.hasSelectionCapabilities(n)&&ReactInputSelection.setSelection(n,o),focusNode(n))},getSelection:function(e){var t;if("selectionStart"in e)t={start:e.selectionStart,end:e.selectionEnd};else if(document.selection&&e.nodeName&&"input"===e.nodeName.toLowerCase()){var n=document.selection.createRange();n.parentElement()===e&&(t={start:-n.moveStart("character",-e.value.length),end:-n.moveEnd("character",-e.value.length)})}else t=ReactDOMSelection.getOffsets(e);return t||{start:0,end:0}},setSelection:function(e,t){var n=t.start,o=t.end;if("undefined"==typeof o&&(o=n),"selectionStart"in e)e.selectionStart=n,e.selectionEnd=Math.min(o,e.value.length);else if(document.selection&&e.nodeName&&"input"===e.nodeName.toLowerCase()){var c=e.createTextRange();c.collapse(!0),c.moveStart("character",n),c.moveEnd("character",o-n),c.select()}else ReactDOMSelection.setOffsets(e,t)}};module.exports=ReactInputSelection;

},{"./ReactDOMSelection":67,"fbjs/lib/containsNode":154,"fbjs/lib/focusNode":159,"fbjs/lib/getActiveElement":160}],82:[function(require,module,exports){
"use strict";function getReactRootIDString(t){return SEPARATOR+t.toString(36)}function isBoundary(t,e){return t.charAt(e)===SEPARATOR||e===t.length}function isValidID(t){return""===t||t.charAt(0)===SEPARATOR&&t.charAt(t.length-1)!==SEPARATOR}function isAncestorIDOf(t,e){return 0===e.indexOf(t)&&isBoundary(e,t.length)}function getParentID(t){return t?t.substr(0,t.lastIndexOf(SEPARATOR)):""}function getNextDescendantID(t,e){if(isValidID(t)&&isValidID(e)?void 0:invariant(!1),isAncestorIDOf(t,e)?void 0:invariant(!1),t===e)return t;var r,n=t.length+SEPARATOR_LENGTH;for(r=n;r<e.length&&!isBoundary(e,r);r++);return e.substr(0,r)}function getFirstCommonAncestorID(t,e){var r=Math.min(t.length,e.length);if(0===r)return"";for(var n=0,a=0;r>=a;a++)if(isBoundary(t,a)&&isBoundary(e,a))n=a;else if(t.charAt(a)!==e.charAt(a))break;var i=t.substr(0,n);return isValidID(i)?void 0:invariant(!1),i}function traverseParentPath(t,e,r,n,a,i){t=t||"",e=e||"",t===e?invariant(!1):void 0;var o=isAncestorIDOf(e,t);o||isAncestorIDOf(t,e)?void 0:invariant(!1);for(var s=0,c=o?getParentID:getNextDescendantID,R=t;;R=c(R,e)){var A;if(a&&R===t||i&&R===e||(A=r(R,o,n)),A===!1||R===e)break;s++<MAX_TREE_DEPTH?void 0:invariant(!1)}}var ReactRootIndex=require("./ReactRootIndex"),invariant=require("fbjs/lib/invariant"),SEPARATOR=".",SEPARATOR_LENGTH=SEPARATOR.length,MAX_TREE_DEPTH=1e4,ReactInstanceHandles={createReactRootID:function(){return getReactRootIDString(ReactRootIndex.createReactRootIndex())},createReactID:function(t,e){return t+e},getReactRootIDFromNodeID:function(t){if(t&&t.charAt(0)===SEPARATOR&&t.length>1){var e=t.indexOf(SEPARATOR,1);return e>-1?t.substr(0,e):t}return null},traverseEnterLeave:function(t,e,r,n,a){var i=getFirstCommonAncestorID(t,e);i!==t&&traverseParentPath(t,i,r,n,!1,!0),i!==e&&traverseParentPath(i,e,r,a,!0,!1)},traverseTwoPhase:function(t,e,r){t&&(traverseParentPath("",t,e,r,!0,!1),traverseParentPath(t,"",e,r,!1,!0))},traverseTwoPhaseSkipTarget:function(t,e,r){t&&(traverseParentPath("",t,e,r,!0,!0),traverseParentPath(t,"",e,r,!0,!0))},traverseAncestors:function(t,e,r){traverseParentPath("",t,e,r,!0,!1)},getFirstCommonAncestorID:getFirstCommonAncestorID,_getNextDescendantID:getNextDescendantID,isAncestorIDOf:isAncestorIDOf,SEPARATOR:SEPARATOR};module.exports=ReactInstanceHandles;

},{"./ReactRootIndex":99,"fbjs/lib/invariant":165}],83:[function(require,module,exports){
"use strict";var ReactInstanceMap={remove:function(n){n._reactInternalInstance=void 0},get:function(n){return n._reactInternalInstance},has:function(n){return void 0!==n._reactInternalInstance},set:function(n,t){n._reactInternalInstance=t}};module.exports=ReactInstanceMap;

},{}],84:[function(require,module,exports){
"use strict";var ReactChildren=require("./ReactChildren"),ReactComponent=require("./ReactComponent"),ReactClass=require("./ReactClass"),ReactDOMFactories=require("./ReactDOMFactories"),ReactElement=require("./ReactElement"),ReactElementValidator=require("./ReactElementValidator"),ReactPropTypes=require("./ReactPropTypes"),ReactVersion=require("./ReactVersion"),assign=require("./Object.assign"),onlyChild=require("./onlyChild"),createElement=ReactElement.createElement,createFactory=ReactElement.createFactory,cloneElement=ReactElement.cloneElement,React={Children:{map:ReactChildren.map,forEach:ReactChildren.forEach,count:ReactChildren.count,toArray:ReactChildren.toArray,only:onlyChild},Component:ReactComponent,createElement:createElement,cloneElement:cloneElement,isValidElement:ReactElement.isValidElement,PropTypes:ReactPropTypes,createClass:ReactClass.createClass,createFactory:createFactory,createMixin:function(e){return e},DOM:ReactDOMFactories,version:ReactVersion,__spread:assign};module.exports=React;

},{"./Object.assign":45,"./ReactChildren":51,"./ReactClass":52,"./ReactComponent":53,"./ReactDOMFactories":61,"./ReactElement":73,"./ReactElementValidator":74,"./ReactPropTypes":95,"./ReactVersion":105,"./onlyChild":142}],85:[function(require,module,exports){
"use strict";var adler32=require("./adler32"),TAG_END=/\/?>/,ReactMarkupChecksum={CHECKSUM_ATTR_NAME:"data-react-checksum",addChecksumToMarkup:function(e){var r=adler32(e);return e.replace(TAG_END," "+ReactMarkupChecksum.CHECKSUM_ATTR_NAME+'="'+r+'"$&')},canReuseMarkup:function(e,r){var a=r.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);a=a&&parseInt(a,10);var u=adler32(e);return u===a}};module.exports=ReactMarkupChecksum;

},{"./adler32":124}],86:[function(require,module,exports){
"use strict";function firstDifferenceIndex(e,t){for(var n=Math.min(e.length,t.length),o=0;n>o;o++)if(e.charAt(o)!==t.charAt(o))return o;return e.length===t.length?-1:n}function getReactRootElementInContainer(e){return e?e.nodeType===DOC_NODE_TYPE?e.documentElement:e.firstChild:null}function getReactRootID(e){var t=getReactRootElementInContainer(e);return t&&ReactMount.getID(t)}function getID(e){var t=internalGetID(e);if(t)if(nodeCache.hasOwnProperty(t)){var n=nodeCache[t];n!==e&&(isValid(n,t)?invariant(!1):void 0,nodeCache[t]=e)}else nodeCache[t]=e;return t}function internalGetID(e){return e&&e.getAttribute&&e.getAttribute(ATTR_NAME)||""}function setID(e,t){var n=internalGetID(e);n!==t&&delete nodeCache[n],e.setAttribute(ATTR_NAME,t),nodeCache[t]=e}function getNode(e){return nodeCache.hasOwnProperty(e)&&isValid(nodeCache[e],e)||(nodeCache[e]=ReactMount.findReactNodeByID(e)),nodeCache[e]}function getNodeFromInstance(e){var t=ReactInstanceMap.get(e)._rootNodeID;return ReactEmptyComponentRegistry.isNullComponentID(t)?null:(nodeCache.hasOwnProperty(t)&&isValid(nodeCache[t],t)||(nodeCache[t]=ReactMount.findReactNodeByID(t)),nodeCache[t])}function isValid(e,t){if(e){internalGetID(e)!==t?invariant(!1):void 0;var n=ReactMount.findReactContainerForID(t);if(n&&containsNode(n,e))return!0}return!1}function purgeID(e){delete nodeCache[e]}function findDeepestCachedAncestorImpl(e){var t=nodeCache[e];return t&&isValid(t,e)?void(deepestNodeSoFar=t):!1}function findDeepestCachedAncestor(e){deepestNodeSoFar=null,ReactInstanceHandles.traverseAncestors(e,findDeepestCachedAncestorImpl);var t=deepestNodeSoFar;return deepestNodeSoFar=null,t}function mountComponentIntoNode(e,t,n,o,r,a){ReactDOMFeatureFlags.useCreateElement&&(a=assign({},a),n.nodeType===DOC_NODE_TYPE?a[ownerDocumentContextKey]=n:a[ownerDocumentContextKey]=n.ownerDocument);var c=ReactReconciler.mountComponent(e,t,o,a);e._renderedComponent._topLevelWrapper=e,ReactMount._mountImageIntoNode(c,n,r,o)}function batchedMountComponentIntoNode(e,t,n,o,r){var a=ReactUpdates.ReactReconcileTransaction.getPooled(o);a.perform(mountComponentIntoNode,null,e,t,n,a,o,r),ReactUpdates.ReactReconcileTransaction.release(a)}function unmountComponentFromNode(e,t){for(ReactReconciler.unmountComponent(e),t.nodeType===DOC_NODE_TYPE&&(t=t.documentElement);t.lastChild;)t.removeChild(t.lastChild)}function hasNonRootReactChild(e){var t=getReactRootID(e);return t?t!==ReactInstanceHandles.getReactRootIDFromNodeID(t):!1}function findFirstReactDOMImpl(e){for(;e&&e.parentNode!==e;e=e.parentNode)if(1===e.nodeType){var t=internalGetID(e);if(t){var n,o=ReactInstanceHandles.getReactRootIDFromNodeID(t),r=e;do if(n=internalGetID(r),r=r.parentNode,null==r)return null;while(n!==o);if(r===containersByReactRootID[o])return e}}return null}var DOMProperty=require("./DOMProperty"),ReactBrowserEventEmitter=require("./ReactBrowserEventEmitter"),ReactCurrentOwner=require("./ReactCurrentOwner"),ReactDOMFeatureFlags=require("./ReactDOMFeatureFlags"),ReactElement=require("./ReactElement"),ReactEmptyComponentRegistry=require("./ReactEmptyComponentRegistry"),ReactInstanceHandles=require("./ReactInstanceHandles"),ReactInstanceMap=require("./ReactInstanceMap"),ReactMarkupChecksum=require("./ReactMarkupChecksum"),ReactPerf=require("./ReactPerf"),ReactReconciler=require("./ReactReconciler"),ReactUpdateQueue=require("./ReactUpdateQueue"),ReactUpdates=require("./ReactUpdates"),assign=require("./Object.assign"),emptyObject=require("fbjs/lib/emptyObject"),containsNode=require("fbjs/lib/containsNode"),instantiateReactComponent=require("./instantiateReactComponent"),invariant=require("fbjs/lib/invariant"),setInnerHTML=require("./setInnerHTML"),shouldUpdateReactComponent=require("./shouldUpdateReactComponent"),validateDOMNesting=require("./validateDOMNesting"),warning=require("fbjs/lib/warning"),ATTR_NAME=DOMProperty.ID_ATTRIBUTE_NAME,nodeCache={},ELEMENT_NODE_TYPE=1,DOC_NODE_TYPE=9,DOCUMENT_FRAGMENT_NODE_TYPE=11,ownerDocumentContextKey="__ReactMount_ownerDocument$"+Math.random().toString(36).slice(2),instancesByReactRootID={},containersByReactRootID={},rootElementsByReactRootID,findComponentRootReusableArray=[],deepestNodeSoFar=null,TopLevelWrapper=function(){};TopLevelWrapper.prototype.isReactComponent={},TopLevelWrapper.prototype.render=function(){return this.props};var ReactMount={TopLevelWrapper:TopLevelWrapper,_instancesByReactRootID:instancesByReactRootID,scrollMonitor:function(e,t){t()},_updateRootComponent:function(e,t,n,o){return ReactMount.scrollMonitor(n,function(){ReactUpdateQueue.enqueueElementInternal(e,t),o&&ReactUpdateQueue.enqueueCallbackInternal(e,o)}),e},_registerComponent:function(e,t){!t||t.nodeType!==ELEMENT_NODE_TYPE&&t.nodeType!==DOC_NODE_TYPE&&t.nodeType!==DOCUMENT_FRAGMENT_NODE_TYPE?invariant(!1):void 0,ReactBrowserEventEmitter.ensureScrollValueMonitoring();var n=ReactMount.registerContainer(t);return instancesByReactRootID[n]=e,n},_renderNewRootComponent:function(e,t,n,o){var r=instantiateReactComponent(e,null),a=ReactMount._registerComponent(r,t);return ReactUpdates.batchedUpdates(batchedMountComponentIntoNode,r,a,t,n,o),r},renderSubtreeIntoContainer:function(e,t,n,o){return null==e||null==e._reactInternalInstance?invariant(!1):void 0,ReactMount._renderSubtreeIntoContainer(e,t,n,o)},_renderSubtreeIntoContainer:function(e,t,n,o){ReactElement.isValidElement(t)?void 0:invariant(!1);var r=new ReactElement(TopLevelWrapper,null,null,null,null,null,t),a=instancesByReactRootID[getReactRootID(n)];if(a){var c=a._currentElement,i=c.props;if(shouldUpdateReactComponent(i,t)){var u=a._renderedComponent.getPublicInstance(),d=o&&function(){o.call(u)};return ReactMount._updateRootComponent(a,r,n,d),u}ReactMount.unmountComponentAtNode(n)}var R=getReactRootElementInContainer(n),s=R&&!!internalGetID(R),l=hasNonRootReactChild(n),p=s&&!a&&!l,C=ReactMount._renderNewRootComponent(r,n,p,null!=e?e._reactInternalInstance._processChildContext(e._reactInternalInstance._context):emptyObject)._renderedComponent.getPublicInstance();return o&&o.call(C),C},render:function(e,t,n){return ReactMount._renderSubtreeIntoContainer(null,e,t,n)},registerContainer:function(e){var t=getReactRootID(e);return t&&(t=ReactInstanceHandles.getReactRootIDFromNodeID(t)),t||(t=ReactInstanceHandles.createReactRootID()),containersByReactRootID[t]=e,t},unmountComponentAtNode:function(e){!e||e.nodeType!==ELEMENT_NODE_TYPE&&e.nodeType!==DOC_NODE_TYPE&&e.nodeType!==DOCUMENT_FRAGMENT_NODE_TYPE?invariant(!1):void 0;var t=getReactRootID(e),n=instancesByReactRootID[t];if(!n){var o=(hasNonRootReactChild(e),internalGetID(e));o&&o===ReactInstanceHandles.getReactRootIDFromNodeID(o);return!1}return ReactUpdates.batchedUpdates(unmountComponentFromNode,n,e),delete instancesByReactRootID[t],delete containersByReactRootID[t],!0},findReactContainerForID:function(e){var t=ReactInstanceHandles.getReactRootIDFromNodeID(e),n=containersByReactRootID[t];return n},findReactNodeByID:function(e){var t=ReactMount.findReactContainerForID(e);return ReactMount.findComponentRoot(t,e)},getFirstReactDOM:function(e){return findFirstReactDOMImpl(e)},findComponentRoot:function(e,t){var n=findComponentRootReusableArray,o=0,r=findDeepestCachedAncestor(t)||e;for(n[0]=r.firstChild,n.length=1;o<n.length;){for(var a,c=n[o++];c;){var i=ReactMount.getID(c);i?t===i?a=c:ReactInstanceHandles.isAncestorIDOf(i,t)&&(n.length=o=0,n.push(c.firstChild)):n.push(c.firstChild),c=c.nextSibling}if(a)return n.length=0,a}n.length=0,invariant(!1)},_mountImageIntoNode:function(e,t,n,o){if(!t||t.nodeType!==ELEMENT_NODE_TYPE&&t.nodeType!==DOC_NODE_TYPE&&t.nodeType!==DOCUMENT_FRAGMENT_NODE_TYPE?invariant(!1):void 0,n){var r=getReactRootElementInContainer(t);if(ReactMarkupChecksum.canReuseMarkup(e,r))return;var a=r.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);r.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);var c=r.outerHTML;r.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME,a);var i=e,u=firstDifferenceIndex(i,c);" (client) "+i.substring(u-20,u+20)+"\n (server) "+c.substring(u-20,u+20);t.nodeType===DOC_NODE_TYPE?invariant(!1):void 0}if(t.nodeType===DOC_NODE_TYPE?invariant(!1):void 0,o.useCreateElement){for(;t.lastChild;)t.removeChild(t.lastChild);t.appendChild(e)}else setInnerHTML(t,e)},ownerDocumentContextKey:ownerDocumentContextKey,getReactRootID:getReactRootID,getID:getID,setID:setID,getNode:getNode,getNodeFromInstance:getNodeFromInstance,isValid:isValid,purgeID:purgeID};ReactPerf.measureMethods(ReactMount,"ReactMount",{_renderNewRootComponent:"_renderNewRootComponent",_mountImageIntoNode:"_mountImageIntoNode"}),module.exports=ReactMount;

},{"./DOMProperty":32,"./Object.assign":45,"./ReactBrowserEventEmitter":49,"./ReactCurrentOwner":57,"./ReactDOMFeatureFlags":62,"./ReactElement":73,"./ReactEmptyComponentRegistry":76,"./ReactInstanceHandles":82,"./ReactInstanceMap":83,"./ReactMarkupChecksum":85,"./ReactPerf":92,"./ReactReconciler":97,"./ReactUpdateQueue":103,"./ReactUpdates":104,"./instantiateReactComponent":139,"./setInnerHTML":145,"./shouldUpdateReactComponent":147,"./validateDOMNesting":149,"fbjs/lib/containsNode":154,"fbjs/lib/emptyObject":158,"fbjs/lib/invariant":165,"fbjs/lib/warning":174}],87:[function(require,module,exports){
"use strict";function enqueueInsertMarkup(e,n,t){updateQueue.push({parentID:e,parentNode:null,type:ReactMultiChildUpdateTypes.INSERT_MARKUP,markupIndex:markupQueue.push(n)-1,content:null,fromIndex:null,toIndex:t})}function enqueueMove(e,n,t){updateQueue.push({parentID:e,parentNode:null,type:ReactMultiChildUpdateTypes.MOVE_EXISTING,markupIndex:null,content:null,fromIndex:n,toIndex:t})}function enqueueRemove(e,n){updateQueue.push({parentID:e,parentNode:null,type:ReactMultiChildUpdateTypes.REMOVE_NODE,markupIndex:null,content:null,fromIndex:n,toIndex:null})}function enqueueSetMarkup(e,n){updateQueue.push({parentID:e,parentNode:null,type:ReactMultiChildUpdateTypes.SET_MARKUP,markupIndex:null,content:n,fromIndex:null,toIndex:null})}function enqueueTextContent(e,n){updateQueue.push({parentID:e,parentNode:null,type:ReactMultiChildUpdateTypes.TEXT_CONTENT,markupIndex:null,content:n,fromIndex:null,toIndex:null})}function processQueue(){updateQueue.length&&(ReactComponentEnvironment.processChildrenUpdates(updateQueue,markupQueue),clearQueue())}function clearQueue(){updateQueue.length=0,markupQueue.length=0}var ReactComponentEnvironment=require("./ReactComponentEnvironment"),ReactMultiChildUpdateTypes=require("./ReactMultiChildUpdateTypes"),ReactCurrentOwner=require("./ReactCurrentOwner"),ReactReconciler=require("./ReactReconciler"),ReactChildReconciler=require("./ReactChildReconciler"),flattenChildren=require("./flattenChildren"),updateDepth=0,updateQueue=[],markupQueue=[],ReactMultiChild={Mixin:{_reconcilerInstantiateChildren:function(e,n,t){return ReactChildReconciler.instantiateChildren(e,n,t)},_reconcilerUpdateChildren:function(e,n,t,u){var r;return r=flattenChildren(n),ReactChildReconciler.updateChildren(e,r,t,u)},mountChildren:function(e,n,t){var u=this._reconcilerInstantiateChildren(e,n,t);this._renderedChildren=u;var r=[],i=0;for(var o in u)if(u.hasOwnProperty(o)){var d=u[o],a=this._rootNodeID+o,l=ReactReconciler.mountComponent(d,a,n,t);d._mountIndex=i++,r.push(l)}return r},updateTextContent:function(e){updateDepth++;var n=!0;try{var t=this._renderedChildren;ReactChildReconciler.unmountChildren(t);for(var u in t)t.hasOwnProperty(u)&&this._unmountChild(t[u]);this.setTextContent(e),n=!1}finally{updateDepth--,updateDepth||(n?clearQueue():processQueue())}},updateMarkup:function(e){updateDepth++;var n=!0;try{var t=this._renderedChildren;ReactChildReconciler.unmountChildren(t);for(var u in t)t.hasOwnProperty(u)&&this._unmountChildByName(t[u],u);this.setMarkup(e),n=!1}finally{updateDepth--,updateDepth||(n?clearQueue():processQueue())}},updateChildren:function(e,n,t){updateDepth++;var u=!0;try{this._updateChildren(e,n,t),u=!1}finally{updateDepth--,updateDepth||(u?clearQueue():processQueue())}},_updateChildren:function(e,n,t){var u=this._renderedChildren,r=this._reconcilerUpdateChildren(u,e,n,t);if(this._renderedChildren=r,r||u){var i,o=0,d=0;for(i in r)if(r.hasOwnProperty(i)){var a=u&&u[i],l=r[i];a===l?(this.moveChild(a,d,o),o=Math.max(a._mountIndex,o),a._mountIndex=d):(a&&(o=Math.max(a._mountIndex,o),this._unmountChild(a)),this._mountChildByNameAtIndex(l,i,d,n,t)),d++}for(i in u)!u.hasOwnProperty(i)||r&&r.hasOwnProperty(i)||this._unmountChild(u[i])}},unmountChildren:function(){var e=this._renderedChildren;ReactChildReconciler.unmountChildren(e),this._renderedChildren=null},moveChild:function(e,n,t){e._mountIndex<t&&enqueueMove(this._rootNodeID,e._mountIndex,n)},createChild:function(e,n){enqueueInsertMarkup(this._rootNodeID,n,e._mountIndex)},removeChild:function(e){enqueueRemove(this._rootNodeID,e._mountIndex)},setTextContent:function(e){enqueueTextContent(this._rootNodeID,e)},setMarkup:function(e){enqueueSetMarkup(this._rootNodeID,e)},_mountChildByNameAtIndex:function(e,n,t,u,r){var i=this._rootNodeID+n,o=ReactReconciler.mountComponent(e,i,u,r);e._mountIndex=t,this.createChild(e,o)},_unmountChild:function(e){this.removeChild(e),e._mountIndex=null}}};module.exports=ReactMultiChild;

},{"./ReactChildReconciler":50,"./ReactComponentEnvironment":55,"./ReactCurrentOwner":57,"./ReactMultiChildUpdateTypes":88,"./ReactReconciler":97,"./flattenChildren":130}],88:[function(require,module,exports){
"use strict";var keyMirror=require("fbjs/lib/keyMirror"),ReactMultiChildUpdateTypes=keyMirror({INSERT_MARKUP:null,MOVE_EXISTING:null,REMOVE_NODE:null,SET_MARKUP:null,TEXT_CONTENT:null});module.exports=ReactMultiChildUpdateTypes;

},{"fbjs/lib/keyMirror":168}],89:[function(require,module,exports){
"use strict";function getComponentClassForElement(n){if("function"==typeof n.type)return n.type;var e=n.type,t=tagToComponentClass[e];return null==t&&(tagToComponentClass[e]=t=autoGenerateWrapperClass(e)),t}function createInternalComponent(n){return genericComponentClass?void 0:invariant(!1),new genericComponentClass(n.type,n.props)}function createInstanceForText(n){return new textComponentClass(n)}function isTextComponent(n){return n instanceof textComponentClass}var assign=require("./Object.assign"),invariant=require("fbjs/lib/invariant"),autoGenerateWrapperClass=null,genericComponentClass=null,tagToComponentClass={},textComponentClass=null,ReactNativeComponentInjection={injectGenericComponentClass:function(n){genericComponentClass=n},injectTextComponentClass:function(n){textComponentClass=n},injectComponentClasses:function(n){assign(tagToComponentClass,n)}},ReactNativeComponent={getComponentClassForElement:getComponentClassForElement,createInternalComponent:createInternalComponent,createInstanceForText:createInstanceForText,isTextComponent:isTextComponent,injection:ReactNativeComponentInjection};module.exports=ReactNativeComponent;

},{"./Object.assign":45,"fbjs/lib/invariant":165}],90:[function(require,module,exports){
"use strict";function warnTDZ(e,n){}var warning=require("fbjs/lib/warning"),ReactNoopUpdateQueue={isMounted:function(e){return!1},enqueueCallback:function(e,n){},enqueueForceUpdate:function(e){warnTDZ(e,"forceUpdate")},enqueueReplaceState:function(e,n){warnTDZ(e,"replaceState")},enqueueSetState:function(e,n){warnTDZ(e,"setState")},enqueueSetProps:function(e,n){warnTDZ(e,"setProps")},enqueueReplaceProps:function(e,n){warnTDZ(e,"replaceProps")}};module.exports=ReactNoopUpdateQueue;

},{"fbjs/lib/warning":174}],91:[function(require,module,exports){
"use strict";var invariant=require("fbjs/lib/invariant"),ReactOwner={isValidOwner:function(e){return!(!e||"function"!=typeof e.attachRef||"function"!=typeof e.detachRef)},addComponentAsRefTo:function(e,n,t){ReactOwner.isValidOwner(t)?void 0:invariant(!1),t.attachRef(n,e)},removeComponentAsRefFrom:function(e,n,t){ReactOwner.isValidOwner(t)?void 0:invariant(!1),t.getPublicInstance().refs[n]===e.getPublicInstance()&&t.detachRef(n)}};module.exports=ReactOwner;

},{"fbjs/lib/invariant":165}],92:[function(require,module,exports){
"use strict";function _noMeasure(e,r,t){return t}var ReactPerf={enableMeasure:!1,storedMeasure:_noMeasure,measureMethods:function(e,r,t){},measure:function(e,r,t){return t},injection:{injectMeasure:function(e){ReactPerf.storedMeasure=e}}};module.exports=ReactPerf;

},{}],93:[function(require,module,exports){
"use strict";var ReactPropTypeLocationNames={};module.exports=ReactPropTypeLocationNames;

},{}],94:[function(require,module,exports){
"use strict";var keyMirror=require("fbjs/lib/keyMirror"),ReactPropTypeLocations=keyMirror({prop:null,context:null,childContext:null});module.exports=ReactPropTypeLocations;

},{"fbjs/lib/keyMirror":168}],95:[function(require,module,exports){
"use strict";function createChainableTypeChecker(e){function r(r,n,t,a,c,o){if(a=a||ANONYMOUS,o=o||t,null==n[t]){var i=ReactPropTypeLocationNames[c];return r?new Error("Required "+i+" `"+o+"` was not specified in "+("`"+a+"`.")):null}return e(n,t,a,c,o)}var n=r.bind(null,!1);return n.isRequired=r.bind(null,!0),n}function createPrimitiveTypeChecker(e){function r(r,n,t,a,c){var o=r[n],i=getPropType(o);if(i!==e){var u=ReactPropTypeLocationNames[a],p=getPreciseType(o);return new Error("Invalid "+u+" `"+c+"` of type "+("`"+p+"` supplied to `"+t+"`, expected ")+("`"+e+"`."))}return null}return createChainableTypeChecker(r)}function createAnyTypeChecker(){return createChainableTypeChecker(emptyFunction.thatReturns(null))}function createArrayOfTypeChecker(e){function r(r,n,t,a,c){var o=r[n];if(!Array.isArray(o)){var i=ReactPropTypeLocationNames[a],u=getPropType(o);return new Error("Invalid "+i+" `"+c+"` of type "+("`"+u+"` supplied to `"+t+"`, expected an array."))}for(var p=0;p<o.length;p++){var l=e(o,p,t,a,c+"["+p+"]");if(l instanceof Error)return l}return null}return createChainableTypeChecker(r)}function createElementTypeChecker(){function e(e,r,n,t,a){if(!ReactElement.isValidElement(e[r])){var c=ReactPropTypeLocationNames[t];return new Error("Invalid "+c+" `"+a+"` supplied to "+("`"+n+"`, expected a single ReactElement."))}return null}return createChainableTypeChecker(e)}function createInstanceTypeChecker(e){function r(r,n,t,a,c){if(!(r[n]instanceof e)){var o=ReactPropTypeLocationNames[a],i=e.name||ANONYMOUS,u=getClassName(r[n]);return new Error("Invalid "+o+" `"+c+"` of type "+("`"+u+"` supplied to `"+t+"`, expected ")+("instance of `"+i+"`."))}return null}return createChainableTypeChecker(r)}function createEnumTypeChecker(e){function r(r,n,t,a,c){for(var o=r[n],i=0;i<e.length;i++)if(o===e[i])return null;var u=ReactPropTypeLocationNames[a],p=JSON.stringify(e);return new Error("Invalid "+u+" `"+c+"` of value `"+o+"` "+("supplied to `"+t+"`, expected one of "+p+"."))}return createChainableTypeChecker(Array.isArray(e)?r:function(){return new Error("Invalid argument supplied to oneOf, expected an instance of array.")})}function createObjectOfTypeChecker(e){function r(r,n,t,a,c){var o=r[n],i=getPropType(o);if("object"!==i){var u=ReactPropTypeLocationNames[a];return new Error("Invalid "+u+" `"+c+"` of type "+("`"+i+"` supplied to `"+t+"`, expected an object."))}for(var p in o)if(o.hasOwnProperty(p)){var l=e(o,p,t,a,c+"."+p);if(l instanceof Error)return l}return null}return createChainableTypeChecker(r)}function createUnionTypeChecker(e){function r(r,n,t,a,c){for(var o=0;o<e.length;o++){var i=e[o];if(null==i(r,n,t,a,c))return null}var u=ReactPropTypeLocationNames[a];return new Error("Invalid "+u+" `"+c+"` supplied to "+("`"+t+"`."))}return createChainableTypeChecker(Array.isArray(e)?r:function(){return new Error("Invalid argument supplied to oneOfType, expected an instance of array.")})}function createNodeChecker(){function e(e,r,n,t,a){if(!isNode(e[r])){var c=ReactPropTypeLocationNames[t];return new Error("Invalid "+c+" `"+a+"` supplied to "+("`"+n+"`, expected a ReactNode."))}return null}return createChainableTypeChecker(e)}function createShapeTypeChecker(e){function r(r,n,t,a,c){var o=r[n],i=getPropType(o);if("object"!==i){var u=ReactPropTypeLocationNames[a];return new Error("Invalid "+u+" `"+c+"` of type `"+i+"` "+("supplied to `"+t+"`, expected `object`."))}for(var p in e){var l=e[p];if(l){var y=l(o,p,t,a,c+"."+p);if(y)return y}}return null}return createChainableTypeChecker(r)}function isNode(e){switch(typeof e){case"number":case"string":case"undefined":return!0;case"boolean":return!e;case"object":if(Array.isArray(e))return e.every(isNode);if(null===e||ReactElement.isValidElement(e))return!0;var r=getIteratorFn(e);if(!r)return!1;var n,t=r.call(e);if(r!==e.entries){for(;!(n=t.next()).done;)if(!isNode(n.value))return!1}else for(;!(n=t.next()).done;){var a=n.value;if(a&&!isNode(a[1]))return!1}return!0;default:return!1}}function getPropType(e){var r=typeof e;return Array.isArray(e)?"array":e instanceof RegExp?"object":r}function getPreciseType(e){var r=getPropType(e);if("object"===r){if(e instanceof Date)return"date";if(e instanceof RegExp)return"regexp"}return r}function getClassName(e){return e.constructor&&e.constructor.name?e.constructor.name:"<<anonymous>>"}var ReactElement=require("./ReactElement"),ReactPropTypeLocationNames=require("./ReactPropTypeLocationNames"),emptyFunction=require("fbjs/lib/emptyFunction"),getIteratorFn=require("./getIteratorFn"),ANONYMOUS="<<anonymous>>",ReactPropTypes={array:createPrimitiveTypeChecker("array"),bool:createPrimitiveTypeChecker("boolean"),func:createPrimitiveTypeChecker("function"),number:createPrimitiveTypeChecker("number"),object:createPrimitiveTypeChecker("object"),string:createPrimitiveTypeChecker("string"),any:createAnyTypeChecker(),arrayOf:createArrayOfTypeChecker,element:createElementTypeChecker(),instanceOf:createInstanceTypeChecker,node:createNodeChecker(),objectOf:createObjectOfTypeChecker,oneOf:createEnumTypeChecker,oneOfType:createUnionTypeChecker,shape:createShapeTypeChecker};module.exports=ReactPropTypes;

},{"./ReactElement":73,"./ReactPropTypeLocationNames":93,"./getIteratorFn":136,"fbjs/lib/emptyFunction":157}],96:[function(require,module,exports){
"use strict";function ReactReconcileTransaction(e){this.reinitializeTransaction(),this.renderToStaticMarkup=!1,this.reactMountReady=CallbackQueue.getPooled(null),this.useCreateElement=!e&&ReactDOMFeatureFlags.useCreateElement}var CallbackQueue=require("./CallbackQueue"),PooledClass=require("./PooledClass"),ReactBrowserEventEmitter=require("./ReactBrowserEventEmitter"),ReactDOMFeatureFlags=require("./ReactDOMFeatureFlags"),ReactInputSelection=require("./ReactInputSelection"),Transaction=require("./Transaction"),assign=require("./Object.assign"),SELECTION_RESTORATION={initialize:ReactInputSelection.getSelectionInformation,close:ReactInputSelection.restoreSelection},EVENT_SUPPRESSION={initialize:function(){var e=ReactBrowserEventEmitter.isEnabled();return ReactBrowserEventEmitter.setEnabled(!1),e},close:function(e){ReactBrowserEventEmitter.setEnabled(e)}},ON_DOM_READY_QUEUEING={initialize:function(){this.reactMountReady.reset()},close:function(){this.reactMountReady.notifyAll()}},TRANSACTION_WRAPPERS=[SELECTION_RESTORATION,EVENT_SUPPRESSION,ON_DOM_READY_QUEUEING],Mixin={getTransactionWrappers:function(){return TRANSACTION_WRAPPERS},getReactMountReady:function(){return this.reactMountReady},destructor:function(){CallbackQueue.release(this.reactMountReady),this.reactMountReady=null}};assign(ReactReconcileTransaction.prototype,Transaction.Mixin,Mixin),PooledClass.addPoolingTo(ReactReconcileTransaction),module.exports=ReactReconcileTransaction;

},{"./CallbackQueue":28,"./Object.assign":45,"./PooledClass":46,"./ReactBrowserEventEmitter":49,"./ReactDOMFeatureFlags":62,"./ReactInputSelection":81,"./Transaction":121}],97:[function(require,module,exports){
"use strict";function attachRefs(){ReactRef.attachRefs(this,this._currentElement)}var ReactRef=require("./ReactRef"),ReactReconciler={mountComponent:function(e,t,n,c){var r=e.mountComponent(t,n,c);return e._currentElement&&null!=e._currentElement.ref&&n.getReactMountReady().enqueue(attachRefs,e),r},unmountComponent:function(e){ReactRef.detachRefs(e,e._currentElement),e.unmountComponent()},receiveComponent:function(e,t,n,c){var r=e._currentElement;if(t!==r||c!==e._context){var a=ReactRef.shouldUpdateRefs(r,t);a&&ReactRef.detachRefs(e,r),e.receiveComponent(t,n,c),a&&e._currentElement&&null!=e._currentElement.ref&&n.getReactMountReady().enqueue(attachRefs,e)}},performUpdateIfNecessary:function(e,t){e.performUpdateIfNecessary(t)}};module.exports=ReactReconciler;

},{"./ReactRef":98}],98:[function(require,module,exports){
"use strict";function attachRef(e,n,t){"function"==typeof e?e(n.getPublicInstance()):ReactOwner.addComponentAsRefTo(n,e,t)}function detachRef(e,n,t){"function"==typeof e?e(null):ReactOwner.removeComponentAsRefFrom(n,e,t)}var ReactOwner=require("./ReactOwner"),ReactRef={};ReactRef.attachRefs=function(e,n){if(null!==n&&n!==!1){var t=n.ref;null!=t&&attachRef(t,e,n._owner)}},ReactRef.shouldUpdateRefs=function(e,n){var t=null===e||e===!1,f=null===n||n===!1;return t||f||n._owner!==e._owner||n.ref!==e.ref},ReactRef.detachRefs=function(e,n){if(null!==n&&n!==!1){var t=n.ref;null!=t&&detachRef(t,e,n._owner)}},module.exports=ReactRef;

},{"./ReactOwner":91}],99:[function(require,module,exports){
"use strict";var ReactRootIndexInjection={injectCreateReactRootIndex:function(e){ReactRootIndex.createReactRootIndex=e}},ReactRootIndex={createReactRootIndex:null,injection:ReactRootIndexInjection};module.exports=ReactRootIndex;

},{}],100:[function(require,module,exports){
"use strict";var ReactServerBatchingStrategy={isBatchingUpdates:!1,batchedUpdates:function(t){}};module.exports=ReactServerBatchingStrategy;

},{}],101:[function(require,module,exports){
"use strict";function renderToString(e){ReactElement.isValidElement(e)?void 0:invariant(!1);var t;try{ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);var a=ReactInstanceHandles.createReactRootID();return t=ReactServerRenderingTransaction.getPooled(!1),t.perform(function(){var n=instantiateReactComponent(e,null),r=n.mountComponent(a,t,emptyObject);return ReactMarkupChecksum.addChecksumToMarkup(r)},null)}finally{ReactServerRenderingTransaction.release(t),ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy)}}function renderToStaticMarkup(e){ReactElement.isValidElement(e)?void 0:invariant(!1);var t;try{ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);var a=ReactInstanceHandles.createReactRootID();return t=ReactServerRenderingTransaction.getPooled(!0),t.perform(function(){var n=instantiateReactComponent(e,null);return n.mountComponent(a,t,emptyObject)},null)}finally{ReactServerRenderingTransaction.release(t),ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy)}}var ReactDefaultBatchingStrategy=require("./ReactDefaultBatchingStrategy"),ReactElement=require("./ReactElement"),ReactInstanceHandles=require("./ReactInstanceHandles"),ReactMarkupChecksum=require("./ReactMarkupChecksum"),ReactServerBatchingStrategy=require("./ReactServerBatchingStrategy"),ReactServerRenderingTransaction=require("./ReactServerRenderingTransaction"),ReactUpdates=require("./ReactUpdates"),emptyObject=require("fbjs/lib/emptyObject"),instantiateReactComponent=require("./instantiateReactComponent"),invariant=require("fbjs/lib/invariant");module.exports={renderToString:renderToString,renderToStaticMarkup:renderToStaticMarkup};

},{"./ReactDefaultBatchingStrategy":71,"./ReactElement":73,"./ReactInstanceHandles":82,"./ReactMarkupChecksum":85,"./ReactServerBatchingStrategy":100,"./ReactServerRenderingTransaction":102,"./ReactUpdates":104,"./instantiateReactComponent":139,"fbjs/lib/emptyObject":158,"fbjs/lib/invariant":165}],102:[function(require,module,exports){
"use strict";function ReactServerRenderingTransaction(e){this.reinitializeTransaction(),this.renderToStaticMarkup=e,this.reactMountReady=CallbackQueue.getPooled(null),this.useCreateElement=!1}var PooledClass=require("./PooledClass"),CallbackQueue=require("./CallbackQueue"),Transaction=require("./Transaction"),assign=require("./Object.assign"),emptyFunction=require("fbjs/lib/emptyFunction"),ON_DOM_READY_QUEUEING={initialize:function(){this.reactMountReady.reset()},close:emptyFunction},TRANSACTION_WRAPPERS=[ON_DOM_READY_QUEUEING],Mixin={getTransactionWrappers:function(){return TRANSACTION_WRAPPERS},getReactMountReady:function(){return this.reactMountReady},destructor:function(){CallbackQueue.release(this.reactMountReady),this.reactMountReady=null}};assign(ReactServerRenderingTransaction.prototype,Transaction.Mixin,Mixin),PooledClass.addPoolingTo(ReactServerRenderingTransaction),module.exports=ReactServerRenderingTransaction;

},{"./CallbackQueue":28,"./Object.assign":45,"./PooledClass":46,"./Transaction":121,"fbjs/lib/emptyFunction":157}],103:[function(require,module,exports){
"use strict";function enqueueUpdate(e){ReactUpdates.enqueueUpdate(e)}function getInternalInstanceReadyForUpdate(e,n){var t=ReactInstanceMap.get(e);return t?t:null}var ReactCurrentOwner=require("./ReactCurrentOwner"),ReactElement=require("./ReactElement"),ReactInstanceMap=require("./ReactInstanceMap"),ReactUpdates=require("./ReactUpdates"),assign=require("./Object.assign"),invariant=require("fbjs/lib/invariant"),warning=require("fbjs/lib/warning"),ReactUpdateQueue={isMounted:function(e){var n=ReactInstanceMap.get(e);return n?!!n._renderedComponent:!1},enqueueCallback:function(e,n){"function"!=typeof n?invariant(!1):void 0;var t=getInternalInstanceReadyForUpdate(e);return t?(t._pendingCallbacks?t._pendingCallbacks.push(n):t._pendingCallbacks=[n],void enqueueUpdate(t)):null},enqueueCallbackInternal:function(e,n){"function"!=typeof n?invariant(!1):void 0,e._pendingCallbacks?e._pendingCallbacks.push(n):e._pendingCallbacks=[n],enqueueUpdate(e)},enqueueForceUpdate:function(e){var n=getInternalInstanceReadyForUpdate(e,"forceUpdate");n&&(n._pendingForceUpdate=!0,enqueueUpdate(n))},enqueueReplaceState:function(e,n){var t=getInternalInstanceReadyForUpdate(e,"replaceState");t&&(t._pendingStateQueue=[n],t._pendingReplaceState=!0,enqueueUpdate(t))},enqueueSetState:function(e,n){var t=getInternalInstanceReadyForUpdate(e,"setState");if(t){var a=t._pendingStateQueue||(t._pendingStateQueue=[]);a.push(n),enqueueUpdate(t)}},enqueueSetProps:function(e,n){var t=getInternalInstanceReadyForUpdate(e,"setProps");t&&ReactUpdateQueue.enqueueSetPropsInternal(t,n)},enqueueSetPropsInternal:function(e,n){var t=e._topLevelWrapper;t?void 0:invariant(!1);var a=t._pendingElement||t._currentElement,r=a.props,u=assign({},r.props,n);t._pendingElement=ReactElement.cloneAndReplaceProps(a,ReactElement.cloneAndReplaceProps(r,u)),enqueueUpdate(t)},enqueueReplaceProps:function(e,n){var t=getInternalInstanceReadyForUpdate(e,"replaceProps");t&&ReactUpdateQueue.enqueueReplacePropsInternal(t,n)},enqueueReplacePropsInternal:function(e,n){var t=e._topLevelWrapper;t?void 0:invariant(!1);var a=t._pendingElement||t._currentElement,r=a.props;t._pendingElement=ReactElement.cloneAndReplaceProps(a,ReactElement.cloneAndReplaceProps(r,n)),enqueueUpdate(t)},enqueueElementInternal:function(e,n){e._pendingElement=n,enqueueUpdate(e)}};module.exports=ReactUpdateQueue;

},{"./Object.assign":45,"./ReactCurrentOwner":57,"./ReactElement":73,"./ReactInstanceMap":83,"./ReactUpdates":104,"fbjs/lib/invariant":165,"fbjs/lib/warning":174}],104:[function(require,module,exports){
"use strict";function ensureInjected(){ReactUpdates.ReactReconcileTransaction&&batchingStrategy?void 0:invariant(!1)}function ReactUpdatesFlushTransaction(){this.reinitializeTransaction(),this.dirtyComponentsLength=null,this.callbackQueue=CallbackQueue.getPooled(),this.reconcileTransaction=ReactUpdates.ReactReconcileTransaction.getPooled(!1)}function batchedUpdates(e,t,a,n,i,c){ensureInjected(),batchingStrategy.batchedUpdates(e,t,a,n,i,c)}function mountOrderComparator(e,t){return e._mountOrder-t._mountOrder}function runBatchedUpdates(e){var t=e.dirtyComponentsLength;t!==dirtyComponents.length?invariant(!1):void 0,dirtyComponents.sort(mountOrderComparator);for(var a=0;t>a;a++){var n=dirtyComponents[a],i=n._pendingCallbacks;if(n._pendingCallbacks=null,ReactReconciler.performUpdateIfNecessary(n,e.reconcileTransaction),i)for(var c=0;c<i.length;c++)e.callbackQueue.enqueue(i[c],n.getPublicInstance())}}function enqueueUpdate(e){return ensureInjected(),batchingStrategy.isBatchingUpdates?void dirtyComponents.push(e):void batchingStrategy.batchedUpdates(enqueueUpdate,e)}function asap(e,t){batchingStrategy.isBatchingUpdates?void 0:invariant(!1),asapCallbackQueue.enqueue(e,t),asapEnqueued=!0}var CallbackQueue=require("./CallbackQueue"),PooledClass=require("./PooledClass"),ReactPerf=require("./ReactPerf"),ReactReconciler=require("./ReactReconciler"),Transaction=require("./Transaction"),assign=require("./Object.assign"),invariant=require("fbjs/lib/invariant"),dirtyComponents=[],asapCallbackQueue=CallbackQueue.getPooled(),asapEnqueued=!1,batchingStrategy=null,NESTED_UPDATES={initialize:function(){this.dirtyComponentsLength=dirtyComponents.length},close:function(){this.dirtyComponentsLength!==dirtyComponents.length?(dirtyComponents.splice(0,this.dirtyComponentsLength),flushBatchedUpdates()):dirtyComponents.length=0}},UPDATE_QUEUEING={initialize:function(){this.callbackQueue.reset()},close:function(){this.callbackQueue.notifyAll()}},TRANSACTION_WRAPPERS=[NESTED_UPDATES,UPDATE_QUEUEING];assign(ReactUpdatesFlushTransaction.prototype,Transaction.Mixin,{getTransactionWrappers:function(){return TRANSACTION_WRAPPERS},destructor:function(){this.dirtyComponentsLength=null,CallbackQueue.release(this.callbackQueue),this.callbackQueue=null,ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction),this.reconcileTransaction=null},perform:function(e,t,a){return Transaction.Mixin.perform.call(this,this.reconcileTransaction.perform,this.reconcileTransaction,e,t,a)}}),PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);var flushBatchedUpdates=function(){for(;dirtyComponents.length||asapEnqueued;){if(dirtyComponents.length){var e=ReactUpdatesFlushTransaction.getPooled();e.perform(runBatchedUpdates,null,e),ReactUpdatesFlushTransaction.release(e)}if(asapEnqueued){asapEnqueued=!1;var t=asapCallbackQueue;asapCallbackQueue=CallbackQueue.getPooled(),t.notifyAll(),CallbackQueue.release(t)}}};flushBatchedUpdates=ReactPerf.measure("ReactUpdates","flushBatchedUpdates",flushBatchedUpdates);var ReactUpdatesInjection={injectReconcileTransaction:function(e){e?void 0:invariant(!1),ReactUpdates.ReactReconcileTransaction=e},injectBatchingStrategy:function(e){e?void 0:invariant(!1),"function"!=typeof e.batchedUpdates?invariant(!1):void 0,"boolean"!=typeof e.isBatchingUpdates?invariant(!1):void 0,batchingStrategy=e}},ReactUpdates={ReactReconcileTransaction:null,batchedUpdates:batchedUpdates,enqueueUpdate:enqueueUpdate,flushBatchedUpdates:flushBatchedUpdates,injection:ReactUpdatesInjection,asap:asap};module.exports=ReactUpdates;

},{"./CallbackQueue":28,"./Object.assign":45,"./PooledClass":46,"./ReactPerf":92,"./ReactReconciler":97,"./Transaction":121,"fbjs/lib/invariant":165}],105:[function(require,module,exports){
"use strict";module.exports="0.14.2";

},{}],106:[function(require,module,exports){
"use strict";var DOMProperty=require("./DOMProperty"),MUST_USE_ATTRIBUTE=DOMProperty.injection.MUST_USE_ATTRIBUTE,NS={xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace"},SVGDOMPropertyConfig={Properties:{clipPath:MUST_USE_ATTRIBUTE,cx:MUST_USE_ATTRIBUTE,cy:MUST_USE_ATTRIBUTE,d:MUST_USE_ATTRIBUTE,dx:MUST_USE_ATTRIBUTE,dy:MUST_USE_ATTRIBUTE,fill:MUST_USE_ATTRIBUTE,fillOpacity:MUST_USE_ATTRIBUTE,fontFamily:MUST_USE_ATTRIBUTE,fontSize:MUST_USE_ATTRIBUTE,fx:MUST_USE_ATTRIBUTE,fy:MUST_USE_ATTRIBUTE,gradientTransform:MUST_USE_ATTRIBUTE,gradientUnits:MUST_USE_ATTRIBUTE,markerEnd:MUST_USE_ATTRIBUTE,markerMid:MUST_USE_ATTRIBUTE,markerStart:MUST_USE_ATTRIBUTE,offset:MUST_USE_ATTRIBUTE,opacity:MUST_USE_ATTRIBUTE,patternContentUnits:MUST_USE_ATTRIBUTE,patternUnits:MUST_USE_ATTRIBUTE,points:MUST_USE_ATTRIBUTE,preserveAspectRatio:MUST_USE_ATTRIBUTE,r:MUST_USE_ATTRIBUTE,rx:MUST_USE_ATTRIBUTE,ry:MUST_USE_ATTRIBUTE,spreadMethod:MUST_USE_ATTRIBUTE,stopColor:MUST_USE_ATTRIBUTE,stopOpacity:MUST_USE_ATTRIBUTE,stroke:MUST_USE_ATTRIBUTE,strokeDasharray:MUST_USE_ATTRIBUTE,strokeLinecap:MUST_USE_ATTRIBUTE,strokeOpacity:MUST_USE_ATTRIBUTE,strokeWidth:MUST_USE_ATTRIBUTE,textAnchor:MUST_USE_ATTRIBUTE,transform:MUST_USE_ATTRIBUTE,version:MUST_USE_ATTRIBUTE,viewBox:MUST_USE_ATTRIBUTE,x1:MUST_USE_ATTRIBUTE,x2:MUST_USE_ATTRIBUTE,x:MUST_USE_ATTRIBUTE,xlinkActuate:MUST_USE_ATTRIBUTE,xlinkArcrole:MUST_USE_ATTRIBUTE,xlinkHref:MUST_USE_ATTRIBUTE,xlinkRole:MUST_USE_ATTRIBUTE,xlinkShow:MUST_USE_ATTRIBUTE,xlinkTitle:MUST_USE_ATTRIBUTE,xlinkType:MUST_USE_ATTRIBUTE,xmlBase:MUST_USE_ATTRIBUTE,xmlLang:MUST_USE_ATTRIBUTE,xmlSpace:MUST_USE_ATTRIBUTE,y1:MUST_USE_ATTRIBUTE,y2:MUST_USE_ATTRIBUTE,y:MUST_USE_ATTRIBUTE},DOMAttributeNamespaces:{xlinkActuate:NS.xlink,xlinkArcrole:NS.xlink,xlinkHref:NS.xlink,xlinkRole:NS.xlink,xlinkShow:NS.xlink,xlinkTitle:NS.xlink,xlinkType:NS.xlink,xmlBase:NS.xml,xmlLang:NS.xml,xmlSpace:NS.xml},DOMAttributeNames:{clipPath:"clip-path",fillOpacity:"fill-opacity",fontFamily:"font-family",fontSize:"font-size",gradientTransform:"gradientTransform",gradientUnits:"gradientUnits",markerEnd:"marker-end",markerMid:"marker-mid",markerStart:"marker-start",patternContentUnits:"patternContentUnits",patternUnits:"patternUnits",preserveAspectRatio:"preserveAspectRatio",spreadMethod:"spreadMethod",stopColor:"stop-color",stopOpacity:"stop-opacity",strokeDasharray:"stroke-dasharray",strokeLinecap:"stroke-linecap",strokeOpacity:"stroke-opacity",strokeWidth:"stroke-width",textAnchor:"text-anchor",viewBox:"viewBox",xlinkActuate:"xlink:actuate",xlinkArcrole:"xlink:arcrole",xlinkHref:"xlink:href",xlinkRole:"xlink:role",xlinkShow:"xlink:show",xlinkTitle:"xlink:title",xlinkType:"xlink:type",xmlBase:"xml:base",xmlLang:"xml:lang",xmlSpace:"xml:space"}};module.exports=SVGDOMPropertyConfig;

},{"./DOMProperty":32}],107:[function(require,module,exports){
"use strict";function getSelection(e){if("selectionStart"in e&&ReactInputSelection.hasSelectionCapabilities(e))return{start:e.selectionStart,end:e.selectionEnd};if(window.getSelection){var t=window.getSelection();return{anchorNode:t.anchorNode,anchorOffset:t.anchorOffset,focusNode:t.focusNode,focusOffset:t.focusOffset}}if(document.selection){var n=document.selection.createRange();return{parentElement:n.parentElement(),text:n.text,top:n.boundingTop,left:n.boundingLeft}}}function constructSelectEvent(e,t){if(mouseDown||null==activeElement||activeElement!==getActiveElement())return null;var n=getSelection(activeElement);if(!lastSelection||!shallowEqual(lastSelection,n)){lastSelection=n;var o=SyntheticEvent.getPooled(eventTypes.select,activeElementID,e,t);return o.type="select",o.target=activeElement,EventPropagators.accumulateTwoPhaseDispatches(o),o}return null}var EventConstants=require("./EventConstants"),EventPropagators=require("./EventPropagators"),ExecutionEnvironment=require("fbjs/lib/ExecutionEnvironment"),ReactInputSelection=require("./ReactInputSelection"),SyntheticEvent=require("./SyntheticEvent"),getActiveElement=require("fbjs/lib/getActiveElement"),isTextInputElement=require("./isTextInputElement"),keyOf=require("fbjs/lib/keyOf"),shallowEqual=require("fbjs/lib/shallowEqual"),topLevelTypes=EventConstants.topLevelTypes,skipSelectionChangeEvent=ExecutionEnvironment.canUseDOM&&"documentMode"in document&&document.documentMode<=11,eventTypes={select:{phasedRegistrationNames:{bubbled:keyOf({onSelect:null}),captured:keyOf({onSelectCapture:null})},dependencies:[topLevelTypes.topBlur,topLevelTypes.topContextMenu,topLevelTypes.topFocus,topLevelTypes.topKeyDown,topLevelTypes.topMouseDown,topLevelTypes.topMouseUp,topLevelTypes.topSelectionChange]}},activeElement=null,activeElementID=null,lastSelection=null,mouseDown=!1,hasListener=!1,ON_SELECT_KEY=keyOf({onSelect:null}),SelectEventPlugin={eventTypes:eventTypes,extractEvents:function(e,t,n,o,l){if(!hasListener)return null;switch(e){case topLevelTypes.topFocus:(isTextInputElement(t)||"true"===t.contentEditable)&&(activeElement=t,activeElementID=n,lastSelection=null);break;case topLevelTypes.topBlur:activeElement=null,activeElementID=null,lastSelection=null;break;case topLevelTypes.topMouseDown:mouseDown=!0;break;case topLevelTypes.topContextMenu:case topLevelTypes.topMouseUp:return mouseDown=!1,constructSelectEvent(o,l);case topLevelTypes.topSelectionChange:if(skipSelectionChangeEvent)break;case topLevelTypes.topKeyDown:case topLevelTypes.topKeyUp:return constructSelectEvent(o,l)}return null},didPutListener:function(e,t,n){t===ON_SELECT_KEY&&(hasListener=!0)}};module.exports=SelectEventPlugin;

},{"./EventConstants":37,"./EventPropagators":41,"./ReactInputSelection":81,"./SyntheticEvent":113,"./isTextInputElement":141,"fbjs/lib/ExecutionEnvironment":151,"fbjs/lib/getActiveElement":160,"fbjs/lib/keyOf":169,"fbjs/lib/shallowEqual":172}],108:[function(require,module,exports){
"use strict";var GLOBAL_MOUNT_POINT_MAX=Math.pow(2,53),ServerReactRootIndex={createReactRootIndex:function(){return Math.ceil(Math.random()*GLOBAL_MOUNT_POINT_MAX)}};module.exports=ServerReactRootIndex;

},{}],109:[function(require,module,exports){
"use strict";var EventConstants=require("./EventConstants"),EventListener=require("fbjs/lib/EventListener"),EventPropagators=require("./EventPropagators"),ReactMount=require("./ReactMount"),SyntheticClipboardEvent=require("./SyntheticClipboardEvent"),SyntheticEvent=require("./SyntheticEvent"),SyntheticFocusEvent=require("./SyntheticFocusEvent"),SyntheticKeyboardEvent=require("./SyntheticKeyboardEvent"),SyntheticMouseEvent=require("./SyntheticMouseEvent"),SyntheticDragEvent=require("./SyntheticDragEvent"),SyntheticTouchEvent=require("./SyntheticTouchEvent"),SyntheticUIEvent=require("./SyntheticUIEvent"),SyntheticWheelEvent=require("./SyntheticWheelEvent"),emptyFunction=require("fbjs/lib/emptyFunction"),getEventCharCode=require("./getEventCharCode"),invariant=require("fbjs/lib/invariant"),keyOf=require("fbjs/lib/keyOf"),topLevelTypes=EventConstants.topLevelTypes,eventTypes={abort:{phasedRegistrationNames:{bubbled:keyOf({onAbort:!0}),captured:keyOf({onAbortCapture:!0})}},blur:{phasedRegistrationNames:{bubbled:keyOf({onBlur:!0}),captured:keyOf({onBlurCapture:!0})}},canPlay:{phasedRegistrationNames:{bubbled:keyOf({onCanPlay:!0}),captured:keyOf({onCanPlayCapture:!0})}},canPlayThrough:{phasedRegistrationNames:{bubbled:keyOf({onCanPlayThrough:!0}),captured:keyOf({onCanPlayThroughCapture:!0})}},click:{phasedRegistrationNames:{bubbled:keyOf({onClick:!0}),captured:keyOf({onClickCapture:!0})}},contextMenu:{phasedRegistrationNames:{bubbled:keyOf({onContextMenu:!0}),captured:keyOf({onContextMenuCapture:!0})}},copy:{phasedRegistrationNames:{bubbled:keyOf({onCopy:!0}),captured:keyOf({onCopyCapture:!0})}},cut:{phasedRegistrationNames:{bubbled:keyOf({onCut:!0}),captured:keyOf({onCutCapture:!0})}},doubleClick:{phasedRegistrationNames:{bubbled:keyOf({onDoubleClick:!0}),captured:keyOf({onDoubleClickCapture:!0})}},drag:{phasedRegistrationNames:{bubbled:keyOf({onDrag:!0}),captured:keyOf({onDragCapture:!0})}},dragEnd:{phasedRegistrationNames:{bubbled:keyOf({onDragEnd:!0}),captured:keyOf({onDragEndCapture:!0})}},dragEnter:{phasedRegistrationNames:{bubbled:keyOf({onDragEnter:!0}),captured:keyOf({onDragEnterCapture:!0})}},dragExit:{phasedRegistrationNames:{bubbled:keyOf({onDragExit:!0}),captured:keyOf({onDragExitCapture:!0})}},dragLeave:{phasedRegistrationNames:{bubbled:keyOf({onDragLeave:!0}),captured:keyOf({onDragLeaveCapture:!0})}},dragOver:{phasedRegistrationNames:{bubbled:keyOf({onDragOver:!0}),captured:keyOf({onDragOverCapture:!0})}},dragStart:{phasedRegistrationNames:{bubbled:keyOf({onDragStart:!0}),captured:keyOf({onDragStartCapture:!0})}},drop:{phasedRegistrationNames:{bubbled:keyOf({onDrop:!0}),captured:keyOf({onDropCapture:!0})}},durationChange:{phasedRegistrationNames:{bubbled:keyOf({onDurationChange:!0}),captured:keyOf({onDurationChangeCapture:!0})}},emptied:{phasedRegistrationNames:{bubbled:keyOf({onEmptied:!0}),captured:keyOf({onEmptiedCapture:!0})}},encrypted:{phasedRegistrationNames:{bubbled:keyOf({onEncrypted:!0}),captured:keyOf({onEncryptedCapture:!0})}},ended:{phasedRegistrationNames:{bubbled:keyOf({onEnded:!0}),captured:keyOf({onEndedCapture:!0})}},error:{phasedRegistrationNames:{bubbled:keyOf({onError:!0}),captured:keyOf({onErrorCapture:!0})}},focus:{phasedRegistrationNames:{bubbled:keyOf({onFocus:!0}),captured:keyOf({onFocusCapture:!0})}},input:{phasedRegistrationNames:{bubbled:keyOf({onInput:!0}),captured:keyOf({onInputCapture:!0})}},keyDown:{phasedRegistrationNames:{bubbled:keyOf({onKeyDown:!0}),captured:keyOf({onKeyDownCapture:!0})}},keyPress:{phasedRegistrationNames:{bubbled:keyOf({onKeyPress:!0}),captured:keyOf({onKeyPressCapture:!0})}},keyUp:{phasedRegistrationNames:{bubbled:keyOf({onKeyUp:!0}),captured:keyOf({onKeyUpCapture:!0})}},load:{phasedRegistrationNames:{bubbled:keyOf({onLoad:!0}),captured:keyOf({onLoadCapture:!0})}},loadedData:{phasedRegistrationNames:{bubbled:keyOf({onLoadedData:!0}),captured:keyOf({onLoadedDataCapture:!0})}},loadedMetadata:{phasedRegistrationNames:{bubbled:keyOf({onLoadedMetadata:!0}),captured:keyOf({onLoadedMetadataCapture:!0})}},loadStart:{phasedRegistrationNames:{bubbled:keyOf({onLoadStart:!0}),captured:keyOf({onLoadStartCapture:!0})}},mouseDown:{phasedRegistrationNames:{bubbled:keyOf({onMouseDown:!0}),captured:keyOf({onMouseDownCapture:!0})}},mouseMove:{phasedRegistrationNames:{bubbled:keyOf({onMouseMove:!0}),captured:keyOf({onMouseMoveCapture:!0})}},mouseOut:{phasedRegistrationNames:{bubbled:keyOf({onMouseOut:!0}),captured:keyOf({onMouseOutCapture:!0})}},mouseOver:{phasedRegistrationNames:{bubbled:keyOf({onMouseOver:!0}),captured:keyOf({onMouseOverCapture:!0})}},mouseUp:{phasedRegistrationNames:{bubbled:keyOf({onMouseUp:!0}),captured:keyOf({onMouseUpCapture:!0})}},paste:{phasedRegistrationNames:{bubbled:keyOf({onPaste:!0}),captured:keyOf({onPasteCapture:!0})}},pause:{phasedRegistrationNames:{bubbled:keyOf({onPause:!0}),captured:keyOf({onPauseCapture:!0})}},play:{phasedRegistrationNames:{bubbled:keyOf({onPlay:!0}),captured:keyOf({onPlayCapture:!0})}},playing:{phasedRegistrationNames:{bubbled:keyOf({onPlaying:!0}),captured:keyOf({onPlayingCapture:!0})}},progress:{phasedRegistrationNames:{bubbled:keyOf({onProgress:!0}),captured:keyOf({onProgressCapture:!0})}},rateChange:{phasedRegistrationNames:{bubbled:keyOf({onRateChange:!0}),captured:keyOf({onRateChangeCapture:!0})}},reset:{phasedRegistrationNames:{bubbled:keyOf({onReset:!0}),captured:keyOf({onResetCapture:!0})}},scroll:{phasedRegistrationNames:{bubbled:keyOf({onScroll:!0}),captured:keyOf({onScrollCapture:!0})}},seeked:{phasedRegistrationNames:{bubbled:keyOf({onSeeked:!0}),captured:keyOf({onSeekedCapture:!0})}},seeking:{phasedRegistrationNames:{bubbled:keyOf({onSeeking:!0}),captured:keyOf({onSeekingCapture:!0})}},stalled:{phasedRegistrationNames:{bubbled:keyOf({onStalled:!0}),captured:keyOf({onStalledCapture:!0})}},submit:{phasedRegistrationNames:{bubbled:keyOf({onSubmit:!0}),captured:keyOf({onSubmitCapture:!0})}},suspend:{phasedRegistrationNames:{bubbled:keyOf({onSuspend:!0}),captured:keyOf({onSuspendCapture:!0})}},timeUpdate:{phasedRegistrationNames:{bubbled:keyOf({onTimeUpdate:!0}),captured:keyOf({onTimeUpdateCapture:!0})}},touchCancel:{phasedRegistrationNames:{bubbled:keyOf({onTouchCancel:!0}),captured:keyOf({onTouchCancelCapture:!0})}},touchEnd:{phasedRegistrationNames:{bubbled:keyOf({onTouchEnd:!0}),captured:keyOf({onTouchEndCapture:!0})}},touchMove:{phasedRegistrationNames:{bubbled:keyOf({onTouchMove:!0}),captured:keyOf({onTouchMoveCapture:!0})}},touchStart:{phasedRegistrationNames:{bubbled:keyOf({onTouchStart:!0}),captured:keyOf({onTouchStartCapture:!0})}},volumeChange:{phasedRegistrationNames:{bubbled:keyOf({onVolumeChange:!0}),captured:keyOf({onVolumeChangeCapture:!0})}},waiting:{phasedRegistrationNames:{bubbled:keyOf({onWaiting:!0}),captured:keyOf({onWaitingCapture:!0})}},wheel:{phasedRegistrationNames:{bubbled:keyOf({onWheel:!0}),captured:keyOf({onWheelCapture:!0})}}},topLevelEventsToDispatchConfig={topAbort:eventTypes.abort,topBlur:eventTypes.blur,topCanPlay:eventTypes.canPlay,topCanPlayThrough:eventTypes.canPlayThrough,topClick:eventTypes.click,topContextMenu:eventTypes.contextMenu,topCopy:eventTypes.copy,topCut:eventTypes.cut,topDoubleClick:eventTypes.doubleClick,topDrag:eventTypes.drag,topDragEnd:eventTypes.dragEnd,topDragEnter:eventTypes.dragEnter,topDragExit:eventTypes.dragExit,topDragLeave:eventTypes.dragLeave,topDragOver:eventTypes.dragOver,topDragStart:eventTypes.dragStart,topDrop:eventTypes.drop,topDurationChange:eventTypes.durationChange,topEmptied:eventTypes.emptied,topEncrypted:eventTypes.encrypted,topEnded:eventTypes.ended,topError:eventTypes.error,topFocus:eventTypes.focus,topInput:eventTypes.input,topKeyDown:eventTypes.keyDown,topKeyPress:eventTypes.keyPress,topKeyUp:eventTypes.keyUp,topLoad:eventTypes.load,topLoadedData:eventTypes.loadedData,topLoadedMetadata:eventTypes.loadedMetadata,topLoadStart:eventTypes.loadStart,topMouseDown:eventTypes.mouseDown,topMouseMove:eventTypes.mouseMove,topMouseOut:eventTypes.mouseOut,topMouseOver:eventTypes.mouseOver,topMouseUp:eventTypes.mouseUp,topPaste:eventTypes.paste,topPause:eventTypes.pause,topPlay:eventTypes.play,topPlaying:eventTypes.playing,topProgress:eventTypes.progress,topRateChange:eventTypes.rateChange,topReset:eventTypes.reset,topScroll:eventTypes.scroll,topSeeked:eventTypes.seeked,topSeeking:eventTypes.seeking,topStalled:eventTypes.stalled,topSubmit:eventTypes.submit,topSuspend:eventTypes.suspend,topTimeUpdate:eventTypes.timeUpdate,topTouchCancel:eventTypes.touchCancel,topTouchEnd:eventTypes.touchEnd,topTouchMove:eventTypes.touchMove,topTouchStart:eventTypes.touchStart,topVolumeChange:eventTypes.volumeChange,topWaiting:eventTypes.waiting,topWheel:eventTypes.wheel};for(var type in topLevelEventsToDispatchConfig)topLevelEventsToDispatchConfig[type].dependencies=[type];var ON_CLICK_KEY=keyOf({onClick:null}),onClickListeners={},SimpleEventPlugin={eventTypes:eventTypes,extractEvents:function(e,t,a,o,p){var s=topLevelEventsToDispatchConfig[e];if(!s)return null;var n;switch(e){case topLevelTypes.topAbort:case topLevelTypes.topCanPlay:case topLevelTypes.topCanPlayThrough:case topLevelTypes.topDurationChange:case topLevelTypes.topEmptied:case topLevelTypes.topEncrypted:case topLevelTypes.topEnded:case topLevelTypes.topError:case topLevelTypes.topInput:case topLevelTypes.topLoad:case topLevelTypes.topLoadedData:case topLevelTypes.topLoadedMetadata:case topLevelTypes.topLoadStart:case topLevelTypes.topPause:case topLevelTypes.topPlay:case topLevelTypes.topPlaying:case topLevelTypes.topProgress:case topLevelTypes.topRateChange:case topLevelTypes.topReset:case topLevelTypes.topSeeked:case topLevelTypes.topSeeking:case topLevelTypes.topStalled:case topLevelTypes.topSubmit:case topLevelTypes.topSuspend:case topLevelTypes.topTimeUpdate:case topLevelTypes.topVolumeChange:case topLevelTypes.topWaiting:n=SyntheticEvent;break;case topLevelTypes.topKeyPress:if(0===getEventCharCode(o))return null;case topLevelTypes.topKeyDown:case topLevelTypes.topKeyUp:n=SyntheticKeyboardEvent;break;case topLevelTypes.topBlur:case topLevelTypes.topFocus:n=SyntheticFocusEvent;break;case topLevelTypes.topClick:if(2===o.button)return null;case topLevelTypes.topContextMenu:case topLevelTypes.topDoubleClick:case topLevelTypes.topMouseDown:case topLevelTypes.topMouseMove:case topLevelTypes.topMouseOut:case topLevelTypes.topMouseOver:case topLevelTypes.topMouseUp:n=SyntheticMouseEvent;break;case topLevelTypes.topDrag:case topLevelTypes.topDragEnd:case topLevelTypes.topDragEnter:case topLevelTypes.topDragExit:case topLevelTypes.topDragLeave:case topLevelTypes.topDragOver:case topLevelTypes.topDragStart:case topLevelTypes.topDrop:n=SyntheticDragEvent;break;case topLevelTypes.topTouchCancel:case topLevelTypes.topTouchEnd:case topLevelTypes.topTouchMove:case topLevelTypes.topTouchStart:n=SyntheticTouchEvent;break;case topLevelTypes.topScroll:n=SyntheticUIEvent;break;case topLevelTypes.topWheel:n=SyntheticWheelEvent;break;case topLevelTypes.topCopy:case topLevelTypes.topCut:case topLevelTypes.topPaste:n=SyntheticClipboardEvent}n?void 0:invariant(!1);var r=n.getPooled(s,a,o,p);return EventPropagators.accumulateTwoPhaseDispatches(r),r},didPutListener:function(e,t,a){if(t===ON_CLICK_KEY){var o=ReactMount.getNode(e);onClickListeners[e]||(onClickListeners[e]=EventListener.listen(o,"click",emptyFunction))}},willDeleteListener:function(e,t){t===ON_CLICK_KEY&&(onClickListeners[e].remove(),delete onClickListeners[e])}};module.exports=SimpleEventPlugin;

},{"./EventConstants":37,"./EventPropagators":41,"./ReactMount":86,"./SyntheticClipboardEvent":110,"./SyntheticDragEvent":112,"./SyntheticEvent":113,"./SyntheticFocusEvent":114,"./SyntheticKeyboardEvent":116,"./SyntheticMouseEvent":117,"./SyntheticTouchEvent":118,"./SyntheticUIEvent":119,"./SyntheticWheelEvent":120,"./getEventCharCode":132,"fbjs/lib/EventListener":150,"fbjs/lib/emptyFunction":157,"fbjs/lib/invariant":165,"fbjs/lib/keyOf":169}],110:[function(require,module,exports){
"use strict";function SyntheticClipboardEvent(t,e,n,a){SyntheticEvent.call(this,t,e,n,a)}var SyntheticEvent=require("./SyntheticEvent"),ClipboardEventInterface={clipboardData:function(t){return"clipboardData"in t?t.clipboardData:window.clipboardData}};SyntheticEvent.augmentClass(SyntheticClipboardEvent,ClipboardEventInterface),module.exports=SyntheticClipboardEvent;

},{"./SyntheticEvent":113}],111:[function(require,module,exports){
"use strict";function SyntheticCompositionEvent(t,n,e,i){SyntheticEvent.call(this,t,n,e,i)}var SyntheticEvent=require("./SyntheticEvent"),CompositionEventInterface={data:null};SyntheticEvent.augmentClass(SyntheticCompositionEvent,CompositionEventInterface),module.exports=SyntheticCompositionEvent;

},{"./SyntheticEvent":113}],112:[function(require,module,exports){
"use strict";function SyntheticDragEvent(t,e,n,a){SyntheticMouseEvent.call(this,t,e,n,a)}var SyntheticMouseEvent=require("./SyntheticMouseEvent"),DragEventInterface={dataTransfer:null};SyntheticMouseEvent.augmentClass(SyntheticDragEvent,DragEventInterface),module.exports=SyntheticDragEvent;

},{"./SyntheticMouseEvent":117}],113:[function(require,module,exports){
"use strict";function SyntheticEvent(t,e,n,r){this.dispatchConfig=t,this.dispatchMarker=e,this.nativeEvent=n,this.target=r,this.currentTarget=r;var s=this.constructor.Interface;for(var a in s)if(s.hasOwnProperty(a)){var i=s[a];i?this[a]=i(n):this[a]=n[a]}var o=null!=n.defaultPrevented?n.defaultPrevented:n.returnValue===!1;o?this.isDefaultPrevented=emptyFunction.thatReturnsTrue:this.isDefaultPrevented=emptyFunction.thatReturnsFalse,this.isPropagationStopped=emptyFunction.thatReturnsFalse}var PooledClass=require("./PooledClass"),assign=require("./Object.assign"),emptyFunction=require("fbjs/lib/emptyFunction"),warning=require("fbjs/lib/warning"),EventInterface={type:null,currentTarget:emptyFunction.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(t){return t.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};assign(SyntheticEvent.prototype,{preventDefault:function(){this.defaultPrevented=!0;var t=this.nativeEvent;t&&(t.preventDefault?t.preventDefault():t.returnValue=!1,this.isDefaultPrevented=emptyFunction.thatReturnsTrue)},stopPropagation:function(){var t=this.nativeEvent;t&&(t.stopPropagation?t.stopPropagation():t.cancelBubble=!0,this.isPropagationStopped=emptyFunction.thatReturnsTrue)},persist:function(){this.isPersistent=emptyFunction.thatReturnsTrue},isPersistent:emptyFunction.thatReturnsFalse,destructor:function(){var t=this.constructor.Interface;for(var e in t)this[e]=null;this.dispatchConfig=null,this.dispatchMarker=null,this.nativeEvent=null}}),SyntheticEvent.Interface=EventInterface,SyntheticEvent.augmentClass=function(t,e){var n=this,r=Object.create(n.prototype);assign(r,t.prototype),t.prototype=r,t.prototype.constructor=t,t.Interface=assign({},n.Interface,e),t.augmentClass=n.augmentClass,PooledClass.addPoolingTo(t,PooledClass.fourArgumentPooler)},PooledClass.addPoolingTo(SyntheticEvent,PooledClass.fourArgumentPooler),module.exports=SyntheticEvent;

},{"./Object.assign":45,"./PooledClass":46,"fbjs/lib/emptyFunction":157,"fbjs/lib/warning":174}],114:[function(require,module,exports){
"use strict";function SyntheticFocusEvent(t,e,n,c){SyntheticUIEvent.call(this,t,e,n,c)}var SyntheticUIEvent=require("./SyntheticUIEvent"),FocusEventInterface={relatedTarget:null};SyntheticUIEvent.augmentClass(SyntheticFocusEvent,FocusEventInterface),module.exports=SyntheticFocusEvent;

},{"./SyntheticUIEvent":119}],115:[function(require,module,exports){
"use strict";function SyntheticInputEvent(t,n,e,c){SyntheticEvent.call(this,t,n,e,c)}var SyntheticEvent=require("./SyntheticEvent"),InputEventInterface={data:null};SyntheticEvent.augmentClass(SyntheticInputEvent,InputEventInterface),module.exports=SyntheticInputEvent;

},{"./SyntheticEvent":113}],116:[function(require,module,exports){
"use strict";function SyntheticKeyboardEvent(e,t,n,r){SyntheticUIEvent.call(this,e,t,n,r)}var SyntheticUIEvent=require("./SyntheticUIEvent"),getEventCharCode=require("./getEventCharCode"),getEventKey=require("./getEventKey"),getEventModifierState=require("./getEventModifierState"),KeyboardEventInterface={key:getEventKey,location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:getEventModifierState,charCode:function(e){return"keypress"===e.type?getEventCharCode(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?getEventCharCode(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}};SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent,KeyboardEventInterface),module.exports=SyntheticKeyboardEvent;

},{"./SyntheticUIEvent":119,"./getEventCharCode":132,"./getEventKey":133,"./getEventModifierState":134}],117:[function(require,module,exports){
"use strict";function SyntheticMouseEvent(e,t,n,r){SyntheticUIEvent.call(this,e,t,n,r)}var SyntheticUIEvent=require("./SyntheticUIEvent"),ViewportMetrics=require("./ViewportMetrics"),getEventModifierState=require("./getEventModifierState"),MouseEventInterface={screenX:null,screenY:null,clientX:null,clientY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:getEventModifierState,button:function(e){var t=e.button;return"which"in e?t:2===t?2:4===t?1:0},buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},pageX:function(e){return"pageX"in e?e.pageX:e.clientX+ViewportMetrics.currentScrollLeft},pageY:function(e){return"pageY"in e?e.pageY:e.clientY+ViewportMetrics.currentScrollTop}};SyntheticUIEvent.augmentClass(SyntheticMouseEvent,MouseEventInterface),module.exports=SyntheticMouseEvent;

},{"./SyntheticUIEvent":119,"./ViewportMetrics":122,"./getEventModifierState":134}],118:[function(require,module,exports){
"use strict";function SyntheticTouchEvent(e,t,n,c){SyntheticUIEvent.call(this,e,t,n,c)}var SyntheticUIEvent=require("./SyntheticUIEvent"),getEventModifierState=require("./getEventModifierState"),TouchEventInterface={touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:getEventModifierState};SyntheticUIEvent.augmentClass(SyntheticTouchEvent,TouchEventInterface),module.exports=SyntheticTouchEvent;

},{"./SyntheticUIEvent":119,"./getEventModifierState":134}],119:[function(require,module,exports){
"use strict";function SyntheticUIEvent(e,t,n,i){SyntheticEvent.call(this,e,t,n,i)}var SyntheticEvent=require("./SyntheticEvent"),getEventTarget=require("./getEventTarget"),UIEventInterface={view:function(e){if(e.view)return e.view;var t=getEventTarget(e);if(null!=t&&t.window===t)return t;var n=t.ownerDocument;return n?n.defaultView||n.parentWindow:window},detail:function(e){return e.detail||0}};SyntheticEvent.augmentClass(SyntheticUIEvent,UIEventInterface),module.exports=SyntheticUIEvent;

},{"./SyntheticEvent":113,"./getEventTarget":135}],120:[function(require,module,exports){
"use strict";function SyntheticWheelEvent(e,t,n,l){SyntheticMouseEvent.call(this,e,t,n,l)}var SyntheticMouseEvent=require("./SyntheticMouseEvent"),WheelEventInterface={deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null};SyntheticMouseEvent.augmentClass(SyntheticWheelEvent,WheelEventInterface),module.exports=SyntheticWheelEvent;

},{"./SyntheticMouseEvent":117}],121:[function(require,module,exports){
"use strict";var invariant=require("fbjs/lib/invariant"),Mixin={reinitializeTransaction:function(){this.transactionWrappers=this.getTransactionWrappers(),this.wrapperInitData?this.wrapperInitData.length=0:this.wrapperInitData=[],this._isInTransaction=!1},_isInTransaction:!1,getTransactionWrappers:null,isInTransaction:function(){return!!this._isInTransaction},perform:function(i,t,a,n,r,s,l,e){this.isInTransaction()?invariant(!1):void 0;var c,o;try{this._isInTransaction=!0,c=!0,this.initializeAll(0),o=i.call(t,a,n,r,s,l,e),c=!1}finally{try{if(c)try{this.closeAll(0)}catch(h){}else this.closeAll(0)}finally{this._isInTransaction=!1}}return o},initializeAll:function(i){for(var t=this.transactionWrappers,a=i;a<t.length;a++){var n=t[a];try{this.wrapperInitData[a]=Transaction.OBSERVED_ERROR,this.wrapperInitData[a]=n.initialize?n.initialize.call(this):null}finally{if(this.wrapperInitData[a]===Transaction.OBSERVED_ERROR)try{this.initializeAll(a+1)}catch(r){}}}},closeAll:function(i){this.isInTransaction()?void 0:invariant(!1);for(var t=this.transactionWrappers,a=i;a<t.length;a++){var n,r=t[a],s=this.wrapperInitData[a];try{n=!0,s!==Transaction.OBSERVED_ERROR&&r.close&&r.close.call(this,s),n=!1}finally{if(n)try{this.closeAll(a+1)}catch(l){}}}this.wrapperInitData.length=0}},Transaction={Mixin:Mixin,OBSERVED_ERROR:{}};module.exports=Transaction;

},{"fbjs/lib/invariant":165}],122:[function(require,module,exports){
"use strict";var ViewportMetrics={currentScrollLeft:0,currentScrollTop:0,refreshScrollValues:function(r){ViewportMetrics.currentScrollLeft=r.x,ViewportMetrics.currentScrollTop=r.y}};module.exports=ViewportMetrics;

},{}],123:[function(require,module,exports){
"use strict";function accumulateInto(r,a){if(null==a?invariant(!1):void 0,null==r)return a;var n=Array.isArray(r),i=Array.isArray(a);return n&&i?(r.push.apply(r,a),r):n?(r.push(a),r):i?[r].concat(a):[r,a]}var invariant=require("fbjs/lib/invariant");module.exports=accumulateInto;

},{"fbjs/lib/invariant":165}],124:[function(require,module,exports){
"use strict";function adler32(r){for(var e=1,t=0,o=0,a=r.length,d=-4&a;d>o;){for(;o<Math.min(o+4096,d);o+=4)t+=(e+=r.charCodeAt(o))+(e+=r.charCodeAt(o+1))+(e+=r.charCodeAt(o+2))+(e+=r.charCodeAt(o+3));e%=MOD,t%=MOD}for(;a>o;o++)t+=e+=r.charCodeAt(o);return e%=MOD,t%=MOD,e|t<<16}var MOD=65521;module.exports=adler32;

},{}],125:[function(require,module,exports){
"use strict";var canDefineProperty=!1;module.exports=canDefineProperty;

},{}],126:[function(require,module,exports){
"use strict";function dangerousStyleValue(e,r){var s=null==r||"boolean"==typeof r||""===r;if(s)return"";var t=isNaN(r);return t||0===r||isUnitlessNumber.hasOwnProperty(e)&&isUnitlessNumber[e]?""+r:("string"==typeof r&&(r=r.trim()),r+"px")}var CSSProperty=require("./CSSProperty"),isUnitlessNumber=CSSProperty.isUnitlessNumber;module.exports=dangerousStyleValue;

},{"./CSSProperty":26}],127:[function(require,module,exports){
"use strict";function deprecated(e,r,i,n,s){return s}var assign=require("./Object.assign"),warning=require("fbjs/lib/warning");module.exports=deprecated;

},{"./Object.assign":45,"fbjs/lib/warning":174}],128:[function(require,module,exports){
"use strict";function escaper(e){return ESCAPE_LOOKUP[e]}function escapeTextContentForBrowser(e){return(""+e).replace(ESCAPE_REGEX,escaper)}var ESCAPE_LOOKUP={"&":"&amp;",">":"&gt;","<":"&lt;",'"':"&quot;","'":"&#x27;"},ESCAPE_REGEX=/[&><"']/g;module.exports=escapeTextContentForBrowser;

},{}],129:[function(require,module,exports){
"use strict";function findDOMNode(e){return null==e?null:1===e.nodeType?e:ReactInstanceMap.has(e)?ReactMount.getNodeFromInstance(e):(null!=e.render&&"function"==typeof e.render?invariant(!1):void 0,void invariant(!1))}var ReactCurrentOwner=require("./ReactCurrentOwner"),ReactInstanceMap=require("./ReactInstanceMap"),ReactMount=require("./ReactMount"),invariant=require("fbjs/lib/invariant"),warning=require("fbjs/lib/warning");module.exports=findDOMNode;

},{"./ReactCurrentOwner":57,"./ReactInstanceMap":83,"./ReactMount":86,"fbjs/lib/invariant":165,"fbjs/lib/warning":174}],130:[function(require,module,exports){
"use strict";function flattenSingleChildIntoContext(e,n,r){var l=e,t=void 0===l[r];t&&null!=n&&(l[r]=n)}function flattenChildren(e){if(null==e)return e;var n={};return traverseAllChildren(e,flattenSingleChildIntoContext,n),n}var traverseAllChildren=require("./traverseAllChildren"),warning=require("fbjs/lib/warning");module.exports=flattenChildren;

},{"./traverseAllChildren":148,"fbjs/lib/warning":174}],131:[function(require,module,exports){
"use strict";var forEachAccumulated=function(c,r,a){Array.isArray(c)?c.forEach(r,a):c&&r.call(a,c)};module.exports=forEachAccumulated;

},{}],132:[function(require,module,exports){
"use strict";function getEventCharCode(e){var r,t=e.keyCode;return"charCode"in e?(r=e.charCode,0===r&&13===t&&(r=13)):r=t,r>=32||13===r?r:0}module.exports=getEventCharCode;

},{}],133:[function(require,module,exports){
"use strict";function getEventKey(e){if(e.key){var r=normalizeKey[e.key]||e.key;if("Unidentified"!==r)return r}if("keypress"===e.type){var t=getEventCharCode(e);return 13===t?"Enter":String.fromCharCode(t)}return"keydown"===e.type||"keyup"===e.type?translateToKey[e.keyCode]||"Unidentified":""}var getEventCharCode=require("./getEventCharCode"),normalizeKey={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},translateToKey={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"};module.exports=getEventKey;

},{"./getEventCharCode":132}],134:[function(require,module,exports){
"use strict";function modifierStateGetter(t){var e=this,r=e.nativeEvent;if(r.getModifierState)return r.getModifierState(t);var i=modifierKeyToProp[t];return i?!!r[i]:!1}function getEventModifierState(t){return modifierStateGetter}var modifierKeyToProp={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};module.exports=getEventModifierState;

},{}],135:[function(require,module,exports){
"use strict";function getEventTarget(e){var t=e.target||e.srcElement||window;return 3===t.nodeType?t.parentNode:t}module.exports=getEventTarget;

},{}],136:[function(require,module,exports){
"use strict";function getIteratorFn(t){var o=t&&(ITERATOR_SYMBOL&&t[ITERATOR_SYMBOL]||t[FAUX_ITERATOR_SYMBOL]);return"function"==typeof o?o:void 0}var ITERATOR_SYMBOL="function"==typeof Symbol&&Symbol.iterator,FAUX_ITERATOR_SYMBOL="@@iterator";module.exports=getIteratorFn;

},{}],137:[function(require,module,exports){
"use strict";function getLeafNode(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function getSiblingNode(e){for(;e;){if(e.nextSibling)return e.nextSibling;e=e.parentNode}}function getNodeForCharacterOffset(e,t){for(var o=getLeafNode(e),n=0,r=0;o;){if(3===o.nodeType){if(r=n+o.textContent.length,t>=n&&r>=t)return{node:o,offset:t-n};n=r}o=getLeafNode(getSiblingNode(o))}}module.exports=getNodeForCharacterOffset;

},{}],138:[function(require,module,exports){
"use strict";function getTextContentAccessor(){return!contentKey&&ExecutionEnvironment.canUseDOM&&(contentKey="textContent"in document.documentElement?"textContent":"innerText"),contentKey}var ExecutionEnvironment=require("fbjs/lib/ExecutionEnvironment"),contentKey=null;module.exports=getTextContentAccessor;

},{"fbjs/lib/ExecutionEnvironment":151}],139:[function(require,module,exports){
"use strict";function getDeclarationErrorAddendum(e){if(e){var t=e.getName();if(t)return" Check the render method of `"+t+"`."}return""}function isInternalComponentType(e){return"function"==typeof e&&"undefined"!=typeof e.prototype&&"function"==typeof e.prototype.mountComponent&&"function"==typeof e.prototype.receiveComponent}function instantiateReactComponent(e){var t;if(null===e||e===!1)t=new ReactEmptyComponent(instantiateReactComponent);else if("object"==typeof e){var n=e;!n||"function"!=typeof n.type&&"string"!=typeof n.type?invariant(!1):void 0,t="string"==typeof n.type?ReactNativeComponent.createInternalComponent(n):isInternalComponentType(n.type)?new n.type(n):new ReactCompositeComponentWrapper}else"string"==typeof e||"number"==typeof e?t=ReactNativeComponent.createInstanceForText(e):invariant(!1);return t.construct(e),t._mountIndex=0,t._mountImage=null,t}var ReactCompositeComponent=require("./ReactCompositeComponent"),ReactEmptyComponent=require("./ReactEmptyComponent"),ReactNativeComponent=require("./ReactNativeComponent"),assign=require("./Object.assign"),invariant=require("fbjs/lib/invariant"),warning=require("fbjs/lib/warning"),ReactCompositeComponentWrapper=function(){};assign(ReactCompositeComponentWrapper.prototype,ReactCompositeComponent.Mixin,{_instantiateReactComponent:instantiateReactComponent}),module.exports=instantiateReactComponent;

},{"./Object.assign":45,"./ReactCompositeComponent":56,"./ReactEmptyComponent":75,"./ReactNativeComponent":89,"fbjs/lib/invariant":165,"fbjs/lib/warning":174}],140:[function(require,module,exports){
"use strict";function isEventSupported(e,t){if(!ExecutionEnvironment.canUseDOM||t&&!("addEventListener"in document))return!1;var n="on"+e,u=n in document;if(!u){var i=document.createElement("div");i.setAttribute(n,"return;"),u="function"==typeof i[n]}return!u&&useHasFeature&&"wheel"===e&&(u=document.implementation.hasFeature("Events.wheel","3.0")),u}var ExecutionEnvironment=require("fbjs/lib/ExecutionEnvironment"),useHasFeature;ExecutionEnvironment.canUseDOM&&(useHasFeature=document.implementation&&document.implementation.hasFeature&&document.implementation.hasFeature("","")!==!0),module.exports=isEventSupported;

},{"fbjs/lib/ExecutionEnvironment":151}],141:[function(require,module,exports){
"use strict";function isTextInputElement(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&supportedInputTypes[e.type]||"textarea"===t)}var supportedInputTypes={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};module.exports=isTextInputElement;

},{}],142:[function(require,module,exports){
"use strict";function onlyChild(e){return ReactElement.isValidElement(e)?void 0:invariant(!1),e}var ReactElement=require("./ReactElement"),invariant=require("fbjs/lib/invariant");module.exports=onlyChild;

},{"./ReactElement":73,"fbjs/lib/invariant":165}],143:[function(require,module,exports){
"use strict";function quoteAttributeValueForBrowser(e){return'"'+escapeTextContentForBrowser(e)+'"'}var escapeTextContentForBrowser=require("./escapeTextContentForBrowser");module.exports=quoteAttributeValueForBrowser;

},{"./escapeTextContentForBrowser":128}],144:[function(require,module,exports){
"use strict";var ReactMount=require("./ReactMount");module.exports=ReactMount.renderSubtreeIntoContainer;

},{"./ReactMount":86}],145:[function(require,module,exports){
"use strict";var ExecutionEnvironment=require("fbjs/lib/ExecutionEnvironment"),WHITESPACE_TEST=/^[ \r\n\t\f]/,NONVISIBLE_TEST=/<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/,setInnerHTML=function(e,n){e.innerHTML=n};if("undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction&&(setInnerHTML=function(e,n){MSApp.execUnsafeLocalFunction(function(){e.innerHTML=n})}),ExecutionEnvironment.canUseDOM){var testElement=document.createElement("div");testElement.innerHTML=" ",""===testElement.innerHTML&&(setInnerHTML=function(e,n){if(e.parentNode&&e.parentNode.replaceChild(e,e),WHITESPACE_TEST.test(n)||"<"===n[0]&&NONVISIBLE_TEST.test(n)){e.innerHTML=String.fromCharCode(65279)+n;var t=e.firstChild;1===t.data.length?e.removeChild(t):t.deleteData(0,1)}else e.innerHTML=n})}module.exports=setInnerHTML;

},{"fbjs/lib/ExecutionEnvironment":151}],146:[function(require,module,exports){
"use strict";var ExecutionEnvironment=require("fbjs/lib/ExecutionEnvironment"),escapeTextContentForBrowser=require("./escapeTextContentForBrowser"),setInnerHTML=require("./setInnerHTML"),setTextContent=function(e,t){e.textContent=t};ExecutionEnvironment.canUseDOM&&("textContent"in document.documentElement||(setTextContent=function(e,t){setInnerHTML(e,escapeTextContentForBrowser(t))})),module.exports=setTextContent;

},{"./escapeTextContentForBrowser":128,"./setInnerHTML":145,"fbjs/lib/ExecutionEnvironment":151}],147:[function(require,module,exports){
"use strict";function shouldUpdateReactComponent(e,t){var n=null===e||e===!1,o=null===t||t===!1;if(n||o)return n===o;var r=typeof e,u=typeof t;return"string"===r||"number"===r?"string"===u||"number"===u:"object"===u&&e.type===t.type&&e.key===t.key}module.exports=shouldUpdateReactComponent;

},{}],148:[function(require,module,exports){
"use strict";function userProvidedKeyEscaper(e){return userProvidedKeyEscaperLookup[e]}function getComponentKey(e,r){return e&&null!=e.key?wrapUserProvidedKey(e.key):r.toString(36)}function escapeUserProvidedKey(e){return(""+e).replace(userProvidedKeyEscapeRegex,userProvidedKeyEscaper)}function wrapUserProvidedKey(e){return"$"+escapeUserProvidedKey(e)}function traverseAllChildrenImpl(e,r,n,t){var a=typeof e;if(("undefined"===a||"boolean"===a)&&(e=null),null===e||"string"===a||"number"===a||ReactElement.isValidElement(e))return n(t,e,""===r?SEPARATOR+getComponentKey(e,0):r),1;var i,l,o=0,s=""===r?SEPARATOR:r+SUBSEPARATOR;if(Array.isArray(e))for(var d=0;d<e.length;d++)i=e[d],l=s+getComponentKey(i,d),o+=traverseAllChildrenImpl(i,l,n,t);else{var u=getIteratorFn(e);if(u){var v,c=u.call(e);if(u!==e.entries)for(var p=0;!(v=c.next()).done;)i=v.value,l=s+getComponentKey(i,p++),o+=traverseAllChildrenImpl(i,l,n,t);else for(;!(v=c.next()).done;){var A=v.value;A&&(i=A[1],l=s+wrapUserProvidedKey(A[0])+SUBSEPARATOR+getComponentKey(i,0),o+=traverseAllChildrenImpl(i,l,n,t))}}else if("object"===a){String(e);invariant(!1)}}return o}function traverseAllChildren(e,r,n){return null==e?0:traverseAllChildrenImpl(e,"",r,n)}var ReactCurrentOwner=require("./ReactCurrentOwner"),ReactElement=require("./ReactElement"),ReactInstanceHandles=require("./ReactInstanceHandles"),getIteratorFn=require("./getIteratorFn"),invariant=require("fbjs/lib/invariant"),warning=require("fbjs/lib/warning"),SEPARATOR=ReactInstanceHandles.SEPARATOR,SUBSEPARATOR=":",userProvidedKeyEscaperLookup={"=":"=0",".":"=1",":":"=2"},userProvidedKeyEscapeRegex=/[=.:]/g,didWarnAboutMaps=!1;module.exports=traverseAllChildren;

},{"./ReactCurrentOwner":57,"./ReactElement":73,"./ReactInstanceHandles":82,"./getIteratorFn":136,"fbjs/lib/invariant":165,"fbjs/lib/warning":174}],149:[function(require,module,exports){
"use strict";var assign=require("./Object.assign"),emptyFunction=require("fbjs/lib/emptyFunction"),warning=require("fbjs/lib/warning"),validateDOMNesting=emptyFunction,specialTags,inScopeTags,buttonScopeTags,impliedEndTags,emptyAncestorInfo,updatedAncestorInfo,isTagValidWithParent,findInvalidAncestorForTag,findOwnerStack,didWarn;module.exports=validateDOMNesting;

},{"./Object.assign":45,"fbjs/lib/emptyFunction":157,"fbjs/lib/warning":174}],150:[function(require,module,exports){
"use strict";var emptyFunction=require("./emptyFunction"),EventListener={listen:function(e,t,n){return e.addEventListener?(e.addEventListener(t,n,!1),{remove:function(){e.removeEventListener(t,n,!1)}}):e.attachEvent?(e.attachEvent("on"+t,n),{remove:function(){e.detachEvent("on"+t,n)}}):void 0},capture:function(e,t,n){return e.addEventListener?(e.addEventListener(t,n,!0),{remove:function(){e.removeEventListener(t,n,!0)}}):{remove:emptyFunction}},registerDefault:function(){}};module.exports=EventListener;

},{"./emptyFunction":157}],151:[function(require,module,exports){
"use strict";var canUseDOM=!("undefined"==typeof window||!window.document||!window.document.createElement),ExecutionEnvironment={canUseDOM:canUseDOM,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:canUseDOM&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:canUseDOM&&!!window.screen,isInWorker:!canUseDOM};module.exports=ExecutionEnvironment;

},{}],152:[function(require,module,exports){
"use strict";function camelize(e){return e.replace(_hyphenPattern,function(e,t){return t.toUpperCase()})}var _hyphenPattern=/-(.)/g;module.exports=camelize;

},{}],153:[function(require,module,exports){
"use strict";function camelizeStyleName(e){return camelize(e.replace(msPattern,"ms-"))}var camelize=require("./camelize"),msPattern=/^-ms-/;module.exports=camelizeStyleName;

},{"./camelize":152}],154:[function(require,module,exports){
"use strict";function containsNode(e,o){var t=!0;e:for(;t;){var n=e,i=o;if(t=!1,n&&i){if(n===i)return!0;if(isTextNode(n))return!1;if(isTextNode(i)){e=n,o=i.parentNode,t=!0;continue e}return n.contains?n.contains(i):n.compareDocumentPosition?!!(16&n.compareDocumentPosition(i)):!1}return!1}}var isTextNode=require("./isTextNode");module.exports=containsNode;

},{"./isTextNode":167}],155:[function(require,module,exports){
"use strict";function hasArrayNature(r){return!!r&&("object"==typeof r||"function"==typeof r)&&"length"in r&&!("setInterval"in r)&&"number"!=typeof r.nodeType&&(Array.isArray(r)||"callee"in r||"item"in r)}function createArrayFromMixed(r){return hasArrayNature(r)?Array.isArray(r)?r.slice():toArray(r):[r]}var toArray=require("./toArray");module.exports=createArrayFromMixed;

},{"./toArray":173}],156:[function(require,module,exports){
"use strict";function getNodeName(e){var r=e.match(nodeNamePattern);return r&&r[1].toLowerCase()}function createNodesFromMarkup(e,r){var a=dummyNode;dummyNode?void 0:invariant(!1);var t=getNodeName(e),n=t&&getMarkupWrap(t);if(n){a.innerHTML=n[1]+e+n[2];for(var i=n[0];i--;)a=a.lastChild}else a.innerHTML=e;var o=a.getElementsByTagName("script");o.length&&(r?void 0:invariant(!1),createArrayFromMixed(o).forEach(r));for(var d=createArrayFromMixed(a.childNodes);a.lastChild;)a.removeChild(a.lastChild);return d}var ExecutionEnvironment=require("./ExecutionEnvironment"),createArrayFromMixed=require("./createArrayFromMixed"),getMarkupWrap=require("./getMarkupWrap"),invariant=require("./invariant"),dummyNode=ExecutionEnvironment.canUseDOM?document.createElement("div"):null,nodeNamePattern=/^\s*<(\w+)/;module.exports=createNodesFromMarkup;

},{"./ExecutionEnvironment":151,"./createArrayFromMixed":155,"./getMarkupWrap":161,"./invariant":165}],157:[function(require,module,exports){
"use strict";function makeEmptyFunction(t){return function(){return t}}function emptyFunction(){}emptyFunction.thatReturns=makeEmptyFunction,emptyFunction.thatReturnsFalse=makeEmptyFunction(!1),emptyFunction.thatReturnsTrue=makeEmptyFunction(!0),emptyFunction.thatReturnsNull=makeEmptyFunction(null),emptyFunction.thatReturnsThis=function(){return this},emptyFunction.thatReturnsArgument=function(t){return t},module.exports=emptyFunction;

},{}],158:[function(require,module,exports){
"use strict";var emptyObject={};module.exports=emptyObject;

},{}],159:[function(require,module,exports){
"use strict";function focusNode(o){try{o.focus()}catch(c){}}module.exports=focusNode;

},{}],160:[function(require,module,exports){
"use strict";function getActiveElement(){if("undefined"==typeof document)return null;try{return document.activeElement||document.body}catch(e){return document.body}}module.exports=getActiveElement;

},{}],161:[function(require,module,exports){
"use strict";function getMarkupWrap(e){return dummyNode?void 0:invariant(!1),markupWrap.hasOwnProperty(e)||(e="*"),shouldWrap.hasOwnProperty(e)||("*"===e?dummyNode.innerHTML="<link />":dummyNode.innerHTML="<"+e+"></"+e+">",shouldWrap[e]=!dummyNode.firstChild),shouldWrap[e]?markupWrap[e]:null}var ExecutionEnvironment=require("./ExecutionEnvironment"),invariant=require("./invariant"),dummyNode=ExecutionEnvironment.canUseDOM?document.createElement("div"):null,shouldWrap={},selectWrap=[1,'<select multiple="true">',"</select>"],tableWrap=[1,"<table>","</table>"],trWrap=[3,"<table><tbody><tr>","</tr></tbody></table>"],svgWrap=[1,'<svg xmlns="http://www.w3.org/2000/svg">',"</svg>"],markupWrap={"*":[1,"?<div>","</div>"],area:[1,"<map>","</map>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],legend:[1,"<fieldset>","</fieldset>"],param:[1,"<object>","</object>"],tr:[2,"<table><tbody>","</tbody></table>"],optgroup:selectWrap,option:selectWrap,caption:tableWrap,colgroup:tableWrap,tbody:tableWrap,tfoot:tableWrap,thead:tableWrap,td:trWrap,th:trWrap},svgElements=["circle","clipPath","defs","ellipse","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","text","tspan"];svgElements.forEach(function(e){markupWrap[e]=svgWrap,shouldWrap[e]=!0}),module.exports=getMarkupWrap;

},{"./ExecutionEnvironment":151,"./invariant":165}],162:[function(require,module,exports){
"use strict";function getUnboundedScrollPosition(o){return o===window?{x:window.pageXOffset||document.documentElement.scrollLeft,y:window.pageYOffset||document.documentElement.scrollTop}:{x:o.scrollLeft,y:o.scrollTop}}module.exports=getUnboundedScrollPosition;

},{}],163:[function(require,module,exports){
"use strict";function hyphenate(e){return e.replace(_uppercasePattern,"-$1").toLowerCase()}var _uppercasePattern=/([A-Z])/g;module.exports=hyphenate;

},{}],164:[function(require,module,exports){
"use strict";function hyphenateStyleName(e){return hyphenate(e).replace(msPattern,"-ms-")}var hyphenate=require("./hyphenate"),msPattern=/^ms-/;module.exports=hyphenateStyleName;

},{"./hyphenate":163}],165:[function(require,module,exports){
"use strict";var invariant=function(r,e,n,i,o,a,t,f){if(!r){var s;if(void 0===e)s=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var d=[n,i,o,a,t,f],l=0;s=new Error("Invariant Violation: "+e.replace(/%s/g,function(){return d[l++]}))}throw s.framesToPop=1,s}};module.exports=invariant;

},{}],166:[function(require,module,exports){
"use strict";function isNode(e){return!(!e||!("function"==typeof Node?e instanceof Node:"object"==typeof e&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName))}module.exports=isNode;

},{}],167:[function(require,module,exports){
"use strict";function isTextNode(e){return isNode(e)&&3==e.nodeType}var isNode=require("./isNode");module.exports=isTextNode;

},{"./isNode":166}],168:[function(require,module,exports){
"use strict";var invariant=require("./invariant"),keyMirror=function(r){var i,n={};r instanceof Object&&!Array.isArray(r)?void 0:invariant(!1);for(i in r)r.hasOwnProperty(i)&&(n[i]=i);return n};module.exports=keyMirror;

},{"./invariant":165}],169:[function(require,module,exports){
"use strict";var keyOf=function(r){var e;for(e in r)if(r.hasOwnProperty(e))return e;return null};module.exports=keyOf;

},{}],170:[function(require,module,exports){
"use strict";function mapObject(r,t,e){if(!r)return null;var a={};for(var n in r)hasOwnProperty.call(r,n)&&(a[n]=t.call(e,r[n],n,r));return a}var hasOwnProperty=Object.prototype.hasOwnProperty;module.exports=mapObject;

},{}],171:[function(require,module,exports){
"use strict";function memoizeStringOnly(n){var r={};return function(t){return r.hasOwnProperty(t)||(r[t]=n.call(this,t)),r[t]}}module.exports=memoizeStringOnly;

},{}],172:[function(require,module,exports){
"use strict";function shallowEqual(e,t){if(e===t)return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var r=Object.keys(e),n=Object.keys(t);if(r.length!==n.length)return!1;for(var o=hasOwnProperty.bind(t),l=0;l<r.length;l++)if(!o(r[l])||e[r[l]]!==t[r[l]])return!1;return!0}var hasOwnProperty=Object.prototype.hasOwnProperty;module.exports=shallowEqual;

},{}],173:[function(require,module,exports){
"use strict";function toArray(r){var t=r.length;if(Array.isArray(r)||"object"!=typeof r&&"function"!=typeof r?invariant(!1):void 0,"number"!=typeof t?invariant(!1):void 0,0===t||t-1 in r?void 0:invariant(!1),r.hasOwnProperty)try{return Array.prototype.slice.call(r)}catch(a){}for(var i=Array(t),n=0;t>n;n++)i[n]=r[n];return i}var invariant=require("./invariant");module.exports=toArray;

},{"./invariant":165}],174:[function(require,module,exports){
"use strict";var emptyFunction=require("./emptyFunction"),warning=emptyFunction;module.exports=warning;

},{"./emptyFunction":157}],175:[function(require,module,exports){
"use strict";module.exports=require("./lib/React");

},{"./lib/React":47}],176:[function(require,module,exports){
function shallow(r,n,t){var a=Array.isArray(r),e=Array.isArray(n);if(a!==e)return!1;var o=typeof r,f=typeof n;return o!==f?!1:flat(o)?t?t(r,n):r===n:a?shallowArray(r,n,t):shallowObject(r,n,t)}function shallowArray(r,n,t){var a=r.length;if(a!==n.length)return!1;if(t){for(var e=0;a>e;e++)if(!t(r[e],n[e]))return!1}else for(var e=0;a>e;e++)if(r[e]!==n[e])return!1;return!0}function shallowObject(r,n,t){var a=0,e=0;if(t)for(var o in r){if(r.hasOwnProperty(o)&&!t(r[o],n[o]))return!1;a++}else for(var o in r){if(r.hasOwnProperty(o)&&r[o]!==n[o])return!1;a++}for(var o in n)n.hasOwnProperty(o)&&e++;return a===e}function flat(r){return"function"!==r&&"object"!==r}module.exports=shallow;

},{}],177:[function(require,module,exports){
(function(){function n(n){function t(t,r,e,u,i,o){for(;i>=0&&o>i;i+=n){var a=u?u[i]:i;e=r(e,t[a],a,t)}return e}return function(r,e,u,i){e=b(e,i,4);var o=!k(r)&&m.keys(r),a=(o||r).length,c=n>0?0:a-1;return arguments.length<3&&(u=r[o?o[c]:c],c+=n),t(r,e,u,o,c,a)}}function t(n){return function(t,r,e){r=x(r,e);for(var u=O(t),i=n>0?0:u-1;i>=0&&u>i;i+=n)if(r(t[i],i,t))return i;return-1}}function r(n,t,r){return function(e,u,i){var o=0,a=O(e);if("number"==typeof i)n>0?o=i>=0?i:Math.max(i+a,o):a=i>=0?Math.min(i+1,a):i+a+1;else if(r&&i&&a)return i=r(e,u),e[i]===u?i:-1;if(u!==u)return i=t(l.call(e,o,a),m.isNaN),i>=0?i+o:-1;for(i=n>0?o:a-1;i>=0&&a>i;i+=n)if(e[i]===u)return i;return-1}}function e(n,t){var r=I.length,e=n.constructor,u=m.isFunction(e)&&e.prototype||a,i="constructor";for(m.has(n,i)&&!m.contains(t,i)&&t.push(i);r--;)i=I[r],i in n&&n[i]!==u[i]&&!m.contains(t,i)&&t.push(i)}var u=this,i=u._,o=Array.prototype,a=Object.prototype,c=Function.prototype,f=o.push,l=o.slice,s=a.toString,p=a.hasOwnProperty,h=Array.isArray,v=Object.keys,g=c.bind,y=Object.create,d=function(){},m=function(n){return n instanceof m?n:this instanceof m?void(this._wrapped=n):new m(n)};"undefined"!=typeof exports?("undefined"!=typeof module&&module.exports&&(exports=module.exports=m),exports._=m):u._=m,m.VERSION="1.8.3";var b=function(n,t,r){if(void 0===t)return n;switch(null==r?3:r){case 1:return function(r){return n.call(t,r)};case 2:return function(r,e){return n.call(t,r,e)};case 3:return function(r,e,u){return n.call(t,r,e,u)};case 4:return function(r,e,u,i){return n.call(t,r,e,u,i)}}return function(){return n.apply(t,arguments)}},x=function(n,t,r){return null==n?m.identity:m.isFunction(n)?b(n,t,r):m.isObject(n)?m.matcher(n):m.property(n)};m.iteratee=function(n,t){return x(n,t,1/0)};var _=function(n,t){return function(r){var e=arguments.length;if(2>e||null==r)return r;for(var u=1;e>u;u++)for(var i=arguments[u],o=n(i),a=o.length,c=0;a>c;c++){var f=o[c];t&&void 0!==r[f]||(r[f]=i[f])}return r}},j=function(n){if(!m.isObject(n))return{};if(y)return y(n);d.prototype=n;var t=new d;return d.prototype=null,t},w=function(n){return function(t){return null==t?void 0:t[n]}},A=Math.pow(2,53)-1,O=w("length"),k=function(n){var t=O(n);return"number"==typeof t&&t>=0&&A>=t};m.each=m.forEach=function(n,t,r){t=b(t,r);var e,u;if(k(n))for(e=0,u=n.length;u>e;e++)t(n[e],e,n);else{var i=m.keys(n);for(e=0,u=i.length;u>e;e++)t(n[i[e]],i[e],n)}return n},m.map=m.collect=function(n,t,r){t=x(t,r);for(var e=!k(n)&&m.keys(n),u=(e||n).length,i=Array(u),o=0;u>o;o++){var a=e?e[o]:o;i[o]=t(n[a],a,n)}return i},m.reduce=m.foldl=m.inject=n(1),m.reduceRight=m.foldr=n(-1),m.find=m.detect=function(n,t,r){var e;return e=k(n)?m.findIndex(n,t,r):m.findKey(n,t,r),void 0!==e&&-1!==e?n[e]:void 0},m.filter=m.select=function(n,t,r){var e=[];return t=x(t,r),m.each(n,function(n,r,u){t(n,r,u)&&e.push(n)}),e},m.reject=function(n,t,r){return m.filter(n,m.negate(x(t)),r)},m.every=m.all=function(n,t,r){t=x(t,r);for(var e=!k(n)&&m.keys(n),u=(e||n).length,i=0;u>i;i++){var o=e?e[i]:i;if(!t(n[o],o,n))return!1}return!0},m.some=m.any=function(n,t,r){t=x(t,r);for(var e=!k(n)&&m.keys(n),u=(e||n).length,i=0;u>i;i++){var o=e?e[i]:i;if(t(n[o],o,n))return!0}return!1},m.contains=m.includes=m.include=function(n,t,r,e){return k(n)||(n=m.values(n)),("number"!=typeof r||e)&&(r=0),m.indexOf(n,t,r)>=0},m.invoke=function(n,t){var r=l.call(arguments,2),e=m.isFunction(t);return m.map(n,function(n){var u=e?t:n[t];return null==u?u:u.apply(n,r)})},m.pluck=function(n,t){return m.map(n,m.property(t))},m.where=function(n,t){return m.filter(n,m.matcher(t))},m.findWhere=function(n,t){return m.find(n,m.matcher(t))},m.max=function(n,t,r){var e,u,i=-(1/0),o=-(1/0);if(null==t&&null!=n){n=k(n)?n:m.values(n);for(var a=0,c=n.length;c>a;a++)e=n[a],e>i&&(i=e)}else t=x(t,r),m.each(n,function(n,r,e){u=t(n,r,e),(u>o||u===-(1/0)&&i===-(1/0))&&(i=n,o=u)});return i},m.min=function(n,t,r){var e,u,i=1/0,o=1/0;if(null==t&&null!=n){n=k(n)?n:m.values(n);for(var a=0,c=n.length;c>a;a++)e=n[a],i>e&&(i=e)}else t=x(t,r),m.each(n,function(n,r,e){u=t(n,r,e),(o>u||u===1/0&&i===1/0)&&(i=n,o=u)});return i},m.shuffle=function(n){for(var t,r=k(n)?n:m.values(n),e=r.length,u=Array(e),i=0;e>i;i++)t=m.random(0,i),t!==i&&(u[i]=u[t]),u[t]=r[i];return u},m.sample=function(n,t,r){return null==t||r?(k(n)||(n=m.values(n)),n[m.random(n.length-1)]):m.shuffle(n).slice(0,Math.max(0,t))},m.sortBy=function(n,t,r){return t=x(t,r),m.pluck(m.map(n,function(n,r,e){return{value:n,index:r,criteria:t(n,r,e)}}).sort(function(n,t){var r=n.criteria,e=t.criteria;if(r!==e){if(r>e||void 0===r)return 1;if(e>r||void 0===e)return-1}return n.index-t.index}),"value")};var F=function(n){return function(t,r,e){var u={};return r=x(r,e),m.each(t,function(e,i){var o=r(e,i,t);n(u,e,o)}),u}};m.groupBy=F(function(n,t,r){m.has(n,r)?n[r].push(t):n[r]=[t]}),m.indexBy=F(function(n,t,r){n[r]=t}),m.countBy=F(function(n,t,r){m.has(n,r)?n[r]++:n[r]=1}),m.toArray=function(n){return n?m.isArray(n)?l.call(n):k(n)?m.map(n,m.identity):m.values(n):[]},m.size=function(n){return null==n?0:k(n)?n.length:m.keys(n).length},m.partition=function(n,t,r){t=x(t,r);var e=[],u=[];return m.each(n,function(n,r,i){(t(n,r,i)?e:u).push(n)}),[e,u]},m.first=m.head=m.take=function(n,t,r){return null==n?void 0:null==t||r?n[0]:m.initial(n,n.length-t)},m.initial=function(n,t,r){return l.call(n,0,Math.max(0,n.length-(null==t||r?1:t)))},m.last=function(n,t,r){return null==n?void 0:null==t||r?n[n.length-1]:m.rest(n,Math.max(0,n.length-t))},m.rest=m.tail=m.drop=function(n,t,r){return l.call(n,null==t||r?1:t)},m.compact=function(n){return m.filter(n,m.identity)};var S=function(n,t,r,e){for(var u=[],i=0,o=e||0,a=O(n);a>o;o++){var c=n[o];if(k(c)&&(m.isArray(c)||m.isArguments(c))){t||(c=S(c,t,r));var f=0,l=c.length;for(u.length+=l;l>f;)u[i++]=c[f++]}else r||(u[i++]=c)}return u};m.flatten=function(n,t){return S(n,t,!1)},m.without=function(n){return m.difference(n,l.call(arguments,1))},m.uniq=m.unique=function(n,t,r,e){m.isBoolean(t)||(e=r,r=t,t=!1),null!=r&&(r=x(r,e));for(var u=[],i=[],o=0,a=O(n);a>o;o++){var c=n[o],f=r?r(c,o,n):c;t?(o&&i===f||u.push(c),i=f):r?m.contains(i,f)||(i.push(f),u.push(c)):m.contains(u,c)||u.push(c)}return u},m.union=function(){return m.uniq(S(arguments,!0,!0))},m.intersection=function(n){for(var t=[],r=arguments.length,e=0,u=O(n);u>e;e++){var i=n[e];if(!m.contains(t,i)){for(var o=1;r>o&&m.contains(arguments[o],i);o++);o===r&&t.push(i)}}return t},m.difference=function(n){var t=S(arguments,!0,!0,1);return m.filter(n,function(n){return!m.contains(t,n)})},m.zip=function(){return m.unzip(arguments)},m.unzip=function(n){for(var t=n&&m.max(n,O).length||0,r=Array(t),e=0;t>e;e++)r[e]=m.pluck(n,e);return r},m.object=function(n,t){for(var r={},e=0,u=O(n);u>e;e++)t?r[n[e]]=t[e]:r[n[e][0]]=n[e][1];return r},m.findIndex=t(1),m.findLastIndex=t(-1),m.sortedIndex=function(n,t,r,e){r=x(r,e,1);for(var u=r(t),i=0,o=O(n);o>i;){var a=Math.floor((i+o)/2);r(n[a])<u?i=a+1:o=a}return i},m.indexOf=r(1,m.findIndex,m.sortedIndex),m.lastIndexOf=r(-1,m.findLastIndex),m.range=function(n,t,r){null==t&&(t=n||0,n=0),r=r||1;for(var e=Math.max(Math.ceil((t-n)/r),0),u=Array(e),i=0;e>i;i++,n+=r)u[i]=n;return u};var E=function(n,t,r,e,u){if(!(e instanceof t))return n.apply(r,u);var i=j(n.prototype),o=n.apply(i,u);return m.isObject(o)?o:i};m.bind=function(n,t){if(g&&n.bind===g)return g.apply(n,l.call(arguments,1));if(!m.isFunction(n))throw new TypeError("Bind must be called on a function");var r=l.call(arguments,2),e=function(){return E(n,e,t,this,r.concat(l.call(arguments)))};return e},m.partial=function(n){var t=l.call(arguments,1),r=function(){for(var e=0,u=t.length,i=Array(u),o=0;u>o;o++)i[o]=t[o]===m?arguments[e++]:t[o];for(;e<arguments.length;)i.push(arguments[e++]);return E(n,r,this,this,i)};return r},m.bindAll=function(n){var t,r,e=arguments.length;if(1>=e)throw new Error("bindAll must be passed function names");for(t=1;e>t;t++)r=arguments[t],n[r]=m.bind(n[r],n);return n},m.memoize=function(n,t){var r=function(e){var u=r.cache,i=""+(t?t.apply(this,arguments):e);return m.has(u,i)||(u[i]=n.apply(this,arguments)),u[i]};return r.cache={},r},m.delay=function(n,t){var r=l.call(arguments,2);return setTimeout(function(){return n.apply(null,r)},t)},m.defer=m.partial(m.delay,m,1),m.throttle=function(n,t,r){var e,u,i,o=null,a=0;r||(r={});var c=function(){a=r.leading===!1?0:m.now(),o=null,i=n.apply(e,u),o||(e=u=null)};return function(){var f=m.now();a||r.leading!==!1||(a=f);var l=t-(f-a);return e=this,u=arguments,0>=l||l>t?(o&&(clearTimeout(o),o=null),a=f,i=n.apply(e,u),o||(e=u=null)):o||r.trailing===!1||(o=setTimeout(c,l)),i}},m.debounce=function(n,t,r){var e,u,i,o,a,c=function(){var f=m.now()-o;t>f&&f>=0?e=setTimeout(c,t-f):(e=null,r||(a=n.apply(i,u),e||(i=u=null)))};return function(){i=this,u=arguments,o=m.now();var f=r&&!e;return e||(e=setTimeout(c,t)),f&&(a=n.apply(i,u),i=u=null),a}},m.wrap=function(n,t){return m.partial(t,n)},m.negate=function(n){return function(){return!n.apply(this,arguments)}},m.compose=function(){var n=arguments,t=n.length-1;return function(){for(var r=t,e=n[t].apply(this,arguments);r--;)e=n[r].call(this,e);return e}},m.after=function(n,t){return function(){return--n<1?t.apply(this,arguments):void 0}},m.before=function(n,t){var r;return function(){return--n>0&&(r=t.apply(this,arguments)),1>=n&&(t=null),r}},m.once=m.partial(m.before,2);var M=!{toString:null}.propertyIsEnumerable("toString"),I=["valueOf","isPrototypeOf","toString","propertyIsEnumerable","hasOwnProperty","toLocaleString"];m.keys=function(n){if(!m.isObject(n))return[];if(v)return v(n);var t=[];for(var r in n)m.has(n,r)&&t.push(r);return M&&e(n,t),t},m.allKeys=function(n){if(!m.isObject(n))return[];var t=[];for(var r in n)t.push(r);return M&&e(n,t),t},m.values=function(n){for(var t=m.keys(n),r=t.length,e=Array(r),u=0;r>u;u++)e[u]=n[t[u]];return e},m.mapObject=function(n,t,r){t=x(t,r);for(var e,u=m.keys(n),i=u.length,o={},a=0;i>a;a++)e=u[a],o[e]=t(n[e],e,n);return o},m.pairs=function(n){for(var t=m.keys(n),r=t.length,e=Array(r),u=0;r>u;u++)e[u]=[t[u],n[t[u]]];return e},m.invert=function(n){for(var t={},r=m.keys(n),e=0,u=r.length;u>e;e++)t[n[r[e]]]=r[e];return t},m.functions=m.methods=function(n){var t=[];for(var r in n)m.isFunction(n[r])&&t.push(r);return t.sort()},m.extend=_(m.allKeys),m.extendOwn=m.assign=_(m.keys),m.findKey=function(n,t,r){t=x(t,r);for(var e,u=m.keys(n),i=0,o=u.length;o>i;i++)if(e=u[i],t(n[e],e,n))return e},m.pick=function(n,t,r){var e,u,i={},o=n;if(null==o)return i;m.isFunction(t)?(u=m.allKeys(o),e=b(t,r)):(u=S(arguments,!1,!1,1),e=function(n,t,r){return t in r},o=Object(o));for(var a=0,c=u.length;c>a;a++){var f=u[a],l=o[f];e(l,f,o)&&(i[f]=l)}return i},m.omit=function(n,t,r){if(m.isFunction(t))t=m.negate(t);else{var e=m.map(S(arguments,!1,!1,1),String);t=function(n,t){return!m.contains(e,t)}}return m.pick(n,t,r)},m.defaults=_(m.allKeys,!0),m.create=function(n,t){var r=j(n);return t&&m.extendOwn(r,t),r},m.clone=function(n){return m.isObject(n)?m.isArray(n)?n.slice():m.extend({},n):n},m.tap=function(n,t){return t(n),n},m.isMatch=function(n,t){var r=m.keys(t),e=r.length;if(null==n)return!e;for(var u=Object(n),i=0;e>i;i++){var o=r[i];if(t[o]!==u[o]||!(o in u))return!1}return!0};var N=function(n,t,r,e){if(n===t)return 0!==n||1/n===1/t;if(null==n||null==t)return n===t;n instanceof m&&(n=n._wrapped),t instanceof m&&(t=t._wrapped);var u=s.call(n);if(u!==s.call(t))return!1;switch(u){case"[object RegExp]":case"[object String]":return""+n==""+t;case"[object Number]":return+n!==+n?+t!==+t:0===+n?1/+n===1/t:+n===+t;case"[object Date]":case"[object Boolean]":return+n===+t}var i="[object Array]"===u;if(!i){if("object"!=typeof n||"object"!=typeof t)return!1;var o=n.constructor,a=t.constructor;if(o!==a&&!(m.isFunction(o)&&o instanceof o&&m.isFunction(a)&&a instanceof a)&&"constructor"in n&&"constructor"in t)return!1}r=r||[],e=e||[];for(var c=r.length;c--;)if(r[c]===n)return e[c]===t;if(r.push(n),e.push(t),i){if(c=n.length,c!==t.length)return!1;for(;c--;)if(!N(n[c],t[c],r,e))return!1}else{var f,l=m.keys(n);if(c=l.length,m.keys(t).length!==c)return!1;for(;c--;)if(f=l[c],!m.has(t,f)||!N(n[f],t[f],r,e))return!1}return r.pop(),e.pop(),!0};m.isEqual=function(n,t){return N(n,t)},m.isEmpty=function(n){return null==n?!0:k(n)&&(m.isArray(n)||m.isString(n)||m.isArguments(n))?0===n.length:0===m.keys(n).length},m.isElement=function(n){return!(!n||1!==n.nodeType)},m.isArray=h||function(n){return"[object Array]"===s.call(n)},m.isObject=function(n){var t=typeof n;return"function"===t||"object"===t&&!!n},m.each(["Arguments","Function","String","Number","Date","RegExp","Error"],function(n){m["is"+n]=function(t){return s.call(t)==="[object "+n+"]"}}),m.isArguments(arguments)||(m.isArguments=function(n){return m.has(n,"callee")}),"function"!=typeof/./&&"object"!=typeof Int8Array&&(m.isFunction=function(n){return"function"==typeof n||!1}),m.isFinite=function(n){return isFinite(n)&&!isNaN(parseFloat(n))},m.isNaN=function(n){return m.isNumber(n)&&n!==+n},m.isBoolean=function(n){return n===!0||n===!1||"[object Boolean]"===s.call(n)},m.isNull=function(n){return null===n},m.isUndefined=function(n){return void 0===n},m.has=function(n,t){return null!=n&&p.call(n,t)},m.noConflict=function(){return u._=i,this},m.identity=function(n){return n},m.constant=function(n){return function(){return n}},m.noop=function(){},m.property=w,m.propertyOf=function(n){return null==n?function(){}:function(t){return n[t]}},m.matcher=m.matches=function(n){return n=m.extendOwn({},n),function(t){return m.isMatch(t,n)}},m.times=function(n,t,r){var e=Array(Math.max(0,n));t=b(t,r,1);for(var u=0;n>u;u++)e[u]=t(u);return e},m.random=function(n,t){return null==t&&(t=n,n=0),n+Math.floor(Math.random()*(t-n+1))},m.now=Date.now||function(){return(new Date).getTime()};var B={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},T=m.invert(B),R=function(n){var t=function(t){return n[t]},r="(?:"+m.keys(n).join("|")+")",e=RegExp(r),u=RegExp(r,"g");return function(n){return n=null==n?"":""+n,e.test(n)?n.replace(u,t):n}};m.escape=R(B),m.unescape=R(T),m.result=function(n,t,r){var e=null==n?void 0:n[t];return void 0===e&&(e=r),m.isFunction(e)?e.call(n):e};var q=0;m.uniqueId=function(n){var t=++q+"";return n?n+t:t},m.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};var K=/(.)^/,z={"'":"'","\\":"\\","\r":"r","\n":"n","\u2028":"u2028","\u2029":"u2029"},D=/\\|'|\r|\n|\u2028|\u2029/g,L=function(n){return"\\"+z[n]};m.template=function(n,t,r){!t&&r&&(t=r),t=m.defaults({},t,m.templateSettings);var e=RegExp([(t.escape||K).source,(t.interpolate||K).source,(t.evaluate||K).source].join("|")+"|$","g"),u=0,i="__p+='";n.replace(e,function(t,r,e,o,a){return i+=n.slice(u,a).replace(D,L),u=a+t.length,r?i+="'+\n((__t=("+r+"))==null?'':_.escape(__t))+\n'":e?i+="'+\n((__t=("+e+"))==null?'':__t)+\n'":o&&(i+="';\n"+o+"\n__p+='"),t}),i+="';\n",t.variable||(i="with(obj||{}){\n"+i+"}\n"),i="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+i+"return __p;\n";try{var o=new Function(t.variable||"obj","_",i)}catch(a){throw a.source=i,a}var c=function(n){return o.call(this,n,m)},f=t.variable||"obj";return c.source="function("+f+"){\n"+i+"}",c},m.chain=function(n){var t=m(n);return t._chain=!0,t};var P=function(n,t){return n._chain?m(t).chain():t};m.mixin=function(n){m.each(m.functions(n),function(t){var r=m[t]=n[t];m.prototype[t]=function(){var n=[this._wrapped];return f.apply(n,arguments),P(this,r.apply(m,n))}})},m.mixin(m),m.each(["pop","push","reverse","shift","sort","splice","unshift"],function(n){var t=o[n];m.prototype[n]=function(){var r=this._wrapped;return t.apply(r,arguments),"shift"!==n&&"splice"!==n||0!==r.length||delete r[0],P(this,r)}}),m.each(["concat","join","slice"],function(n){var t=o[n];m.prototype[n]=function(){return P(this,t.apply(this._wrapped,arguments))}}),m.prototype.value=function(){return this._wrapped},m.prototype.valueOf=m.prototype.toJSON=m.prototype.value,m.prototype.toString=function(){return""+this._wrapped},"function"==typeof define&&define.amd&&define("underscore",[],function(){return m})}).call(this);

},{}],178:[function(require,module,exports){
!function(){function t(t){return t&&(t.ownerDocument||t.document||t).documentElement}function n(t){return t&&(t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView)}function e(t){return t}function r(t,n,e){return function(){var r=e.apply(n,arguments);return r===n?t:r}}function i(t,n){if(n in t)return n;n=n.charAt(0).toUpperCase()+n.slice(1);for(var e=0,r=W.length;r>e;++e){var i=W[e]+n;if(i in t)return i}}function o(t,n){for(var e in n)Object.defineProperty(t.prototype,e,{value:n[e],enumerable:!1})}function u(){this._=Object.create(null)}function a(t){return(t+="")===F||t[0]===J?J+t:t}function s(t){return(t+="")[0]===J?t.slice(1):t}function c(t){return a(t)in this._}function l(t){return(t=a(t))in this._&&delete this._[t]}function f(){var t=[];for(var n in this._)t.push(s(n));return t}function h(){var t=0;for(var n in this._)++t;return t}function p(){for(var t in this._)return!1;return!0}function v(){}function g(){}function d(t){function n(){for(var n,r=e,i=-1,o=r.length;++i<o;)(n=r[i].on)&&n.apply(this,arguments);return t}var e=[],r=new u;return n.on=function(n,i){var o,u=r.get(n);return arguments.length<2?u&&u.on:(u&&(u.on=null,e=e.slice(0,o=e.indexOf(u)).concat(e.slice(o+1)),r.remove(n)),i&&e.push(r.set(n,{on:i})),t)},n}function m(){U.event.preventDefault()}function _(){for(var t,n=U.event;t=n.sourceEvent;)n=t;return n}function y(t){for(var n=new g,e=0,r=arguments.length;++e<r;)n[arguments[e]]=d(n);return n.of=function(e,r){return function(i){try{var o=i.sourceEvent=U.event;i.target=t,U.event=i,n[i.type].apply(e,r)}finally{U.event=o}}},n}function w(t){return nt(t,ot),t}function x(t){return"function"==typeof t?t:function(){return et(t,this)}}function b(t){return"function"==typeof t?t:function(){return rt(t,this)}}function N(t,n){function e(){this.removeAttribute(t)}function r(){this.removeAttributeNS(t.space,t.local)}function i(){this.setAttribute(t,n)}function o(){this.setAttributeNS(t.space,t.local,n)}function u(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}function a(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}return t=U.ns.qualify(t),null==n?t.local?r:e:"function"==typeof n?t.local?a:u:t.local?o:i}function A(t){return t.trim().replace(/\s+/g," ")}function S(t){return new RegExp("(?:^|\\s+)"+U.requote(t)+"(?:\\s+|$)","g")}function E(t){return(t+"").trim().split(/^|\s+/)}function z(t,n){function e(){for(var e=-1;++e<i;)t[e](this,n)}function r(){for(var e=-1,r=n.apply(this,arguments);++e<i;)t[e](this,r)}t=E(t).map(T);var i=t.length;return"function"==typeof n?r:e}function T(t){var n=S(t);return function(e,r){if(i=e.classList)return r?i.add(t):i.remove(t);var i=e.getAttribute("class")||"";r?(n.lastIndex=0,n.test(i)||e.setAttribute("class",A(i+" "+t))):e.setAttribute("class",A(i.replace(n," ")))}}function C(t,n,e){function r(){this.style.removeProperty(t)}function i(){this.style.setProperty(t,n,e)}function o(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}return null==n?r:"function"==typeof n?o:i}function L(t,n){function e(){delete this[t]}function r(){this[t]=n}function i(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}return null==n?e:"function"==typeof n?i:r}function P(t){function n(){var n=this.ownerDocument,e=this.namespaceURI;return e?n.createElementNS(e,t):n.createElement(t)}function e(){return this.ownerDocument.createElementNS(t.space,t.local)}return"function"==typeof t?t:(t=U.ns.qualify(t)).local?e:n}function O(){var t=this.parentNode;t&&t.removeChild(this)}function q(){this._=Object.create(null)}function M(t){return{__data__:t}}function D(t){return function(){return it(this,t)}}function $(t,n){return n>t?-1:t>n?1:t>=n?0:NaN}function k(t){return arguments.length||(t=$),function(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}}function V(t,n){for(var e=0,r=t.length;r>e;e++)for(var i,o=t[e],u=0,a=o.length;a>u;u++)(i=o[u])&&n(i,u,e);return t}function X(t){return nt(t,at),t}function j(t){var n,e;return function(r,i,o){var u,a=t[o].update,s=a.length;for(o!=e&&(e=o,n=0),i>=n&&(n=i+1);!(u=a[n])&&++n<s;);return u}}function H(t,n,e){function r(){var n=this[u];n&&(this.removeEventListener(t,n,n.$),delete this[u])}function i(){var i=s(n,Z(arguments));r.call(this),this.addEventListener(t,this[u]=i,i.$=e),i._=n}function o(){var n,e=new RegExp("^__on([^.]+)"+U.requote(t)+"$");for(var r in this)if(n=r.match(e)){var i=this[r];this.removeEventListener(n[1],i,i.$),delete this[r]}}var u="__on"+t,a=t.indexOf("."),s=R;a>0&&(t=t.slice(0,a));var c=st.get(t);return c&&(t=c,s=Y),a?n?i:r:n?v:o}function R(t,n){return function(e){var r=U.event;U.event=e,n[0]=this.__data__;try{t.apply(this,n)}finally{U.event=r}}}function Y(t,n){var e=R(t,n);return function(t){var n=this,r=t.relatedTarget;r&&(r===n||8&r.compareDocumentPosition(n))||e.call(n,t)}}function B(e){var r=".dragsuppress-"+ ++lt,o="click"+r,u=U.select(n(e)).on("touchmove"+r,m).on("dragstart"+r,m).on("selectstart"+r,m);if(null==ct&&(ct="onselectstart"in e?!1:i(e.style,"userSelect")),ct){var a=t(e).style,s=a[ct];a[ct]="none"}return function(t){if(u.on(r,null),ct&&(a[ct]=s),t){var n=function(){u.on(o,null)};u.on(o,function(){m(),n()},!0),setTimeout(n,0)}}}function G(t,e){e.changedTouches&&(e=e.changedTouches[0]);var r=t.ownerSVGElement||t;if(r.createSVGPoint){var i=r.createSVGPoint();if(0>ft){var o=n(t);if(o.scrollX||o.scrollY){r=U.select("body").append("svg").style({position:"absolute",top:0,left:0,margin:0,padding:0,border:"none"},"important");var u=r[0][0].getScreenCTM();ft=!(u.f||u.e),r.remove()}}return ft?(i.x=e.pageX,i.y=e.pageY):(i.x=e.clientX,i.y=e.clientY),i=i.matrixTransform(t.getScreenCTM().inverse()),[i.x,i.y]}var a=t.getBoundingClientRect();return[e.clientX-a.left-t.clientLeft,e.clientY-a.top-t.clientTop]}function I(){return U.event.changedTouches[0].identifier}var U={version:"3.5.6"},K=this.document;U.rebind=function(t,n){for(var e,i=1,o=arguments.length;++i<o;)t[e=arguments[i]]=r(t,n,n[e]);return t};var W=["webkit","ms","moz","Moz","o","O"];U.map=function(t,n){var e=new u;if(t instanceof u)t.forEach(function(t,n){e.set(t,n)});else if(Array.isArray(t)){var r,i=-1,o=t.length;if(1===arguments.length)for(;++i<o;)e.set(i,t[i]);else for(;++i<o;)e.set(n.call(t,r=t[i],i),r)}else for(var a in t)e.set(a,t[a]);return e};var F="__proto__",J="\x00";o(u,{has:c,get:function(t){return this._[a(t)]},set:function(t,n){return this._[a(t)]=n},remove:l,keys:f,values:function(){var t=[];for(var n in this._)t.push(this._[n]);return t},entries:function(){var t=[];for(var n in this._)t.push({key:s(n),value:this._[n]});return t},size:h,empty:p,forEach:function(t){for(var n in this._)t.call(this,s(n),this._[n])}});var Q=[].slice,Z=function(t){return Q.call(t)};U.dispatch=function(){for(var t=new g,n=-1,e=arguments.length;++n<e;)t[arguments[n]]=d(t);return t},g.prototype.on=function(t,n){var e=t.indexOf("."),r="";if(e>=0&&(r=t.slice(e+1),t=t.slice(0,e)),t)return arguments.length<2?this[t].on(r):this[t].on(r,n);if(2===arguments.length){if(null==n)for(t in this)this.hasOwnProperty(t)&&this[t].on(r,null);return this}},U.event=null,U.requote=function(t){return t.replace(tt,"\\$&")};var tt=/[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g,nt={}.__proto__?function(t,n){t.__proto__=n}:function(t,n){for(var e in n)t[e]=n[e]},et=function(t,n){return n.querySelector(t)},rt=function(t,n){return n.querySelectorAll(t)},it=function(t,n){var e=t.matches||t[i(t,"matchesSelector")];return(it=function(t,n){return e.call(t,n)})(t,n)};"function"==typeof Sizzle&&(et=function(t,n){return Sizzle(t,n)[0]||null},rt=Sizzle,it=Sizzle.matchesSelector),U.selection=function(){return U.select(K.documentElement)};var ot=U.selection.prototype=[];ot.select=function(t){var n,e,r,i,o=[];t=x(t);for(var u=-1,a=this.length;++u<a;){o.push(n=[]),n.parentNode=(r=this[u]).parentNode;for(var s=-1,c=r.length;++s<c;)(i=r[s])?(n.push(e=t.call(i,i.__data__,s,u)),e&&"__data__"in i&&(e.__data__=i.__data__)):n.push(null)}return w(o)},ot.selectAll=function(t){var n,e,r=[];t=b(t);for(var i=-1,o=this.length;++i<o;)for(var u=this[i],a=-1,s=u.length;++a<s;)(e=u[a])&&(r.push(n=Z(t.call(e,e.__data__,a,i))),n.parentNode=e);return w(r)};var ut={svg:"http://www.w3.org/2000/svg",xhtml:"http://www.w3.org/1999/xhtml",xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};U.ns={prefix:ut,qualify:function(t){var n=t.indexOf(":"),e=t;return n>=0&&(e=t.slice(0,n),t=t.slice(n+1)),ut.hasOwnProperty(e)?{space:ut[e],local:t}:t}},ot.attr=function(t,n){if(arguments.length<2){if("string"==typeof t){var e=this.node();return t=U.ns.qualify(t),t.local?e.getAttributeNS(t.space,t.local):e.getAttribute(t)}for(n in t)this.each(N(n,t[n]));return this}return this.each(N(t,n))},ot.classed=function(t,n){if(arguments.length<2){if("string"==typeof t){var e=this.node(),r=(t=E(t)).length,i=-1;if(n=e.classList){for(;++i<r;)if(!n.contains(t[i]))return!1}else for(n=e.getAttribute("class");++i<r;)if(!S(t[i]).test(n))return!1;return!0}for(n in t)this.each(z(n,t[n]));return this}return this.each(z(t,n))},ot.style=function(t,e,r){var i=arguments.length;if(3>i){if("string"!=typeof t){2>i&&(e="");for(r in t)this.each(C(r,t[r],e));return this}if(2>i){var o=this.node();return n(o).getComputedStyle(o,null).getPropertyValue(t)}r=""}return this.each(C(t,e,r))},ot.property=function(t,n){if(arguments.length<2){if("string"==typeof t)return this.node()[t];for(n in t)this.each(L(n,t[n]));return this}return this.each(L(t,n))},ot.text=function(t){return arguments.length?this.each("function"==typeof t?function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}:null==t?function(){this.textContent=""}:function(){this.textContent=t}):this.node().textContent},ot.html=function(t){return arguments.length?this.each("function"==typeof t?function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}:null==t?function(){this.innerHTML=""}:function(){this.innerHTML=t}):this.node().innerHTML},ot.append=function(t){return t=P(t),this.select(function(){return this.appendChild(t.apply(this,arguments))})},ot.insert=function(t,n){return t=P(t),n=x(n),this.select(function(){return this.insertBefore(t.apply(this,arguments),n.apply(this,arguments)||null)})},ot.remove=function(){return this.each(O)},U.set=function(t){var n=new q;if(t)for(var e=0,r=t.length;r>e;++e)n.add(t[e]);return n},o(q,{has:c,add:function(t){return this._[a(t+="")]=!0,t},remove:l,values:f,size:h,empty:p,forEach:function(t){for(var n in this._)t.call(this,s(n))}}),ot.data=function(t,n){function e(t,e){var r,i,o,a=t.length,f=e.length,h=Math.min(a,f),p=new Array(f),v=new Array(f),g=new Array(a);if(n){var d,m=new u,_=new Array(a);for(r=-1;++r<a;)m.has(d=n.call(i=t[r],i.__data__,r))?g[r]=i:m.set(d,i),_[r]=d;for(r=-1;++r<f;)(i=m.get(d=n.call(e,o=e[r],r)))?i!==!0&&(p[r]=i,i.__data__=o):v[r]=M(o),m.set(d,!0);for(r=-1;++r<a;)m.get(_[r])!==!0&&(g[r]=t[r])}else{for(r=-1;++r<h;)i=t[r],o=e[r],i?(i.__data__=o,p[r]=i):v[r]=M(o);for(;f>r;++r)v[r]=M(e[r]);for(;a>r;++r)g[r]=t[r]}v.update=p,v.parentNode=p.parentNode=g.parentNode=t.parentNode,s.push(v),c.push(p),l.push(g)}var r,i,o=-1,a=this.length;if(!arguments.length){for(t=new Array(a=(r=this[0]).length);++o<a;)(i=r[o])&&(t[o]=i.__data__);return t}var s=X([]),c=w([]),l=w([]);if("function"==typeof t)for(;++o<a;)e(r=this[o],t.call(r,r.parentNode.__data__,o));else for(;++o<a;)e(r=this[o],t);return c.enter=function(){return s},c.exit=function(){return l},c},ot.datum=function(t){return arguments.length?this.property("__data__",t):this.property("__data__")},ot.filter=function(t){var n,e,r,i=[];"function"!=typeof t&&(t=D(t));for(var o=0,u=this.length;u>o;o++){i.push(n=[]),n.parentNode=(e=this[o]).parentNode;for(var a=0,s=e.length;s>a;a++)(r=e[a])&&t.call(r,r.__data__,a,o)&&n.push(r)}return w(i)},ot.order=function(){for(var t=-1,n=this.length;++t<n;)for(var e,r=this[t],i=r.length-1,o=r[i];--i>=0;)(e=r[i])&&(o&&o!==e.nextSibling&&o.parentNode.insertBefore(e,o),o=e);return this},U.ascending=$,ot.sort=function(t){t=k.apply(this,arguments);for(var n=-1,e=this.length;++n<e;)this[n].sort(t);return this.order()},ot.each=function(t){return V(this,function(n,e,r){t.call(n,n.__data__,e,r)})},ot.call=function(t){var n=Z(arguments);return t.apply(n[0]=this,n),this},ot.empty=function(){return!this.node()},ot.node=function(){for(var t=0,n=this.length;n>t;t++)for(var e=this[t],r=0,i=e.length;i>r;r++){var o=e[r];if(o)return o}return null},ot.size=function(){var t=0;return V(this,function(){++t}),t};var at=[];U.selection.enter=X,U.selection.enter.prototype=at,at.append=ot.append,at.empty=ot.empty,at.node=ot.node,at.call=ot.call,at.size=ot.size,at.select=function(t){for(var n,e,r,i,o,u=[],a=-1,s=this.length;++a<s;){r=(i=this[a]).update,u.push(n=[]),n.parentNode=i.parentNode;for(var c=-1,l=i.length;++c<l;)(o=i[c])?(n.push(r[c]=e=t.call(i.parentNode,o.__data__,c,a)),e.__data__=o.__data__):n.push(null)}return w(u)},at.insert=function(t,n){return arguments.length<2&&(n=j(this)),ot.insert.call(this,t,n)},U.select=function(n){var e;return"string"==typeof n?(e=[et(n,K)],e.parentNode=K.documentElement):(e=[n],e.parentNode=t(n)),w([e])},U.selectAll=function(t){var n;return"string"==typeof t?(n=Z(rt(t,K)),n.parentNode=K.documentElement):(n=t,n.parentNode=null),w([n])},ot.on=function(t,n,e){var r=arguments.length;if(3>r){if("string"!=typeof t){2>r&&(n=!1);for(e in t)this.each(H(e,t[e],n));return this}if(2>r)return(r=this.node()["__on"+t])&&r._;e=!1}return this.each(H(t,n,e))};var st=U.map({mouseenter:"mouseover",mouseleave:"mouseout"});K&&st.forEach(function(t){"on"+t in K&&st.remove(t)});var ct,lt=0;U.mouse=function(t){return G(t,_())};var ft=this.navigator&&/WebKit/.test(this.navigator.userAgent)?-1:0;U.touch=function(t,n,e){if(arguments.length<3&&(e=n,n=_().changedTouches),n)for(var r,i=0,o=n.length;o>i;++i)if((r=n[i]).identifier===e)return G(t,r)},U.behavior={},U.behavior.drag=function(){function t(){this.on("mousedown.drag",u).on("touchstart.drag",a)}function r(t,n,e,r,u){return function(){function a(){var t,e,r=n(h,g);r&&(t=r[0]-y[0],e=r[1]-y[1],v|=t|e,y=r,p({type:"drag",x:r[0]+c[0],y:r[1]+c[1],dx:t,dy:e}))}function s(){n(h,g)&&(m.on(r+d,null).on(u+d,null),_(v&&U.event.target===f),p({type:"dragend"}))}var c,l=this,f=U.event.target,h=l.parentNode,p=i.of(l,arguments),v=0,g=t(),d=".drag"+(null==g?"":"-"+g),m=U.select(e(f)).on(r+d,a).on(u+d,s),_=B(f),y=n(h,g);o?(c=o.apply(l,arguments),c=[c.x-y[0],c.y-y[1]]):c=[0,0],p({type:"dragstart"})}}var i=y(t,"drag","dragstart","dragend"),o=null,u=r(v,U.mouse,n,"mousemove","mouseup"),a=r(I,U.touch,e,"touchmove","touchend");return t.origin=function(n){return arguments.length?(o=n,t):o},U.rebind(t,i,"on")},"function"==typeof define&&define.amd?define(U):"object"==typeof module&&module.exports&&(module.exports=U),this.d3=U}();

},{}],179:[function(require,module,exports){
"use strict";function _interopRequireDefault(t){return t&&t.__esModule?t:{"default":t}}function _classCallCheck(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function t(t,n){for(var e=0;e<n.length;e++){var i=n[e];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(n,e,i){return e&&t(n.prototype,e),i&&t(n,i),n}}(),_Interval=require("./Interval"),_Interval2=_interopRequireDefault(_Interval),_utils=require("./utils"),ContigInterval=function(){function t(n,e,i){_classCallCheck(this,t),this.contig=n,this.interval=new _Interval2["default"](e,i)}return _createClass(t,[{key:"start",value:function(){return this.interval.start}},{key:"stop",value:function(){return this.interval.stop}},{key:"length",value:function(){return this.interval.length()}},{key:"intersects",value:function(t){return this.contig===t.contig&&this.interval.intersects(t.interval)}},{key:"chrIntersects",value:function(t){return this.chrOnContig(t.contig)&&this.interval.intersects(t.interval)}},{key:"containsInterval",value:function(t){return this.contig===t.contig&&this.interval.containsInterval(t.interval)}},{key:"isAdjacentTo",value:function(t){return this.contig===t.contig&&(this.start()==1+t.stop()||this.stop()+1==t.start())}},{key:"isCoveredBy",value:function(t){var n=this,e=t.filter(function(t){return t.contig===n.contig}).map(function(t){return t.interval});return this.interval.isCoveredBy(e)}},{key:"containsLocus",value:function(t,n){return this.contig===t&&this.interval.contains(n)}},{key:"chrContainsLocus",value:function(t,n){return this.chrOnContig(t)&&this.interval.contains(n)}},{key:"chrOnContig",value:function(t){return this.contig===t||this.contig==="chr"+t||"chr"+this.contig===t}},{key:"clone",value:function(){return new t(this.contig,this.interval.start,this.interval.stop)}},{key:"complementIntervals",value:function(n){var e=this;return this.interval.complementIntervals((0,_utils.flatMap)(n,function(t){return t.contig===e.contig?[t.interval]:[]})).map(function(n){return new t(e.contig,n.start,n.stop)})}},{key:"toString",value:function(){return this.contig+":"+this.start()+"-"+this.stop()}},{key:"toGenomeRange",value:function(){if(!("string"==typeof this.contig||this.contig instanceof String))throw"Cannot convert numeric ContigInterval to GenomeRange";return{contig:this.contig,start:this.start(),stop:this.stop()}}}],[{key:"compare",value:function(t,n){return t.contig>n.contig?-1:t.contig<n.contig?1:t.start()-n.start()}},{key:"coalesce",value:function(n){n.sort(t.compare);var e=[];return n.forEach(function(t){if(0===e.length)return void e.push(t);var n=e[e.length-1];t.intersects(n)||t.isAdjacentTo(n)?(n=e[e.length-1]=n.clone(),n.interval.stop=Math.max(t.interval.stop,n.interval.stop)):e.push(t)}),e}},{key:"fromGenomeRange",value:function(n){return new t(n.contig,n.start,n.stop)}}]),t}();module.exports=ContigInterval;

},{"./Interval":182,"./utils":209}],180:[function(require,module,exports){
"use strict";function _interopRequireDefault(t){return t&&t.__esModule?t:{"default":t}}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}var _createClass=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),_get=function(t,e,n){for(var r=!0;r;){var o=t,a=e,i=n;r=!1,null===o&&(o=Function.prototype);var u=Object.getOwnPropertyDescriptor(o,a);if(void 0!==u){if("value"in u)return u.value;var s=u.get;return void 0===s?void 0:s.call(i)}var l=Object.getPrototypeOf(o);if(null===l)return void 0;t=l,e=a,n=i,r=!0,u=l=void 0}},_react=require("react"),_react2=_interopRequireDefault(_react),_underscore=require("underscore"),_underscore2=_interopRequireDefault(_underscore),_utils=require("./utils"),_utils2=_interopRequireDefault(_utils),_Interval=require("./Interval"),_Interval2=_interopRequireDefault(_Interval),Controls=function(t){function e(t){_classCallCheck(this,e),_get(Object.getPrototypeOf(e.prototype),"constructor",this).call(this,t)}return _inherits(e,t),_createClass(e,[{key:"makeRange",value:function(){return{contig:this.refs.contig.value,start:Number(this.refs.start.value),stop:Number(this.refs.stop.value)}}},{key:"completeRange",value:function(t){var e=this;if(t=t||{},t.start&&void 0===t.stop&&(t.stop=t.start+20,t.start-=20),t.contig){var n;!function(){var r=t.contig;n=_underscore2["default"].find(e.props.contigList,function(t){return _utils2["default"].isChrMatch(r,t)}),n&&(t.contig=n)}()}return _underscore2["default"].extend({},this.props.range,t)}},{key:"handleContigChange",value:function(t){this.props.onChange(this.completeRange({contig:this.refs.contig.value}))}},{key:"handleFormSubmit",value:function(t){t.preventDefault();var e=this.completeRange(_utils2["default"].parseRange(this.refs.position.value));this.props.onChange(e)}},{key:"updateRangeUI",value:function(){var t=this.props.range;if(t&&(this.refs.position.value=_utils2["default"].formatInterval(new _Interval2["default"](t.start,t.stop)),this.props.contigList)){var e=this.props.contigList.indexOf(t.contig);this.refs.contig.selectedIndex=e}}},{key:"zoomIn",value:function(t){t.preventDefault(),this.zoomByFactor(.5)}},{key:"zoomOut",value:function(t){t.preventDefault(),this.zoomByFactor(2)}},{key:"zoomByFactor",value:function(t){var e=this.props.range;if(e){var n=_utils2["default"].scaleRange(new _Interval2["default"](e.start,e.stop),t);this.props.onChange({contig:e.contig,start:n.start,stop:n.stop})}}},{key:"render",value:function(){var t=this.props.contigList?this.props.contigList.map(function(t,e){return _react2["default"].createElement("option",{key:e},t)}):null;return _react2["default"].createElement("form",{className:"controls",onSubmit:this.handleFormSubmit.bind(this)},_react2["default"].createElement("select",{ref:"contig",onChange:this.handleContigChange.bind(this)},t)," ",_react2["default"].createElement("input",{ref:"position",type:"text"})," ",_react2["default"].createElement("button",{className:"btn-submit",onClick:this.handleFormSubmit.bind(this)},"Go")," ",_react2["default"].createElement("div",{className:"zoom-controls"},_react2["default"].createElement("button",{className:"btn-zoom-out",onClick:this.zoomOut.bind(this)})," ",_react2["default"].createElement("button",{className:"btn-zoom-in",onClick:this.zoomIn.bind(this)})))}},{key:"componentDidUpdate",value:function(t){_underscore2["default"].isEqual(t.range,this.props.range)||this.updateRangeUI()}},{key:"componentDidMount",value:function(){this.updateRangeUI()}}]),e}(_react2["default"].Component);module.exports=Controls;

},{"./Interval":182,"./utils":209,"react":175,"underscore":177}],181:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),_ContigInterval=require("./ContigInterval"),_ContigInterval2=_interopRequireDefault(_ContigInterval),_dataSamRead=require("./data/SamRead"),_dataSamRead2=_interopRequireDefault(_dataSamRead),OP_MAP={ALIGNMENT_MATCH:"M",INSERT:"I",DELETE:"D",SKIP:"N",CLIP_SOFT:"S",CLIP_HARD:"H",PAD:"P",SEQUENCE_MATCH:"=",SEQUENCE_MISMATCH:"X"},GA4GHAlignment=function(){function e(t){_classCallCheck(this,e),this.alignment=t,this.pos=t.alignment.position.position,this.ref=t.alignment.position.referenceName,this.name=t.fragmentName,this.cigarOps=t.alignment.cigar.map(function(e){var t=e.operation,n=e.operationLength;return{op:OP_MAP[t],length:n}}),this._interval=new _ContigInterval2["default"](this.ref,this.pos,this.pos+this.getReferenceLength()-1)}return _createClass(e,[{key:"getKey",value:function(){return e.keyFromGA4GHResponse(this.alignment)}},{key:"getStrand",value:function(){return this.alignment.alignment.position.reverseStrand?"-":"+"}},{key:"getQualityScores",value:function(){return this.alignment.alignedQuality}},{key:"getSequence",value:function(){return this.alignment.alignedSequence}},{key:"getInterval",value:function(){return this._interval}},{key:"intersects",value:function(e){return e.intersects(this.getInterval())}},{key:"getReferenceLength",value:function(){return _dataSamRead2["default"].referenceLengthFromOps(this.cigarOps)}},{key:"getMateProperties",value:function(){var e=this.alignment.nextMatePosition;return e&&{ref:e.referenceName,pos:e.position,strand:e.reverseStrand?"-":"+"}}},{key:"getInferredInsertSize",value:function(){var e=this.getMateProperties();if(e&&e.ref==this.ref){var t=this._interval.start(),n=this._interval.stop(),r=e.pos,a=r+this.getSequence.length();return Math.max(n,a)-Math.min(t,r)}return 0}}],[{key:"keyFromGA4GHResponse",value:function(e){return e.fragmentName+":"+e.readNumber}}]),e}();module.exports=GA4GHAlignment;

},{"./ContigInterval":179,"./data/SamRead":189}],182:[function(require,module,exports){
"use strict";function _classCallCheck(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function t(t,n){for(var r=0;r<n.length;r++){var e=n[r];e.enumerable=e.enumerable||!1,e.configurable=!0,"value"in e&&(e.writable=!0),Object.defineProperty(t,e.key,e)}}return function(n,r,e){return r&&t(n.prototype,r),e&&t(n,e),n}}(),Interval=function(){function t(n,r){_classCallCheck(this,t),this.start=n,this.stop=r}return _createClass(t,[{key:"length",value:function(){return Math.max(0,this.stop-this.start+1)}},{key:"intersect",value:function(n){return new t(Math.max(this.start,n.start),Math.min(this.stop,n.stop))}},{key:"intersects",value:function(t){return this.start<=t.stop&&t.start<=this.stop}},{key:"contains",value:function(t){return t>=this.start&&t<=this.stop}},{key:"containsInterval",value:function(t){return this.contains(t.start)&&this.contains(t.stop)}},{key:"clone",value:function(){return new t(this.start,this.stop)}},{key:"isCoveredBy",value:function(t){for(var n=this.clone(),r=0;r<t.length;r++){var e=t[r];if(r&&e.start<t[r-1].start)throw"isCoveredBy must be called with sorted ranges";if(e.start>n.start)return!1;if(n.start=e.stop+1,n.length()<=0)return!0}return!1}},{key:"subtract",value:function(n){return this.intersects(n)?this.containsInterval(n)?[new t(this.start,n.start-1),new t(n.stop+1,this.stop)].filter(function(t){return t.length()>0}):n.containsInterval(this)?[]:n.start<this.start?[new t(n.stop+1,this.stop)]:[new t(this.start,n.start-1)]:[this]}},{key:"complementIntervals",value:function(t){var n=[this];return t.forEach(function(t){var r=[];n.forEach(function(n){r=r.concat(n.subtract(t))}),n=r}),n}},{key:"toString",value:function(){return"["+this.start+", "+this.stop+"]"}}],[{key:"intersectAll",value:function(t){if(!t.length)throw new Error("Tried to intersect zero intervals");var n=t[0].clone();return t.slice(1).forEach(function(t){var r=t.start,e=t.stop;n.start=Math.max(r,n.start),n.stop=Math.min(e,n.stop)}),n}},{key:"boundingInterval",value:function(t){if(!t.length)throw new Error("Tried to bound zero intervals");var n=t[0].clone();return t.slice(1).forEach(function(t){var r=t.start,e=t.stop;n.start=Math.min(r,n.start),n.stop=Math.max(e,n.stop)}),n}}]),t}();module.exports=Interval;

},{}],183:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var _createClass=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),_get=function(e,t,r){for(var n=!0;n;){var a=e,o=t,c=r;n=!1,null===a&&(a=Function.prototype);var u=Object.getOwnPropertyDescriptor(a,o);if(void 0!==u){if("value"in u)return u.value;var i=u.get;return void 0===i?void 0:i.call(c)}var l=Object.getPrototypeOf(a);if(null===l)return void 0;e=l,t=o,r=c,n=!0,u=l=void 0}},_react=require("react"),_react2=_interopRequireDefault(_react),Menu=function(e){function t(){_classCallCheck(this,t),_get(Object.getPrototypeOf(t.prototype),"constructor",this).apply(this,arguments)}return _inherits(t,e),_createClass(t,[{key:"clickHandler",value:function(e,t){t.preventDefault();var r=this.props.items[e];"string"!=typeof r&&this.props.onSelect(r.key)}},{key:"render",value:function(){var e=this,t=function(t){return e.clickHandler.bind(e,t)},r=[];return this.props.header&&r.push(_react2["default"].createElement("div",{key:"header",className:"menu-header"},this.props.header)),r=r.concat(this.props.items.map(function(e,r){if("string"==typeof e)return _react2["default"].createElement("div",{key:r,className:"menu-separator"});var n="check"+(e.checked?" checked":"");return _react2["default"].createElement("div",{key:r,className:"menu-item",onClick:t(r)},_react2["default"].createElement("span",{className:n}),_react2["default"].createElement("span",{className:"menu-item-label"},e.label))})),_react2["default"].createElement("div",{className:"menu"},r)}}]),t}(_react2["default"].Component);module.exports=Menu;

},{"react":175}],184:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var _slicedToArray=function(){function e(e,t){var r=[],n=!0,i=!1,s=void 0;try{for(var u,o=e[Symbol.iterator]();!(n=(u=o.next()).done)&&(r.push(u.value),!t||r.length!==t);n=!0);}catch(a){i=!0,s=a}finally{try{!n&&o["return"]&&o["return"]()}finally{if(i)throw s}}return r}return function(t,r){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return e(t,r);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),_createClass=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),_q=require("q"),_q2=_interopRequireDefault(_q),RemoteFile=function(){function e(t){_classCallCheck(this,e),this.url=t,this.fileLength=-1,this.chunks=[],this.numNetworkRequests=0}return _createClass(e,[{key:"getBytes",value:function(e,t){if(0>t)return _q2["default"].reject("Requested <0 bytes ("+t+") from "+this.url);var r=e+t-1;-1!=this.fileLength&&(r=Math.min(this.fileLength-1,r));var n=this.getFromCache(e,r);return n?_q2["default"].when(n):this.getFromNetwork(e,r)}},{key:"getAll",value:function(){var e=this;if(-1!=this.fileLength){var t=this.getFromCache(0,this.fileLength-1);if(t)return _q2["default"].when(t)}var r=new XMLHttpRequest;return r.open("GET",this.url),r.responseType="arraybuffer",this.promiseXHR(r).then(function(t){var r=_slicedToArray(t,1),n=r[0];return e.fileLength=n.byteLength,e.chunks=[{start:0,stop:e.fileLength-1,buffer:n}],n})}},{key:"getAllString",value:function(){var e=new XMLHttpRequest;return e.open("GET",this.url),this.promiseXHR(e).then(function(e){var t=_slicedToArray(e,1),r=t[0];return r})}},{key:"getSize",value:function(){if(-1!=this.fileLength)return _q2["default"].when(this.fileLength);var e=new XMLHttpRequest;return e.open("HEAD",this.url),this.promiseXHR(e).then(function(){var t=e.getResponseHeader("Content-Length");if(null!==t)return Number(t);throw"Remote resource has unknown length"})}},{key:"getFromCache",value:function(e,t){for(var r=0;r<this.chunks.length;r++){var n=this.chunks[r];if(n.start<=e&&n.stop>=t)return n.buffer.slice(e-n.start,t-n.start+1)}return null}},{key:"getFromNetwork",value:function(e,t){var r=this,n=t-e+1;if(n>5e7)throw"Monster request: Won't fetch "+n+" bytes from "+this.url;var i=new XMLHttpRequest;return i.open("GET",this.url),i.responseType="arraybuffer",i.setRequestHeader("Range","bytes="+e+"-"+t),this.promiseXHR(i).then(function(t){var n=_slicedToArray(t,1),s=n[0],u={start:e,stop:e+s.byteLength-1,buffer:s};r.chunks.push(u);var o=r._getLengthFromContentRange(i);return null!==o&&void 0!==o&&(-1!=r.fileLength&&r.fileLength!=o?console.warn("Size of remote file "+r.url+" changed from "+(r.fileLength+" to "+o)):r.fileLength=o),s})}},{key:"promiseXHR",value:function(e){var t=this.url,r=_q2["default"].defer();return e.addEventListener("load",function(e){this.status>=400?r.reject("Request for "+t+" failed with status: "+this.status+" "+this.statusText):r.resolve([this.response,e])}),e.addEventListener("error",function(e){r.reject("Request for "+t+" failed with status: "+this.status+" "+this.statusText)}),this.numNetworkRequests++,e.send(),r.promise}},{key:"_getLengthFromContentRange",value:function(e){if(!/Content-Range/i.exec(e.getAllResponseHeaders()))return null;var t=e.getResponseHeader("Content-Range"),r=/\/(\d+)$/.exec(t);return r?Number(r[1]):(console.warn("Received improper Content-Range value for "+(this.url+": "+t)),null)}},{key:"clearCache",value:function(){this.chunks=[]}}]),e}();module.exports=RemoteFile;

},{"q":22}],185:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),_get=function(e,t,n){for(var a=!0;a;){var r=e,i=t,o=n;a=!1,null===r&&(r=Function.prototype);var s=Object.getOwnPropertyDescriptor(r,i);if(void 0!==s){if("value"in s)return s.value;var l=s.get;return void 0===l?void 0:l.call(o)}var c=Object.getPrototypeOf(r);if(null===c)return void 0;e=c,t=i,n=o,a=!0,s=c=void 0}},_react=require("react"),_react2=_interopRequireDefault(_react),_Controls=require("./Controls"),_Controls2=_interopRequireDefault(_Controls),_Menu=require("./Menu"),_Menu2=_interopRequireDefault(_Menu),_VisualizationWrapper=require("./VisualizationWrapper"),_VisualizationWrapper2=_interopRequireDefault(_VisualizationWrapper),Root=function(e){function t(e){_classCallCheck(this,t),_get(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,e),this.state={contigList:this.props.referenceSource.contigList(),range:null,settingsMenuKey:null}}return _inherits(t,e),_createClass(t,[{key:"componentDidMount",value:function(){var e=this;this.props.referenceSource.on("contigs",function(){e.setState({contigList:e.props.referenceSource.contigList()})}),this.state.range||this.handleRangeChange(this.props.initialRange),this.setState({contigList:this.props.referenceSource.contigList()})}},{key:"handleRangeChange",value:function(e){var t=this;this.props.referenceSource.normalizeRange(e).then(function(e){t.setState({range:e}),t.props.tracks.forEach(function(t){t.source.rangeChanged(e)})}).done()}},{key:"toggleSettingsMenu",value:function(e,t){this.state.settingsMenuKey==e?this.setState({settingsMenuKey:null}):this.setState({settingsMenuKey:e})}},{key:"handleSelectOption",value:function(e,t){this.setState({settingsMenuKey:null});var n=this.props.tracks[Number(e)].visualization,a=n.options,r=n.component.handleSelectOption(t,a);n.options=r,r!=a&&this.forceUpdate()}},{key:"makeDivForTrack",value:function(e,t){var n=_react2["default"].createElement(_VisualizationWrapper2["default"],{visualization:t.visualization,range:this.state.range,onRangeChange:this.handleRangeChange.bind(this),source:t.source,referenceSource:this.props.referenceSource}),a=t.track.name||"(track name)",r=null,i=null;if(t.visualization.component.getOptionsMenu&&(r=_react2["default"].createElement("span",{ref:"gear-"+e,className:"gear",onClick:this.toggleSettingsMenu.bind(this,e)},"⚙")),this.state.settingsMenuKey==e){var o=this.refs["gear-"+e],s=o.offsetLeft,l=o.offsetWidth,c=o.offsetTop,u={position:"absolute",left:s+l+"px",top:c+"px"},p=t.visualization.component.getOptionsMenu(t.visualization.options);i=_react2["default"].createElement("div",{className:"menu-container",style:u},_react2["default"].createElement(_Menu2["default"],{header:a,items:p,onSelect:this.handleSelectOption.bind(this,e)}))}var f=["track",t.visualization.component.displayName||"",t.track.cssClass||""].join(" ");return _react2["default"].createElement("div",{key:e,className:f},_react2["default"].createElement("div",{className:"track-label"},_react2["default"].createElement("span",null,a),_react2["default"].createElement("br",null),r,i),_react2["default"].createElement("div",{className:"track-content"},n))}},{key:"render",value:function(){var e=this,t=this.props.tracks.map(function(t,n){return e.makeDivForTrack(""+n,t)});return _react2["default"].createElement("div",{className:"pileup-root"},_react2["default"].createElement("div",{className:"track controls"},_react2["default"].createElement("div",{className:"track-label"}," "),_react2["default"].createElement("div",{className:"track-content"},_react2["default"].createElement(_Controls2["default"],{contigList:this.state.contigList,range:this.state.range,onChange:this.handleRangeChange.bind(this)}))),t)}}]),t}(_react2["default"].Component);Root.displayName="Root",module.exports=Root;

},{"./Controls":180,"./Menu":183,"./VisualizationWrapper":187,"react":175}],186:[function(require,module,exports){
"use strict";function _interopRequireDefault(t){return t&&t.__esModule?t:{"default":t}}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),_underscore=require("underscore"),_underscore2=_interopRequireDefault(_underscore),_utils=require("./utils"),CHUNK_SIZE=1e3,SequenceStore=function(){function t(){_classCallCheck(this,t),this.contigMap={}}return _createClass(t,[{key:"setRange",value:function(t,e){if(0!==t.length()){if(t.length()!=e.length)throw"setRange length mismatch";var n=this._getSequences(t.contig);n||(n=this.contigMap[t.contig]={});var r=!0,u=!1,a=void 0;try{for(var i,o=this._chunkForInterval(t.interval)[Symbol.iterator]();!(r=(i=o.next()).done);r=!0){var l=i.value,s=l.chunkStart+l.offset-t.start();this._setChunk(n,l,e.slice(s,s+l.length))}}catch(c){u=!0,a=c}finally{try{!r&&o["return"]&&o["return"]()}finally{if(u)throw a}}}}},{key:"getAsString",value:function(t){var e=this._getSequences(t.contig);if(!e)return".".repeat(t.length());var n=this._chunkForInterval(t.interval),r="",u=!0,a=!1,i=void 0;try{for(var o,l=n[Symbol.iterator]();!(u=(o=l.next()).done);u=!0){var s=o.value,c=e[s.chunkStart];r+=c?0===s.offset&&s.length==c.length?c:c.slice(s.offset,s.offset+s.length):".".repeat(s.length)}}catch(f){a=!0,i=f}finally{try{!u&&l["return"]&&l["return"]()}finally{if(a)throw i}}return r}},{key:"getAsObjects",value:function(t){return _underscore2["default"].object(_underscore2["default"].map(this.getAsString(t),function(e,n){return[t.contig+":"+(t.start()+n),"."==e?null:e]}))}},{key:"_getChunk",value:function(t,e){return t[e]||".".repeat(CHUNK_SIZE)}},{key:"_chunkForInterval",value:function(t){var e=t.start%CHUNK_SIZE,n=t.start-e,r=[{chunkStart:n,offset:e,length:Math.min(CHUNK_SIZE-e,t.length())}];for(n+=CHUNK_SIZE;n<=t.stop;n+=CHUNK_SIZE)r.push({chunkStart:n,offset:0,length:Math.min(CHUNK_SIZE,t.stop-n+1)});return r}},{key:"_setChunk",value:function(t,e,n){if(0===e.offset&&n.length==CHUNK_SIZE)return void(t[e.chunkStart]=n);var r=this._getChunk(t,e.chunkStart);t[e.chunkStart]=r.slice(0,e.offset)+n+r.slice(e.offset+n.length)}},{key:"_getSequences",value:function(t){return this.contigMap[t]||this.contigMap[(0,_utils.altContigName)(t)]||null}}]),t}();module.exports=SequenceStore;

},{"./utils":209,"underscore":177}],187:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function e(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,r,i){return r&&e(t.prototype,r),i&&e(t,i),t}}(),_get=function(e,t,r){for(var i=!0;i;){var a=e,n=t,o=r;i=!1,null===a&&(a=Function.prototype);var u=Object.getOwnPropertyDescriptor(a,n);if(void 0!==u){if("value"in u)return u.value;var s=u.get;return void 0===s?void 0:s.call(o)}var l=Object.getPrototypeOf(a);if(null===l)return void 0;e=l,t=n,r=o,i=!0,u=l=void 0}},_react=require("react"),_react2=_interopRequireDefault(_react),_reactDom=require("react-dom"),_reactDom2=_interopRequireDefault(_reactDom),_vizD3utils=require("./viz/d3utils"),_vizD3utils2=_interopRequireDefault(_vizD3utils),_underscore=require("underscore"),_underscore2=_interopRequireDefault(_underscore),_libMinid3=require("../lib/minid3"),_libMinid32=_interopRequireDefault(_libMinid3),VisualizationWrapper=function(e){function t(e){_classCallCheck(this,t),_get(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,e),this.hasDragBeenInitialized=!1,this.state={width:0,height:0}}return _inherits(t,e),_createClass(t,[{key:"updateSize",value:function(){var e=_reactDom2["default"].findDOMNode(this).parentNode;this.setState({width:e.offsetWidth,height:e.offsetHeight})}},{key:"componentDidMount",value:function(){var e=this;window.addEventListener("resize",function(){return e.updateSize()}),this.updateSize(),this.props.range&&!this.hasDragBeenInitialized&&this.addDragInterface()}},{key:"componentDidUpdate",value:function(){this.props.range&&!this.hasDragBeenInitialized&&this.addDragInterface()}},{key:"getScale",value:function(){return this.props.range?_vizD3utils2["default"].getTrackScale(this.props.range,this.state.width):function(e){return e}}},{key:"addDragInterface",value:function(){function e(){u()}var t=this;this.hasDragBeenInitialized=!0;var r,i,a=_reactDom2["default"].findDOMNode(this),n=0,o=function(){_libMinid32["default"].event.sourceEvent.stopPropagation(),n=0,r=_underscore2["default"].clone(t.props.range),i=t.getScale()},u=function(){if(i&&r){var e=i.invert(-n),a=Math.round(e),o=i(e)-i(a),u={contig:r.contig,start:a,stop:a+(r.stop-r.start),offsetPx:o};t.props.onRangeChange(u)}},s=function(){n+=_libMinid32["default"].event.dx,u()},l=_libMinid32["default"].behavior.drag().on("dragstart",o).on("drag",s).on("dragend",e);_libMinid32["default"].select(a).call(l).on("click",this.handleClick.bind(this))}},{key:"handleClick",value:function(){_libMinid32["default"].event.defaultPrevented&&_libMinid32["default"].event.stopPropagation()}},{key:"render",value:function(){var e=this.props.range,t=this.props.visualization.component;if(!e)return _react2["default"].createElement(EmptyTrack,{className:t.displayName});var r=_react2["default"].createElement(t,{range:e,source:this.props.source,referenceSource:this.props.referenceSource,width:this.state.width,height:this.state.height,options:this.props.visualization.options});return _react2["default"].createElement("div",{className:"drag-wrapper"},r)}}]),t}(_react2["default"].Component);VisualizationWrapper.displayName="VisualizationWrapper";var EmptyTrack=function(e){function t(){_classCallCheck(this,t),_get(Object.getPrototypeOf(t.prototype),"constructor",this).apply(this,arguments)}return _inherits(t,e),_createClass(t,[{key:"render",value:function(){var e=this.props.className+" empty";return _react2["default"].createElement("div",{className:e})}}]),t}(_react2["default"].Component);module.exports=VisualizationWrapper;

},{"../lib/minid3":178,"./viz/d3utils":222,"react":175,"react-dom":23,"underscore":177}],188:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function parseHeader(e){return new _jbinary2["default"](e,_formatsBbi2["default"].TYPE_SET).read("Header")}function parseCirTree(e){return new _jbinary2["default"](e,_formatsBbi2["default"].TYPE_SET).read("CirTree")}function generateContigMap(e){var t=e.chromosomeTree.nodes.contents;if(!t)throw"Invalid chromosome tree";return _underscore2["default"].object(t.map(function(e){var t=e.id,r=e.key;return[r.replace(/\0.*/,""),t]}))}function reverseContigMap(e){var t=[];return _underscore2["default"].each(e,function(e,r){t[e]=r}),t}function extractFeaturesFromBlock(e,t,r){var n=r.offset-t.start,a=n+r.size,i=e.slice(n+2,a),o=_pakoLibInflate2["default"].inflateRaw(new Uint8Array(i)),u=new _jbinary2["default"](o,_formatsBbi2["default"].TYPE_SET);return u.read("BedBlock")}var _slicedToArray=function(){function e(e,t){var r=[],n=!0,a=!1,i=void 0;try{for(var o,u=e[Symbol.iterator]();!(n=(o=u.next()).done)&&(r.push(o.value),!t||r.length!==t);n=!0);}catch(s){a=!0,i=s}finally{try{!n&&u["return"]&&u["return"]()}finally{if(a)throw i}}return r}return function(t,r){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return e(t,r);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),_createClass=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),_q=require("q"),_q2=_interopRequireDefault(_q),_underscore=require("underscore"),_underscore2=_interopRequireDefault(_underscore),_jbinary=require("jbinary"),_jbinary2=_interopRequireDefault(_jbinary),_pakoLibInflate=require("pako/lib/inflate"),_pakoLibInflate2=_interopRequireDefault(_pakoLibInflate),_RemoteFile=require("../RemoteFile"),_RemoteFile2=_interopRequireDefault(_RemoteFile),_Interval=require("../Interval"),_Interval2=_interopRequireDefault(_Interval),_ContigInterval=require("../ContigInterval"),_ContigInterval2=_interopRequireDefault(_ContigInterval),_utils=require("../utils"),_utils2=_interopRequireDefault(_utils),_formatsBbi=require("./formats/bbi"),_formatsBbi2=_interopRequireDefault(_formatsBbi),ImmediateBigBed=function(){function e(t,r,n,a){_classCallCheck(this,e),this.remoteFile=t,this.header=r,this.cirTree=n,this.contigMap=a,this.chrIdToContig=reverseContigMap(a)}return _createClass(e,[{key:"getContigId",value:function(e){if(e in this.contigMap)return this.contigMap[e];var t="chr"+e;if(t in this.contigMap)return this.contigMap[t];throw"Invalid contig "+e}},{key:"getChrIdInterval",value:function(e){return new _ContigInterval2["default"](this.getContigId(e.contig),e.start(),e.stop())}},{key:"getContigInterval",value:function(e){return new _ContigInterval2["default"](this.chrIdToContig[e.contig],e.start(),e.stop())}},{key:"attachContigToBedRows",value:function(e){var t=this;return e.map(function(e){return{contig:t.chrIdToContig[e.chrId],start:e.start,stop:e.stop,rest:e.rest}})}},{key:"findOverlappingBlocks",value:function(e){var t=[],r=[[e.contig,e.start()],[e.contig,e.stop()]],n=function a(e){if(e.contents)e.contents.forEach(a);else{var n=[[e.startChromIx,e.startBase],[e.endChromIx,e.endBase]];_utils2["default"].tupleRangeOverlaps(n,r)&&t.push(e)}};return n(this.cirTree.blocks),t}},{key:"fetchFeaturesByBlock",value:function(e){var t=this.findOverlappingBlocks(e);if(0===t.length)return _q2["default"].when([]);var r=_Interval2["default"].boundingInterval(t.map(function(e){return new _Interval2["default"](+e.offset,e.offset+e.size)}));return this.remoteFile.getBytes(r.start,r.length()).then(function(e){return t.map(function(t){var n=extractFeaturesFromBlock(e,r,t);if(t.startChromIx!=t.endChromIx)throw"Can't handle blocks which span chromosomes!";return{range:new _ContigInterval2["default"](t.startChromIx,t.startBase,t.endBase),rows:n}})})}},{key:"fetchFeatures",value:function(e){var t=this;return this.fetchFeaturesByBlock(e).then(function(r){var n=_underscore2["default"].flatten(r.map(function(e){return e.rows}));return n=n.filter(function(t){var r=new _ContigInterval2["default"](t.chrId,t.start,t.stop-1);return e.intersects(r)}),t.attachContigToBedRows(n)})}},{key:"getFeaturesInRange",value:function(e){return this.fetchFeatures(this.getChrIdInterval(e))}},{key:"getFeatureBlocksOverlapping",value:function(e){var t=this,r=this.getChrIdInterval(e);return this.fetchFeaturesByBlock(r).then(function(e){return e.map(function(e){return{range:t.getContigInterval(e.range),rows:t.attachContigToBedRows(e.rows)}})})}}]),e}(),BigBed=function(){function e(t){var r=this;_classCallCheck(this,e),this.remoteFile=new _RemoteFile2["default"](t),this.header=this.remoteFile.getBytes(0,65536).then(parseHeader),this.contigMap=this.header.then(generateContigMap),this.cirTree=this.header.then(function(e){var t=e.unzoomedIndexOffset,n=e.zoomHeaders[0],a=n?n.dataOffset-t:4096;return r.remoteFile.getBytes(t,a).then(parseCirTree)}),this.immediate=_q2["default"].all([this.header,this.cirTree,this.contigMap]).then(function(e){var t=_slicedToArray(e,3),n=t[0],a=t[1],i=t[2],o=i;return new ImmediateBigBed(r.remoteFile,n,a,o)}),this.immediate.done()}return _createClass(e,[{key:"getFeaturesInRange",value:function(e,t,r){var n=new _ContigInterval2["default"](e,t,r);return this.immediate.then(function(e){return e.getFeaturesInRange(n)})}},{key:"getFeatureBlocksOverlapping",value:function(e){return this.immediate.then(function(t){return t.getFeatureBlocksOverlapping(e)})}}]),e}();module.exports=BigBed;

},{"../ContigInterval":179,"../Interval":182,"../RemoteFile":184,"../utils":209,"./formats/bbi":196,"jbinary":8,"pako/lib/inflate":10,"q":22,"underscore":177}],189:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function strandFlagToString(e){return e?"-":"+"}function makeCigarString(e){return e.map(function(e){var t=e.op,r=e.length;return r+t}).join("")}function makeAsciiPhred(e){return 0===e.length?"":_underscore2["default"].every(e,function(e){return 255==e})?"*":e.map(function(e){return String.fromCharCode(33+e)}).join("")}var _createClass=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),_jdataview=require("jdataview"),_jdataview2=_interopRequireDefault(_jdataview),_jbinary=require("jbinary"),_jbinary2=_interopRequireDefault(_jbinary),_underscore=require("underscore"),_underscore2=_interopRequireDefault(_underscore),_formatsBamTypes=require("./formats/bamTypes"),_formatsBamTypes2=_interopRequireDefault(_formatsBamTypes),_ContigInterval=require("../ContigInterval"),_ContigInterval2=_interopRequireDefault(_ContigInterval),CIGAR_OPS=["M","I","D","N","S","H","P","=","X"],SEQUENCE_VALUES=["=","A","C","M","G","R","S","V","T","W","Y","H","K","D","B","N"],SamRead=function(){function e(t,r,n){_classCallCheck(this,e),this.buffer=t,this.offset=r;var i=this._getJDataView();this.refID=i.getInt32(0),this.ref=n,this.pos=i.getInt32(4),this.l_seq=i.getInt32(16),this.cigarOps=this._getCigarOps(),this.name=this._getName()}return _createClass(e,[{key:"toString",value:function(){var e=this.pos+this.l_seq;return this.ref+":"+(1+this.pos)+"-"+e}},{key:"_getJDataView",value:function(){var e=this.buffer;return new _jdataview2["default"](e,0,e.byteLength,!0)}},{key:"getKey",value:function(){return this.offset.toString()}},{key:"_getName",value:function(){var e=this._getJDataView(),t=e.getUint8(8);return e.seek(32),e.getString(t-1)}},{key:"getFlag",value:function(){return this._getJDataView().getUint16(14)}},{key:"getInferredInsertSize",value:function(){return this._getJDataView().getUint16(28)}},{key:"getStrand",value:function(){return strandFlagToString(this.getFlag()&_formatsBamTypes2["default"].Flags.READ_STRAND)}},{key:"getFull",value:function(){if(this._full)return this._full;var e=new _jbinary2["default"](this.buffer,_formatsBamTypes2["default"].TYPE_SET),t=e.read(_formatsBamTypes2["default"].ThickAlignment,0);return this._full=t,t}},{key:"getInterval",value:function(){if(this._interval)return this._interval;var e=new _ContigInterval2["default"](this.ref,this.pos,this.pos+this.getReferenceLength()-1);return e}},{key:"intersects",value:function(e){return e.intersects(this.getInterval())}},{key:"_getCigarOps",value:function(){for(var e=this._getJDataView(),t=e.getUint8(8),r=e.getUint16(12),n=32+t,i=new Array(r),a=0;r>a;a++){var u=e.getUint32(n+4*a);i[a]={op:CIGAR_OPS[15&u],length:u>>4}}return i}},{key:"getQualityScores",value:function(){var e=this._getJDataView(),t=e.getUint8(8),r=e.getUint16(12),n=e.getInt32(16),i=32+t+4*r+Math.ceil(n/2);return e.getBytes(n,i,!0,!0)}},{key:"getCigarString",value:function(){return makeCigarString(this.getFull().cigar)}},{key:"getQualPhred",value:function(){return makeAsciiPhred(this.getQualityScores())}},{key:"getSequence",value:function(){if(this._seq)return this._seq;for(var e=this._getJDataView(),t=e.getUint8(8),r=e.getUint16(12),n=e.getInt32(16),i=32+t+4*r,a=new Array(n),u=Math.ceil(n/2),s=0;u>s;s++){var g=e.getUint8(i+s);a[2*s]=SEQUENCE_VALUES[g>>4],n>2*s+1&&(a[2*s+1]=SEQUENCE_VALUES[15&g])}var l=a.join("");return this._seq=l,l}},{key:"getReferenceLength",value:function(){return e.referenceLengthFromOps(this.cigarOps)}},{key:"getMateProperties",value:function(){var e=this._getJDataView(),t=e.getUint16(14);if(!(t&_formatsBamTypes2["default"].Flags.READ_PAIRED))return null;var r=e.getInt32(20),n=e.getInt32(24),i=strandFlagToString(t&_formatsBamTypes2["default"].Flags.MATE_STRAND);return{ref:r==this.refID?this.ref:null,pos:n,strand:i}}},{key:"debugString",value:function(){var e=this.getFull();return"Name: "+this.name+"\nFLAG: "+this.getFlag()+"\nPosition: "+this.getInterval()+"\nCIGAR: "+this.getCigarString()+"\nSequence: "+e.seq+"\nQuality:  "+this.getQualPhred()+"\nTags: "+JSON.stringify(e.auxiliary,null,"  ")+"\n    "}}],[{key:"referenceLengthFromOps",value:function(e){var t=0;return e.forEach(function(e){var r=e.op,n=e.length;switch(r){case"M":case"D":case"N":case"=":case"X":t+=n}}),t}}]),e}();module.exports=SamRead;

},{"../ContigInterval":179,"./formats/bamTypes":195,"jbinary":8,"jdataview":9,"underscore":177}],190:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}function _classCallCheck(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function parseSequenceRecord(e,n){var t=new _jbinary2["default"](e,_formatsTwoBitTypes2["default"].TYPE_SET),r=t.read("SequenceRecord"),a=t.tell()+8*r.maskBlockCount+4;return{numBases:r.dnaSize,unknownBlockStarts:r.nBlockStarts,unknownBlockLengths:r.nBlockSizes,numMaskBlocks:r.maskBlockCount,maskBlockStarts:[],maskBlockLengths:[],dnaOffsetFromHeader:a,offset:n}}function parseHeader(e){var n=new _jbinary2["default"](e,_formatsTwoBitTypes2["default"].TYPE_SET),t=n.read("Header");return{sequenceCount:t.sequenceCount,sequences:t.sequences}}function unpackDNA(e,n,t){var r=[];r.length=4*e.byteLength;for(var a=-n,o=0;o<e.byteLength;o++)for(var u=e.getUint8(o),s=6;s>=0;s-=2){var i=BASE_PAIRS[u>>s&3];n>=0&&(r[a]=i),a++}return r.length=t,r}function markUnknownDNA(e,n,t){for(var r=n+e.length-1,a=0;a<t.unknownBlockStarts.length;a++){var o=t.unknownBlockStarts[a],u=t.unknownBlockLengths[a],s=o+u-1,i=Math.max(o,n),c=Math.min(s,r);if(!(i>c))for(var f=i;c>=f;f++)e[f-n]="N"}return e}var _createClass=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}(),_q=require("q"),_q2=_interopRequireDefault(_q),_underscore=require("underscore"),_underscore2=_interopRequireDefault(_underscore),_jbinary=require("jbinary"),_jbinary2=_interopRequireDefault(_jbinary),_formatsTwoBitTypes=require("./formats/twoBitTypes"),_formatsTwoBitTypes2=_interopRequireDefault(_formatsTwoBitTypes),BASE_PAIRS=["T","C","A","G"],TwoBit=function(){function e(n){_classCallCheck(this,e),this.remoteFile=n;var t=_q2["default"].defer();this.header=t.promise,this.remoteFile.getBytes(0,16384).then(function(e){var n=parseHeader(e);t.resolve(n)}).done()}return _createClass(e,[{key:"getFeaturesInRange",value:function(e,n,t){var r=this;if(n>t)throw"Requested a 2bit range with start > stop ("+n+", "+t+")";return this._getSequenceHeader(e).then(function(e){var a=e.offset+e.dnaOffsetFromHeader,o=Math.floor(a+n/4),u=Math.ceil((t-n+1)/4)+1;return r.remoteFile.getBytes(o,u).then(function(r){var a=new DataView(r);return markUnknownDNA(unpackDNA(a,n%4,t-n+1),n,e).join("")})})}},{key:"getContigList",value:function(){return this.header.then(function(e){return e.sequences.map(function(e){return e.name})})}},{key:"_getSequenceHeader",value:function(e){var n=this;return this.header.then(function(t){var r=_underscore2["default"].findWhere(t.sequences,{name:e})||_underscore2["default"].findWhere(t.sequences,{name:"chr"+e});if(null===r||void 0===r)throw"Invalid contig: "+e;var a=r;return n.remoteFile.getBytes(a.offset,4095).then(function(e){return parseSequenceRecord(e,a.offset)})})}}]),e}();module.exports=TwoBit;

},{"./formats/twoBitTypes":198,"jbinary":8,"q":22,"underscore":177}],191:[function(require,module,exports){
"use strict";function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function t(t,e){for(var f=0;f<e.length;f++){var s=e[f];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(t,s.key,s)}}return function(e,f,s){return f&&t(e.prototype,f),s&&t(e,s),e}}(),VirtualOffset=function(){function t(e,f){_classCallCheck(this,t),this.coffset=e,this.uoffset=f}return _createClass(t,[{key:"toString",value:function(){return this.coffset+":"+this.uoffset}},{key:"isLessThan",value:function(t){return this.coffset<t.coffset||this.coffset==t.coffset&&this.uoffset<t.uoffset}},{key:"isLessThanOrEqual",value:function(t){return this.coffset<=t.coffset||this.coffset==t.coffset&&this.uoffset<=t.uoffset}},{key:"isEqual",value:function(t){return this.coffset==t.coffset&&this.uoffset==t.uoffset}},{key:"compareTo",value:function(t){return this.coffset-t.coffset||this.uoffset-t.uoffset}},{key:"clone",value:function(){return new t(this.coffset,this.uoffset)}}],[{key:"fromBlob",value:function(e,f){f=f||0;var s=e[f]+256*e[f+1],o=e[f+2]+256*e[f+3]+65536*e[f+4]+16777216*e[f+5]+4294967296*e[f+6]+1099511627776*e[f+7];return new t(o,s)}}]),t}();module.exports=VirtualOffset;

},{}],192:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}function _classCallCheck(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function computeIndexChunks(e){var n=new _jdataview2["default"](e,0,e.byteLength,!0),t=1/0,r=[];n.getInt32();for(var i=n.getInt32(),u=0;i>u;u++){r.push(n.tell());for(var a=n.getInt32(),s=0;a>s;s++){n.getUint32();var o=n.getInt32();n.skip(16*o)}var h=n.getInt32();if(h){var l=_VirtualOffset2["default"].fromBlob(n.getBytes(8),0),f=l.coffset+(l.uoffset?65536:0);f&&(t=Math.min(f,t)),n.skip(8*(h-1))}}return r.push(n.tell()),{chunks:_underscore2["default"].zip(_underscore2["default"].initial(r),_underscore2["default"].rest(r)),minBlockIndex:t}}function readChunks(e){return new _jbinary2["default"](e,_formatsBamTypes2["default"].TYPE_SET).read("ChunksArray")}function readIntervals(e){for(var n=new Array(Math.floor(e.length/8)),t=0;t<e.length-7;t+=8)n[t>>3]=_VirtualOffset2["default"].fromBlob(e,t);return n}function doChunksOverlap(e,n){return e.chunk_beg.isLessThanOrEqual(n.chunk_end)&&n.chunk_beg.isLessThanOrEqual(e.chunk_end)}function areChunksAdjacent(e,n){return e.chunk_beg.isEqual(n.chunk_end)||e.chunk_end.isEqual(n.chunk_beg)}function optimizeChunkList(e,n){e.sort(function(e,n){var t=e.chunk_beg.compareTo(n.chunk_beg);return 0===t&&(t=e.chunk_end.compareTo(n.chunk_end)),t});var t=[];return e.forEach(function(e){if(!e.chunk_end.isLessThan(n)){if(0===t.length)return void t.push(e);var r=t[t.length-1];doChunksOverlap(r,e)||areChunksAdjacent(r,e)?r.chunk_end.isLessThan(e.chunk_end)&&(r.chunk_end=e.chunk_end):t.push(e)}}),t}function reg2bins(e,n){var t,r=[];for(--n,r.push(0),t=1+(e>>26);1+(n>>26)>=t;++t)r.push(t);for(t=9+(e>>23);9+(n>>23)>=t;++t)r.push(t);for(t=73+(e>>20);73+(n>>20)>=t;++t)r.push(t);for(t=585+(e>>17);585+(n>>17)>=t;++t)r.push(t);for(t=4681+(e>>14);4681+(n>>14)>=t;++t)r.push(t);return r}var _slicedToArray=function(){function e(e,n){var t=[],r=!0,i=!1,u=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(t.push(a.value),!n||t.length!==n);r=!0);}catch(o){i=!0,u=o}finally{try{!r&&s["return"]&&s["return"]()}finally{if(i)throw u}}return t}return function(n,t){if(Array.isArray(n))return n;if(Symbol.iterator in Object(n))return e(n,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),_createClass=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}(),_jbinary=require("jbinary"),_jbinary2=_interopRequireDefault(_jbinary),_jdataview=require("jdataview"),_jdataview2=_interopRequireDefault(_jdataview),_underscore=require("underscore"),_underscore2=_interopRequireDefault(_underscore),_q=require("q"),_q2=_interopRequireDefault(_q),_formatsBamTypes=require("./formats/bamTypes"),_formatsBamTypes2=_interopRequireDefault(_formatsBamTypes),_VirtualOffset=require("./VirtualOffset"),_VirtualOffset2=_interopRequireDefault(_VirtualOffset),ImmediateBaiFile=function(){function e(n,t,r){if(_classCallCheck(this,e),this.buffer=n,this.remoteFile=t,n)this.indexChunks=computeIndexChunks(n);else{if(!r)throw"Without index chunks, the entire BAI buffer must be loaded";this.indexChunks=r}this.indexCache=new Array(this.indexChunks.chunks.length),this.intervalsCache=new Array(this.indexChunks.chunks.length)}return _createClass(e,[{key:"getChunksForInterval",value:function(e){var n=this;if(e.contig<0||e.contig>this.indexChunks.chunks.length)return _q2["default"].reject("Invalid contig "+e.contig);var t=reg2bins(e.start(),e.stop()+1);return this.indexForContig(e.contig).then(function(r){var i=_underscore2["default"].chain(r.bins).filter(function(e){return t.indexOf(e.bin)>=0}).map(function(e){return readChunks(e.chunks)}).flatten().value(),u=n.getIntervals(r.intervals,e.contig),a=Math.max(0,Math.floor(e.start()/16384)),s=u[a];return i=optimizeChunkList(i,s)})}},{key:"indexForContig",value:function(e){var n=this.indexCache[e];if(n)return n;var t=_slicedToArray(this.indexChunks.chunks[e],2),r=t[0],i=t[1];return this.indexCache[e]=this.getSlice(r,i).then(function(e){var n=new _jbinary2["default"](e,_formatsBamTypes2["default"].TYPE_SET);return n.read("BaiIndex")}),this.indexCache[e]}},{key:"getSlice",value:function(e,n){return this.buffer?_q2["default"].when(this.buffer.slice(e,n)):this.remoteFile.getBytes(e,n-e+1)}},{key:"getIntervals",value:function(e,n){var t=this.intervalsCache[n];return t?t:(t=readIntervals(e),this.intervalsCache[n]=t,t)}}]),e}(),BaiFile=function(){function e(n,t){_classCallCheck(this,e),this.remoteFile=n,t?this.immediate=_q2["default"].when(new ImmediateBaiFile(null,n,t)):this.immediate=n.getAll().then(function(e){return new ImmediateBaiFile(e,n,t)}),this.immediate.done()}return _createClass(e,[{key:"getChunksForInterval",value:function(e){return this.immediate.then(function(n){return n.getChunksForInterval(e)})}},{key:"getHeaderSize",value:function(){return this.immediate.then(function(e){return e.indexChunks.minBlockIndex})}}]),e}();module.exports=BaiFile;

},{"./VirtualOffset":191,"./formats/bamTypes":195,"jbinary":8,"jdataview":9,"q":22,"underscore":177}],193:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function isAlignmentInRange(e,t,n){var r=new _ContigInterval2["default"](e.refID,e.pos,e.pos+e.l_seq-1);return n?t.containsInterval(r):r.intersects(t)}function readAlignment(e,t,n,r){var a=e.getInt32(t);if(t+=4,t+a>e.byteLength)return null;var i=e.buffer.slice(t,t+a),u=new _SamRead2["default"](i,n.clone(),r);return{read:u,readLength:4+a}}function readAlignmentsToEnd(e,t,n,r,a,i,u){var f=new _jdataview2["default"](e,0,e.byteLength,!0),l=!1,s=0;a=a.clone();var o=0;try{for(;s<e.byteLength;){var d=readAlignment(f,s,a,t);if(!d)break;var c=d.read,h=d.readLength;s+=h,isAlignmentInRange(c,n,r)&&u.push(c),a.uoffset+=h;var _=i[o].buffer.byteLength;a.uoffset>=_&&(a.uoffset-=_,a.coffset+=i[o].compressedLength,o++);var g=new _ContigInterval2["default"](c.refID,c.pos,c.pos+1);if(g.contig>n.contig||g.contig==n.contig&&g.start()>n.stop()){l=!0;break}}}catch(m){if(!(m instanceof RangeError))throw m}return{shouldAbort:l,nextOffset:a}}function fetchAlignments(e,t,n,r,a){function i(a){if(0===a.length)return void l.resolve(f);var s=a[0],o=s.chunk_beg.coffset,d=s.chunk_end.coffset,c=Math.min(kMaxFetch,d+65536-o);e.getBytes(o,c).then(function(c){u++,l.notify({numRequests:u});var h={filename:e.url,initialOffset:o},_=_utils2["default"].inflateConcatenatedGzip(c,d-o,h),g=_[_.length-1],m=o+g.offset-1,v=null;_.length>1&&d>m&&(v={chunk_beg:new _VirtualOffset2["default"](m+1,0),chunk_end:s.chunk_end});var p=_.map(function(e){return e.buffer});p[0]=p[0].slice(s.chunk_beg.uoffset);var b=_utils2["default"].concatArrayBuffers(p);if(b.byteLength>0){var y=readAlignmentsToEnd(b,t,n,r,s.chunk_beg,_,f),q=y.shouldAbort,w=y.nextOffset;if(q)return void l.resolve(f);v&&(v.chunk_beg=w)}else v=null;i((v?[v]:[]).concat(_underscore2["default"].rest(a)))})}var u=0,f=[],l=_q2["default"].defer();return i(a),l.promise}var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),_jbinary=require("jbinary"),_jbinary2=_interopRequireDefault(_jbinary),_jdataview=require("jdataview"),_jdataview2=_interopRequireDefault(_jdataview),_underscore=require("underscore"),_underscore2=_interopRequireDefault(_underscore),_q=require("q"),_q2=_interopRequireDefault(_q),_formatsBamTypes=require("./formats/bamTypes"),_formatsBamTypes2=_interopRequireDefault(_formatsBamTypes),_utils=require("../utils"),_utils2=_interopRequireDefault(_utils),_bai=require("./bai"),_bai2=_interopRequireDefault(_bai),_ContigInterval=require("../ContigInterval"),_ContigInterval2=_interopRequireDefault(_ContigInterval),_VirtualOffset=require("./VirtualOffset"),_VirtualOffset2=_interopRequireDefault(_VirtualOffset),_SamRead=require("./SamRead"),_SamRead2=_interopRequireDefault(_SamRead),kMaxFetch=131072,Bam=function(){function e(t,n,r){var a=this;_classCallCheck(this,e),this.remoteFile=t,this.index=n?new _bai2["default"](n,r):null,this.hasIndexChunks=!!r;var i=this.index?this.index.getHeaderSize():_q2["default"].when(131070);this.header=i.then(function(e){var t=_q2["default"].defer();return _q2["default"].when().then(function(){t.notify({status:"Fetching BAM header"})}),_utils2["default"].pipePromise(t,a.remoteFile.getBytes(0,e).then(function(e){var t=_utils2["default"].inflateGzip(e),n=new _jbinary2["default"](t,_formatsBamTypes2["default"].TYPE_SET);return n.read("BamHeader")})),t.promise}),this.header.done()}return _createClass(e,[{key:"readAll",value:function(){return this.remoteFile.getAll().then(function(e){var t=_utils2["default"].inflateGzip(e),n=new _jbinary2["default"](t,_formatsBamTypes2["default"].TYPE_SET),r=n.read("BamFile"),a=new _VirtualOffset2["default"](0,0),i=function(e){return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength-1)};return r.alignments=r.alignments.map(function(e){var t=new _SamRead2["default"](i(e.contents),a,"");return-1!=t.refID&&(t.ref=r.header.references[t.refID].name),t}),r})}},{key:"readAtOffset",value:function(e){var t=this;return this.remoteFile.getBytes(e.coffset,kMaxFetch).then(function(n){var r=_utils2["default"].inflateGzip(n),a=new _jdataview2["default"](r,0,r.byteLength,!0),i=readAlignment(a,e.uoffset,e,"");if(i){var u=i.read;return t.header.then(function(e){return u.ref=e.references[u.refID].name,u})}throw"Unable to read alignment at "+e+" in "+t.remoteFile.url})}},{key:"getContigIndex",value:function(e){return this.header.then(function(t){for(var n=0;n<t.references.length;n++){var r=t.references[n].name;if(r==e||r=="chr"+e||"chr"+r==e)return{idx:n,name:r}}throw"Invalid contig name: "+e})}},{key:"getAlignmentsInRange",value:function(e,t){var n=this,r=t||!1;if(!this.index)throw"Range searches are only supported on BAMs with BAI indices.";var a=this.index;return this.getContigIndex(e.contig).then(function(t){var i=t.idx,u=t.name,f=_q2["default"].defer();_q2["default"].when().then(function(){f.notify({status:"Fetching BAM index"})});var l=new _ContigInterval2["default"](i,e.start(),e.stop());return _utils2["default"].pipePromise(f,a.getChunksForInterval(l).then(function(e){return fetchAlignments(n.remoteFile,u,l,r,e)})),f.promise})}}]),e}();module.exports=Bam;

},{"../ContigInterval":179,"../utils":209,"./SamRead":189,"./VirtualOffset":191,"./bai":192,"./formats/bamTypes":195,"jbinary":8,"jdataview":9,"q":22,"underscore":177}],194:[function(require,module,exports){
"use strict";function _interopRequireDefault(t){return t&&t.__esModule?t:{"default":t}}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function splitCodingExons(t,e){return _underscore2["default"].flatten(t.map(function(t){if(t.containsInterval(e))return[new CodingInterval(t.start,e.start-1,!1),new CodingInterval(e.start,e.stop,!0),new CodingInterval(e.stop+1,t.stop,!1)].filter(function(t){return t.start<=t.stop});var n=e.contains(t.start),r=e.contains(t.stop);return n==r?[new CodingInterval(t.start,t.stop,n)]:n?[new CodingInterval(t.start,e.stop,!0),new CodingInterval(e.stop+1,t.stop,!1)]:[new CodingInterval(t.start,e.start-1,!1),new CodingInterval(e.start,t.stop,!0)]}))}var _get=function(t,e,n){for(var r=!0;r;){var o=t,i=e,a=n;r=!1,null===o&&(o=Function.prototype);var s=Object.getOwnPropertyDescriptor(o,i);if(void 0!==s){if("value"in s)return s.value;var l=s.get;return void 0===l?void 0:l.call(a)}var u=Object.getPrototypeOf(o);if(null===u)return void 0;t=u,e=i,n=a,r=!0,s=u=void 0}},_underscore=require("underscore"),_underscore2=_interopRequireDefault(_underscore),_Interval2=require("../Interval"),_Interval3=_interopRequireDefault(_Interval2),CodingInterval=function(t){function e(t,n,r){_classCallCheck(this,e),_get(Object.getPrototypeOf(e.prototype),"constructor",this).call(this,t,n),this.isCoding=r}return _inherits(e,t),e}(_Interval3["default"]);module.exports={splitCodingExons:splitCodingExons,CodingInterval:CodingInterval};

},{"../Interval":182,"underscore":177}],195:[function(require,module,exports){
"use strict";function _interopRequireDefault(n){return n&&n.__esModule?n:{"default":n}}var _jbinary=require("jbinary"),_jbinary2=_interopRequireDefault(_jbinary),_underscore=require("underscore"),_underscore2=_interopRequireDefault(_underscore),_VirtualOffset=require("../VirtualOffset"),_VirtualOffset2=_interopRequireDefault(_VirtualOffset),_helpers=require("./helpers"),SEQUENCE_VALUES=["=","A","C","M","G","R","S","V","T","W","Y","H","K","D","B","N"],CIGAR_OPS=["M","I","D","N","S","H","P","=","X"],ThinAlignment={refID:"int32",pos:"int32",l_read_name:"uint8",MAPQ:"uint8",bin:"uint16",n_cigar_op:"uint16",FLAG:"uint16",l_seq:"int32",next_refID:"int32",next_pos:"int32",tlen:"int32"},Flags={READ_PAIRED:1,PROPER_PAIR:2,READ_UNMAPPED:4,MATE_UNMAPPED:8,READ_STRAND:16,MATE_STRAND:32,FIRST_OF_PAIR:64,SECOND_OF_PAIR:128,NOT_PRIMARY_ALIGNMENT:256,READ_FAILS_VENDOR_QUALITY_CHECK:512,DUPLICATE_READ:1024,SUPPLEMENTARY_ALIGNMENT:2048},ThickAlignment=_underscore2["default"].extend({},ThinAlignment,{read_name:[_helpers.nullString,"l_read_name"],cigar:["array","CigarOp","n_cigar_op"],seq:["FourBitSequence","l_seq"],qual:["array","uint8","l_seq"],auxiliary:["array",{tag:["string",2],val_type:"char",value:["if",function(n){return"B"==n.val_type},{val_type:"char",num_values:"int32",values:["array","AuxiliaryValue","num_values"]},"AuxiliaryValue"]}]}),TYPE_SET={"jBinary.littleEndian":!0,BamHeader:{_magic:["const",["string",4],"BAM",!0],l_text:"int32",text:["string","l_text"],n_ref:"int32",references:["array",{l_name:"int32",name:[_helpers.nullString,"l_name"],l_ref:"int32"},"n_ref"]},BamAlignment:{block_size:"int32",contents:["blob","block_size"]},AuxiliaryValue:["if",function(n){return"A"==n.val_type},"char",["if",function(n){return"c"==n.val_type},"int8",["if",function(n){return"C"==n.val_type},"uint8",["if",function(n){return"s"==n.val_type},"int16",["if",function(n){return"S"==n.val_type},"uint16",["if",function(n){return"i"==n.val_type},"int32",["if",function(n){return"I"==n.val_type},"uint32",["if",function(n){return"f"==n.val_type},"float32",["if",function(n){return"Z"==n.val_type},"string0",["skip",0]]]]]]]]]],CigarOp:_jbinary2["default"].Template({baseType:"uint32",read:function(n){var e=this.baseRead();return{length:e>>4,op:CIGAR_OPS[15&e]}}}),FourBitSequence:_jbinary2["default"].Template({setParams:function(n){this.lengthField=n;var e=function(e){return Math.floor((+e[n]+1)/2)};this.baseType=["array","uint8",e]},read:function(n){var e=+n[this.lengthField],t=this.baseRead();return t.map(function(n,t){return SEQUENCE_VALUES[n>>4]+(e>2*t+1?SEQUENCE_VALUES[15&n]:"")}).join("")}}),BamFile:{header:"BamHeader",alignments:["array","BamAlignment"]},VirtualOffset:_jbinary2["default"].Template({baseType:"uint64",read:function(){var n=this.baseRead();return new _VirtualOffset2["default"](65536*n.hi+(n.lo>>>16),65535&n.lo)}}),ChunksArray:["array",{chunk_beg:"VirtualOffset",chunk_end:"VirtualOffset"}],IntervalsArray:["array","VirtualOffset"],BaiIndex:{n_bin:"int32",bins:["array",{bin:"uint32",n_chunk:"int32",chunks:["blob",function(n){return 16*n.n_chunk}]},"n_bin"],n_intv:"int32",intervals:["blob",function(n){return 8*n.n_intv}]},BaiFile:{magic:["const",["string",4],"BAI"],n_ref:"int32",indices:["array","BaiIndex","n_ref"],n_no_coor:_helpers.uint64native}};module.exports={TYPE_SET:TYPE_SET,ThinAlignment:ThinAlignment,ThickAlignment:ThickAlignment,Flags:Flags};

},{"../VirtualOffset":191,"./helpers":197,"jbinary":8,"underscore":177}],196:[function(require,module,exports){
"use strict";var _helpers=require("./helpers"),TYPE_SET={"jBinary.littleEndian":!0,Header:{_magic:["const","uint32",2273964779,!0],version:["const","uint16",4,!0],zoomLevels:"uint16",chromosomeTreeOffset:"uint64",unzoomedDataOffset:"uint64",unzoomedIndexOffset:"uint64",fieldCount:"uint16",definedFieldCount:"uint16",autoSqlOffset:"uint64",totalSummaryOffset:"uint64",uncompressBufSize:"uint32",extensionOffset:"uint64",zoomHeaders:["array","ZoomHeader","zoomLevels"],totalSummary:(0,_helpers.typeAtOffset)("TotalSummary","totalSummaryOffset"),chromosomeTree:(0,_helpers.typeAtOffset)("BPlusTree","chromosomeTreeOffset")},TotalSummary:{basesCovered:"uint64",minVal:"float64",maxVal:"float64",sumData:"float64",sumSquared:"float64"},ZoomHeader:{reductionLevel:"uint32",_reserved:"uint32",dataOffset:"uint64",indexOffset:"uint64"},BPlusTree:{magic:["const","uint32",2026540177,!0],blockSize:"uint32",keySize:"uint32",valSize:"uint32",itemCount:"uint64",_reserved2:["skip",4],_reserved3:["skip",4],nodes:"BPlusTreeNode"},BPlusTreeNode:{isLeaf:"uint8",_reserved:"uint8",count:"uint16",contents:["array",["if","isLeaf",{key:["string","keySize"],id:"uint32",size:"uint32"},{key:["string","keySize"],offset:"uint64"}],"count"]},CirTree:{_magic:["const","uint32",610839776,!0],blockSize:"uint32",itemCount:"uint64",startChromIx:"uint32",startBase:"uint32",endChromIx:"uint32",endBase:"uint32",fileSize:"uint64",itemsPerSlot:"uint32",_reserved:["skip",4],blocks:"CirNode"},CirNode:{isLeaf:"uint8",_reserved:"uint8",count:"uint16",contents:["array",["if","isLeaf",{startChromIx:"uint32",startBase:"uint32",endChromIx:"uint32",endBase:"uint32",offset:"uint64",size:"uint64"},{startChromIx:"uint32",startBase:"uint32",endChromIx:"uint32",endBase:"uint32",offset:"uint64"}],"count"]},BedEntry:{chrId:"uint32",start:"uint32",stop:"uint32",rest:"string0"},BedBlock:["array","BedEntry"]};module.exports={TYPE_SET:TYPE_SET};

},{"./helpers":197}],197:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function typeAtOffset(e,t){return _jbinary2["default"].Template({baseType:e,read:function(e){return 0===+e[t]?null:this.binary.read(this.baseType,+e[t])}})}var _createClass=function(){function e(e,t){for(var i=0;i<t.length;i++){var r=t[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,i,r){return i&&e(t.prototype,i),r&&e(t,r),t}}(),_jbinary=require("jbinary"),_jbinary2=_interopRequireDefault(_jbinary),sizedBlock=_jbinary2["default"].Type({params:["itemType","lengthField"],resolve:function(e){this.itemType=e(this.itemType)},read:function(e){var t=this.binary.tell(),i=+e[this.lengthField];return this.binary.skip(i),this.binary.slice(t,t+i).read(this.itemType)}}),nullString=_jbinary2["default"].Template({setParams:function(e){this.baseType=["binary",e]},read:function(){return this.baseRead().read("string0")}}),uint64native=_jbinary2["default"].Template({baseType:"uint64",read:function(){var e=this.baseRead(),t=+e;if(0>t||1+t==t)throw new RangeError("Number out of precise floating point range: "+e);return+e}}),LazyArray=function(){function e(t,i,r){_classCallCheck(this,e),this.bytesPerItem=i,this.jb=t,this.itemType=r,this.length=this.jb.view.byteLength/this.bytesPerItem}return _createClass(e,[{key:"get",value:function(e){return this.jb.seek(e*this.bytesPerItem),this.jb.read(this.itemType)}},{key:"getAll",value:function(){return this.jb.seek(0),this.jb.read(["array",this.itemType,this.length])}}]),e}(),lazyArray=_jbinary2["default"].Type({params:["itemType","bytesPerItem","numItems"],read:function(){var e=this.toValue(this.numItems),t=this.toValue(this.bytesPerItem);if(void 0===e||void 0===t)throw"bytesPerItem and numItems must be set for lazyArray";var i=this.binary.tell(),r=e*t,n=this.binary.slice(i,i+r);return this.binary.skip(r),new LazyArray(n,t,this.itemType)}});module.exports={typeAtOffset:typeAtOffset,sizedBlock:sizedBlock,nullString:nullString,uint64native:uint64native,lazyArray:lazyArray};

},{"jbinary":8}],198:[function(require,module,exports){
"use strict";var TYPE_SET={"jBinary.littleEndian":!0,Header:{magic:["const","uint32",440477507,!0],version:["const","uint32",0,!0],sequenceCount:"uint32",reserved:"uint32",sequences:["array","SequenceHeader","sequenceCount"]},SequenceHeader:{nameSize:"uint8",name:["string","nameSize"],offset:"uint32"},SequenceRecord:{dnaSize:"uint32",nBlockCount:"uint32",nBlockStarts:["array","uint32","nBlockCount"],nBlockSizes:["array","uint32","nBlockCount"],maskBlockCount:"uint32"}};module.exports={TYPE_SET:TYPE_SET};

},{}],199:[function(require,module,exports){
"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function extractLocusLine(e){var t=e.indexOf("	"),n=e.indexOf("	",t+1);return{contig:e.slice(0,t),position:Number(e.slice(t+1,n)),line:e}}function extractVariant(e){var t=e.split("	");return{contig:t[0],position:Number(t[1]),ref:t[3],alt:t[4],vcfLine:e}}function compareLocusLine(e,t){return e.contig<t.contig?-1:e.contig>t.contig?1:e.position-t.position}function lowestIndex(e,t,n){for(var i=0,r=e.length;r>i;){var o=Math.floor((i+r)/2),c=n(e[o],t);0>c?i=o+1:r=o}return i}Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),ImmediateVcfFile=function(){function e(t){_classCallCheck(this,e),this.lines=t,this.contigMap=this.extractContigs()}return _createClass(e,[{key:"extractContigs",value:function(){for(var e=[],t="",n=0;n<this.lines.length;n++){var i=this.lines[n];i.contig!=t&&e.push(i.contig)}var r={};return e.forEach(function(e){"chr"==e.slice(0,3)?r[e.slice(4)]=e:r["chr"+e]=e,r[e]=e}),r}},{key:"getFeaturesInRange",value:function(e){var t=this.lines,n=this.contigMap[e.contig];if(!n)return[];for(var i={contig:n,position:e.start(),line:""},r={contig:n,position:e.stop(),line:""},o=lowestIndex(t,i,compareLocusLine),c=[],a=o;a<t.length&&!(compareLocusLine(t[a],r)>0);a++)c.push(t[a]);return c.map(function(e){return extractVariant(e.line)})}}]),e}(),VcfFile=function(){function e(t){_classCallCheck(this,e),this.remoteFile=t,this.immediate=this.remoteFile.getAllString().then(function(e){var t=e.split("\n").filter(function(e){return e.length&&"#"!=e[0]}).map(extractLocusLine);return t}).then(function(e){return e.sort(compareLocusLine),new ImmediateVcfFile(e)}),this.immediate.done()}return _createClass(e,[{key:"getFeaturesInRange",value:function(e){return this.immediate.then(function(t){return t.getFeaturesInRange(e)})}}]),e}();module.exports=VcfFile;

},{}],200:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}function findReference(e){return _underscore2["default"].find(e,function(e){return!!e.track.isReference})}function create(e,r){var a="string"==typeof e?document.getElementById(e):e;if(!a)throw new Error("Attempted to create pileup with non-existent element "+e);var t=r.tracks.map(function(e){var r=e.data?e.data:e.viz.component.defaultSource;if(!r)throw new Error("Track '"+e.viz.component.displayName+"' doesn't have a default data source; you must specify one when initializing it.");return{visualization:e.viz,source:r,track:e}}),o=findReference(t);if(!o)throw new Error("You must include at least one track with type=reference");var u=_reactDom2["default"].render(_react2["default"].createElement(_Root2["default"],{referenceSource:o.source,tracks:t,initialRange:r.range}),a);return{setRange:function(e){if(null===u)throw"Cannot call setRange on a destroyed pileup";u.handleRangeChange(e)},getRange:function(){if(null===u)throw"Cannot call setRange on a destroyed pileup";return _underscore2["default"].clone(u.state.range)},destroy:function(){if(!t)throw"Cannot call destroy() twice on the same pileup";t.forEach(function(e){var r=e.source;r.off()}),_reactDom2["default"].unmountComponentAtNode(a),u=null,o=null,t=null}}}function makeVizObject(e){return function(r){return r=_underscore2["default"].extend({},e.defaultOptions,r),{component:e,options:r}}}var _underscore=require("underscore"),_underscore2=_interopRequireDefault(_underscore),_react=require("react"),_react2=_interopRequireDefault(_react),_reactDom=require("react-dom"),_reactDom2=_interopRequireDefault(_reactDom),_sourcesTwoBitDataSource=require("./sources/TwoBitDataSource"),_sourcesTwoBitDataSource2=_interopRequireDefault(_sourcesTwoBitDataSource),_sourcesBigBedDataSource=require("./sources/BigBedDataSource"),_sourcesBigBedDataSource2=_interopRequireDefault(_sourcesBigBedDataSource),_sourcesVcfDataSource=require("./sources/VcfDataSource"),_sourcesVcfDataSource2=_interopRequireDefault(_sourcesVcfDataSource),_sourcesBamDataSource=require("./sources/BamDataSource"),_sourcesBamDataSource2=_interopRequireDefault(_sourcesBamDataSource),_sourcesGA4GHDataSource=require("./sources/GA4GHDataSource"),_sourcesGA4GHDataSource2=_interopRequireDefault(_sourcesGA4GHDataSource),_sourcesEmptySource=require("./sources/EmptySource"),_sourcesEmptySource2=_interopRequireDefault(_sourcesEmptySource),_vizCoverageTrack=require("./viz/CoverageTrack"),_vizCoverageTrack2=_interopRequireDefault(_vizCoverageTrack),_vizGenomeTrack=require("./viz/GenomeTrack"),_vizGenomeTrack2=_interopRequireDefault(_vizGenomeTrack),_vizGeneTrack=require("./viz/GeneTrack"),_vizGeneTrack2=_interopRequireDefault(_vizGeneTrack),_vizLocationTrack=require("./viz/LocationTrack"),_vizLocationTrack2=_interopRequireDefault(_vizLocationTrack),_vizPileupTrack=require("./viz/PileupTrack"),_vizPileupTrack2=_interopRequireDefault(_vizPileupTrack),_vizScaleTrack=require("./viz/ScaleTrack"),_vizScaleTrack2=_interopRequireDefault(_vizScaleTrack),_vizVariantTrack=require("./viz/VariantTrack"),_vizVariantTrack2=_interopRequireDefault(_vizVariantTrack),_Root=require("./Root"),_Root2=_interopRequireDefault(_Root),pileup={create:create,formats:{bam:_sourcesBamDataSource2["default"].create,ga4gh:_sourcesGA4GHDataSource2["default"].create,vcf:_sourcesVcfDataSource2["default"].create,twoBit:_sourcesTwoBitDataSource2["default"].create,bigBed:_sourcesBigBedDataSource2["default"].create,empty:_sourcesEmptySource2["default"].create},viz:{coverage:makeVizObject(_vizCoverageTrack2["default"]),genome:makeVizObject(_vizGenomeTrack2["default"]),genes:makeVizObject(_vizGeneTrack2["default"]),location:makeVizObject(_vizLocationTrack2["default"]),scale:makeVizObject(_vizScaleTrack2["default"]),variants:makeVizObject(_vizVariantTrack2["default"]),pileup:makeVizObject(_vizPileupTrack2["default"])},version:"0.6.2"};module.exports=pileup,"undefined"!=typeof window&&(window.pileup=pileup);

},{"./Root":185,"./sources/BamDataSource":202,"./sources/BigBedDataSource":203,"./sources/EmptySource":204,"./sources/GA4GHDataSource":205,"./sources/TwoBitDataSource":206,"./sources/VcfDataSource":207,"./viz/CoverageTrack":211,"./viz/GeneTrack":213,"./viz/GenomeTrack":214,"./viz/LocationTrack":215,"./viz/PileupTrack":217,"./viz/ScaleTrack":218,"./viz/VariantTrack":220,"react":175,"react-dom":23,"underscore":177}],201:[function(require,module,exports){
"use strict";function linear(){var n=!1,t=[0,1],r=[0,1],i=function(i){return n&&(i=Math.max(Math.min(i,t[1]),t[0])),(i-t[0])/(t[1]-t[0])*(r[1]-r[0])+r[0]};return i.clamp=function(t){return void 0===t?n:(n=t,this)},i.domain=function(n){return void 0===n?t:(t=n,this)},i.range=function(n){return void 0===n?r:(r=n,this)},i.invert=function(i){if(n)throw"Can't invert a clamped linear scale.";return(i-r[0])/(r[1]-r[0])*(t[1]-t[0])+t[0]},i.nice=function(){var n=10,r=t,i=Math.abs(r[1]-r[0]),o=Math.pow(10,Math.floor(Math.log(i/n)/Math.LN10)),a=n/i*o;.15>=a?o*=10:.35>=a?o*=5:.75>=a&&(o*=2);var e,u={floor:function(n){return Math.floor(n/o)*o},ceil:function(n){return Math.ceil(n/o)*o}},c=0,l=1,f=t[c],h=t[l];return f>h&&(e=c,c=l,l=e,e=f,f=h,h=e),t[c]=u.floor(f),t[l]=u.ceil(h),this},i}module.exports={linear:linear};

},{}],202:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}function expandRange(e){var n=function(e){return e-e%BASE_PAIRS_PER_FETCH},t=Math.max(1,n(e.start())),r=n(e.stop()+BASE_PAIRS_PER_FETCH-1);return new _ContigInterval2["default"](e.contig,t,r)}function createFromBamFile(e){function n(e){var n=e.getKey();i[n]||(i[n]=e)}function t(e){e.references.forEach(function(e){var n=e.name;u[n]=n,u["chr"+n]=n,"chr"==n.slice(0,3)&&(u[n.slice(3)]=n)})}function r(r){var a=_underscore2["default"].isEmpty(u)?e.header.then(t):_q2["default"].when();return _q2["default"].when().then(function(){a.isPending()&&!e.hasIndexChunks&&f.trigger("networkprogress",{status:"Fetching BAM index -- use index chunks to speed this up"})}).done(),a.then(function(){var t=u[r.contig],a=new _ContigInterval2["default"](t,r.start,r.stop);if(a.isCoveredBy(o))return _q2["default"].when();a=expandRange(a);var i=a.complementIntervals(o);return o.push(a),o=_ContigInterval2["default"].coalesce(o),_q2["default"].all(i.map(function(t){return e.getAlignmentsInRange(t).progress(function(e){f.trigger("networkprogress",e)}).then(function(e){e.forEach(function(e){return n(e)}),f.trigger("networkdone"),f.trigger("newdata",t)})}))})}function a(e){if(!e)return[];if(_underscore2["default"].isEmpty(u))return[];var n=new _ContigInterval2["default"](u[e.contig],e.start(),e.stop());return _underscore2["default"].filter(i,function(e){return e.intersects(n)})}var i={},u={},o=[],f={rangeChanged:function(e){r(e).done()},getAlignmentsInRange:a,on:function(){},once:function(){},off:function(){},trigger:function(){}};return _underscore2["default"].extend(f,_backbone.Events),f}function create(e){var n=e.url;if(!n)throw new Error("Missing URL from track data: "+JSON.stringify(e));var t=e.indexUrl;if(!t)throw new Error("Missing indexURL from track data: "+JSON.stringify(e));var r=e.indexChunks?new _dataBam2["default"](new _RemoteFile2["default"](n),new _RemoteFile2["default"](t),e.indexChunks):new _dataBam2["default"](new _RemoteFile2["default"](n),new _RemoteFile2["default"](t));return createFromBamFile(r)}var _underscore=require("underscore"),_underscore2=_interopRequireDefault(_underscore),_q=require("q"),_q2=_interopRequireDefault(_q),_backbone=require("backbone"),_ContigInterval=require("../ContigInterval"),_ContigInterval2=_interopRequireDefault(_ContigInterval),_dataBam=require("../data/bam"),_dataBam2=_interopRequireDefault(_dataBam),_RemoteFile=require("../RemoteFile"),_RemoteFile2=_interopRequireDefault(_RemoteFile),BASE_PAIRS_PER_FETCH=100;module.exports={create:create,createFromBamFile:createFromBamFile};

},{"../ContigInterval":179,"../RemoteFile":184,"../data/bam":193,"backbone":1,"q":22,"underscore":177}],203:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}function parseBedFeature(e){var r=new _ContigInterval2["default"](e.contig,e.start,e.stop),t=e.rest.split("	"),n=t[7].replace(/,*$/,"").split(",").map(Number),a=t[8].replace(/,*$/,"").split(",").map(Number),i=_underscore2["default"].zip(a,n).map(function(r){var t=_slicedToArray(r,2),n=t[0],a=t[1];return new _Interval2["default"](e.start+n,e.start+n+a)});return{position:r,id:t[0],strand:t[2],codingRegion:new _Interval2["default"](Number(t[3]),Number(t[4])),geneId:t[9],name:t[10],exons:i}}function createFromBigBedFile(e){function r(e){a[e.id]||(a[e.id]=e)}function t(e){if(!e)return[];var r=[];return _underscore2["default"].each(a,function(t){e.intersects(t.position)&&r.push(t)}),r}function n(t){var n=new _ContigInterval2["default"](t.contig,t.start,t.stop);return n.isCoveredBy(i)?_q2["default"].when():(i.push(n),i=_ContigInterval2["default"].coalesce(i),e.getFeatureBlocksOverlapping(n).then(function(e){e.forEach(function(e){i.push(e.range),i=_ContigInterval2["default"].coalesce(i);var t=e.rows.map(parseBedFeature);t.forEach(function(e){return r(e)}),o.trigger("newdata",n)})}))}var a={},i=[],o={rangeChanged:function(e){n(e).done()},getGenesInRange:t,on:function(){},off:function(){},trigger:function(){}};return _underscore2["default"].extend(o,_backbone.Events),o}function create(e){var r=e.url;if(!r)throw new Error("Missing URL from track: "+JSON.stringify(e));return createFromBigBedFile(new _dataBigBed2["default"](r))}Object.defineProperty(exports,"__esModule",{value:!0});var _slicedToArray=function(){function e(e,r){var t=[],n=!0,a=!1,i=void 0;try{for(var o,u=e[Symbol.iterator]();!(n=(o=u.next()).done)&&(t.push(o.value),!r||t.length!==r);n=!0);}catch(l){a=!0,i=l}finally{try{!n&&u["return"]&&u["return"]()}finally{if(a)throw i}}return t}return function(r,t){if(Array.isArray(r))return r;if(Symbol.iterator in Object(r))return e(r,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),_underscore=require("underscore"),_underscore2=_interopRequireDefault(_underscore),_q=require("q"),_q2=_interopRequireDefault(_q),_backbone=require("backbone"),_ContigInterval=require("../ContigInterval"),_ContigInterval2=_interopRequireDefault(_ContigInterval),_Interval=require("../Interval"),_Interval2=_interopRequireDefault(_Interval),_dataBigBed=require("../data/BigBed"),_dataBigBed2=_interopRequireDefault(_dataBigBed);module.exports={create:create,createFromBigBedFile:createFromBigBedFile};

},{"../ContigInterval":179,"../Interval":182,"../data/BigBed":188,"backbone":1,"q":22,"underscore":177}],204:[function(require,module,exports){
"use strict";var create=function(){return{rangeChanged:function(){},on:function(){},off:function(){},trigger:function(){}}};module.exports={create:create};

},{}],205:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}function expandRange(e){var n=function(e){return e-e%BASE_PAIRS_PER_FETCH},t=Math.max(1,n(e.start())),r=n(e.stop()+BASE_PAIRS_PER_FETCH-1);return new _ContigInterval2["default"](e.contig,t,r)}function create(e){function n(e){e.alignments.forEach(function(e){var n=_GA4GHAlignment2["default"].keyFromGA4GHResponse(e);if(!(n in s)){var t=new _GA4GHAlignment2["default"](e);s[n]=t}})}function t(n){var t=e.killChr?n.contig.replace(/^chr/,""):n.contig,r=new _ContigInterval2["default"](t,n.start,n.stop);r.isCoveredBy(u)||(r=expandRange(r),u.push(r),u=_ContigInterval2["default"].coalesce(u),o(r,null,1))}function r(e){c.trigger("networkfailure",e),c.trigger("networkdone"),console.warn(e)}function o(t,i,s){var u=new XMLHttpRequest;u.open("POST",a),u.responseType="json",u.setRequestHeader("Content-Type","application/json"),u.addEventListener("load",function(e){var i=this.response;this.status>=400?r(this.status+" "+this.statusText+" "+JSON.stringify(i)):i.errorCode?r("Error from GA4GH endpoint: "+JSON.stringify(i)):(n(i),c.trigger("newdata",t),i.nextPageToken?o(t,i.nextPageToken,s+1):c.trigger("networkdone"))}),u.addEventListener("error",function(e){r("Request failed with status: "+this.status)}),c.trigger("networkprogress",{numRequests:s}),u.send(JSON.stringify({pageToken:i,pageSize:ALIGNMENTS_PER_REQUEST,readGroupIds:[e.readGroupId],referenceName:t.contig,start:t.start(),end:t.stop()}))}function i(n){return n?(e.killChr&&(n=new _ContigInterval2["default"](n.contig.replace(/^chr/,""),n.start(),n.stop())),_underscore2["default"].filter(s,function(e){return e.intersects(n)})):[]}if("v0.5.1"!=e.endpoint.slice(-6))throw new Error("Only v0.5.1 of the GA4GH API is supported by pileup.js");var a=e.endpoint+"/reads/search",s={},u=[],c={rangeChanged:t,getAlignmentsInRange:i,on:function(){},once:function(){},off:function(){},trigger:function(){}};return _underscore2["default"].extend(c,_backbone.Events),c}var _underscore=require("underscore"),_underscore2=_interopRequireDefault(_underscore),_backbone=require("backbone"),_ContigInterval=require("../ContigInterval"),_ContigInterval2=_interopRequireDefault(_ContigInterval),_GA4GHAlignment=require("../GA4GHAlignment"),_GA4GHAlignment2=_interopRequireDefault(_GA4GHAlignment),ALIGNMENTS_PER_REQUEST=200,BASE_PAIRS_PER_FETCH=100;module.exports={create:create};

},{"../ContigInterval":179,"../GA4GHAlignment":181,"backbone":1,"underscore":177}],206:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}function expandRange(e){var t=function(e){return e-e%BASE_PAIRS_PER_FETCH},n=Math.max(0,t(e.start())),r=t(e.stop()+BASE_PAIRS_PER_FETCH-1);return new _ContigInterval2["default"](e.contig,n,r)}function create(e){var t=e.url;if(!t)throw new Error("Missing URL from track: "+JSON.stringify(e));return createFromTwoBitFile(new _dataTwoBit2["default"](new _RemoteFile2["default"](t)))}function testBasePairsToFetch(e){return e?void(BASE_PAIRS_PER_FETCH=e):BASE_PAIRS_PER_FETCH}Object.defineProperty(exports,"__esModule",{value:!0});var _q=require("q"),_q2=_interopRequireDefault(_q),_underscore=require("underscore"),_underscore2=_interopRequireDefault(_underscore),_backbone=require("backbone"),_ContigInterval=require("../ContigInterval"),_ContigInterval2=_interopRequireDefault(_ContigInterval),_dataTwoBit=require("../data/TwoBit"),_dataTwoBit2=_interopRequireDefault(_dataTwoBit),_RemoteFile=require("../RemoteFile"),_RemoteFile2=_interopRequireDefault(_RemoteFile),_SequenceStore=require("../SequenceStore"),_SequenceStore2=_interopRequireDefault(_SequenceStore),_utils=require("../utils"),_utils2=_interopRequireDefault(_utils),BASE_PAIRS_PER_FETCH=1e4,MAX_BASE_PAIRS_TO_FETCH=1e5,createFromTwoBitFile=function(e){function t(t){var n=t.length();return n>MAX_BASE_PAIRS_TO_FETCH?_q2["default"].when():(console.log("Fetching "+n+" base pairs"),void e.getFeaturesInRange(t.contig,t.start(),t.stop()).then(function(e){e&&(e.length<t.length()&&(t=new _ContigInterval2["default"](t.contig,t.start(),t.start()+e.length-1)),u.setRange(t,e))}).then(function(){l.trigger("newdata",t)}).done())}function n(e){if(a.indexOf(e.contig)>=0)return e;var t=_utils2["default"].altContigName(e.contig);return a.indexOf(t)>=0?{contig:t,start:e.start,stop:e.stop}:e}function r(e){return c.then(function(){return n(e)})}function o(e){return u.getAsObjects(_ContigInterval2["default"].fromGenomeRange(e))}function i(e){return e?u.getAsString(_ContigInterval2["default"].fromGenomeRange(e)):""}var a=[],u=new _SequenceStore2["default"],_=[],c=e.getContigList().then(function(e){return a=e,l.trigger("contigs",a),e});c.done();var l={rangeChanged:function(e){r(e).then(function(e){var n=new _ContigInterval2["default"](e.contig,e.start,e.stop);if(!n.isCoveredBy(_)){n=expandRange(n);var r=n.complementIntervals(_);_.push(n),_=_ContigInterval2["default"].coalesce(_);var o=!0,i=!1,a=void 0;try{for(var u,c=r[Symbol.iterator]();!(o=(u=c.next()).done);o=!0){var l=u.value;t(l)}}catch(f){i=!0,a=f}finally{try{!o&&c["return"]&&c["return"]()}finally{if(i)throw a}}}}).done()},getRange:o,getRangeAsString:i,contigList:function(e){function t(){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}(function(){return a}),normalizeRange:r,on:function(){},once:function(){},off:function(){},trigger:function(){}};return _underscore2["default"].extend(l,_backbone.Events),l};module.exports={create:create,createFromTwoBitFile:createFromTwoBitFile,testBasePairsToFetch:testBasePairsToFetch};

},{"../ContigInterval":179,"../RemoteFile":184,"../SequenceStore":186,"../data/TwoBit":190,"../utils":209,"backbone":1,"q":22,"underscore":177}],207:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}function expandRange(e){var t=function(e){return e-e%BASE_PAIRS_PER_FETCH},r=Math.max(1,t(e.start())),n=t(e.stop()+BASE_PAIRS_PER_FETCH-1);return new _ContigInterval2["default"](e.contig,r,n)}function variantKey(e){return e.contig+":"+e.position}function createFromVcfFile(e){function t(e){var t=variantKey(e);a[t]||(a[t]=e)}function r(r){var n=new _ContigInterval2["default"](r.contig,r.start,r.stop);return n.isCoveredBy(o)?_q2["default"].when():(n=expandRange(n),o.push(n),o=_ContigInterval2["default"].coalesce(o),e.getFeaturesInRange(n).then(function(e){e.forEach(function(e){return t(e)}),i.trigger("newdata",n)}))}function n(e){return e?_underscore2["default"].filter(a,function(t){return e.chrContainsLocus(t.contig,t.position)}):[]}var a={},o=[],i={rangeChanged:function(e){r(e).done()},getFeaturesInRange:n,on:function(){},off:function(){},trigger:function(){}};return _underscore2["default"].extend(i,_backbone2["default"]),i}function create(e){var t=e.url;if(!t)throw new Error("Missing URL from track: "+JSON.stringify(e));return createFromVcfFile(new _dataVcf2["default"](new _RemoteFile2["default"](t)))}Object.defineProperty(exports,"__esModule",{value:!0});var _backbone=require("backbone"),_backbone2=_interopRequireDefault(_backbone),_underscore=require("underscore"),_underscore2=_interopRequireDefault(_underscore),_q=require("q"),_q2=_interopRequireDefault(_q),_ContigInterval=require("../ContigInterval"),_ContigInterval2=_interopRequireDefault(_ContigInterval),_RemoteFile=require("../RemoteFile"),_RemoteFile2=_interopRequireDefault(_RemoteFile),_dataVcf=require("../data/vcf"),_dataVcf2=_interopRequireDefault(_dataVcf),BASE_PAIRS_PER_FETCH=100;module.exports={create:create,createFromVcfFile:createFromVcfFile};

},{"../ContigInterval":179,"../RemoteFile":184,"../data/vcf":199,"backbone":1,"q":22,"underscore":177}],208:[function(require,module,exports){
"use strict";module.exports={BASE_COLORS:{A:"#188712",G:"#C45C16",C:"#0600F9",T:"#F70016",U:"#F70016",N:"black"},LOOSE_TEXT_STYLE:"24px 'Helvetica Neue', Helvetica, Arial, sans-serif",TIGHT_TEXT_STYLE:"bold 12px 'Helvetica Neue', Helvetica, Arial, sans-serif",GENE_ARROW_SIZE:4,GENE_COLOR:"blue",GENE_COMPLEMENT_COLOR:"white",GENE_FONT:"'Helvetica Neue', Helvetica, Arial, sans-serif",GENE_FONT_SIZE:16,GENE_TEXT_PADDING:5,ALIGNMENT_COLOR:"#c8c8c8",ALIGNMENT_MINUS_STRAND_COLOR:"rgb(176, 176, 236)",ALIGNMENT_PLUS_STRAND_COLOR:"rgb(236, 176, 176)",DELETE_COLOR:"black",INSERT_COLOR:"rgb(97, 0, 216)",COVERAGE_FONT_STYLE:"bold 9px 'Helvetica Neue', Helvetica, Arial, sans-serif",COVERAGE_FONT_COLOR:"black",COVERAGE_TICK_LENGTH:5,COVERAGE_TEXT_PADDING:3,COVERAGE_TEXT_Y_OFFSET:3,COVERAGE_BIN_COLOR:"#a0a0a0",COVERAGE_MIN_BAR_WIDTH_FOR_GAP:8,SCALE_LINE_PADDING:40,SCALE_FONT_STYLE:"bold 12px 'Helvetica Neue', Helvetica, Arial, sans-serif",SCALE_TEXT_Y_OFFSET:5,SCALE_FONT_COLOR:"black",SCALE_ARROW_SIZE:4,LOC_TEXT_PADDING:5,LOC_TICK_LENGTH:10,LOC_TEXT_Y_OFFSET:5,LOC_FONT_STYLE:"13px 'Helvetica Neue', Helvetica, Arial, sans-serif",LOC_FONT_COLOR:"black",VARIANT_STROKE:"blue",VARIANT_FILL:"#ddd",VARIANT_HEIGHT:14};

},{}],209:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}function tupleLessOrEqual(e,t){if(e.length!=t.length)throw new Error("Comparing non-equal length tuples");for(var r=0;r<e.length;r++){if(e[r]>t[r])return!1;if(e[r]<t[r])return!0}return!0}function tupleRangeOverlaps(e,t){return tupleLessOrEqual(e[0],t[1])&&tupleLessOrEqual(t[0],e[1])&&tupleLessOrEqual(e[0],e[1])&&tupleLessOrEqual(t[0],t[1])}function concatArrayBuffers(e){var t=e.map(function(e){return e.byteLength}).reduce(function(e,t){return e+t},0),r=new Uint8Array(t),n=0;return e.forEach(function(e){r.set(new Uint8Array(e),n),n+=e.byteLength}),r.buffer}function _inflateOne(e,t){var r=new _pakoLibInflate2["default"].Inflate;return r.push(e.slice(t)),{err:r.err,msg:r.msg,buffer:r.result?r.result.buffer:null,total_in:r.strm.total_in}}function cachedInflateOne(e,t,r){if(!r)return _inflateOne(e,t);var n=r.filename+":"+(r.initialOffset+t),a=inflationCache[n];return a&&t+a.total_in>e.byteLength?_inflateOne(e,t):(a||(a=_inflateOne(e,t)),!a.err&&a.buffer&&(inflationCache[n]=a),a)}function inflateConcatenatedGzip(e,t,r){var n=0,a=[];void 0===t&&(t=e.byteLength);do{var u=cachedInflateOne(e,n,r);if(u.err)throw"Gzip error: "+u.msg;u.buffer&&a.push({offset:n,compressedLength:u.total_in,buffer:u.buffer}),n+=u.total_in}while(t>=n&&n<e.byteLength);return a}function inflateGzip(e){return concatArrayBuffers(inflateConcatenatedGzip(e).map(function(e){return e.buffer}))}function altContigName(e){return"chr"==e.slice(0,3)?e.slice(3):"chr"+e}function isChrMatch(e,t){return e==t||"chr"+e==t||e=="chr"+t}function pipePromise(e,t){t.then(e.resolve,e.reject,e.notify)}function scaleRange(e,t){var r=e.stop-e.start,n=Math.floor((e.start+e.stop)/2),a=2*Math.round(t*r/2),u=n-a/2,i=n+a/2;return 0>u&&(i-=u,u=0),new _Interval2["default"](u,i)}function parseRange(e){var t=/^([^ :]+):([0-9,]+)-([0-9,]+)$/.exec(e);return t?{contig:t[1],start:parseNumberWithCommas(t[2]),stop:parseNumberWithCommas(t[3])}:(t=/^([^ :]+):([0-9,]+)$/.exec(e))?{contig:t[1],start:parseNumberWithCommas(t[2])}:(t=/^([0-9,]+)-([0-9,]+)$/.exec(e))?{start:parseNumberWithCommas(t[1]),stop:parseNumberWithCommas(t[2])}:(t=/^([^ :]+):$/.exec(e)||/^([^0-9][^ :]+)$/.exec(e))?{contig:t[1]}:(t=/^([0-9,]+)$/.exec(e),t?{start:parseNumberWithCommas(t[1])}:null)}function formatInterval(e){return numberWithCommas(e.start)+"-"+numberWithCommas(e.stop)}function numberWithCommas(e){return e.toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")}function parseNumberWithCommas(e){return parseInt(e.replace(/,/g,""),10)}function flatMap(e,t){return _underscore2["default"].flatten(e.map(t),!0)}function computePercentile(e,t){if(0===e.length)return 0;e.sort(function(e,t){return e-t});var r=(e.length-1)*t/100,n=Math.floor(r),a=Math.ceil(r);return n==a?e[n]:e[n]*(r-n)+e[a]*(a-r)}var _pakoLibInflate=require("pako/lib/inflate"),_pakoLibInflate2=_interopRequireDefault(_pakoLibInflate),_underscore=require("underscore"),_underscore2=_interopRequireDefault(_underscore),_Interval=require("./Interval"),_Interval2=_interopRequireDefault(_Interval),inflationCache={};module.exports={tupleLessOrEqual:tupleLessOrEqual,tupleRangeOverlaps:tupleRangeOverlaps,concatArrayBuffers:concatArrayBuffers,inflateConcatenatedGzip:inflateConcatenatedGzip,inflateGzip:inflateGzip,altContigName:altContigName,pipePromise:pipePromise,scaleRange:scaleRange,parseRange:parseRange,formatInterval:formatInterval,isChrMatch:isChrMatch,flatMap:flatMap,computePercentile:computePercentile};

},{"./Interval":182,"pako/lib/inflate":10,"underscore":177}],210:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function e(e,t){for(var r=0;r<t.length;r++){var a=t[r];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,r,a){return r&&e(t.prototype,r),a&&e(t,a),t}}(),_pileuputils=require("./pileuputils"),_utils=require("../utils"),_utils2=_interopRequireDefault(_utils),CoverageCache=function(){function e(t){_classCallCheck(this,e),this.reads={},this.refToCounts={},this.refToMaxCoverage={},this.referenceSource=t}return _createClass(e,[{key:"addAlignment",value:function(e){var t=e.getKey();if(!(t in this.reads)){this.reads[t]=e;var r=(0,_pileuputils.getOpInfo)(e,this.referenceSource);this.addReadToCoverage(e,r)}}},{key:"updateMismatches",value:function(e){var t=this._canonicalRef(e.contig);this.refToCounts[t]={},this.refToMaxCoverage[t]=0;for(var r in this.reads){var a=this.reads[r];if(a.getInterval().chrOnContig(e.contig)){var o=(0,_pileuputils.getOpInfo)(a,this.referenceSource);this.addReadToCoverage(a,o)}}}},{key:"addReadToCoverage",value:function(e,t){var r=this._canonicalRef(e.ref);r in this.refToCounts||(this.refToCounts[r]={},this.refToMaxCoverage[r]=0);for(var a=this.refToCounts[r],o=this.refToMaxCoverage[r],i=e.getInterval(),n=i.start(),s=i.stop(),u=n;s>=u;u++){var f=a[u];f||(a[u]=f={count:0}),f.count+=1,f.count>o&&(o=f.count)}var l=!0,c=!1,h=void 0;try{for(var v,C=t.mismatches[Symbol.iterator]();!(l=(v=C.next()).done);l=!0){var g,d=v.value,p=a[d.pos];p.mismatches?g=p.mismatches:(g=p.mismatches={},p.ref=this.referenceSource.getRangeAsString({contig:r,start:d.pos,stop:d.pos}));var f=g[d.basePair]||0;g[d.basePair]=1+f}}catch(_){c=!0,h=_}finally{try{!l&&C["return"]&&C["return"]()}finally{if(c)throw h}}this.refToMaxCoverage[r]=o}},{key:"maxCoverageForRef",value:function(e){return this.refToMaxCoverage[e]||this.refToMaxCoverage[_utils2["default"].altContigName(e)]||0}},{key:"binsForRef",value:function(e){return this.refToCounts[e]||this.refToCounts[_utils2["default"].altContigName(e)]||{}}},{key:"_canonicalRef",value:function(e){if(this.refToCounts[e])return e;var t=_utils2["default"].altContigName(e);return this.refToCounts[t]?t:e}}]),e}();module.exports=CoverageCache;

},{"../utils":209,"./pileuputils":223}],211:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function renderBars(e,t,a,r,n,i){if(!_underscore2["default"].isEmpty(n)){var o=t(1)-t(0),s=o>_style2["default"].COVERAGE_MIN_BAR_WIDTH_FOR_GAP,l=s?1:0,u=function(e,r){var n=Math.round(t(1+e)),i=Math.round(t(2+e))-l,o=Math.round(a(r));return{barX1:n,barX2:i,barY:o}},c={},h=a(0),f=r.start(),v=r.stop(),_=u(f,f in n?n[f].count:0),d=_.barX1;e.fillStyle=_style2["default"].COVERAGE_BIN_COLOR,e.beginPath(),e.moveTo(d,h);for(var p=f;v>p;p++){var g=n[p];if(g){e.pushObject(g);var C=u(p,g.count),y=C.barX1,O=C.barX2,T=C.barY;e.lineTo(y,T),e.lineTo(O,T),s&&(e.lineTo(O,h),e.lineTo(O+1,h)),SHOW_MISMATCHES&&!_underscore2["default"].isEmpty(g.mismatches)&&(c[p]=g),e.popObject()}}var R=u(v,v in n?n[v].count:0),b=R.barX2;e.lineTo(b,h),e.closePath(),e.fill(),_underscore2["default"].each(c,function(t,r){if(t.mismatches){var n=_underscore2["default"].clone(t.mismatches);r=Number(r);var o=_underscore2["default"].reduce(n,function(e,t){return e+t}),s=_underscore2["default"].max(n);s>MISMATCH_THRESHOLD&&o>i.vafColorThreshold*t.count&&o<t.count&&t.ref&&(n[t.ref]=t.count-o);var l=u(r,t.count),c=l.barX1,h=l.barX2;e.pushObject(t);var f=0;_underscore2["default"].chain(n).map(function(e,t){return{count:e,base:t}}).filter(function(e){var t=e.count;return t>MISMATCH_THRESHOLD}).sortBy(function(e){var t=e.count;return-t}).each(function(t){var n=t.count,i=t.base,o={position:1+r,count:n,base:i};e.pushObject(o),e.fillStyle=_style2["default"].BASE_COLORS[i];var s=a(f);e.fillRect(c,s,Math.max(1,h-c),a(f+n)-s),f+=n,e.popObject()}),e.popObject()}})}}var _createClass=function(){function e(e,t){for(var a=0;a<t.length;a++){var r=t[a];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,a,r){return a&&e(t.prototype,a),r&&e(t,r),t}}(),_get=function(e,t,a){for(var r=!0;r;){var n=e,i=t,o=a;r=!1,null===n&&(n=Function.prototype);var s=Object.getOwnPropertyDescriptor(n,i);if(void 0!==s){if("value"in s)return s.value;var l=s.get;return void 0===l?void 0:l.call(o)}var u=Object.getPrototypeOf(n);if(null===u)return void 0;e=u,t=i,a=o,r=!0,s=u=void 0}},_react=require("react"),_react2=_interopRequireDefault(_react),_scale=require("../scale"),_scale2=_interopRequireDefault(_scale),_shallowEquals=require("shallow-equals"),_shallowEquals2=_interopRequireDefault(_shallowEquals),_d3utils=require("./d3utils"),_d3utils2=_interopRequireDefault(_d3utils),_underscore=require("underscore"),_underscore2=_interopRequireDefault(_underscore),_dataCanvas=require("data-canvas"),_dataCanvas2=_interopRequireDefault(_dataCanvas),_canvasUtils=require("./canvas-utils"),_canvasUtils2=_interopRequireDefault(_canvasUtils),_CoverageCache=require("./CoverageCache"),_CoverageCache2=_interopRequireDefault(_CoverageCache),_TiledCanvas2=require("./TiledCanvas"),_TiledCanvas3=_interopRequireDefault(_TiledCanvas2),_style=require("../style"),_style2=_interopRequireDefault(_style),_ContigInterval=require("../ContigInterval"),_ContigInterval2=_interopRequireDefault(_ContigInterval),SHOW_MISMATCHES=!0,MISMATCH_THRESHOLD=1,CoverageTiledCanvas=function(e){function t(e,a,r){_classCallCheck(this,t),_get(Object.getPrototypeOf(t.prototype),"constructor",this).call(this),this.cache=e,this.height=Math.max(1,a),this.options=r}return _inherits(t,e),_createClass(t,[{key:"heightForRef",value:function(e){return this.height}},{key:"update",value:function(e,t){this.height=Math.max(1,e),this.options=t}},{key:"yScaleForRef",value:function(e){var t=this.cache.maxCoverageForRef(e),a=10;return _scale2["default"].linear().domain([t,0]).range([a,this.height-a]).nice()}},{key:"render",value:function(e,t,a){var r=this.cache.binsForRef(a.contig),n=this.yScaleForRef(a.contig),i=new _ContigInterval2["default"](a.contig,a.start()-1,a.stop()+1);renderBars(e,t,n,i,r,this.options)}}]),t}(_TiledCanvas3["default"]),CoverageTrack=function(e){function t(e){_classCallCheck(this,t),_get(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,e)}return _inherits(t,e),_createClass(t,[{key:"render",value:function(){return _react2["default"].createElement("canvas",{ref:"canvas",onClick:this.handleClick.bind(this)})}},{key:"getScale",value:function(){return _d3utils2["default"].getTrackScale(this.props.range,this.props.width)}},{key:"componentDidMount",value:function(){var e=this;this.cache=new _CoverageCache2["default"](this.props.referenceSource),this.tiles=new CoverageTiledCanvas(this.cache,this.props.height,this.props.options),this.props.source.on("newdata",function(t){var a=e.cache.maxCoverageForRef(t.contig);e.props.source.getAlignmentsInRange(t).forEach(function(t){return e.cache.addAlignment(t)});var r=e.cache.maxCoverageForRef(t.contig);a!=r?e.tiles.invalidateAll():e.tiles.invalidateRange(t),e.visualizeCoverage()}),this.props.referenceSource.on("newdata",function(t){e.cache.updateMismatches(t),e.tiles.invalidateRange(t),e.visualizeCoverage()})}},{key:"componentDidUpdate",value:function(e,t){(0,_shallowEquals2["default"])(this.props,e)&&(0,_shallowEquals2["default"])(this.state,t)||((this.props.height!=e.height||this.props.options!=e.options)&&(this.tiles.update(this.props.height,this.props.options),this.tiles.invalidateAll()),this.visualizeCoverage())}},{key:"getContext",value:function(){var e=this.refs.canvas,t=e.getContext("2d");return t}},{key:"renderTicks",value:function(e,t){var a=t.domain()[0];[0,Math.round(a/2),a].forEach(function(a){e.pushObject({value:a,type:"tick"});var r=Math.round(t(a));e.strokeStyle=_style2["default"].COVERAGE_FONT_COLOR,_canvasUtils2["default"].drawLine(e,0,r,_style2["default"].COVERAGE_TICK_LENGTH,r),e.popObject();var n=a+"X";e.pushObject({value:a,label:n,type:"label"}),e.font=_style2["default"].COVERAGE_FONT_STYLE;var i=_style2["default"].COVERAGE_TICK_LENGTH+_style2["default"].COVERAGE_TEXT_PADDING,o=r+_style2["default"].COVERAGE_TEXT_Y_OFFSET;e.strokeStyle="white",e.lineWidth=2,e.strokeText(n,i,o),e.lineWidth=1,e.fillStyle=_style2["default"].COVERAGE_FONT_COLOR,e.fillText(n,i,o),e.popObject()})}},{key:"visualizeCoverage",value:function(){var e=this.refs.canvas,t=this.props.width,a=this.props.height,r=_ContigInterval2["default"].fromGenomeRange(this.props.range);if(0!==t){_d3utils2["default"].sizeCanvas(e,t,a);var n=_dataCanvas2["default"].getDataContext(this.getContext());n.save(),n.reset(),n.clearRect(0,0,n.canvas.width,n.canvas.height);var i=this.tiles.yScaleForRef(r.contig);this.tiles.renderToScreen(n,r,this.getScale()),this.renderTicks(n,i),n.restore()}}},{key:"handleClick",value:function(e){var t=e.nativeEvent,a=t.offsetX,r=_ContigInterval2["default"].fromGenomeRange(this.props.range),n=this.getScale(),i=this.cache.binsForRef(r.contig),o=Math.floor(n.invert(a))-1,s=i[o],l=window.alert||console.log;if(s){var u=s.mismatches?_underscore2["default"].reduce(s.mismatches,function(e,t){return e+t}):0,c=s.ref||this.props.referenceSource.getRangeAsString({contig:r.contig,start:o,stop:o}),h=_underscore2["default"].extend({position:r.contig+":"+(1+o),"read depth":s.count},s.mismatches);h[c]=s.count-u,l(JSON.stringify(h,null,"  "))}}}]),t}(_react2["default"].Component);CoverageTrack.displayName="coverage",CoverageTrack.defaultOptions={vafColorThreshold:.2},module.exports=CoverageTrack;

},{"../ContigInterval":179,"../scale":201,"../style":208,"./CoverageCache":210,"./TiledCanvas":219,"./canvas-utils":221,"./d3utils":222,"data-canvas":7,"react":175,"shallow-equals":176,"underscore":177}],212:[function(require,module,exports){
"use strict";var DisplayMode={LOOSE:1,TIGHT:2,BLOCKS:3,HIDDEN:4,getDisplayMode:function(e){return e>=25?DisplayMode.LOOSE:e>=10?DisplayMode.TIGHT:e>=1?DisplayMode.BLOCKS:DisplayMode.HIDDEN},isText:function(e){return e==DisplayMode.LOOSE||e==DisplayMode.TIGHT}};module.exports=DisplayMode;

},{}],213:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function drawArrow(e,t,a,r,n){var o=t(1+a.start),l=t(1+a.stop);if(!(l-o<=2*_style2["default"].GENE_ARROW_SIZE)){var i=(o+l)/2;e.beginPath(),"-"==n?(e.moveTo(i+_style2["default"].GENE_ARROW_SIZE,r-_style2["default"].GENE_ARROW_SIZE),e.lineTo(i,r),e.lineTo(i+_style2["default"].GENE_ARROW_SIZE,r+_style2["default"].GENE_ARROW_SIZE)):(e.moveTo(i-_style2["default"].GENE_ARROW_SIZE,r-_style2["default"].GENE_ARROW_SIZE),e.lineTo(i,r),e.lineTo(i-_style2["default"].GENE_ARROW_SIZE,r+_style2["default"].GENE_ARROW_SIZE)),e.stroke()}}function drawGeneName(e,t,a,r,n){var o=r.position,l=.5*(t(1+o.start())+t(1+o.stop())),i=r.name||r.id,s=e.measureText(i).width,u=new _Interval2["default"](l-.5*s,l+.5*s);if(!_underscore2["default"].any(n,function(e){return u.intersects(e)})){n.push(u);var _=a+_style2["default"].GENE_FONT_SIZE+_style2["default"].GENE_TEXT_PADDING;e.fillText(i,l,_)}}var _createClass=function(){function e(e,t){for(var a=0;a<t.length;a++){var r=t[a];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,a,r){return a&&e(t.prototype,a),r&&e(t,r),t}}(),_get=function(e,t,a){for(var r=!0;r;){var n=e,o=t,l=a;r=!1,null===n&&(n=Function.prototype);var i=Object.getOwnPropertyDescriptor(n,o);if(void 0!==i){if("value"in i)return i.value;var s=i.get;return void 0===s?void 0:s.call(l)}var u=Object.getPrototypeOf(n);if(null===u)return void 0;e=u,t=o,a=l,r=!0,i=u=void 0}},_react=require("react"),_react2=_interopRequireDefault(_react),_reactDom=require("react-dom"),_reactDom2=_interopRequireDefault(_reactDom),_underscore=require("underscore"),_underscore2=_interopRequireDefault(_underscore),_shallowEquals=require("shallow-equals"),_shallowEquals2=_interopRequireDefault(_shallowEquals),_dataBedtools=require("../data/bedtools"),_dataBedtools2=_interopRequireDefault(_dataBedtools),_Interval=require("../Interval"),_Interval2=_interopRequireDefault(_Interval),_d3utils=require("./d3utils"),_d3utils2=_interopRequireDefault(_d3utils),_scale=require("../scale"),_scale2=_interopRequireDefault(_scale),_ContigInterval=require("../ContigInterval"),_ContigInterval2=_interopRequireDefault(_ContigInterval),_canvasUtils=require("./canvas-utils"),_canvasUtils2=_interopRequireDefault(_canvasUtils),_dataCanvas=require("data-canvas"),_dataCanvas2=_interopRequireDefault(_dataCanvas),_style=require("../style"),_style2=_interopRequireDefault(_style),GeneTrack=function(e){function t(e){_classCallCheck(this,t),_get(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,e),this.state={genes:[]}}return _inherits(t,e),_createClass(t,[{key:"render",value:function(){return _react2["default"].createElement("canvas",null)}},{key:"componentDidMount",value:function(){var e=this;this.props.source.on("newdata",function(){var t=e.props.range,a=new _ContigInterval2["default"](t.contig,t.start,t.stop);e.setState({genes:e.props.source.getGenesInRange(a)})}),this.updateVisualization()}},{key:"getScale",value:function(){return _d3utils2["default"].getTrackScale(this.props.range,this.props.width)}},{key:"componentDidUpdate",value:function(e,t){(0,_shallowEquals2["default"])(e,this.props)&&(0,_shallowEquals2["default"])(t,this.state)||this.updateVisualization()}},{key:"updateVisualization",value:function(){var e=_reactDom2["default"].findDOMNode(this),t=this.props,a=t.width,r=t.height,n=this.props.range,o=new _ContigInterval2["default"](n.contig,n.start,n.stop);if(0!==a){var l=this.getScale(),i=_scale2["default"].linear().domain([l.invert(0),l.invert(a)]).range([0,a]).clamp(!0);_d3utils2["default"].sizeCanvas(e,a,r);var s=_dataCanvas2["default"].getDataContext(_canvasUtils2["default"].getContext(e));s.reset(),s.clearRect(0,0,s.canvas.width,s.canvas.height);var u=Math.round(r/4),_=[];s.font=_style2["default"].GENE_FONT_SIZE+"px "+_style2["default"].GENE_FONT,s.textAlign="center",this.state.genes.forEach(function(e){if(e.position.chrIntersects(o)){s.pushObject(e),s.lineWidth=1,s.strokeStyle=_style2["default"].GENE_COLOR,s.fillStyle=_style2["default"].GENE_COLOR,_canvasUtils2["default"].drawLine(s,i(1+e.position.start()),u+.5,i(1+e.position.stop()),u+.5);var t=_dataBedtools2["default"].splitCodingExons(e.exons,e.codingRegion);t.forEach(function(e){s.fillRect(l(1+e.start),u-3*(e.isCoding?2:1),l(e.stop+2)-l(1+e.start),6*(e.isCoding?2:1))});var a=e.position.interval.complementIntervals(e.exons);a.forEach(function(t){drawArrow(s,i,t,u+.5,e.strand)}),s.strokeStyle=_style2["default"].GENE_COMPLEMENT_COLOR,s.lineWidth=2,e.exons.forEach(function(t){drawArrow(s,i,t,u+.5,e.strand)}),drawGeneName(s,i,u,e,_),s.popObject()}})}}}]),t}(_react2["default"].Component);GeneTrack.displayName="genes",module.exports=GeneTrack;

},{"../ContigInterval":179,"../Interval":182,"../data/bedtools":194,"../scale":201,"../style":208,"./canvas-utils":221,"./d3utils":222,"data-canvas":7,"react":175,"react-dom":23,"shallow-equals":176,"underscore":177}],214:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function renderGenome(e,t,a,i,r){var n=t(1)-t(0),l=_DisplayMode2["default"].getDisplayMode(n),o=_DisplayMode2["default"].isText(l);if(l!=_DisplayMode2["default"].HIDDEN){e.textAlign="center",l==_DisplayMode2["default"].LOOSE?e.font=_style2["default"].LOOSE_TEXT_STYLE:l==_DisplayMode2["default"].TIGHT&&(e.font=_style2["default"].TIGHT_TEXT_STYLE);for(var s=null,u=i.start(),c=i.stop(),f=u;c>=f;f++){var _=r[f-u];"."!=_&&(e.save(),e.pushObject({pos:f,letter:_}),e.fillStyle=_style2["default"].BASE_COLORS[_],o?e.fillText(_,t(1.5+f),a-1):n>=_style2["default"].COVERAGE_MIN_BAR_WIDTH_FOR_GAP?e.fillRect(t(1+f)+.5,0,n-1.5,a):s===_?e.fillRect(t(1+f)-1.5,0,n+1.5,a):e.fillRect(t(1+f)-.5,0,n+1.5,a),e.popObject(),e.restore(),s=_)}}}var _createClass=function(){function e(e,t){for(var a=0;a<t.length;a++){var i=t[a];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,a,i){return a&&e(t.prototype,a),i&&e(t,i),t}}(),_get=function(e,t,a){for(var i=!0;i;){var r=e,n=t,l=a;i=!1,null===r&&(r=Function.prototype);var o=Object.getOwnPropertyDescriptor(r,n);if(void 0!==o){if("value"in o)return o.value;var s=o.get;return void 0===s?void 0:s.call(l)}var u=Object.getPrototypeOf(r);if(null===u)return void 0;e=u,t=n,a=l,i=!0,o=u=void 0}},_react=require("react"),_react2=_interopRequireDefault(_react),_reactDom=require("react-dom"),_reactDom2=_interopRequireDefault(_reactDom),_shallowEquals=require("shallow-equals"),_shallowEquals2=_interopRequireDefault(_shallowEquals),_canvasUtils=require("./canvas-utils"),_canvasUtils2=_interopRequireDefault(_canvasUtils),_ContigInterval=require("../ContigInterval"),_ContigInterval2=_interopRequireDefault(_ContigInterval),_dataCanvas=require("data-canvas"),_dataCanvas2=_interopRequireDefault(_dataCanvas),_d3utils=require("./d3utils"),_d3utils2=_interopRequireDefault(_d3utils),_DisplayMode=require("./DisplayMode"),_DisplayMode2=_interopRequireDefault(_DisplayMode),_TiledCanvas2=require("./TiledCanvas"),_TiledCanvas3=_interopRequireDefault(_TiledCanvas2),_style=require("../style"),_style2=_interopRequireDefault(_style),GenomeTiledCanvas=function(e){function t(e,a){_classCallCheck(this,t),_get(Object.getPrototypeOf(t.prototype),"constructor",this).call(this),this.source=e,this.height=Math.max(1,a)}return _inherits(t,e),_createClass(t,[{key:"render",value:function(e,t,a){var i={contig:a.contig,start:a.start()-1,stop:a.stop()+1},r=this.source.getRangeAsString(i);renderGenome(e,t,this.height,_ContigInterval2["default"].fromGenomeRange(i),r)}},{key:"heightForRef",value:function(e){return this.height}},{key:"updateHeight",value:function(e){this.height=e}}]),t}(_TiledCanvas3["default"]),GenomeTrack=function(e){function t(){_classCallCheck(this,t),_get(Object.getPrototypeOf(t.prototype),"constructor",this).apply(this,arguments)}return _inherits(t,e),_createClass(t,[{key:"render",value:function(){return _react2["default"].createElement("canvas",null)}},{key:"componentDidMount",value:function(){var e=this;this.tiles=new GenomeTiledCanvas(this.props.source,this.props.height),this.props.source.on("newdata",function(t){e.tiles.invalidateRange(t),e.updateVisualization()}),this.updateVisualization()}},{key:"getScale",value:function(){return _d3utils2["default"].getTrackScale(this.props.range,this.props.width)}},{key:"componentDidUpdate",value:function(e,t){(0,_shallowEquals2["default"])(e,this.props)&&(0,_shallowEquals2["default"])(t,this.state)||(this.props.height!=e.height&&(this.tiles.updateHeight(this.props.height),this.tiles.invalidateAll()),this.updateVisualization())}},{key:"updateVisualization",value:function(){var e=_reactDom2["default"].findDOMNode(this),t=this.props,a=t.width,i=t.height,r=t.range;if(0!==a){_d3utils2["default"].sizeCanvas(e,a,i);var n=_dataCanvas2["default"].getDataContext(_canvasUtils2["default"].getContext(e));n.reset(),n.clearRect(0,0,n.canvas.width,n.canvas.height),this.tiles.renderToScreen(n,_ContigInterval2["default"].fromGenomeRange(r),this.getScale())}}}]),t}(_react2["default"].Component);GenomeTrack.displayName="reference",module.exports=GenomeTrack;

},{"../ContigInterval":179,"../style":208,"./DisplayMode":212,"./TiledCanvas":219,"./canvas-utils":221,"./d3utils":222,"data-canvas":7,"react":175,"react-dom":23,"shallow-equals":176}],215:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var _createClass=function(){function e(e,t){for(var a=0;a<t.length;a++){var r=t[a];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,a,r){return a&&e(t.prototype,a),r&&e(t,r),t}}(),_get=function(e,t,a){for(var r=!0;r;){var o=e,n=t,u=a;r=!1,null===o&&(o=Function.prototype);var i=Object.getOwnPropertyDescriptor(o,n);if(void 0!==i){if("value"in i)return i.value;var l=i.get;return void 0===l?void 0:l.call(u)}var s=Object.getPrototypeOf(o);if(null===s)return void 0;e=s,t=n,a=u,r=!0,i=s=void 0}},_react=require("react"),_react2=_interopRequireDefault(_react),_reactDom=require("react-dom"),_reactDom2=_interopRequireDefault(_reactDom),_sourcesEmptySource=require("../sources/EmptySource"),_sourcesEmptySource2=_interopRequireDefault(_sourcesEmptySource),_canvasUtils=require("./canvas-utils"),_canvasUtils2=_interopRequireDefault(_canvasUtils),_dataCanvas=require("data-canvas"),_dataCanvas2=_interopRequireDefault(_dataCanvas),_style=require("../style"),_style2=_interopRequireDefault(_style),_d3utils=require("./d3utils"),_d3utils2=_interopRequireDefault(_d3utils),LocationTrack=function(e){function t(e){_classCallCheck(this,t),_get(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,e)}return _inherits(t,e),_createClass(t,[{key:"getScale",value:function(){return _d3utils2["default"].getTrackScale(this.props.range,this.props.width)}},{key:"render",value:function(){return _react2["default"].createElement("canvas",null)}},{key:"componentDidMount",value:function(){this.updateVisualization()}},{key:"componentDidUpdate",value:function(e,t){this.updateVisualization()}},{key:"updateVisualization",value:function(){var e=_reactDom2["default"].findDOMNode(this),t=this.props,a=t.range,r=t.width,o=t.height,n=this.getScale();_d3utils2["default"].sizeCanvas(e,r,o);var u=_dataCanvas2["default"].getDataContext(_canvasUtils2["default"].getContext(e));u.save(),u.reset(),u.clearRect(0,0,u.canvas.width,u.canvas.height);var i=Math.floor((a.stop+a.start)/2),l=Math.round(n(i+1)),s=Math.round(n(i));_canvasUtils2["default"].drawLine(u,s-.5,0,s-.5,o),_canvasUtils2["default"].drawLine(u,l-.5,0,l-.5,o);var c=o/2;u.fillStyle=_style2["default"].LOC_FONT_COLOR,u.font=_style2["default"].LOC_FONT_STYLE,u.fillText(i.toLocaleString()+" bp",l+_style2["default"].LOC_TICK_LENGTH+_style2["default"].LOC_TEXT_PADDING,c+_style2["default"].LOC_TEXT_Y_OFFSET),_canvasUtils2["default"].drawLine(u,l-.5,c-.5,l+_style2["default"].LOC_TICK_LENGTH-.5,c-.5),u.restore()}}]),t}(_react2["default"].Component);LocationTrack.displayName="location",LocationTrack.defaultSource=_sourcesEmptySource2["default"].create(),module.exports=LocationTrack;

},{"../sources/EmptySource":204,"../style":208,"./canvas-utils":221,"./d3utils":222,"data-canvas":7,"react":175,"react-dom":23}],216:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function spanAndInsert(e){for(var t=!0;t;){var r=e;if(t=!1,1==r.length)return{insert:null,span:r[0]};if(2!=r.length)throw"Called spanAndInsert with "+r.length+" \notin [1, 2]";if(r[0].chrOnContig(r[1].contig)){var n=r[0].interval,i=r[1].interval,u=n.start<i.start?new _Interval2["default"](n.stop,i.start):new _Interval2["default"](i.stop,n.start),s=_Interval2["default"].boundingInterval([n,i]);return{insert:u,span:new _ContigInterval2["default"](r[0].contig,s.start,s.stop)}}e=[r[0]],t=!0}}Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),_underscore=require("underscore"),_underscore2=_interopRequireDefault(_underscore),_ContigInterval=require("../ContigInterval"),_ContigInterval2=_interopRequireDefault(_ContigInterval),_Interval=require("../Interval"),_Interval2=_interopRequireDefault(_Interval),_pileuputils=require("./pileuputils"),_utils=require("../utils"),_utils2=_interopRequireDefault(_utils),MIN_OUTLIER_PERCENTILE=.5,MAX_OUTLIER_PERCENTILE=99.5,MAX_INSERT_SIZE=3e4,MIN_READS_FOR_OUTLIERS=500,PileupCache=function(){function e(t,r){_classCallCheck(this,e),this.groups={},this.refToPileup={},this.referenceSource=t,this.viewAsPairs=r,this._insertStats=null}return _createClass(e,[{key:"groupKey",value:function(e){return this.viewAsPairs?e.name+":"+e.ref:e.getKey()}},{key:"addAlignment",value:function(e){this._insertStats=null;var t=this.groupKey(e),r=e.getInterval();t in this.groups||(this.groups[t]={key:t,row:-1,insert:null,span:r,alignments:[]});var n=this.groups[t];if(!_underscore2["default"].find(n.alignments,function(t){return t.read==e})){var i=(0,_pileuputils.getOpInfo)(e,this.referenceSource),u={read:e,strand:e.getStrand(),refLength:r.length(),ops:i.ops,mismatches:i.mismatches};n.alignments.push(u);var s=null;if(1==n.alignments.length){if(this.viewAsPairs){var a=e.getMateProperties(),l=[r];a&&a.ref&&a.ref==e.ref&&(s=new _ContigInterval2["default"](a.ref,a.pos,a.pos+r.length()),l.push(s)),n=_underscore2["default"].extend(n,spanAndInsert(l))}else n.span=r;e.ref in this.refToPileup||(this.refToPileup[e.ref]=[]);var o=this.refToPileup[e.ref];n.row=(0,_pileuputils.addToPileup)(n.span.interval,o)}else if(2==n.alignments.length){s=n.alignments[0].read.getInterval();var f=spanAndInsert([r,s]),p=f.span,c=f.insert;n.insert=c,c&&(n.span=p)}}}},{key:"updateMismatches",value:function(e){for(var t in this.groups){var r=this.groups[t].alignments,n=!0,i=!1,u=void 0;try{for(var s,a=r[Symbol.iterator]();!(n=(s=a.next()).done);n=!0){var l=s.value,o=l.read;if(o.getInterval().chrIntersects(e)){var f=(0,_pileuputils.getOpInfo)(o,this.referenceSource);l.mismatches=f.mismatches}}}catch(p){i=!0,u=p}finally{try{!n&&a["return"]&&a["return"]()}finally{if(i)throw u}}}}},{key:"pileupForRef",value:function(e){if(e in this.refToPileup)return this.refToPileup[e];var t=_utils2["default"].altContigName(e);return t in this.refToPileup?this.refToPileup[t]:[]}},{key:"pileupHeightForRef",value:function(e){var t=this.pileupForRef(e);return t?t.length:0}},{key:"getGroupsOverlapping",value:function(e){return _underscore2["default"].filter(this.groups,function(t){return t.span.chrIntersects(e)})}},{key:"anyGroupsOverlapping",value:function(e){for(var t in this.groups){var r=this.groups[t];if(r.span.chrIntersects(e))return!0}return!1}},{key:"sortReadsAt",value:function(e,t){var r=this.pileupForRef(e),n=_underscore2["default"].filter(this.groups,function(r){return _underscore2["default"].any(r.alignments,function(r){return r.read.getInterval().chrContainsLocus(e,t)})}),i=_underscore2["default"].mapObject(_underscore2["default"].groupBy(n,function(e){return e.row}),function(e){return _underscore2["default"].min(e,function(e){return e.span.start()}).span.start()}),u=_underscore2["default"].sortBy(_underscore2["default"].range(0,r.length),function(e){return i[e]||1/0}),s=[];u.forEach(function(e,t){s[e]=t});var a=_underscore2["default"].range(0,r.length).map(function(e){return r[s[e]]}),l=e in this.refToPileup?e:_utils2["default"].altContigName(e);this.refToPileup[l]=a,_underscore2["default"].each(this.groups,function(t){t.span.chrOnContig(e)&&(t.row=s[t.row])})}},{key:"getInsertStats",value:function(){if(this._insertStats)return this._insertStats;var e=_underscore2["default"].map(this.groups,function(e){return e.alignments[0].read.getInferredInsertSize()}).filter(function(e){return MAX_INSERT_SIZE>e}),t=e.length>=MIN_READS_FOR_OUTLIERS?{minOutlierSize:_utils2["default"].computePercentile(e,MIN_OUTLIER_PERCENTILE),maxOutlierSize:_utils2["default"].computePercentile(e,MAX_OUTLIER_PERCENTILE)}:{minOutlierSize:0,maxOutlierSize:1/0};return this._insertStats=t,t}}]),e}();module.exports=PileupCache;

},{"../ContigInterval":179,"../Interval":182,"../utils":209,"./pileuputils":223,"underscore":177}],217:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function isRendered(e){return e.op==_pileuputils.CigarOp.MATCH||e.op==_pileuputils.CigarOp.DELETE||e.op==_pileuputils.CigarOp.INSERT}function renderPileup(e,t,a,i,r,n){function s(a,i,r,n){var s=t(a+1),o=t(a+i+1),l=r+READ_HEIGHT,u=Math.min(READ_STRAND_ARROW_WIDTH,(o-s)/6);e.beginPath(),"R"==n?(e.moveTo(s,r),e.lineTo(o-u,r),e.lineTo(o,(r+l)/2),e.lineTo(o-u,l),e.lineTo(s,l)):(e.moveTo(o,r),e.lineTo(s+u,r),e.lineTo(s,(r+l)/2),e.lineTo(s+u,l),e.lineTo(o,l)),e.fill()}function o(a,i,r){switch(a.op){case _pileuputils.CigarOp.MATCH:if(a.arrow)s(a.pos,a.length,i,a.arrow);else{var n=t(a.pos+1);e.fillRect(n,i,t(a.pos+a.length+1)-n,READ_HEIGHT)}break;case _pileuputils.CigarOp.DELETE:var o=t(a.pos+1),l=t(a.pos+1+a.length),u=i+READ_HEIGHT/2-.5;e.save(),e.fillStyle=_style2["default"].DELETE_COLOR,e.fillRect(o,u,l-o,1),e.restore();break;case _pileuputils.CigarOp.INSERT:e.save(),e.fillStyle=_style2["default"].INSERT_COLOR;var c=t(a.pos+1)-2,p=i-1,d=i+READ_HEIGHT+2;e.fillRect(c,p,1,d-p),e.restore()}}function l(t,a){e.pushObject(t),e.save(),r&&(e.fillStyle="+"==t.strand?_style2["default"].ALIGNMENT_PLUS_STRAND_COLOR:_style2["default"].ALIGNMENT_MINUS_STRAND_COLOR),t.ops.forEach(function(e){isRendered(e)&&o(e,a,t)}),t.mismatches.forEach(function(e){return c(e,a)}),e.restore(),e.popObject()}function u(a){if(e.save(),i&&a.insert){var r=a.span.length();r<i.minOutlierSize?e.fillStyle="blue":r>i.maxOutlierSize?e.fillStyle="red":e.fillStyle=_style2["default"].ALIGNMENT_COLOR}else e.fillStyle=_style2["default"].ALIGNMENT_COLOR;var n=yForRow(a.row);if(e.pushObject(a),a.insert){var s=a.insert,o=t(s.start+1),u=t(s.stop+1);e.fillRect(o,n+READ_HEIGHT/2-.5,u-o,1)}a.alignments.forEach(function(e){return l(e,n)}),e.popObject(),e.restore()}function c(i,r){a.interval.contains(i.pos)&&(e.pushObject(i),e.save(),e.fillStyle=_style2["default"].BASE_COLORS[i.basePair],e.globalAlpha=opacityForQuality(i.quality),e.textAlign="center",f?e.fillText(i.basePair,t(1.5+i.pos),r+READ_HEIGHT-2):e.fillRect(t(1+i.pos),r,p-1,READ_HEIGHT),e.restore(),e.popObject())}var p=t(1)-t(0),d=_DisplayMode2["default"].getDisplayMode(p),f=_DisplayMode2["default"].isText(d);e.font=_style2["default"].TIGHT_TEXT_STYLE,n.forEach(function(e){return u(e)})}function yForRow(e){return e*(READ_HEIGHT+READ_SPACING)}function opacityForQuality(e){var t=Q_SCALE(e);return t=Math.round(10*t+.5)/10,Math.min(1,t)}var _createClass=function(){function e(e,t){for(var a=0;a<t.length;a++){var i=t[a];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,a,i){return a&&e(t.prototype,a),i&&e(t,i),t}}(),_get=function(e,t,a){for(var i=!0;i;){var r=e,n=t,s=a;i=!1,null===r&&(r=Function.prototype);var o=Object.getOwnPropertyDescriptor(r,n);if(void 0!==o){if("value"in o)return o.value;var l=o.get;return void 0===l?void 0:l.call(s)}var u=Object.getPrototypeOf(r);if(null===u)return void 0;e=u,t=n,a=s,i=!0,o=u=void 0}},_react=require("react"),_react2=_interopRequireDefault(_react),_shallowEquals=require("shallow-equals"),_shallowEquals2=_interopRequireDefault(_shallowEquals),_underscore=require("underscore"),_underscore2=_interopRequireDefault(_underscore),_scale=require("../scale"),_scale2=_interopRequireDefault(_scale),_d3utils=require("./d3utils"),_d3utils2=_interopRequireDefault(_d3utils),_pileuputils=require("./pileuputils"),_ContigInterval=require("../ContigInterval"),_ContigInterval2=_interopRequireDefault(_ContigInterval),_DisplayMode=require("./DisplayMode"),_DisplayMode2=_interopRequireDefault(_DisplayMode),_PileupCache=require("./PileupCache"),_PileupCache2=_interopRequireDefault(_PileupCache),_TiledCanvas2=require("./TiledCanvas"),_TiledCanvas3=_interopRequireDefault(_TiledCanvas2),_canvasUtils=require("./canvas-utils"),_canvasUtils2=_interopRequireDefault(_canvasUtils),_dataCanvas=require("data-canvas"),_dataCanvas2=_interopRequireDefault(_dataCanvas),_style=require("../style"),_style2=_interopRequireDefault(_style),READ_HEIGHT=13,READ_SPACING=2,READ_STRAND_ARROW_WIDTH=5,SUPPORTS_DASHES="undefined"!=typeof CanvasRenderingContext2D&&!!CanvasRenderingContext2D.prototype.setLineDash,PileupTiledCanvas=function(e){function t(e,a){_classCallCheck(this,t),_get(Object.getPrototypeOf(t.prototype),"constructor",this).call(this),this.cache=e,this.options=a}return _inherits(t,e),_createClass(t,[{key:"update",value:function(e){this.options=e}},{key:"heightForRef",value:function(e){return this.cache.pileupHeightForRef(e)*(READ_HEIGHT+READ_SPACING)}},{key:"render",value:function(e,t,a){var i=new _ContigInterval2["default"](a.contig,a.start()-1,a.stop()+1),r=this.cache.getGroupsOverlapping(i),n=this.options.colorByInsert?this.cache.getInsertStats():null;renderPileup(e,t,i,n,this.options.colorByStrand,r)}}]),t}(_TiledCanvas3["default"]),MIN_Q=5,MAX_Q=20,Q_SCALE=_scale2["default"].linear().domain([MIN_Q,MAX_Q]).range([.1,.9]).clamp(!0),PileupTrack=function(e){function t(e){_classCallCheck(this,t),_get(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,e),this.state={networkStatus:null}}return _inherits(t,e),_createClass(t,[{key:"render",value:function(){var e={height:"100%"},t=null,a=this.state.networkStatus;if(a){var i=this.formatStatus(a);t=_react2["default"].createElement("div",{ref:"status",className:"network-status"},_react2["default"].createElement("div",{className:"network-status-message"},"Loading alignments… (",i,")"))}return _react2["default"].createElement("div",null,t,_react2["default"].createElement("div",{ref:"container",style:e},_react2["default"].createElement("canvas",{ref:"canvas",onClick:this.handleClick.bind(this)})))}},{key:"formatStatus",value:function(e){if(e.numRequests){var t=e.numRequests>1?"s":"";return"issued "+e.numRequests+" request"+t}if(e.status)return e.status;throw"invalid"}},{key:"componentDidMount",value:function(){var e=this;this.cache=new _PileupCache2["default"](this.props.referenceSource,this.props.options.viewAsPairs),this.tiles=new PileupTiledCanvas(this.cache,this.props.options),this.props.source.on("newdata",function(t){e.updateReads(t),e.tiles.invalidateRange(t),e.updateVisualization()}),this.props.referenceSource.on("newdata",function(t){e.cache.updateMismatches(t),e.tiles.invalidateRange(t),e.updateVisualization()}),this.props.source.on("networkprogress",function(t){e.setState({networkStatus:t})}),this.props.source.on("networkdone",function(t){e.setState({networkStatus:null})}),this.updateVisualization()}},{key:"getScale",value:function(){return _d3utils2["default"].getTrackScale(this.props.range,this.props.width)}},{key:"componentDidUpdate",value:function(e,t){var a=!1;this.props.options!=e.options&&(this.handleOptionsChange(e.options),a=!0),(0,_shallowEquals2["default"])(this.props,e)&&(0,_shallowEquals2["default"])(this.state,t)&&!a||this.updateVisualization()}},{key:"handleOptionsChange",value:function(e){this.tiles.invalidateAll(),e.viewAsPairs!=this.props.options.viewAsPairs?(this.cache=new _PileupCache2["default"](this.props.referenceSource,this.props.options.viewAsPairs),this.tiles=new PileupTiledCanvas(this.cache,this.props.options),this.updateReads(_ContigInterval2["default"].fromGenomeRange(this.props.range))):e.colorByInsert!=this.props.options.colorByInsert&&(this.tiles.update(this.props.options),this.tiles.invalidateAll(),this.updateVisualization()),e.sort!=this.props.options.sort&&this.handleSort()}},{key:"updateReads",value:function(e){var t=this,a=this.cache.anyGroupsOverlapping(e);this.props.source.getAlignmentsInRange(e).forEach(function(e){return t.cache.addAlignment(e)}),!a&&this.cache.anyGroupsOverlapping(e)&&this.handleSort()}},{key:"updateVisualization",value:function(){var e=this.refs.canvas,t=this.props.width;if(0!==t){var a=yForRow(this.cache.pileupHeightForRef(this.props.range.contig));_d3utils2["default"].sizeCanvas(e,t,a);var i=_canvasUtils2["default"].getContext(e),r=_dataCanvas2["default"].getDataContext(i);this.renderScene(r)}}},{key:"renderScene",value:function(e){var t=this.props.range,a=new _ContigInterval2["default"](t.contig,t.start,t.stop),i=this.getScale();e.reset(),e.clearRect(0,0,e.canvas.width,e.canvas.height),this.tiles.renderToScreen(e,a,i),this.renderCenterLine(e,a,i);var r=_d3utils2["default"].findParent(this.refs.canvas,"track-content");r&&(r.scrollLeft=0)}},{key:"renderCenterLine",value:function(e,t,a){var i=Math.floor((t.stop()+t.start())/2),r=Math.ceil(a(i+1)),n=Math.floor(a(i)),s=e.canvas.height;if(e.save(),e.lineWidth=1,SUPPORTS_DASHES&&e.setLineDash([5,5]),3>r-n){var o=Math.round((n+r)/2);_canvasUtils2["default"].drawLine(e,o-.5,0,o-.5,s)}else _canvasUtils2["default"].drawLine(e,n-.5,0,n-.5,s),_canvasUtils2["default"].drawLine(e,r-.5,0,r-.5,s);e.restore()}},{key:"handleSort",value:function(){var e=this.props.range,t=e.start,a=e.stop,i=(t+a)/2;this.cache.sortReadsAt(this.props.range.contig,i),this.tiles.invalidateAll(),this.updateVisualization()}},{key:"handleClick",value:function(e){var t=e.nativeEvent,a=t.offsetX,i=t.offsetY,r=_canvasUtils2["default"].getContext(this.refs.canvas),n=new _dataCanvas2["default"].ClickTrackingContext(r,a,i),s=this.props.range,o=new _ContigInterval2["default"](s.contig,s.start,s.stop),l=this.getScale(),u=this.cache.getGroupsOverlapping(o);renderPileup(n,l,o,null,!1,u);var c=_underscore2["default"].find(n.hits[0],function(e){return e.read}),p=window.alert||console.log;c&&p(c.read.debugString())}}]),t}(_react2["default"].Component);PileupTrack.displayName="pileup",PileupTrack.defaultOptions={viewAsPairs:!1,colorByInsert:!0,colorByStrand:!1},PileupTrack.getOptionsMenu=function(e){return[{key:"view-pairs",label:"View as pairs",checked:e.viewAsPairs},"-",{key:"color-insert",label:"Color by insert size",checked:e.colorByInsert},{key:"color-strand",label:"Color by strand",checked:e.colorByStrand},"-",{key:"sort",label:"Sort alignments"}]};var messageId=1;PileupTrack.handleSelectOption=function(e,t){var a=_underscore2["default"].clone(t);return"view-pairs"==e?(a.viewAsPairs=!a.viewAsPairs,a):"color-insert"==e?(a.colorByInsert=!a.colorByInsert,a.colorByInsert&&(a.colorByStrand=!1),a):"color-strand"==e?(a.colorByStrand=!a.colorByStrand,a.colorByStrand&&(a.colorByInsert=!1),a):"sort"==e?(a.sort=messageId++,a):t},module.exports=PileupTrack;

},{"../ContigInterval":179,"../scale":201,"../style":208,"./DisplayMode":212,"./PileupCache":216,"./TiledCanvas":219,"./canvas-utils":221,"./d3utils":222,"./pileuputils":223,"data-canvas":7,"react":175,"shallow-equals":176,"underscore":177}],218:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var _createClass=function(){function e(e,t){for(var a=0;a<t.length;a++){var r=t[a];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,a,r){return a&&e(t.prototype,a),r&&e(t,r),t}}(),_get=function(e,t,a){for(var r=!0;r;){var l=e,u=t,n=a;r=!1,null===l&&(l=Function.prototype);var o=Object.getOwnPropertyDescriptor(l,u);if(void 0!==o){if("value"in o)return o.value;var i=o.get;return void 0===i?void 0:i.call(n)}var s=Object.getPrototypeOf(l);if(null===s)return void 0;e=s,t=u,a=n,r=!0,o=s=void 0}},_react=require("react"),_react2=_interopRequireDefault(_react),_reactDom=require("react-dom"),_reactDom2=_interopRequireDefault(_reactDom),_sourcesEmptySource=require("../sources/EmptySource"),_sourcesEmptySource2=_interopRequireDefault(_sourcesEmptySource),_canvasUtils=require("./canvas-utils"),_canvasUtils2=_interopRequireDefault(_canvasUtils),_dataCanvas=require("data-canvas"),_dataCanvas2=_interopRequireDefault(_dataCanvas),_style=require("../style"),_style2=_interopRequireDefault(_style),_d3utils=require("./d3utils"),_d3utils2=_interopRequireDefault(_d3utils),ScaleTrack=function(e){function t(e){_classCallCheck(this,t),_get(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,e)}return _inherits(t,e),_createClass(t,[{key:"getScale",value:function(){return _d3utils2["default"].getTrackScale(this.props.range,this.props.width)}},{key:"render",value:function(){return _react2["default"].createElement("canvas",{ref:"canvas"})}},{key:"componentDidMount",value:function(){this.updateVisualization()}},{key:"componentDidUpdate",value:function(e,t){this.updateVisualization()}},{key:"getDOMNode",value:function(){return _reactDom2["default"].findDOMNode(this)}},{key:"updateVisualization",value:function(){var e=this.getDOMNode(),t=this.props,a=t.range,r=t.width,l=t.height;_d3utils2["default"].sizeCanvas(e,r,l);var u=_dataCanvas2["default"].getDataContext(_canvasUtils2["default"].getContext(e));u.save(),u.reset(),u.clearRect(0,0,u.canvas.width,u.canvas.height);var n=a.stop-a.start+1,o=Math.round(r/2),i=Math.round(l/2),s=_d3utils2["default"].formatRange(n),c=s.prefix,_=s.unit;u.lineWidth=1,u.fillStyle=_style2["default"].SCALE_FONT_COLOR,u.font=_style2["default"].SCALE_FONT_STYLE,u.textAlign="center",u.fillText(c+" "+_,o,i+_style2["default"].SCALE_TEXT_Y_OFFSET),_canvasUtils2["default"].drawLine(u,.5,i-.5,o-_style2["default"].SCALE_LINE_PADDING-.5,i-.5),u.beginPath(),u.moveTo(.5+_style2["default"].SCALE_ARROW_SIZE,i-_style2["default"].SCALE_ARROW_SIZE-.5),u.lineTo(.5,i-.5),u.lineTo(.5+_style2["default"].SCALE_ARROW_SIZE,i+_style2["default"].SCALE_ARROW_SIZE-.5),u.closePath(),u.fill(),u.stroke(),_canvasUtils2["default"].drawLine(u,o+_style2["default"].SCALE_LINE_PADDING-.5,i-.5,r-.5,i-.5),u.beginPath(),u.moveTo(r-_style2["default"].SCALE_ARROW_SIZE-.5,i-_style2["default"].SCALE_ARROW_SIZE-.5),u.lineTo(r-.5,i-.5),u.lineTo(r-_style2["default"].SCALE_ARROW_SIZE-.5,i+_style2["default"].SCALE_ARROW_SIZE-.5),u.closePath(),u.fill(),u.stroke(),u.restore()}}]),t}(_react2["default"].Component);ScaleTrack.displayName="scale",ScaleTrack.defaultSource=_sourcesEmptySource2["default"].create(),module.exports=ScaleTrack;

},{"../sources/EmptySource":204,"../style":208,"./canvas-utils":221,"./d3utils":222,"data-canvas":7,"react":175,"react-dom":23}],219:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),_underscore=require("underscore"),_underscore2=_interopRequireDefault(_underscore),_scale=require("../scale"),_scale2=_interopRequireDefault(_scale),_ContigInterval=require("../ContigInterval"),_ContigInterval2=_interopRequireDefault(_ContigInterval),_Interval=require("../Interval"),_Interval2=_interopRequireDefault(_Interval),_canvasUtils=require("./canvas-utils"),_canvasUtils2=_interopRequireDefault(_canvasUtils),_dataCanvas=require("data-canvas"),_dataCanvas2=_interopRequireDefault(_dataCanvas),_utils=require("../utils"),_utils2=_interopRequireDefault(_utils),_d3utils=require("./d3utils"),_d3utils2=_interopRequireDefault(_d3utils),EPSILON=1e-6,MIN_PX_PER_BUFFER=500,DEBUG_RENDER_TILE_EDGES=!1,TiledCanvas=function(){function e(){_classCallCheck(this,e),this.tileCache=[]}return _createClass(e,[{key:"renderTile",value:function(e){var t=e.range,r=this.heightForRef(t.contig),n=Math.round(e.pixelsPerBase*t.length());e.buffer=document.createElement("canvas"),_d3utils2["default"].sizeCanvas(e.buffer,n,r);var a=_scale2["default"].linear().domain([t.start(),t.stop()+1]).range([0,n]),i=_canvasUtils2["default"].getContext(e.buffer),u=_dataCanvas2["default"].getDataContext(i);this.render(u,a,t)}},{key:"makeNewTiles",value:function(t,r,n){var a=this,i=e.getNewTileRanges(t,n.interval,r),u=i.map(function(e){return{pixelsPerBase:r,range:new _ContigInterval2["default"](n.contig,e.start,e.stop),buffer:document.createElement("canvas")}});return u.forEach(function(e){return a.renderTile(e)}),this.tileCache=this.tileCache.concat(u),this.tileCache.sort(function(e,t){return _ContigInterval2["default"].compare(e.range,t.range)}),u}},{key:"renderToScreen",value:function(e,t,r){var n=r(1)-r(0),a=this.tileCache.filter(function(e){return Math.abs(e.pixelsPerBase-n)<EPSILON&&t.chrOnContig(e.range.contig)}),i=this.heightForRef(t.contig),u=a.map(function(e){return e.range.interval});t.interval.isCoveredBy(u)||(a=a.concat(this.makeNewTiles(u,n,t)));var l=a.filter(function(e){return t.chrIntersects(e.range)});l.forEach(function(t){var n=Math.round(r(t.range.start())),a=Math.round(r(t.range.stop()+1)),u=a-n;0!==t.buffer.height&&(e.drawImage(t.buffer,0,0,t.buffer.width,t.buffer.height,n,0,u,t.buffer.height),DEBUG_RENDER_TILE_EDGES&&(e.save(),e.strokeStyle="black",_canvasUtils2["default"].drawLine(e,n-.5,0,n-.5,i),_canvasUtils2["default"].drawLine(e,a-.5,0,a-.5,i),e.restore()))})}},{key:"invalidateAll",value:function(){this.tileCache=[]}},{key:"invalidateRange",value:function(e){this.tileCache=this.tileCache.filter(function(t){return!t.range.chrIntersects(e)})}},{key:"heightForRef",value:function(e){throw"Not implemented"}},{key:"render",value:function(e,t,r){throw"Not implemented"}}],[{key:"getNewTileRanges",value:function(e,t,r){var n=Math.ceil(MIN_PX_PER_BUFFER/r),a=Math.floor(t.start/n)*n,i=_underscore2["default"].range(a,t.stop,n).map(function(e){return new _Interval2["default"](e,e+n-1)}).filter(function(t){return!t.isCoveredBy(e)});return _utils2["default"].flatMap(i,function(t){return t.complementIntervals(e)}).filter(function(e){return e.intersects(t)})}}]),e}();module.exports=TiledCanvas;

},{"../ContigInterval":179,"../Interval":182,"../scale":201,"../utils":209,"./canvas-utils":221,"./d3utils":222,"data-canvas":7,"underscore":177}],220:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var _createClass=function(){function e(e,t){for(var a=0;a<t.length;a++){var r=t[a];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,a,r){return a&&e(t.prototype,a),r&&e(t,r),t}}(),_get=function(e,t,a){for(var r=!0;r;){var n=e,i=t,o=a;r=!1,null===n&&(n=Function.prototype);var l=Object.getOwnPropertyDescriptor(n,i);if(void 0!==l){if("value"in l)return l.value;var u=l.get;return void 0===u?void 0:u.call(o)}var s=Object.getPrototypeOf(n);if(null===s)return void 0;e=s,t=i,a=o,r=!0,l=s=void 0}},_react=require("react"),_react2=_interopRequireDefault(_react),_reactDom=require("react-dom"),_reactDom2=_interopRequireDefault(_reactDom),_d3utils=require("./d3utils"),_d3utils2=_interopRequireDefault(_d3utils),_shallowEquals=require("shallow-equals"),_shallowEquals2=_interopRequireDefault(_shallowEquals),_ContigInterval=require("../ContigInterval"),_ContigInterval2=_interopRequireDefault(_ContigInterval),_canvasUtils=require("./canvas-utils"),_canvasUtils2=_interopRequireDefault(_canvasUtils),_dataCanvas=require("data-canvas"),_dataCanvas2=_interopRequireDefault(_dataCanvas),_style=require("../style"),_style2=_interopRequireDefault(_style),VariantTrack=function(e){function t(e){_classCallCheck(this,t),_get(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,e)}return _inherits(t,e),_createClass(t,[{key:"render",value:function(){return _react2["default"].createElement("canvas",{onClick:this.handleClick})}},{key:"componentDidMount",value:function(){var e=this;this.updateVisualization(),this.props.source.on("newdata",function(){e.updateVisualization()})}},{key:"getScale",value:function(){return _d3utils2["default"].getTrackScale(this.props.range,this.props.width)}},{key:"componentDidUpdate",value:function(e,t){(0,_shallowEquals2["default"])(e,this.props)&&(0,_shallowEquals2["default"])(t,this.state)||this.updateVisualization()}},{key:"updateVisualization",value:function(){var e=_reactDom2["default"].findDOMNode(this),t=this.props,a=t.width,r=t.height;if(0!==a){_d3utils2["default"].sizeCanvas(e,a,r);var n=_canvasUtils2["default"].getContext(e),i=_dataCanvas2["default"].getDataContext(n);this.renderScene(i)}}},{key:"renderScene",value:function(e){var t=this.props.range,a=new _ContigInterval2["default"](t.contig,t.start,t.stop),r=this.props.source.getFeaturesInRange(a),n=this.getScale(),i=this.props.height,o=i-_style2["default"].VARIANT_HEIGHT-1;e.clearRect(0,0,e.canvas.width,e.canvas.height),e.reset(),e.save(),e.fillStyle=_style2["default"].VARIANT_FILL,e.strokeStyle=_style2["default"].VARIANT_STROKE,r.forEach(function(t){e.pushObject(t);var a=Math.round(n(t.position)),r=Math.round(n(t.position+1))-1-a;e.fillRect(a-.5,o-.5,r,_style2["default"].VARIANT_HEIGHT),e.strokeRect(a-.5,o-.5,r,_style2["default"].VARIANT_HEIGHT),e.popObject()}),e.restore()}},{key:"handleClick",value:function(e){var t=e.nativeEvent,a=t.offsetX,r=t.offsetY,n=_reactDom2["default"].findDOMNode(this),i=_canvasUtils2["default"].getContext(n),o=new _dataCanvas2["default"].ClickTrackingContext(i,a,r);this.renderScene(o);var l=o.hit&&o.hit[0],u=window.alert||console.log;l&&u(JSON.stringify(l))}}]),t}(_react2["default"].Component);VariantTrack.displayName="variants",module.exports=VariantTrack;

},{"../ContigInterval":179,"../style":208,"./canvas-utils":221,"./d3utils":222,"data-canvas":7,"react":175,"react-dom":23,"shallow-equals":176}],221:[function(require,module,exports){
"use strict";function getContext(t){var e=t,n=e.getContext("2d");return n}function drawLine(t,e,n,o,r){t.beginPath(),t.moveTo(e,n),t.lineTo(o,r),t.stroke()}module.exports={getContext:getContext,drawLine:drawLine};

},{}],222:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}function getTrackScale(e,a){if(!e)return _scale2["default"].linear();var t=e.offsetPx||0;return _scale2["default"].linear().domain([e.start,e.stop+1]).range([-t,a-t])}function formatPrefix(e){var a=0;e&&(0>e&&(e*=-1),a=1+Math.floor(1e-12+Math.log(e)/Math.LN10),a=Math.max(0,Math.min(24,3*Math.floor((a-1)/3))));var t=Math.pow(10,a);return{symbol:formatPrefixes[a/3],scale:function(e){return e/t}}}function formatRange(e){var a=e/1e3,t=formatPrefix(Math.max(1,a)),r=t.symbol+"bp",n=Math.round(t.scale(e)).toLocaleString();return{prefix:n,unit:r}}function sizeCanvas(e,a,t){var r=window.devicePixelRatio;e.width=a*r,e.height=t*r,e.style.width=a+"px",e.style.height=t+"px";var n=e.getContext("2d");null!==n&&n instanceof CanvasRenderingContext2D&&n.scale(r,r)}function findParent(e,a){var t=e;do{if(t.classList.contains(a))return t;t=t.parentElement}while(t);return null}var _scale=require("../scale"),_scale2=_interopRequireDefault(_scale),formatPrefixes=["","k","M","G","T","P","E","Z","Y"];module.exports={formatRange:formatRange,getTrackScale:getTrackScale,sizeCanvas:sizeCanvas,findParent:findParent};

},{"../scale":201}],223:[function(require,module,exports){
"use strict";function pileup(e){for(var r=new Array(e.length),t=[],a=0;a<e.length;a++){for(var n=e[a],i=t.length,g=0;g<t.length;g++)if(!n.intersects(t[g])){i=g;break}r[a]=i,t[i]=n}return r}function addToPileup(e,r){for(var t=-1,a=0;a<r.length;a++){for(var n=r[a],i=!0,g=0;g<n.length;g++)if(n[g].intersects(e)){i=!1;break}if(i){t=a;break}}return-1==t&&(t=r.length,r[t]=[]),r[t].push(e),t}function findMismatches(e,r,t,a){for(var n=[],i=0;i<r.length;i++){var g=t+i,p=e.charAt(i),o=r.charAt(i);p!=o&&"."!=p&&n.push({pos:g,basePair:o,quality:a[i]})}return n}function getArrowIndex(e){var r,t,a=e.cigarOps;if("-"==e.getStrand()){for(r=0;r<a.length;r++)if(t=a[r],"S"!=t.op)return"M"==t.op?r:-1}else for(r=a.length-1;r>=0;r--)if(t=a[r],"S"!=t.op)return"M"==t.op?r:-1;return-1}function getOpInfo(e,r){for(var t=e.cigarOps,a=e.getInterval(),n=a.start(),i=e.getSequence(),g=e.getQualityScores(),p=0,o=n,s=getArrowIndex(e),c=[],l=[],u=0;u<t.length;u++){var h=t[u];if("M"==h.op){var f=r.getRangeAsString({contig:a.contig,start:o,stop:o+h.length-1}),C=i.slice(p,p+h.length);l=l.concat(findMismatches(f,C,o,g))}switch(c.push({op:h.op,length:h.length,pos:o,arrow:null}),h.op){case CigarOp.MATCH:case CigarOp.DELETE:case CigarOp.SKIP:case CigarOp.SEQMATCH:case CigarOp.SEQMISMATCH:o+=h.length}switch(h.op){case CigarOp.MATCH:case CigarOp.INSERT:case CigarOp.SOFTCLIP:case CigarOp.SEQMATCH:case CigarOp.SEQMISMATCH:p+=h.length}}return s>=0&&(c[s].arrow="-"==e.getStrand()?"L":"R"),{ops:c,mismatches:l}}Object.defineProperty(exports,"__esModule",{value:!0});var CigarOp={MATCH:"M",INSERT:"I",DELETE:"D",SKIP:"N",SOFTCLIP:"S",HARDCLIP:"H",PADDING:"P",SEQMATCH:"=",SEQMISMATCH:"X"};module.exports={pileup:pileup,addToPileup:addToPileup,getOpInfo:getOpInfo,CigarOp:CigarOp};

},{}]},{},[200])(200)
});
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
