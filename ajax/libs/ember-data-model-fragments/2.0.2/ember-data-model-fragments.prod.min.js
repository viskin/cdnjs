(function(){"use strict";var ember$lib$main$$default=Ember;var ember$data$lib$main$$default=DS;var ember$data$lib$serializers$json$api$serializer$$default=DS.JSONAPISerializer;var ember$data$lib$serializers$json$serializer$$default=DS.JSONSerializer;var ember$data$lib$system$model$internal$model$$default=DS.InternalModel;var ember$data$lib$system$model$states$$default=DS.RootState;var ember$data$lib$system$model$$default=DS.Model;var ember$data$lib$system$snapshot$$default=DS.Snapshot;var ember$data$lib$system$store$$default=DS.Store;var ember$data$lib$system$transform$$default=DS.Transform;var model$fragments$lib$fragments$states$$get=ember$lib$main$$default.get;var model$fragments$lib$fragments$states$$create=Object.create||ember$lib$main$$default.create;var model$fragments$lib$fragments$states$$didSetProperty=ember$data$lib$system$model$states$$default.loaded.saved.didSetProperty;var model$fragments$lib$fragments$states$$propertyWasReset=ember$data$lib$system$model$states$$default.loaded.updated.uncommitted.propertyWasReset;var model$fragments$lib$fragments$states$$dirtySetup=function(internalModel){var record=internalModel._owner;var key=internalModel._name;if(record){model$fragments$lib$fragments$states$$fragmentDidDirty(record,key,internalModel)}};var model$fragments$lib$fragments$states$$FragmentRootState={isEmpty:false,isLoading:false,isLoaded:false,isDirty:false,isSaving:false,isDeleted:false,isNew:false,isValid:true,didSetProperty:model$fragments$lib$fragments$states$$didSetProperty,propertyWasReset:ember$lib$main$$default.K,becomeDirty:ember$lib$main$$default.K,rolledBack:ember$lib$main$$default.K,empty:{isEmpty:true,loadedData:function(internalModel){internalModel.transitionTo("loaded.created")},pushedData:function(internalModel){internalModel.transitionTo("loaded.saved")}},loaded:{pushedData:function(internalModel){internalModel.transitionTo("saved")},saved:{setup:function(internalModel){var record=internalModel._owner;var key=internalModel._name;if(!record._internalModel._fragments[key]){return}if(!model$fragments$lib$fragments$states$$get(record,key+".hasDirtyAttributes")){model$fragments$lib$fragments$states$$fragmentDidReset(record,key,internalModel)}},pushedData:ember$lib$main$$default.K,didCommit:ember$lib$main$$default.K,becomeDirty:function(internalModel){internalModel.transitionTo("updated")}},created:{isDirty:true,setup:model$fragments$lib$fragments$states$$dirtySetup,didCommit:function(internalModel){internalModel.transitionTo("saved")}},updated:{isDirty:true,setup:model$fragments$lib$fragments$states$$dirtySetup,propertyWasReset:model$fragments$lib$fragments$states$$propertyWasReset,didCommit:function(internalModel){internalModel.transitionTo("saved")},rolledBack:function(internalModel){internalModel.transitionTo("saved")}}}};function model$fragments$lib$fragments$states$$mixin(original,hash){for(var prop in hash){original[prop]=hash[prop]}return original}function model$fragments$lib$fragments$states$$wireState(object,parent,name){object=model$fragments$lib$fragments$states$$mixin(parent?model$fragments$lib$fragments$states$$create(parent):{},object);object.parentState=parent;object.stateName=name;for(var prop in object){if(!object.hasOwnProperty(prop)||prop==="parentState"||prop==="stateName"){continue}if(typeof object[prop]==="object"){object[prop]=model$fragments$lib$fragments$states$$wireState(object[prop],object,name+"."+prop)}}return object}model$fragments$lib$fragments$states$$FragmentRootState=model$fragments$lib$fragments$states$$wireState(model$fragments$lib$fragments$states$$FragmentRootState,null,"root");var model$fragments$lib$fragments$states$$default=model$fragments$lib$fragments$states$$FragmentRootState;function model$fragments$lib$fragments$states$$fragmentDidDirty(record,key,fragment){if(!model$fragments$lib$fragments$states$$get(record,"isDeleted")){record._internalModel._attributes[key]=fragment;record.send("becomeDirty")}}function model$fragments$lib$fragments$states$$fragmentDidReset(record,key){delete record._internalModel._attributes[key];if(!model$fragments$lib$fragments$states$$get(record,"isNew")){record.send("propertyWasReset",key)}}var model$fragments$lib$fragments$array$stateful$$get=ember$lib$main$$default.get;var model$fragments$lib$fragments$array$stateful$$set=ember$lib$main$$default.set;var model$fragments$lib$fragments$array$stateful$$computed=ember$lib$main$$default.computed;var model$fragments$lib$fragments$array$stateful$$copy=ember$lib$main$$default.copy;var model$fragments$lib$fragments$array$stateful$$makeArray=ember$lib$main$$default.makeArray;var model$fragments$lib$fragments$array$stateful$$StatefulArray=ember$lib$main$$default.ArrayProxy.extend(ember$lib$main$$default.Copyable,{owner:null,name:null,init:function(){this._super();this._pendingData=undefined;model$fragments$lib$fragments$array$stateful$$set(this,"_originalState",[])},content:model$fragments$lib$fragments$array$stateful$$computed(function(){return ember$lib$main$$default.A()}),copy:function(){return this.map(model$fragments$lib$fragments$array$stateful$$copy)},setupData:function(data){if(this._pendingData===data){return}this._pendingData=data;var processedData=this._normalizeData(model$fragments$lib$fragments$array$stateful$$makeArray(data));var content=model$fragments$lib$fragments$array$stateful$$get(this,"content");model$fragments$lib$fragments$array$stateful$$set(this,"_originalState",processedData);content.replace(0,model$fragments$lib$fragments$array$stateful$$get(content,"length"),processedData);this._pendingData=undefined},_normalizeData:function(data){return data},_createSnapshot:function(){return this.toArray()},_flushChangedAttributes:function(){},_adapterDidCommit:function(data){if(data){this.setupData(data)}else{model$fragments$lib$fragments$array$stateful$$set(this,"_originalState",this.toArray())}},hasDirtyAttributes:model$fragments$lib$fragments$array$stateful$$computed("[]","_originalState",function(){return ember$lib$main$$default.compare(this.toArray(),model$fragments$lib$fragments$array$stateful$$get(this,"_originalState"))!==0}),rollbackAttributes:function(){this.setObjects(model$fragments$lib$fragments$array$stateful$$get(this,"_originalState"))},serialize:function(){return this.toArray()},arrayContentDidChange:function(){this._super.apply(this,arguments);var record=model$fragments$lib$fragments$array$stateful$$get(this,"owner");var key=model$fragments$lib$fragments$array$stateful$$get(this,"name");if(model$fragments$lib$fragments$array$stateful$$get(this,"hasDirtyAttributes")){model$fragments$lib$fragments$states$$fragmentDidDirty(record,key,this)}else{model$fragments$lib$fragments$states$$fragmentDidReset(record,key)}},toStringExtension:function(){return"owner("+model$fragments$lib$fragments$array$stateful$$get(this,"owner.id")+")"}});var model$fragments$lib$fragments$array$stateful$$default=model$fragments$lib$fragments$array$stateful$$StatefulArray;var model$fragments$lib$fragments$ext$$keys=Object.keys||Ember.keys;var model$fragments$lib$fragments$ext$$create=Object.create||Ember.create;ember$data$lib$system$store$$default.reopen({createFragment:function(modelName,props){var type=this.modelFor(modelName);Ember.assert("The '"+type+"' model must be a subclass of MF.Fragment",model$fragments$lib$fragments$fragment$$default.detect(type));var internalModel=new ember$data$lib$system$model$internal$model$$default(type,null,this,this.container);internalModel.currentState=model$fragments$lib$fragments$states$$default.empty;internalModel._name=null;internalModel._owner=null;internalModel.loadedData();var fragment=internalModel.getRecord();if(props){fragment.setProperties(props)}fragment._isFragment=true;return fragment},serializerFor:function(modelOrClass){var modelName;if(typeof modelOrClass==="string"){modelName=modelOrClass}else{modelName=modelOrClass.modelName}var type=this.modelFactoryFor(modelName);if(type&&model$fragments$lib$fragments$fragment$$default.detect(type)){var fallbacks=["-fragment","-default"];return this.lookupSerializer(modelName,fallbacks)}return this._super(modelOrClass)}});ember$data$lib$system$model$$default.reopen({changedAttributes:function(){var diffData=this._super();var internalModel=model$fragments$lib$fragments$fragment$$internalModelFor(this);model$fragments$lib$fragments$ext$$keys(internalModel._fragments).forEach(function(name){if(name in internalModel._attributes){diffData[name]=true}},this);return diffData}});function model$fragments$lib$fragments$ext$$decorateMethod(obj,name,fn){var originalFn=obj[name];obj[name]=function(){var value=originalFn.apply(this,arguments);return fn.call(this,value,arguments)}}var model$fragments$lib$fragments$ext$$InternalModelPrototype=ember$data$lib$system$model$internal$model$$default.prototype;model$fragments$lib$fragments$ext$$decorateMethod(model$fragments$lib$fragments$ext$$InternalModelPrototype,"createSnapshot",function createFragmentSnapshot(snapshot){var attrs=snapshot._attributes;model$fragments$lib$fragments$ext$$keys(attrs).forEach(function(key){var attr=attrs[key];if(attr&&typeof attr._createSnapshot==="function"){attrs[key]=attr._createSnapshot()}});return snapshot});model$fragments$lib$fragments$ext$$decorateMethod(model$fragments$lib$fragments$ext$$InternalModelPrototype,"rollbackAttributes",function rollbackFragments(){for(var key in this._fragments){if(this._fragments[key]){this._fragments[key].rollbackAttributes()}}});model$fragments$lib$fragments$ext$$decorateMethod(model$fragments$lib$fragments$ext$$InternalModelPrototype,"flushChangedAttributes",function flushChangedAttributesFragments(){var fragment;for(var key in this._fragments){if(fragment=this._fragments[key]){fragment._flushChangedAttributes()}}});model$fragments$lib$fragments$ext$$decorateMethod(model$fragments$lib$fragments$ext$$InternalModelPrototype,"adapterDidCommit",function adapterDidCommitFragments(returnValue,args){var attributes=args[0]&&args[0].attributes||model$fragments$lib$fragments$ext$$create(null);var fragment;for(var key in this._fragments){if(fragment=this._fragments[key]){fragment._adapterDidCommit(attributes[key])}}});ember$data$lib$serializers$json$serializer$$default.reopen({transformFor:function(attributeType){if(attributeType.indexOf("-mf-")===0){return model$fragments$lib$fragments$ext$$getFragmentTransform(this.container,this.store,attributeType)}return this._super.apply(this,arguments)}});function model$fragments$lib$fragments$ext$$getFragmentTransform(container,store,attributeType){var registry=container._registry||container.registry||container;var containerKey="transform:"+attributeType;var match=attributeType.match(/^-mf-(fragment|fragment-array|array)(?:\$([^$]+))?(?:\$(.+))?$/);var transformName=match[1];var transformType=match[2];var polymorphicTypeProp=match[3];if(!registry.has(containerKey)){var transformClass=container.lookupFactory("transform:"+transformName);registry.register(containerKey,transformClass.extend({store:store,type:transformType,polymorphicTypeProp:polymorphicTypeProp}))}return container.lookup(containerKey)}var model$fragments$lib$fragments$fragment$$get=ember$lib$main$$default.get;var model$fragments$lib$fragments$fragment$$create=Object.create||ember$lib$main$$default.create;var model$fragments$lib$fragments$fragment$$copy=ember$lib$main$$default.copy;var model$fragments$lib$fragments$fragment$$Fragment=ember$data$lib$system$model$$default.extend(ember$lib$main$$default.Comparable,ember$lib$main$$default.Copyable,{compare:function(f1,f2){return f1===f2?0:1},copy:function(){var type=this.constructor;var props=model$fragments$lib$fragments$fragment$$create(null);type.eachAttribute(function(name){props[name]=model$fragments$lib$fragments$fragment$$copy(model$fragments$lib$fragments$fragment$$get(this,name))},this);return this.store.createFragment(type.modelName,props)},_flushChangedAttributes:function(){model$fragments$lib$fragments$fragment$$internalModelFor(this).flushChangedAttributes()},_adapterDidCommit:function(data){model$fragments$lib$fragments$fragment$$internalModelFor(this).adapterDidCommit({attributes:data||model$fragments$lib$fragments$fragment$$create(null)})},toStringExtension:function(){return"owner("+model$fragments$lib$fragments$fragment$$get(model$fragments$lib$fragments$fragment$$internalModelFor(this)._owner,"id")+")"}}).reopenClass({fragmentOwnerProperties:ember$lib$main$$default.computed(function(){var props=[];this.eachComputedProperty(function(name,meta){if(meta.isFragmentOwner){props.push(name)}});return props}).readOnly()});function model$fragments$lib$fragments$fragment$$getActualFragmentType(declaredType,options,data){if(!options.polymorphic||!data){return declaredType}var typeKey=options.typeKey||"type";var actualType=data[typeKey];return actualType||declaredType}function model$fragments$lib$fragments$fragment$$internalModelFor(record){var internalModel=record._internalModel;if(!internalModel._fragments){internalModel._fragments=model$fragments$lib$fragments$fragment$$create(null)}return internalModel}function model$fragments$lib$fragments$fragment$$setFragmentOwner(fragment,record,key){var internalModel=model$fragments$lib$fragments$fragment$$internalModelFor(fragment);internalModel._owner=record;internalModel._name=key;model$fragments$lib$fragments$fragment$$get(fragment.constructor,"fragmentOwnerProperties").forEach(function(name){fragment.notifyPropertyChange(name)});return fragment}function model$fragments$lib$fragments$fragment$$setFragmentData(fragment,data){model$fragments$lib$fragments$fragment$$internalModelFor(fragment).setupData({attributes:data})}function model$fragments$lib$fragments$fragment$$createFragment(store,declaredModelName,record,key,options,data){var actualModelName=model$fragments$lib$fragments$fragment$$getActualFragmentType(declaredModelName,options,data);var fragment=store.createFragment(actualModelName);model$fragments$lib$fragments$fragment$$setFragmentOwner(fragment,record,key);model$fragments$lib$fragments$fragment$$setFragmentData(fragment,data);return fragment}function model$fragments$lib$fragments$fragment$$isFragment(obj){return obj&&obj._isFragment}var model$fragments$lib$fragments$fragment$$default=model$fragments$lib$fragments$fragment$$Fragment;function model$fragments$lib$util$instance$of$type$$isInstanceOfType(type,obj){if(obj instanceof type){return true}else if(Ember.MODEL_FACTORY_INJECTIONS){return obj instanceof type.superclass}return false}var model$fragments$lib$util$instance$of$type$$default=model$fragments$lib$util$instance$of$type$$isInstanceOfType;function model$fragments$lib$util$map$$map(obj,callback,thisArg){return obj.map?obj.map(callback,thisArg):model$fragments$lib$util$map$$mapPolyfill.call(obj,callback,thisArg)}var model$fragments$lib$util$map$$default=model$fragments$lib$util$map$$map;function model$fragments$lib$util$map$$mapPolyfill(fun){if(this===void 0||this===null||typeof fun!=="function"){throw new TypeError}var t=Object(this);var len=t.length>>>0;var res=new Array(len);var thisp=arguments[1];for(var i=0;i<len;i++){if(i in t){res[i]=fun.call(thisp,t[i],i,t)}}return res}var model$fragments$lib$fragments$array$fragment$$get=ember$lib$main$$default.get;var model$fragments$lib$fragments$array$fragment$$setProperties=ember$lib$main$$default.setProperties;var model$fragments$lib$fragments$array$fragment$$computed=ember$lib$main$$default.computed;var model$fragments$lib$fragments$array$fragment$$typeOf=ember$lib$main$$default.typeOf;function model$fragments$lib$fragments$array$fragment$$normalizeFragmentArray(array,content,objs,canonical){var record=model$fragments$lib$fragments$array$fragment$$get(array,"owner");var store=model$fragments$lib$fragments$array$fragment$$get(record,"store");var declaredModelName=model$fragments$lib$fragments$array$fragment$$get(array,"type");var options=model$fragments$lib$fragments$array$fragment$$get(array,"options");var key=model$fragments$lib$fragments$array$fragment$$get(array,"name");var fragment;return model$fragments$lib$util$map$$default(objs,function(data,index){if(model$fragments$lib$fragments$fragment$$isFragment(data)){fragment=data;var owner=model$fragments$lib$fragments$fragment$$internalModelFor(fragment)._owner;if(!owner){model$fragments$lib$fragments$fragment$$setFragmentOwner(fragment,record,key)}}else{fragment=content[index];if(fragment){if(canonical){model$fragments$lib$fragments$fragment$$setFragmentData(fragment,data)}else{model$fragments$lib$fragments$array$fragment$$setProperties(fragment,data)}}else{fragment=model$fragments$lib$fragments$fragment$$createFragment(store,declaredModelName,record,key,options,data)}}return fragment})}var model$fragments$lib$fragments$array$fragment$$FragmentArray=model$fragments$lib$fragments$array$stateful$$default.extend({type:null,options:null,_normalizeData:function(data){var content=model$fragments$lib$fragments$array$fragment$$get(this,"content");return model$fragments$lib$fragments$array$fragment$$normalizeFragmentArray(this,content,data,true)},_createSnapshot:function(){return this.map(function(fragment){return fragment._createSnapshot()})},_flushChangedAttributes:function(){this.map(function(fragment){fragment._flushChangedAttributes()})},_adapterDidCommit:function(data){this._super(data);this.forEach(function(fragment,index){fragment._adapterDidCommit(data&&data[index])})},hasDirtyAttributes:model$fragments$lib$fragments$array$fragment$$computed("@each.hasDirtyAttributes","_originalState",function(){return this._super()||this.isAny("hasDirtyAttributes")}),rollbackAttributes:function(){this._super();this.invoke("rollbackAttributes")},serialize:function(){return this.invoke("serialize")},replaceContent:function(index,amount,objs){var content=model$fragments$lib$fragments$array$fragment$$get(this,"content");var replacedContent=content.slice(index,index+amount);var fragments=model$fragments$lib$fragments$array$fragment$$normalizeFragmentArray(this,replacedContent,objs);return content.replace(index,amount,fragments)},addFragment:function(fragment){return this.addObject(fragment)},removeFragment:function(fragment){return this.removeObject(fragment)},createFragment:function(props){var record=model$fragments$lib$fragments$array$fragment$$get(this,"owner");var store=model$fragments$lib$fragments$array$fragment$$get(record,"store");var type=model$fragments$lib$fragments$array$fragment$$get(this,"type");var fragment=store.createFragment(type,props);return this.pushObject(fragment)}});var model$fragments$lib$fragments$array$fragment$$default=model$fragments$lib$fragments$array$fragment$$FragmentArray;var model$fragments$lib$util$ember$new$computed$$Ember=window.Ember;var model$fragments$lib$util$ember$new$computed$$computed=model$fragments$lib$util$ember$new$computed$$Ember.computed;var model$fragments$lib$util$ember$new$computed$$supportsSetterGetter;try{model$fragments$lib$util$ember$new$computed$$Ember.computed({set:function(){},get:function(){}});model$fragments$lib$util$ember$new$computed$$supportsSetterGetter=true}catch(e){model$fragments$lib$util$ember$new$computed$$supportsSetterGetter=false}var model$fragments$lib$util$ember$new$computed$$default=function(){var polyfillArguments=[];var config=arguments[arguments.length-1];if(typeof config==="function"||model$fragments$lib$util$ember$new$computed$$supportsSetterGetter){return model$fragments$lib$util$ember$new$computed$$computed.apply(this,arguments)}for(var i=0,l=arguments.length-1;i<l;i++){polyfillArguments.push(arguments[i])}var func;if(config.set){func=function(key,value){if(arguments.length>1){return config.set.call(this,key,value)}else{return config.get.call(this,key)}}}else{func=function(key){return config.get.call(this,key)}}polyfillArguments.push(func);return model$fragments$lib$util$ember$new$computed$$computed.apply(this,polyfillArguments)};var model$fragments$lib$fragments$attributes$$get=ember$lib$main$$default.get;var model$fragments$lib$fragments$attributes$$setProperties=ember$lib$main$$default.setProperties;var model$fragments$lib$fragments$attributes$$isArray=ember$lib$main$$default.isArray;var model$fragments$lib$fragments$attributes$$typeOf=ember$lib$main$$default.typeOf;var model$fragments$lib$fragments$attributes$$copy=ember$lib$main$$default.copy;var model$fragments$lib$fragments$attributes$$computed=ember$lib$main$$default.computed;function model$fragments$lib$fragments$attributes$$metaTypeFor(name,type,options){var metaType="-mf-"+name;if(type){metaType+="$"+type}if(options&&options.polymorphic){metaType+="$"+(options.typeKey||"type")}return metaType}function model$fragments$lib$fragments$attributes$$fragment(declaredModelName,options){options=options||{};var metaType=model$fragments$lib$fragments$attributes$$metaTypeFor("fragment",declaredModelName,options);function setupFragment(store,record,key){var internalModel=model$fragments$lib$fragments$fragment$$internalModelFor(record);var data=model$fragments$lib$fragments$attributes$$getWithDefault(internalModel,key,options,"object");var fragment=internalModel._fragments[key];if(!fragment&&model$fragments$lib$fragments$fragment$$isFragment(data)){fragment=data}else if(data&&data!==fragment){if(fragment){model$fragments$lib$fragments$fragment$$setFragmentData(fragment,data)}else{fragment=model$fragments$lib$fragments$fragment$$createFragment(store,declaredModelName,record,key,options,data)}internalModel._data[key]=fragment}else{fragment=data}return fragment}function setFragmentValue(record,key,fragment,value){var store=record.store;var internalModel=model$fragments$lib$fragments$fragment$$internalModelFor(record);if(!value){fragment=null}else if(model$fragments$lib$fragments$fragment$$isFragment(value)){fragment=model$fragments$lib$fragments$fragment$$setFragmentOwner(value,record,key)}else if(!fragment){fragment=model$fragments$lib$fragments$fragment$$createFragment(store,declaredModelName,record,key,options,value)}else{model$fragments$lib$fragments$attributes$$setProperties(fragment,value);return fragment}if(internalModel._data[key]!==fragment){model$fragments$lib$fragments$states$$fragmentDidDirty(record,key,fragment)}else{model$fragments$lib$fragments$states$$fragmentDidReset(record,key)}return fragment}return model$fragments$lib$fragments$attributes$$fragmentProperty(metaType,options,setupFragment,setFragmentValue)}function model$fragments$lib$fragments$attributes$$fragmentArray(modelName,options){options||(options={});var metaType=model$fragments$lib$fragments$attributes$$metaTypeFor("fragment-array",modelName,options);return model$fragments$lib$fragments$attributes$$fragmentArrayProperty(metaType,options,function createFragmentArray(record,key){return model$fragments$lib$fragments$array$fragment$$default.create({type:modelName,options:options,name:key,owner:record})})}function model$fragments$lib$fragments$attributes$$array(type,options){if(typeof type==="object"){options=type;type=undefined}else{options||(options={})}var metaType=model$fragments$lib$fragments$attributes$$metaTypeFor("array",type);return model$fragments$lib$fragments$attributes$$fragmentArrayProperty(metaType,options,function createStatefulArray(record,key){return model$fragments$lib$fragments$array$stateful$$default.create({options:options,name:key,owner:record})})}function model$fragments$lib$fragments$attributes$$fragmentProperty(type,options,setupFragment,setFragmentValue){options=options||{};var meta={type:type,isAttribute:true,isFragment:true,options:options};return model$fragments$lib$util$ember$new$computed$$default({get:function(key){var internalModel=model$fragments$lib$fragments$fragment$$internalModelFor(this);var fragment=setupFragment(this.store,this,key);return internalModel._fragments[key]=fragment},set:function(key,value){var internalModel=model$fragments$lib$fragments$fragment$$internalModelFor(this);var fragment=setupFragment(this.store,this,key);fragment=setFragmentValue(this,key,fragment,value);return internalModel._fragments[key]=fragment}}).meta(meta)}function model$fragments$lib$fragments$attributes$$fragmentArrayProperty(metaType,options,createArray){function setupFragmentArray(store,record,key){var internalModel=model$fragments$lib$fragments$fragment$$internalModelFor(record);var data=model$fragments$lib$fragments$attributes$$getWithDefault(internalModel,key,options,"array");var fragments=internalModel._fragments[key]||null;if(data instanceof model$fragments$lib$fragments$array$stateful$$default&&!fragments){fragments=data}else if(data&&data!==fragments){fragments||(fragments=createArray(record,key));internalModel._data[key]=fragments;fragments.setupData(data)}else{fragments=data}return fragments}function setFragmentValue(record,key,fragments,value){var internalModel=model$fragments$lib$fragments$fragment$$internalModelFor(record);if(model$fragments$lib$fragments$attributes$$isArray(value)){fragments||(fragments=createArray(record,key));fragments.setObjects(value)}else if(value===null){fragments=null}else{}if(internalModel._data[key]!==fragments||model$fragments$lib$fragments$attributes$$get(fragments,"hasDirtyAttributes")){model$fragments$lib$fragments$states$$fragmentDidDirty(record,key,fragments)}else{model$fragments$lib$fragments$states$$fragmentDidReset(record,key)}return fragments}return model$fragments$lib$fragments$attributes$$fragmentProperty(metaType,options,setupFragmentArray,setFragmentValue)}function model$fragments$lib$fragments$attributes$$fragmentOwner(){return model$fragments$lib$fragments$attributes$$computed(function(){return model$fragments$lib$fragments$fragment$$internalModelFor(this)._owner}).meta({isFragmentOwner:true}).readOnly()}function model$fragments$lib$fragments$attributes$$getDefaultValue(record,options,type){var value;if(typeof options.defaultValue==="function"){value=options.defaultValue()}else if("defaultValue"in options){value=options.defaultValue}else if(type==="array"){value=[]}else{return null}return model$fragments$lib$fragments$attributes$$copy(value,true)}function model$fragments$lib$fragments$attributes$$getWithDefault(internalModel,key,options,type){if(key in internalModel._data){return internalModel._data[key]}else{return model$fragments$lib$fragments$attributes$$getDefaultValue(internalModel,options,type)}}var model$fragments$lib$fragments$transforms$array$$get=ember$lib$main$$default.get;var model$fragments$lib$fragments$transforms$array$$makeArray=ember$lib$main$$default.makeArray;var model$fragments$lib$fragments$transforms$array$$computed=ember$lib$main$$default.computed;var model$fragments$lib$fragments$transforms$array$$ArrayTransform=ember$data$lib$system$transform$$default.extend({store:null,type:null,deserialize:function deserializeArray(data){if(data==null){return null}var transform=model$fragments$lib$fragments$transforms$array$$get(this,"transform");data=model$fragments$lib$fragments$transforms$array$$makeArray(data);if(!transform){return data}return model$fragments$lib$util$map$$default(data,transform.deserialize,transform)},serialize:function serializeArray(array){if(array==null){return null}var transform=model$fragments$lib$fragments$transforms$array$$get(this,"transform");array=array.toArray?array.toArray():array;if(!transform){return array}return model$fragments$lib$util$map$$default(array,transform.serialize,transform)},transform:model$fragments$lib$fragments$transforms$array$$computed("type",function(){var attributeType=this.get("type");if(!attributeType){return null}var transform=model$fragments$lib$fragments$transforms$array$$get(this,"store").container.lookup("transform:"+attributeType);return transform})});var model$fragments$lib$fragments$transforms$array$$default=model$fragments$lib$fragments$transforms$array$$ArrayTransform;var model$fragments$lib$fragments$transforms$fragment$$get=ember$lib$main$$default.get;var model$fragments$lib$fragments$transforms$fragment$$FragmentTransform=ember$data$lib$system$transform$$default.extend({store:null,type:null,polymorphicTypeProp:null,deserialize:function deserializeFragment(data){if(data==null){return null}return this.deserializeSingle(data)},serialize:function serializeFragment(snapshot){if(!snapshot){return null}var store=this.store;var serializer=store.serializerFor(snapshot.modelName);return serializer.serialize(snapshot)},modelNameFor:function modelNameFor(data){var modelName=model$fragments$lib$fragments$transforms$fragment$$get(this,"type");var polymorphicTypeProp=model$fragments$lib$fragments$transforms$fragment$$get(this,"polymorphicTypeProp");if(data&&polymorphicTypeProp&&data[polymorphicTypeProp]){modelName=data[polymorphicTypeProp]}return modelName},deserializeSingle:function deserializeSingle(data){var store=this.store;var modelName=this.modelNameFor(data);var serializer=store.serializerFor(modelName);var typeClass=store.modelFor(modelName);var serialized=serializer.normalize(typeClass,data);return model$fragments$lib$fragments$transforms$fragment$$get(serialized,"data.attributes")}});var model$fragments$lib$fragments$transforms$fragment$$default=model$fragments$lib$fragments$transforms$fragment$$FragmentTransform;var model$fragments$lib$fragments$transforms$fragment$array$$FragmentArrayTransform=model$fragments$lib$fragments$transforms$fragment$$default.extend({deserialize:function deserializeFragmentArray(data){if(data==null){return null}return model$fragments$lib$util$map$$default(data,function(datum){return this.deserializeSingle(datum)},this)},serialize:function serializeFragmentArray(snapshots){if(!snapshots){return null}var store=this.store;return model$fragments$lib$util$map$$default(snapshots,function(snapshot){var serializer=store.serializerFor(snapshot.modelName);return serializer.serialize(snapshot)})}});var model$fragments$lib$fragments$transforms$fragment$array$$default=model$fragments$lib$fragments$transforms$fragment$array$$FragmentArrayTransform;var model$fragments$lib$initializers$$initializers=[{name:"fragmentTransform",before:"store",initialize:function(container,application){if(!application){application=container}application.register("transform:fragment",model$fragments$lib$fragments$transforms$fragment$$default);application.register("transform:fragment-array",model$fragments$lib$fragments$transforms$fragment$array$$default);application.register("transform:array",model$fragments$lib$fragments$transforms$array$$default)}}];var model$fragments$lib$initializers$$default=model$fragments$lib$initializers$$initializers;var model$fragments$lib$main$$MF=ember$lib$main$$default.Namespace.create({VERSION:"2.0.2",Fragment:model$fragments$lib$fragments$fragment$$default,FragmentArray:model$fragments$lib$fragments$array$fragment$$default,FragmentTransform:model$fragments$lib$fragments$transforms$fragment$$default,FragmentArrayTransform:model$fragments$lib$fragments$transforms$fragment$array$$default,ArrayTransform:model$fragments$lib$fragments$transforms$array$$default,fragment:model$fragments$lib$fragments$attributes$$fragment,fragmentArray:model$fragments$lib$fragments$attributes$$fragmentArray,array:model$fragments$lib$fragments$attributes$$array,fragmentOwner:model$fragments$lib$fragments$attributes$$fragmentOwner});ember$lib$main$$default.onLoad("Ember.Application",function(Application){model$fragments$lib$initializers$$default.forEach(Application.initializer,Application)});if(ember$lib$main$$default.libraries){ember$lib$main$$default.libraries.register("Model Fragments",model$fragments$lib$main$$MF.VERSION)}ember$lib$main$$default.lookup.MF=model$fragments$lib$main$$MF;var model$fragments$lib$main$$default=model$fragments$lib$main$$MF}).call(this);
