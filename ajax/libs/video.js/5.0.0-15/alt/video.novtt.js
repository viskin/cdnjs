/**
 * @license
 * Video.js 5.0.0-15 <http://videojs.com/>
 * Copyright Brightcove, Inc. <https://www.brightcove.com/>
 * Available under Apache License Version 2.0
 * <https://github.com/videojs/video.js/blob/master/LICENSE>
 *
 * Includes vtt.js <https://github.com/mozilla/vtt.js>
 * Available under Apache License Version 2.0
 * <https://github.com/mozilla/vtt.js/blob/master/LICENSE>
 */
(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.videojs = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
(function (global){
var topLevel = typeof global !== 'undefined' ? global :
    typeof window !== 'undefined' ? window : {}
var minDoc = _dereq_('min-document');

if (typeof document !== 'undefined') {
    module.exports = document;
} else {
    var doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'];

    if (!doccy) {
        doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'] = minDoc;
    }

    module.exports = doccy;
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"min-document":3}],2:[function(_dereq_,module,exports){
(function (global){
if (typeof window !== "undefined") {
    module.exports = window;
} else if (typeof global !== "undefined") {
    module.exports = global;
} else if (typeof self !== "undefined"){
    module.exports = self;
} else {
    module.exports = {};
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],3:[function(_dereq_,module,exports){

},{}],4:[function(_dereq_,module,exports){
module.exports = SafeParseTuple

function SafeParseTuple(obj, reviver) {
    var json
    var error = null

    try {
        json = JSON.parse(obj, reviver)
    } catch (err) {
        error = err
    }

    return [error, json]
}

},{}],5:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _Button2 = _dereq_('./button');

var _Button3 = _interopRequireWildcard(_Button2);

/* Big Play Button
================================================================================ */
/**
 * Initial play button. Shows before the video has played. The hiding of the
 * big play button is done via CSS and player states.
 * @param {Player|Object} player
 * @param {Object=} options
 * @class
 * @constructor
 */

var BigPlayButton = (function (_Button) {
  function BigPlayButton() {
    _classCallCheck(this, BigPlayButton);

    if (_Button != null) {
      _Button.apply(this, arguments);
    }
  }

  _inherits(BigPlayButton, _Button);

  _createClass(BigPlayButton, [{
    key: 'createEl',
    value: function createEl() {
      return _get(Object.getPrototypeOf(BigPlayButton.prototype), 'createEl', this).call(this, 'div', {
        className: 'vjs-big-play-button',
        innerHTML: '<span aria-hidden="true"></span>',
        'aria-label': 'play video'
      });
    }
  }, {
    key: 'handleClick',
    value: function handleClick() {
      this.player_.play();
    }
  }]);

  return BigPlayButton;
})(_Button3['default']);

_Button3['default'].registerComponent('BigPlayButton', BigPlayButton);
exports['default'] = BigPlayButton;
module.exports = exports['default'];

},{"./button":6}],6:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _Component2 = _dereq_('./component');

var _Component3 = _interopRequireWildcard(_Component2);

var _import = _dereq_('./lib');

var Lib = _interopRequireWildcard(_import);

var _import2 = _dereq_('./events');

var Events = _interopRequireWildcard(_import2);

var _document = _dereq_('global/document');

var _document2 = _interopRequireWildcard(_document);

/* Button - Base class for all buttons
================================================================================ */
/**
 * Base class for all buttons
 * @param {Player|Object} player
 * @param {Object=} options
 * @class
 * @constructor
 */

var Button = (function (_Component) {
  function Button(player, options) {
    _classCallCheck(this, Button);

    _get(Object.getPrototypeOf(Button.prototype), 'constructor', this).call(this, player, options);

    this.emitTapEvents();

    this.on('tap', this.handleClick);
    this.on('click', this.handleClick);
    this.on('focus', this.handleFocus);
    this.on('blur', this.handleBlur);
  }

  _inherits(Button, _Component);

  _createClass(Button, [{
    key: 'createEl',
    value: function createEl(type, props) {
      // Add standard Aria and Tabindex info
      props = Lib.obj.merge({
        className: this.buildCSSClass(),
        role: 'button',
        'aria-live': 'polite', // let the screen reader user know that the text of the button may change
        tabIndex: 0
      }, props);

      var el = _get(Object.getPrototypeOf(Button.prototype), 'createEl', this).call(this, type, props);

      // if innerHTML hasn't been overridden (bigPlayButton), add content elements
      if (!props.innerHTML) {
        this.contentEl_ = Lib.createEl('div', {
          className: 'vjs-control-content'
        });

        this.controlText_ = Lib.createEl('span', {
          className: 'vjs-control-text',
          innerHTML: this.localize(this.buttonText) || 'Need Text'
        });

        this.contentEl_.appendChild(this.controlText_);
        el.appendChild(this.contentEl_);
      }

      return el;
    }
  }, {
    key: 'buildCSSClass',
    value: function buildCSSClass() {
      return 'vjs-control vjs-button ' + _get(Object.getPrototypeOf(Button.prototype), 'buildCSSClass', this).call(this);
    }
  }, {
    key: 'handleClick',

    // Click - Override with specific functionality for button
    value: function handleClick() {}
  }, {
    key: 'handleFocus',

    // Focus - Add keyboard functionality to element
    value: function handleFocus() {
      Events.on(_document2['default'], 'keydown', Lib.bind(this, this.handleKeyPress));
    }
  }, {
    key: 'handleKeyPress',

    // KeyPress (document level) - Trigger click when keys are pressed
    value: function handleKeyPress(event) {
      // Check for space bar (32) or enter (13) keys
      if (event.which === 32 || event.which === 13) {
        event.preventDefault();
        this.handleClick();
      }
    }
  }, {
    key: 'handleBlur',

    // Blur - Remove keyboard triggers
    value: function handleBlur() {
      Events.off(_document2['default'], 'keydown', Lib.bind(this, this.handleKeyPress));
    }
  }]);

  return Button;
})(_Component3['default']);

_Component3['default'].registerComponent('Button', Button);
exports['default'] = Button;
module.exports = exports['default'];

},{"./component":7,"./events":43,"./lib":46,"global/document":1}],7:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

Object.defineProperty(exports, '__esModule', {
  value: true
});
/**
 * @fileoverview Player Component - Base class for all UI objects
 *
 */

var _import = _dereq_('./lib.js');

var Lib = _interopRequireWildcard(_import);

var _import2 = _dereq_('./util.js');

var VjsUtil = _interopRequireWildcard(_import2);

var _import3 = _dereq_('./events.js');

var Events = _interopRequireWildcard(_import3);

var _window = _dereq_('global/window');

var _window2 = _interopRequireWildcard(_window);

/**
 * Base UI Component class
 *
 * Components are embeddable UI objects that are represented by both a
 * javascript object and an element in the DOM. They can be children of other
 * components, and can have many children themselves.
 *
 *     // adding a button to the player
 *     var button = player.addChild('button');
 *     button.el(); // -> button element
 *
 *     <div class="video-js">
 *       <div class="vjs-button">Button</div>
 *     </div>
 *
 * Components are also event emitters.
 *
 *     button.on('click', function(){
 *       console.log('Button Clicked!');
 *     });
 *
 *     button.trigger('customevent');
 *
 * @param {Object} player  Main Player
 * @param {Object=} options
 * @class
 * @constructor
 */

var Component = (function () {
  function Component(player, options, ready) {
    _classCallCheck(this, Component);

    // The component might be the player itself and we can't pass `this` to super
    if (!player && this.play) {
      this.player_ = player = this; // eslint-disable-line
    } else {
      this.player_ = player;
    }

    // Make a copy of prototype.options_ to protect against overriding global defaults
    this.options_ = Lib.obj.copy(this.options_);

    // Updated options with supplied options
    options = this.options(options);

    // Get ID from options or options element if one is supplied
    this.id_ = options.id || options.el && options.el.id;

    // If there was no ID from the options, generate one
    if (!this.id_) {
      // Don't require the player ID function in the case of mock players
      var id = player && player.id && player.id() || 'no_player';
      this.id_ = '' + id + '_component_' + Lib.guid++;
    }

    this.name_ = options.name || null;

    // Create element if one wasn't provided in options
    if (options.el) {
      this.el_ = options.el;
    } else if (options.createEl !== false) {
      this.el_ = this.createEl();
    }

    this.children_ = [];
    this.childIndex_ = {};
    this.childNameIndex_ = {};

    // Add any child components in options
    if (options.initChildren !== false) {
      this.initChildren();
    }

    this.ready(ready);
    // Don't want to trigger ready here or it will before init is actually
    // finished for all children that run this constructor

    if (options.reportTouchActivity !== false) {
      this.enableTouchActivity();
    }
  }

  _createClass(Component, [{
    key: 'init',

    // Temp for ES6 class transition, remove before 5.0
    value: function init() {
      // console.log('init called on Component');
      Component.apply(this, arguments);
    }
  }, {
    key: 'dispose',

    /**
     * Dispose of the component and all child components
     */
    value: function dispose() {
      this.trigger({ type: 'dispose', bubbles: false });

      // Dispose all children.
      if (this.children_) {
        for (var i = this.children_.length - 1; i >= 0; i--) {
          if (this.children_[i].dispose) {
            this.children_[i].dispose();
          }
        }
      }

      // Delete child references
      this.children_ = null;
      this.childIndex_ = null;
      this.childNameIndex_ = null;

      // Remove all event listeners.
      this.off();

      // Remove element from DOM
      if (this.el_.parentNode) {
        this.el_.parentNode.removeChild(this.el_);
      }

      Lib.removeData(this.el_);
      this.el_ = null;
    }
  }, {
    key: 'player',

    /**
     * Return the component's player
     *
     * @return {Player}
     */
    value: function player() {
      return this.player_;
    }
  }, {
    key: 'options',

    /**
     * Deep merge of options objects
     *
     * Whenever a property is an object on both options objects
     * the two properties will be merged using Lib.obj.deepMerge.
     *
     * This is used for merging options for child components. We
     * want it to be easy to override individual options on a child
     * component without having to rewrite all the other default options.
     *
     *     Parent.prototype.options_ = {
     *       children: {
     *         'childOne': { 'foo': 'bar', 'asdf': 'fdsa' },
     *         'childTwo': {},
     *         'childThree': {}
     *       }
     *     }
     *     newOptions = {
     *       children: {
     *         'childOne': { 'foo': 'baz', 'abc': '123' }
     *         'childTwo': null,
     *         'childFour': {}
     *       }
     *     }
     *
     *     this.options(newOptions);
     *
     * RESULT
     *
     *     {
     *       children: {
     *         'childOne': { 'foo': 'baz', 'asdf': 'fdsa', 'abc': '123' },
     *         'childTwo': null, // Disabled. Won't be initialized.
     *         'childThree': {},
     *         'childFour': {}
     *       }
     *     }
     *
     * @param  {Object} obj Object of new option values
     * @return {Object}     A NEW object of this.options_ and obj merged
     */
    value: function options(obj) {
      if (!obj) {
        return this.options_;
      }

      this.options_ = VjsUtil.mergeOptions(this.options_, obj);
      return this.options_;
    }
  }, {
    key: 'el',

    /**
     * Get the component's DOM element
     *
     *     var domEl = myComponent.el();
     *
     * @return {Element}
     */
    value: function el() {
      return this.el_;
    }
  }, {
    key: 'createEl',

    /**
     * Create the component's DOM element
     *
     * @param  {String=} tagName  Element's node type. e.g. 'div'
     * @param  {Object=} attributes An object of element attributes that should be set on the element
     * @return {Element}
     */
    value: function createEl(tagName, attributes) {
      return Lib.createEl(tagName, attributes);
    }
  }, {
    key: 'localize',
    value: function localize(string) {
      var lang = this.player_.language();
      var languages = this.player_.languages();

      if (languages && languages[lang] && languages[lang][string]) {
        return languages[lang][string];
      }

      return string;
    }
  }, {
    key: 'contentEl',

    /**
     * Return the component's DOM element where children are inserted.
     * Will either be the same as el() or a new element defined in createEl().
     *
     * @return {Element}
     */
    value: function contentEl() {
      return this.contentEl_ || this.el_;
    }
  }, {
    key: 'id',

    /**
     * Get the component's ID
     *
     *     var id = myComponent.id();
     *
     * @return {String}
     */
    value: function id() {
      return this.id_;
    }
  }, {
    key: 'name',

    /**
     * Get the component's name. The name is often used to reference the component.
     *
     *     var name = myComponent.name();
     *
     * @return {String}
     */
    value: function name() {
      return this.name_;
    }
  }, {
    key: 'children',

    /**
     * Get an array of all child components
     *
     *     var kids = myComponent.children();
     *
     * @return {Array} The children
     */
    value: function children() {
      return this.children_;
    }
  }, {
    key: 'getChildById',

    /**
     * Returns a child component with the provided ID
     *
     * @return {Component}
     */
    value: function getChildById(id) {
      return this.childIndex_[id];
    }
  }, {
    key: 'getChild',

    /**
     * Returns a child component with the provided name
     *
     * @return {Component}
     */
    value: function getChild(name) {
      return this.childNameIndex_[name];
    }
  }, {
    key: 'addChild',

    /**
     * Adds a child component inside this component
     *
     *     myComponent.el();
     *     // -> <div class='my-component'></div>
     *     myComponent.children();
     *     // [empty array]
     *
     *     var myButton = myComponent.addChild('MyButton');
     *     // -> <div class='my-component'><div class="my-button">myButton<div></div>
     *     // -> myButton === myComonent.children()[0];
     *
     * Pass in options for child constructors and options for children of the child
     *
     *     var myButton = myComponent.addChild('MyButton', {
     *       text: 'Press Me',
     *       children: {
     *         buttonChildExample: {
     *           buttonChildOption: true
     *         }
     *       }
     *     });
     *
     * @param {String|Component} child The class name or instance of a child to add
     * @param {Object=} options Options, including options to be passed to children of the child.
     * @return {Component} The child component (created by this process if a string was used)
     * @suppress {accessControls|checkRegExp|checkTypes|checkVars|const|constantProperty|deprecated|duplicate|es5Strict|fileoverviewTags|globalThis|invalidCasts|missingProperties|nonStandardJsDocs|strictModuleDepCheck|undefinedNames|undefinedVars|unknownDefines|uselessCode|visibility}
     */
    value: function addChild(child) {
      var options = arguments[1] === undefined ? {} : arguments[1];

      var component = undefined;
      var componentName = undefined;

      // If child is a string, create nt with options
      if (typeof child === 'string') {
        componentName = child;

        // Options can also be specified as a boolean, so convert to an empty object if false.
        if (!options) {
          options = {};
        }

        // Same as above, but true is deprecated so show a warning.
        if (options === true) {
          Lib.log.warn('Initializing a child component with `true` is deprecated. Children should be defined in an array when possible, but if necessary use an object instead of `true`.');
          options = {};
        }

        // If no componentClass in options, assume componentClass is the name lowercased
        // (e.g. playButton)
        var componentClassName = options.componentClass || Lib.capitalize(componentName);

        // Set name through options
        options.name = componentName;

        // Create a new object & element for this controls set
        // If there's no .player_, this is a player
        var ComponentClass = Component.getComponent(componentClassName);

        component = new ComponentClass(this.player_ || this, options);

        // child is a component instance
      } else {
        component = child;
      }

      this.children_.push(component);

      if (typeof component.id === 'function') {
        this.childIndex_[component.id()] = component;
      }

      // If a name wasn't used to create the component, check if we can use the
      // name function of the component
      componentName = componentName || component.name && component.name();

      if (componentName) {
        this.childNameIndex_[componentName] = component;
      }

      // Add the UI object's element to the container div (box)
      // Having an element is not required
      if (typeof component.el === 'function' && component.el()) {
        this.contentEl().appendChild(component.el());
      }

      // Return so it can stored on parent object if desired.
      return component;
    }
  }, {
    key: 'removeChild',

    /**
     * Remove a child component from this component's list of children, and the
     * child component's element from this component's element
     *
     * @param  {Component} component Component to remove
     */
    value: function removeChild(component) {
      if (typeof component === 'string') {
        component = this.getChild(component);
      }

      if (!component || !this.children_) {
        return;
      }

      var childFound = false;

      for (var i = this.children_.length - 1; i >= 0; i--) {
        if (this.children_[i] === component) {
          childFound = true;
          this.children_.splice(i, 1);
          break;
        }
      }

      if (!childFound) {
        return;
      }

      this.childIndex_[component.id()] = null;
      this.childNameIndex_[component.name()] = null;

      var compEl = component.el();

      if (compEl && compEl.parentNode === this.contentEl()) {
        this.contentEl().removeChild(component.el());
      }
    }
  }, {
    key: 'initChildren',

    /**
     * Add and initialize default child components from options
     *
     *     // when an instance of MyComponent is created, all children in options
     *     // will be added to the instance by their name strings and options
     *     MyComponent.prototype.options_.children = {
     *       myChildComponent: {
     *         myChildOption: true
     *       }
     *     }
     *
     *     // Or when creating the component
     *     var myComp = new MyComponent(player, {
     *       children: {
     *         myChildComponent: {
     *           myChildOption: true
     *         }
     *       }
     *     });
     *
     * The children option can also be an Array of child names or
     * child options objects (that also include a 'name' key).
     *
     *     var myComp = new MyComponent(player, {
     *       children: [
     *         'button',
     *         {
     *           name: 'button',
     *           someOtherOption: true
     *         }
     *       ]
     *     });
     *
     */
    value: function initChildren() {
      var _this = this;

      var children = this.options_.children;

      if (children) {
        (function () {
          // `this` is `parent`
          var parentOptions = _this.options();
          var handleAdd = function handleAdd(name, opts) {
            // Allow options for children to be set at the parent options
            // e.g. videojs(id, { controlBar: false });
            // instead of videojs(id, { children: { controlBar: false });
            if (parentOptions[name] !== undefined) {
              opts = parentOptions[name];
            }

            // Allow for disabling default components
            // e.g. options['children']['posterImage'] = false
            if (opts === false) {
              return;
            }

            // Create and add the child component.
            // Add a direct reference to the child by name on the parent instance.
            // If two of the same component are used, different names should be supplied
            // for each
            _this[name] = _this.addChild(name, opts);
          };

          // Allow for an array of children details to passed in the options
          if (Lib.obj.isArray(children)) {
            for (var i = 0; i < children.length; i++) {
              var child = children[i];
              var _name = undefined;
              var opts = undefined;

              if (typeof child === 'string') {
                // ['myComponent']
                _name = child;
                opts = {};
              } else {
                // [{ name: 'myComponent', otherOption: true }]
                _name = child.name;
                opts = child;
              }

              handleAdd(_name, opts);
            }
          } else {
            Lib.obj.each(children, handleAdd);
          }
        })();
      }
    }
  }, {
    key: 'buildCSSClass',

    /**
     * Allows sub components to stack CSS class names
     *
     * @return {String} The constructed class name
     */
    value: function buildCSSClass() {
      // Child classes can include a function that does:
      // return 'CLASS NAME' + this._super();
      return '';
    }
  }, {
    key: 'on',

    /**
     * Add an event listener to this component's element
     *
     *     var myFunc = function(){
     *       var myComponent = this;
     *       // Do something when the event is fired
     *     };
     *
     *     myComponent.on('eventType', myFunc);
     *
     * The context of myFunc will be myComponent unless previously bound.
     *
     * Alternatively, you can add a listener to another element or component.
     *
     *     myComponent.on(otherElement, 'eventName', myFunc);
     *     myComponent.on(otherComponent, 'eventName', myFunc);
     *
     * The benefit of using this over `VjsEvents.on(otherElement, 'eventName', myFunc)`
     * and `otherComponent.on('eventName', myFunc)` is that this way the listeners
     * will be automatically cleaned up when either component is disposed.
     * It will also bind myComponent as the context of myFunc.
     *
     * **NOTE**: When using this on elements in the page other than window
     * and document (both permanent), if you remove the element from the DOM
     * you need to call `myComponent.trigger(el, 'dispose')` on it to clean up
     * references to it and allow the browser to garbage collect it.
     *
     * @param  {String|Component} first   The event type or other component
     * @param  {Function|String}      second  The event handler or event type
     * @param  {Function}             third   The event handler
     * @return {Component}        self
     */
    value: function on(first, second, third) {
      var _this2 = this;

      if (typeof first === 'string' || Lib.obj.isArray(first)) {
        Events.on(this.el_, first, Lib.bind(this, second));

        // Targeting another component or element
      } else {
        (function () {
          var target = first;
          var type = second;
          var fn = Lib.bind(_this2, third);

          // When this component is disposed, remove the listener from the other component
          var removeOnDispose = function removeOnDispose() {
            return _this2.off(target, type, fn);
          };

          // Use the same function ID so we can remove it later it using the ID
          // of the original listener
          removeOnDispose.guid = fn.guid;
          _this2.on('dispose', removeOnDispose);

          // If the other component is disposed first we need to clean the reference
          // to the other component in this component's removeOnDispose listener
          // Otherwise we create a memory leak.
          var cleanRemover = function cleanRemover() {
            return _this2.off('dispose', removeOnDispose);
          };

          // Add the same function ID so we can easily remove it later
          cleanRemover.guid = fn.guid;

          // Check if this is a DOM node
          if (first.nodeName) {
            // Add the listener to the other element
            Events.on(target, type, fn);
            Events.on(target, 'dispose', cleanRemover);

            // Should be a component
            // Not using `instanceof Component` because it makes mock players difficult
          } else if (typeof first.on === 'function') {
            // Add the listener to the other component
            target.on(type, fn);
            target.on('dispose', cleanRemover);
          }
        })();
      }

      return this;
    }
  }, {
    key: 'off',

    /**
     * Remove an event listener from this component's element
     *
     *     myComponent.off('eventType', myFunc);
     *
     * If myFunc is excluded, ALL listeners for the event type will be removed.
     * If eventType is excluded, ALL listeners will be removed from the component.
     *
     * Alternatively you can use `off` to remove listeners that were added to other
     * elements or components using `myComponent.on(otherComponent...`.
     * In this case both the event type and listener function are REQUIRED.
     *
     *     myComponent.off(otherElement, 'eventType', myFunc);
     *     myComponent.off(otherComponent, 'eventType', myFunc);
     *
     * @param  {String=|Component}  first  The event type or other component
     * @param  {Function=|String}       second The listener function or event type
     * @param  {Function=}              third  The listener for other component
     * @return {Component}
     */
    value: function off(first, second, third) {
      if (!first || typeof first === 'string' || Lib.obj.isArray(first)) {
        Events.off(this.el_, first, second);
      } else {
        var target = first;
        var type = second;
        // Ensure there's at least a guid, even if the function hasn't been used
        var fn = Lib.bind(this, third);

        // Remove the dispose listener on this component,
        // which was given the same guid as the event listener
        this.off('dispose', fn);

        if (first.nodeName) {
          // Remove the listener
          Events.off(target, type, fn);
          // Remove the listener for cleaning the dispose listener
          Events.off(target, 'dispose', fn);
        } else {
          target.off(type, fn);
          target.off('dispose', fn);
        }
      }

      return this;
    }
  }, {
    key: 'one',

    /**
     * Add an event listener to be triggered only once and then removed
     *
     *     myComponent.one('eventName', myFunc);
     *
     * Alternatively you can add a listener to another element or component
     * that will be triggered only once.
     *
     *     myComponent.one(otherElement, 'eventName', myFunc);
     *     myComponent.one(otherComponent, 'eventName', myFunc);
     *
     * @param  {String|Component}  first   The event type or other component
     * @param  {Function|String}       second  The listener function or event type
     * @param  {Function=}             third   The listener function for other component
     * @return {Component}
     */
    value: function one(first, second, third) {
      var _this3 = this;

      var _arguments = arguments;

      if (typeof first === 'string' || Lib.obj.isArray(first)) {
        Events.one(this.el_, first, Lib.bind(this, second));
      } else {
        (function () {
          var target = first;
          var type = second;
          var fn = Lib.bind(_this3, third);

          var newFunc = (function (_newFunc) {
            function newFunc() {
              return _newFunc.apply(this, arguments);
            }

            newFunc.toString = function () {
              return _newFunc.toString();
            };

            return newFunc;
          })(function () {
            _this3.off(target, type, newFunc);
            fn.apply(null, _arguments);
          });

          // Keep the same function ID so we can remove it later
          newFunc.guid = fn.guid;

          _this3.on(target, type, newFunc);
        })();
      }

      return this;
    }
  }, {
    key: 'trigger',

    /**
     * Trigger an event on an element
     *
     *     myComponent.trigger('eventName');
     *     myComponent.trigger({'type':'eventName'});
     *
     * @param  {Event|Object|String} event  A string (the type) or an event object with a type attribute
     * @return {Component}       self
     */
    value: function trigger(event) {
      Events.trigger(this.el_, event);
      return this;
    }
  }, {
    key: 'ready',

    /**
     * Bind a listener to the component's ready state
     *
     * Different from event listeners in that if the ready event has already happened
     * it will trigger the function immediately.
     *
     * @param  {Function} fn Ready listener
     * @return {Component}
     */
    value: function ready(fn) {
      if (fn) {
        if (this.isReady_) {
          fn.call(this);
        } else {
          this.readyQueue_ = this.readyQueue_ || [];
          this.readyQueue_.push(fn);
        }
      }
      return this;
    }
  }, {
    key: 'triggerReady',

    /**
     * Trigger the ready listeners
     *
     * @return {Component}
     */
    value: function triggerReady() {
      this.isReady_ = true;

      var readyQueue = this.readyQueue_;

      if (readyQueue && readyQueue.length > 0) {

        for (var i = 0; i < readyQueue.length; i++) {
          readyQueue[i].call(this);
        }

        // Reset Ready Queue
        this.readyQueue_ = [];

        // Allow for using event listeners also, in case you want to do something everytime a source is ready.
        this.trigger('ready');
      }
    }
  }, {
    key: 'hasClass',

    /**
     * Check if a component's element has a CSS class name
     *
     * @param {String} classToCheck Classname to check
     * @return {Component}
     */
    value: function hasClass(classToCheck) {
      return Lib.hasClass(this.el_, classToCheck);
    }
  }, {
    key: 'addClass',

    /**
     * Add a CSS class name to the component's element
     *
     * @param {String} classToAdd Classname to add
     * @return {Component}
     */
    value: function addClass(classToAdd) {
      Lib.addClass(this.el_, classToAdd);
      return this;
    }
  }, {
    key: 'removeClass',

    /**
     * Remove a CSS class name from the component's element
     *
     * @param {String} classToRemove Classname to remove
     * @return {Component}
     */
    value: function removeClass(classToRemove) {
      Lib.removeClass(this.el_, classToRemove);
      return this;
    }
  }, {
    key: 'show',

    /**
     * Show the component element if hidden
     *
     * @return {Component}
     */
    value: function show() {
      this.removeClass('vjs-hidden');
      return this;
    }
  }, {
    key: 'hide',

    /**
     * Hide the component element if currently showing
     *
     * @return {Component}
     */
    value: function hide() {
      this.addClass('vjs-hidden');
      return this;
    }
  }, {
    key: 'lockShowing',

    /**
     * Lock an item in its visible state
     * To be used with fadeIn/fadeOut.
     *
     * @return {Component}
     * @private
     */
    value: function lockShowing() {
      this.addClass('vjs-lock-showing');
      return this;
    }
  }, {
    key: 'unlockShowing',

    /**
     * Unlock an item to be hidden
     * To be used with fadeIn/fadeOut.
     *
     * @return {Component}
     * @private
     */
    value: function unlockShowing() {
      this.removeClass('vjs-lock-showing');
      return this;
    }
  }, {
    key: 'width',

    /**
     * Set or get the width of the component (CSS values)
     *
     * Setting the video tag dimension values only works with values in pixels.
     * Percent values will not work.
     * Some percents can be used, but width()/height() will return the number + %,
     * not the actual computed width/height.
     *
     * @param  {Number|String=} num   Optional width number
     * @param  {Boolean} skipListeners Skip the 'resize' event trigger
     * @return {Component} This component, when setting the width
     * @return {Number|String} The width, when getting
     */
    value: function width(num, skipListeners) {
      return this.dimension('width', num, skipListeners);
    }
  }, {
    key: 'height',

    /**
     * Get or set the height of the component (CSS values)
     *
     * Setting the video tag dimension values only works with values in pixels.
     * Percent values will not work.
     * Some percents can be used, but width()/height() will return the number + %,
     * not the actual computed width/height.
     *
     * @param  {Number|String=} num     New component height
     * @param  {Boolean=} skipListeners Skip the resize event trigger
     * @return {Component} This component, when setting the height
     * @return {Number|String} The height, when getting
     */
    value: function height(num, skipListeners) {
      return this.dimension('height', num, skipListeners);
    }
  }, {
    key: 'dimensions',

    /**
     * Set both width and height at the same time
     *
     * @param  {Number|String} width
     * @param  {Number|String} height
     * @return {Component} The component
     */
    value: function dimensions(width, height) {
      // Skip resize listeners on width for optimization
      return this.width(width, true).height(height);
    }
  }, {
    key: 'dimension',

    /**
     * Get or set width or height
     *
     * This is the shared code for the width() and height() methods.
     * All for an integer, integer + 'px' or integer + '%';
     *
     * Known issue: Hidden elements officially have a width of 0. We're defaulting
     * to the style.width value and falling back to computedStyle which has the
     * hidden element issue. Info, but probably not an efficient fix:
     * http://www.foliotek.com/devblog/getting-the-width-of-a-hidden-element-with-jquery-using-width/
     *
     * @param  {String} widthOrHeight  'width' or 'height'
     * @param  {Number|String=} num     New dimension
     * @param  {Boolean=} skipListeners Skip resize event trigger
     * @return {Component} The component if a dimension was set
     * @return {Number|String} The dimension if nothing was set
     * @private
     */
    value: function dimension(widthOrHeight, num, skipListeners) {
      if (num !== undefined) {
        // Set to zero if null or literally NaN (NaN !== NaN)
        if (num === null || num !== num) {
          num = 0;
        }

        // Check if using css width/height (% or px) and adjust
        if (('' + num).indexOf('%') !== -1 || ('' + num).indexOf('px') !== -1) {
          this.el_.style[widthOrHeight] = num;
        } else if (num === 'auto') {
          this.el_.style[widthOrHeight] = '';
        } else {
          this.el_.style[widthOrHeight] = num + 'px';
        }

        // skipListeners allows us to avoid triggering the resize event when setting both width and height
        if (!skipListeners) {
          this.trigger('resize');
        }

        // Return component
        return this;
      }

      // Not setting a value, so getting it
      // Make sure element exists
      if (!this.el_) {
        return 0;
      }

      // Get dimension value from style
      var val = this.el_.style[widthOrHeight];
      var pxIndex = val.indexOf('px');

      if (pxIndex !== -1) {
        // Return the pixel value with no 'px'
        return parseInt(val.slice(0, pxIndex), 10);
      }

      // No px so using % or no style was set, so falling back to offsetWidth/height
      // If component has display:none, offset will return 0
      // TODO: handle display:none and no dimension style using px
      return parseInt(this.el_['offset' + Lib.capitalize(widthOrHeight)], 10);

      // ComputedStyle version.
      // Only difference is if the element is hidden it will return
      // the percent value (e.g. '100%'')
      // instead of zero like offsetWidth returns.
      // var val = Lib.getComputedStyleValue(this.el_, widthOrHeight);
      // var pxIndex = val.indexOf('px');

      // if (pxIndex !== -1) {
      //   return val.slice(0, pxIndex);
      // } else {
      //   return val;
      // }
    }
  }, {
    key: 'emitTapEvents',

    /**
     * Emit 'tap' events when touch events are supported
     *
     * This is used to support toggling the controls through a tap on the video.
     *
     * We're requiring them to be enabled because otherwise every component would
     * have this extra overhead unnecessarily, on mobile devices where extra
     * overhead is especially bad.
     * @private
     */
    value: function emitTapEvents() {
      // Track the start time so we can determine how long the touch lasted
      var touchStart = 0;
      var firstTouch = null;

      // Maximum movement allowed during a touch event to still be considered a tap
      // Other popular libs use anywhere from 2 (hammer.js) to 15, so 10 seems like a nice, round number.
      var tapMovementThreshold = 10;

      // The maximum length a touch can be while still being considered a tap
      var touchTimeThreshold = 200;

      var couldBeTap = undefined;

      this.on('touchstart', function (event) {
        // If more than one finger, don't consider treating this as a click
        if (event.touches.length === 1) {
          firstTouch = Lib.obj.copy(event.touches[0]);
          // Record start time so we can detect a tap vs. "touch and hold"
          touchStart = new Date().getTime();
          // Reset couldBeTap tracking
          couldBeTap = true;
        }
      });

      this.on('touchmove', function (event) {
        // If more than one finger, don't consider treating this as a click
        if (event.touches.length > 1) {
          couldBeTap = false;
        } else if (firstTouch) {
          // Some devices will throw touchmoves for all but the slightest of taps.
          // So, if we moved only a small distance, this could still be a tap
          var xdiff = event.touches[0].pageX - firstTouch.pageX;
          var ydiff = event.touches[0].pageY - firstTouch.pageY;
          var touchDistance = Math.sqrt(xdiff * xdiff + ydiff * ydiff);

          if (touchDistance > tapMovementThreshold) {
            couldBeTap = false;
          }
        }
      });

      var noTap = function noTap() {
        couldBeTap = false;
      };

      // TODO: Listen to the original target. http://youtu.be/DujfpXOKUp8?t=13m8s
      this.on('touchleave', noTap);
      this.on('touchcancel', noTap);

      // When the touch ends, measure how long it took and trigger the appropriate
      // event
      this.on('touchend', function (event) {
        firstTouch = null;
        // Proceed only if the touchmove/leave/cancel event didn't happen
        if (couldBeTap === true) {
          // Measure how long the touch lasted
          var touchTime = new Date().getTime() - touchStart;

          // Make sure the touch was less than the threshold to be considered a tap
          if (touchTime < touchTimeThreshold) {
            // Don't let browser turn this into a click
            event.preventDefault();
            this.trigger('tap');
            // It may be good to copy the touchend event object and change the
            // type to tap, if the other event properties aren't exact after
            // Lib.fixEvent runs (e.g. event.target)
          }
        }
      });
    }
  }, {
    key: 'enableTouchActivity',

    /**
     * Report user touch activity when touch events occur
     *
     * User activity is used to determine when controls should show/hide. It's
     * relatively simple when it comes to mouse events, because any mouse event
     * should show the controls. So we capture mouse events that bubble up to the
     * player and report activity when that happens.
     *
     * With touch events it isn't as easy. We can't rely on touch events at the
     * player level, because a tap (touchstart + touchend) on the video itself on
     * mobile devices is meant to turn controls off (and on). User activity is
     * checked asynchronously, so what could happen is a tap event on the video
     * turns the controls off, then the touchend event bubbles up to the player,
     * which if it reported user activity, would turn the controls right back on.
     * (We also don't want to completely block touch events from bubbling up)
     *
     * Also a touchmove, touch+hold, and anything other than a tap is not supposed
     * to turn the controls back on on a mobile device.
     *
     * Here we're setting the default component behavior to report user activity
     * whenever touch events happen, and this can be turned off by components that
     * want touch events to act differently.
     */
    value: function enableTouchActivity() {
      // Don't continue if the root player doesn't support reporting user activity
      if (!this.player() || !this.player().reportUserActivity) {
        return;
      }

      // listener for reporting that the user is active
      var report = Lib.bind(this.player(), this.player().reportUserActivity);

      var touchHolding = undefined;

      this.on('touchstart', function () {
        report();
        // For as long as the they are touching the device or have their mouse down,
        // we consider them active even if they're not moving their finger or mouse.
        // So we want to continue to update that they are active
        this.clearInterval(touchHolding);
        // report at the same interval as activityCheck
        touchHolding = this.setInterval(report, 250);
      });

      var touchEnd = function touchEnd(event) {
        report();
        // stop the interval that maintains activity if the touch is holding
        this.clearInterval(touchHolding);
      };

      this.on('touchmove', report);
      this.on('touchend', touchEnd);
      this.on('touchcancel', touchEnd);
    }
  }, {
    key: 'setTimeout',

    /**
     * Creates timeout and sets up disposal automatically.
     * @param {Function} fn The function to run after the timeout.
     * @param {Number} timeout Number of ms to delay before executing specified function.
     * @return {Number} Returns the timeout ID
     */
    value: function setTimeout(fn, timeout) {
      fn = Lib.bind(this, fn);

      // window.setTimeout would be preferable here, but due to some bizarre issue with Sinon and/or Phantomjs, we can't.
      var timeoutId = _window2['default'].setTimeout(fn, timeout);

      var disposeFn = function disposeFn() {
        this.clearTimeout(timeoutId);
      };

      disposeFn.guid = 'vjs-timeout-' + timeoutId;

      this.on('dispose', disposeFn);

      return timeoutId;
    }
  }, {
    key: 'clearTimeout',

    /**
     * Clears a timeout and removes the associated dispose listener
     * @param {Number} timeoutId The id of the timeout to clear
     * @return {Number} Returns the timeout ID
     */
    value: function clearTimeout(timeoutId) {
      _window2['default'].clearTimeout(timeoutId);

      var disposeFn = function disposeFn() {};

      disposeFn.guid = 'vjs-timeout-' + timeoutId;

      this.off('dispose', disposeFn);

      return timeoutId;
    }
  }, {
    key: 'setInterval',

    /**
     * Creates an interval and sets up disposal automatically.
     * @param {Function} fn The function to run every N seconds.
     * @param {Number} interval Number of ms to delay before executing specified function.
     * @return {Number} Returns the interval ID
     */
    value: function setInterval(fn, interval) {
      fn = Lib.bind(this, fn);

      var intervalId = _window2['default'].setInterval(fn, interval);

      var disposeFn = function disposeFn() {
        this.clearInterval(intervalId);
      };

      disposeFn.guid = 'vjs-interval-' + intervalId;

      this.on('dispose', disposeFn);

      return intervalId;
    }
  }, {
    key: 'clearInterval',

    /**
     * Clears an interval and removes the associated dispose listener
     * @param {Number} intervalId The id of the interval to clear
     * @return {Number} Returns the interval ID
     */
    value: function clearInterval(intervalId) {
      _window2['default'].clearInterval(intervalId);

      var disposeFn = function disposeFn() {};

      disposeFn.guid = 'vjs-interval-' + intervalId;

      this.off('dispose', disposeFn);

      return intervalId;
    }
  }], [{
    key: 'registerComponent',
    value: function registerComponent(name, comp) {
      if (!Component.components_) {
        Component.components_ = {};
      }

      Component.components_[name] = comp;
      return comp;
    }
  }, {
    key: 'getComponent',
    value: function getComponent(name) {
      if (Component.components_ && Component.components_[name]) {
        return Component.components_[name];
      }

      if (_window2['default'] && _window2['default'].videojs && _window2['default'].videojs[name]) {
        Lib.log.warn('The ' + name + ' component was added to the videojs object when it should be registered using videojs.registerComponent(name, component)');
        return _window2['default'].videojs[name];
      }
    }
  }, {
    key: 'extend',
    value: function extend(props) {
      props = props || {};
      // Set up the constructor using the supplied init method
      // or using the init of the parent object
      // Make sure to check the unobfuscated version for external libs
      var init = props.init || props.init || this.prototype.init || this.prototype.init || function () {};
      // In Resig's simple class inheritance (previously used) the constructor
      //  is a function that calls `this.init.apply(arguments)`
      // However that would prevent us from using `ParentObject.call(this);`
      //  in a Child constructor because the `this` in `this.init`
      //  would still refer to the Child and cause an infinite loop.
      // We would instead have to do
      //    `ParentObject.prototype.init.apply(this, arguments);`
      //  Bleh. We're not creating a _super() function, so it's good to keep
      //  the parent constructor reference simple.
      var subObj = function subObj() {
        init.apply(this, arguments);
      };

      // Inherit from this object's prototype
      subObj.prototype = Lib.obj.create(this.prototype);
      // Reset the constructor property for subObj otherwise
      // instances of subObj would have the constructor of the parent Object
      subObj.prototype.constructor = subObj;

      // Make the class extendable
      subObj.extend = Component.extend;
      // Make a function for creating instances
      // subObj.create = CoreObject.create;

      // Extend subObj's prototype with functions and other properties from props
      for (var _name2 in props) {
        if (props.hasOwnProperty(_name2)) {
          subObj.prototype[_name2] = props[_name2];
        }
      }

      return subObj;
    }
  }]);

  return Component;
})();

Component.registerComponent('Component', Component);
exports['default'] = Component;
module.exports = exports['default'];

},{"./events.js":43,"./lib.js":46,"./util.js":70,"global/window":2}],8:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _Component2 = _dereq_('../component.js');

var _Component3 = _interopRequireWildcard(_Component2);

var _import = _dereq_('../lib.js');

var Lib = _interopRequireWildcard(_import);

// Required children

var _PlayToggle = _dereq_('./play-toggle.js');

var _PlayToggle2 = _interopRequireWildcard(_PlayToggle);

var _CurrentTimeDisplay = _dereq_('./time-controls/current-time-display.js');

var _CurrentTimeDisplay2 = _interopRequireWildcard(_CurrentTimeDisplay);

var _DurationDisplay = _dereq_('./time-controls/duration-display.js');

var _DurationDisplay2 = _interopRequireWildcard(_DurationDisplay);

var _TimeDivider = _dereq_('./time-controls/time-divider.js');

var _TimeDivider2 = _interopRequireWildcard(_TimeDivider);

var _RemainingTimeDisplay = _dereq_('./time-controls/remaining-time-display.js');

var _RemainingTimeDisplay2 = _interopRequireWildcard(_RemainingTimeDisplay);

var _LiveDisplay = _dereq_('./live-display.js');

var _LiveDisplay2 = _interopRequireWildcard(_LiveDisplay);

var _ProgressControl = _dereq_('./progress-control/progress-control.js');

var _ProgressControl2 = _interopRequireWildcard(_ProgressControl);

var _FullscreenToggle = _dereq_('./fullscreen-toggle.js');

var _FullscreenToggle2 = _interopRequireWildcard(_FullscreenToggle);

var _VolumeControl = _dereq_('./volume-control/volume-control.js');

var _VolumeControl2 = _interopRequireWildcard(_VolumeControl);

var _VolumeMenuButton = _dereq_('./volume-menu-button.js');

var _VolumeMenuButton2 = _interopRequireWildcard(_VolumeMenuButton);

var _MuteToggle = _dereq_('./mute-toggle.js');

var _MuteToggle2 = _interopRequireWildcard(_MuteToggle);

var _ChaptersButton = _dereq_('./text-track-controls/chapters-button.js');

var _ChaptersButton2 = _interopRequireWildcard(_ChaptersButton);

var _SubtitlesButton = _dereq_('./text-track-controls/subtitles-button.js');

var _SubtitlesButton2 = _interopRequireWildcard(_SubtitlesButton);

var _CaptionsButton = _dereq_('./text-track-controls/captions-button.js');

var _CaptionsButton2 = _interopRequireWildcard(_CaptionsButton);

var _PlaybackRateMenuButton = _dereq_('./playback-rate-menu/playback-rate-menu-button.js');

var _PlaybackRateMenuButton2 = _interopRequireWildcard(_PlaybackRateMenuButton);

var _CustomControlSpacer = _dereq_('./spacer-controls/custom-control-spacer.js');

var _CustomControlSpacer2 = _interopRequireWildcard(_CustomControlSpacer);

/**
 * Container of main controls
 * @param {Player|Object} player
 * @param {Object=} options
 * @class
 * @constructor
 * @extends Component
 */

var ControlBar = (function (_Component) {
  function ControlBar() {
    _classCallCheck(this, ControlBar);

    if (_Component != null) {
      _Component.apply(this, arguments);
    }
  }

  _inherits(ControlBar, _Component);

  _createClass(ControlBar, [{
    key: 'createEl',
    value: function createEl() {
      return Lib.createEl('div', {
        className: 'vjs-control-bar'
      });
    }
  }]);

  return ControlBar;
})(_Component3['default']);

ControlBar.prototype.options_ = {
  loadEvent: 'play',
  children: ['playToggle', 'currentTimeDisplay', 'timeDivider', 'durationDisplay', 'progressControl', 'liveDisplay', 'remainingTimeDisplay', 'customControlSpacer', 'playbackRateMenuButton', 'muteToggle', 'volumeControl', 'chaptersButton', 'subtitlesButton', 'captionsButton', 'volumeMenuButton', 'fullscreenToggle']
};

_Component3['default'].registerComponent('ControlBar', ControlBar);
exports['default'] = ControlBar;
module.exports = exports['default'];

},{"../component.js":7,"../lib.js":46,"./fullscreen-toggle.js":9,"./live-display.js":10,"./mute-toggle.js":11,"./play-toggle.js":12,"./playback-rate-menu/playback-rate-menu-button.js":13,"./progress-control/progress-control.js":17,"./spacer-controls/custom-control-spacer.js":20,"./text-track-controls/captions-button.js":23,"./text-track-controls/chapters-button.js":24,"./text-track-controls/subtitles-button.js":27,"./time-controls/current-time-display.js":30,"./time-controls/duration-display.js":31,"./time-controls/remaining-time-display.js":32,"./time-controls/time-divider.js":33,"./volume-control/volume-control.js":35,"./volume-menu-button.js":38}],9:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _Button2 = _dereq_('../button');

var _Button3 = _interopRequireWildcard(_Button2);

/**
 * Toggle fullscreen video
 * @param {Player|Object} player
 * @param {Object=} options
 * @class
 * @extends vjs.Button
 */

var FullscreenToggle = (function (_Button) {
  function FullscreenToggle() {
    _classCallCheck(this, FullscreenToggle);

    if (_Button != null) {
      _Button.apply(this, arguments);
    }
  }

  _inherits(FullscreenToggle, _Button);

  _createClass(FullscreenToggle, [{
    key: 'buildCSSClass',
    value: function buildCSSClass() {
      return 'vjs-fullscreen-control ' + _get(Object.getPrototypeOf(FullscreenToggle.prototype), 'buildCSSClass', this).call(this);
    }
  }, {
    key: 'handleClick',
    value: function handleClick() {
      if (!this.player_.isFullscreen()) {
        this.player_.requestFullscreen();
        this.controlText_.innerHTML = this.localize('Non-Fullscreen');
      } else {
        this.player_.exitFullscreen();
        this.controlText_.innerHTML = this.localize('Fullscreen');
      }
    }
  }]);

  return FullscreenToggle;
})(_Button3['default']);

FullscreenToggle.prototype.buttonText = 'Fullscreen';

_Button3['default'].registerComponent('FullscreenToggle', FullscreenToggle);
exports['default'] = FullscreenToggle;
module.exports = exports['default'];

},{"../button":6}],10:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _Component2 = _dereq_('../component');

var _Component3 = _interopRequireWildcard(_Component2);

var _import = _dereq_('../lib');

var Lib = _interopRequireWildcard(_import);

/**
 * Displays the live indicator
 * TODO - Future make it click to snap to live
 * @param {Player|Object} player
 * @param {Object=} options
 * @constructor
 */

var LiveDisplay = (function (_Component) {
  function LiveDisplay() {
    _classCallCheck(this, LiveDisplay);

    if (_Component != null) {
      _Component.apply(this, arguments);
    }
  }

  _inherits(LiveDisplay, _Component);

  _createClass(LiveDisplay, [{
    key: 'createEl',
    value: function createEl() {
      var el = _get(Object.getPrototypeOf(LiveDisplay.prototype), 'createEl', this).call(this, 'div', {
        className: 'vjs-live-control vjs-control'
      });

      this.contentEl_ = Lib.createEl('div', {
        className: 'vjs-live-display',
        innerHTML: '<span class="vjs-control-text">' + this.localize('Stream Type') + '</span>' + this.localize('LIVE'),
        'aria-live': 'off'
      });

      el.appendChild(this.contentEl_);

      return el;
    }
  }]);

  return LiveDisplay;
})(_Component3['default']);

_Component3['default'].registerComponent('LiveDisplay', LiveDisplay);
exports['default'] = LiveDisplay;
module.exports = exports['default'];

},{"../component":7,"../lib":46}],11:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _Button2 = _dereq_('../button');

var _Button3 = _interopRequireWildcard(_Button2);

var _Component = _dereq_('../component');

var _Component2 = _interopRequireWildcard(_Component);

var _import = _dereq_('../lib');

var Lib = _interopRequireWildcard(_import);

/**
 * A button component for muting the audio
 *
 * @param {Player|Object} player
 * @param {Object=} options
 * @constructor
 */

var MuteToggle = (function (_Button) {
  function MuteToggle(player, options) {
    _classCallCheck(this, MuteToggle);

    _get(Object.getPrototypeOf(MuteToggle.prototype), 'constructor', this).call(this, player, options);

    this.on(player, 'volumechange', this.update);

    // hide mute toggle if the current tech doesn't support volume control
    if (player.tech && player.tech.featuresVolumeControl === false) {
      this.addClass('vjs-hidden');
    }

    this.on(player, 'loadstart', function () {
      if (player.tech.featuresVolumeControl === false) {
        this.addClass('vjs-hidden');
      } else {
        this.removeClass('vjs-hidden');
      }
    });
  }

  _inherits(MuteToggle, _Button);

  _createClass(MuteToggle, [{
    key: 'createEl',
    value: function createEl() {
      return _get(Object.getPrototypeOf(MuteToggle.prototype), 'createEl', this).call(this, 'div', {
        className: this.buildCSSClass(),
        innerHTML: '<div><span class="vjs-control-text">' + this.localize('Mute') + '</span></div>'
      });
    }
  }, {
    key: 'buildCSSClass',
    value: function buildCSSClass() {
      return 'vjs-mute-control ' + _get(Object.getPrototypeOf(MuteToggle.prototype), 'buildCSSClass', this).call(this);
    }
  }, {
    key: 'handleClick',
    value: function handleClick() {
      this.player_.muted(this.player_.muted() ? false : true);
    }
  }, {
    key: 'update',
    value: function update() {
      var vol = this.player_.volume(),
          level = 3;

      if (vol === 0 || this.player_.muted()) {
        level = 0;
      } else if (vol < 0.33) {
        level = 1;
      } else if (vol < 0.67) {
        level = 2;
      }

      // Don't rewrite the button text if the actual text doesn't change.
      // This causes unnecessary and confusing information for screen reader users.
      // This check is needed because this function gets called every time the volume level is changed.
      var toMute = this.player_.muted() ? 'Unmute' : 'Mute';
      var localizedMute = this.localize(toMute);
      if (this.el_.children[0].children[0].innerHTML !== localizedMute) {
        this.el_.children[0].children[0].innerHTML = localizedMute;
      }

      /* TODO improve muted icon classes */
      for (var i = 0; i < 4; i++) {
        Lib.removeClass(this.el_, 'vjs-vol-' + i);
      }
      Lib.addClass(this.el_, 'vjs-vol-' + level);
    }
  }]);

  return MuteToggle;
})(_Button3['default']);

_Component2['default'].registerComponent('MuteToggle', MuteToggle);
exports['default'] = MuteToggle;
module.exports = exports['default'];

},{"../button":6,"../component":7,"../lib":46}],12:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _Button2 = _dereq_('../button');

var _Button3 = _interopRequireWildcard(_Button2);

var _import = _dereq_('../lib');

var Lib = _interopRequireWildcard(_import);

/**
 * Button to toggle between play and pause
 * @param {Player|Object} player
 * @param {Object=} options
 * @class
 * @constructor
 */

var PlayToggle = (function (_Button) {
  function PlayToggle(player, options) {
    _classCallCheck(this, PlayToggle);

    _get(Object.getPrototypeOf(PlayToggle.prototype), 'constructor', this).call(this, player, options);

    this.on(player, 'play', this.handlePlay);
    this.on(player, 'pause', this.handlePause);
  }

  _inherits(PlayToggle, _Button);

  _createClass(PlayToggle, [{
    key: 'buildCSSClass',
    value: function buildCSSClass() {
      return 'vjs-play-control ' + _get(Object.getPrototypeOf(PlayToggle.prototype), 'buildCSSClass', this).call(this);
    }
  }, {
    key: 'handleClick',

    // handleClick - Toggle between play and pause
    value: function handleClick() {
      if (this.player_.paused()) {
        this.player_.play();
      } else {
        this.player_.pause();
      }
    }
  }, {
    key: 'handlePlay',

    // handlePlay - Add the vjs-playing class to the element so it can change appearance
    value: function handlePlay() {
      this.removeClass('vjs-paused');
      this.addClass('vjs-playing');
      this.el_.children[0].children[0].innerHTML = this.localize('Pause'); // change the button text to "Pause"
    }
  }, {
    key: 'handlePause',

    // handlePause - Add the vjs-paused class to the element so it can change appearance
    value: function handlePause() {
      this.removeClass('vjs-playing');
      this.addClass('vjs-paused');
      this.el_.children[0].children[0].innerHTML = this.localize('Play'); // change the button text to "Play"
    }
  }]);

  return PlayToggle;
})(_Button3['default']);

PlayToggle.prototype.buttonText = 'Play';

_Button3['default'].registerComponent('PlayToggle', PlayToggle);
exports['default'] = PlayToggle;
module.exports = exports['default'];

},{"../button":6,"../lib":46}],13:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _MenuButton2 = _dereq_('../../menu/menu-button.js');

var _MenuButton3 = _interopRequireWildcard(_MenuButton2);

var _Menu = _dereq_('../../menu/menu.js');

var _Menu2 = _interopRequireWildcard(_Menu);

var _PlaybackRateMenuItem = _dereq_('./playback-rate-menu-item.js');

var _PlaybackRateMenuItem2 = _interopRequireWildcard(_PlaybackRateMenuItem);

var _import = _dereq_('../../lib.js');

var Lib = _interopRequireWildcard(_import);

/**
 * The component for controlling the playback rate
 *
 * @param {Player|Object} player
 * @param {Object=} options
 * @constructor
 */

var PlaybackRateMenuButton = (function (_MenuButton) {
  function PlaybackRateMenuButton(player, options) {
    _classCallCheck(this, PlaybackRateMenuButton);

    _get(Object.getPrototypeOf(PlaybackRateMenuButton.prototype), 'constructor', this).call(this, player, options);

    this.updateVisibility();
    this.updateLabel();

    this.on(player, 'loadstart', this.updateVisibility);
    this.on(player, 'ratechange', this.updateLabel);
  }

  _inherits(PlaybackRateMenuButton, _MenuButton);

  _createClass(PlaybackRateMenuButton, [{
    key: 'createEl',
    value: function createEl() {
      var el = _get(Object.getPrototypeOf(PlaybackRateMenuButton.prototype), 'createEl', this).call(this);

      this.labelEl_ = Lib.createEl('div', {
        className: 'vjs-playback-rate-value',
        innerHTML: 1
      });

      el.appendChild(this.labelEl_);

      return el;
    }
  }, {
    key: 'createMenu',

    // Menu creation
    value: function createMenu() {
      var menu = new _Menu2['default'](this.player());
      var rates = this.player().options().playbackRates;

      if (rates) {
        for (var i = rates.length - 1; i >= 0; i--) {
          menu.addChild(new _PlaybackRateMenuItem2['default'](this.player(), { rate: rates[i] + 'x' }));
        }
      }

      return menu;
    }
  }, {
    key: 'updateARIAAttributes',
    value: function updateARIAAttributes() {
      // Current playback rate
      this.el().setAttribute('aria-valuenow', this.player().playbackRate());
    }
  }, {
    key: 'handleClick',
    value: function handleClick() {
      // select next rate option
      var currentRate = this.player().playbackRate();
      var rates = this.player().options().playbackRates;
      // this will select first one if the last one currently selected
      var newRate = rates[0];
      for (var i = 0; i < rates.length; i++) {
        if (rates[i] > currentRate) {
          newRate = rates[i];
          break;
        }
      }
      this.player().playbackRate(newRate);
    }
  }, {
    key: 'playbackRateSupported',
    value: function playbackRateSupported() {
      return this.player().tech && this.player().tech.featuresPlaybackRate && this.player().options().playbackRates && this.player().options().playbackRates.length > 0;
    }
  }, {
    key: 'updateVisibility',

    /**
     * Hide playback rate controls when they're no playback rate options to select
     */
    value: function updateVisibility() {
      if (this.playbackRateSupported()) {
        this.removeClass('vjs-hidden');
      } else {
        this.addClass('vjs-hidden');
      }
    }
  }, {
    key: 'updateLabel',

    /**
     * Update button label when rate changed
     */
    value: function updateLabel() {
      if (this.playbackRateSupported()) {
        this.labelEl_.innerHTML = this.player().playbackRate() + 'x';
      }
    }
  }]);

  return PlaybackRateMenuButton;
})(_MenuButton3['default']);

PlaybackRateMenuButton.prototype.buttonText = 'Playback Rate';
PlaybackRateMenuButton.prototype.className = 'vjs-playback-rate';

_MenuButton3['default'].registerComponent('PlaybackRateMenuButton', PlaybackRateMenuButton);
exports['default'] = PlaybackRateMenuButton;
module.exports = exports['default'];

},{"../../lib.js":46,"../../menu/menu-button.js":49,"../../menu/menu.js":51,"./playback-rate-menu-item.js":14}],14:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _MenuItem2 = _dereq_('../../menu/menu-item.js');

var _MenuItem3 = _interopRequireWildcard(_MenuItem2);

/**
 * The specific menu item type for selecting a playback rate
 *
 * @constructor
 */

var PlaybackRateMenuItem = (function (_MenuItem) {
  function PlaybackRateMenuItem(player, options) {
    _classCallCheck(this, PlaybackRateMenuItem);

    var label = options.rate;
    var rate = parseFloat(label, 10);

    // Modify options for parent MenuItem class's init.
    options.label = label;
    options.selected = rate === 1;
    _get(Object.getPrototypeOf(PlaybackRateMenuItem.prototype), 'constructor', this).call(this, player, options);

    this.label = label;
    this.rate = rate;

    this.on(player, 'ratechange', this.update);
  }

  _inherits(PlaybackRateMenuItem, _MenuItem);

  _createClass(PlaybackRateMenuItem, [{
    key: 'handleClick',
    value: function handleClick() {
      _get(Object.getPrototypeOf(PlaybackRateMenuItem.prototype), 'handleClick', this).call(this);
      this.player().playbackRate(this.rate);
    }
  }, {
    key: 'update',
    value: function update() {
      this.selected(this.player().playbackRate() === this.rate);
    }
  }]);

  return PlaybackRateMenuItem;
})(_MenuItem3['default']);

PlaybackRateMenuItem.prototype.contentElType = 'button';

_MenuItem3['default'].registerComponent('PlaybackRateMenuItem', PlaybackRateMenuItem);
exports['default'] = PlaybackRateMenuItem;
module.exports = exports['default'];

},{"../../menu/menu-item.js":50}],15:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _Component2 = _dereq_('../../component.js');

var _Component3 = _interopRequireWildcard(_Component2);

var _import = _dereq_('../../lib.js');

var Lib = _interopRequireWildcard(_import);

/**
 * Shows load progress
 *
 * @param {Player|Object} player
 * @param {Object=} options
 * @constructor
 */

var LoadProgressBar = (function (_Component) {
  function LoadProgressBar(player, options) {
    _classCallCheck(this, LoadProgressBar);

    _get(Object.getPrototypeOf(LoadProgressBar.prototype), 'constructor', this).call(this, player, options);
    this.on(player, 'progress', this.update);
  }

  _inherits(LoadProgressBar, _Component);

  _createClass(LoadProgressBar, [{
    key: 'createEl',
    value: function createEl() {
      return _get(Object.getPrototypeOf(LoadProgressBar.prototype), 'createEl', this).call(this, 'div', {
        className: 'vjs-load-progress',
        innerHTML: '<span class="vjs-control-text"><span>' + this.localize('Loaded') + '</span>: 0%</span>'
      });
    }
  }, {
    key: 'update',
    value: function update() {
      var buffered = this.player_.buffered();
      var duration = this.player_.duration();
      var bufferedEnd = this.player_.bufferedEnd();
      var children = this.el_.children;

      // get the percent width of a time compared to the total end
      var percentify = function percentify(time, end) {
        var percent = time / end || 0; // no NaN
        return (percent >= 1 ? 1 : percent) * 100 + '%';
      };

      // update the width of the progress bar
      this.el_.style.width = percentify(bufferedEnd, duration);

      // add child elements to represent the individual buffered time ranges
      for (var i = 0; i < buffered.length; i++) {
        var start = buffered.start(i);
        var end = buffered.end(i);
        var part = children[i];

        if (!part) {
          part = this.el_.appendChild(Lib.createEl());
        }

        // set the percent based on the width of the progress bar (bufferedEnd)
        part.style.left = percentify(start, bufferedEnd);
        part.style.width = percentify(end - start, bufferedEnd);
      }

      // remove unused buffered range elements
      for (var i = children.length; i > buffered.length; i--) {
        this.el_.removeChild(children[i - 1]);
      }
    }
  }]);

  return LoadProgressBar;
})(_Component3['default']);

_Component3['default'].registerComponent('LoadProgressBar', LoadProgressBar);
exports['default'] = LoadProgressBar;
module.exports = exports['default'];

},{"../../component.js":7,"../../lib.js":46}],16:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _Component2 = _dereq_('../../component.js');

var _Component3 = _interopRequireWildcard(_Component2);

/**
 * Shows play progress
 *
 * @param {Player|Object} player
 * @param {Object=} options
 * @constructor
 */

var PlayProgressBar = (function (_Component) {
  function PlayProgressBar() {
    _classCallCheck(this, PlayProgressBar);

    if (_Component != null) {
      _Component.apply(this, arguments);
    }
  }

  _inherits(PlayProgressBar, _Component);

  _createClass(PlayProgressBar, [{
    key: 'createEl',
    value: function createEl() {
      return _get(Object.getPrototypeOf(PlayProgressBar.prototype), 'createEl', this).call(this, 'div', {
        className: 'vjs-play-progress',
        innerHTML: '<span class="vjs-control-text"><span>' + this.localize('Progress') + '</span>: 0%</span>'
      });
    }
  }]);

  return PlayProgressBar;
})(_Component3['default']);

_Component3['default'].registerComponent('PlayProgressBar', PlayProgressBar);
exports['default'] = PlayProgressBar;
module.exports = exports['default'];

},{"../../component.js":7}],17:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _Component2 = _dereq_('../../component.js');

var _Component3 = _interopRequireWildcard(_Component2);

var _SeekBar = _dereq_('./seek-bar.js');

var _SeekBar2 = _interopRequireWildcard(_SeekBar);

/**
 * The Progress Control component contains the seek bar, load progress,
 * and play progress
 *
 * @param {Player|Object} player
 * @param {Object=} options
 * @constructor
 */

var ProgressControl = (function (_Component) {
  function ProgressControl() {
    _classCallCheck(this, ProgressControl);

    if (_Component != null) {
      _Component.apply(this, arguments);
    }
  }

  _inherits(ProgressControl, _Component);

  _createClass(ProgressControl, [{
    key: 'createEl',
    value: function createEl() {
      return _get(Object.getPrototypeOf(ProgressControl.prototype), 'createEl', this).call(this, 'div', {
        className: 'vjs-progress-control vjs-control'
      });
    }
  }]);

  return ProgressControl;
})(_Component3['default']);

ProgressControl.prototype.options_ = {
  children: {
    seekBar: {}
  }
};

_Component3['default'].registerComponent('ProgressControl', ProgressControl);
exports['default'] = ProgressControl;
module.exports = exports['default'];

},{"../../component.js":7,"./seek-bar.js":18}],18:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _Slider2 = _dereq_('../../slider/slider.js');

var _Slider3 = _interopRequireWildcard(_Slider2);

var _LoadProgressBar = _dereq_('./load-progress-bar.js');

var _LoadProgressBar2 = _interopRequireWildcard(_LoadProgressBar);

var _PlayProgressBar = _dereq_('./play-progress-bar.js');

var _PlayProgressBar2 = _interopRequireWildcard(_PlayProgressBar);

var _SeekHandle = _dereq_('./seek-handle.js');

var _SeekHandle2 = _interopRequireWildcard(_SeekHandle);

var _import = _dereq_('../../lib.js');

var Lib = _interopRequireWildcard(_import);

/**
 * Seek Bar and holder for the progress bars
 *
 * @param {Player|Object} player
 * @param {Object=} options
 * @constructor
 */

var SeekBar = (function (_Slider) {
  function SeekBar(player, options) {
    _classCallCheck(this, SeekBar);

    _get(Object.getPrototypeOf(SeekBar.prototype), 'constructor', this).call(this, player, options);
    this.on(player, 'timeupdate', this.updateARIAAttributes);
    player.ready(Lib.bind(this, this.updateARIAAttributes));
  }

  _inherits(SeekBar, _Slider);

  _createClass(SeekBar, [{
    key: 'createEl',
    value: function createEl() {
      return _get(Object.getPrototypeOf(SeekBar.prototype), 'createEl', this).call(this, 'div', {
        className: 'vjs-progress-holder',
        'aria-label': 'video progress bar'
      });
    }
  }, {
    key: 'updateARIAAttributes',
    value: function updateARIAAttributes() {
      // Allows for smooth scrubbing, when player can't keep up.
      var time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
      this.el_.setAttribute('aria-valuenow', Lib.round(this.getPercent() * 100, 2)); // machine readable value of progress bar (percentage complete)
      this.el_.setAttribute('aria-valuetext', Lib.formatTime(time, this.player_.duration())); // human readable value of progress bar (time complete)
    }
  }, {
    key: 'getPercent',
    value: function getPercent() {
      var percent = this.player_.currentTime() / this.player_.duration();
      return percent >= 1 ? 1 : percent;
    }
  }, {
    key: 'handleMouseDown',
    value: function handleMouseDown(event) {
      _get(Object.getPrototypeOf(SeekBar.prototype), 'handleMouseDown', this).call(this, event);

      this.player_.scrubbing(true);

      this.videoWasPlaying = !this.player_.paused();
      this.player_.pause();
    }
  }, {
    key: 'handleMouseMove',
    value: function handleMouseMove(event) {
      var newTime = this.calculateDistance(event) * this.player_.duration();

      // Don't let video end while scrubbing.
      if (newTime === this.player_.duration()) {
        newTime = newTime - 0.1;
      }

      // Set new time (tell player to seek to new time)
      this.player_.currentTime(newTime);
    }
  }, {
    key: 'handleMouseUp',
    value: function handleMouseUp(event) {
      _get(Object.getPrototypeOf(SeekBar.prototype), 'handleMouseUp', this).call(this, event);

      this.player_.scrubbing(false);
      if (this.videoWasPlaying) {
        this.player_.play();
      }
    }
  }, {
    key: 'stepForward',
    value: function stepForward() {
      this.player_.currentTime(this.player_.currentTime() + 5); // more quickly fast forward for keyboard-only users
    }
  }, {
    key: 'stepBack',
    value: function stepBack() {
      this.player_.currentTime(this.player_.currentTime() - 5); // more quickly rewind for keyboard-only users
    }
  }]);

  return SeekBar;
})(_Slider3['default']);

SeekBar.prototype.options_ = {
  children: {
    loadProgressBar: {},
    playProgressBar: {},
    seekHandle: {}
  },
  barName: 'playProgressBar',
  handleName: 'seekHandle'
};

SeekBar.prototype.playerEvent = 'timeupdate';

_Slider3['default'].registerComponent('SeekBar', SeekBar);
exports['default'] = SeekBar;
module.exports = exports['default'];

},{"../../lib.js":46,"../../slider/slider.js":58,"./load-progress-bar.js":15,"./play-progress-bar.js":16,"./seek-handle.js":19}],19:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _SliderHandle2 = _dereq_('../../slider/slider-handle.js');

var _SliderHandle3 = _interopRequireWildcard(_SliderHandle2);

var _import = _dereq_('../../lib.js');

var Lib = _interopRequireWildcard(_import);

/**
 * The Seek Handle shows the current position of the playhead during playback,
 * and can be dragged to adjust the playhead.
 *
 * @param {Player|Object} player
 * @param {Object=} options
 * @constructor
 */

var SeekHandle = (function (_SliderHandle) {
  function SeekHandle(player, options) {
    _classCallCheck(this, SeekHandle);

    _get(Object.getPrototypeOf(SeekHandle.prototype), 'constructor', this).call(this, player, options);
    this.on(player, 'timeupdate', this.updateContent);
  }

  _inherits(SeekHandle, _SliderHandle);

  _createClass(SeekHandle, [{
    key: 'createEl',

    /** @inheritDoc */
    value: function createEl() {
      return _get(Object.getPrototypeOf(SeekHandle.prototype), 'createEl', this).call(this, 'div', {
        className: 'vjs-seek-handle',
        'aria-live': 'off'
      });
    }
  }, {
    key: 'updateContent',
    value: function updateContent() {
      var time = this.player_.scrubbing ? this.player_.getCache().currentTime : this.player_.currentTime();
      this.el_.innerHTML = '<span class="vjs-control-text">' + Lib.formatTime(time, this.player_.duration()) + '</span>';
    }
  }]);

  return SeekHandle;
})(_SliderHandle3['default']);

/**
 * The default value for the handle content, which may be read by screen readers
 *
 * @type {String}
 * @private
 */
SeekHandle.prototype.defaultValue = '00:00';

_SliderHandle3['default'].registerComponent('SeekHandle', SeekHandle);
exports['default'] = SeekHandle;
module.exports = exports['default'];

},{"../../lib.js":46,"../../slider/slider-handle.js":57}],20:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _Spacer2 = _dereq_('./spacer.js');

var _Spacer3 = _interopRequireWildcard(_Spacer2);

/**
 * Spacer specifically meant to be used as an insertion point for new plugins, etc.
 *
 * @param {Player|Object} player
 * @param {Obect=} options
 */

var CustomControlSpacer = (function (_Spacer) {
  function CustomControlSpacer() {
    _classCallCheck(this, CustomControlSpacer);

    if (_Spacer != null) {
      _Spacer.apply(this, arguments);
    }
  }

  _inherits(CustomControlSpacer, _Spacer);

  _createClass(CustomControlSpacer, [{
    key: 'buildCSSClass',
    value: function buildCSSClass() {
      return 'vjs-custom-control-spacer ' + _get(Object.getPrototypeOf(CustomControlSpacer.prototype), 'buildCSSClass', this).call(this);
    }
  }, {
    key: 'createEl',
    value: function createEl() {
      return _get(Object.getPrototypeOf(CustomControlSpacer.prototype), 'createEl', this).call(this, {
        className: this.buildCSSClass()
      });
    }
  }]);

  return CustomControlSpacer;
})(_Spacer3['default']);

_Spacer3['default'].registerComponent('CustomControlSpacer', CustomControlSpacer);

exports['default'] = CustomControlSpacer;
module.exports = exports['default'];

},{"./spacer.js":21}],21:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _Component2 = _dereq_('../../component.js');

var _Component3 = _interopRequireWildcard(_Component2);

/**
 * Just an empty spacer element that can be used as an append point for plugins, etc.
 * Also can be used to create space between elements when necessary.
 *
 * @param {Player|Object} player
 * @param {Object=} options
 */

var Spacer = (function (_Component) {
  function Spacer() {
    _classCallCheck(this, Spacer);

    if (_Component != null) {
      _Component.apply(this, arguments);
    }
  }

  _inherits(Spacer, _Component);

  _createClass(Spacer, [{
    key: 'buildCSSClass',
    value: function buildCSSClass() {
      return 'vjs-spacer ' + _get(Object.getPrototypeOf(Spacer.prototype), 'buildCSSClass', this).call(this);
    }
  }, {
    key: 'createEl',
    value: function createEl(props) {
      return _get(Object.getPrototypeOf(Spacer.prototype), 'createEl', this).call(this, 'div', {
        className: this.buildCSSClass()
      });
    }
  }]);

  return Spacer;
})(_Component3['default']);

_Component3['default'].registerComponent('Spacer', Spacer);

exports['default'] = Spacer;
module.exports = exports['default'];

},{"../../component.js":7}],22:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _TextTrackMenuItem2 = _dereq_('./text-track-menu-item.js');

var _TextTrackMenuItem3 = _interopRequireWildcard(_TextTrackMenuItem2);

var CaptionSettingsMenuItem = (function (_TextTrackMenuItem) {
  function CaptionSettingsMenuItem(player, options) {
    _classCallCheck(this, CaptionSettingsMenuItem);

    options.track = {
      kind: options.kind,
      player: player,
      label: options.kind + ' settings',
      'default': false,
      mode: 'disabled'
    };

    _get(Object.getPrototypeOf(CaptionSettingsMenuItem.prototype), 'constructor', this).call(this, player, options);
    this.addClass('vjs-texttrack-settings');
  }

  _inherits(CaptionSettingsMenuItem, _TextTrackMenuItem);

  _createClass(CaptionSettingsMenuItem, [{
    key: 'handleClick',
    value: function handleClick() {
      this.player().getChild('textTrackSettings').show();
    }
  }]);

  return CaptionSettingsMenuItem;
})(_TextTrackMenuItem3['default']);

_TextTrackMenuItem3['default'].registerComponent('CaptionSettingsMenuItem', CaptionSettingsMenuItem);
exports['default'] = CaptionSettingsMenuItem;
module.exports = exports['default'];

},{"./text-track-menu-item.js":29}],23:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _TextTrackButton2 = _dereq_('./text-track-button.js');

var _TextTrackButton3 = _interopRequireWildcard(_TextTrackButton2);

var _CaptionSettingsMenuItem = _dereq_('./caption-settings-menu-item.js');

var _CaptionSettingsMenuItem2 = _interopRequireWildcard(_CaptionSettingsMenuItem);

/**
 * The button component for toggling and selecting captions
 *
 * @constructor
 */

var CaptionsButton = (function (_TextTrackButton) {
  function CaptionsButton(player, options, ready) {
    _classCallCheck(this, CaptionsButton);

    _get(Object.getPrototypeOf(CaptionsButton.prototype), 'constructor', this).call(this, player, options, ready);
    this.el_.setAttribute('aria-label', 'Captions Menu');
  }

  _inherits(CaptionsButton, _TextTrackButton);

  _createClass(CaptionsButton, [{
    key: 'update',
    value: function update() {
      var threshold = 2;
      _get(Object.getPrototypeOf(CaptionsButton.prototype), 'update', this).call(this);

      // if native, then threshold is 1 because no settings button
      if (this.player().tech && this.player().tech.featuresNativeTextTracks) {
        threshold = 1;
      }

      if (this.items && this.items.length > threshold) {
        this.show();
      } else {
        this.hide();
      }
    }
  }, {
    key: 'createItems',
    value: function createItems() {
      var items = [];

      if (!(this.player().tech && this.player().tech.featuresNativeTextTracks)) {
        items.push(new _CaptionSettingsMenuItem2['default'](this.player_, { kind: this.kind_ }));
      }

      return _get(Object.getPrototypeOf(CaptionsButton.prototype), 'createItems', this).call(this, items);
    }
  }]);

  return CaptionsButton;
})(_TextTrackButton3['default']);

CaptionsButton.prototype.kind_ = 'captions';
CaptionsButton.prototype.buttonText = 'Captions';
CaptionsButton.prototype.className = 'vjs-captions-button';

_TextTrackButton3['default'].registerComponent('CaptionsButton', CaptionsButton);
exports['default'] = CaptionsButton;
module.exports = exports['default'];

},{"./caption-settings-menu-item.js":22,"./text-track-button.js":28}],24:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _TextTrackButton2 = _dereq_('./text-track-button.js');

var _TextTrackButton3 = _interopRequireWildcard(_TextTrackButton2);

var _TextTrackMenuItem = _dereq_('./text-track-menu-item.js');

var _TextTrackMenuItem2 = _interopRequireWildcard(_TextTrackMenuItem);

var _ChaptersTrackMenuItem = _dereq_('./chapters-track-menu-item.js');

var _ChaptersTrackMenuItem2 = _interopRequireWildcard(_ChaptersTrackMenuItem);

var _Menu = _dereq_('../../menu/menu.js');

var _Menu2 = _interopRequireWildcard(_Menu);

var _import = _dereq_('../../lib.js');

var Lib = _interopRequireWildcard(_import);

var _window = _dereq_('global/window');

var _window2 = _interopRequireWildcard(_window);

// Chapters act much differently than other text tracks
// Cues are navigation vs. other tracks of alternative languages
/**
 * The button component for toggling and selecting chapters
 *
 * @constructor
 */

var ChaptersButton = (function (_TextTrackButton) {
  function ChaptersButton(player, options, ready) {
    _classCallCheck(this, ChaptersButton);

    _get(Object.getPrototypeOf(ChaptersButton.prototype), 'constructor', this).call(this, player, options, ready);
    this.el_.setAttribute('aria-label', 'Chapters Menu');
  }

  _inherits(ChaptersButton, _TextTrackButton);

  _createClass(ChaptersButton, [{
    key: 'createItems',

    // Create a menu item for each text track
    value: function createItems() {
      var items = [];

      var tracks = this.player_.textTracks();

      if (!tracks) {
        return items;
      }

      for (var i = 0; i < tracks.length; i++) {
        var track = tracks[i];
        if (track.kind === this.kind_) {
          items.push(new _TextTrackMenuItem2['default'](this.player_, {
            track: track
          }));
        }
      }

      return items;
    }
  }, {
    key: 'createMenu',
    value: function createMenu() {
      var tracks = this.player_.textTracks() || [];
      var chaptersTrack = undefined;
      var items = this.items = [];

      for (var i = 0, l = tracks.length; i < l; i++) {
        var track = tracks[i];
        if (track.kind === this.kind_) {
          if (!track.cues) {
            track.mode = 'hidden';
            /* jshint loopfunc:true */
            // TODO see if we can figure out a better way of doing this https://github.com/videojs/video.js/issues/1864
            _window2['default'].setTimeout(Lib.bind(this, function () {
              this.createMenu();
            }), 100);
            /* jshint loopfunc:false */
          } else {
            chaptersTrack = track;
            break;
          }
        }
      }

      var menu = this.menu;
      if (menu === undefined) {
        menu = new _Menu2['default'](this.player_);
        menu.contentEl().appendChild(Lib.createEl('li', {
          className: 'vjs-menu-title',
          innerHTML: Lib.capitalize(this.kind_),
          tabindex: -1
        }));
      }

      if (chaptersTrack) {
        var cues = chaptersTrack.cues,
            cue = undefined;

        for (var i = 0, l = cues.length; i < l; i++) {
          cue = cues[i];

          var mi = new _ChaptersTrackMenuItem2['default'](this.player_, {
            track: chaptersTrack,
            cue: cue
          });

          items.push(mi);

          menu.addChild(mi);
        }
        this.addChild(menu);
      }

      if (this.items.length > 0) {
        this.show();
      }

      return menu;
    }
  }]);

  return ChaptersButton;
})(_TextTrackButton3['default']);

ChaptersButton.prototype.kind_ = 'chapters';
ChaptersButton.prototype.buttonText = 'Chapters';
ChaptersButton.prototype.className = 'vjs-chapters-button';

_TextTrackButton3['default'].registerComponent('ChaptersButton', ChaptersButton);
exports['default'] = ChaptersButton;
module.exports = exports['default'];

},{"../../lib.js":46,"../../menu/menu.js":51,"./chapters-track-menu-item.js":25,"./text-track-button.js":28,"./text-track-menu-item.js":29,"global/window":2}],25:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _MenuItem2 = _dereq_('../../menu/menu-item.js');

var _MenuItem3 = _interopRequireWildcard(_MenuItem2);

var _import = _dereq_('../../lib.js');

var Lib = _interopRequireWildcard(_import);

/**
 * @constructor
 */

var ChaptersTrackMenuItem = (function (_MenuItem) {
  function ChaptersTrackMenuItem(player, options) {
    _classCallCheck(this, ChaptersTrackMenuItem);

    var track = options.track;
    var cue = options.cue;
    var currentTime = player.currentTime();

    // Modify options for parent MenuItem class's init.
    options.label = cue.text;
    options.selected = cue.startTime <= currentTime && currentTime < cue.endTime;
    _get(Object.getPrototypeOf(ChaptersTrackMenuItem.prototype), 'constructor', this).call(this, player, options);

    this.track = track;
    this.cue = cue;
    track.addEventListener('cuechange', Lib.bind(this, this.update));
  }

  _inherits(ChaptersTrackMenuItem, _MenuItem);

  _createClass(ChaptersTrackMenuItem, [{
    key: 'handleClick',
    value: function handleClick() {
      _get(Object.getPrototypeOf(ChaptersTrackMenuItem.prototype), 'handleClick', this).call(this);
      this.player_.currentTime(this.cue.startTime);
      this.update(this.cue.startTime);
    }
  }, {
    key: 'update',
    value: function update() {
      var cue = this.cue;
      var currentTime = this.player_.currentTime();

      // vjs.log(currentTime, cue.startTime);
      this.selected(cue.startTime <= currentTime && currentTime < cue.endTime);
    }
  }]);

  return ChaptersTrackMenuItem;
})(_MenuItem3['default']);

_MenuItem3['default'].registerComponent('ChaptersTrackMenuItem', ChaptersTrackMenuItem);
exports['default'] = ChaptersTrackMenuItem;
module.exports = exports['default'];

},{"../../lib.js":46,"../../menu/menu-item.js":50}],26:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _TextTrackMenuItem2 = _dereq_('./text-track-menu-item.js');

var _TextTrackMenuItem3 = _interopRequireWildcard(_TextTrackMenuItem2);

/**
 * A special menu item for turning of a specific type of text track
 *
 * @constructor
 */

var OffTextTrackMenuItem = (function (_TextTrackMenuItem) {
  function OffTextTrackMenuItem(player, options) {
    _classCallCheck(this, OffTextTrackMenuItem);

    // Create pseudo track info
    // Requires options['kind']
    options.track = {
      kind: options.kind,
      player: player,
      label: options.kind + ' off',
      'default': false,
      mode: 'disabled'
    };

    _get(Object.getPrototypeOf(OffTextTrackMenuItem.prototype), 'constructor', this).call(this, player, options);
    this.selected(true);
  }

  _inherits(OffTextTrackMenuItem, _TextTrackMenuItem);

  _createClass(OffTextTrackMenuItem, [{
    key: 'handleTracksChange',
    value: function handleTracksChange(event) {
      var tracks = this.player().textTracks();
      var selected = true;

      for (var i = 0, l = tracks.length; i < l; i++) {
        var track = tracks[i];
        if (track.kind === this.track.kind && track.mode === 'showing') {
          selected = false;
          break;
        }
      }

      this.selected(selected);
    }
  }]);

  return OffTextTrackMenuItem;
})(_TextTrackMenuItem3['default']);

_TextTrackMenuItem3['default'].registerComponent('OffTextTrackMenuItem', OffTextTrackMenuItem);
exports['default'] = OffTextTrackMenuItem;
module.exports = exports['default'];

},{"./text-track-menu-item.js":29}],27:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _TextTrackButton2 = _dereq_('./text-track-button.js');

var _TextTrackButton3 = _interopRequireWildcard(_TextTrackButton2);

/**
 * The button component for toggling and selecting subtitles
 *
 * @constructor
 */

var SubtitlesButton = (function (_TextTrackButton) {
  function SubtitlesButton(player, options, ready) {
    _classCallCheck(this, SubtitlesButton);

    _get(Object.getPrototypeOf(SubtitlesButton.prototype), 'constructor', this).call(this, player, options, ready);
    this.el_.setAttribute('aria-label', 'Subtitles Menu');
  }

  _inherits(SubtitlesButton, _TextTrackButton);

  return SubtitlesButton;
})(_TextTrackButton3['default']);

SubtitlesButton.prototype.kind_ = 'subtitles';
SubtitlesButton.prototype.buttonText = 'Subtitles';
SubtitlesButton.prototype.className = 'vjs-subtitles-button';

_TextTrackButton3['default'].registerComponent('SubtitlesButton', SubtitlesButton);
exports['default'] = SubtitlesButton;
module.exports = exports['default'];

},{"./text-track-button.js":28}],28:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _MenuButton2 = _dereq_('../../menu/menu-button.js');

var _MenuButton3 = _interopRequireWildcard(_MenuButton2);

var _import = _dereq_('../../lib.js');

var Lib = _interopRequireWildcard(_import);

var _TextTrackMenuItem = _dereq_('./text-track-menu-item.js');

var _TextTrackMenuItem2 = _interopRequireWildcard(_TextTrackMenuItem);

var _OffTextTrackMenuItem = _dereq_('./off-text-track-menu-item.js');

var _OffTextTrackMenuItem2 = _interopRequireWildcard(_OffTextTrackMenuItem);

/**
 * The base class for buttons that toggle specific text track types (e.g. subtitles)
 *
 * @constructor
 */

var TextTrackButton = (function (_MenuButton) {
  function TextTrackButton(player, options) {
    _classCallCheck(this, TextTrackButton);

    _get(Object.getPrototypeOf(TextTrackButton.prototype), 'constructor', this).call(this, player, options);

    var tracks = this.player_.textTracks();

    if (this.items.length <= 1) {
      this.hide();
    }

    if (!tracks) {
      return;
    }

    var updateHandler = Lib.bind(this, this.update);
    tracks.addEventListener('removetrack', updateHandler);
    tracks.addEventListener('addtrack', updateHandler);

    this.player_.on('dispose', function () {
      tracks.removeEventListener('removetrack', updateHandler);
      tracks.removeEventListener('addtrack', updateHandler);
    });
  }

  _inherits(TextTrackButton, _MenuButton);

  _createClass(TextTrackButton, [{
    key: 'createItems',

    // Create a menu item for each text track
    value: function createItems() {
      var items = arguments[0] === undefined ? [] : arguments[0];

      // Add an OFF menu item to turn all tracks off
      items.push(new _OffTextTrackMenuItem2['default'](this.player_, { kind: this.kind_ }));

      var tracks = this.player_.textTracks();

      if (!tracks) {
        return items;
      }

      for (var i = 0; i < tracks.length; i++) {
        var track = tracks[i];

        // only add tracks that are of the appropriate kind and have a label
        if (track.kind === this.kind_) {
          items.push(new _TextTrackMenuItem2['default'](this.player_, {
            track: track
          }));
        }
      }

      return items;
    }
  }]);

  return TextTrackButton;
})(_MenuButton3['default']);

_MenuButton3['default'].registerComponent('TextTrackButton', TextTrackButton);
exports['default'] = TextTrackButton;
module.exports = exports['default'];

},{"../../lib.js":46,"../../menu/menu-button.js":49,"./off-text-track-menu-item.js":26,"./text-track-menu-item.js":29}],29:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _MenuItem2 = _dereq_('../../menu/menu-item.js');

var _MenuItem3 = _interopRequireWildcard(_MenuItem2);

var _import = _dereq_('../../lib.js');

var Lib = _interopRequireWildcard(_import);

var _window = _dereq_('global/window');

var _window2 = _interopRequireWildcard(_window);

var _document = _dereq_('global/document');

var _document2 = _interopRequireWildcard(_document);

/**
 * The specific menu item type for selecting a language within a text track kind
 *
 * @constructor
 */

var TextTrackMenuItem = (function (_MenuItem) {
  function TextTrackMenuItem(player, options) {
    var _this = this;

    _classCallCheck(this, TextTrackMenuItem);

    var track = options.track;
    var tracks = player.textTracks();

    // Modify options for parent MenuItem class's init.
    options.label = track.label || track.language || 'Unknown';
    options.selected = track['default'] || track.mode === 'showing';
    _get(Object.getPrototypeOf(TextTrackMenuItem.prototype), 'constructor', this).call(this, player, options);

    this.track = track;

    if (tracks) {
      (function () {
        var changeHandler = Lib.bind(_this, _this.handleTracksChange);

        tracks.addEventListener('change', changeHandler);
        _this.on('dispose', function () {
          tracks.removeEventListener('change', changeHandler);
        });
      })();
    }

    // iOS7 doesn't dispatch change events to TextTrackLists when an
    // associated track's mode changes. Without something like
    // Object.observe() (also not present on iOS7), it's not
    // possible to detect changes to the mode attribute and polyfill
    // the change event. As a poor substitute, we manually dispatch
    // change events whenever the controls modify the mode.
    if (tracks && tracks.onchange === undefined) {
      (function () {
        var event = undefined;

        _this.on(['tap', 'click'], function () {
          if (typeof _window2['default'].Event !== 'object') {
            // Android 2.3 throws an Illegal Constructor error for window.Event
            try {
              event = new _window2['default'].Event('change');
            } catch (err) {}
          }

          if (!event) {
            event = _document2['default'].createEvent('Event');
            event.initEvent('change', true, true);
          }

          tracks.dispatchEvent(event);
        });
      })();
    }
  }

  _inherits(TextTrackMenuItem, _MenuItem);

  _createClass(TextTrackMenuItem, [{
    key: 'handleClick',
    value: function handleClick(event) {
      var kind = this.track.kind;
      var tracks = this.player_.textTracks();

      _get(Object.getPrototypeOf(TextTrackMenuItem.prototype), 'handleClick', this).call(this, event);

      if (!tracks) {
        return;
      }for (var i = 0; i < tracks.length; i++) {
        var track = tracks[i];

        if (track.kind !== kind) {
          continue;
        }

        if (track === this.track) {
          track.mode = 'showing';
        } else {
          track.mode = 'disabled';
        }
      }
    }
  }, {
    key: 'handleTracksChange',
    value: function handleTracksChange(event) {
      this.selected(this.track.mode === 'showing');
    }
  }]);

  return TextTrackMenuItem;
})(_MenuItem3['default']);

_MenuItem3['default'].registerComponent('TextTrackMenuItem', TextTrackMenuItem);
exports['default'] = TextTrackMenuItem;
module.exports = exports['default'];

},{"../../lib.js":46,"../../menu/menu-item.js":50,"global/document":1,"global/window":2}],30:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _Component2 = _dereq_('../../component.js');

var _Component3 = _interopRequireWildcard(_Component2);

var _import = _dereq_('../../lib.js');

var Lib = _interopRequireWildcard(_import);

/**
 * Displays the current time
 * @param {Player|Object} player
 * @param {Object=} options
 * @constructor
 */

var CurrentTimeDisplay = (function (_Component) {
  function CurrentTimeDisplay(player, options) {
    _classCallCheck(this, CurrentTimeDisplay);

    _get(Object.getPrototypeOf(CurrentTimeDisplay.prototype), 'constructor', this).call(this, player, options);

    this.on(player, 'timeupdate', this.updateContent);
  }

  _inherits(CurrentTimeDisplay, _Component);

  _createClass(CurrentTimeDisplay, [{
    key: 'createEl',
    value: function createEl() {
      var el = _get(Object.getPrototypeOf(CurrentTimeDisplay.prototype), 'createEl', this).call(this, 'div', {
        className: 'vjs-current-time vjs-time-control vjs-control'
      });

      this.contentEl_ = Lib.createEl('div', {
        className: 'vjs-current-time-display',
        innerHTML: '<span class="vjs-control-text">Current Time </span>' + '0:00', // label the current time for screen reader users
        'aria-live': 'off' // tell screen readers not to automatically read the time as it changes
      });

      el.appendChild(this.contentEl_);
      return el;
    }
  }, {
    key: 'updateContent',
    value: function updateContent() {
      // Allows for smooth scrubbing, when player can't keep up.
      var time = this.player_.scrubbing ? this.player_.getCache().currentTime : this.player_.currentTime();
      var localizedText = this.localize('Current Time');
      var formattedTime = Lib.formatTime(time, this.player_.duration());
      this.contentEl_.innerHTML = '<span class="vjs-control-text">' + localizedText + '</span> ' + formattedTime;
    }
  }]);

  return CurrentTimeDisplay;
})(_Component3['default']);

_Component3['default'].registerComponent('CurrentTimeDisplay', CurrentTimeDisplay);
exports['default'] = CurrentTimeDisplay;
module.exports = exports['default'];

},{"../../component.js":7,"../../lib.js":46}],31:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _Component2 = _dereq_('../../component.js');

var _Component3 = _interopRequireWildcard(_Component2);

var _import = _dereq_('../../lib.js');

var Lib = _interopRequireWildcard(_import);

/**
 * Displays the duration
 * @param {Player|Object} player
 * @param {Object=} options
 * @constructor
 */

var DurationDisplay = (function (_Component) {
  function DurationDisplay(player, options) {
    _classCallCheck(this, DurationDisplay);

    _get(Object.getPrototypeOf(DurationDisplay.prototype), 'constructor', this).call(this, player, options);

    // this might need to be changed to 'durationchange' instead of 'timeupdate' eventually,
    // however the durationchange event fires before this.player_.duration() is set,
    // so the value cannot be written out using this method.
    // Once the order of durationchange and this.player_.duration() being set is figured out,
    // this can be updated.
    this.on(player, 'timeupdate', this.updateContent);
  }

  _inherits(DurationDisplay, _Component);

  _createClass(DurationDisplay, [{
    key: 'createEl',
    value: function createEl() {
      var el = _get(Object.getPrototypeOf(DurationDisplay.prototype), 'createEl', this).call(this, 'div', {
        className: 'vjs-duration vjs-time-control vjs-control'
      });

      this.contentEl_ = Lib.createEl('div', {
        className: 'vjs-duration-display',
        innerHTML: '<span class="vjs-control-text">' + this.localize('Duration Time') + '</span> 0:00', // label the duration time for screen reader users
        'aria-live': 'off' // tell screen readers not to automatically read the time as it changes
      });

      el.appendChild(this.contentEl_);
      return el;
    }
  }, {
    key: 'updateContent',
    value: function updateContent() {
      var duration = this.player_.duration();
      if (duration) {
        var localizedText = this.localize('Duration Time');
        var formattedTime = Lib.formatTime(duration);
        this.contentEl_.innerHTML = '<span class="vjs-control-text">' + localizedText + '</span> ' + formattedTime; // label the duration time for screen reader users
      }
    }
  }]);

  return DurationDisplay;
})(_Component3['default']);

_Component3['default'].registerComponent('DurationDisplay', DurationDisplay);
exports['default'] = DurationDisplay;
module.exports = exports['default'];

},{"../../component.js":7,"../../lib.js":46}],32:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _Component2 = _dereq_('../../component.js');

var _Component3 = _interopRequireWildcard(_Component2);

var _import = _dereq_('../../lib');

var Lib = _interopRequireWildcard(_import);

/**
 * Displays the time left in the video
 * @param {Player|Object} player
 * @param {Object=} options
 * @constructor
 */

var RemainingTimeDisplay = (function (_Component) {
  function RemainingTimeDisplay(player, options) {
    _classCallCheck(this, RemainingTimeDisplay);

    _get(Object.getPrototypeOf(RemainingTimeDisplay.prototype), 'constructor', this).call(this, player, options);

    this.on(player, 'timeupdate', this.updateContent);
  }

  _inherits(RemainingTimeDisplay, _Component);

  _createClass(RemainingTimeDisplay, [{
    key: 'createEl',
    value: function createEl() {
      var el = _get(Object.getPrototypeOf(RemainingTimeDisplay.prototype), 'createEl', this).call(this, 'div', {
        className: 'vjs-remaining-time vjs-time-control vjs-control'
      });

      this.contentEl_ = Lib.createEl('div', {
        className: 'vjs-remaining-time-display',
        innerHTML: '<span class="vjs-control-text">' + this.localize('Remaining Time') + '</span> -0:00', // label the remaining time for screen reader users
        'aria-live': 'off' // tell screen readers not to automatically read the time as it changes
      });

      el.appendChild(this.contentEl_);
      return el;
    }
  }, {
    key: 'updateContent',
    value: function updateContent() {
      if (this.player_.duration()) {
        var localizedText = this.localize('Remaining Time');
        var formattedTime = Lib.formatTime(this.player_.remainingTime());
        this.contentEl_.innerHTML = '<span class="vjs-control-text">' + localizedText + '</span> -' + formattedTime;
      }

      // Allows for smooth scrubbing, when player can't keep up.
      // var time = (this.player_.scrubbing) ? this.player_.getCache().currentTime : this.player_.currentTime();
      // this.contentEl_.innerHTML = vjs.formatTime(time, this.player_.duration());
    }
  }]);

  return RemainingTimeDisplay;
})(_Component3['default']);

_Component3['default'].registerComponent('RemainingTimeDisplay', RemainingTimeDisplay);
exports['default'] = RemainingTimeDisplay;
module.exports = exports['default'];

},{"../../component.js":7,"../../lib":46}],33:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _Component2 = _dereq_('../../component.js');

var _Component3 = _interopRequireWildcard(_Component2);

/**
 * The separator between the current time and duration
 *
 * Can be hidden if it's not needed in the design.
 *
 * @param {Player|Object} player
 * @param {Object=} options
 * @constructor
 */

var TimeDivider = (function (_Component) {
  function TimeDivider() {
    _classCallCheck(this, TimeDivider);

    if (_Component != null) {
      _Component.apply(this, arguments);
    }
  }

  _inherits(TimeDivider, _Component);

  _createClass(TimeDivider, [{
    key: 'createEl',
    value: function createEl() {
      return _get(Object.getPrototypeOf(TimeDivider.prototype), 'createEl', this).call(this, 'div', {
        className: 'vjs-time-control vjs-time-divider',
        innerHTML: '<div><span>/</span></div>'
      });
    }
  }]);

  return TimeDivider;
})(_Component3['default']);

_Component3['default'].registerComponent('TimeDivider', TimeDivider);
exports['default'] = TimeDivider;
module.exports = exports['default'];

},{"../../component.js":7}],34:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _Slider2 = _dereq_('../../slider/slider.js');

var _Slider3 = _interopRequireWildcard(_Slider2);

var _import = _dereq_('../../lib.js');

var Lib = _interopRequireWildcard(_import);

// Required children

var _VolumeHandle = _dereq_('./volume-handle.js');

var _VolumeHandle2 = _interopRequireWildcard(_VolumeHandle);

var _VolumeLevel = _dereq_('./volume-level.js');

var _VolumeLevel2 = _interopRequireWildcard(_VolumeLevel);

/**
 * The bar that contains the volume level and can be clicked on to adjust the level
 *
 * @param {Player|Object} player
 * @param {Object=} options
 * @constructor
 */

var VolumeBar = (function (_Slider) {
  function VolumeBar(player, options) {
    _classCallCheck(this, VolumeBar);

    _get(Object.getPrototypeOf(VolumeBar.prototype), 'constructor', this).call(this, player, options);
    this.on(player, 'volumechange', this.updateARIAAttributes);
    player.ready(Lib.bind(this, this.updateARIAAttributes));
  }

  _inherits(VolumeBar, _Slider);

  _createClass(VolumeBar, [{
    key: 'createEl',
    value: function createEl() {
      return _get(Object.getPrototypeOf(VolumeBar.prototype), 'createEl', this).call(this, 'div', {
        className: 'vjs-volume-bar',
        'aria-label': 'volume level'
      });
    }
  }, {
    key: 'handleMouseMove',
    value: function handleMouseMove(event) {
      if (this.player_.muted()) {
        this.player_.muted(false);
      }

      this.player_.volume(this.calculateDistance(event));
    }
  }, {
    key: 'getPercent',
    value: function getPercent() {
      if (this.player_.muted()) {
        return 0;
      } else {
        return this.player_.volume();
      }
    }
  }, {
    key: 'stepForward',
    value: function stepForward() {
      this.player_.volume(this.player_.volume() + 0.1);
    }
  }, {
    key: 'stepBack',
    value: function stepBack() {
      this.player_.volume(this.player_.volume() - 0.1);
    }
  }, {
    key: 'updateARIAAttributes',
    value: function updateARIAAttributes() {
      // Current value of volume bar as a percentage
      this.el_.setAttribute('aria-valuenow', Lib.round(this.player_.volume() * 100, 2));
      this.el_.setAttribute('aria-valuetext', Lib.round(this.player_.volume() * 100, 2) + '%');
    }
  }]);

  return VolumeBar;
})(_Slider3['default']);

VolumeBar.prototype.options_ = {
  children: {
    volumeLevel: {},
    volumeHandle: {}
  },
  barName: 'volumeLevel',
  handleName: 'volumeHandle'
};

VolumeBar.prototype.playerEvent = 'volumechange';

_Slider3['default'].registerComponent('VolumeBar', VolumeBar);
exports['default'] = VolumeBar;
module.exports = exports['default'];

},{"../../lib.js":46,"../../slider/slider.js":58,"./volume-handle.js":36,"./volume-level.js":37}],35:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _Component2 = _dereq_('../../component.js');

var _Component3 = _interopRequireWildcard(_Component2);

var _import = _dereq_('../../lib.js');

var Lib = _interopRequireWildcard(_import);

// Required children

var _VolumeBar = _dereq_('./volume-bar.js');

var _VolumeBar2 = _interopRequireWildcard(_VolumeBar);

/**
 * The component for controlling the volume level
 *
 * @param {Player|Object} player
 * @param {Object=} options
 * @constructor
 */

var VolumeControl = (function (_Component) {
  function VolumeControl(player, options) {
    _classCallCheck(this, VolumeControl);

    _get(Object.getPrototypeOf(VolumeControl.prototype), 'constructor', this).call(this, player, options);

    // hide volume controls when they're not supported by the current tech
    if (player.tech && player.tech.featuresVolumeControl === false) {
      this.addClass('vjs-hidden');
    }
    this.on(player, 'loadstart', function () {
      if (player.tech.featuresVolumeControl === false) {
        this.addClass('vjs-hidden');
      } else {
        this.removeClass('vjs-hidden');
      }
    });
  }

  _inherits(VolumeControl, _Component);

  _createClass(VolumeControl, [{
    key: 'createEl',
    value: function createEl() {
      return _get(Object.getPrototypeOf(VolumeControl.prototype), 'createEl', this).call(this, 'div', {
        className: 'vjs-volume-control vjs-control'
      });
    }
  }]);

  return VolumeControl;
})(_Component3['default']);

VolumeControl.prototype.options_ = {
  children: {
    volumeBar: {}
  }
};

_Component3['default'].registerComponent('VolumeControl', VolumeControl);
exports['default'] = VolumeControl;
module.exports = exports['default'];

},{"../../component.js":7,"../../lib.js":46,"./volume-bar.js":34}],36:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _SliderHandle2 = _dereq_('../../slider/slider-handle.js');

var _SliderHandle3 = _interopRequireWildcard(_SliderHandle2);

/**
 * The volume handle can be dragged to adjust the volume level
 *
 * @param {Player|Object} player
 * @param {Object=} options
 * @constructor
 */

var VolumeHandle = (function (_SliderHandle) {
  function VolumeHandle() {
    _classCallCheck(this, VolumeHandle);

    if (_SliderHandle != null) {
      _SliderHandle.apply(this, arguments);
    }
  }

  _inherits(VolumeHandle, _SliderHandle);

  _createClass(VolumeHandle, [{
    key: 'createEl',

    /** @inheritDoc */
    value: function createEl() {
      return _get(Object.getPrototypeOf(VolumeHandle.prototype), 'createEl', this).call(this, 'div', {
        className: 'vjs-volume-handle'
      });
    }
  }]);

  return VolumeHandle;
})(_SliderHandle3['default']);

VolumeHandle.prototype.defaultValue = '00:00';

_SliderHandle3['default'].registerComponent('VolumeHandle', VolumeHandle);
exports['default'] = VolumeHandle;
module.exports = exports['default'];

},{"../../slider/slider-handle.js":57}],37:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _Component2 = _dereq_('../../component.js');

var _Component3 = _interopRequireWildcard(_Component2);

/**
 * Shows volume level
 *
 * @param {Player|Object} player
 * @param {Object=} options
 * @constructor
 */

var VolumeLevel = (function (_Component) {
  function VolumeLevel() {
    _classCallCheck(this, VolumeLevel);

    if (_Component != null) {
      _Component.apply(this, arguments);
    }
  }

  _inherits(VolumeLevel, _Component);

  _createClass(VolumeLevel, [{
    key: 'createEl',
    value: function createEl() {
      return _get(Object.getPrototypeOf(VolumeLevel.prototype), 'createEl', this).call(this, 'div', {
        className: 'vjs-volume-level',
        innerHTML: '<span class="vjs-control-text"></span>'
      });
    }
  }]);

  return VolumeLevel;
})(_Component3['default']);

_Component3['default'].registerComponent('VolumeLevel', VolumeLevel);
exports['default'] = VolumeLevel;
module.exports = exports['default'];

},{"../../component.js":7}],38:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _Button = _dereq_('../button.js');

var _Button2 = _interopRequireWildcard(_Button);

var _Menu = _dereq_('../menu/menu.js');

var _Menu2 = _interopRequireWildcard(_Menu);

var _MenuButton2 = _dereq_('../menu/menu-button.js');

var _MenuButton3 = _interopRequireWildcard(_MenuButton2);

var _MuteToggle = _dereq_('./mute-toggle.js');

var _MuteToggle2 = _interopRequireWildcard(_MuteToggle);

var _import = _dereq_('../lib.js');

var Lib = _interopRequireWildcard(_import);

var _VolumeBar = _dereq_('./volume-control/volume-bar.js');

var _VolumeBar2 = _interopRequireWildcard(_VolumeBar);

/**
 * Menu button with a popup for showing the volume slider.
 * @constructor
 */

var VolumeMenuButton = (function (_MenuButton) {
  function VolumeMenuButton(player, options) {
    _classCallCheck(this, VolumeMenuButton);

    _get(Object.getPrototypeOf(VolumeMenuButton.prototype), 'constructor', this).call(this, player, options);

    // Same listeners as MuteToggle
    this.on(player, 'volumechange', this.volumeUpdate);

    // hide mute toggle if the current tech doesn't support volume control
    if (player.tech && player.tech.featuresVolumeControl === false) {
      this.addClass('vjs-hidden');
    }
    this.on(player, 'loadstart', function () {
      if (player.tech.featuresVolumeControl === false) {
        this.addClass('vjs-hidden');
      } else {
        this.removeClass('vjs-hidden');
      }
    });
    this.addClass('vjs-menu-button');
  }

  _inherits(VolumeMenuButton, _MenuButton);

  _createClass(VolumeMenuButton, [{
    key: 'createMenu',
    value: function createMenu() {
      var menu = new _Menu2['default'](this.player_, {
        contentElType: 'div'
      });

      // The volumeBar is vertical by default in the base theme when used with a VolumeMenuButton
      var options = this.options_.volumeBar || {};
      options.vertical = options.vertical || true;

      var vc = new _VolumeBar2['default'](this.player_, options);

      vc.on('focus', function () {
        menu.lockShowing();
      });
      vc.on('blur', function () {
        menu.unlockShowing();
      });
      menu.addChild(vc);
      return menu;
    }
  }, {
    key: 'handleClick',
    value: function handleClick() {
      _MuteToggle2['default'].prototype.handleClick.call(this);
      _get(Object.getPrototypeOf(VolumeMenuButton.prototype), 'handleClick', this).call(this);
    }
  }, {
    key: 'createEl',
    value: function createEl() {
      return _get(Object.getPrototypeOf(VolumeMenuButton.prototype), 'createEl', this).call(this, 'div', {
        className: 'vjs-volume-menu-button vjs-menu-button vjs-control vjs-button',
        innerHTML: '<div><span class="vjs-control-text">' + this.localize('Mute') + '</span></div>'
      });
    }
  }]);

  return VolumeMenuButton;
})(_MenuButton3['default']);

VolumeMenuButton.prototype.volumeUpdate = _MuteToggle2['default'].prototype.update;

_Button2['default'].registerComponent('VolumeMenuButton', VolumeMenuButton);
exports['default'] = VolumeMenuButton;
module.exports = exports['default'];

},{"../button.js":6,"../lib.js":46,"../menu/menu-button.js":49,"../menu/menu.js":51,"./mute-toggle.js":11,"./volume-control/volume-bar.js":34}],39:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _import = _dereq_('./lib');

var Lib = _interopRequireWildcard(_import);

/**
 * Core Object/Class for objects that use inheritance + constructors
 *
 * To create a class that can be subclassed itself, extend the CoreObject class.
 *
 *     var Animal = CoreObject.extend();
 *     var Horse = Animal.extend();
 *
 * The constructor can be defined through the init property of an object argument.
 *
 *     var Animal = CoreObject.extend({
 *       init: function(name, sound){
 *         this.name = name;
 *       }
 *     });
 *
 * Other methods and properties can be added the same way, or directly to the
 * prototype.
 *
 *    var Animal = CoreObject.extend({
 *       init: function(name){
 *         this.name = name;
 *       },
 *       getName: function(){
 *         return this.name;
 *       },
 *       sound: '...'
 *    });
 *
 *    Animal.prototype.makeSound = function(){
 *      alert(this.sound);
 *    };
 *
 * To create an instance of a class, use the create method.
 *
 *    var fluffy = Animal.create('Fluffy');
 *    fluffy.getName(); // -> Fluffy
 *
 * Methods and properties can be overridden in subclasses.
 *
 *     var Horse = Animal.extend({
 *       sound: 'Neighhhhh!'
 *     });
 *
 *     var horsey = Horse.create('Horsey');
 *     horsey.getName(); // -> Horsey
 *     horsey.makeSound(); // -> Alert: Neighhhhh!
 *
 * @class
 * @constructor
 */
var CoreObject = function CoreObject() {};
// Manually exporting vjs['CoreObject'] here for Closure Compiler
// because of the use of the extend/create class methods
// If we didn't do this, those functions would get flattened to something like
// `a = ...` and `this.prototype` would refer to the global object instead of
// CoreObject

/**
 * Create a new object that inherits from this Object
 *
 *     var Animal = CoreObject.extend();
 *     var Horse = Animal.extend();
 *
 * @param {Object} props Functions and properties to be applied to the
 *                       new object's prototype
 * @return {CoreObject} An object that inherits from CoreObject
 * @this {*}
 */
CoreObject.extend = function () {
  var props = arguments[0] === undefined ? {} : arguments[0];

  // Set up the constructor using the supplied init method
  // or using the init of the parent object
  // Make sure to check the unobfuscated version for external libs
  var init = props.init || props.init || this.prototype.init || this.prototype.init || function () {};
  // In Resig's simple class inheritance (previously used) the constructor
  //  is a function that calls `this.init.apply(arguments)`
  // However that would prevent us from using `ParentObject.call(this);`
  //  in a Child constructor because the `this` in `this.init`
  //  would still refer to the Child and cause an infinite loop.
  // We would instead have to do
  //    `ParentObject.prototype.init.apply(this, arguments);`
  //  Bleh. We're not creating a _super() function, so it's good to keep
  //  the parent constructor reference simple.
  var subObj = function subObj() {
    init.apply(this, arguments);
  };

  // Inherit from this object's prototype
  subObj.prototype = Lib.obj.create(this.prototype);
  // Reset the constructor property for subObj otherwise
  // instances of subObj would have the constructor of the parent Object
  subObj.prototype.constructor = subObj;

  // Make the class extendable
  subObj.extend = CoreObject.extend;
  // Make a function for creating instances
  subObj.create = CoreObject.create;

  // Extend subObj's prototype with functions and other properties from props
  for (var name in props) {
    if (props.hasOwnProperty(name)) {
      subObj.prototype[name] = props[name];
    }
  }

  return subObj;
};

/**
 * Create a new instance of this Object class
 *
 *     var myAnimal = Animal.create();
 *
 * @return {CoreObject} An instance of a CoreObject subclass
 * @this {*}
 */
CoreObject.create = function () {
  // Create a new object that inherits from this object's prototype
  var inst = Lib.obj.create(this.prototype);

  // Apply this constructor function to the new object
  this.apply(inst, arguments);

  // Return the new object
  return inst;
};

exports['default'] = CoreObject;
module.exports = exports['default'];

},{"./lib":46}],40:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

Object.defineProperty(exports, '__esModule', {
  value: true
});
/**
 * @fileoverview Main function src.
 */

var _Player = _dereq_('./player');

var _Player2 = _interopRequireWildcard(_Player);

var _Plugins = _dereq_('./plugins');

var _Plugins2 = _interopRequireWildcard(_Plugins);

var _Options = _dereq_('./options');

var _Options2 = _interopRequireWildcard(_Options);

var _import = _dereq_('./lib');

var Lib = _interopRequireWildcard(_import);

var _import2 = _dereq_('./util');

var VjsUtil = _interopRequireWildcard(_import2);

var _CoreObject = _dereq_('./core-object');

var _CoreObject2 = _interopRequireWildcard(_CoreObject);

var _document = _dereq_('global/document');

var _document2 = _interopRequireWildcard(_document);

/**
 * Doubles as the main function for users to create a player instance and also
 * the main library object.
 *
 * **ALIASES** videojs, _V_ (deprecated)
 *
 * The `vjs` function can be used to initialize or retrieve a player.
 *
 *     var myPlayer = vjs('my_video_id');
 *
 * @param  {String|Element} id      Video element or video element ID
 * @param  {Object=} options        Optional options object for config/settings
 * @param  {Function=} ready        Optional ready callback
 * @return {Player}             A player instance
 * @namespace
 */
var videojs = function videojs(id, options, ready) {
  var tag; // Element of ID

  // Allow for element or ID to be passed in
  // String ID
  if (typeof id === 'string') {

    // Adjust for jQuery ID syntax
    if (id.indexOf('#') === 0) {
      id = id.slice(1);
    }

    // If a player instance has already been created for this ID return it.
    if (_Player2['default'].players[id]) {

      // If options or ready funtion are passed, warn
      if (options) {
        Lib.log.warn('Player "' + id + '" is already initialised. Options will not be applied.');
      }

      if (ready) {
        _Player2['default'].players[id].ready(ready);
      }

      return _Player2['default'].players[id];

      // Otherwise get element for ID
    } else {
      tag = Lib.el(id);
    }

    // ID is a media element
  } else {
    tag = id;
  }

  // Check for a useable element
  if (!tag || !tag.nodeName) {
    // re: nodeName, could be a box div also
    throw new TypeError('The element or ID supplied is not valid. (videojs)'); // Returns
  }

  // Element may have a player attr referring to an already created player instance.
  // If not, set up a new player and return the instance.
  return tag.player || new _Player2['default'](tag, options, ready);
};

// CDN Version. Used to target right flash swf.
videojs.CDN_VERSION = '5.0';
videojs.ACCESS_PROTOCOL = 'https:' === _document2['default'].location.protocol ? 'https://' : 'http://';

/**
* Full player version
* @type {string}
*/
videojs.VERSION = '5.0.0-15';

// Set CDN Version of swf
// The added (+) blocks the replace from changing this _VERSION_NO_PATCH_ string
if (videojs.CDN_VERSION !== '__VERSION_' + 'NO_PATCH__') {
  _Options2['default'].flash.swf = '' + videojs.ACCESS_PROTOCOL + 'vjs.zencdn.net/' + videojs.CDN_VERSION + '/video-js.swf';
}

/**
 * Utility function for adding languages to the default options. Useful for
 * amending multiple language support at runtime.
 *
 * Example: videojs.addLanguage('es', {'Hello':'Hola'});
 *
 * @param  {String} code The language code or dictionary property
 * @param  {Object} data The data values to be translated
 * @return {Object} The resulting global languages dictionary object
 */
videojs.addLanguage = function (code, data) {
  if (_Options2['default'].languages[code] !== undefined) {
    _Options2['default'].languages[code] = VjsUtil.mergeOptions(_Options2['default'].languages[code], data);
  } else {
    _Options2['default'].languages[code] = data;
  }
  return _Options2['default'].languages;
};

/**
 * Custom Universal Module Definition (UMD)
 *
 * Video.js will never be a non-browser lib so we can simplify UMD a bunch and
 * still support requirejs and browserify. This also needs to be closure
 * compiler compatible, so string keys are used.
 */
if (typeof define === 'function' && define.amd) {
  define('videojs', [], function () {
    return videojs;
  });

  // checking that module is an object too because of umdjs/umd#35
} else if (typeof exports === 'object' && typeof module === 'object') {
  module.exports = videojs;
}

exports['default'] = videojs;
module.exports = exports['default'];

},{"./core-object":39,"./lib":46,"./options":52,"./player":53,"./plugins":54,"./util":70,"global/document":1}],41:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _Component2 = _dereq_('./component');

var _Component3 = _interopRequireWildcard(_Component2);

var _import = _dereq_('./lib');

var Lib = _interopRequireWildcard(_import);

/**
 * Display that an error has occurred making the video unplayable
 * @param {Player|Object} player
 * @param {Object=} options
 * @constructor
 */

var ErrorDisplay = (function (_Component) {
  function ErrorDisplay(player, options) {
    _classCallCheck(this, ErrorDisplay);

    _get(Object.getPrototypeOf(ErrorDisplay.prototype), 'constructor', this).call(this, player, options);

    this.update();
    this.on(player, 'error', this.update);
  }

  _inherits(ErrorDisplay, _Component);

  _createClass(ErrorDisplay, [{
    key: 'createEl',
    value: function createEl() {
      var el = _get(Object.getPrototypeOf(ErrorDisplay.prototype), 'createEl', this).call(this, 'div', {
        className: 'vjs-error-display'
      });

      this.contentEl_ = Lib.createEl('div');
      el.appendChild(this.contentEl_);

      return el;
    }
  }, {
    key: 'update',
    value: function update() {
      if (this.player().error()) {
        this.contentEl_.innerHTML = this.localize(this.player().error().message);
      }
    }
  }]);

  return ErrorDisplay;
})(_Component3['default']);

_Component3['default'].registerComponent('ErrorDisplay', ErrorDisplay);
exports['default'] = ErrorDisplay;
module.exports = exports['default'];

},{"./component":7,"./lib":46}],42:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _import = _dereq_('./events');

var Events = _interopRequireWildcard(_import);

var _import2 = _dereq_('./lib');

var Lib = _interopRequireWildcard(_import2);

var EventEmitter = function EventEmitter() {};

EventEmitter.prototype.allowedEvents_ = {};

EventEmitter.prototype.on = function (type, fn) {
  // Remove the addEventListener alias before calling Events.on
  // so we don't get into an infinite type loop
  var ael = this.addEventListener;
  this.addEventListener = Function.prototype;
  Events.on(this, type, fn);
  this.addEventListener = ael;
};
EventEmitter.prototype.addEventListener = EventEmitter.prototype.on;

EventEmitter.prototype.off = function (type, fn) {
  Events.off(this, type, fn);
};
EventEmitter.prototype.removeEventListener = EventEmitter.prototype.off;

EventEmitter.prototype.one = function (type, fn) {
  Events.one(this, type, fn);
};

EventEmitter.prototype.trigger = function (event) {
  var type = event.type || event;

  if (typeof event === 'string') {
    event = {
      type: type
    };
  }
  event = Events.fixEvent(event);

  if (this.allowedEvents_[type] && this['on' + type]) {
    this['on' + type](event);
  }

  Events.trigger(this, event);
};
// The standard DOM EventTarget.dispatchEvent() is aliased to trigger()
EventEmitter.prototype.dispatchEvent = EventEmitter.prototype.trigger;

exports['default'] = EventEmitter;
module.exports = exports['default'];

},{"./events":43,"./lib":46}],43:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

Object.defineProperty(exports, '__esModule', {
  value: true
});
/**
 * @fileoverview Event System (John Resig - Secrets of a JS Ninja http://jsninja.com/)
 * (Original book version wasn't completely usable, so fixed some things and made Closure Compiler compatible)
 * This should work very similarly to jQuery's events, however it's based off the book version which isn't as
 * robust as jquery's, so there's probably some differences.
 */

var _import = _dereq_('./lib');

var Lib = _interopRequireWildcard(_import);

var _window = _dereq_('global/window');

var _window2 = _interopRequireWildcard(_window);

var _document = _dereq_('global/document');

var _document2 = _interopRequireWildcard(_document);

/**
 * Fix a native event to have standard property values
 * @param  {Object} event Event object to fix
 * @return {Object}
 * @private
 */
var fixEvent = function fixEvent(event) {

  function returnTrue() {
    return true;
  }
  function returnFalse() {
    return false;
  }

  // Test if fixing up is needed
  // Used to check if !event.stopPropagation instead of isPropagationStopped
  // But native events return true for stopPropagation, but don't have
  // other expected methods like isPropagationStopped. Seems to be a problem
  // with the Javascript Ninja code. So we're just overriding all events now.
  if (!event || !event.isPropagationStopped) {
    var old = event || _window2['default'].event;

    event = {};
    // Clone the old object so that we can modify the values event = {};
    // IE8 Doesn't like when you mess with native event properties
    // Firefox returns false for event.hasOwnProperty('type') and other props
    //  which makes copying more difficult.
    // TODO: Probably best to create a whitelist of event props
    for (var key in old) {
      // Safari 6.0.3 warns you if you try to copy deprecated layerX/Y
      // Chrome warns you if you try to copy deprecated keyboardEvent.keyLocation
      if (key !== 'layerX' && key !== 'layerY' && key !== 'keyLocation') {
        // Chrome 32+ warns if you try to copy deprecated returnValue, but
        // we still want to if preventDefault isn't supported (IE8).
        if (!(key === 'returnValue' && old.preventDefault)) {
          event[key] = old[key];
        }
      }
    }

    // The event occurred on this element
    if (!event.target) {
      event.target = event.srcElement || _document2['default'];
    }

    // Handle which other element the event is related to
    event.relatedTarget = event.fromElement === event.target ? event.toElement : event.fromElement;

    // Stop the default browser action
    event.preventDefault = function () {
      if (old.preventDefault) {
        old.preventDefault();
      }
      event.returnValue = false;
      event.defaultPrevented = true;
    };

    event.defaultPrevented = false;

    // Stop the event from bubbling
    event.stopPropagation = function () {
      if (old.stopPropagation) {
        old.stopPropagation();
      }
      event.cancelBubble = true;
      event.isPropagationStopped = returnTrue;
    };

    event.isPropagationStopped = returnFalse;

    // Stop the event from bubbling and executing other handlers
    event.stopImmediatePropagation = function () {
      if (old.stopImmediatePropagation) {
        old.stopImmediatePropagation();
      }
      event.isImmediatePropagationStopped = returnTrue;
      event.stopPropagation();
    };

    event.isImmediatePropagationStopped = returnFalse;

    // Handle mouse position
    if (event.clientX != null) {
      var doc = _document2['default'].documentElement,
          body = _document2['default'].body;

      event.pageX = event.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
      event.pageY = event.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
    }

    // Handle key presses
    event.which = event.charCode || event.keyCode;

    // Fix button for mouse clicks:
    // 0 == left; 1 == middle; 2 == right
    if (event.button != null) {
      event.button = event.button & 1 ? 0 : event.button & 4 ? 1 : event.button & 2 ? 2 : 0;
    }
  }

  // Returns fixed-up instance
  return event;
};

/**
 * Add an event listener to element
 * It stores the handler function in a separate cache object
 * and adds a generic handler to the element's event,
 * along with a unique id (guid) to the element.
 * @param  {Element|Object}   elem Element or object to bind listeners to
 * @param  {String|Array}   type Type of event to bind to.
 * @param  {Function} fn   Event listener.
 * @private
 */
var on = (function (_on) {
  function on(_x, _x2, _x3) {
    return _on.apply(this, arguments);
  }

  on.toString = function () {
    return _on.toString();
  };

  return on;
})(function (elem, type, fn) {
  if (Lib.obj.isArray(type)) {
    return _handleMultipleEvents(on, elem, type, fn);
  }

  var data = Lib.getData(elem);

  // We need a place to store all our handler data
  if (!data.handlers) data.handlers = {};

  if (!data.handlers[type]) data.handlers[type] = [];

  if (!fn.guid) fn.guid = Lib.guid++;

  data.handlers[type].push(fn);

  if (!data.dispatcher) {
    data.disabled = false;

    data.dispatcher = function (event) {

      if (data.disabled) return;
      event = fixEvent(event);

      var handlers = data.handlers[event.type];

      if (handlers) {
        // Copy handlers so if handlers are added/removed during the process it doesn't throw everything off.
        var handlersCopy = handlers.slice(0);

        for (var m = 0, n = handlersCopy.length; m < n; m++) {
          if (event.isImmediatePropagationStopped()) {
            break;
          } else {
            handlersCopy[m].call(elem, event);
          }
        }
      }
    };
  }

  if (data.handlers[type].length === 1) {
    if (elem.addEventListener) {
      elem.addEventListener(type, data.dispatcher, false);
    } else if (elem.attachEvent) {
      elem.attachEvent('on' + type, data.dispatcher);
    }
  }
});

/**
 * Removes event listeners from an element
 * @param  {Element|Object}   elem Object to remove listeners from
 * @param  {String|Array=}   type Type of listener to remove. Don't include to remove all events from element.
 * @param  {Function} fn   Specific listener to remove. Don't include to remove listeners for an event type.
 * @private
 */
var off = (function (_off) {
  function off(_x4, _x5, _x6) {
    return _off.apply(this, arguments);
  }

  off.toString = function () {
    return _off.toString();
  };

  return off;
})(function (elem, type, fn) {
  // Don't want to add a cache object through getData if not needed
  if (!Lib.hasData(elem)) return;

  var data = Lib.getData(elem);

  // If no events exist, nothing to unbind
  if (!data.handlers) {
    return;
  }

  if (Lib.obj.isArray(type)) {
    return _handleMultipleEvents(off, elem, type, fn);
  }

  // Utility function
  var removeType = function removeType(t) {
    data.handlers[t] = [];
    cleanUpEvents(elem, t);
  };

  // Are we removing all bound events?
  if (!type) {
    for (var t in data.handlers) {
      removeType(t);
    }return;
  }

  var handlers = data.handlers[type];

  // If no handlers exist, nothing to unbind
  if (!handlers) return;

  // If no listener was provided, remove all listeners for type
  if (!fn) {
    removeType(type);
    return;
  }

  // We're only removing a single handler
  if (fn.guid) {
    for (var n = 0; n < handlers.length; n++) {
      if (handlers[n].guid === fn.guid) {
        handlers.splice(n--, 1);
      }
    }
  }

  cleanUpEvents(elem, type);
});

/**
 * Clean up the listener cache and dispatchers
 * @param  {Element|Object} elem Element to clean up
 * @param  {String} type Type of event to clean up
 * @private
 */
var cleanUpEvents = function cleanUpEvents(elem, type) {
  var data = Lib.getData(elem);

  // Remove the events of a particular type if there are none left
  if (data.handlers[type].length === 0) {
    delete data.handlers[type];
    // data.handlers[type] = null;
    // Setting to null was causing an error with data.handlers

    // Remove the meta-handler from the element
    if (elem.removeEventListener) {
      elem.removeEventListener(type, data.dispatcher, false);
    } else if (elem.detachEvent) {
      elem.detachEvent('on' + type, data.dispatcher);
    }
  }

  // Remove the events object if there are no types left
  if (Lib.isEmpty(data.handlers)) {
    delete data.handlers;
    delete data.dispatcher;
    delete data.disabled;

    // data.handlers = null;
    // data.dispatcher = null;
    // data.disabled = null;
  }

  // Finally remove the expando if there is no data left
  if (Lib.isEmpty(data)) {
    Lib.removeData(elem);
  }
};

/**
 * Trigger an event for an element
 * @param  {Element|Object}      elem  Element to trigger an event on
 * @param  {Event|Object|String} event A string (the type) or an event object with a type attribute
 * @private
 */
var trigger = (function (_trigger) {
  function trigger(_x7, _x8) {
    return _trigger.apply(this, arguments);
  }

  trigger.toString = function () {
    return _trigger.toString();
  };

  return trigger;
})(function (elem, event) {
  // Fetches element data and a reference to the parent (for bubbling).
  // Don't want to add a data object to cache for every parent,
  // so checking hasData first.
  var elemData = Lib.hasData(elem) ? Lib.getData(elem) : {};
  var parent = elem.parentNode || elem.ownerDocument;
  // type = event.type || event,
  // handler;

  // If an event name was passed as a string, creates an event out of it
  if (typeof event === 'string') {
    event = { type: event, target: elem };
  }
  // Normalizes the event properties.
  event = fixEvent(event);

  // If the passed element has a dispatcher, executes the established handlers.
  if (elemData.dispatcher) {
    elemData.dispatcher.call(elem, event);
  }

  // Unless explicitly stopped or the event does not bubble (e.g. media events)
  // recursively calls this function to bubble the event up the DOM.
  if (parent && !event.isPropagationStopped() && event.bubbles !== false) {
    trigger(parent, event);

    // If at the top of the DOM, triggers the default action unless disabled.
  } else if (!parent && !event.defaultPrevented) {
    var targetData = Lib.getData(event.target);

    // Checks if the target has a default action for this event.
    if (event.target[event.type]) {
      // Temporarily disables event dispatching on the target as we have already executed the handler.
      targetData.disabled = true;
      // Executes the default action.
      if (typeof event.target[event.type] === 'function') {
        event.target[event.type]();
      }
      // Re-enables event dispatching.
      targetData.disabled = false;
    }
  }

  // Inform the triggerer if the default was prevented by returning false
  return !event.defaultPrevented;
});

/**
 * Trigger a listener only once for an event
 * @param  {Element|Object}   elem Element or object to
 * @param  {String|Array}   type
 * @param  {Function} fn
 * @private
 */
var one = (function (_one) {
  function one(_x9, _x10, _x11) {
    return _one.apply(this, arguments);
  }

  one.toString = function () {
    return _one.toString();
  };

  return one;
})(function (elem, type, fn) {
  if (Lib.obj.isArray(type)) {
    return _handleMultipleEvents(one, elem, type, fn);
  }
  var func = (function (_func) {
    function func() {
      return _func.apply(this, arguments);
    }

    func.toString = function () {
      return _func.toString();
    };

    return func;
  })(function () {
    off(elem, type, func);
    fn.apply(this, arguments);
  });
  // copy the guid to the new function so it can removed using the original function's ID
  func.guid = fn.guid = fn.guid || Lib.guid++;
  on(elem, type, func);
});

/**
 * Loops through an array of event types and calls the requested method for each type.
 * @param  {Function} fn   The event method we want to use.
 * @param  {Element|Object} elem Element or object to bind listeners to
 * @param  {String}   type Type of event to bind to.
 * @param  {Function} callback   Event listener.
 * @private
 */
function _handleMultipleEvents(fn, elem, type, callback) {
  Lib.arr.forEach(type, function (type) {
    fn(elem, type, callback); //Call the event method for each one of the types
  });
}

exports.on = on;
exports.off = off;
exports.cleanUpEvents = cleanUpEvents;
exports.fixEvent = fixEvent;
exports.one = one;
exports.trigger = trigger;

},{"./lib":46,"global/document":1,"global/window":2}],44:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _import = _dereq_('./lib');

var Lib = _interopRequireWildcard(_import);

/**
 * A combination of node inherits and babel's inherits (after transpile).
 * Both work the same but node adds `super_` to the subClass
 * and Bable adds the superClass as __proto__. Both seem useful.
 */
var _inherits = function _inherits(subClass, superClass) {
  if (typeof superClass !== 'function' && superClass !== null) {
    throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });

  if (superClass) {
    // node
    subClass.super_ = superClass;
  }
};

/**
 * Function for subclassing using the same inheritance that
 * videojs uses internally
 *
 * ```
 * var Button = videojs.getComponent('Button');
 *
 * var MyButton = videojs.extends(Button, {
 *   constructor: function(player, options) {
 *     Button.call(this, player, options);
 *   },
 *
 *   onClick: function() {
 *     // doSomething
 *   }
 * });
 * ```
 */
var extendsFn = function extendsFn(superClass) {
  var subClassMethods = arguments[1] === undefined ? {} : arguments[1];

  var subClass = function subClass() {
    superClass.apply(this, arguments);
  };
  var methods = {};

  if (subClassMethods.constructor !== Object.prototype.constructor) {
    subClass = subClassMethods.constructor;
    methods = subClassMethods;
  } else if (typeof subClassMethods === 'function') {
    subClass = subClassMethods;
  }

  _inherits(subClass, superClass);

  // Extend subObj's prototype with functions and other properties from props
  for (var name in methods) {
    if (methods.hasOwnProperty(name)) {
      subClass.prototype[name] = methods[name];
    }
  }

  return subClass;
};

exports['default'] = extendsFn;
module.exports = exports['default'];

},{"./lib":46}],45:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _document = _dereq_('global/document');

var _document2 = _interopRequireWildcard(_document);

/**
 * Store the browser-specific methods for the fullscreen API
 * @type {Object|undefined}
 * @private
 */
var FullscreenApi = {};

// browser API methods
// map approach from Screenful.js - https://github.com/sindresorhus/screenfull.js
var apiMap = [
// Spec: https://dvcs.w3.org/hg/fullscreen/raw-file/tip/Overview.html
['requestFullscreen', 'exitFullscreen', 'fullscreenElement', 'fullscreenEnabled', 'fullscreenchange', 'fullscreenerror'],
// WebKit
['webkitRequestFullscreen', 'webkitExitFullscreen', 'webkitFullscreenElement', 'webkitFullscreenEnabled', 'webkitfullscreenchange', 'webkitfullscreenerror'],
// Old WebKit (Safari 5.1)
['webkitRequestFullScreen', 'webkitCancelFullScreen', 'webkitCurrentFullScreenElement', 'webkitCancelFullScreen', 'webkitfullscreenchange', 'webkitfullscreenerror'],
// Mozilla
['mozRequestFullScreen', 'mozCancelFullScreen', 'mozFullScreenElement', 'mozFullScreenEnabled', 'mozfullscreenchange', 'mozfullscreenerror'],
// Microsoft
['msRequestFullscreen', 'msExitFullscreen', 'msFullscreenElement', 'msFullscreenEnabled', 'MSFullscreenChange', 'MSFullscreenError']];

var specApi = apiMap[0];
var browserApi = undefined;

// determine the supported set of functions
for (var i = 0; i < apiMap.length; i++) {
  // check for exitFullscreen function
  if (apiMap[i][1] in _document2['default']) {
    browserApi = apiMap[i];
    break;
  }
}

// map the browser API names to the spec API names
if (browserApi) {
  for (var i = 0; i < browserApi.length; i++) {
    FullscreenApi[specApi[i]] = browserApi[i];
  }
}

exports['default'] = FullscreenApi;
module.exports = exports['default'];

},{"global/document":1}],46:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _window = _dereq_('global/window');

var _window2 = _interopRequireWildcard(_window);

var _document = _dereq_('global/document');

var _document2 = _interopRequireWildcard(_document);

var navigator = _window2['default'].navigator;

var hasOwnProp = Object.prototype.hasOwnProperty;

/**
 * Creates an element and applies properties.
 * @param  {String=} tagName    Name of tag to be created.
 * @param  {Object=} properties Element properties to be applied.
 * @return {Element}
 * @private
 */
var createEl = function createEl() {
  var tagName = arguments[0] === undefined ? 'div' : arguments[0];
  var properties = arguments[1] === undefined ? {} : arguments[1];

  var el = _document2['default'].createElement(tagName);

  obj.each(properties, function (propName, val) {
    // Not remembering why we were checking for dash
    // but using setAttribute means you have to use getAttribute

    // The check for dash checks for the aria-* attributes, like aria-label, aria-valuemin.
    // The additional check for "role" is because the default method for adding attributes does not
    // add the attribute "role". My guess is because it's not a valid attribute in some namespaces, although
    // browsers handle the attribute just fine. The W3C allows for aria-* attributes to be used in pre-HTML5 docs.
    // http://www.w3.org/TR/wai-aria-primer/#ariahtml. Using setAttribute gets around this problem.
    if (propName.indexOf('aria-') !== -1 || propName === 'role') {
      el.setAttribute(propName, val);
    } else {
      el[propName] = val;
    }
  });

  return el;
};

/**
 * Uppercase the first letter of a string
 * @param  {String} string String to be uppercased
 * @return {String}
 * @private
 */
var capitalize = function capitalize(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
};

/**
 * Object functions container
 * @type {Object}
 * @private
 */
var obj = {};

/**
 * Object.create shim for prototypal inheritance
 *
 * https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/create
 *
 * @function
 * @param  {Object}   obj Object to use as prototype
 * @private
 */
obj.create = Object.create || function (obj) {
  //Create a new function called 'F' which is just an empty object.
  function F() {}

  //the prototype of the 'F' function should point to the
  //parameter of the anonymous function.
  F.prototype = obj;

  //create a new constructor function based off of the 'F' function.
  return new F();
};

/**
 * Loop through each property in an object and call a function
 * whose arguments are (key,value)
 * @param  {Object}   obj Object of properties
 * @param  {Function} fn  Function to be called on each property.
 * @this {*}
 * @private
 */
obj.each = function (obj, fn, context) {
  for (var key in obj) {
    if (hasOwnProp.call(obj, key)) {
      fn.call(context || this, key, obj[key]);
    }
  }
};

/**
 * Merge two objects together and return the original.
 * @param  {Object} obj1
 * @param  {Object} obj2
 * @return {Object}
 * @private
 */
obj.merge = function (obj1, obj2) {
  if (!obj2) {
    return obj1;
  }
  for (var key in obj2) {
    if (hasOwnProp.call(obj2, key)) {
      obj1[key] = obj2[key];
    }
  }
  return obj1;
};

/**
 * Merge two objects, and merge any properties that are objects
 * instead of just overwriting one. Uses to merge options hashes
 * where deeper default settings are important.
 * @param  {Object} obj1 Object to override
 * @param  {Object} obj2 Overriding object
 * @return {Object}      New object. Obj1 and Obj2 will be untouched.
 * @private
 */
obj.deepMerge = function (obj1, obj2) {
  var key, val1, val2;

  // make a copy of obj1 so we're not overwriting original values.
  // like prototype.options_ and all sub options objects
  obj1 = obj.copy(obj1);

  for (key in obj2) {
    if (hasOwnProp.call(obj2, key)) {
      val1 = obj1[key];
      val2 = obj2[key];

      // Check if both properties are pure objects and do a deep merge if so
      if (obj.isPlain(val1) && obj.isPlain(val2)) {
        obj1[key] = obj.deepMerge(val1, val2);
      } else {
        obj1[key] = obj2[key];
      }
    }
  }
  return obj1;
};

/**
 * Make a copy of the supplied object
 * @param  {Object} obj Object to copy
 * @return {Object}     Copy of object
 * @private
 */
obj.copy = function (objToCopy) {
  return obj.merge({}, objToCopy);
};

/**
 * Check if an object is plain, and not a dom node or any object sub-instance
 * @param  {Object} obj Object to check
 * @return {Boolean}     True if plain, false otherwise
 * @private
 */
obj.isPlain = function (obj) {
  return !!obj && typeof obj === 'object' && obj.toString() === '[object Object]' && obj.constructor === Object;
};

/**
 * Check if an object is Array
*  Since instanceof Array will not work on arrays created in another frame we need to use Array.isArray, but since IE8 does not support Array.isArray we need this shim
 * @param  {Object} obj Object to check
 * @return {Boolean}     True if plain, false otherwise
 * @private
 */
obj.isArray = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) === '[object Array]';
};

/**
 * Bind (a.k.a proxy or Context). A simple method for changing the context of a function
   It also stores a unique id on the function so it can be easily removed from events
 * @param  {*}   context The object to bind as scope
 * @param  {Function} fn      The function to be bound to a scope
 * @param  {Number=}   uid     An optional unique ID for the function to be set
 * @return {Function}
 * @private
 */
var bind = function bind(context, fn, uid) {
  // Make sure the function has a unique ID
  if (!fn.guid) {
    fn.guid = (exports.guid = guid += 1, guid - 1);
  }

  // Create the new function that changes the context
  var ret = function ret() {
    return fn.apply(context, arguments);
  };

  // Allow for the ability to individualize this function
  // Needed in the case where multiple objects might share the same prototype
  // IF both items add an event listener with the same function, then you try to remove just one
  // it will remove both because they both have the same guid.
  // when using this, you need to use the bind method when you remove the listener as well.
  // currently used in text tracks
  ret.guid = uid ? uid + '_' + fn.guid : fn.guid;

  return ret;
};

/**
 * Element Data Store. Allows for binding data to an element without putting it directly on the element.
 * Ex. Event listeners are stored here.
 * (also from jsninja.com, slightly modified and updated for closure compiler)
 * @type {Object}
 * @private
 */
var cache = {};

/**
 * Unique ID for an element or function
 * @type {Number}
 * @private
 */
var guid = 1;

/**
 * Unique attribute name to store an element's guid in
 * @type {String}
 * @constant
 * @private
 */
var expando = 'vdata' + new Date().getTime();

/**
 * Returns the cache object where data for an element is stored
 * @param  {Element} el Element to store data for.
 * @return {Object}
 * @private
 */
var getData = function getData(el) {
  var id = el[expando];
  if (!id) {
    id = el[expando] = (exports.guid = guid += 1, guid - 1);
  }
  if (!cache[id]) {
    cache[id] = {};
  }
  return cache[id];
};

/**
 * Returns the cache object where data for an element is stored
 * @param  {Element} el Element to store data for.
 * @return {Object}
 * @private
 */
var hasData = function hasData(el) {
  var id = el[expando];
  return !(!id || isEmpty(cache[id]));
};

/**
 * Delete data for the element from the cache and the guid attr from getElementById
 * @param  {Element} el Remove data for an element
 * @private
 */
var removeData = function removeData(el) {
  var id = el[expando];
  if (!id) {
    return;
  }
  // Remove all stored data
  // Changed to = null
  // http://coding.smashingmagazine.com/2012/11/05/writing-fast-memory-efficient-javascript/
  // cache[id] = null;
  delete cache[id];

  // Remove the expando property from the DOM node
  try {
    delete el[expando];
  } catch (e) {
    if (el.removeAttribute) {
      el.removeAttribute(expando);
    } else {
      // IE doesn't appear to support removeAttribute on the document element
      el[expando] = null;
    }
  }
};

/**
 * Check if an object is empty
 * @param  {Object}  obj The object to check for emptiness
 * @return {Boolean}
 * @private
 */
var isEmpty = function isEmpty(obj) {
  for (var prop in obj) {
    // Inlude null properties as empty.
    if (obj[prop] !== null) {
      return false;
    }
  }
  return true;
};

/**
 * Check if an element has a CSS class
 * @param {Element} element Element to check
 * @param {String} classToCheck Classname to check
 * @private
 */
var hasClass = function hasClass(element, classToCheck) {
  return (' ' + element.className + ' ').indexOf(' ' + classToCheck + ' ') !== -1;
};

/**
 * Add a CSS class name to an element
 * @param {Element} element    Element to add class name to
 * @param {String} classToAdd Classname to add
 * @private
 */
var addClass = function addClass(element, classToAdd) {
  if (!hasClass(element, classToAdd)) {
    element.className = element.className === '' ? classToAdd : element.className + ' ' + classToAdd;
  }
};

/**
 * Remove a CSS class name from an element
 * @param {Element} element    Element to remove from class name
 * @param {String} classToAdd Classname to remove
 * @private
 */
var removeClass = function removeClass(element, classToRemove) {
  if (!hasClass(element, classToRemove)) {
    return;
  }

  var classNames = element.className.split(' ');

  // no arr.indexOf in ie8, and we don't want to add a big shim
  for (var i = classNames.length - 1; i >= 0; i--) {
    if (classNames[i] === classToRemove) {
      classNames.splice(i, 1);
    }
  }

  element.className = classNames.join(' ');
};

/**
 * Element for testing browser HTML5 video capabilities
 * @type {Element}
 * @constant
 * @private
 */
var TEST_VID = createEl('video');
var track = _document2['default'].createElement('track');
track.kind = 'captions';
track.srclang = 'en';
track.label = 'English';
TEST_VID.appendChild(track);

/**
 * Useragent for browser testing.
 * @type {String}
 * @constant
 * @private
 */
var USER_AGENT = navigator.userAgent;

/**
 * Device is an iPhone
 * @type {Boolean}
 * @constant
 * @private
 */
var IS_IPHONE = /iPhone/i.test(USER_AGENT);
var IS_IPAD = /iPad/i.test(USER_AGENT);
var IS_IPOD = /iPod/i.test(USER_AGENT);
var IS_IOS = IS_IPHONE || IS_IPAD || IS_IPOD;

var IOS_VERSION = (function () {
  var match = USER_AGENT.match(/OS (\d+)_/i);
  if (match && match[1]) {
    return match[1];
  }
})();

var IS_ANDROID = /Android/i.test(USER_AGENT);
var ANDROID_VERSION = (function () {
  // This matches Android Major.Minor.Patch versions
  // ANDROID_VERSION is Major.Minor as a Number, if Minor isn't available, then only Major is returned
  var match = USER_AGENT.match(/Android (\d+)(?:\.(\d+))?(?:\.(\d+))*/i),
      major,
      minor;

  if (!match) {
    return null;
  }

  major = match[1] && parseFloat(match[1]);
  minor = match[2] && parseFloat(match[2]);

  if (major && minor) {
    return parseFloat(match[1] + '.' + match[2]);
  } else if (major) {
    return major;
  } else {
    return null;
  }
})();
// Old Android is defined as Version older than 2.3, and requiring a webkit version of the android browser
var IS_OLD_ANDROID = IS_ANDROID && /webkit/i.test(USER_AGENT) && ANDROID_VERSION < 2.3;

var IS_FIREFOX = /Firefox/i.test(USER_AGENT);
var IS_CHROME = /Chrome/i.test(USER_AGENT);
var IS_IE8 = /MSIE\s8\.0/.test(USER_AGENT);

var TOUCH_ENABLED = !!('ontouchstart' in _window2['default'] || _window2['default'].DocumentTouch && _document2['default'] instanceof _window2['default'].DocumentTouch);
var BACKGROUND_SIZE_SUPPORTED = ('backgroundSize' in TEST_VID.style);

/**
 * Apply attributes to an HTML element.
 * @param  {Element} el         Target element.
 * @param  {Object=} attributes Element attributes to be applied.
 * @private
 */
var setElementAttributes = function setElementAttributes(el, attributes) {
  obj.each(attributes, function (attrName, attrValue) {
    if (attrValue === null || typeof attrValue === 'undefined' || attrValue === false) {
      el.removeAttribute(attrName);
    } else {
      el.setAttribute(attrName, attrValue === true ? '' : attrValue);
    }
  });
};

/**
 * Get an element's attribute values, as defined on the HTML tag
 * Attributes are not the same as properties. They're defined on the tag
 * or with setAttribute (which shouldn't be used with HTML)
 * This will return true or false for boolean attributes.
 * @param  {Element} tag Element from which to get tag attributes
 * @return {Object}
 * @private
 */
var getElementAttributes = function getElementAttributes(tag) {
  var obj, knownBooleans, attrs, attrName, attrVal;

  obj = {};

  // known boolean attributes
  // we can check for matching boolean properties, but older browsers
  // won't know about HTML5 boolean attributes that we still read from
  knownBooleans = ',' + 'autoplay,controls,loop,muted,default' + ',';

  if (tag && tag.attributes && tag.attributes.length > 0) {
    attrs = tag.attributes;

    for (var i = attrs.length - 1; i >= 0; i--) {
      attrName = attrs[i].name;
      attrVal = attrs[i].value;

      // check for known booleans
      // the matching element property will return a value for typeof
      if (typeof tag[attrName] === 'boolean' || knownBooleans.indexOf(',' + attrName + ',') !== -1) {
        // the value of an included boolean attribute is typically an empty
        // string ('') which would equal false if we just check for a false value.
        // we also don't want support bad code like autoplay='false'
        attrVal = attrVal !== null ? true : false;
      }

      obj[attrName] = attrVal;
    }
  }

  return obj;
};

/**
 * Get the computed style value for an element
 * From http://robertnyman.com/2006/04/24/get-the-rendered-style-of-an-element/
 * @param  {Element} el        Element to get style value for
 * @param  {String} strCssRule Style name
 * @return {String}            Style value
 * @private
 */
var getComputedDimension = function getComputedDimension(el, strCssRule) {
  var strValue = '';
  if (_document2['default'].defaultView && _document2['default'].defaultView.getComputedStyle) {
    strValue = _document2['default'].defaultView.getComputedStyle(el, '').getPropertyValue(strCssRule);
  } else if (el.currentStyle) {
    // IE8 Width/Height support
    var upperCasedRule = strCssRule.substr(0, 1).toUpperCase() + strCssRule.substr(1);
    strValue = el['client' + upperCasedRule] + 'px';
  }
  return strValue;
};

/**
 * Insert an element as the first child node of another
 * @param  {Element} child   Element to insert
 * @param  {[type]} parent Element to insert child into
 * @private
 */
var insertFirst = function insertFirst(child, parent) {
  if (parent.firstChild) {
    parent.insertBefore(child, parent.firstChild);
  } else {
    parent.appendChild(child);
  }
};

/**
 * Object to hold browser support information
 * @type {Object}
 * @private
 */
var browser = {};

/**
 * Shorthand for document.getElementById()
 * Also allows for CSS (jQuery) ID syntax. But nothing other than IDs.
 * @param  {String} id  Element ID
 * @return {Element}    Element with supplied ID
 * @private
 */
var el = function el(id) {
  if (id.indexOf('#') === 0) {
    id = id.slice(1);
  }

  return _document2['default'].getElementById(id);
};

/**
 * Format seconds as a time string, H:MM:SS or M:SS
 * Supplying a guide (in seconds) will force a number of leading zeros
 * to cover the length of the guide
 * @param  {Number} seconds Number of seconds to be turned into a string
 * @param  {Number} guide   Number (in seconds) to model the string after
 * @return {String}         Time formatted as H:MM:SS or M:SS
 * @private
 */
var formatTime = function formatTime(seconds) {
  var guide = arguments[1] === undefined ? seconds : arguments[1];
  return (function () {
    var s = Math.floor(seconds % 60);
    var m = Math.floor(seconds / 60 % 60);
    var h = Math.floor(seconds / 3600);
    var gm = Math.floor(guide / 60 % 60);
    var gh = Math.floor(guide / 3600);

    // handle invalid times
    if (isNaN(seconds) || seconds === Infinity) {
      // '-' is false for all relational operators (e.g. <, >=) so this setting
      // will add the minimum number of fields specified by the guide
      h = m = s = '-';
    }

    // Check if we need to show hours
    h = h > 0 || gh > 0 ? h + ':' : '';

    // If hours are showing, we may need to add a leading zero.
    // Always show at least one digit of minutes.
    m = ((h || gm >= 10) && m < 10 ? '0' + m : m) + ':';

    // Check if leading zero is need for seconds
    s = s < 10 ? '0' + s : s;

    return h + m + s;
  })();
};

// Attempt to block the ability to select text while dragging controls
var blockTextSelection = function blockTextSelection() {
  _document2['default'].body.focus();
  _document2['default'].onselectstart = function () {
    return false;
  };
};
// Turn off text selection blocking
var unblockTextSelection = function unblockTextSelection() {
  _document2['default'].onselectstart = function () {
    return true;
  };
};

/**
 * Trim whitespace from the ends of a string.
 * @param  {String} string String to trim
 * @return {String}        Trimmed string
 * @private
 */
var trim = function trim(str) {
  return (str + '').replace(/^\s+|\s+$/g, '');
};

/**
 * Should round off a number to a decimal place
 * @param  {Number} num Number to round
 * @param  {Number} dec Number of decimal places to round to
 * @return {Number}     Rounded number
 * @private
 */
var round = function round(num) {
  var dec = arguments[1] === undefined ? 0 : arguments[1];

  return Math.round(num * Math.pow(10, dec)) / Math.pow(10, dec);
};

/**
 * Should create a fake TimeRange object
 * Mimics an HTML5 time range instance, which has functions that
 * return the start and end times for a range
 * TimeRanges are returned by the buffered() method
 * @param  {Number} start Start time in seconds
 * @param  {Number} end   End time in seconds
 * @return {Object}       Fake TimeRange object
 * @private
 */
var createTimeRange = function createTimeRange(start, end) {
  return {
    length: 1,
    start: (function (_start) {
      function start() {
        return _start.apply(this, arguments);
      }

      start.toString = function () {
        return _start.toString();
      };

      return start;
    })(function () {
      return start;
    }),
    end: (function (_end) {
      function end() {
        return _end.apply(this, arguments);
      }

      end.toString = function () {
        return _end.toString();
      };

      return end;
    })(function () {
      return end;
    })
  };
};

/**
 * Add to local storage (maybe removable)
 * @private
 */
var setLocalStorage = function setLocalStorage(key, value) {
  try {
    // IE was throwing errors referencing the var anywhere without this
    var _localStorage = _window2['default'].localStorage || false;
    if (!_localStorage) {
      return;
    }
    _localStorage[key] = value;
  } catch (e) {
    if (e.code === 22 || e.code === 1014) {
      // Webkit == 22 / Firefox == 1014
      log('LocalStorage Full (VideoJS)', e);
    } else {
      if (e.code === 18) {
        log('LocalStorage not allowed (VideoJS)', e);
      } else {
        log('LocalStorage Error (VideoJS)', e);
      }
    }
  }
};

/**
 * Get absolute version of relative URL. Used to tell flash correct URL.
 * http://stackoverflow.com/questions/470832/getting-an-absolute-url-from-a-relative-one-ie6-issue
 * @param  {String} url URL to make absolute
 * @return {String}     Absolute URL
 * @private
 */
var getAbsoluteURL = function getAbsoluteURL(url) {
  // Check if absolute URL
  if (!url.match(/^https?:\/\//)) {
    // Convert to absolute URL. Flash hosted off-site needs an absolute URL.
    url = createEl('div', {
      innerHTML: '<a href="' + url + '">x</a>'
    }).firstChild.href;
  }

  return url;
};

/**
 * Resolve and parse the elements of a URL
 * @param  {String} url The url to parse
 * @return {Object}     An object of url details
 */
var parseUrl = function parseUrl(url) {
  var props = ['protocol', 'hostname', 'port', 'pathname', 'search', 'hash', 'host'];

  // add the url to an anchor and let the browser parse the URL
  var a = createEl('a', { href: url });

  // IE8 (and 9?) Fix
  // ie8 doesn't parse the URL correctly until the anchor is actually
  // added to the body, and an innerHTML is needed to trigger the parsing
  var addToBody = a.host === '' && a.protocol !== 'file:';
  var div = undefined;
  if (addToBody) {
    div = createEl('div');
    div.innerHTML = '<a href="' + url + '"></a>';
    a = div.firstChild;
    // prevent the div from affecting layout
    div.setAttribute('style', 'display:none; position:absolute;');
    _document2['default'].body.appendChild(div);
  }

  // Copy the specific URL properties to a new object
  // This is also needed for IE8 because the anchor loses its
  // properties when it's removed from the dom
  var details = {};
  for (var i = 0; i < props.length; i++) {
    details[props[i]] = a[props[i]];
  }

  // IE9 adds the port to the host property unlike everyone else. If
  // a port identifier is added for standard ports, strip it.
  if (details.protocol === 'http:') {
    details.host = details.host.replace(/:80$/, '');
  }
  if (details.protocol === 'https:') {
    details.host = details.host.replace(/:443$/, '');
  }

  if (addToBody) {
    _document2['default'].body.removeChild(div);
  }

  return details;
};

/**
 * Log messages to the console and history based on the type of message
 *
 * @param  {String} type The type of message, or `null` for `log`
 * @param  {[type]} args The args to be passed to the log
 * @private
 */
function _logType(type, args) {
  // convert args to an array to get array functions
  var argsArray = Array.prototype.slice.call(args);
  // if there's no console then don't try to output messages
  // they will still be stored in Lib.log.history
  // Was setting these once outside of this function, but containing them
  // in the function makes it easier to test cases where console doesn't exist
  var noop = function noop() {};

  var console = _window2['default'].console || {
    log: noop,
    warn: noop,
    error: noop
  };

  if (type) {
    // add the type to the front of the message
    argsArray.unshift(type.toUpperCase() + ':');
  } else {
    // default to log with no prefix
    type = 'log';
  }

  // add to history
  log.history.push(argsArray);

  // add console prefix after adding to history
  argsArray.unshift('VIDEOJS:');

  // call appropriate log function
  if (console[type].apply) {
    console[type].apply(console, argsArray);
  } else {
    // ie8 doesn't allow error.apply, but it will just join() the array anyway
    console[type](argsArray.join(' '));
  }
}

/**
 * Log plain debug messages
 */
var log = function log() {
  _logType(null, arguments);
};

/**
 * Keep a history of log messages
 * @type {Array}
 */
log.history = [];

/**
 * Log error messages
 */
log.error = function () {
  _logType('error', arguments);
};

/**
 * Log warning messages
 */
log.warn = function () {
  _logType('warn', arguments);
};

// Offset Left
// getBoundingClientRect technique from John Resig http://ejohn.org/blog/getboundingclientrect-is-awesome/
var findPosition = function findPosition(el) {
  var box = undefined;

  if (el.getBoundingClientRect && el.parentNode) {
    box = el.getBoundingClientRect();
  }

  if (!box) {
    return {
      left: 0,
      top: 0
    };
  }

  var docEl = _document2['default'].documentElement;
  var body = _document2['default'].body;

  var clientLeft = docEl.clientLeft || body.clientLeft || 0;
  var scrollLeft = _window2['default'].pageXOffset || body.scrollLeft;
  var left = box.left + scrollLeft - clientLeft;

  var clientTop = docEl.clientTop || body.clientTop || 0;
  var scrollTop = _window2['default'].pageYOffset || body.scrollTop;
  var top = box.top + scrollTop - clientTop;

  // Android sometimes returns slightly off decimal values, so need to round
  return {
    left: round(left),
    top: round(top)
  };
};

/**
 * Array functions container
 * @type {Object}
 * @private
 */
var arr = {};

/*
 * Loops through an array and runs a function for each item inside it.
 * @param  {Array}    array       The array
 * @param  {Function} callback    The function to be run for each item
 * @param  {*}        thisArg     The `this` binding of callback
 * @returns {Array}               The array
 * @private
 */
arr.forEach = function (array, callback, thisArg) {
  thisArg = thisArg || this;

  if (obj.isArray(array) && callback instanceof Function) {
    for (var i = 0, len = array.length; i < len; ++i) {
      callback.call(thisArg, array[i], i, array);
    }
  }

  return array;
};

/**
 * Returns the extension of the passed file name. It will return an empty string if you pass an invalid path
 *
 * @param {String}    path    The fileName path like '/path/to/file.mp4'
 * @returns {String}          The extension in lower case or an empty string if no extension could be found.
 */
var getFileExtension = function getFileExtension(path) {
  if (typeof path === 'string') {
    var splitPathRe = /^(\/?)([\s\S]*?)((?:\.{1,2}|[^\/]+?)(\.([^\.\/\?]+)))(?:[\/]*|[\?].*)$/i;
    var pathParts = splitPathRe.exec(path);

    if (pathParts) {
      return pathParts.pop().toLowerCase();
    }
  }

  return '';
};

exports.createEl = createEl;
exports.capitalize = capitalize;
exports.obj = obj;
exports.isNaN = isNaN;
exports.bind = bind;
exports.cache = cache;
exports.guid = guid;
exports.expando = expando;
exports.getData = getData;
exports.hasData = hasData;
exports.removeData = removeData;
exports.isEmpty = isEmpty;
exports.hasClass = hasClass;
exports.addClass = addClass;
exports.removeClass = removeClass;
exports.TEST_VID = TEST_VID;
exports.USER_AGENT = USER_AGENT;
exports.IS_IPHONE = IS_IPHONE;
exports.IS_IPAD = IS_IPAD;
exports.IS_IPOD = IS_IPOD;
exports.IS_IOS = IS_IOS;
exports.IOS_VERSION = IOS_VERSION;
exports.IS_ANDROID = IS_ANDROID;
exports.ANDROID_VERSION = ANDROID_VERSION;
exports.IS_OLD_ANDROID = IS_OLD_ANDROID;
exports.IS_FIREFOX = IS_FIREFOX;
exports.IS_IE8 = IS_IE8;
exports.IS_CHROME = IS_CHROME;
exports.TOUCH_ENABLED = TOUCH_ENABLED;
exports.BACKGROUND_SIZE_SUPPORTED = BACKGROUND_SIZE_SUPPORTED;
exports.setElementAttributes = setElementAttributes;
exports.getElementAttributes = getElementAttributes;
exports.getComputedDimension = getComputedDimension;
exports.insertFirst = insertFirst;
exports.browser = browser;
exports.el = el;
exports.formatTime = formatTime;
exports.blockTextSelection = blockTextSelection;
exports.unblockTextSelection = unblockTextSelection;
exports.trim = trim;
exports.round = round;
exports.createTimeRange = createTimeRange;
exports.setLocalStorage = setLocalStorage;
exports.getAbsoluteURL = getAbsoluteURL;
exports.parseUrl = parseUrl;
exports.log = log;
exports.findPosition = findPosition;
exports.arr = arr;
exports.getFileExtension = getFileExtension;

},{"global/document":1,"global/window":2}],47:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _Component2 = _dereq_('./component');

var _Component3 = _interopRequireWildcard(_Component2);

/* Loading Spinner
================================================================================ */
/**
 * Loading spinner for waiting events
 * @param {Player|Object} player
 * @param {Object=} options
 * @class
 * @constructor
 */

var LoadingSpinner = (function (_Component) {
  function LoadingSpinner() {
    _classCallCheck(this, LoadingSpinner);

    if (_Component != null) {
      _Component.apply(this, arguments);
    }
  }

  _inherits(LoadingSpinner, _Component);

  _createClass(LoadingSpinner, [{
    key: 'createEl',
    value: function createEl() {
      return _get(Object.getPrototypeOf(LoadingSpinner.prototype), 'createEl', this).call(this, 'div', {
        className: 'vjs-loading-spinner'
      });
    }
  }]);

  return LoadingSpinner;
})(_Component3['default']);

_Component3['default'].registerComponent('LoadingSpinner', LoadingSpinner);
exports['default'] = LoadingSpinner;
module.exports = exports['default'];

},{"./component":7}],48:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _import = _dereq_('./lib');

var Lib = _interopRequireWildcard(_import);

/**
 * Custom MediaError to mimic the HTML5 MediaError
 * @param {Number} code The media error code
 */
var MediaError = (function (_MediaError) {
  function MediaError(_x) {
    return _MediaError.apply(this, arguments);
  }

  MediaError.toString = function () {
    return _MediaError.toString();
  };

  return MediaError;
})(function (code) {
  if (typeof code === 'number') {
    this.code = code;
  } else if (typeof code === 'string') {
    // default code is zero, so this is a custom error
    this.message = code;
  } else if (typeof code === 'object') {
    // object
    Lib.obj.merge(this, code);
  }

  if (!this.message) {
    this.message = MediaError.defaultMessages[this.code] || '';
  }
});

/**
 * The error code that refers two one of the defined
 * MediaError types
 * @type {Number}
 */
MediaError.prototype.code = 0;

/**
 * An optional message to be shown with the error.
 * Message is not part of the HTML5 video spec
 * but allows for more informative custom errors.
 * @type {String}
 */
MediaError.prototype.message = '';

/**
 * An optional status code that can be set by plugins
 * to allow even more detail about the error.
 * For example the HLS plugin might provide the specific
 * HTTP status code that was returned when the error
 * occurred, then allowing a custom error overlay
 * to display more information.
 * @type {[type]}
 */
MediaError.prototype.status = null;

MediaError.errorTypes = ['MEDIA_ERR_CUSTOM', // = 0
'MEDIA_ERR_ABORTED', // = 1
'MEDIA_ERR_NETWORK', // = 2
'MEDIA_ERR_DECODE', // = 3
'MEDIA_ERR_SRC_NOT_SUPPORTED', // = 4
'MEDIA_ERR_ENCRYPTED' // = 5
];

MediaError.defaultMessages = {
  1: 'You aborted the video playback',
  2: 'A network error caused the video download to fail part-way.',
  3: 'The video playback was aborted due to a corruption problem or because the video used features your browser did not support.',
  4: 'The video could not be loaded, either because the server or network failed or because the format is not supported.',
  5: 'The video is encrypted and we do not have the keys to decrypt it.'
};

// Add types as properties on MediaError
// e.g. MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED = 4;
for (var errNum = 0; errNum < MediaError.errorTypes.length; errNum++) {
  MediaError[MediaError.errorTypes[errNum]] = errNum;
  // values should be accessible on both the class and instance
  MediaError.prototype[MediaError.errorTypes[errNum]] = errNum;
}

exports['default'] = MediaError;
module.exports = exports['default'];

},{"./lib":46}],49:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _Button2 = _dereq_('../button.js');

var _Button3 = _interopRequireWildcard(_Button2);

var _Menu = _dereq_('./menu.js');

var _Menu2 = _interopRequireWildcard(_Menu);

var _import = _dereq_('../lib.js');

var Lib = _interopRequireWildcard(_import);

/**
 * A button class with a popup menu
 * @param {Player|Object} player
 * @param {Object=} options
 * @constructor
 */

var MenuButton = (function (_Button) {
  function MenuButton(player, options) {
    _classCallCheck(this, MenuButton);

    _get(Object.getPrototypeOf(MenuButton.prototype), 'constructor', this).call(this, player, options);

    this.update();

    this.on('keydown', this.handleKeyPress);
    this.el_.setAttribute('aria-haspopup', true);
    this.el_.setAttribute('role', 'button');
  }

  _inherits(MenuButton, _Button);

  _createClass(MenuButton, [{
    key: 'update',
    value: function update() {
      var menu = this.createMenu();

      if (this.menu) {
        this.removeChild(this.menu);
      }

      this.menu = menu;
      this.addChild(menu);

      /**
       * Track the state of the menu button
       * @type {Boolean}
       * @private
       */
      this.buttonPressed_ = false;

      if (this.items && this.items.length === 0) {
        this.hide();
      } else if (this.items && this.items.length > 1) {
        this.show();
      }
    }
  }, {
    key: 'createMenu',
    value: function createMenu() {
      var menu = new _Menu2['default'](this.player_);

      // Add a title list item to the top
      if (this.options().title) {
        menu.contentEl().appendChild(Lib.createEl('li', {
          className: 'vjs-menu-title',
          innerHTML: Lib.capitalize(this.options().title),
          tabindex: -1
        }));
      }

      this.items = this.createItems();

      if (this.items) {
        // Add menu items to the menu
        for (var i = 0; i < this.items.length; i++) {
          menu.addItem(this.items[i]);
        }
      }

      return menu;
    }
  }, {
    key: 'createItems',

    /**
     * Create the list of menu items. Specific to each subclass.
     */
    value: function createItems() {}
  }, {
    key: 'buildCSSClass',

    /** @inheritDoc */
    value: function buildCSSClass() {
      return '' + this.className + ' vjs-menu-button ' + _get(Object.getPrototypeOf(MenuButton.prototype), 'buildCSSClass', this).call(this);
    }
  }, {
    key: 'handleFocus',

    // Focus - Add keyboard functionality to element
    // This function is not needed anymore. Instead, the keyboard functionality is handled by
    // treating the button as triggering a submenu. When the button is pressed, the submenu
    // appears. Pressing the button again makes the submenu disappear.
    value: function handleFocus() {}
  }, {
    key: 'handleBlur',

    // Can't turn off list display that we turned on with focus, because list would go away.
    value: function handleBlur() {}
  }, {
    key: 'handleClick',
    value: function handleClick() {
      // When you click the button it adds focus, which will show the menu indefinitely.
      // So we'll remove focus when the mouse leaves the button.
      // Focus is needed for tab navigation.
      this.one('mouseout', Lib.bind(this, function () {
        this.menu.unlockShowing();
        this.el_.blur();
      }));
      if (this.buttonPressed_) {
        this.unpressButton();
      } else {
        this.pressButton();
      }
    }
  }, {
    key: 'handleKeyPress',
    value: function handleKeyPress(event) {

      // Check for space bar (32) or enter (13) keys
      if (event.which === 32 || event.which === 13) {
        if (this.buttonPressed_) {
          this.unpressButton();
        } else {
          this.pressButton();
        }
        event.preventDefault();
        // Check for escape (27) key
      } else if (event.which === 27) {
        if (this.buttonPressed_) {
          this.unpressButton();
        }
        event.preventDefault();
      }
    }
  }, {
    key: 'pressButton',
    value: function pressButton() {
      this.buttonPressed_ = true;
      this.menu.lockShowing();
      this.el_.setAttribute('aria-pressed', true);
      if (this.items && this.items.length > 0) {
        this.items[0].el().focus(); // set the focus to the title of the submenu
      }
    }
  }, {
    key: 'unpressButton',
    value: function unpressButton() {
      this.buttonPressed_ = false;
      this.menu.unlockShowing();
      this.el_.setAttribute('aria-pressed', false);
    }
  }]);

  return MenuButton;
})(_Button3['default']);

_Button3['default'].registerComponent('MenuButton', MenuButton);
exports['default'] = MenuButton;
module.exports = exports['default'];

},{"../button.js":6,"../lib.js":46,"./menu.js":51}],50:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _Button2 = _dereq_('../button.js');

var _Button3 = _interopRequireWildcard(_Button2);

var _import = _dereq_('../lib.js');

var Lib = _interopRequireWildcard(_import);

/**
 * The component for a menu item. `<li>`
 *
 * @param {Player|Object} player
 * @param {Object=} options
 * @class
 * @constructor
 */

var MenuItem = (function (_Button) {
  function MenuItem(player, options) {
    _classCallCheck(this, MenuItem);

    _get(Object.getPrototypeOf(MenuItem.prototype), 'constructor', this).call(this, player, options);
    this.selected(options.selected);
  }

  _inherits(MenuItem, _Button);

  _createClass(MenuItem, [{
    key: 'createEl',

    /** @inheritDoc */
    value: function createEl(type, props) {
      return _get(Object.getPrototypeOf(MenuItem.prototype), 'createEl', this).call(this, 'li', Lib.obj.merge({
        className: 'vjs-menu-item',
        innerHTML: this.localize(this.options_.label)
      }, props));
    }
  }, {
    key: 'handleClick',

    /**
     * Handle a click on the menu item, and set it to selected
     */
    value: function handleClick() {
      this.selected(true);
    }
  }, {
    key: 'selected',

    /**
     * Set this menu item as selected or not
     * @param  {Boolean} selected
     */
    value: (function (_selected) {
      function selected(_x) {
        return _selected.apply(this, arguments);
      }

      selected.toString = function () {
        return _selected.toString();
      };

      return selected;
    })(function (selected) {
      if (selected) {
        this.addClass('vjs-selected');
        this.el_.setAttribute('aria-selected', true);
      } else {
        this.removeClass('vjs-selected');
        this.el_.setAttribute('aria-selected', false);
      }
    })
  }]);

  return MenuItem;
})(_Button3['default']);

_Button3['default'].registerComponent('MenuItem', MenuItem);
exports['default'] = MenuItem;
module.exports = exports['default'];

},{"../button.js":6,"../lib.js":46}],51:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _Component2 = _dereq_('../component.js');

var _Component3 = _interopRequireWildcard(_Component2);

var _import = _dereq_('../lib.js');

var Lib = _interopRequireWildcard(_import);

var _import2 = _dereq_('../events.js');

var Events = _interopRequireWildcard(_import2);

/* Menu
================================================================================ */
/**
 * The Menu component is used to build pop up menus, including subtitle and
 * captions selection menus.
 *
 * @param {Player|Object} player
 * @param {Object=} options
 * @class
 * @constructor
 */

var Menu = (function (_Component) {
  function Menu() {
    _classCallCheck(this, Menu);

    if (_Component != null) {
      _Component.apply(this, arguments);
    }
  }

  _inherits(Menu, _Component);

  _createClass(Menu, [{
    key: 'addItem',

    /**
     * Add a menu item to the menu
     * @param {Object|String} component Component or component type to add
     */
    value: function addItem(component) {
      this.addChild(component);
      component.on('click', Lib.bind(this, function () {
        this.unlockShowing();
      }));
    }
  }, {
    key: 'createEl',
    value: function createEl() {
      var contentElType = this.options().contentElType || 'ul';
      this.contentEl_ = Lib.createEl(contentElType, {
        className: 'vjs-menu-content'
      });
      var el = _get(Object.getPrototypeOf(Menu.prototype), 'createEl', this).call(this, 'div', {
        append: this.contentEl_,
        className: 'vjs-menu'
      });
      el.appendChild(this.contentEl_);

      // Prevent clicks from bubbling up. Needed for Menu Buttons,
      // where a click on the parent is significant
      Events.on(el, 'click', function (event) {
        event.preventDefault();
        event.stopImmediatePropagation();
      });

      return el;
    }
  }]);

  return Menu;
})(_Component3['default']);

_Component3['default'].registerComponent('Menu', Menu);
exports['default'] = Menu;
module.exports = exports['default'];

},{"../component.js":7,"../events.js":43,"../lib.js":46}],52:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _document = _dereq_('global/document');

var _document2 = _interopRequireWildcard(_document);

var _window = _dereq_('global/window');

var _window2 = _interopRequireWildcard(_window);

var navigator = _window2['default'].navigator;

/**
 * Global Player instance options, surfaced from Player.prototype.options_
 * options = Player.prototype.options_
 * All options should use string keys so they avoid
 * renaming by closure compiler
 * @type {Object}
 */
exports['default'] = {
  // Default order of fallback technology
  techOrder: ['html5', 'flash'],
  // techOrder: ['flash','html5'],

  html5: {},
  flash: {},

  // defaultVolume: 0.85,
  defaultVolume: 0, // The freakin seaguls are driving me crazy!

  // default inactivity timeout
  inactivityTimeout: 2000,

  // default playback rates
  playbackRates: [],
  // Add playback rate selection by adding rates
  // 'playbackRates': [0.5, 1, 1.5, 2],

  // Included control sets
  children: {
    mediaLoader: {},
    posterImage: {},
    textTrackDisplay: {},
    loadingSpinner: {},
    bigPlayButton: {},
    controlBar: {},
    errorDisplay: {},
    textTrackSettings: {}
  },

  language: _document2['default'].getElementsByTagName('html')[0].getAttribute('lang') || navigator.languages && navigator.languages[0] || navigator.userLanguage || navigator.language || 'en',

  // locales and their language translations
  languages: {},

  // Default message to show when a video cannot be played.
  notSupportedMessage: 'No compatible source was found for this video.'
};
module.exports = exports['default'];

},{"global/document":1,"global/window":2}],53:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _slicedToArray = function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _Component2 = _dereq_('./component.js');

var _Component3 = _interopRequireWildcard(_Component2);

var _import = _dereq_('./lib.js');

var Lib = _interopRequireWildcard(_import);

var _import2 = _dereq_('./events.js');

var Events = _interopRequireWildcard(_import2);

var _FullscreenApi = _dereq_('./fullscreen-api.js');

var _FullscreenApi2 = _interopRequireWildcard(_FullscreenApi);

var _MediaError = _dereq_('./media-error.js');

var _MediaError2 = _interopRequireWildcard(_MediaError);

var _Options = _dereq_('./options.js');

var _Options2 = _interopRequireWildcard(_Options);

var _safeParseTuple3 = _dereq_('safe-json-parse/tuple');

var _safeParseTuple4 = _interopRequireWildcard(_safeParseTuple3);

var _window = _dereq_('global/window');

var _window2 = _interopRequireWildcard(_window);

var _document = _dereq_('global/document');

var _document2 = _interopRequireWildcard(_document);

// Include required child components

var _MediaLoader = _dereq_('./tech/loader.js');

var _MediaLoader2 = _interopRequireWildcard(_MediaLoader);

var _Poster = _dereq_('./poster-image.js');

var _Poster2 = _interopRequireWildcard(_Poster);

var _TextTrackDisplay = _dereq_('./tracks/text-track-display.js');

var _TextTrackDisplay2 = _interopRequireWildcard(_TextTrackDisplay);

var _LoadingSpinner = _dereq_('./loading-spinner.js');

var _LoadingSpinner2 = _interopRequireWildcard(_LoadingSpinner);

var _BigPlayButton = _dereq_('./big-play-button.js');

var _BigPlayButton2 = _interopRequireWildcard(_BigPlayButton);

var _controlBar = _dereq_('./control-bar/control-bar.js');

var _controlBar2 = _interopRequireWildcard(_controlBar);

var _ErrorDisplay = _dereq_('./error-display.js');

var _ErrorDisplay2 = _interopRequireWildcard(_ErrorDisplay);

var _TextTrackSettings = _dereq_('./tracks/text-track-settings.js');

var _TextTrackSettings2 = _interopRequireWildcard(_TextTrackSettings);

// Require html5 for disposing the original video tag

var _Html5 = _dereq_('./tech/html5.js');

var _Html52 = _interopRequireWildcard(_Html5);

/**
 * An instance of the `Player` class is created when any of the Video.js setup methods are used to initialize a video.
 *
 * ```js
 * var myPlayer = videojs('example_video_1');
 * ```
 *
 * In the following example, the `data-setup` attribute tells the Video.js library to create a player instance when the library is ready.
 *
 * ```html
 * <video id="example_video_1" data-setup='{}' controls>
 *   <source src="my-source.mp4" type="video/mp4">
 * </video>
 * ```
 *
 * After an instance has been created it can be accessed globally using `Video('example_video_1')`.
 *
 * @class
 * @extends Component
 */

var Player = (function (_Component) {

  /**
   * player's constructor function
   *
   * @constructs
   * @method init
   * @param {Element} tag        The original video tag used for configuring options
   * @param {Object=} options    Player options
   * @param {Function=} ready    Ready callback function
   */

  function Player(tag, options, ready) {
    _classCallCheck(this, Player);

    // Make sure tag ID exists
    tag.id = tag.id || 'vjs_video_' + Lib.guid++;

    // Set Options
    // The options argument overrides options set in the video tag
    // which overrides globally set options.
    // This latter part coincides with the load order
    // (tag must exist before Player)
    options = Lib.obj.merge(Player.getTagSettings(tag), options);

    // Delay the initialization of children because we need to set up
    // player properties first, and can't use `this` before `super()`
    options.initChildren = false;

    // Same with creating the element
    options.createEl = false;

    // we don't want the player to report touch activity on itself
    // see enableTouchActivity in Component
    options.reportTouchActivity = false;

    // Run base component initializing with new options
    _get(Object.getPrototypeOf(Player.prototype), 'constructor', this).call(this, null, options, ready);

    // if the global option object was accidentally blown away by
    // someone, bail early with an informative error
    if (!this.options_ || !this.options_.techOrder || !this.options_.techOrder.length) {
      throw new Error('No techOrder specified. Did you overwrite ' + 'videojs.options instead of just changing the ' + 'properties you want to override?');
    }

    this.tag = tag; // Store the original tag used to set options

    // Store the tag attributes used to restore html5 element
    this.tagAttributes = tag && Lib.getElementAttributes(tag);

    // Update Current Language
    this.language_ = options.language || _Options2['default'].language;

    // Update Supported Languages
    this.languages_ = options.languages || _Options2['default'].languages;

    // Cache for video property values.
    this.cache_ = {};

    // Set poster
    this.poster_ = options.poster || '';

    // Set controls
    this.controls_ = !!options.controls;
    // Original tag settings stored in options
    // now remove immediately so native controls don't flash.
    // May be turned back on by HTML5 tech if nativeControlsForTouch is true
    tag.controls = false;

    /**
    * Store the internal state of scrubbing
    * @private
    * @return {Boolean} True if the user is scrubbing
    */
    this.scrubbing_ = false;

    this.el_ = this.createEl();

    // Load plugins
    if (options.plugins) {
      Lib.obj.each(options.plugins, function (key, val) {
        this[key](val);
      }, this);
    }

    this.initChildren();

    // Set isAudio based on whether or not an audio tag was used
    this.isAudio(tag.nodeName.toLowerCase() === 'audio');

    // Update controls className. Can't do this when the controls are initially
    // set because the element doesn't exist yet.
    if (this.controls()) {
      this.addClass('vjs-controls-enabled');
    } else {
      this.addClass('vjs-controls-disabled');
    }

    if (this.isAudio()) {
      this.addClass('vjs-audio');
    }

    if (this.flexNotSupported_()) {
      this.addClass('vjs-no-flex');
    }

    // TODO: Make this smarter. Toggle user state between touching/mousing
    // using events, since devices can have both touch and mouse events.
    // if (Lib.TOUCH_ENABLED) {
    //   this.addClass('vjs-touch-enabled');
    // }

    // Make player easily findable by ID
    Player.players[this.id_] = this;

    // When the player is first initialized, trigger activity so components
    // like the control bar show themselves if needed
    this.userActive_ = true;
    this.reportUserActivity();
    this.listenForUserActivity();

    this.on('fullscreenchange', this.handleFullscreenChange);
    this.on('stageclick', this.handleStageClick);
  }

  _inherits(Player, _Component);

  _createClass(Player, [{
    key: 'dispose',

    /**
     * Destroys the video player and does any necessary cleanup
     *
     *     myPlayer.dispose();
     *
     * This is especially helpful if you are dynamically adding and removing videos
     * to/from the DOM.
     */
    value: function dispose() {
      this.trigger('dispose');
      // prevent dispose from being called twice
      this.off('dispose');

      // Kill reference to this player
      Player.players[this.id_] = null;
      if (this.tag && this.tag.player) {
        this.tag.player = null;
      }
      if (this.el_ && this.el_.player) {
        this.el_.player = null;
      }

      if (this.tech) {
        this.tech.dispose();
      }

      _get(Object.getPrototypeOf(Player.prototype), 'dispose', this).call(this);
    }
  }, {
    key: 'createEl',
    value: function createEl() {
      var el = this.el_ = _get(Object.getPrototypeOf(Player.prototype), 'createEl', this).call(this, 'div');
      var tag = this.tag;

      // Remove width/height attrs from tag so CSS can make it 100% width/height
      tag.removeAttribute('width');
      tag.removeAttribute('height');

      // Copy over all the attributes from the tag, including ID and class
      // ID will now reference player box, not the video tag
      var attrs = Lib.getElementAttributes(tag);
      Lib.obj.each(attrs, function (attr) {
        // workaround so we don't totally break IE7
        // http://stackoverflow.com/questions/3653444/css-styles-not-applied-on-dynamic-elements-in-internet-explorer-7
        if (attr === 'class') {
          el.className = attrs[attr];
        } else {
          el.setAttribute(attr, attrs[attr]);
        }
      });

      // Update tag id/class for use as HTML5 playback tech
      // Might think we should do this after embedding in container so .vjs-tech class
      // doesn't flash 100% width/height, but class only applies with .video-js parent
      tag.id += '_html5_api';
      tag.className = 'vjs-tech';

      // Make player findable on elements
      tag.player = el.player = this;
      // Default state of video is paused
      this.addClass('vjs-paused');

      // Add a style element in the player that we'll use to set the width/height
      // of the player in a way that's still overrideable by CSS, just like the
      // video element
      this.styleEl_ = _document2['default'].createElement('style');
      el.appendChild(this.styleEl_);

      // Pass in the width/height/aspectRatio options which will update the style el
      this.width(this.options_.width);
      this.height(this.options_.height);
      this.fluid(this.options_.fluid);
      this.aspectRatio(this.options_.aspectRatio);

      // Lib.insertFirst seems to cause the networkState to flicker from 3 to 2, so
      // keep track of the original for later so we can know if the source originally failed
      tag.initNetworkState_ = tag.networkState;

      // Wrap video tag in div (el/box) container
      if (tag.parentNode) {
        tag.parentNode.insertBefore(el, tag);
      }
      Lib.insertFirst(tag, el); // Breaks iPhone, fixed in HTML5 setup.

      this.el_ = el;

      return el;
    }
  }, {
    key: 'width',
    value: function width(value) {
      return this.dimension('width', value);
    }
  }, {
    key: 'height',
    value: function height(value) {
      return this.dimension('height', value);
    }
  }, {
    key: 'dimension',
    value: (function (_dimension) {
      function dimension(_x, _x2) {
        return _dimension.apply(this, arguments);
      }

      dimension.toString = function () {
        return _dimension.toString();
      };

      return dimension;
    })(function (dimension, value) {
      var privDimension = dimension + '_';

      if (value === undefined) {
        return this[privDimension] || 0;
      }

      if (value === '') {
        // If an empty string is given, reset the dimension to be automatic
        this[privDimension] = undefined;
      } else {
        var parsedVal = parseFloat(value);

        if (isNaN(parsedVal)) {
          Lib.log.error('Improper value "' + value + '" supplied for for ' + dimension);
          return this;
        }

        this[privDimension] = parsedVal;
      }

      this.updateStyleEl_();
      return this;
    })
  }, {
    key: 'fluid',
    value: function fluid(bool) {
      if (bool === undefined) {
        return !!this.fluid_;
      }

      this.fluid_ = !!bool;

      if (bool) {
        this.addClass('vjs-fluid');
      } else {
        this.removeClass('vjs-fluid');
      }
    }
  }, {
    key: 'aspectRatio',
    value: function aspectRatio(ratio) {
      if (ratio === undefined) {
        return this.aspectRatio_;
      }

      // Check for width:height format
      if (!/^\d+\:\d+$/.test(ratio)) {
        throw new Error('Improper value suplied for aspect ratio. The format should be width:height, for example 16:9.');
      }
      this.aspectRatio_ = ratio;

      // We're assuming if you set an aspect ratio you want fluid mode,
      // because in fixed mode you could calculate width and height yourself.
      this.fluid(true);

      this.updateStyleEl_();
    }
  }, {
    key: 'updateStyleEl_',
    value: function updateStyleEl_() {
      var width = undefined;
      var height = undefined;
      var aspectRatio = undefined;

      // The aspect ratio is either used directly or to calculate width and height.
      if (this.aspectRatio_ !== undefined && this.aspectRatio_ !== 'auto') {
        // Use any aspectRatio that's been specifically set
        aspectRatio = this.aspectRatio_;
      } else if (this.videoWidth()) {
        // Otherwise try to get the aspect ratio from the video metadata
        aspectRatio = this.videoWidth() + ':' + this.videoHeight();
      } else {
        // Or use a default. The video element's is 2:1, but 16:9 is more common.
        aspectRatio = '16:9';
      }

      // Get the ratio as a decimal we can use to calculate dimensions
      var ratioParts = aspectRatio.split(':');
      var ratioMultiplier = ratioParts[1] / ratioParts[0];

      if (this.width_ !== undefined) {
        // Use any width that's been specifically set
        width = this.width_;
      } else if (this.height_ !== undefined) {
        // Or calulate the width from the aspect ratio if a height has been set
        width = this.height_ / ratioMultiplier;
      } else {
        // Or use the video's metadata, or use the video el's default of 300
        width = this.videoWidth() || 300;
      }

      if (this.height_ !== undefined) {
        // Use any height that's been specifically set
        height = this.height_;
      } else {
        // Otherwise calculate the height from the ratio and the width
        height = width * ratioMultiplier;
      }

      var idClass = this.id() + '-dimensions';

      // Ensure the right class is still on the player for the style element
      this.addClass(idClass);

      // Create the width/height CSS
      var css = '.' + idClass + ' { width: ' + width + 'px; height: ' + height + 'px; }';
      // Add the aspect ratio CSS for when using a fluid layout
      css += '.' + idClass + '.vjs-fluid { padding-top: ' + ratioMultiplier * 100 + '%; }';

      // Update the style el
      if (this.styleEl_.styleSheet) {
        this.styleEl_.styleSheet.cssText = css;
      } else {
        this.styleEl_.innerHTML = css;
      }
    }
  }, {
    key: 'loadTech',

    /**
     * Load the Media Playback Technology (tech)
     * Load/Create an instance of playback technology including element and API methods
     * And append playback element in player div.
     */
    value: function loadTech(techName, source) {

      // Pause and remove current playback technology
      if (this.tech) {
        this.unloadTech();
      }

      // get rid of the HTML5 video tag as soon as we are using another tech
      if (techName !== 'Html5' && this.tag) {
        _Component3['default'].getComponent('Html5').disposeMediaElement(this.tag);
        this.tag.player = null;
        this.tag = null;
      }

      this.techName = techName;

      // Turn off API access because we're loading a new tech that might load asynchronously
      this.isReady_ = false;

      var techReady = Lib.bind(this, function () {
        this.triggerReady();
      });

      // Grab tech-specific options from player options and add source and parent element to use.
      var techOptions = Lib.obj.merge({
        source: source,
        playerId: this.id(),
        textTracks: this.textTracks_
      }, this.options_[techName.toLowerCase()]);

      if (this.tag) {
        techOptions.tag = this.tag;
      }

      if (source) {
        this.currentType_ = source.type;
        if (source.src === this.cache_.src && this.cache_.currentTime > 0) {
          techOptions.startTime = this.cache_.currentTime;
        }

        this.cache_.src = source.src;
      }

      // Initialize tech instance
      var techComponent = _Component3['default'].getComponent(techName);
      this.tech = new techComponent(techOptions);

      this.on(this.tech, 'ready', this.handleTechReady);
      this.on(this.tech, 'usenativecontrols', this.handleTechUseNativeControls);

      // Listen to every HTML5 events and trigger them back on the player for the plugins
      this.on(this.tech, 'loadstart', this.handleTechLoadStart);
      this.on(this.tech, 'waiting', this.handleTechWaiting);
      this.on(this.tech, 'canplay', this.handleTechCanPlay);
      this.on(this.tech, 'canplaythrough', this.handleTechCanPlayThrough);
      this.on(this.tech, 'playing', this.handleTechPlaying);
      this.on(this.tech, 'ended', this.handleTechEnded);
      this.on(this.tech, 'seeking', this.handleTechSeeking);
      this.on(this.tech, 'seeked', this.handleTechSeeked);
      this.on(this.tech, 'play', this.handleTechPlay);
      this.on(this.tech, 'firstplay', this.handleTechFirstPlay);
      this.on(this.tech, 'pause', this.handleTechPause);
      this.on(this.tech, 'progress', this.handleTechProgress);
      this.on(this.tech, 'durationchange', this.handleTechDurationChange);
      this.on(this.tech, 'fullscreenchange', this.handleTechFullscreenChange);
      this.on(this.tech, 'error', this.handleTechError);
      this.on(this.tech, 'suspend', this.handleTechSuspend);
      this.on(this.tech, 'abort', this.handleTechAbort);
      this.on(this.tech, 'emptied', this.handleTechEmptied);
      this.on(this.tech, 'stalled', this.handleTechStalled);
      this.on(this.tech, 'loadedmetadata', this.handleTechLoadedMetaData);
      this.on(this.tech, 'loadeddata', this.handleTechLoadedData);
      this.on(this.tech, 'timeupdate', this.handleTechTimeUpdate);
      this.on(this.tech, 'ratechange', this.handleTechRateChange);
      this.on(this.tech, 'volumechange', this.handleTechVolumeChange);
      this.on(this.tech, 'texttrackchange', this.onTextTrackChange);
      this.on(this.tech, 'loadedmetadata', this.updateStyleEl_);

      if (this.controls() && !this.usingNativeControls()) {
        this.addTechControlsListeners();
      }

      // Add the tech element in the DOM if it was not already there
      // Make sure to not insert the original video element if using Html5
      if (this.tech.el().parentNode !== this.el() && (techName !== 'Html5' || !this.tag)) {
        Lib.insertFirst(this.tech.el(), this.el());
      }

      // Get rid of the original video tag reference after the first tech is loaded
      if (this.tag) {
        this.tag.player = null;
        this.tag = null;
      }

      this.tech.ready(techReady);
    }
  }, {
    key: 'unloadTech',
    value: function unloadTech() {
      // Save the current text tracks so that we can reuse the same text tracks with the next tech
      this.textTracks_ = this.textTracks();

      this.isReady_ = false;

      this.tech.dispose();

      this.tech = false;
    }
  }, {
    key: 'addTechControlsListeners',
    value: function addTechControlsListeners() {
      // Some browsers (Chrome & IE) don't trigger a click on a flash swf, but do
      // trigger mousedown/up.
      // http://stackoverflow.com/questions/1444562/javascript-onclick-event-over-flash-object
      // Any touch events are set to block the mousedown event from happening
      this.on(this.tech, 'mousedown', this.handleTechClick);

      // If the controls were hidden we don't want that to change without a tap event
      // so we'll check if the controls were already showing before reporting user
      // activity
      this.on(this.tech, 'touchstart', this.handleTechTouchStart);
      this.on(this.tech, 'touchmove', this.handleTechTouchMove);
      this.on(this.tech, 'touchend', this.handleTechTouchEnd);

      // Turn on component tap events
      this.tech.emitTapEvents();

      // The tap listener needs to come after the touchend listener because the tap
      // listener cancels out any reportedUserActivity when setting userActive(false)
      this.on(this.tech, 'tap', this.handleTechTap);
    }
  }, {
    key: 'removeTechControlsListeners',

    /**
     * Remove the listeners used for click and tap controls. This is needed for
     * toggling to controls disabled, where a tap/touch should do nothing.
     */
    value: function removeTechControlsListeners() {
      // We don't want to just use `this.off()` because there might be other needed
      // listeners added by techs that extend this.
      this.off(this.tech, 'tap', this.handleTechTap);
      this.off(this.tech, 'touchstart', this.handleTechTouchStart);
      this.off(this.tech, 'touchmove', this.handleTechTouchMove);
      this.off(this.tech, 'touchend', this.handleTechTouchEnd);
      this.off(this.tech, 'mousedown', this.handleTechClick);
    }
  }, {
    key: 'handleTechReady',

    /**
     * Player waits for the tech to be ready
     * @private
     */
    value: function handleTechReady() {
      this.triggerReady();

      // Chrome and Safari both have issues with autoplay.
      // In Safari (5.1.1), when we move the video element into the container div, autoplay doesn't work.
      // In Chrome (15), if you have autoplay + a poster + no controls, the video gets hidden (but audio plays)
      // This fixes both issues. Need to wait for API, so it updates displays correctly
      if (this.tag && this.options_.autoplay && this.paused()) {
        delete this.tag.poster; // Chrome Fix. Fixed in Chrome v16.
        this.play();
      }
    }
  }, {
    key: 'handleTechUseNativeControls',

    /**
     * Fired when the native controls are used
     * @private
     */
    value: function handleTechUseNativeControls() {
      this.usingNativeControls(true);
    }
  }, {
    key: 'handleTechLoadStart',

    /**
     * Fired when the user agent begins looking for media data
     * @event loadstart
     */
    value: function handleTechLoadStart() {
      // TODO: Update to use `emptied` event instead. See #1277.

      this.removeClass('vjs-ended');

      // reset the error state
      this.error(null);

      // If it's already playing we want to trigger a firstplay event now.
      // The firstplay event relies on both the play and loadstart events
      // which can happen in any order for a new source
      if (!this.paused()) {
        this.trigger('loadstart');
        this.trigger('firstplay');
      } else {
        // reset the hasStarted state
        this.hasStarted(false);
        this.trigger('loadstart');
      }
    }
  }, {
    key: 'hasStarted',
    value: (function (_hasStarted) {
      function hasStarted(_x3) {
        return _hasStarted.apply(this, arguments);
      }

      hasStarted.toString = function () {
        return _hasStarted.toString();
      };

      return hasStarted;
    })(function (hasStarted) {
      if (hasStarted !== undefined) {
        // only update if this is a new value
        if (this.hasStarted_ !== hasStarted) {
          this.hasStarted_ = hasStarted;
          if (hasStarted) {
            this.addClass('vjs-has-started');
            // trigger the firstplay event if this newly has played
            this.trigger('firstplay');
          } else {
            this.removeClass('vjs-has-started');
          }
        }
        return this;
      }
      return !!this.hasStarted_;
    })
  }, {
    key: 'handleTechPlay',

    /**
     * Fired whenever the media begins or resumes playback
     * @event play
     */
    value: function handleTechPlay() {
      this.removeClass('vjs-ended');
      this.removeClass('vjs-paused');
      this.addClass('vjs-playing');

      // hide the poster when the user hits play
      // https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-play
      this.hasStarted(true);

      this.trigger('play');
    }
  }, {
    key: 'handleTechWaiting',

    /**
     * Fired whenever the media begins waiting
     * @event waiting
     */
    value: function handleTechWaiting() {
      this.addClass('vjs-waiting');
      this.trigger('waiting');
    }
  }, {
    key: 'handleTechCanPlay',

    /**
     * A handler for events that signal that waiting has ended
     * which is not consistent between browsers. See #1351
     * @event canplay
     */
    value: function handleTechCanPlay() {
      this.removeClass('vjs-waiting');
      this.trigger('canplay');
    }
  }, {
    key: 'handleTechCanPlayThrough',

    /**
     * A handler for events that signal that waiting has ended
     * which is not consistent between browsers. See #1351
     * @event canplaythrough
     */
    value: function handleTechCanPlayThrough() {
      this.removeClass('vjs-waiting');
      this.trigger('canplaythrough');
    }
  }, {
    key: 'handleTechPlaying',

    /**
     * A handler for events that signal that waiting has ended
     * which is not consistent between browsers. See #1351
     * @event playing
     */
    value: function handleTechPlaying() {
      this.removeClass('vjs-waiting');
      this.trigger('playing');
    }
  }, {
    key: 'handleTechSeeking',

    /**
     * Fired whenever the player is jumping to a new time
     * @event seeking
     */
    value: function handleTechSeeking() {
      this.addClass('vjs-seeking');
      this.trigger('seeking');
    }
  }, {
    key: 'handleTechSeeked',

    /**
     * Fired when the player has finished jumping to a new time
     * @event seeked
     */
    value: function handleTechSeeked() {
      this.removeClass('vjs-seeking');
      this.trigger('seeked');
    }
  }, {
    key: 'handleTechFirstPlay',

    /**
     * Fired the first time a video is played
     *
     * Not part of the HLS spec, and we're not sure if this is the best
     * implementation yet, so use sparingly. If you don't have a reason to
     * prevent playback, use `myPlayer.one('play');` instead.
     *
     * @event firstplay
     */
    value: function handleTechFirstPlay() {
      //If the first starttime attribute is specified
      //then we will start at the given offset in seconds
      if (this.options_.starttime) {
        this.currentTime(this.options_.starttime);
      }

      this.addClass('vjs-has-started');
      this.trigger('firstplay');
    }
  }, {
    key: 'handleTechPause',

    /**
     * Fired whenever the media has been paused
     * @event pause
     */
    value: function handleTechPause() {
      this.removeClass('vjs-playing');
      this.addClass('vjs-paused');
      this.trigger('pause');
    }
  }, {
    key: 'handleTechProgress',

    /**
     * Fired while the user agent is downloading media data
     * @event progress
     */
    value: function handleTechProgress() {
      this.trigger('progress');

      // Add custom event for when source is finished downloading.
      if (this.bufferedPercent() === 1) {
        this.trigger('loadedalldata');
      }
    }
  }, {
    key: 'handleTechEnded',

    /**
     * Fired when the end of the media resource is reached (currentTime == duration)
     * @event ended
     */
    value: function handleTechEnded() {
      this.addClass('vjs-ended');
      if (this.options_.loop) {
        this.currentTime(0);
        this.play();
      } else if (!this.paused()) {
        this.pause();
      }

      this.trigger('ended');
    }
  }, {
    key: 'handleTechDurationChange',

    /**
     * Fired when the duration of the media resource is first known or changed
     * @event durationchange
     */
    value: function handleTechDurationChange() {
      this.updateDuration();
      this.trigger('durationchange');
    }
  }, {
    key: 'handleTechClick',

    /**
     * Handle a click on the media element to play/pause
     */
    value: function handleTechClick(event) {
      // We're using mousedown to detect clicks thanks to Flash, but mousedown
      // will also be triggered with right-clicks, so we need to prevent that
      if (event.button !== 0) {
        return;
      } // When controls are disabled a click should not toggle playback because
      // the click is considered a control
      if (this.controls()) {
        if (this.paused()) {
          this.play();
        } else {
          this.pause();
        }
      }
    }
  }, {
    key: 'handleTechTap',

    /**
     * Handle a tap on the media element. It will toggle the user
     * activity state, which hides and shows the controls.
     */
    value: function handleTechTap() {
      this.userActive(!this.userActive());
    }
  }, {
    key: 'handleTechTouchStart',
    value: function handleTechTouchStart() {
      this.userWasActive = this.userActive();
    }
  }, {
    key: 'handleTechTouchMove',
    value: function handleTechTouchMove() {
      if (this.userWasActive) {
        this.reportUserActivity();
      }
    }
  }, {
    key: 'handleTechTouchEnd',
    value: function handleTechTouchEnd(event) {
      // Stop the mouse events from also happening
      event.preventDefault();
    }
  }, {
    key: 'updateDuration',

    /**
     * Update the duration of the player using the tech
     * @private
     */
    value: function updateDuration() {
      // Allows for caching value instead of asking player each time.
      // We need to get the techGet response and check for a value so we don't
      // accidentally cause the stack to blow up.
      var duration = this.techGet('duration');
      if (duration) {
        if (duration < 0) {
          duration = Infinity;
        }
        this.duration(duration);
        // Determine if the stream is live and propagate styles down to UI.
        if (duration === Infinity) {
          this.addClass('vjs-live');
        } else {
          this.removeClass('vjs-live');
        }
      }
    }
  }, {
    key: 'handleFullscreenChange',

    /**
     * Fired when the player switches in or out of fullscreen mode
     * @event fullscreenchange
     */
    value: function handleFullscreenChange() {
      if (this.isFullscreen()) {
        this.addClass('vjs-fullscreen');
      } else {
        this.removeClass('vjs-fullscreen');
      }
    }
  }, {
    key: 'handleStageClick',

    /**
     * native click events on the SWF aren't triggered on IE11, Win8.1RT
     * use stageclick events triggered from inside the SWF instead
     * @private
     */
    value: function handleStageClick() {
      this.reportUserActivity();
    }
  }, {
    key: 'handleTechFullscreenChange',
    value: function handleTechFullscreenChange() {
      this.trigger('fullscreenchange');
    }
  }, {
    key: 'handleTechError',

    /**
     * Fires when an error occurred during the loading of an audio/video
     * @event error
     */
    value: function handleTechError() {
      this.error(this.tech.error().code);
    }
  }, {
    key: 'handleTechSuspend',

    /**
     * Fires when the browser is intentionally not getting media data
     * @event suspend
     */
    value: function handleTechSuspend() {
      this.trigger('suspend');
    }
  }, {
    key: 'handleTechAbort',

    /**
     * Fires when the loading of an audio/video is aborted
     * @event abort
     */
    value: function handleTechAbort() {
      this.trigger('abort');
    }
  }, {
    key: 'handleTechEmptied',

    /**
     * Fires when the current playlist is empty
     * @event emptied
     */
    value: function handleTechEmptied() {
      this.trigger('emptied');
    }
  }, {
    key: 'handleTechStalled',

    /**
     * Fires when the browser is trying to get media data, but data is not available
     * @event stalled
     */
    value: function handleTechStalled() {
      this.trigger('stalled');
    }
  }, {
    key: 'handleTechLoadedMetaData',

    /**
     * Fires when the browser has loaded meta data for the audio/video
     * @event loadedmetadata
     */
    value: function handleTechLoadedMetaData() {
      this.trigger('loadedmetadata');
    }
  }, {
    key: 'handleTechLoadedData',

    /**
     * Fires when the browser has loaded the current frame of the audio/video
     * @event loaddata
     */
    value: function handleTechLoadedData() {
      this.trigger('loadeddata');
    }
  }, {
    key: 'handleTechTimeUpdate',

    /**
     * Fires when the current playback position has changed
     * @event timeupdate
     */
    value: function handleTechTimeUpdate() {
      this.trigger('timeupdate');
    }
  }, {
    key: 'handleTechRateChange',

    /**
     * Fires when the playing speed of the audio/video is changed
     * @event ratechange
     */
    value: function handleTechRateChange() {
      this.trigger('ratechange');
    }
  }, {
    key: 'handleTechVolumeChange',

    /**
     * Fires when the volume has been changed
     * @event volumechange
     */
    value: function handleTechVolumeChange() {
      this.trigger('volumechange');
    }
  }, {
    key: 'onTextTrackChange',

    /**
     * Fires when the text track has been changed
     * @event texttrackchange
     */
    value: function onTextTrackChange() {
      this.trigger('texttrackchange');
    }
  }, {
    key: 'getCache',

    /**
     * Object for cached values.
     */
    value: function getCache() {
      return this.cache_;
    }
  }, {
    key: 'techCall',

    // Pass values to the playback tech
    value: function techCall(method, arg) {
      // If it's not ready yet, call method when it is
      if (this.tech && !this.tech.isReady_) {
        this.tech.ready(function () {
          this[method](arg);
        });

        // Otherwise call method now
      } else {
        try {
          this.tech[method](arg);
        } catch (e) {
          Lib.log(e);
          throw e;
        }
      }
    }
  }, {
    key: 'techGet',

    // Get calls can't wait for the tech, and sometimes don't need to.
    value: function techGet(method) {
      if (this.tech && this.tech.isReady_) {

        // Flash likes to die and reload when you hide or reposition it.
        // In these cases the object methods go away and we get errors.
        // When that happens we'll catch the errors and inform tech that it's not ready any more.
        try {
          return this.tech[method]();
        } catch (e) {
          // When building additional tech libs, an expected method may not be defined yet
          if (this.tech[method] === undefined) {
            Lib.log('Video.js: ' + method + ' method not defined for ' + this.techName + ' playback technology.', e);
          } else {
            // When a method isn't available on the object it throws a TypeError
            if (e.name === 'TypeError') {
              Lib.log('Video.js: ' + method + ' unavailable on ' + this.techName + ' playback technology element.', e);
              this.tech.isReady_ = false;
            } else {
              Lib.log(e);
            }
          }
          throw e;
        }
      }

      return;
    }
  }, {
    key: 'play',

    /**
     * start media playback
     *
     *     myPlayer.play();
     *
     * @return {Player} self
     */
    value: function play() {
      this.techCall('play');
      return this;
    }
  }, {
    key: 'pause',

    /**
     * Pause the video playback
     *
     *     myPlayer.pause();
     *
     * @return {Player} self
     */
    value: function pause() {
      this.techCall('pause');
      return this;
    }
  }, {
    key: 'paused',

    /**
     * Check if the player is paused
     *
     *     var isPaused = myPlayer.paused();
     *     var isPlaying = !myPlayer.paused();
     *
     * @return {Boolean} false if the media is currently playing, or true otherwise
     */
    value: function paused() {
      // The initial state of paused should be true (in Safari it's actually false)
      return this.techGet('paused') === false ? false : true;
    }
  }, {
    key: 'scrubbing',

    /**
    * Returns whether or not the user is "scrubbing". Scrubbing is when the user
    * has clicked the progress bar handle and is dragging it along the progress bar.
    * @param  {Boolean} isScrubbing   True/false the user is scrubbing
    * @return {Boolean}               The scrubbing status when getting
    * @return {Object}                The player when setting
    */
    value: function scrubbing(isScrubbing) {
      if (isScrubbing !== undefined) {
        this.scrubbing_ = !!isScrubbing;

        if (isScrubbing) {
          this.addClass('vjs-scrubbing');
        } else {
          this.removeClass('vjs-scrubbing');
        }

        return this;
      }

      return this.scrubbing_;
    }
  }, {
    key: 'currentTime',

    /**
     * Get or set the current time (in seconds)
     *
     *     // get
     *     var whereYouAt = myPlayer.currentTime();
     *
     *     // set
     *     myPlayer.currentTime(120); // 2 minutes into the video
     *
     * @param  {Number|String=} seconds The time to seek to
     * @return {Number}        The time in seconds, when not setting
     * @return {Player}    self, when the current time is set
     */
    value: function currentTime(seconds) {
      if (seconds !== undefined) {

        this.techCall('setCurrentTime', seconds);

        return this;
      }

      // cache last currentTime and return. default to 0 seconds
      //
      // Caching the currentTime is meant to prevent a massive amount of reads on the tech's
      // currentTime when scrubbing, but may not provide much performance benefit afterall.
      // Should be tested. Also something has to read the actual current time or the cache will
      // never get updated.
      return this.cache_.currentTime = this.techGet('currentTime') || 0;
    }
  }, {
    key: 'duration',

    /**
     * Get the length in time of the video in seconds
     *
     *     var lengthOfVideo = myPlayer.duration();
     *
     * **NOTE**: The video must have started loading before the duration can be
     * known, and in the case of Flash, may not be known until the video starts
     * playing.
     *
     * @return {Number} The duration of the video in seconds
     */
    value: function duration(seconds) {
      if (seconds !== undefined) {

        // cache the last set value for optimized scrubbing (esp. Flash)
        this.cache_.duration = parseFloat(seconds);

        return this;
      }

      if (this.cache_.duration === undefined) {
        this.updateDuration();
      }

      return this.cache_.duration || 0;
    }
  }, {
    key: 'remainingTime',

    /**
     * Calculates how much time is left.
     *
     *     var timeLeft = myPlayer.remainingTime();
     *
     * Not a native video element function, but useful
     * @return {Number} The time remaining in seconds
     */
    value: function remainingTime() {
      return this.duration() - this.currentTime();
    }
  }, {
    key: 'buffered',

    // http://dev.w3.org/html5/spec/video.html#dom-media-buffered
    // Buffered returns a timerange object.
    // Kind of like an array of portions of the video that have been downloaded.

    /**
     * Get a TimeRange object with the times of the video that have been downloaded
     *
     * If you just want the percent of the video that's been downloaded,
     * use bufferedPercent.
     *
     *     // Number of different ranges of time have been buffered. Usually 1.
     *     numberOfRanges = bufferedTimeRange.length,
     *
     *     // Time in seconds when the first range starts. Usually 0.
     *     firstRangeStart = bufferedTimeRange.start(0),
     *
     *     // Time in seconds when the first range ends
     *     firstRangeEnd = bufferedTimeRange.end(0),
     *
     *     // Length in seconds of the first time range
     *     firstRangeLength = firstRangeEnd - firstRangeStart;
     *
     * @return {Object} A mock TimeRange object (following HTML spec)
     */
    value: (function (_buffered) {
      function buffered() {
        return _buffered.apply(this, arguments);
      }

      buffered.toString = function () {
        return _buffered.toString();
      };

      return buffered;
    })(function () {
      var buffered = this.techGet('buffered');

      if (!buffered || !buffered.length) {
        buffered = Lib.createTimeRange(0, 0);
      }

      return buffered;
    })
  }, {
    key: 'bufferedPercent',

    /**
     * Get the percent (as a decimal) of the video that's been downloaded
     *
     *     var howMuchIsDownloaded = myPlayer.bufferedPercent();
     *
     * 0 means none, 1 means all.
     * (This method isn't in the HTML5 spec, but it's very convenient)
     *
     * @return {Number} A decimal between 0 and 1 representing the percent
     */
    value: function bufferedPercent() {
      var duration = this.duration(),
          buffered = this.buffered(),
          bufferedDuration = 0,
          start,
          end;

      if (!duration) {
        return 0;
      }

      for (var i = 0; i < buffered.length; i++) {
        start = buffered.start(i);
        end = buffered.end(i);

        // buffered end can be bigger than duration by a very small fraction
        if (end > duration) {
          end = duration;
        }

        bufferedDuration += end - start;
      }

      return bufferedDuration / duration;
    }
  }, {
    key: 'bufferedEnd',

    /**
     * Get the ending time of the last buffered time range
     *
     * This is used in the progress bar to encapsulate all time ranges.
     * @return {Number} The end of the last buffered time range
     */
    value: function bufferedEnd() {
      var buffered = this.buffered(),
          duration = this.duration(),
          end = buffered.end(buffered.length - 1);

      if (end > duration) {
        end = duration;
      }

      return end;
    }
  }, {
    key: 'volume',

    /**
     * Get or set the current volume of the media
     *
     *     // get
     *     var howLoudIsIt = myPlayer.volume();
     *
     *     // set
     *     myPlayer.volume(0.5); // Set volume to half
     *
     * 0 is off (muted), 1.0 is all the way up, 0.5 is half way.
     *
     * @param  {Number} percentAsDecimal The new volume as a decimal percent
     * @return {Number}                  The current volume, when getting
     * @return {Player}              self, when setting
     */
    value: function volume(percentAsDecimal) {
      var vol = undefined;

      if (percentAsDecimal !== undefined) {
        vol = Math.max(0, Math.min(1, parseFloat(percentAsDecimal))); // Force value to between 0 and 1
        this.cache_.volume = vol;
        this.techCall('setVolume', vol);
        Lib.setLocalStorage('volume', vol);
        return this;
      }

      // Default to 1 when returning current volume.
      vol = parseFloat(this.techGet('volume'));
      return isNaN(vol) ? 1 : vol;
    }
  }, {
    key: 'muted',

    /**
     * Get the current muted state, or turn mute on or off
     *
     *     // get
     *     var isVolumeMuted = myPlayer.muted();
     *
     *     // set
     *     myPlayer.muted(true); // mute the volume
     *
     * @param  {Boolean=} muted True to mute, false to unmute
     * @return {Boolean} True if mute is on, false if not, when getting
     * @return {Player} self, when setting mute
     */
    value: (function (_muted) {
      function muted(_x4) {
        return _muted.apply(this, arguments);
      }

      muted.toString = function () {
        return _muted.toString();
      };

      return muted;
    })(function (muted) {
      if (muted !== undefined) {
        this.techCall('setMuted', muted);
        return this;
      }
      return this.techGet('muted') || false; // Default to false
    })
  }, {
    key: 'supportsFullScreen',

    // Check if current tech can support native fullscreen
    // (e.g. with built in controls like iOS, so not our flash swf)
    value: function supportsFullScreen() {
      return this.techGet('supportsFullScreen') || false;
    }
  }, {
    key: 'isFullscreen',

    /**
     * Check if the player is in fullscreen mode
     *
     *     // get
     *     var fullscreenOrNot = myPlayer.isFullscreen();
     *
     *     // set
     *     myPlayer.isFullscreen(true); // tell the player it's in fullscreen
     *
     * NOTE: As of the latest HTML5 spec, isFullscreen is no longer an official
     * property and instead document.fullscreenElement is used. But isFullscreen is
     * still a valuable property for internal player workings.
     *
     * @param  {Boolean=} isFS Update the player's fullscreen state
     * @return {Boolean} true if fullscreen, false if not
     * @return {Player} self, when setting
     */
    value: function isFullscreen(isFS) {
      if (isFS !== undefined) {
        this.isFullscreen_ = !!isFS;
        return this;
      }
      return !!this.isFullscreen_;
    }
  }, {
    key: 'isFullScreen',

    /**
     * Old naming for isFullscreen()
     * @deprecated for lowercase 's' version
     */
    value: function isFullScreen(isFS) {
      Lib.log.warn('player.isFullScreen() has been deprecated, use player.isFullscreen() with a lowercase "s")');
      return this.isFullscreen(isFS);
    }
  }, {
    key: 'requestFullscreen',

    /**
     * Increase the size of the video to full screen
     *
     *     myPlayer.requestFullscreen();
     *
     * In some browsers, full screen is not supported natively, so it enters
     * "full window mode", where the video fills the browser window.
     * In browsers and devices that support native full screen, sometimes the
     * browser's default controls will be shown, and not the Video.js custom skin.
     * This includes most mobile devices (iOS, Android) and older versions of
     * Safari.
     *
     * @return {Player} self
     */
    value: function requestFullscreen() {
      var fsApi = _FullscreenApi2['default'];

      this.isFullscreen(true);

      if (fsApi) {
        // the browser supports going fullscreen at the element level so we can
        // take the controls fullscreen as well as the video

        // Trigger fullscreenchange event after change
        // We have to specifically add this each time, and remove
        // when canceling fullscreen. Otherwise if there's multiple
        // players on a page, they would all be reacting to the same fullscreen
        // events
        Events.on(_document2['default'], fsApi.fullscreenchange, Lib.bind(this, function documentFullscreenChange(e) {
          this.isFullscreen(_document2['default'][fsApi.fullscreenElement]);

          // If cancelling fullscreen, remove event listener.
          if (this.isFullscreen() === false) {
            Events.off(_document2['default'], fsApi.fullscreenchange, documentFullscreenChange);
          }

          this.trigger('fullscreenchange');
        }));

        this.el_[fsApi.requestFullscreen]();
      } else if (this.tech.supportsFullScreen()) {
        // we can't take the video.js controls fullscreen but we can go fullscreen
        // with native controls
        this.techCall('enterFullScreen');
      } else {
        // fullscreen isn't supported so we'll just stretch the video element to
        // fill the viewport
        this.enterFullWindow();
        this.trigger('fullscreenchange');
      }

      return this;
    }
  }, {
    key: 'requestFullScreen',

    /**
     * Old naming for requestFullscreen
     * @deprecated for lower case 's' version
     */
    value: function requestFullScreen() {
      Lib.log.warn('player.requestFullScreen() has been deprecated, use player.requestFullscreen() with a lowercase "s")');
      return this.requestFullscreen();
    }
  }, {
    key: 'exitFullscreen',

    /**
     * Return the video to its normal size after having been in full screen mode
     *
     *     myPlayer.exitFullscreen();
     *
     * @return {Player} self
     */
    value: function exitFullscreen() {
      var fsApi = _FullscreenApi2['default'];
      this.isFullscreen(false);

      // Check for browser element fullscreen support
      if (fsApi) {
        _document2['default'][fsApi.exitFullscreen]();
      } else if (this.tech.supportsFullScreen()) {
        this.techCall('exitFullScreen');
      } else {
        this.exitFullWindow();
        this.trigger('fullscreenchange');
      }

      return this;
    }
  }, {
    key: 'cancelFullScreen',

    /**
     * Old naming for exitFullscreen
     * @deprecated for exitFullscreen
     */
    value: function cancelFullScreen() {
      Lib.log.warn('player.cancelFullScreen() has been deprecated, use player.exitFullscreen()');
      return this.exitFullscreen();
    }
  }, {
    key: 'enterFullWindow',

    // When fullscreen isn't supported we can stretch the video container to as wide as the browser will let us.
    value: function enterFullWindow() {
      this.isFullWindow = true;

      // Storing original doc overflow value to return to when fullscreen is off
      this.docOrigOverflow = _document2['default'].documentElement.style.overflow;

      // Add listener for esc key to exit fullscreen
      Events.on(_document2['default'], 'keydown', Lib.bind(this, this.fullWindowOnEscKey));

      // Hide any scroll bars
      _document2['default'].documentElement.style.overflow = 'hidden';

      // Apply fullscreen styles
      Lib.addClass(_document2['default'].body, 'vjs-full-window');

      this.trigger('enterFullWindow');
    }
  }, {
    key: 'fullWindowOnEscKey',
    value: function fullWindowOnEscKey(event) {
      if (event.keyCode === 27) {
        if (this.isFullscreen() === true) {
          this.exitFullscreen();
        } else {
          this.exitFullWindow();
        }
      }
    }
  }, {
    key: 'exitFullWindow',
    value: function exitFullWindow() {
      this.isFullWindow = false;
      Events.off(_document2['default'], 'keydown', this.fullWindowOnEscKey);

      // Unhide scroll bars.
      _document2['default'].documentElement.style.overflow = this.docOrigOverflow;

      // Remove fullscreen styles
      Lib.removeClass(_document2['default'].body, 'vjs-full-window');

      // Resize the box, controller, and poster to original sizes
      // this.positionAll();
      this.trigger('exitFullWindow');
    }
  }, {
    key: 'selectSource',
    value: function selectSource(sources) {
      // Loop through each playback technology in the options order
      for (var i = 0, j = this.options_.techOrder; i < j.length; i++) {
        var techName = Lib.capitalize(j[i]);
        var tech = _Component3['default'].getComponent(techName);

        // Check if the current tech is defined before continuing
        if (!tech) {
          Lib.log.error('The "' + techName + '" tech is undefined. Skipped browser support check for that tech.');
          continue;
        }

        // Check if the browser supports this technology
        if (tech.isSupported()) {
          // Loop through each source object
          for (var a = 0, b = sources; a < b.length; a++) {
            var source = b[a];

            // Check if source can be played with this technology
            if (tech.canPlaySource(source)) {
              return { source: source, tech: techName };
            }
          }
        }
      }

      return false;
    }
  }, {
    key: 'src',

    /**
     * The source function updates the video source
     *
     * There are three types of variables you can pass as the argument.
     *
     * **URL String**: A URL to the the video file. Use this method if you are sure
     * the current playback technology (HTML5/Flash) can support the source you
     * provide. Currently only MP4 files can be used in both HTML5 and Flash.
     *
     *     myPlayer.src("http://www.example.com/path/to/video.mp4");
     *
     * **Source Object (or element):** A javascript object containing information
     * about the source file. Use this method if you want the player to determine if
     * it can support the file using the type information.
     *
     *     myPlayer.src({ type: "video/mp4", src: "http://www.example.com/path/to/video.mp4" });
     *
     * **Array of Source Objects:** To provide multiple versions of the source so
     * that it can be played using HTML5 across browsers you can use an array of
     * source objects. Video.js will detect which version is supported and load that
     * file.
     *
     *     myPlayer.src([
     *       { type: "video/mp4", src: "http://www.example.com/path/to/video.mp4" },
     *       { type: "video/webm", src: "http://www.example.com/path/to/video.webm" },
     *       { type: "video/ogg", src: "http://www.example.com/path/to/video.ogv" }
     *     ]);
     *
     * @param  {String|Object|Array=} source The source URL, object, or array of sources
     * @return {String} The current video source when getting
     * @return {String} The player when setting
     */
    value: function src() {
      var source = arguments[0] === undefined ? this.techGet('src') : arguments[0];

      var currentTech = _Component3['default'].getComponent(this.techName);

      // case: Array of source objects to choose from and pick the best to play
      if (Lib.obj.isArray(source)) {
        this.sourceList_(source);

        // case: URL String (http://myvideo...)
      } else if (typeof source === 'string') {
        // create a source object from the string
        this.src({ src: source });

        // case: Source object { src: '', type: '' ... }
      } else if (source instanceof Object) {
        // check if the source has a type and the loaded tech cannot play the source
        // if there's no type we'll just try the current tech
        if (source.type && !currentTech.canPlaySource(source)) {
          // create a source list with the current source and send through
          // the tech loop to check for a compatible technology
          this.sourceList_([source]);
        } else {
          this.cache_.src = source.src;
          this.currentType_ = source.type || '';

          // wait until the tech is ready to set the source
          this.ready(function () {

            // The setSource tech method was added with source handlers
            // so older techs won't support it
            // We need to check the direct prototype for the case where subclasses
            // of the tech do not support source handlers
            if (currentTech.prototype.hasOwnProperty('setSource')) {
              this.techCall('setSource', source);
            } else {
              this.techCall('src', source.src);
            }

            if (this.options_.preload === 'auto') {
              this.load();
            }

            if (this.options_.autoplay) {
              this.play();
            }
          });
        }
      }

      return this;
    }
  }, {
    key: 'sourceList_',

    /**
     * Handle an array of source objects
     * @param  {[type]} sources Array of source objects
     * @private
     */
    value: function sourceList_(sources) {
      var sourceTech = this.selectSource(sources);

      if (sourceTech) {
        if (sourceTech.tech === this.techName) {
          // if this technology is already loaded, set the source
          this.src(sourceTech.source);
        } else {
          // load this technology with the chosen source
          this.loadTech(sourceTech.tech, sourceTech.source);
        }
      } else {
        // We need to wrap this in a timeout to give folks a chance to add error event handlers
        this.setTimeout(function () {
          this.error({ code: 4, message: this.localize(this.options().notSupportedMessage) });
        }, 0);

        // we could not find an appropriate tech, but let's still notify the delegate that this is it
        // this needs a better comment about why this is needed
        this.triggerReady();
      }
    }
  }, {
    key: 'load',

    /**
     * Begin loading the src data.
     * @return {Player} Returns the player
     */
    value: function load() {
      this.techCall('load');
      return this;
    }
  }, {
    key: 'currentSrc',

    /**
     * Returns the fully qualified URL of the current source value e.g. http://mysite.com/video.mp4
     * Can be used in conjuction with `currentType` to assist in rebuilding the current source object.
     * @return {String} The current source
     */
    value: function currentSrc() {
      return this.techGet('currentSrc') || this.cache_.src || '';
    }
  }, {
    key: 'currentType',

    /**
     * Get the current source type e.g. video/mp4
     * This can allow you rebuild the current source object so that you could load the same
     * source and tech later
     * @return {String} The source MIME type
     */
    value: function currentType() {
      return this.currentType_ || '';
    }
  }, {
    key: 'preload',

    /**
     * Get or set the preload attribute.
     * @return {String} The preload attribute value when getting
     * @return {Player} Returns the player when setting
     */
    value: function preload(value) {
      if (value !== undefined) {
        this.techCall('setPreload', value);
        this.options_.preload = value;
        return this;
      }
      return this.techGet('preload');
    }
  }, {
    key: 'autoplay',

    /**
     * Get or set the autoplay attribute.
     * @return {String} The autoplay attribute value when getting
     * @return {Player} Returns the player when setting
     */
    value: function autoplay(value) {
      if (value !== undefined) {
        this.techCall('setAutoplay', value);
        this.options_.autoplay = value;
        return this;
      }
      return this.techGet('autoplay', value);
    }
  }, {
    key: 'loop',

    /**
     * Get or set the loop attribute on the video element.
     * @return {String} The loop attribute value when getting
     * @return {Player} Returns the player when setting
     */
    value: function loop(value) {
      if (value !== undefined) {
        this.techCall('setLoop', value);
        this.options_.loop = value;
        return this;
      }
      return this.techGet('loop');
    }
  }, {
    key: 'poster',

    /**
     * get or set the poster image source url
     *
     * ##### EXAMPLE:
     *
     *     // getting
     *     var currentPoster = myPlayer.poster();
     *
     *     // setting
     *     myPlayer.poster('http://example.com/myImage.jpg');
     *
     * @param  {String=} [src] Poster image source URL
     * @return {String} poster URL when getting
     * @return {Player} self when setting
     */
    value: function poster(src) {
      if (src === undefined) {
        return this.poster_;
      }

      // The correct way to remove a poster is to set as an empty string
      // other falsey values will throw errors
      if (!src) {
        src = '';
      }

      // update the internal poster variable
      this.poster_ = src;

      // update the tech's poster
      this.techCall('setPoster', src);

      // alert components that the poster has been set
      this.trigger('posterchange');

      return this;
    }
  }, {
    key: 'controls',

    /**
     * Get or set whether or not the controls are showing.
     * @param  {Boolean} controls Set controls to showing or not
     * @return {Boolean}    Controls are showing
     */
    value: function controls(bool) {
      if (bool !== undefined) {
        bool = !!bool; // force boolean
        // Don't trigger a change event unless it actually changed
        if (this.controls_ !== bool) {
          this.controls_ = bool;

          if (this.usingNativeControls()) {
            this.techCall('setControls', bool);
          }

          if (bool) {
            this.removeClass('vjs-controls-disabled');
            this.addClass('vjs-controls-enabled');
            this.trigger('controlsenabled');

            if (!this.usingNativeControls()) {
              this.addTechControlsListeners();
            }
          } else {
            this.removeClass('vjs-controls-enabled');
            this.addClass('vjs-controls-disabled');
            this.trigger('controlsdisabled');

            if (!this.usingNativeControls()) {
              this.removeTechControlsListeners();
            }
          }
        }
        return this;
      }
      return !!this.controls_;
    }
  }, {
    key: 'usingNativeControls',

    /**
     * Toggle native controls on/off. Native controls are the controls built into
     * devices (e.g. default iPhone controls), Flash, or other techs
     * (e.g. Vimeo Controls)
     *
     * **This should only be set by the current tech, because only the tech knows
     * if it can support native controls**
     *
     * @param  {Boolean} bool    True signals that native controls are on
     * @return {Player}      Returns the player
     * @private
     */
    value: function usingNativeControls(bool) {
      if (bool !== undefined) {
        bool = !!bool; // force boolean
        // Don't trigger a change event unless it actually changed
        if (this.usingNativeControls_ !== bool) {
          this.usingNativeControls_ = bool;
          if (bool) {
            this.addClass('vjs-using-native-controls');

            /**
             * player is using the native device controls
             *
             * @event usingnativecontrols
             * @memberof Player
             * @instance
             * @private
             */
            this.trigger('usingnativecontrols');
          } else {
            this.removeClass('vjs-using-native-controls');

            /**
             * player is using the custom HTML controls
             *
             * @event usingcustomcontrols
             * @memberof Player
             * @instance
             * @private
             */
            this.trigger('usingcustomcontrols');
          }
        }
        return this;
      }
      return !!this.usingNativeControls_;
    }
  }, {
    key: 'error',

    /**
     * Set or get the current MediaError
     * @param  {*} err A MediaError or a String/Number to be turned into a MediaError
     * @return {MediaError|null}     when getting
     * @return {Player}              when setting
     */
    value: function error(err) {
      if (err === undefined) {
        return this.error_ || null;
      }

      // restoring to default
      if (err === null) {
        this.error_ = err;
        this.removeClass('vjs-error');
        return this;
      }

      // error instance
      if (err instanceof _MediaError2['default']) {
        this.error_ = err;
      } else {
        this.error_ = new _MediaError2['default'](err);
      }

      // fire an error event on the player
      this.trigger('error');

      // add the vjs-error classname to the player
      this.addClass('vjs-error');

      // log the name of the error type and any message
      // ie8 just logs "[object object]" if you just log the error object
      Lib.log.error('(CODE:' + this.error_.code + ' ' + _MediaError2['default'].errorTypes[this.error_.code] + ')', this.error_.message, this.error_);

      return this;
    }
  }, {
    key: 'ended',

    /**
     * Returns whether or not the player is in the "ended" state.
     * @return {Boolean} True if the player is in the ended state, false if not.
     */
    value: function ended() {
      return this.techGet('ended');
    }
  }, {
    key: 'seeking',

    /**
     * Returns whether or not the player is in the "seeking" state.
     * @return {Boolean} True if the player is in the seeking state, false if not.
     */
    value: function seeking() {
      return this.techGet('seeking');
    }
  }, {
    key: 'reportUserActivity',
    value: function reportUserActivity(event) {
      this.userActivity_ = true;
    }
  }, {
    key: 'userActive',
    value: function userActive(bool) {
      if (bool !== undefined) {
        bool = !!bool;
        if (bool !== this.userActive_) {
          this.userActive_ = bool;
          if (bool) {
            // If the user was inactive and is now active we want to reset the
            // inactivity timer
            this.userActivity_ = true;
            this.removeClass('vjs-user-inactive');
            this.addClass('vjs-user-active');
            this.trigger('useractive');
          } else {
            // We're switching the state to inactive manually, so erase any other
            // activity
            this.userActivity_ = false;

            // Chrome/Safari/IE have bugs where when you change the cursor it can
            // trigger a mousemove event. This causes an issue when you're hiding
            // the cursor when the user is inactive, and a mousemove signals user
            // activity. Making it impossible to go into inactive mode. Specifically
            // this happens in fullscreen when we really need to hide the cursor.
            //
            // When this gets resolved in ALL browsers it can be removed
            // https://code.google.com/p/chromium/issues/detail?id=103041
            if (this.tech) {
              this.tech.one('mousemove', function (e) {
                e.stopPropagation();
                e.preventDefault();
              });
            }

            this.removeClass('vjs-user-active');
            this.addClass('vjs-user-inactive');
            this.trigger('userinactive');
          }
        }
        return this;
      }
      return this.userActive_;
    }
  }, {
    key: 'listenForUserActivity',
    value: function listenForUserActivity() {
      var mouseInProgress = undefined,
          lastMoveX = undefined,
          lastMoveY = undefined;

      var handleActivity = Lib.bind(this, this.reportUserActivity);

      var handleMouseMove = function handleMouseMove(e) {
        // #1068 - Prevent mousemove spamming
        // Chrome Bug: https://code.google.com/p/chromium/issues/detail?id=366970
        if (e.screenX !== lastMoveX || e.screenY !== lastMoveY) {
          lastMoveX = e.screenX;
          lastMoveY = e.screenY;
          handleActivity();
        }
      };

      var handleMouseDown = function handleMouseDown() {
        handleActivity();
        // For as long as the they are touching the device or have their mouse down,
        // we consider them active even if they're not moving their finger or mouse.
        // So we want to continue to update that they are active
        this.clearInterval(mouseInProgress);
        // Setting userActivity=true now and setting the interval to the same time
        // as the activityCheck interval (250) should ensure we never miss the
        // next activityCheck
        mouseInProgress = this.setInterval(handleActivity, 250);
      };

      var handleMouseUp = function handleMouseUp(event) {
        handleActivity();
        // Stop the interval that maintains activity if the mouse/touch is down
        this.clearInterval(mouseInProgress);
      };

      // Any mouse movement will be considered user activity
      this.on('mousedown', handleMouseDown);
      this.on('mousemove', handleMouseMove);
      this.on('mouseup', handleMouseUp);

      // Listen for keyboard navigation
      // Shouldn't need to use inProgress interval because of key repeat
      this.on('keydown', handleActivity);
      this.on('keyup', handleActivity);

      // Run an interval every 250 milliseconds instead of stuffing everything into
      // the mousemove/touchmove function itself, to prevent performance degradation.
      // `this.reportUserActivity` simply sets this.userActivity_ to true, which
      // then gets picked up by this loop
      // http://ejohn.org/blog/learning-from-twitter/
      var activityCheck = this.setInterval(function () {
        var inactivityTimeout = undefined;

        // Check to see if mouse/touch activity has happened
        if (this.userActivity_) {
          // Reset the activity tracker
          this.userActivity_ = false;

          // If the user state was inactive, set the state to active
          this.userActive(true);

          // Clear any existing inactivity timeout to start the timer over
          this.clearTimeout(inactivityTimeout);

          var timeout = this.options().inactivityTimeout;
          if (timeout > 0) {
            // In <timeout> milliseconds, if no more activity has occurred the
            // user will be considered inactive
            inactivityTimeout = this.setTimeout(function () {
              // Protect against the case where the inactivityTimeout can trigger just
              // before the next user activity is picked up by the activityCheck loop
              // causing a flicker
              if (!this.userActivity_) {
                this.userActive(false);
              }
            }, timeout);
          }
        }
      }, 250);
    }
  }, {
    key: 'playbackRate',

    /**
     * Gets or sets the current playback rate.  A playback rate of
     * 1.0 represents normal speed and 0.5 would indicate half-speed
     * playback, for instance.
     * @param  {Number} rate    New playback rate to set.
     * @return {Number}         Returns the new playback rate when setting
     * @return {Number}         Returns the current playback rate when getting
     * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-playbackrate
     */
    value: function playbackRate(rate) {
      if (rate !== undefined) {
        this.techCall('setPlaybackRate', rate);
        return this;
      }

      if (this.tech && this.tech.featuresPlaybackRate) {
        return this.techGet('playbackRate');
      } else {
        return 1;
      }
    }
  }, {
    key: 'isAudio',

    /**
     * Gets or sets the audio flag
     *
     * @param  {Boolean} bool    True signals that this is an audio player.
     * @return {Boolean}         Returns true if player is audio, false if not when getting
     * @return {Player}      Returns the player if setting
     * @private
     */
    value: function isAudio(bool) {
      if (bool !== undefined) {
        this.isAudio_ = !!bool;
        return this;
      }

      return !!this.isAudio_;
    }
  }, {
    key: 'networkState',

    /**
     * Returns the current state of network activity for the element, from
     * the codes in the list below.
     * - NETWORK_EMPTY (numeric value 0)
     *   The element has not yet been initialised. All attributes are in
     *   their initial states.
     * - NETWORK_IDLE (numeric value 1)
     *   The element's resource selection algorithm is active and has
     *   selected a resource, but it is not actually using the network at
     *   this time.
     * - NETWORK_LOADING (numeric value 2)
     *   The user agent is actively trying to download data.
     * - NETWORK_NO_SOURCE (numeric value 3)
     *   The element's resource selection algorithm is active, but it has
     *   not yet found a resource to use.
     * @return {Number} the current network activity state
     * @see https://html.spec.whatwg.org/multipage/embedded-content.html#network-states
     */
    value: function networkState() {
      return this.techGet('networkState');
    }
  }, {
    key: 'readyState',

    /**
     * Returns a value that expresses the current state of the element
     * with respect to rendering the current playback position, from the
     * codes in the list below.
     * - HAVE_NOTHING (numeric value 0)
     *   No information regarding the media resource is available.
     * - HAVE_METADATA (numeric value 1)
     *   Enough of the resource has been obtained that the duration of the
     *   resource is available.
     * - HAVE_CURRENT_DATA (numeric value 2)
     *   Data for the immediate current playback position is available.
     * - HAVE_FUTURE_DATA (numeric value 3)
     *   Data for the immediate current playback position is available, as
     *   well as enough data for the user agent to advance the current
     *   playback position in the direction of playback.
     * - HAVE_ENOUGH_DATA (numeric value 4)
     *   The user agent estimates that enough data is available for
     *   playback to proceed uninterrupted.
     * @return {Number} the current playback rendering state
     * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-readystate
     */
    value: function readyState() {
      return this.techGet('readyState');
    }
  }, {
    key: 'textTracks',

    /**
     * Text tracks are tracks of timed text events.
     * Captions - text displayed over the video for the hearing impaired
     * Subtitles - text displayed over the video for those who don't understand language in the video
     * Chapters - text displayed in a menu allowing the user to jump to particular points (chapters) in the video
     * Descriptions (not supported yet) - audio descriptions that are read back to the user by a screen reading device
     */

    /**
     * Get an array of associated text tracks. captions, subtitles, chapters, descriptions
     * http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-texttracks
     * @return {Array}           Array of track objects
     */
    value: function textTracks() {
      // cannot use techGet directly because it checks to see whether the tech is ready.
      // Flash is unlikely to be ready in time but textTracks should still work.
      return this.tech && this.tech.textTracks();
    }
  }, {
    key: 'remoteTextTracks',
    value: function remoteTextTracks() {
      return this.tech && this.tech.remoteTextTracks();
    }
  }, {
    key: 'addTextTrack',

    /**
     * Add a text track
     * In addition to the W3C settings we allow adding additional info through options.
     * http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-addtexttrack
     * @param {String}  kind        Captions, subtitles, chapters, descriptions, or metadata
     * @param {String=} label       Optional label
     * @param {String=} language    Optional language
     */
    value: function addTextTrack(kind, label, language) {
      return this.tech && this.tech.addTextTrack(kind, label, language);
    }
  }, {
    key: 'addRemoteTextTrack',
    value: function addRemoteTextTrack(options) {
      return this.tech && this.tech.addRemoteTextTrack(options);
    }
  }, {
    key: 'removeRemoteTextTrack',
    value: function removeRemoteTextTrack(track) {
      this.tech && this.tech.removeRemoteTextTrack(track);
    }
  }, {
    key: 'videoWidth',
    value: function videoWidth() {
      return this.tech && this.tech.videoWidth && this.tech.videoWidth() || 0;
    }
  }, {
    key: 'videoHeight',
    value: function videoHeight() {
      return this.tech && this.tech.videoHeight && this.tech.videoHeight() || 0;
    }
  }, {
    key: 'language',

    // Methods to add support for
    // initialTime: function(){ return this.techCall('initialTime'); },
    // startOffsetTime: function(){ return this.techCall('startOffsetTime'); },
    // played: function(){ return this.techCall('played'); },
    // seekable: function(){ return this.techCall('seekable'); },
    // videoTracks: function(){ return this.techCall('videoTracks'); },
    // audioTracks: function(){ return this.techCall('audioTracks'); },
    // defaultPlaybackRate: function(){ return this.techCall('defaultPlaybackRate'); },
    // mediaGroup: function(){ return this.techCall('mediaGroup'); },
    // controller: function(){ return this.techCall('controller'); },
    // defaultMuted: function(){ return this.techCall('defaultMuted'); }

    // TODO
    // currentSrcList: the array of sources including other formats and bitrates
    // playList: array of source lists in order of playback

    /**
     * The player's language code
     * @param  {String} languageCode  The locale string
     * @return {String}             The locale string when getting
     * @return {Player}         self, when setting
     */
    value: function language(languageCode) {
      if (languageCode === undefined) {
        return this.language_;
      }

      this.language_ = languageCode;
      return this;
    }
  }, {
    key: 'languages',

    /**
     * Get the player's language dictionary
     */
    value: function languages() {
      return this.languages_;
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      var options = Lib.obj.deepMerge({}, this.options());
      var tracks = options.tracks;

      options.tracks = [];

      for (var i = 0; i < tracks.length; i++) {
        var track = tracks[i];

        // deep merge tracks and null out player so no circular references
        track = Lib.obj.deepMerge({}, track);
        track.player = undefined;
        options.tracks[i] = track;
      }

      return options;
    }
  }], [{
    key: 'getTagSettings',
    value: function getTagSettings(tag) {
      var baseOptions = {
        sources: [],
        tracks: []
      };

      var tagOptions = Lib.getElementAttributes(tag);
      var dataSetup = tagOptions['data-setup'];

      // Check if data-setup attr exists.
      if (dataSetup !== null) {
        // Parse options JSON
        // If empty string, make it a parsable json object.

        var _safeParseTuple = _safeParseTuple4['default'](dataSetup || '{}');

        var _safeParseTuple2 = _slicedToArray(_safeParseTuple, 2);

        var err = _safeParseTuple2[0];
        var data = _safeParseTuple2[1];

        if (err) {
          Lib.log.error(err);
        }
        Lib.obj.merge(tagOptions, data);
      }

      Lib.obj.merge(baseOptions, tagOptions);

      // Get tag children settings
      if (tag.hasChildNodes()) {
        var children = tag.childNodes;

        for (var i = 0, j = children.length; i < j; i++) {
          var child = children[i];
          // Change case needed: http://ejohn.org/blog/nodename-case-sensitivity/
          var childName = child.nodeName.toLowerCase();
          if (childName === 'source') {
            baseOptions.sources.push(Lib.getElementAttributes(child));
          } else if (childName === 'track') {
            baseOptions.tracks.push(Lib.getElementAttributes(child));
          }
        }
      }

      return baseOptions;
    }
  }]);

  return Player;
})(_Component3['default']);

/**
 * Global player list
 * @type {Object}
 */
Player.players = {};

/**
 * Player instance options, surfaced using options
 * options = Player.prototype.options_
 * Make changes in options, not here.
 * All options should use string keys so they avoid
 * renaming by closure compiler
 * @type {Object}
 * @private
 */
Player.prototype.options_ = _Options2['default'];

/**
 * Fired when the player has initial duration and dimension information
 * @event loadedmetadata
 */
Player.prototype.handleLoadedMetaData;

/**
 * Fired when the player has downloaded data at the current playback position
 * @event loadeddata
 */
Player.prototype.handleLoadedData;

/**
 * Fired when the player has finished downloading the source data
 * @event loadedalldata
 */
Player.prototype.handleLoadedAllData;

/**
 * Fired when the user is active, e.g. moves the mouse over the player
 * @event useractive
 */
Player.prototype.handleUserActive;

/**
 * Fired when the user is inactive, e.g. a short delay after the last mouse move or control interaction
 * @event userinactive
 */
Player.prototype.handleUserInactive;

/**
 * Fired when the current playback position has changed
 *
 * During playback this is fired every 15-250 milliseconds, depending on the
 * playback technology in use.
 * @event timeupdate
 */
Player.prototype.handleTimeUpdate;

/**
 * Fired when the volume changes
 * @event volumechange
 */
Player.prototype.handleVolumeChange;

/**
 * Fired when an error occurs
 * @event error
 */
Player.prototype.handleError;

Player.prototype.flexNotSupported_ = function () {
  var elem = _document2['default'].createElement('i');

  return !('flexBasis' in elem.style || 'webkitFlexBasis' in elem.style || 'mozFlexBasis' in elem.style || 'msFlexBasis' in elem.style);
};

_Component3['default'].registerComponent('Player', Player);
exports['default'] = Player;
module.exports = exports['default'];

},{"./big-play-button.js":5,"./component.js":7,"./control-bar/control-bar.js":8,"./error-display.js":41,"./events.js":43,"./fullscreen-api.js":45,"./lib.js":46,"./loading-spinner.js":47,"./media-error.js":48,"./options.js":52,"./poster-image.js":55,"./tech/html5.js":61,"./tech/loader.js":62,"./tracks/text-track-display.js":65,"./tracks/text-track-settings.js":68,"global/document":1,"global/window":2,"safe-json-parse/tuple":4}],54:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _Player = _dereq_('./player');

var _Player2 = _interopRequireWildcard(_Player);

/**
 * the method for registering a video.js plugin
 *
 * @param  {String} name The name of the plugin
 * @param  {Function} init The function that is run when the player inits
 */
var plugin = function plugin(name, init) {
  _Player2['default'].prototype[name] = init;
};

exports['default'] = plugin;
module.exports = exports['default'];

},{"./player":53}],55:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _Button2 = _dereq_('./button');

var _Button3 = _interopRequireWildcard(_Button2);

var _import = _dereq_('./lib');

var Lib = _interopRequireWildcard(_import);

/* Poster Image
================================================================================ */
/**
 * The component that handles showing the poster image.
 *
 * @param {Player|Object} player
 * @param {Object=} options
 * @constructor
 */

var PosterImage = (function (_Button) {
  function PosterImage(player, options) {
    _classCallCheck(this, PosterImage);

    _get(Object.getPrototypeOf(PosterImage.prototype), 'constructor', this).call(this, player, options);

    this.update();
    player.on('posterchange', Lib.bind(this, this.update));
  }

  _inherits(PosterImage, _Button);

  _createClass(PosterImage, [{
    key: 'dispose',

    /**
     * Clean up the poster image
     */
    value: function dispose() {
      this.player().off('posterchange', this.update);
      _get(Object.getPrototypeOf(PosterImage.prototype), 'dispose', this).call(this);
    }
  }, {
    key: 'createEl',

    /**
     * Create the poster image element
     * @return {Element}
     */
    value: function createEl() {
      var el = Lib.createEl('div', {
        className: 'vjs-poster',

        // Don't want poster to be tabbable.
        tabIndex: -1
      });

      // To ensure the poster image resizes while maintaining its original aspect
      // ratio, use a div with `background-size` when available. For browsers that
      // do not support `background-size` (e.g. IE8), fall back on using a regular
      // img element.
      if (!Lib.BACKGROUND_SIZE_SUPPORTED) {
        this.fallbackImg_ = Lib.createEl('img');
        el.appendChild(this.fallbackImg_);
      }

      return el;
    }
  }, {
    key: 'update',

    /**
     * Event handler for updates to the player's poster source
     */
    value: function update() {
      var url = this.player().poster();

      this.setSrc(url);

      // If there's no poster source we should display:none on this component
      // so it's not still clickable or right-clickable
      if (url) {
        this.show();
      } else {
        this.hide();
      }
    }
  }, {
    key: 'setSrc',

    /**
     * Set the poster source depending on the display method
     */
    value: function setSrc(url) {
      if (this.fallbackImg_) {
        this.fallbackImg_.src = url;
      } else {
        var backgroundImage = '';
        // Any falsey values should stay as an empty string, otherwise
        // this will throw an extra error
        if (url) {
          backgroundImage = 'url("' + url + '")';
        }

        this.el_.style.backgroundImage = backgroundImage;
      }
    }
  }, {
    key: 'handleClick',

    /**
     * Event handler for clicks on the poster image
     */
    value: function handleClick() {
      // We don't want a click to trigger playback when controls are disabled
      // but CSS should be hiding the poster to prevent that from happening
      if (this.player_.paused()) {
        this.player_.play();
      } else {
        this.player_.pause();
      }
    }
  }]);

  return PosterImage;
})(_Button3['default']);

_Button3['default'].registerComponent('PosterImage', PosterImage);
exports['default'] = PosterImage;
module.exports = exports['default'];

},{"./button":6,"./lib":46}],56:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _import = _dereq_('./events');

var Events = _interopRequireWildcard(_import);

var _document = _dereq_('global/document');

var _document2 = _interopRequireWildcard(_document);

var _window = _dereq_('global/window');

var _window2 = _interopRequireWildcard(_window);

var _windowLoaded = false;
var videojs = undefined;

/**
 * @fileoverview Functions for automatically setting up a player
 * based on the data-setup attribute of the video tag
 */

// Automatically set up any tags that have a data-setup attribute
var autoSetup = function autoSetup() {
  // One day, when we stop supporting IE8, go back to this, but in the meantime...*hack hack hack*
  // var vids = Array.prototype.slice.call(document.getElementsByTagName('video'));
  // var audios = Array.prototype.slice.call(document.getElementsByTagName('audio'));
  // var mediaEls = vids.concat(audios);

  // Because IE8 doesn't support calling slice on a node list, we need to loop through each list of elements
  // to build up a new, combined list of elements.
  var vids = _document2['default'].getElementsByTagName('video');
  var audios = _document2['default'].getElementsByTagName('audio');
  var mediaEls = [];
  if (vids && vids.length > 0) {
    for (var i = 0, e = vids.length; i < e; i++) {
      mediaEls.push(vids[i]);
    }
  }
  if (audios && audios.length > 0) {
    for (var i = 0, e = audios.length; i < e; i++) {
      mediaEls.push(audios[i]);
    }
  }

  // Check if any media elements exist
  if (mediaEls && mediaEls.length > 0) {

    for (var i = 0, e = mediaEls.length; i < e; i++) {
      var mediaEl = mediaEls[i];

      // Check if element exists, has getAttribute func.
      // IE seems to consider typeof el.getAttribute == 'object' instead of 'function' like expected, at least when loading the player immediately.
      if (mediaEl && mediaEl.getAttribute) {

        // Make sure this player hasn't already been set up.
        if (mediaEl.player === undefined) {
          var options = mediaEl.getAttribute('data-setup');

          // Check if data-setup attr exists.
          // We only auto-setup if they've added the data-setup attr.
          if (options !== null) {
            // Create new video.js instance.
            var player = videojs(mediaEl);
          }
        }

        // If getAttribute isn't defined, we need to wait for the DOM.
      } else {
        autoSetupTimeout(1);
        break;
      }
    }

    // No videos were found, so keep looping unless page is finished loading.
  } else if (!_windowLoaded) {
    autoSetupTimeout(1);
  }
};

// Pause to let the DOM keep processing
var autoSetupTimeout = function autoSetupTimeout(wait, vjs) {
  videojs = vjs;
  setTimeout(autoSetup, wait);
};

if (_document2['default'].readyState === 'complete') {
  _windowLoaded = true;
} else {
  Events.one(_window2['default'], 'load', function () {
    _windowLoaded = true;
  });
}

var hasLoaded = function hasLoaded() {
  return _windowLoaded;
};

exports.autoSetup = autoSetup;
exports.autoSetupTimeout = autoSetupTimeout;
exports.hasLoaded = hasLoaded;

},{"./events":43,"global/document":1,"global/window":2}],57:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _Component2 = _dereq_('../component.js');

var _Component3 = _interopRequireWildcard(_Component2);

var _import = _dereq_('../lib.js');

var Lib = _interopRequireWildcard(_import);

/**
 * SeekBar Behavior includes play progress bar, and seek handle
 * Needed so it can determine seek position based on handle position/size
 * @param {Player|Object} player
 * @param {Object=} options
 * @constructor
 */

var SliderHandle = (function (_Component) {
  function SliderHandle() {
    _classCallCheck(this, SliderHandle);

    if (_Component != null) {
      _Component.apply(this, arguments);
    }
  }

  _inherits(SliderHandle, _Component);

  _createClass(SliderHandle, [{
    key: 'createEl',

    /** @inheritDoc */
    value: function createEl(type, props) {
      props = props || {};
      // Add the slider element class to all sub classes
      props.className = props.className + ' vjs-slider-handle';
      props = Lib.obj.merge({
        innerHTML: '<span class="vjs-control-text">' + (this.defaultValue || 0) + '</span>'
      }, props);

      return _get(Object.getPrototypeOf(SliderHandle.prototype), 'createEl', this).call(this, 'div', props);
    }
  }]);

  return SliderHandle;
})(_Component3['default']);

_Component3['default'].registerComponent('SliderHandle', SliderHandle);
exports['default'] = SliderHandle;
module.exports = exports['default'];

},{"../component.js":7,"../lib.js":46}],58:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _Component2 = _dereq_('../component.js');

var _Component3 = _interopRequireWildcard(_Component2);

var _import = _dereq_('../lib.js');

var Lib = _interopRequireWildcard(_import);

var _document = _dereq_('global/document');

var _document2 = _interopRequireWildcard(_document);

/* Slider
================================================================================ */
/**
 * The base functionality for sliders like the volume bar and seek bar
 *
 * @param {Player|Object} player
 * @param {Object=} options
 * @constructor
 */

var Slider = (function (_Component) {
  function Slider(player, options) {
    _classCallCheck(this, Slider);

    _get(Object.getPrototypeOf(Slider.prototype), 'constructor', this).call(this, player, options);

    // Set property names to bar and handle to match with the child Slider class is looking for
    this.bar = this.getChild(this.options_.barName);
    this.handle = this.getChild(this.options_.handleName);

    // Set a horizontal or vertical class on the slider depending on the slider type
    this.vertical(!!this.options().vertical);

    this.on('mousedown', this.handleMouseDown);
    this.on('touchstart', this.handleMouseDown);
    this.on('focus', this.handleFocus);
    this.on('blur', this.handleBlur);
    this.on('click', this.handleClick);

    this.on(player, 'controlsvisible', this.update);
    this.on(player, this.playerEvent, this.update);
  }

  _inherits(Slider, _Component);

  _createClass(Slider, [{
    key: 'createEl',
    value: function createEl(type) {
      var props = arguments[1] === undefined ? {} : arguments[1];

      // Add the slider element class to all sub classes
      props.className = props.className + ' vjs-slider';
      props = Lib.obj.merge({
        role: 'slider',
        'aria-valuenow': 0,
        'aria-valuemin': 0,
        'aria-valuemax': 100,
        tabIndex: 0
      }, props);

      return _get(Object.getPrototypeOf(Slider.prototype), 'createEl', this).call(this, type, props);
    }
  }, {
    key: 'handleMouseDown',
    value: function handleMouseDown(event) {
      event.preventDefault();
      Lib.blockTextSelection();
      this.addClass('vjs-sliding');

      this.on(_document2['default'], 'mousemove', this.handleMouseMove);
      this.on(_document2['default'], 'mouseup', this.handleMouseUp);
      this.on(_document2['default'], 'touchmove', this.handleMouseMove);
      this.on(_document2['default'], 'touchend', this.handleMouseUp);

      this.handleMouseMove(event);
    }
  }, {
    key: 'handleMouseMove',

    // To be overridden by a subclass
    value: function handleMouseMove() {}
  }, {
    key: 'handleMouseUp',
    value: function handleMouseUp() {
      Lib.unblockTextSelection();
      this.removeClass('vjs-sliding');

      this.off(_document2['default'], 'mousemove', this.handleMouseMove);
      this.off(_document2['default'], 'mouseup', this.handleMouseUp);
      this.off(_document2['default'], 'touchmove', this.handleMouseMove);
      this.off(_document2['default'], 'touchend', this.handleMouseUp);

      this.update();
    }
  }, {
    key: 'update',
    value: function update() {
      // In VolumeBar init we have a setTimeout for update that pops and update to the end of the
      // execution stack. The player is destroyed before then update will cause an error
      if (!this.el_) {
        return;
      } // If scrubbing, we could use a cached value to make the handle keep up with the user's mouse.
      // On HTML5 browsers scrubbing is really smooth, but some flash players are slow, so we might want to utilize this later.
      // var progress =  (this.player_.scrubbing) ? this.player_.getCache().currentTime / this.player_.duration() : this.player_.currentTime() / this.player_.duration();
      var progress = this.getPercent();
      var bar = this.bar;

      // If there's no bar...
      if (!bar) {
        return;
      } // Protect against no duration and other division issues
      if (typeof progress !== 'number' || progress !== progress || progress < 0 || progress === Infinity) {
        progress = 0;
      }

      // If there is a handle, we need to account for the handle in our calculation for progress bar
      // so that it doesn't fall short of or extend past the handle.
      var barProgress = this.updateHandlePosition(progress);

      // Convert to a percentage for setting
      var percentage = Lib.round(barProgress * 100, 2) + '%';

      // Set the new bar width or height
      if (this.vertical()) {
        bar.el().style.height = percentage;
      } else {
        bar.el().style.width = percentage;
      }
    }
  }, {
    key: 'updateHandlePosition',

    /**
    * Update the handle position.
    */
    value: function updateHandlePosition(progress) {
      var handle = this.handle;
      if (!handle) {
        return;
      }var vertical = this.vertical();
      var box = this.el_;

      var boxSize = undefined,
          handleSize = undefined;
      if (vertical) {
        boxSize = box.offsetHeight;
        handleSize = handle.el().offsetHeight;
      } else {
        boxSize = box.offsetWidth;
        handleSize = handle.el().offsetWidth;
      }

      // The width of the handle in percent of the containing box
      // In IE, widths may not be ready yet causing NaN
      var handlePercent = handleSize ? handleSize / boxSize : 0;

      // Get the adjusted size of the box, considering that the handle's center never touches the left or right side.
      // There is a margin of half the handle's width on both sides.
      var boxAdjustedPercent = 1 - handlePercent;

      // Adjust the progress that we'll use to set widths to the new adjusted box width
      var adjustedProgress = progress * boxAdjustedPercent;

      // The bar does reach the left side, so we need to account for this in the bar's width
      var barProgress = adjustedProgress + handlePercent / 2;

      var percentage = Lib.round(adjustedProgress * 100, 2) + '%';

      if (vertical) {
        handle.el().style.bottom = percentage;
      } else {
        handle.el().style.left = percentage;
      }

      return barProgress;
    }
  }, {
    key: 'calculateDistance',
    value: function calculateDistance(event) {
      var el = this.el_;
      var box = Lib.findPosition(el);
      var boxW = el.offsetWidth;
      var boxH = el.offsetHeight;
      var handle = this.handle;

      if (this.options().vertical) {
        var boxY = box.top;

        var pageY = undefined;
        if (event.changedTouches) {
          pageY = event.changedTouches[0].pageY;
        } else {
          pageY = event.pageY;
        }

        if (handle) {
          var handleH = handle.el().offsetHeight;
          // Adjusted X and Width, so handle doesn't go outside the bar
          boxY = boxY + handleH / 2;
          boxH = boxH - handleH;
        }

        // Percent that the click is through the adjusted area
        return Math.max(0, Math.min(1, (boxY - pageY + boxH) / boxH));
      } else {
        var boxX = box.left;

        var pageX = undefined;
        if (event.changedTouches) {
          pageX = event.changedTouches[0].pageX;
        } else {
          pageX = event.pageX;
        }

        if (handle) {
          var handleW = handle.el().offsetWidth;

          // Adjusted X and Width, so handle doesn't go outside the bar
          boxX = boxX + handleW / 2;
          boxW = boxW - handleW;
        }

        // Percent that the click is through the adjusted area
        return Math.max(0, Math.min(1, (pageX - boxX) / boxW));
      }
    }
  }, {
    key: 'handleFocus',
    value: function handleFocus() {
      this.on(_document2['default'], 'keydown', this.handleKeyPress);
    }
  }, {
    key: 'handleKeyPress',
    value: function handleKeyPress(event) {
      if (event.which === 37 || event.which === 40) {
        // Left and Down Arrows
        event.preventDefault();
        this.stepBack();
      } else if (event.which === 38 || event.which === 39) {
        // Up and Right Arrows
        event.preventDefault();
        this.stepForward();
      }
    }
  }, {
    key: 'handleBlur',
    value: function handleBlur() {
      this.off(_document2['default'], 'keydown', this.handleKeyPress);
    }
  }, {
    key: 'handleClick',

    /**
     * Listener for click events on slider, used to prevent clicks
     *   from bubbling up to parent elements like button menus.
     * @param  {Object} event Event object
     */
    value: function handleClick(event) {
      event.stopImmediatePropagation();
      event.preventDefault();
    }
  }, {
    key: 'vertical',
    value: function vertical(bool) {
      if (bool === undefined) {
        return this.vertical_ || false;
      }

      this.vertical_ = !!bool;

      if (this.vertical_) {
        this.addClass('vjs-slider-vertical');
      } else {
        this.addClass('vjs-slider-horizontal');
      }

      return this;
    }
  }]);

  return Slider;
})(_Component3['default']);

_Component3['default'].registerComponent('Slider', Slider);
exports['default'] = Slider;
module.exports = exports['default'];

},{"../component.js":7,"../lib.js":46,"global/document":1}],59:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
function FlashRtmpDecorator(Flash) {
  Flash.streamingFormats = {
    'rtmp/mp4': 'MP4',
    'rtmp/flv': 'FLV'
  };

  Flash.streamFromParts = function (connection, stream) {
    return connection + '&' + stream;
  };

  Flash.streamToParts = function (src) {
    var parts = {
      connection: '',
      stream: ''
    };

    if (!src) return parts;

    // Look for the normal URL separator we expect, '&'.
    // If found, we split the URL into two pieces around the
    // first '&'.
    var connEnd = src.indexOf('&');
    var streamBegin = undefined;
    if (connEnd !== -1) {
      streamBegin = connEnd + 1;
    } else {
      // If there's not a '&', we use the last '/' as the delimiter.
      connEnd = streamBegin = src.lastIndexOf('/') + 1;
      if (connEnd === 0) {
        // really, there's not a '/'?
        connEnd = streamBegin = src.length;
      }
    }
    parts.connection = src.substring(0, connEnd);
    parts.stream = src.substring(streamBegin, src.length);

    return parts;
  };

  Flash.isStreamingType = function (srcType) {
    return srcType in Flash.streamingFormats;
  };

  // RTMP has four variations, any string starting
  // with one of these protocols should be valid
  Flash.RTMP_RE = /^rtmp[set]?:\/\//i;

  Flash.isStreamingSrc = function (src) {
    return Flash.RTMP_RE.test(src);
  };

  /**
   * A source handler for RTMP urls
   * @type {Object}
   */
  Flash.rtmpSourceHandler = {};

  /**
   * Check Flash can handle the source natively
   * @param  {Object} source  The source object
   * @return {String}         'probably', 'maybe', or '' (empty string)
   */
  Flash.rtmpSourceHandler.canHandleSource = function (source) {
    if (Flash.isStreamingType(source.type) || Flash.isStreamingSrc(source.src)) {
      return 'maybe';
    }

    return '';
  };

  /**
   * Pass the source to the flash object
   * Adaptive source handlers will have more complicated workflows before passing
   * video data to the video element
   * @param  {Object} source    The source object
   * @param  {Flash} tech   The instance of the Flash tech
   */
  Flash.rtmpSourceHandler.handleSource = function (source, tech) {
    var srcParts = Flash.streamToParts(source.src);

    tech.setRtmpConnection(srcParts.connection);
    tech.setRtmpStream(srcParts.stream);
  };

  // Register the native source handler
  Flash.registerSourceHandler(Flash.rtmpSourceHandler);

  return Flash;
}

exports['default'] = FlashRtmpDecorator;
module.exports = exports['default'];

},{}],60:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
  value: true
});
/**
 * @fileoverview VideoJS-SWF - Custom Flash Player with HTML5-ish API
 * https://github.com/zencoder/video-js-swf
 * Not using setupTriggers. Using global onEvent func to distribute events
 */

var _Tech2 = _dereq_('./tech');

var _Tech3 = _interopRequireWildcard(_Tech2);

var _import = _dereq_('../lib');

var Lib = _interopRequireWildcard(_import);

var _FlashRtmpDecorator = _dereq_('./flash-rtmp');

var _FlashRtmpDecorator2 = _interopRequireWildcard(_FlashRtmpDecorator);

var _Component = _dereq_('../component');

var _Component2 = _interopRequireWildcard(_Component);

var _window = _dereq_('global/window');

var _window2 = _interopRequireWildcard(_window);

var navigator = _window2['default'].navigator;
/**
 * Flash Media Controller - Wrapper for fallback SWF API
 *
 * @param {Player} player
 * @param {Object=} options
 * @param {Function=} ready
 * @constructor
 */

var Flash = (function (_Tech) {
  function Flash(options, ready) {
    _classCallCheck(this, Flash);

    _get(Object.getPrototypeOf(Flash.prototype), 'constructor', this).call(this, options, ready);

    var source = options.source;
    var parentEl = options.parentEl;

    // Generate ID for swf object
    var objId = options.playerId + '_flash_api';

    // Merge default flashvars with ones passed in to init
    var flashVars = Lib.obj.merge({

      // SWF Callback Functions
      readyFunction: 'videojs.Flash.onReady',
      eventProxyFunction: 'videojs.Flash.onEvent',
      errorEventProxyFunction: 'videojs.Flash.onError',

      // Player Settings
      autoplay: options.autoplay,
      preload: options.preload,
      loop: options.loop,
      muted: options.muted

    }, options.flashVars);

    // Merge default parames with ones passed in
    var params = Lib.obj.merge({
      wmode: 'opaque', // Opaque is needed to overlay controls, but can affect playback performance
      bgcolor: '#000000' // Using bgcolor prevents a white flash when the object is loading
    }, options.params);

    // Merge default attributes with ones passed in
    var attributes = Lib.obj.merge({
      id: objId,
      name: objId, // Both ID and Name needed or swf to identify itself
      'class': 'vjs-tech'
    }, options.attributes);

    // If source was supplied pass as a flash var.
    if (source) {
      this.ready(function () {
        this.setSource(source);
      });
    }

    // Having issues with Flash reloading on certain page actions (hide/resize/fullscreen) in certain browsers
    // This allows resetting the playhead when we catch the reload
    if (options.startTime) {
      this.ready(function () {
        this.load();
        this.play();
        this.currentTime(options.startTime);
      });
    }

    _window2['default'].videojs = _window2['default'].videojs || {};
    _window2['default'].videojs.Flash = _window2['default'].videojs.Flash || {};
    _window2['default'].videojs.Flash.onReady = Flash.onReady;
    _window2['default'].videojs.Flash.onEvent = Flash.onEvent;
    _window2['default'].videojs.Flash.onError = Flash.onError;

    this.el_ = Flash.embed(options.swf, flashVars, params, attributes);
    this.el_.tech = this;
  }

  _inherits(Flash, _Tech);

  _createClass(Flash, [{
    key: 'play',
    value: function play() {
      this.el_.vjs_play();
    }
  }, {
    key: 'pause',
    value: function pause() {
      this.el_.vjs_pause();
    }
  }, {
    key: 'src',
    value: (function (_src) {
      function src(_x) {
        return _src.apply(this, arguments);
      }

      src.toString = function () {
        return _src.toString();
      };

      return src;
    })(function (src) {
      if (src === undefined) {
        return this.currentSrc();
      }

      // Setting src through `src` not `setSrc` will be deprecated
      return this.setSrc(src);
    })
  }, {
    key: 'setSrc',
    value: function setSrc(src) {
      // Make sure source URL is absolute.
      src = Lib.getAbsoluteURL(src);
      this.el_.vjs_src(src);

      // Currently the SWF doesn't autoplay if you load a source later.
      // e.g. Load player w/ no source, wait 2s, set src.
      if (this.autoplay()) {
        var tech = this;
        this.setTimeout(function () {
          tech.play();
        }, 0);
      }
    }
  }, {
    key: 'setCurrentTime',
    value: function setCurrentTime(time) {
      this.lastSeekTarget_ = time;
      this.el_.vjs_setProperty('currentTime', time);
      _get(Object.getPrototypeOf(Flash.prototype), 'setCurrentTime', this).call(this);
    }
  }, {
    key: 'currentTime',
    value: function currentTime(time) {
      // when seeking make the reported time keep up with the requested time
      // by reading the time we're seeking to
      if (this.seeking()) {
        return this.lastSeekTarget_ || 0;
      }
      return this.el_.vjs_getProperty('currentTime');
    }
  }, {
    key: 'currentSrc',
    value: function currentSrc() {
      if (this.currentSource_) {
        return this.currentSource_.src;
      } else {
        return this.el_.vjs_getProperty('currentSrc');
      }
    }
  }, {
    key: 'load',
    value: function load() {
      this.el_.vjs_load();
    }
  }, {
    key: 'poster',
    value: function poster() {
      this.el_.vjs_getProperty('poster');
    }
  }, {
    key: 'setPoster',

    // poster images are not handled by the Flash tech so make this a no-op
    value: function setPoster() {}
  }, {
    key: 'buffered',
    value: function buffered() {
      return Lib.createTimeRange(0, this.el_.vjs_getProperty('buffered'));
    }
  }, {
    key: 'supportsFullScreen',
    value: function supportsFullScreen() {
      return false; // Flash does not allow fullscreen through javascript
    }
  }, {
    key: 'enterFullScreen',
    value: function enterFullScreen() {
      return false;
    }
  }]);

  return Flash;
})(_Tech3['default']);

// Create setters and getters for attributes
var _api = Flash.prototype;
var _readWrite = 'rtmpConnection,rtmpStream,preload,defaultPlaybackRate,playbackRate,autoplay,loop,mediaGroup,controller,controls,volume,muted,defaultMuted'.split(',');
var _readOnly = 'error,networkState,readyState,seeking,initialTime,duration,startOffsetTime,paused,played,seekable,ended,videoTracks,audioTracks,videoWidth,videoHeight'.split(',');

function _createSetter(attr) {
  var attrUpper = attr.charAt(0).toUpperCase() + attr.slice(1);
  _api['set' + attrUpper] = function (val) {
    return this.el_.vjs_setProperty(attr, val);
  };
}
function _createGetter(attr) {
  _api[attr] = function () {
    return this.el_.vjs_getProperty(attr);
  };
}

// Create getter and setters for all read/write attributes
for (var i = 0; i < _readWrite.length; i++) {
  _createGetter(_readWrite[i]);
  _createSetter(_readWrite[i]);
}

// Create getters for read-only attributes
for (var i = 0; i < _readOnly.length; i++) {
  _createGetter(_readOnly[i]);
}

/* Flash Support Testing -------------------------------------------------------- */

Flash.isSupported = function () {
  return Flash.version()[0] >= 10;
  // return swfobject.hasFlashPlayerVersion('10');
};

// Add Source Handler pattern functions to this tech
_Tech3['default'].withSourceHandlers(Flash);

/**
 * The default native source handler.
 * This simply passes the source to the video element. Nothing fancy.
 * @param  {Object} source   The source object
 * @param  {Flash} tech  The instance of the Flash tech
 */
Flash.nativeSourceHandler = {};

/**
 * Check Flash can handle the source natively
 * @param  {Object} source  The source object
 * @return {String}         'probably', 'maybe', or '' (empty string)
 */
Flash.nativeSourceHandler.canHandleSource = function (source) {
  var type;

  function guessMimeType(src) {
    var ext = Lib.getFileExtension(src);
    if (ext) {
      return 'video/' + ext;
    }
    return '';
  }

  if (!source.type) {
    type = guessMimeType(source.src);
  } else {
    // Strip code information from the type because we don't get that specific
    type = source.type.replace(/;.*/, '').toLowerCase();
  }

  if (type in Flash.formats) {
    return 'maybe';
  }

  return '';
};

/**
 * Pass the source to the flash object
 * Adaptive source handlers will have more complicated workflows before passing
 * video data to the video element
 * @param  {Object} source    The source object
 * @param  {Flash} tech   The instance of the Flash tech
 */
Flash.nativeSourceHandler.handleSource = function (source, tech) {
  tech.setSrc(source.src);
};

/**
 * Clean up the source handler when disposing the player or switching sources..
 * (no cleanup is needed when supporting the format natively)
 */
Flash.nativeSourceHandler.dispose = function () {};

// Register the native source handler
Flash.registerSourceHandler(Flash.nativeSourceHandler);

Flash.formats = {
  'video/flv': 'FLV',
  'video/x-flv': 'FLV',
  'video/mp4': 'MP4',
  'video/m4v': 'MP4'
};

Flash.onReady = function (currSwf) {
  var el = Lib.el(currSwf);
  var tech = el && el.tech;

  // if there is no el then the tech has been disposed
  // and the tech element was removed from the player div
  if (tech && tech.el()) {
    // check that the flash object is really ready
    Flash.checkReady(tech);
  }
};

// The SWF isn't always ready when it says it is. Sometimes the API functions still need to be added to the object.
// If it's not ready, we set a timeout to check again shortly.
Flash.checkReady = function (tech) {
  // stop worrying if the tech has been disposed
  if (!tech.el()) {
    return;
  }

  // check if API property exists
  if (tech.el().vjs_getProperty) {
    // tell tech it's ready
    tech.triggerReady();
  } else {
    // wait longer
    this.setTimeout(function () {
      Flash.checkReady(tech);
    }, 50);
  }
};

// Trigger events from the swf on the player
Flash.onEvent = function (swfID, eventName) {
  var tech = Lib.el(swfID).tech;
  tech.trigger(eventName);
};

// Log errors from the swf
Flash.onError = function (swfID, err) {
  var tech = Lib.el(swfID).tech;
  var msg = 'FLASH: ' + err;

  if (err === 'srcnotfound') {
    tech.trigger('error', { code: 4, message: msg });

    // errors we haven't categorized into the media errors
  } else {
    tech.trigger('error', msg);
  }
};

// Flash Version Check
Flash.version = function () {
  var version = '0,0,0';

  // IE
  try {
    version = new _window2['default'].ActiveXObject('ShockwaveFlash.ShockwaveFlash').GetVariable('$version').replace(/\D+/g, ',').match(/^,?(.+),?$/)[1];

    // other browsers
  } catch (e) {
    try {
      if (navigator.mimeTypes['application/x-shockwave-flash'].enabledPlugin) {
        version = (navigator.plugins['Shockwave Flash 2.0'] || navigator.plugins['Shockwave Flash']).description.replace(/\D+/g, ',').match(/^,?(.+),?$/)[1];
      }
    } catch (err) {}
  }
  return version.split(',');
};

// Flash embedding method. Only used in non-iframe mode
Flash.embed = function (swf, flashVars, params, attributes) {
  var code = Flash.getEmbedCode(swf, flashVars, params, attributes);

  // Get element by embedding code and retrieving created element
  var obj = Lib.createEl('div', { innerHTML: code }).childNodes[0];

  return obj;
};

Flash.getEmbedCode = function (swf, flashVars, params, attributes) {
  var objTag = '<object type="application/x-shockwave-flash" ';
  var flashVarsString = '';
  var paramsString = '';
  var attrsString = '';

  // Convert flash vars to string
  if (flashVars) {
    Lib.obj.each(flashVars, function (key, val) {
      flashVarsString += '' + key + '=' + val + '&amp;';
    });
  }

  // Add swf, flashVars, and other default params
  params = Lib.obj.merge({
    movie: swf,
    flashvars: flashVarsString,
    allowScriptAccess: 'always', // Required to talk to swf
    allowNetworking: 'all' // All should be default, but having security issues.
  }, params);

  // Create param tags string
  Lib.obj.each(params, function (key, val) {
    paramsString += '<param name="' + key + '" value="' + val + '" />';
  });

  attributes = Lib.obj.merge({
    // Add swf to attributes (need both for IE and Others to work)
    data: swf,

    // Default to 100% width/height
    width: '100%',
    height: '100%'

  }, attributes);

  // Create Attributes string
  Lib.obj.each(attributes, function (key, val) {
    attrsString += '' + key + '="' + val + '" ';
  });

  return '' + objTag + '' + attrsString + '>' + paramsString + '</object>';
};

// Run Flash through the RTMP decorator
_FlashRtmpDecorator2['default'](Flash);

_Tech3['default'].registerComponent('Flash', Flash);
exports['default'] = Flash;
module.exports = exports['default'];

},{"../component":7,"../lib":46,"./flash-rtmp":59,"./tech":63,"global/window":2}],61:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
  value: true
});
/**
 * @fileoverview HTML5 Media Controller - Wrapper for HTML5 Media API
 */

var _Tech2 = _dereq_('./tech.js');

var _Tech3 = _interopRequireWildcard(_Tech2);

var _Component = _dereq_('../component');

var _Component2 = _interopRequireWildcard(_Component);

var _import = _dereq_('../lib');

var Lib = _interopRequireWildcard(_import);

var _import2 = _dereq_('../util');

var VjsUtil = _interopRequireWildcard(_import2);

var _document = _dereq_('global/document');

var _document2 = _interopRequireWildcard(_document);

/**
 * HTML5 Media Controller - Wrapper for HTML5 Media API
 * @param {Player|Object} player
 * @param {Object=} options
 * @param {Function=} ready
 * @constructor
 */

var Html5 = (function (_Tech) {
  function Html5(options, ready) {
    _classCallCheck(this, Html5);

    _get(Object.getPrototypeOf(Html5.prototype), 'constructor', this).call(this, options, ready);

    var source = options.source;

    // Set the source if one is provided
    // 1) Check if the source is new (if not, we want to keep the original so playback isn't interrupted)
    // 2) Check to see if the network state of the tag was failed at init, and if so, reset the source
    // anyway so the error gets fired.
    if (source && (this.el_.currentSrc !== source.src || options.tag && options.tag.initNetworkState_ === 3)) {
      this.setSource(source);
    }

    if (this.el_.hasChildNodes()) {

      var nodes = this.el_.childNodes;
      var nodesLength = nodes.length;
      var removeNodes = [];

      while (nodesLength--) {
        var node = nodes[nodesLength];
        var nodeName = node.nodeName.toLowerCase();
        if (nodeName === 'track') {
          if (!this.featuresNativeTextTracks) {
            // Empty video tag tracks so the built-in player doesn't use them also.
            // This may not be fast enough to stop HTML5 browsers from reading the tags
            // so we'll need to turn off any default tracks if we're manually doing
            // captions and subtitles. videoElement.textTracks
            removeNodes.push(node);
          } else {
            this.remoteTextTracks().addTrack_(node.track);
          }
        }
      }

      for (var i = 0; i < removeNodes.length; i++) {
        this.el_.removeChild(removeNodes[i]);
      }
    }

    if (this.featuresNativeTextTracks) {
      this.on('loadstart', Lib.bind(this, this.hideCaptions));
    }

    // Determine if native controls should be used
    // Our goal should be to get the custom controls on mobile solid everywhere
    // so we can remove this all together. Right now this will block custom
    // controls on touch enabled laptops like the Chrome Pixel
    if (Lib.TOUCH_ENABLED && options.nativeControlsForTouch === true) {
      this.trigger('usenativecontrols');
    }

    this.triggerReady();
  }

  _inherits(Html5, _Tech);

  _createClass(Html5, [{
    key: 'dispose',
    value: function dispose() {
      Html5.disposeMediaElement(this.el_);
      _get(Object.getPrototypeOf(Html5.prototype), 'dispose', this).call(this);
    }
  }, {
    key: 'createEl',
    value: function createEl() {
      var el = this.options_.tag;

      // Check if this browser supports moving the element into the box.
      // On the iPhone video will break if you move the element,
      // So we have to create a brand new element.
      if (!el || this.movingMediaElementInDOM === false) {

        // If the original tag is still there, clone and remove it.
        if (el) {
          var clone = el.cloneNode(false);
          Html5.disposeMediaElement(el);
          el = clone;
        } else {
          el = Lib.createEl('video');

          // determine if native controls should be used
          var tagAttributes = this.options_.tag && Lib.getElementAttributes(this.options_.tag);
          var attributes = VjsUtil.mergeOptions({}, tagAttributes);
          if (!Lib.TOUCH_ENABLED || this.options_.nativeControlsForTouch !== true) {
            delete attributes.controls;
          }

          Lib.setElementAttributes(el, Lib.obj.merge(attributes, {
            id: this.options_.playerId + '_html5_api',
            'class': 'vjs-tech'
          }));
        }

        if (this.options_.tracks) {
          for (var i = 0; i < this.options_.tracks.length; i++) {
            var track = this.options_.tracks[i];
            var trackEl = _document2['default'].createElement('track');
            trackEl.kind = track.kind;
            trackEl.label = track.label;
            trackEl.srclang = track.srclang;
            trackEl.src = track.src;
            if ('default' in track) {
              trackEl.setAttribute('default', 'default');
            }
            el.appendChild(trackEl);
          }
        }
      }

      // Update specific tag settings, in case they were overridden
      var settingsAttrs = ['autoplay', 'preload', 'loop', 'muted'];
      for (var i = settingsAttrs.length - 1; i >= 0; i--) {
        var attr = settingsAttrs[i];
        var overwriteAttrs = {};
        if (typeof this.options_[attr] !== 'undefined') {
          overwriteAttrs[attr] = this.options_[attr];
        }
        Lib.setElementAttributes(el, overwriteAttrs);
      }

      return el;
      // jenniisawesome = true;
    }
  }, {
    key: 'hideCaptions',
    value: function hideCaptions() {
      var tracks = this.el_.querySelectorAll('track');
      var i = tracks.length;
      var kinds = {
        captions: 1,
        subtitles: 1
      };

      while (i--) {
        var track = tracks[i].track;
        if (track && track.kind in kinds && !tracks[i]['default']) {
          track.mode = 'disabled';
        }
      }
    }
  }, {
    key: 'play',
    value: function play() {
      this.el_.play();
    }
  }, {
    key: 'pause',
    value: function pause() {
      this.el_.pause();
    }
  }, {
    key: 'paused',
    value: function paused() {
      return this.el_.paused;
    }
  }, {
    key: 'currentTime',
    value: function currentTime() {
      return this.el_.currentTime;
    }
  }, {
    key: 'setCurrentTime',
    value: function setCurrentTime(seconds) {
      try {
        this.el_.currentTime = seconds;
      } catch (e) {
        Lib.log(e, 'Video is not ready. (Video.js)');
        // this.warning(VideoJS.warnings.videoNotReady);
      }
    }
  }, {
    key: 'duration',
    value: function duration() {
      return this.el_.duration || 0;
    }
  }, {
    key: 'buffered',
    value: function buffered() {
      return this.el_.buffered;
    }
  }, {
    key: 'volume',
    value: function volume() {
      return this.el_.volume;
    }
  }, {
    key: 'setVolume',
    value: function setVolume(percentAsDecimal) {
      this.el_.volume = percentAsDecimal;
    }
  }, {
    key: 'muted',
    value: function muted() {
      return this.el_.muted;
    }
  }, {
    key: 'setMuted',
    value: function setMuted(muted) {
      this.el_.muted = muted;
    }
  }, {
    key: 'width',
    value: function width() {
      return this.el_.offsetWidth;
    }
  }, {
    key: 'height',
    value: function height() {
      return this.el_.offsetHeight;
    }
  }, {
    key: 'supportsFullScreen',
    value: function supportsFullScreen() {
      if (typeof this.el_.webkitEnterFullScreen === 'function') {

        // Seems to be broken in Chromium/Chrome && Safari in Leopard
        if (/Android/.test(Lib.USER_AGENT) || !/Chrome|Mac OS X 10.5/.test(Lib.USER_AGENT)) {
          return true;
        }
      }
      return false;
    }
  }, {
    key: 'enterFullScreen',
    value: function enterFullScreen() {
      var video = this.el_;

      if ('webkitDisplayingFullscreen' in video) {
        this.one('webkitbeginfullscreen', function () {
          this.one('webkitendfullscreen', function () {
            this.trigger('fullscreenchange');
          });

          this.trigger('fullscreenchange');
        });
      }

      if (video.paused && video.networkState <= video.HAVE_METADATA) {
        // attempt to prime the video element for programmatic access
        // this isn't necessary on the desktop but shouldn't hurt
        this.el_.play();

        // playing and pausing synchronously during the transition to fullscreen
        // can get iOS ~6.1 devices into a play/pause loop
        this.setTimeout(function () {
          video.pause();
          video.webkitEnterFullScreen();
        }, 0);
      } else {
        video.webkitEnterFullScreen();
      }
    }
  }, {
    key: 'exitFullScreen',
    value: function exitFullScreen() {
      this.el_.webkitExitFullScreen();
    }
  }, {
    key: 'src',
    value: (function (_src) {
      function src(_x) {
        return _src.apply(this, arguments);
      }

      src.toString = function () {
        return _src.toString();
      };

      return src;
    })(function (src) {
      if (src === undefined) {
        return this.el_.src;
      } else {
        // Setting src through `src` instead of `setSrc` will be deprecated
        this.setSrc(src);
      }
    })
  }, {
    key: 'setSrc',
    value: function setSrc(src) {
      this.el_.src = src;
    }
  }, {
    key: 'load',
    value: function load() {
      this.el_.load();
    }
  }, {
    key: 'currentSrc',
    value: function currentSrc() {
      return this.el_.currentSrc;
    }
  }, {
    key: 'poster',
    value: function poster() {
      return this.el_.poster;
    }
  }, {
    key: 'setPoster',
    value: function setPoster(val) {
      this.el_.poster = val;
    }
  }, {
    key: 'preload',
    value: function preload() {
      return this.el_.preload;
    }
  }, {
    key: 'setPreload',
    value: function setPreload(val) {
      this.el_.preload = val;
    }
  }, {
    key: 'autoplay',
    value: function autoplay() {
      return this.el_.autoplay;
    }
  }, {
    key: 'setAutoplay',
    value: function setAutoplay(val) {
      this.el_.autoplay = val;
    }
  }, {
    key: 'controls',
    value: function controls() {
      return this.el_.controls;
    }
  }, {
    key: 'setControls',
    value: function setControls(val) {
      this.el_.controls = !!val;
    }
  }, {
    key: 'loop',
    value: function loop() {
      return this.el_.loop;
    }
  }, {
    key: 'setLoop',
    value: function setLoop(val) {
      this.el_.loop = val;
    }
  }, {
    key: 'error',
    value: function error() {
      return this.el_.error;
    }
  }, {
    key: 'seeking',
    value: function seeking() {
      return this.el_.seeking;
    }
  }, {
    key: 'ended',
    value: function ended() {
      return this.el_.ended;
    }
  }, {
    key: 'defaultMuted',
    value: function defaultMuted() {
      return this.el_.defaultMuted;
    }
  }, {
    key: 'playbackRate',
    value: function playbackRate() {
      return this.el_.playbackRate;
    }
  }, {
    key: 'setPlaybackRate',
    value: function setPlaybackRate(val) {
      this.el_.playbackRate = val;
    }
  }, {
    key: 'networkState',
    value: function networkState() {
      return this.el_.networkState;
    }
  }, {
    key: 'readyState',
    value: function readyState() {
      return this.el_.readyState;
    }
  }, {
    key: 'videoWidth',
    value: function videoWidth() {
      return this.el_.videoWidth;
    }
  }, {
    key: 'videoHeight',
    value: function videoHeight() {
      return this.el_.videoHeight;
    }
  }, {
    key: 'textTracks',
    value: function textTracks() {
      if (!this.featuresNativeTextTracks) {
        return _get(Object.getPrototypeOf(Html5.prototype), 'textTracks', this).call(this);
      }

      return this.el_.textTracks;
    }
  }, {
    key: 'addTextTrack',
    value: function addTextTrack(kind, label, language) {
      if (!this.featuresNativeTextTracks) {
        return _get(Object.getPrototypeOf(Html5.prototype), 'addTextTrack', this).call(this, kind, label, language);
      }

      return this.el_.addTextTrack(kind, label, language);
    }
  }, {
    key: 'addRemoteTextTrack',
    value: function addRemoteTextTrack() {
      var options = arguments[0] === undefined ? {} : arguments[0];

      if (!this.featuresNativeTextTracks) {
        return _get(Object.getPrototypeOf(Html5.prototype), 'addRemoteTextTrack', this).call(this, options);
      }

      var track = _document2['default'].createElement('track');

      if (options.kind) {
        track.kind = options.kind;
      }
      if (options.label) {
        track.label = options.label;
      }
      if (options.language || options.srclang) {
        track.srclang = options.language || options.srclang;
      }
      if (options['default']) {
        track['default'] = options['default'];
      }
      if (options.id) {
        track.id = options.id;
      }
      if (options.src) {
        track.src = options.src;
      }

      this.el().appendChild(track);

      if (track.track.kind === 'metadata') {
        track.track.mode = 'hidden';
      } else {
        track.track.mode = 'disabled';
      }

      track.onload = function () {
        var tt = track.track;
        if (track.readyState >= 2) {
          if (tt.kind === 'metadata' && tt.mode !== 'hidden') {
            tt.mode = 'hidden';
          } else if (tt.kind !== 'metadata' && tt.mode !== 'disabled') {
            tt.mode = 'disabled';
          }
          track.onload = null;
        }
      };

      this.remoteTextTracks().addTrack_(track.track);

      return track;
    }
  }, {
    key: 'removeRemoteTextTrack',
    value: function removeRemoteTextTrack(track) {
      if (!this.featuresNativeTextTracks) {
        return _get(Object.getPrototypeOf(Html5.prototype), 'removeRemoteTextTrack', this).call(this, track);
      }

      var tracks, i;

      this.remoteTextTracks().removeTrack_(track);

      tracks = this.el().querySelectorAll('track');

      for (i = 0; i < tracks.length; i++) {
        if (tracks[i] === track || tracks[i].track === track) {
          tracks[i].parentNode.removeChild(tracks[i]);
          break;
        }
      }
    }
  }]);

  return Html5;
})(_Tech3['default']);

/* HTML5 Support Testing ---------------------------------------------------- */

/**
 * Check if HTML5 video is supported by this browser/device
 * @return {Boolean}
 */
Html5.isSupported = function () {
  // IE9 with no Media Player is a LIAR! (#984)
  try {
    Lib.TEST_VID.volume = 0.5;
  } catch (e) {
    return false;
  }

  return !!Lib.TEST_VID.canPlayType;
};

// Add Source Handler pattern functions to this tech
_Tech3['default'].withSourceHandlers(Html5);

/**
 * The default native source handler.
 * This simply passes the source to the video element. Nothing fancy.
 * @param  {Object} source   The source object
 * @param  {Html5} tech  The instance of the HTML5 tech
 */
Html5.nativeSourceHandler = {};

/**
 * Check if the video element can handle the source natively
 * @param  {Object} source  The source object
 * @return {String}         'probably', 'maybe', or '' (empty string)
 */
Html5.nativeSourceHandler.canHandleSource = function (source) {
  var match, ext;

  function canPlayType(type) {
    // IE9 on Windows 7 without MediaPlayer throws an error here
    // https://github.com/videojs/video.js/issues/519
    try {
      return Lib.TEST_VID.canPlayType(type);
    } catch (e) {
      return '';
    }
  }

  // If a type was provided we should rely on that
  if (source.type) {
    return canPlayType(source.type);
  } else if (source.src) {
    // If no type, fall back to checking 'video/[EXTENSION]'
    ext = Lib.getFileExtension(source.src);

    return canPlayType('video/' + ext);
  }

  return '';
};

/**
 * Pass the source to the video element
 * Adaptive source handlers will have more complicated workflows before passing
 * video data to the video element
 * @param  {Object} source    The source object
 * @param  {Html5} tech   The instance of the Html5 tech
 */
Html5.nativeSourceHandler.handleSource = function (source, tech) {
  tech.setSrc(source.src);
};

/**
 * Clean up the source handler when disposing the player or switching sources..
 * (no cleanup is needed when supporting the format natively)
 */
Html5.nativeSourceHandler.dispose = function () {};

// Register the native source handler
Html5.registerSourceHandler(Html5.nativeSourceHandler);

/**
 * Check if the volume can be changed in this browser/device.
 * Volume cannot be changed in a lot of mobile devices.
 * Specifically, it can't be changed from 1 on iOS.
 * @return {Boolean}
 */
Html5.canControlVolume = function () {
  var volume = Lib.TEST_VID.volume;
  Lib.TEST_VID.volume = volume / 2 + 0.1;
  return volume !== Lib.TEST_VID.volume;
};

/**
 * Check if playbackRate is supported in this browser/device.
 * @return {[type]} [description]
 */
Html5.canControlPlaybackRate = function () {
  var playbackRate = Lib.TEST_VID.playbackRate;
  Lib.TEST_VID.playbackRate = playbackRate / 2 + 0.1;
  return playbackRate !== Lib.TEST_VID.playbackRate;
};

/**
 * Check to see if native text tracks are supported by this browser/device
 * @return {Boolean}
 */
Html5.supportsNativeTextTracks = function () {
  var supportsTextTracks;

  // Figure out native text track support
  // If mode is a number, we cannot change it because it'll disappear from view.
  // Browsers with numeric modes include IE10 and older (<=2013) samsung android models.
  // Firefox isn't playing nice either with modifying the mode
  // TODO: Investigate firefox: https://github.com/videojs/video.js/issues/1862
  supportsTextTracks = !!Lib.TEST_VID.textTracks;
  if (supportsTextTracks && Lib.TEST_VID.textTracks.length > 0) {
    supportsTextTracks = typeof Lib.TEST_VID.textTracks[0].mode !== 'number';
  }
  if (supportsTextTracks && Lib.IS_FIREFOX) {
    supportsTextTracks = false;
  }

  return supportsTextTracks;
};

/**
 * Set the tech's volume control support status
 * @type {Boolean}
 */
Html5.prototype.featuresVolumeControl = Html5.canControlVolume();

/**
 * Set the tech's playbackRate support status
 * @type {Boolean}
 */
Html5.prototype.featuresPlaybackRate = Html5.canControlPlaybackRate();

/**
 * Set the tech's status on moving the video element.
 * In iOS, if you move a video element in the DOM, it breaks video playback.
 * @type {Boolean}
 */
Html5.prototype.movingMediaElementInDOM = !Lib.IS_IOS;

/**
 * Set the the tech's fullscreen resize support status.
 * HTML video is able to automatically resize when going to fullscreen.
 * (No longer appears to be used. Can probably be removed.)
 */
Html5.prototype.featuresFullscreenResize = true;

/**
 * Set the tech's progress event support status
 * (this disables the manual progress events of the Tech)
 */
Html5.prototype.featuresProgressEvents = true;

/**
 * Sets the tech's status on native text track support
 * @type {Boolean}
 */
Html5.prototype.featuresNativeTextTracks = Html5.supportsNativeTextTracks();

// HTML5 Feature detection and Device Fixes --------------------------------- //
var canPlayType = undefined;
var mpegurlRE = /^application\/(?:x-|vnd\.apple\.)mpegurl/i;
var mp4RE = /^video\/mp4/i;

Html5.patchCanPlayType = function () {
  // Android 4.0 and above can play HLS to some extent but it reports being unable to do so
  if (Lib.ANDROID_VERSION >= 4) {
    if (!canPlayType) {
      canPlayType = Lib.TEST_VID.constructor.prototype.canPlayType;
    }

    Lib.TEST_VID.constructor.prototype.canPlayType = function (type) {
      if (type && mpegurlRE.test(type)) {
        return 'maybe';
      }
      return canPlayType.call(this, type);
    };
  }

  // Override Android 2.2 and less canPlayType method which is broken
  if (Lib.IS_OLD_ANDROID) {
    if (!canPlayType) {
      canPlayType = Lib.TEST_VID.constructor.prototype.canPlayType;
    }

    Lib.TEST_VID.constructor.prototype.canPlayType = function (type) {
      if (type && mp4RE.test(type)) {
        return 'maybe';
      }
      return canPlayType.call(this, type);
    };
  }
};

Html5.unpatchCanPlayType = function () {
  var r = Lib.TEST_VID.constructor.prototype.canPlayType;
  Lib.TEST_VID.constructor.prototype.canPlayType = canPlayType;
  canPlayType = null;
  return r;
};

// by default, patch the video element
Html5.patchCanPlayType();

Html5.disposeMediaElement = function (el) {
  if (!el) {
    return;
  }

  if (el.parentNode) {
    el.parentNode.removeChild(el);
  }

  // remove any child track or source nodes to prevent their loading
  while (el.hasChildNodes()) {
    el.removeChild(el.firstChild);
  }

  // remove any src reference. not setting `src=''` because that causes a warning
  // in firefox
  el.removeAttribute('src');

  // force the media element to update its loading state by calling load()
  // however IE on Windows 7N has a bug that throws an error so need a try/catch (#793)
  if (typeof el.load === 'function') {
    // wrapping in an iife so it's not deoptimized (#1060#discussion_r10324473)
    (function () {
      try {
        el.load();
      } catch (e) {}
    })();
  }
};

_Component2['default'].registerComponent('Html5', Html5);
exports['default'] = Html5;
module.exports = exports['default'];

// not supported

},{"../component":7,"../lib":46,"../util":70,"./tech.js":63,"global/document":1}],62:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _Component2 = _dereq_('../component');

var _Component3 = _interopRequireWildcard(_Component2);

var _import = _dereq_('../lib');

var Lib = _interopRequireWildcard(_import);

var _window = _dereq_('global/window');

var _window2 = _interopRequireWildcard(_window);

/**
 * The Media Loader is the component that decides which playback technology to load
 * when the player is initialized.
 *
 * @constructor
 */

var MediaLoader = (function (_Component) {
  function MediaLoader(player, options, ready) {
    _classCallCheck(this, MediaLoader);

    _get(Object.getPrototypeOf(MediaLoader.prototype), 'constructor', this).call(this, player, options, ready);

    // If there are no sources when the player is initialized,
    // load the first supported playback technology.
    if (!player.options_.sources || player.options_.sources.length === 0) {
      for (var i = 0, j = player.options_.techOrder; i < j.length; i++) {
        var techName = Lib.capitalize(j[i]);
        var tech = _Component3['default'].getComponent(techName);

        // Check if the browser supports this technology
        if (tech && tech.isSupported()) {
          player.loadTech(techName);
          break;
        }
      }
    } else {
      // // Loop through playback technologies (HTML5, Flash) and check for support.
      // // Then load the best source.
      // // A few assumptions here:
      // //   All playback technologies respect preload false.
      player.src(player.options_.sources);
    }
  }

  _inherits(MediaLoader, _Component);

  return MediaLoader;
})(_Component3['default']);

_Component3['default'].registerComponent('MediaLoader', MediaLoader);
exports['default'] = MediaLoader;
module.exports = exports['default'];

},{"../component":7,"../lib":46,"global/window":2}],63:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
  value: true
});
/**
 * @fileoverview Media Technology Controller - Base class for media playback
 * technology controllers like Flash and HTML5
 */

var _Component2 = _dereq_('../component');

var _Component3 = _interopRequireWildcard(_Component2);

var _TextTrack = _dereq_('../tracks/text-track');

var _TextTrack2 = _interopRequireWildcard(_TextTrack);

var _TextTrackList = _dereq_('../tracks/text-track-list');

var _TextTrackList2 = _interopRequireWildcard(_TextTrackList);

var _import = _dereq_('../lib');

var Lib = _interopRequireWildcard(_import);

var _window = _dereq_('global/window');

var _window2 = _interopRequireWildcard(_window);

var _document = _dereq_('global/document');

var _document2 = _interopRequireWildcard(_document);

/**
 * Base class for media (HTML5 Video, Flash) controllers
 * @param {Player|Object} player  Central player instance
 * @param {Object=} options Options object
 * @constructor
 */

var Tech = (function (_Component) {
  function Tech() {
    var options = arguments[0] === undefined ? {} : arguments[0];
    var ready = arguments[1] === undefined ? function () {} : arguments[1];

    _classCallCheck(this, Tech);

    options = options || {};
    // we don't want the tech to report user activity automatically.
    // This is done manually in addControlsListeners
    options.reportTouchActivity = false;
    _get(Object.getPrototypeOf(Tech.prototype), 'constructor', this).call(this, null, options, ready);

    this.textTracks_ = options.textTracks;

    // Manually track progress in cases where the browser/flash player doesn't report it.
    if (!this.featuresProgressEvents) {
      this.manualProgressOn();
    }

    // Manually track timeupdates in cases where the browser/flash player doesn't report it.
    if (!this.featuresTimeupdateEvents) {
      this.manualTimeUpdatesOn();
    }

    this.initControlsListeners();

    if (options.nativeCaptions === false || options.nativeTextTracks === false) {
      this.featuresNativeTextTracks = false;
    }

    if (!this.featuresNativeTextTracks) {
      this.emulateTextTracks();
    }

    this.initTextTrackListeners();
  }

  _inherits(Tech, _Component);

  _createClass(Tech, [{
    key: 'initControlsListeners',

    /**
     * Set up click and touch listeners for the playback element
     * On desktops, a click on the video itself will toggle playback,
     * on a mobile device a click on the video toggles controls.
     * (toggling controls is done by toggling the user state between active and
     * inactive)
     *
     * A tap can signal that a user has become active, or has become inactive
     * e.g. a quick tap on an iPhone movie should reveal the controls. Another
     * quick tap should hide them again (signaling the user is in an inactive
     * viewing state)
     *
     * In addition to this, we still want the user to be considered inactive after
     * a few seconds of inactivity.
     *
     * Note: the only part of iOS interaction we can't mimic with this setup
     * is a touch and hold on the video element counting as activity in order to
     * keep the controls showing, but that shouldn't be an issue. A touch and hold on
     * any controls will still keep the user active
     */
    value: function initControlsListeners() {
      // if we're loading the playback object after it has started loading or playing the
      // video (often with autoplay on) then the loadstart event has already fired and we
      // need to fire it manually because many things rely on it.
      // Long term we might consider how we would do this for other events like 'canplay'
      // that may also have fired.
      this.ready(function () {
        if (this.networkState && this.networkState() > 0) {
          this.trigger('loadstart');
        }
      });
    }
  }, {
    key: 'manualProgressOn',

    /* Fallbacks for unsupported event types
    ================================================================================ */
    // Manually trigger progress events based on changes to the buffered amount
    // Many flash players and older HTML5 browsers don't send progress or progress-like events
    value: function manualProgressOn() {
      this.on('durationchange', this.onDurationChange);

      this.manualProgress = true;

      // Trigger progress watching when a source begins loading
      this.trackProgress();
    }
  }, {
    key: 'manualProgressOff',
    value: function manualProgressOff() {
      this.manualProgress = false;
      this.stopTrackingProgress();

      this.off('durationchange', this.onDurationChange);
    }
  }, {
    key: 'trackProgress',
    value: function trackProgress() {
      this.progressInterval = this.setInterval(Lib.bind(this, function () {
        // Don't trigger unless buffered amount is greater than last time

        var bufferedPercent = this.bufferedPercent();

        if (this.bufferedPercent_ !== bufferedPercent) {
          this.trigger('progress');
        }

        this.bufferedPercent_ = bufferedPercent;

        if (bufferedPercent === 1) {
          this.stopTrackingProgress();
        }
      }), 500);
    }
  }, {
    key: 'onDurationChange',
    value: function onDurationChange() {
      this.duration_ = this.duration();
    }
  }, {
    key: 'bufferedPercent',
    value: function bufferedPercent() {
      var bufferedDuration = 0,
          start = undefined,
          end = undefined;

      if (!this.duration_) {
        return 0;
      }

      var buffered = this.buffered();

      if (!buffered || !buffered.length) {
        buffered = Lib.createTimeRange(0, 0);
      }

      for (var i = 0; i < buffered.length; i++) {
        start = buffered.start(i);
        end = buffered.end(i);

        // buffered end can be bigger than duration by a very small fraction
        if (end > this.duration_) {
          end = this.duration_;
        }

        bufferedDuration += end - start;
      }

      return bufferedDuration / this.duration_;
    }
  }, {
    key: 'stopTrackingProgress',
    value: function stopTrackingProgress() {
      this.clearInterval(this.progressInterval);
    }
  }, {
    key: 'manualTimeUpdatesOn',

    /*! Time Tracking -------------------------------------------------------------- */
    value: function manualTimeUpdatesOn() {
      this.manualTimeUpdates = true;

      this.on('play', this.trackCurrentTime);
      this.on('pause', this.stopTrackingCurrentTime);
      // timeupdate is also called by .currentTime whenever current time is set

      // Watch for native timeupdate event only
      var onTimeUpdate = (function (_onTimeUpdate) {
        function onTimeUpdate(_x) {
          return _onTimeUpdate.apply(this, arguments);
        }

        onTimeUpdate.toString = function () {
          return _onTimeUpdate.toString();
        };

        return onTimeUpdate;
      })(function (e) {
        if (e.manuallyTriggered) return;

        this.off('timeupdate', onTimeUpdate);

        // Update known progress support for this playback technology
        this.featuresTimeupdateEvents = true;
        // Turn off manual progress tracking
        this.manualTimeUpdatesOff();
      });

      this.on('timeupdate', onTimeUpdate);
    }
  }, {
    key: 'manualTimeUpdatesOff',
    value: function manualTimeUpdatesOff() {
      this.manualTimeUpdates = false;
      this.stopTrackingCurrentTime();
      this.off('play', this.trackCurrentTime);
      this.off('pause', this.stopTrackingCurrentTime);
    }
  }, {
    key: 'trackCurrentTime',
    value: function trackCurrentTime() {
      if (this.currentTimeInterval) {
        this.stopTrackingCurrentTime();
      }
      this.currentTimeInterval = this.setInterval(function () {
        this.trigger({ type: 'timeupdate', target: this, manuallyTriggered: true });
      }, 250); // 42 = 24 fps // 250 is what Webkit uses // FF uses 15
    }
  }, {
    key: 'stopTrackingCurrentTime',

    // Turn off play progress tracking (when paused or dragging)
    value: function stopTrackingCurrentTime() {
      this.clearInterval(this.currentTimeInterval);

      // #1002 - if the video ends right before the next timeupdate would happen,
      // the progress bar won't make it all the way to the end
      this.trigger({ type: 'timeupdate', target: this, manuallyTriggered: true });
    }
  }, {
    key: 'dispose',
    value: function dispose() {
      // Turn off any manual progress or timeupdate tracking
      if (this.manualProgress) {
        this.manualProgressOff();
      }

      if (this.manualTimeUpdates) {
        this.manualTimeUpdatesOff();
      }

      _get(Object.getPrototypeOf(Tech.prototype), 'dispose', this).call(this);
    }
  }, {
    key: 'setCurrentTime',
    value: function setCurrentTime() {
      // improve the accuracy of manual timeupdates
      if (this.manualTimeUpdates) {
        this.trigger({ type: 'timeupdate', target: this, manuallyTriggered: true });
      }
    }
  }, {
    key: 'initTextTrackListeners',
    value: function initTextTrackListeners() {
      var textTrackListChanges = Lib.bind(this, function () {
        this.trigger('texttrackchange');
      });

      var tracks = this.textTracks();

      if (!tracks) {
        return;
      }tracks.addEventListener('removetrack', textTrackListChanges);
      tracks.addEventListener('addtrack', textTrackListChanges);

      this.on('dispose', Lib.bind(this, function () {
        tracks.removeEventListener('removetrack', textTrackListChanges);
        tracks.removeEventListener('addtrack', textTrackListChanges);
      }));
    }
  }, {
    key: 'emulateTextTracks',
    value: function emulateTextTracks() {
      if (!_window2['default'].WebVTT && this.el().parentNode != null) {
        var script = _document2['default'].createElement('script');
        script.src = this.options_['vtt.js'] || '../node_modules/vtt.js/dist/vtt.js';
        this.el().parentNode.appendChild(script);
        _window2['default'].WebVTT = true;
      }

      var tracks = this.textTracks();
      if (!tracks) {
        return;
      }

      var textTracksChanges = function textTracksChanges() {
        var updateDisplay = Lib.bind(this, function () {
          this.trigger('texttrackchange');
        });

        this.trigger('texttrackchange');

        for (var i = 0; i < this.length; i++) {
          var track = this[i];
          track.removeEventListener('cuechange', updateDisplay);
          if (track.mode === 'showing') {
            track.addEventListener('cuechange', updateDisplay);
          }
        }
      };

      tracks.addEventListener('change', textTracksChanges);

      this.on('dispose', Lib.bind(this, function () {
        tracks.removeEventListener('change', textTracksChanges);
      }));
    }
  }, {
    key: 'textTracks',

    /**
     * Provide default methods for text tracks.
     *
     * Html5 tech overrides these.
     */

    value: function textTracks() {
      this.textTracks_ = this.textTracks_ || new _TextTrackList2['default']();
      return this.textTracks_;
    }
  }, {
    key: 'remoteTextTracks',
    value: function remoteTextTracks() {
      this.remoteTextTracks_ = this.remoteTextTracks_ || new _TextTrackList2['default']();
      return this.remoteTextTracks_;
    }
  }, {
    key: 'addTextTrack',
    value: function addTextTrack(kind, label, language) {
      if (!kind) {
        throw new Error('TextTrack kind is required but was not provided');
      }

      return createTrackHelper(this, kind, label, language);
    }
  }, {
    key: 'addRemoteTextTrack',
    value: function addRemoteTextTrack(options) {
      var track = createTrackHelper(this, options.kind, options.label, options.language, options);
      this.remoteTextTracks().addTrack_(track);
      return {
        track: track
      };
    }
  }, {
    key: 'removeRemoteTextTrack',
    value: function removeRemoteTextTrack(track) {
      this.textTracks().removeTrack_(track);
      this.remoteTextTracks().removeTrack_(track);
    }
  }, {
    key: 'setPoster',

    /**
     * Provide a default setPoster method for techs
     *
     * Poster support for techs should be optional, so we don't want techs to
     * break if they don't have a way to set a poster.
     */
    value: function setPoster() {}
  }]);

  return Tech;
})(_Component3['default']);

/**
 * List of associated text tracks
 * @type {Array}
 * @private
 */
Tech.prototype.textTracks_;

var createTrackHelper = function createTrackHelper(self, kind, label, language) {
  var options = arguments[4] === undefined ? {} : arguments[4];

  var tracks = self.textTracks();

  options.kind = kind;

  if (label) {
    options.label = label;
  }
  if (language) {
    options.language = language;
  }
  options.tech = self;

  var track = new _TextTrack2['default'](options);
  tracks.addTrack_(track);

  return track;
};

Tech.prototype.featuresVolumeControl = true;

// Resizing plugins using request fullscreen reloads the plugin
Tech.prototype.featuresFullscreenResize = false;
Tech.prototype.featuresPlaybackRate = false;

// Optional events that we can manually mimic with timers
// currently not triggered by video-js-swf
Tech.prototype.featuresProgressEvents = false;
Tech.prototype.featuresTimeupdateEvents = false;

Tech.prototype.featuresNativeTextTracks = false;

/**
 * A functional mixin for techs that want to use the Source Handler pattern.
 *
 * ##### EXAMPLE:
 *
 *   Tech.withSourceHandlers.call(MyTech);
 *
 */
Tech.withSourceHandlers = function (_Tech) {
  /**
   * Register a source handler
   * Source handlers are scripts for handling specific formats.
   * The source handler pattern is used for adaptive formats (HLS, DASH) that
   * manually load video data and feed it into a Source Buffer (Media Source Extensions)
   * @param  {Function} handler  The source handler
   * @param  {Boolean}  first    Register it before any existing handlers
   */
  _Tech.registerSourceHandler = function (handler, index) {
    var handlers = _Tech.sourceHandlers;

    if (!handlers) {
      handlers = _Tech.sourceHandlers = [];
    }

    if (index === undefined) {
      // add to the end of the list
      index = handlers.length;
    }

    handlers.splice(index, 0, handler);
  };

  /**
   * Return the first source handler that supports the source
   * TODO: Answer question: should 'probably' be prioritized over 'maybe'
   * @param  {Object} source The source object
   * @returns {Object}       The first source handler that supports the source
   * @returns {null}         Null if no source handler is found
   */
  _Tech.selectSourceHandler = function (source) {
    var handlers = _Tech.sourceHandlers || [];
    var can = undefined;

    for (var i = 0; i < handlers.length; i++) {
      can = handlers[i].canHandleSource(source);

      if (can) {
        return handlers[i];
      }
    }

    return null;
  };

  /**
  * Check if the tech can support the given source
  * @param  {Object} srcObj  The source object
  * @return {String}         'probably', 'maybe', or '' (empty string)
  */
  _Tech.canPlaySource = function (srcObj) {
    var sh = _Tech.selectSourceHandler(srcObj);

    if (sh) {
      return sh.canHandleSource(srcObj);
    }

    return '';
  };

  /**
   * Create a function for setting the source using a source object
   * and source handlers.
   * Should never be called unless a source handler was found.
   * @param {Object} source  A source object with src and type keys
   * @return {Tech} self
   */
  _Tech.prototype.setSource = function (source) {
    var sh = _Tech.selectSourceHandler(source);

    if (!sh) {
      // Fall back to a native source hander when unsupported sources are
      // deliberately set
      if (_Tech.nativeSourceHandler) {
        sh = _Tech.nativeSourceHandler;
      } else {
        Lib.log.error('No source hander found for the current source.');
      }
    }

    // Dispose any existing source handler
    this.disposeSourceHandler();
    this.off('dispose', this.disposeSourceHandler);

    this.currentSource_ = source;
    this.sourceHandler_ = sh.handleSource(source, this);
    this.on('dispose', this.disposeSourceHandler);

    return this;
  };

  /**
   * Clean up any existing source handler
   */
  _Tech.prototype.disposeSourceHandler = function () {
    if (this.sourceHandler_ && this.sourceHandler_.dispose) {
      this.sourceHandler_.dispose();
    }
  };
};

_Component3['default'].registerComponent('Tech', Tech);
// Old name for Tech
_Component3['default'].registerComponent('MediaTechController', Tech);
exports['default'] = Tech;
module.exports = exports['default'];

},{"../component":7,"../lib":46,"../tracks/text-track":69,"../tracks/text-track-list":67,"global/document":1,"global/window":2}],64:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _import = _dereq_('../lib');

var Lib = _interopRequireWildcard(_import);

var _document = _dereq_('global/document');

var _document2 = _interopRequireWildcard(_document);

/*
 * https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackcuelist
 *
 * interface TextTrackCueList {
 *   readonly attribute unsigned long length;
 *   getter TextTrackCue (unsigned long index);
 *   TextTrackCue? getCueById(DOMString id);
 * };
 */

var TextTrackCueList = (function (_TextTrackCueList) {
  function TextTrackCueList(_x) {
    return _TextTrackCueList.apply(this, arguments);
  }

  TextTrackCueList.toString = function () {
    return _TextTrackCueList.toString();
  };

  return TextTrackCueList;
})(function (cues) {
  var list = this;

  if (Lib.IS_IE8) {
    list = _document2['default'].createElement('custom');

    for (var prop in TextTrackCueList.prototype) {
      list[prop] = TextTrackCueList.prototype[prop];
    }
  }

  TextTrackCueList.prototype.setCues_.call(list, cues);

  Object.defineProperty(list, 'length', {
    get: function get() {
      return this.length_;
    }
  });

  if (Lib.IS_IE8) {
    return list;
  }
});

TextTrackCueList.prototype.setCues_ = function (cues) {
  var oldLength = this.length || 0;
  var i = 0;
  var l = cues.length;

  this.cues_ = cues;
  this.length_ = cues.length;

  var defineProp = function defineProp(i) {
    if (!('' + i in this)) {
      Object.defineProperty(this, '' + i, {
        get: function get() {
          return this.cues_[i];
        }
      });
    }
  };

  if (oldLength < l) {
    i = oldLength;

    for (; i < l; i++) {
      defineProp.call(this, i);
    }
  }
};

TextTrackCueList.prototype.getCueById = function (id) {
  var result = null;
  for (var i = 0, l = this.length; i < l; i++) {
    var cue = this[i];
    if (cue.id === id) {
      result = cue;
      break;
    }
  }

  return result;
};

exports['default'] = TextTrackCueList;
module.exports = exports['default'];

},{"../lib":46,"global/document":1}],65:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _Component2 = _dereq_('../component');

var _Component3 = _interopRequireWildcard(_Component2);

var _Menu = _dereq_('../menu/menu.js');

var _Menu2 = _interopRequireWildcard(_Menu);

var _MenuItem = _dereq_('../menu/menu-item.js');

var _MenuItem2 = _interopRequireWildcard(_MenuItem);

var _MenuButton = _dereq_('../menu/menu-button.js');

var _MenuButton2 = _interopRequireWildcard(_MenuButton);

var _import = _dereq_('../lib.js');

var Lib = _interopRequireWildcard(_import);

var _document = _dereq_('global/document');

var _document2 = _interopRequireWildcard(_document);

var _window = _dereq_('global/window');

var _window2 = _interopRequireWildcard(_window);

var darkGray = '#222';
var lightGray = '#ccc';
var fontMap = {
  monospace: 'monospace',
  sansSerif: 'sans-serif',
  serif: 'serif',
  monospaceSansSerif: '"Andale Mono", "Lucida Console", monospace',
  monospaceSerif: '"Courier New", monospace',
  proportionalSansSerif: 'sans-serif',
  proportionalSerif: 'serif',
  casual: '"Comic Sans MS", Impact, fantasy',
  script: '"Monotype Corsiva", cursive',
  smallcaps: '"Andale Mono", "Lucida Console", monospace, sans-serif'
};

/**
 * The component for displaying text track cues
 *
 * @constructor
 */

var TextTrackDisplay = (function (_Component) {
  function TextTrackDisplay(player, options, ready) {
    _classCallCheck(this, TextTrackDisplay);

    _get(Object.getPrototypeOf(TextTrackDisplay.prototype), 'constructor', this).call(this, player, options, ready);

    player.on('loadstart', Lib.bind(this, this.toggleDisplay));
    player.on('texttrackchange', Lib.bind(this, this.toggleDisplay));

    // This used to be called during player init, but was causing an error
    // if a track should show by default and the display hadn't loaded yet.
    // Should probably be moved to an external track loader when we support
    // tracks that don't need a display.
    player.ready(Lib.bind(this, function () {
      if (player.tech && player.tech.featuresNativeTextTracks) {
        this.hide();
        return;
      }

      player.on('fullscreenchange', Lib.bind(this, this.updateDisplay));

      var tracks = player.options_.tracks || [];
      for (var i = 0; i < tracks.length; i++) {
        var track = tracks[i];
        this.player_.addRemoteTextTrack(track);
      }
    }));
  }

  _inherits(TextTrackDisplay, _Component);

  _createClass(TextTrackDisplay, [{
    key: 'toggleDisplay',
    value: function toggleDisplay() {
      if (this.player_.tech && this.player_.tech.featuresNativeTextTracks) {
        this.hide();
      } else {
        this.show();
      }
    }
  }, {
    key: 'createEl',
    value: function createEl() {
      return _get(Object.getPrototypeOf(TextTrackDisplay.prototype), 'createEl', this).call(this, 'div', {
        className: 'vjs-text-track-display'
      });
    }
  }, {
    key: 'clearDisplay',
    value: function clearDisplay() {
      if (typeof _window2['default'].WebVTT === 'function') {
        _window2['default'].WebVTT.processCues(_window2['default'], [], this.el_);
      }
    }
  }, {
    key: 'updateDisplay',
    value: function updateDisplay() {
      var tracks = this.player_.textTracks();

      this.clearDisplay();

      if (!tracks) {
        return;
      }

      for (var i = 0; i < tracks.length; i++) {
        var track = tracks[i];
        if (track.mode === 'showing') {
          this.updateForTrack(track);
        }
      }
    }
  }, {
    key: 'updateForTrack',
    value: function updateForTrack(track) {
      if (typeof _window2['default'].WebVTT !== 'function' || !track.activeCues) {
        return;
      }

      var overrides = this.player_.textTrackSettings.getValues();

      var cues = [];
      for (var _i = 0; _i < track.activeCues.length; _i++) {
        cues.push(track.activeCues[_i]);
      }

      _window2['default'].WebVTT.processCues(_window2['default'], track.activeCues, this.el_);

      var i = cues.length;
      while (i--) {
        var cueDiv = cues[i].displayState;
        if (overrides.color) {
          cueDiv.firstChild.style.color = overrides.color;
        }
        if (overrides.textOpacity) {
          tryUpdateStyle(cueDiv.firstChild, 'color', constructColor(overrides.color || '#fff', overrides.textOpacity));
        }
        if (overrides.backgroundColor) {
          cueDiv.firstChild.style.backgroundColor = overrides.backgroundColor;
        }
        if (overrides.backgroundOpacity) {
          tryUpdateStyle(cueDiv.firstChild, 'backgroundColor', constructColor(overrides.backgroundColor || '#000', overrides.backgroundOpacity));
        }
        if (overrides.windowColor) {
          if (overrides.windowOpacity) {
            tryUpdateStyle(cueDiv, 'backgroundColor', constructColor(overrides.windowColor, overrides.windowOpacity));
          } else {
            cueDiv.style.backgroundColor = overrides.windowColor;
          }
        }
        if (overrides.edgeStyle) {
          if (overrides.edgeStyle === 'dropshadow') {
            cueDiv.firstChild.style.textShadow = '2px 2px 3px ' + darkGray + ', 2px 2px 4px ' + darkGray + ', 2px 2px 5px ' + darkGray;
          } else if (overrides.edgeStyle === 'raised') {
            cueDiv.firstChild.style.textShadow = '1px 1px ' + darkGray + ', 2px 2px ' + darkGray + ', 3px 3px ' + darkGray;
          } else if (overrides.edgeStyle === 'depressed') {
            cueDiv.firstChild.style.textShadow = '1px 1px ' + lightGray + ', 0 1px ' + lightGray + ', -1px -1px ' + darkGray + ', 0 -1px ' + darkGray;
          } else if (overrides.edgeStyle === 'uniform') {
            cueDiv.firstChild.style.textShadow = '0 0 4px ' + darkGray + ', 0 0 4px ' + darkGray + ', 0 0 4px ' + darkGray + ', 0 0 4px ' + darkGray;
          }
        }
        if (overrides.fontPercent && overrides.fontPercent !== 1) {
          var fontSize = _window2['default'].parseFloat(cueDiv.style.fontSize);
          cueDiv.style.fontSize = fontSize * overrides.fontPercent + 'px';
          cueDiv.style.height = 'auto';
          cueDiv.style.top = 'auto';
          cueDiv.style.bottom = '2px';
        }
        if (overrides.fontFamily && overrides.fontFamily !== 'default') {
          if (overrides.fontFamily === 'small-caps') {
            cueDiv.firstChild.style.fontVariant = 'small-caps';
          } else {
            cueDiv.firstChild.style.fontFamily = fontMap[overrides.fontFamily];
          }
        }
      }
    }
  }]);

  return TextTrackDisplay;
})(_Component3['default']);

// Add cue HTML to display
function constructColor(color, opacity) {
  return 'rgba(' +
  // color looks like "#f0e"
  parseInt(color[1] + color[1], 16) + ',' + parseInt(color[2] + color[2], 16) + ',' + parseInt(color[3] + color[3], 16) + ',' + opacity + ')';
}

function tryUpdateStyle(el, style, rule) {
  // some style changes will throw an error, particularly in IE8. Those should be noops.
  try {
    el.style[style] = rule;
  } catch (e) {}
}

_Component3['default'].registerComponent('TextTrackDisplay', TextTrackDisplay);
exports['default'] = TextTrackDisplay;
module.exports = exports['default'];

},{"../component":7,"../lib.js":46,"../menu/menu-button.js":49,"../menu/menu-item.js":50,"../menu/menu.js":51,"global/document":1,"global/window":2}],66:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
/*
 * https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackmode
 *
 * enum TextTrackMode { "disabled",  "hidden",  "showing" };
 */
var TextTrackMode = {
  disabled: 'disabled',
  hidden: 'hidden',
  showing: 'showing'
};

/*
 * https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackkind
 *
 * enum TextTrackKind { "subtitles",  "captions",  "descriptions",  "chapters",  "metadata" };
 */
var TextTrackKind = {
  subtitles: 'subtitles',
  captions: 'captions',
  descriptions: 'descriptions',
  chapters: 'chapters',
  metadata: 'metadata'
};

exports.TextTrackMode = TextTrackMode;
exports.TextTrackKind = TextTrackKind;

},{}],67:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _EventEmitter = _dereq_('../event-emitter');

var _EventEmitter2 = _interopRequireWildcard(_EventEmitter);

var _import = _dereq_('../lib');

var Lib = _interopRequireWildcard(_import);

var _document = _dereq_('global/document');

var _document2 = _interopRequireWildcard(_document);

/*
 * https://html.spec.whatwg.org/multipage/embedded-content.html#texttracklist
 *
 * interface TextTrackList : EventTarget {
 *   readonly attribute unsigned long length;
 *   getter TextTrack (unsigned long index);
 *   TextTrack? getTrackById(DOMString id);
 *
 *   attribute EventHandler onchange;
 *   attribute EventHandler onaddtrack;
 *   attribute EventHandler onremovetrack;
 * };
 */
var TextTrackList = (function (_TextTrackList) {
  function TextTrackList(_x) {
    return _TextTrackList.apply(this, arguments);
  }

  TextTrackList.toString = function () {
    return _TextTrackList.toString();
  };

  return TextTrackList;
})(function (tracks) {
  var list = this;

  if (Lib.IS_IE8) {
    list = _document2['default'].createElement('custom');

    for (var prop in TextTrackList.prototype) {
      list[prop] = TextTrackList.prototype[prop];
    }
  }

  tracks = tracks || [];
  list.tracks_ = [];

  Object.defineProperty(list, 'length', {
    get: function get() {
      return this.tracks_.length;
    }
  });

  for (var i = 0; i < tracks.length; i++) {
    list.addTrack_(tracks[i]);
  }

  if (Lib.IS_IE8) {
    return list;
  }
});

TextTrackList.prototype = Lib.obj.create(_EventEmitter2['default'].prototype);
TextTrackList.prototype.constructor = TextTrackList;

/*
 * change - One or more tracks in the track list have been enabled or disabled.
 * addtrack - A track has been added to the track list.
 * removetrack - A track has been removed from the track list.
*/
TextTrackList.prototype.allowedEvents_ = {
  change: 'change',
  addtrack: 'addtrack',
  removetrack: 'removetrack'
};

// emulate attribute EventHandler support to allow for feature detection
for (var _event in TextTrackList.prototype.allowedEvents_) {
  TextTrackList.prototype['on' + _event] = null;
}

TextTrackList.prototype.addTrack_ = function (track) {
  var index = this.tracks_.length;
  if (!('' + index in this)) {
    Object.defineProperty(this, index, {
      get: function get() {
        return this.tracks_[index];
      }
    });
  }

  track.addEventListener('modechange', Lib.bind(this, function () {
    this.trigger('change');
  }));
  this.tracks_.push(track);

  this.trigger({
    type: 'addtrack',
    track: track
  });
};

TextTrackList.prototype.removeTrack_ = function (rtrack) {
  var result = null;
  var track = undefined;

  for (var i = 0, l = this.length; i < l; i++) {
    track = this[i];
    if (track === rtrack) {
      this.tracks_.splice(i, 1);
      break;
    }
  }

  this.trigger({
    type: 'removetrack',
    track: track
  });
};

TextTrackList.prototype.getTrackById = function (id) {
  var result = null;

  for (var i = 0, l = this.length; i < l; i++) {
    var track = this[i];
    if (track.id === id) {
      result = track;
      break;
    }
  }

  return result;
};

exports['default'] = TextTrackList;
module.exports = exports['default'];

},{"../event-emitter":42,"../lib":46,"global/document":1}],68:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _slicedToArray = function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _Component2 = _dereq_('../component');

var _Component3 = _interopRequireWildcard(_Component2);

var _import = _dereq_('../lib');

var Lib = _interopRequireWildcard(_import);

var _import2 = _dereq_('../events');

var Events = _interopRequireWildcard(_import2);

var _safeParseTuple3 = _dereq_('safe-json-parse/tuple');

var _safeParseTuple4 = _interopRequireWildcard(_safeParseTuple3);

var _window = _dereq_('global/window');

var _window2 = _interopRequireWildcard(_window);

var TextTrackSettings = (function (_Component) {
  function TextTrackSettings(player, options) {
    _classCallCheck(this, TextTrackSettings);

    _get(Object.getPrototypeOf(TextTrackSettings.prototype), 'constructor', this).call(this, player, options);
    this.hide();

    Events.on(this.el().querySelector('.vjs-done-button'), 'click', Lib.bind(this, function () {
      this.saveSettings();
      this.hide();
    }));

    Events.on(this.el().querySelector('.vjs-default-button'), 'click', Lib.bind(this, function () {
      this.el().querySelector('.vjs-fg-color > select').selectedIndex = 0;
      this.el().querySelector('.vjs-bg-color > select').selectedIndex = 0;
      this.el().querySelector('.window-color > select').selectedIndex = 0;
      this.el().querySelector('.vjs-text-opacity > select').selectedIndex = 0;
      this.el().querySelector('.vjs-bg-opacity > select').selectedIndex = 0;
      this.el().querySelector('.vjs-window-opacity > select').selectedIndex = 0;
      this.el().querySelector('.vjs-edge-style select').selectedIndex = 0;
      this.el().querySelector('.vjs-font-family select').selectedIndex = 0;
      this.el().querySelector('.vjs-font-percent select').selectedIndex = 2;
      this.updateDisplay();
    }));

    Events.on(this.el().querySelector('.vjs-fg-color > select'), 'change', Lib.bind(this, this.updateDisplay));
    Events.on(this.el().querySelector('.vjs-bg-color > select'), 'change', Lib.bind(this, this.updateDisplay));
    Events.on(this.el().querySelector('.window-color > select'), 'change', Lib.bind(this, this.updateDisplay));
    Events.on(this.el().querySelector('.vjs-text-opacity > select'), 'change', Lib.bind(this, this.updateDisplay));
    Events.on(this.el().querySelector('.vjs-bg-opacity > select'), 'change', Lib.bind(this, this.updateDisplay));
    Events.on(this.el().querySelector('.vjs-window-opacity > select'), 'change', Lib.bind(this, this.updateDisplay));
    Events.on(this.el().querySelector('.vjs-font-percent select'), 'change', Lib.bind(this, this.updateDisplay));
    Events.on(this.el().querySelector('.vjs-edge-style select'), 'change', Lib.bind(this, this.updateDisplay));
    Events.on(this.el().querySelector('.vjs-font-family select'), 'change', Lib.bind(this, this.updateDisplay));

    if (player.options().persistTextTrackSettings) {
      this.restoreSettings();
    }
  }

  _inherits(TextTrackSettings, _Component);

  _createClass(TextTrackSettings, [{
    key: 'createEl',
    value: function createEl() {
      return _get(Object.getPrototypeOf(TextTrackSettings.prototype), 'createEl', this).call(this, 'div', {
        className: 'vjs-caption-settings vjs-modal-overlay',
        innerHTML: captionOptionsMenuTemplate()
      });
    }
  }, {
    key: 'getValues',
    value: function getValues() {
      var el = this.el();

      var textEdge = getSelectedOptionValue(el.querySelector('.vjs-edge-style select'));
      var fontFamily = getSelectedOptionValue(el.querySelector('.vjs-font-family select'));
      var fgColor = getSelectedOptionValue(el.querySelector('.vjs-fg-color > select'));
      var textOpacity = getSelectedOptionValue(el.querySelector('.vjs-text-opacity > select'));
      var bgColor = getSelectedOptionValue(el.querySelector('.vjs-bg-color > select'));
      var bgOpacity = getSelectedOptionValue(el.querySelector('.vjs-bg-opacity > select'));
      var windowColor = getSelectedOptionValue(el.querySelector('.window-color > select'));
      var windowOpacity = getSelectedOptionValue(el.querySelector('.vjs-window-opacity > select'));
      var fontPercent = _window2['default'].parseFloat(getSelectedOptionValue(el.querySelector('.vjs-font-percent > select')));

      var result = {
        backgroundOpacity: bgOpacity,
        textOpacity: textOpacity,
        windowOpacity: windowOpacity,
        edgeStyle: textEdge,
        fontFamily: fontFamily,
        color: fgColor,
        backgroundColor: bgColor,
        windowColor: windowColor,
        fontPercent: fontPercent
      };
      for (var _name in result) {
        if (result[_name] === '' || result[_name] === 'none' || _name === 'fontPercent' && result[_name] === 1) {
          delete result[_name];
        }
      }
      return result;
    }
  }, {
    key: 'setValues',
    value: function setValues(values) {
      var el = this.el();

      setSelectedOption(el.querySelector('.vjs-edge-style select'), values.edgeStyle);
      setSelectedOption(el.querySelector('.vjs-font-family select'), values.fontFamily);
      setSelectedOption(el.querySelector('.vjs-fg-color > select'), values.color);
      setSelectedOption(el.querySelector('.vjs-text-opacity > select'), values.textOpacity);
      setSelectedOption(el.querySelector('.vjs-bg-color > select'), values.backgroundColor);
      setSelectedOption(el.querySelector('.vjs-bg-opacity > select'), values.backgroundOpacity);
      setSelectedOption(el.querySelector('.window-color > select'), values.windowColor);
      setSelectedOption(el.querySelector('.vjs-window-opacity > select'), values.windowOpacity);

      var fontPercent = values.fontPercent;

      if (fontPercent) {
        fontPercent = fontPercent.toFixed(2);
      }

      setSelectedOption(el.querySelector('.vjs-font-percent > select'), fontPercent);
    }
  }, {
    key: 'restoreSettings',
    value: function restoreSettings() {
      var _safeParseTuple = _safeParseTuple4['default'](_window2['default'].localStorage.getItem('vjs-text-track-settings'));

      var _safeParseTuple2 = _slicedToArray(_safeParseTuple, 2);

      var err = _safeParseTuple2[0];
      var values = _safeParseTuple2[1];

      if (err) {
        Lib.log.error(err);
      }

      if (values) {
        this.setValues(values);
      }
    }
  }, {
    key: 'saveSettings',
    value: function saveSettings() {
      if (!this.player_.options().persistTextTrackSettings) {
        return;
      }

      var values = this.getValues();
      try {
        if (!Lib.isEmpty(values)) {
          _window2['default'].localStorage.setItem('vjs-text-track-settings', JSON.stringify(values));
        } else {
          _window2['default'].localStorage.removeItem('vjs-text-track-settings');
        }
      } catch (e) {}
    }
  }, {
    key: 'updateDisplay',
    value: function updateDisplay() {
      var ttDisplay = this.player_.getChild('textTrackDisplay');
      if (ttDisplay) {
        ttDisplay.updateDisplay();
      }
    }
  }]);

  return TextTrackSettings;
})(_Component3['default']);

_Component3['default'].registerComponent('TextTrackSettings', TextTrackSettings);

function getSelectedOptionValue(target) {
  var selectedOption = undefined;
  // not all browsers support selectedOptions, so, fallback to options
  if (target.selectedOptions) {
    selectedOption = target.selectedOptions[0];
  } else if (target.options) {
    selectedOption = target.options[target.options.selectedIndex];
  }

  return selectedOption.value;
}

function setSelectedOption(target, value) {
  if (!value) {
    return;
  }

  var i = undefined;
  for (i = 0; i < target.options.length; i++) {
    var option = target.options[i];
    if (option.value === value) {
      break;
    }
  }

  target.selectedIndex = i;
}

function captionOptionsMenuTemplate() {
  var template = '<div class="vjs-tracksettings">\n      <div class="vjs-tracksettings-colors">\n        <div class="vjs-fg-color vjs-tracksetting">\n            <label class="vjs-label">Foreground</label>\n            <select>\n              <option value="">---</option>\n              <option value="#FFF">White</option>\n              <option value="#000">Black</option>\n              <option value="#F00">Red</option>\n              <option value="#0F0">Green</option>\n              <option value="#00F">Blue</option>\n              <option value="#FF0">Yellow</option>\n              <option value="#F0F">Magenta</option>\n              <option value="#0FF">Cyan</option>\n            </select>\n            <span class="vjs-text-opacity vjs-opacity">\n              <select>\n                <option value="">---</option>\n                <option value="1">Opaque</option>\n                <option value="0.5">Semi-Opaque</option>\n              </select>\n            </span>\n        </div> <!-- vjs-fg-color -->\n        <div class="vjs-bg-color vjs-tracksetting">\n            <label class="vjs-label">Background</label>\n            <select>\n              <option value="">---</option>\n              <option value="#FFF">White</option>\n              <option value="#000">Black</option>\n              <option value="#F00">Red</option>\n              <option value="#0F0">Green</option>\n              <option value="#00F">Blue</option>\n              <option value="#FF0">Yellow</option>\n              <option value="#F0F">Magenta</option>\n              <option value="#0FF">Cyan</option>\n            </select>\n            <span class="vjs-bg-opacity vjs-opacity">\n                <select>\n                  <option value="">---</option>\n                  <option value="1">Opaque</option>\n                  <option value="0.5">Semi-Transparent</option>\n                  <option value="0">Transparent</option>\n                </select>\n            </span>\n        </div> <!-- vjs-bg-color -->\n        <div class="window-color vjs-tracksetting">\n            <label class="vjs-label">Window</label>\n            <select>\n              <option value="">---</option>\n              <option value="#FFF">White</option>\n              <option value="#000">Black</option>\n              <option value="#F00">Red</option>\n              <option value="#0F0">Green</option>\n              <option value="#00F">Blue</option>\n              <option value="#FF0">Yellow</option>\n              <option value="#F0F">Magenta</option>\n              <option value="#0FF">Cyan</option>\n            </select>\n            <span class="vjs-window-opacity vjs-opacity">\n                <select>\n                  <option value="">---</option>\n                  <option value="1">Opaque</option>\n                  <option value="0.5">Semi-Transparent</option>\n                  <option value="0">Transparent</option>\n                </select>\n            </span>\n        </div> <!-- vjs-window-color -->\n      </div> <!-- vjs-tracksettings -->\n      <div class="vjs-tracksettings-font">\n        <div class="vjs-font-percent vjs-tracksetting">\n          <label class="vjs-label">Font Size</label>\n          <select>\n            <option value="0.50">50%</option>\n            <option value="0.75">75%</option>\n            <option value="1.00" selected>100%</option>\n            <option value="1.25">125%</option>\n            <option value="1.50">150%</option>\n            <option value="1.75">175%</option>\n            <option value="2.00">200%</option>\n            <option value="3.00">300%</option>\n            <option value="4.00">400%</option>\n          </select>\n        </div> <!-- vjs-font-percent -->\n        <div class="vjs-edge-style vjs-tracksetting">\n          <label class="vjs-label">Text Edge Style</label>\n          <select>\n            <option value="none">None</option>\n            <option value="raised">Raised</option>\n            <option value="depressed">Depressed</option>\n            <option value="uniform">Uniform</option>\n            <option value="dropshadow">Dropshadow</option>\n          </select>\n        </div> <!-- vjs-edge-style -->\n        <div class="vjs-font-family vjs-tracksetting">\n          <label class="vjs-label">Font Family</label>\n          <select>\n            <option value="">Default</option>\n            <option value="monospaceSerif">Monospace Serif</option>\n            <option value="proportionalSerif">Proportional Serif</option>\n            <option value="monospaceSansSerif">Monospace Sans-Serif</option>\n            <option value="proportionalSansSerif">Proportional Sans-Serif</option>\n            <option value="casual">Casual</option>\n            <option value="script">Script</option>\n            <option value="small-caps">Small Caps</option>\n          </select>\n        </div> <!-- vjs-font-family -->\n      </div>\n    </div>\n    <div class="vjs-tracksettings-controls">\n      <button class="vjs-default-button">Defaults</button>\n      <button class="vjs-done-button">Done</button>\n    </div>';

  return template;
}

exports['default'] = TextTrackSettings;
module.exports = exports['default'];

},{"../component":7,"../events":43,"../lib":46,"global/window":2,"safe-json-parse/tuple":4}],69:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _TextTrackCueList = _dereq_('./text-track-cue-list');

var _TextTrackCueList2 = _interopRequireWildcard(_TextTrackCueList);

var _import = _dereq_('../lib');

var Lib = _interopRequireWildcard(_import);

var _import2 = _dereq_('./text-track-enums');

var TextTrackEnum = _interopRequireWildcard(_import2);

var _EventEmitter = _dereq_('../event-emitter');

var _EventEmitter2 = _interopRequireWildcard(_EventEmitter);

var _document = _dereq_('global/document');

var _document2 = _interopRequireWildcard(_document);

var _window = _dereq_('global/window');

var _window2 = _interopRequireWildcard(_window);

var _XHR = _dereq_('../xhr.js');

var _XHR2 = _interopRequireWildcard(_XHR);

/*
 * https://html.spec.whatwg.org/multipage/embedded-content.html#texttrack
 *
 * interface TextTrack : EventTarget {
 *   readonly attribute TextTrackKind kind;
 *   readonly attribute DOMString label;
 *   readonly attribute DOMString language;
 *
 *   readonly attribute DOMString id;
 *   readonly attribute DOMString inBandMetadataTrackDispatchType;
 *
 *   attribute TextTrackMode mode;
 *
 *   readonly attribute TextTrackCueList? cues;
 *   readonly attribute TextTrackCueList? activeCues;
 *
 *   void addCue(TextTrackCue cue);
 *   void removeCue(TextTrackCue cue);
 *
 *   attribute EventHandler oncuechange;
 * };
 */
var TextTrack = (function (_TextTrack) {
  function TextTrack() {
    return _TextTrack.apply(this, arguments);
  }

  TextTrack.toString = function () {
    return _TextTrack.toString();
  };

  return TextTrack;
})(function () {
  var options = arguments[0] === undefined ? {} : arguments[0];

  if (!options.tech) {
    throw new Error('A tech was not provided.');
  }

  var tt = this;
  if (Lib.IS_IE8) {
    tt = _document2['default'].createElement('custom');

    for (var prop in TextTrack.prototype) {
      tt[prop] = TextTrack.prototype[prop];
    }
  }

  tt.tech_ = options.tech;

  var mode = TextTrackEnum.TextTrackMode[options.mode] || 'disabled';
  var kind = TextTrackEnum.TextTrackKind[options.kind] || 'subtitles';
  var label = options.label || '';
  var language = options.language || options.srclang || '';
  var id = options.id || 'vjs_text_track_' + Lib.guid++;

  if (kind === 'metadata' || kind === 'chapters') {
    mode = 'hidden';
  }

  tt.cues_ = [];
  tt.activeCues_ = [];

  var cues = new _TextTrackCueList2['default'](tt.cues_);
  var activeCues = new _TextTrackCueList2['default'](tt.activeCues_);

  var changed = false;
  var timeupdateHandler = Lib.bind(tt, function () {
    this.activeCues;
    if (changed) {
      this.trigger('cuechange');
      changed = false;
    }
  });
  if (mode !== 'disabled') {
    tt.tech_.on('timeupdate', timeupdateHandler);
  }

  Object.defineProperty(tt, 'kind', {
    get: function get() {
      return kind;
    },
    set: Function.prototype
  });

  Object.defineProperty(tt, 'label', {
    get: function get() {
      return label;
    },
    set: Function.prototype
  });

  Object.defineProperty(tt, 'language', {
    get: function get() {
      return language;
    },
    set: Function.prototype
  });

  Object.defineProperty(tt, 'id', {
    get: function get() {
      return id;
    },
    set: Function.prototype
  });

  Object.defineProperty(tt, 'mode', {
    get: function get() {
      return mode;
    },
    set: function set(newMode) {
      if (!TextTrackEnum.TextTrackMode[newMode]) {
        return;
      }
      mode = newMode;
      if (mode === 'showing') {
        this.tech_.on('timeupdate', timeupdateHandler);
      }
      this.trigger('modechange');
    }
  });

  Object.defineProperty(tt, 'cues', {
    get: function get() {
      if (!this.loaded_) {
        return null;
      }

      return cues;
    },
    set: Function.prototype
  });

  Object.defineProperty(tt, 'activeCues', {
    get: function get() {
      if (!this.loaded_) {
        return null;
      }

      if (this.cues.length === 0) {
        return activeCues; // nothing to do
      }

      var ct = this.tech_.currentTime();
      var active = [];

      for (var i = 0, l = this.cues.length; i < l; i++) {
        var cue = this.cues[i];
        if (cue.startTime <= ct && cue.endTime >= ct) {
          active.push(cue);
        } else if (cue.startTime === cue.endTime && cue.startTime <= ct && cue.startTime + 0.5 >= ct) {
          active.push(cue);
        }
      }

      changed = false;

      if (active.length !== this.activeCues_.length) {
        changed = true;
      } else {
        for (var i = 0; i < active.length; i++) {
          if (indexOf.call(this.activeCues_, active[i]) === -1) {
            changed = true;
          }
        }
      }

      this.activeCues_ = active;
      activeCues.setCues_(this.activeCues_);

      return activeCues;
    },
    set: Function.prototype
  });

  if (options.src) {
    loadTrack(options.src, tt);
  } else {
    tt.loaded_ = true;
  }

  if (Lib.IS_IE8) {
    return tt;
  }
});

TextTrack.prototype = Lib.obj.create(_EventEmitter2['default'].prototype);
TextTrack.prototype.constructor = TextTrack;

/*
 * cuechange - One or more cues in the track have become active or stopped being active.
 */
TextTrack.prototype.allowedEvents_ = {
  cuechange: 'cuechange'
};

TextTrack.prototype.addCue = function (cue) {
  var tracks = this.tech_.textTracks();

  if (tracks) {
    for (var i = 0; i < tracks.length; i++) {
      if (tracks[i] !== this) {
        tracks[i].removeCue(cue);
      }
    }
  }

  this.cues_.push(cue);
  this.cues.setCues_(this.cues_);
};

TextTrack.prototype.removeCue = function (removeCue) {
  var removed = false;

  for (var i = 0, l = this.cues_.length; i < l; i++) {
    var cue = this.cues_[i];
    if (cue === removeCue) {
      this.cues_.splice(i, 1);
      removed = true;
    }
  }

  if (removed) {
    this.cues.setCues_(this.cues_);
  }
};

/*
 * Downloading stuff happens below this point
 */
var parseCues = (function (_parseCues) {
  function parseCues(_x, _x2) {
    return _parseCues.apply(this, arguments);
  }

  parseCues.toString = function () {
    return _parseCues.toString();
  };

  return parseCues;
})(function (srcContent, track) {
  if (typeof _window2['default'].WebVTT !== 'function') {
    //try again a bit later
    return _window2['default'].setTimeout(function () {
      parseCues(srcContent, track);
    }, 25);
  }

  var parser = new _window2['default'].WebVTT.Parser(_window2['default'], _window2['default'].vttjs, _window2['default'].WebVTT.StringDecoder());

  parser.oncue = function (cue) {
    track.addCue(cue);
  };
  parser.onparsingerror = function (error) {
    Lib.log.error(error);
  };

  parser.parse(srcContent);
  parser.flush();
});

var loadTrack = function loadTrack(src, track) {
  _XHR2['default'](src, Lib.bind(this, function (err, response, responseBody) {
    if (err) {
      return Lib.log.error(err);
    }

    track.loaded_ = true;
    parseCues(responseBody, track);
  }));
};

var indexOf = function indexOf(searchElement, fromIndex) {
  if (this == null) {
    throw new TypeError('"this" is null or not defined');
  }

  var O = Object(this);

  var len = O.length >>> 0;

  if (len === 0) {
    return -1;
  }

  var n = +fromIndex || 0;

  if (Math.abs(n) === Infinity) {
    n = 0;
  }

  if (n >= len) {
    return -1;
  }

  var k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);

  while (k < len) {
    if (k in O && O[k] === searchElement) {
      return k;
    }
    k++;
  }
  return -1;
};

exports['default'] = TextTrack;
module.exports = exports['default'];

},{"../event-emitter":42,"../lib":46,"../xhr.js":72,"./text-track-cue-list":64,"./text-track-enums":66,"global/document":1,"global/window":2}],70:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _obj = _dereq_('./lib');

/**
 * Utility functions namespace
 * @namespace
 * @type {Object}
 */
var util = {};

/**
 * Merge two options objects, recursively merging any plain object properties as
 * well.  Previously `deepMerge`
 *
 * @param  {Object} obj1 Object to override values in
 * @param  {Object} obj2 Overriding object
 * @return {Object}      New object -- obj1 and obj2 will be untouched
 */
var mergeOptions = (function (_mergeOptions) {
  function mergeOptions(_x, _x2) {
    return _mergeOptions.apply(this, arguments);
  }

  mergeOptions.toString = function () {
    return _mergeOptions.toString();
  };

  return mergeOptions;
})(function (obj1, obj2) {
  var key, val1, val2;

  // make a copy of obj1 so we're not overwriting original values.
  // like prototype.options_ and all sub options objects
  obj1 = _obj.obj.copy(obj1);

  for (key in obj2) {
    if (obj2.hasOwnProperty(key)) {
      val1 = obj1[key];
      val2 = obj2[key];

      // Check if both properties are pure objects and do a deep merge if so
      if (_obj.obj.isPlain(val1) && _obj.obj.isPlain(val2)) {
        obj1[key] = mergeOptions(val1, val2);
      } else {
        obj1[key] = obj2[key];
      }
    }
  }
  return obj1;
});

exports.mergeOptions = mergeOptions;

},{"./lib":46}],71:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _document = _dereq_('global/document');

var _document2 = _interopRequireWildcard(_document);

var _MediaLoader = _dereq_('./tech/loader.js');

var _MediaLoader2 = _interopRequireWildcard(_MediaLoader);

var _Html5 = _dereq_('./tech/html5.js');

var _Html52 = _interopRequireWildcard(_Html5);

var _Flash = _dereq_('./tech/flash.js');

var _Flash2 = _interopRequireWildcard(_Flash);

var _PosterImage = _dereq_('./poster-image.js');

var _PosterImage2 = _interopRequireWildcard(_PosterImage);

var _TextTrackDisplay = _dereq_('./tracks/text-track-display.js');

var _TextTrackDisplay2 = _interopRequireWildcard(_TextTrackDisplay);

var _LoadingSpinner = _dereq_('./loading-spinner.js');

var _LoadingSpinner2 = _interopRequireWildcard(_LoadingSpinner);

var _BigPlayButton = _dereq_('./big-play-button.js');

var _BigPlayButton2 = _interopRequireWildcard(_BigPlayButton);

var _ControlBar = _dereq_('./control-bar/control-bar.js');

var _ControlBar2 = _interopRequireWildcard(_ControlBar);

var _ErrorDisplay = _dereq_('./error-display.js');

var _ErrorDisplay2 = _interopRequireWildcard(_ErrorDisplay);

var _videojs = _dereq_('./core');

var _videojs2 = _interopRequireWildcard(_videojs);

var _import = _dereq_('./setup');

var setup = _interopRequireWildcard(_import);

var _Component = _dereq_('./component');

var _Component2 = _interopRequireWildcard(_Component);

var _import2 = _dereq_('./lib');

var Lib = _interopRequireWildcard(_import2);

var _import3 = _dereq_('./util.js');

var Util = _interopRequireWildcard(_import3);

var _Player = _dereq_('./player');

var _Player2 = _interopRequireWildcard(_Player);

var _extendsFn = _dereq_('./extends.js');

var _extendsFn2 = _interopRequireWildcard(_extendsFn);

var _plugin = _dereq_('./plugins.js');

var _plugin2 = _interopRequireWildcard(_plugin);

var _options = _dereq_('./options.js');

var _options2 = _interopRequireWildcard(_options);

if (typeof HTMLVideoElement === 'undefined') {
  _document2['default'].createElement('video');
  _document2['default'].createElement('audio');
  _document2['default'].createElement('track');
}

// Run Auto-load players
// You have to wait at least once in case this script is loaded after your video in the DOM (weird behavior only with minified version)
setup.autoSetupTimeout(1, _videojs2['default']);

_videojs2['default'].getComponent = _Component2['default'].getComponent;
_videojs2['default'].registerComponent = _Component2['default'].registerComponent;

// APIs that will be removed with 5.0, but need them to get tests passing
// in ES6 transition
_videojs2['default'].TOUCH_ENABLED = Lib.TOUCH_ENABLED;
_videojs2['default'].util = Util;

// Probably want to keep this one for 5.0?
_videojs2['default'].players = _Player2['default'].players;

_videojs2['default']['extends'] = _extendsFn2['default'];

_videojs2['default'].getGlobalOptions = function () {
  return _options2['default'];
};
_videojs2['default'].setGlobalOptions = function (newOptions) {
  Lib.util.mergeOptions(_options2['default'], newOptions);
};

_videojs2['default'].plugin = _plugin2['default'];

// REMOVING: We probably should not include this in 5.0 thought it would make it
// more backwards compatible
// // Expose but deprecate the window[componentName] method for accessing components
// Lib.obj.each(Component.components, function(name, component){
//   // A deprecation warning as the constuctor
//   module.exports[name] = function(player, options, ready){
//     Lib.log.warn('Using videojs.'+name+' to access the '+name+' component has been deprecated. Please use videojs.getComponent("componentName")');
//
//     return new Component(player, options, ready);
//   };
//
//   // Allow the prototype and class methods to be accessible still this way
//   // Though anything that attempts to override class methods will no longer work
//   Lib.obj.merge(module.exports[name], component);
// });

exports['default'] = _videojs2['default'];
module.exports = exports['default'];

},{"./big-play-button.js":5,"./component":7,"./control-bar/control-bar.js":8,"./core":40,"./error-display.js":41,"./extends.js":44,"./lib":46,"./loading-spinner.js":47,"./options.js":52,"./player":53,"./plugins.js":54,"./poster-image.js":55,"./setup":56,"./tech/flash.js":60,"./tech/html5.js":61,"./tech/loader.js":62,"./tracks/text-track-display.js":65,"./util.js":70,"global/document":1}],72:[function(_dereq_,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _import = _dereq_('./util');

var VjsUtils = _interopRequireWildcard(_import);

var _import2 = _dereq_('./lib');

var Lib = _interopRequireWildcard(_import2);

var _window = _dereq_('global/window');

var _window2 = _interopRequireWildcard(_window);

/**
 * Simple http request for retrieving external files (e.g. text tracks)
 *
 * ##### Example
 *
 *     // using url string
 *     videojs.xhr('http://example.com/myfile.vtt', function(error, response, responseBody){});
 *
 *     // or options block
 *     videojs.xhr({
 *       uri: 'http://example.com/myfile.vtt',
 *       method: 'GET',
 *       responseType: 'text'
 *     }, function(error, response, responseBody){
 *       if (error) {
 *         // log the error
 *       } else {
 *         // successful, do something with the response
 *       }
 *     });
 *
 *
 * API is modeled after the Raynos/xhr, which we hope to use after
 * getting browserify implemented.
 * https://github.com/Raynos/xhr/blob/master/index.js
 *
 * @param  {Object|String}  options   Options block or URL string
 * @param  {Function}       callback  The callback function
 * @returns {Object}                  The request
 */
var xhr = function xhr(options, callback) {
  var abortTimeout = undefined;

  // If options is a string it's the url
  if (typeof options === 'string') {
    options = {
      uri: options
    };
  }

  // Merge with default options
  VjsUtils.mergeOptions({
    method: 'GET',
    timeout: 45 * 1000
  }, options);

  callback = callback || function () {};

  var XHR = _window2['default'].XMLHttpRequest;

  if (typeof XHR === 'undefined') {
    // Shim XMLHttpRequest for older IEs
    XHR = function () {
      try {
        return new _window2['default'].ActiveXObject('Msxml2.XMLHTTP.6.0');
      } catch (e) {}
      try {
        return new _window2['default'].ActiveXObject('Msxml2.XMLHTTP.3.0');
      } catch (f) {}
      try {
        return new _window2['default'].ActiveXObject('Msxml2.XMLHTTP');
      } catch (g) {}
      throw new Error('This browser does not support XMLHttpRequest.');
    };
  }

  var request = new XHR();
  // Store a reference to the url on the request instance
  request.uri = options.uri;

  var urlInfo = Lib.parseUrl(options.uri);
  var winLoc = _window2['default'].location;

  var successHandler = function successHandler() {
    _window2['default'].clearTimeout(abortTimeout);
    callback(null, request, request.response || request.responseText);
  };

  var errorHandler = function errorHandler(err) {
    _window2['default'].clearTimeout(abortTimeout);

    if (!err || typeof err === 'string') {
      err = new Error(err);
    }

    callback(err, request);
  };

  // Check if url is for another domain/origin
  // IE8 doesn't know location.origin, so we won't rely on it here
  var crossOrigin = urlInfo.protocol + urlInfo.host !== winLoc.protocol + winLoc.host;

  // XDomainRequest -- Use for IE if XMLHTTPRequest2 isn't available
  // 'withCredentials' is only available in XMLHTTPRequest2
  // Also XDomainRequest has a lot of gotchas, so only use if cross domain
  if (crossOrigin && _window2['default'].XDomainRequest && !('withCredentials' in request)) {
    request = new _window2['default'].XDomainRequest();
    request.onload = successHandler;
    request.onerror = errorHandler;
    // These blank handlers need to be set to fix ie9
    // http://cypressnorth.com/programming/internet-explorer-aborting-ajax-requests-fixed/
    request.onprogress = function () {};
    request.ontimeout = function () {};

    // XMLHTTPRequest
  } else {
    (function () {
      var fileUrl = urlInfo.protocol === 'file:' || winLoc.protocol === 'file:';

      request.onreadystatechange = function () {
        if (request.readyState === 4) {
          if (request.timedout) {
            return errorHandler('timeout');
          }

          if (request.status === 200 || fileUrl && request.status === 0) {
            successHandler();
          } else {
            errorHandler();
          }
        }
      };

      if (options.timeout) {
        abortTimeout = _window2['default'].setTimeout(function () {
          if (request.readyState !== 4) {
            request.timedout = true;
            request.abort();
          }
        }, options.timeout);
      }
    })();
  }

  // open the connection
  try {
    // Third arg is async, or ignored by XDomainRequest
    request.open(options.method || 'GET', options.uri, true);
  } catch (err) {
    return errorHandler(err);
  }

  // withCredentials only supported by XMLHttpRequest2
  if (options.withCredentials) {
    request.withCredentials = true;
  }

  if (options.responseType) {
    request.responseType = options.responseType;
  }

  // send the request
  try {
    request.send();
  } catch (err) {
    return errorHandler(err);
  }

  return request;
};

exports['default'] = xhr;
module.exports = exports['default'];

},{"./lib":46,"./util":70,"global/window":2}]},{},[71])(71)
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9ncnVudC1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvZ2xvYmFsL2RvY3VtZW50LmpzIiwibm9kZV9tb2R1bGVzL2dsb2JhbC93aW5kb3cuanMiLCJub2RlX21vZHVsZXMvZ3J1bnQtYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3Nlci1yZXNvbHZlL2VtcHR5LmpzIiwibm9kZV9tb2R1bGVzL3NhZmUtanNvbi1wYXJzZS90dXBsZS5qcyIsImJpZy1wbGF5LWJ1dHRvbi5qcyIsImJ1dHRvbi5qcyIsImNvbXBvbmVudC5qcyIsImNvbnRyb2wtYmFyL2NvbnRyb2wtYmFyLmpzIiwiY29udHJvbC1iYXIvZnVsbHNjcmVlbi10b2dnbGUuanMiLCJjb250cm9sLWJhci9saXZlLWRpc3BsYXkuanMiLCJjb250cm9sLWJhci9tdXRlLXRvZ2dsZS5qcyIsImNvbnRyb2wtYmFyL3BsYXktdG9nZ2xlLmpzIiwiY29udHJvbC1iYXIvcGxheWJhY2stcmF0ZS1tZW51L3BsYXliYWNrLXJhdGUtbWVudS1idXR0b24uanMiLCJjb250cm9sLWJhci9wbGF5YmFjay1yYXRlLW1lbnUvcGxheWJhY2stcmF0ZS1tZW51LWl0ZW0uanMiLCJjb250cm9sLWJhci9wcm9ncmVzcy1jb250cm9sL2xvYWQtcHJvZ3Jlc3MtYmFyLmpzIiwiY29udHJvbC1iYXIvcHJvZ3Jlc3MtY29udHJvbC9wbGF5LXByb2dyZXNzLWJhci5qcyIsImNvbnRyb2wtYmFyL3Byb2dyZXNzLWNvbnRyb2wvcHJvZ3Jlc3MtY29udHJvbC5qcyIsImNvbnRyb2wtYmFyL3Byb2dyZXNzLWNvbnRyb2wvc2Vlay1iYXIuanMiLCJjb250cm9sLWJhci9wcm9ncmVzcy1jb250cm9sL3NlZWstaGFuZGxlLmpzIiwiY29udHJvbC1iYXIvc3BhY2VyLWNvbnRyb2xzL2N1c3RvbS1jb250cm9sLXNwYWNlci5qcyIsImNvbnRyb2wtYmFyL3NwYWNlci1jb250cm9scy9zcGFjZXIuanMiLCJjb250cm9sLWJhci90ZXh0LXRyYWNrLWNvbnRyb2xzL2NhcHRpb24tc2V0dGluZ3MtbWVudS1pdGVtLmpzIiwiY29udHJvbC1iYXIvdGV4dC10cmFjay1jb250cm9scy9jYXB0aW9ucy1idXR0b24uanMiLCJjb250cm9sLWJhci90ZXh0LXRyYWNrLWNvbnRyb2xzL2NoYXB0ZXJzLWJ1dHRvbi5qcyIsImNvbnRyb2wtYmFyL3RleHQtdHJhY2stY29udHJvbHMvY2hhcHRlcnMtdHJhY2stbWVudS1pdGVtLmpzIiwiY29udHJvbC1iYXIvdGV4dC10cmFjay1jb250cm9scy9vZmYtdGV4dC10cmFjay1tZW51LWl0ZW0uanMiLCJjb250cm9sLWJhci90ZXh0LXRyYWNrLWNvbnRyb2xzL3N1YnRpdGxlcy1idXR0b24uanMiLCJjb250cm9sLWJhci90ZXh0LXRyYWNrLWNvbnRyb2xzL3RleHQtdHJhY2stYnV0dG9uLmpzIiwiY29udHJvbC1iYXIvdGV4dC10cmFjay1jb250cm9scy90ZXh0LXRyYWNrLW1lbnUtaXRlbS5qcyIsImNvbnRyb2wtYmFyL3RpbWUtY29udHJvbHMvY3VycmVudC10aW1lLWRpc3BsYXkuanMiLCJjb250cm9sLWJhci90aW1lLWNvbnRyb2xzL2R1cmF0aW9uLWRpc3BsYXkuanMiLCJjb250cm9sLWJhci90aW1lLWNvbnRyb2xzL3JlbWFpbmluZy10aW1lLWRpc3BsYXkuanMiLCJjb250cm9sLWJhci90aW1lLWNvbnRyb2xzL3RpbWUtZGl2aWRlci5qcyIsImNvbnRyb2wtYmFyL3ZvbHVtZS1jb250cm9sL3ZvbHVtZS1iYXIuanMiLCJjb250cm9sLWJhci92b2x1bWUtY29udHJvbC92b2x1bWUtY29udHJvbC5qcyIsImNvbnRyb2wtYmFyL3ZvbHVtZS1jb250cm9sL3ZvbHVtZS1oYW5kbGUuanMiLCJjb250cm9sLWJhci92b2x1bWUtY29udHJvbC92b2x1bWUtbGV2ZWwuanMiLCJjb250cm9sLWJhci92b2x1bWUtbWVudS1idXR0b24uanMiLCJjb3JlLW9iamVjdC5qcyIsImNvcmUuanMiLCJlcnJvci1kaXNwbGF5LmpzIiwiZXZlbnQtZW1pdHRlci5qcyIsImV2ZW50cy5qcyIsImV4dGVuZHMuanMiLCJmdWxsc2NyZWVuLWFwaS5qcyIsImxpYi5qcyIsImxvYWRpbmctc3Bpbm5lci5qcyIsIm1lZGlhLWVycm9yLmpzIiwibWVudS9tZW51LWJ1dHRvbi5qcyIsIm1lbnUvbWVudS1pdGVtLmpzIiwibWVudS9tZW51LmpzIiwib3B0aW9ucy5qcyIsInBsYXllci5qcyIsInBsdWdpbnMuanMiLCJwb3N0ZXItaW1hZ2UuanMiLCJzZXR1cC5qcyIsInNsaWRlci9zbGlkZXItaGFuZGxlLmpzIiwic2xpZGVyL3NsaWRlci5qcyIsInRlY2gvZmxhc2gtcnRtcC5qcyIsInRlY2gvZmxhc2guanMiLCJ0ZWNoL2h0bWw1LmpzIiwidGVjaC9sb2FkZXIuanMiLCJ0ZWNoL3RlY2guanMiLCJ0cmFja3MvdGV4dC10cmFjay1jdWUtbGlzdC5qcyIsInRyYWNrcy90ZXh0LXRyYWNrLWRpc3BsYXkuanMiLCJ0cmFja3MvdGV4dC10cmFjay1lbnVtcy5qcyIsInRyYWNrcy90ZXh0LXRyYWNrLWxpc3QuanMiLCJ0cmFja3MvdGV4dC10cmFjay1zZXR0aW5ncy5qcyIsInRyYWNrcy90ZXh0LXRyYWNrLmpzIiwidXRpbC5qcyIsInZpZGVvLmpzIiwieGhyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDVEE7O0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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QUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxhQUFhLENBQUMsd0JBQXdCLENBQUMsQ0FBQyxhQUFhLEdBQUcsQ0FBQyxDQUFDO0FBQ3BFLFVBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxhQUFhLENBQUMsd0JBQXdCLENBQUMsQ0FBQyxhQUFhLEdBQUcsQ0FBQyxDQUFDO0FBQ3BFLFVBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxhQUFhLENBQUMsd0JBQXdCLENBQUMsQ0FBQyxhQUFhLEdBQUcsQ0FBQyxDQUFDO0FBQ3BFLFVBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxhQUFhLENBQUMsNEJBQTRCLENBQUMsQ0FBQyxhQUFhLEdBQUcsQ0FBQyxDQUFDO0FBQ3hFLFVBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxhQUFhLENBQUMsMEJBQTBCLENBQUMsQ0FBQyxhQUFhLEdBQUcsQ0FBQyxDQUFDO0FBQ3RFLFVBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxhQUFhLENBQUMsOEJBQThCLENBQUMsQ0FBQyxhQUFhLEdBQUcsQ0FBQyxDQUFDO0FBQzFFLFVBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxhQUFhLENBQUMsd0JBQXdCLENBQUMsQ0FBQyxhQUFhLEdBQUcsQ0FBQyxDQUFDO0FBQ3BFLFVBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxhQUFhLENBQUMseUJBQXlCLENBQUMsQ0FBQyxhQUFhLEdBQUcsQ0FBQyxDQUFDO0FBQ3JFLFVBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxhQUFhLENBQUMsMEJBQTBCLENBQUMsQ0FBQyxhQUFhLEdBQUcsQ0FBQyxDQUFDO0FBQ3RFLFVBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztLQUN0QixDQUFDLENBQUMsQ0FBQzs7QUFFSixVQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxhQUFhLENBQUMsd0JBQXdCLENBQUMsRUFBRSxRQUFRLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7QUFDM0csVUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsYUFBYSxDQUFDLHdCQUF3QixDQUFDLEVBQUUsUUFBUSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO0FBQzNHLFVBQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGFBQWEsQ0FBQyx3QkFBd0IsQ0FBQyxFQUFFLFFBQVEsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztBQUMzRyxVQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxhQUFhLENBQUMsNEJBQTRCLENBQUMsRUFBRSxRQUFRLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7QUFDL0csVUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsYUFBYSxDQUFDLDBCQUEwQixDQUFDLEVBQUUsUUFBUSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO0FBQzdHLFVBQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGFBQWEsQ0FBQyw4QkFBOEIsQ0FBQyxFQUFFLFFBQVEsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztBQUNqSCxVQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxhQUFhLENBQUMsMEJBQTBCLENBQUMsRUFBRSxRQUFRLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7QUFDN0csVUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsYUFBYSxDQUFDLHdCQUF3QixDQUFDLEVBQUUsUUFBUSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO0FBQzNHLFVBQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGFBQWEsQ0FBQyx5QkFBeUIsQ0FBQyxFQUFFLFFBQVEsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQzs7QUFFNUcsUUFBSSxNQUFNLENBQUMsT0FBTyxFQUFFLHlCQUE0QixFQUFFO0FBQ2hELFVBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztLQUN4QjtHQUNGOztZQXJDRyxpQkFBaUI7O2VBQWpCLGlCQUFpQjs7V0F1Q2Isb0JBQUc7QUFDVCx3Q0F4Q0UsaUJBQWlCLDBDQXdDRyxLQUFLLEVBQUU7QUFDM0IsaUJBQVMsRUFBRSx3Q0FBd0M7QUFDbkQsaUJBQVMsRUFBRSwwQkFBMEIsRUFBRTtPQUN4QyxFQUFFO0tBQ0o7OztXQUVRLHFCQUFHO0FBQ1YsVUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDOztBQUVyQixVQUFNLFFBQVEsR0FBRyxzQkFBc0IsQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLHdCQUF3QixDQUFDLENBQUMsQ0FBQztBQUNwRixVQUFNLFVBQVUsR0FBRyxzQkFBc0IsQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLHlCQUF5QixDQUFDLENBQUMsQ0FBQztBQUN2RixVQUFNLE9BQU8sR0FBRyxzQkFBc0IsQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLHdCQUF3QixDQUFDLENBQUMsQ0FBQztBQUNuRixVQUFNLFdBQVcsR0FBRyxzQkFBc0IsQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLDRCQUE0QixDQUFDLENBQUMsQ0FBQztBQUMzRixVQUFNLE9BQU8sR0FBRyxzQkFBc0IsQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLHdCQUF3QixDQUFDLENBQUMsQ0FBQztBQUNuRixVQUFNLFNBQVMsR0FBRyxzQkFBc0IsQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLDBCQUEwQixDQUFDLENBQUMsQ0FBQztBQUN2RixVQUFNLFdBQVcsR0FBRyxzQkFBc0IsQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLHdCQUF3QixDQUFDLENBQUMsQ0FBQztBQUN2RixVQUFNLGFBQWEsR0FBRyxzQkFBc0IsQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLDhCQUE4QixDQUFDLENBQUMsQ0FBQztBQUMvRixVQUFNLFdBQVcsR0FBRyw4QkFBb0IsQ0FBQyxzQkFBc0IsQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLDRCQUE0QixDQUFDLENBQUMsQ0FBQyxDQUFDOztBQUVqSCxVQUFJLE1BQU0sR0FBRztBQUNYLDJCQUFxQixTQUFTO0FBQzlCLHFCQUFlLFdBQVc7QUFDMUIsdUJBQWlCLGFBQWE7QUFDOUIsbUJBQWEsUUFBUTtBQUNyQixvQkFBYyxVQUFVO0FBQ3hCLGVBQVMsT0FBTztBQUNoQix5QkFBbUIsT0FBTztBQUMxQixxQkFBZSxXQUFXO0FBQzFCLHFCQUFlLFdBQVc7T0FDM0IsQ0FBQztBQUNGLFdBQUssSUFBSSxLQUFJLElBQUksTUFBTSxFQUFFO0FBQ3ZCLFlBQUksTUFBTSxDQUFDLEtBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxNQUFNLENBQUMsS0FBSSxDQUFDLEtBQUssTUFBTSxJQUFLLEtBQUksS0FBSyxhQUFhLElBQUksTUFBTSxDQUFDLEtBQUksQ0FBQyxLQUFLLENBQUksQUFBQyxFQUFFO0FBQ3ZHLGlCQUFPLE1BQU0sQ0FBQyxLQUFJLENBQUMsQ0FBQztTQUNyQjtPQUNGO0FBQ0QsYUFBTyxNQUFNLENBQUM7S0FDZjs7O1dBRVEsbUJBQUMsTUFBTSxFQUFFO0FBQ2hCLFVBQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQzs7QUFFckIsdUJBQWlCLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyx3QkFBd0IsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNoRix1QkFBaUIsQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLHlCQUF5QixDQUFDLEVBQUUsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ2xGLHVCQUFpQixDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsd0JBQXdCLENBQUMsRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDNUUsdUJBQWlCLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyw0QkFBNEIsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUN0Rix1QkFBaUIsQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLHdCQUF3QixDQUFDLEVBQUUsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQ3RGLHVCQUFpQixDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsMEJBQTBCLENBQUMsRUFBRSxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUMxRix1QkFBaUIsQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLHdCQUF3QixDQUFDLEVBQUUsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQ2xGLHVCQUFpQixDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsOEJBQThCLENBQUMsRUFBRSxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUM7O0FBRTFGLFVBQUksV0FBVyxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUM7O0FBRXJDLFVBQUksV0FBVyxFQUFFO0FBQ2YsbUJBQVcsR0FBRyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO09BQ3RDOztBQUVELHVCQUFpQixDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsNEJBQTRCLENBQUMsRUFBRSxXQUFXLENBQUMsQ0FBQztLQUNoRjs7O1dBRWMsMkJBQUc7NEJBQ0ksNEJBQWUsb0JBQU8sWUFBWSxDQUFDLE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDOzs7O1VBQXJGLEdBQUc7VUFBRSxNQUFNOztBQUVoQixVQUFJLEdBQUcsRUFBRTtBQUNQLFdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO09BQ3BCOztBQUVELFVBQUksTUFBTSxFQUFFO0FBQ1YsWUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztPQUN4QjtLQUNGOzs7V0FFVyx3QkFBRztBQUNiLFVBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSx5QkFBNEIsRUFBRTtBQUN2RCxlQUFPO09BQ1I7O0FBRUQsVUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO0FBQzlCLFVBQUk7QUFDRixZQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRTtBQUN4Qiw4QkFBTyxZQUFZLENBQUMsT0FBTyxDQUFDLHlCQUF5QixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztTQUNoRixNQUFNO0FBQ0wsOEJBQU8sWUFBWSxDQUFDLFVBQVUsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1NBQzNEO09BQ0YsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFO0tBQ2Y7OztXQUVZLHlCQUFHO0FBQ2QsVUFBSSxTQUFTLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsa0JBQWtCLENBQUMsQ0FBQztBQUMxRCxVQUFJLFNBQVMsRUFBRTtBQUNiLGlCQUFTLENBQUMsYUFBYSxFQUFFLENBQUM7T0FDM0I7S0FDRjs7O1NBbklHLGlCQUFpQjs7O0FBdUl2Qix1QkFBVSxpQkFBaUIsQ0FBQyxtQkFBbUIsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDOztBQUVwRSxTQUFTLHNCQUFzQixDQUFDLE1BQU0sRUFBRTtBQUN0QyxNQUFJLGNBQWMsWUFBQSxDQUFDOztBQUVuQixNQUFJLE1BQU0sQ0FBQyxlQUFlLEVBQUU7QUFDMUIsa0JBQWMsR0FBRyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDO0dBQzVDLE1BQU0sSUFBSSxNQUFNLENBQUMsT0FBTyxFQUFFO0FBQ3pCLGtCQUFjLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0dBQy9EOztBQUVELFNBQU8sY0FBYyxDQUFDLEtBQUssQ0FBQztDQUM3Qjs7QUFFRCxTQUFTLGlCQUFpQixDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUU7QUFDeEMsTUFBSSxDQUFDLEtBQUssRUFBRTtBQUNWLFdBQU87R0FDUjs7QUFFRCxNQUFJLENBQUMsWUFBQSxDQUFDO0FBQ04sT0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUMxQyxRQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2pDLFFBQUksTUFBTSxDQUFDLEtBQUssS0FBSyxLQUFLLEVBQUU7QUFDMUIsWUFBTTtLQUNQO0dBQ0Y7O0FBRUQsUUFBTSxDQUFDLGFBQWEsR0FBRyxDQUFDLENBQUM7Q0FDMUI7O0FBRUQsU0FBUywwQkFBMEIsR0FBRztBQUNwQyxNQUFJLFFBQVEsay9KQStHSCxDQUFDOztBQUVSLFNBQU8sUUFBUSxDQUFDO0NBQ25COztxQkFFYyxpQkFBaUI7Ozs7Ozs7Ozs7OztnQ0NoU0gsdUJBQXVCOzs7O3NCQUMvQixRQUFROztJQUFqQixHQUFHOzt1QkFDZ0Isb0JBQW9COztJQUF2QyxhQUFhOzs0QkFDQSxrQkFBa0I7Ozs7d0JBQ3RCLGlCQUFpQjs7OztzQkFDbkIsZUFBZTs7OzttQkFDbEIsV0FBVzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF3QjNCLElBQUksU0FBUzs7Ozs7Ozs7OztHQUFHLFlBQXFCO01BQVosT0FBTyxnQ0FBQyxFQUFFOztBQUNqQyxNQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRTtBQUNqQixVQUFNLElBQUksS0FBSyxDQUFDLDBCQUEwQixDQUFDLENBQUM7R0FDN0M7O0FBRUQsTUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDO0FBQ2QsTUFBSSxHQUFHLENBQUMsTUFBTSxFQUFFO0FBQ2QsTUFBRSxHQUFHLHNCQUFTLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQzs7QUFFdEMsU0FBSyxJQUFJLElBQUksSUFBSSxTQUFTLENBQUMsU0FBUyxFQUFFO0FBQ3BDLFFBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ3RDO0dBQ0Y7O0FBRUQsSUFBRSxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDOztBQUV4QixNQUFJLElBQUksR0FBRyxhQUFhLENBQUMsYUFBYSxDQUFDLE9BQU8sS0FBUSxDQUFDLElBQUksVUFBVSxDQUFDO0FBQ3RFLE1BQUksSUFBSSxHQUFHLGFBQWEsQ0FBQyxhQUFhLENBQUMsT0FBTyxLQUFRLENBQUMsSUFBSSxXQUFXLENBQUM7QUFDdkUsTUFBSSxLQUFLLEdBQUcsT0FBTyxNQUFTLElBQUksRUFBRSxDQUFDO0FBQ25DLE1BQUksUUFBUSxHQUFHLE9BQU8sU0FBWSxJQUFJLE9BQU8sUUFBVyxJQUFJLEVBQUUsQ0FBQztBQUMvRCxNQUFJLEVBQUUsR0FBRyxPQUFPLEdBQU0sSUFBSSxpQkFBaUIsR0FBRyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7O0FBRXpELE1BQUksSUFBSSxLQUFLLFVBQVUsSUFBSSxJQUFJLEtBQUssVUFBVSxFQUFFO0FBQzlDLFFBQUksR0FBRyxRQUFRLENBQUM7R0FDakI7O0FBRUQsSUFBRSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7QUFDZCxJQUFFLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQzs7QUFFcEIsTUFBSSxJQUFJLEdBQUcsa0NBQXFCLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMxQyxNQUFJLFVBQVUsR0FBRyxrQ0FBcUIsRUFBRSxDQUFDLFdBQVcsQ0FBQyxDQUFDOztBQUV0RCxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUM7QUFDcEIsTUFBSSxpQkFBaUIsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxZQUFXO0FBQzlDLFFBQUksV0FBYyxDQUFDO0FBQ25CLFFBQUksT0FBTyxFQUFFO0FBQ1gsVUFBSSxRQUFXLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDN0IsYUFBTyxHQUFHLEtBQUssQ0FBQztLQUNqQjtHQUNGLENBQUMsQ0FBQztBQUNILE1BQUksSUFBSSxLQUFLLFVBQVUsRUFBRTtBQUN2QixNQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztHQUM5Qzs7QUFFRCxRQUFNLENBQUMsY0FBYyxDQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUU7QUFDaEMsT0FBRyxFQUFFLGVBQVc7QUFDZCxhQUFPLElBQUksQ0FBQztLQUNiO0FBQ0QsT0FBRyxFQUFFLFFBQVEsQ0FBQyxTQUFTO0dBQ3hCLENBQUMsQ0FBQzs7QUFFSCxRQUFNLENBQUMsY0FBYyxDQUFDLEVBQUUsRUFBRSxPQUFPLEVBQUU7QUFDakMsT0FBRyxFQUFFLGVBQVc7QUFDZCxhQUFPLEtBQUssQ0FBQztLQUNkO0FBQ0QsT0FBRyxFQUFFLFFBQVEsQ0FBQyxTQUFTO0dBQ3hCLENBQUMsQ0FBQzs7QUFFSCxRQUFNLENBQUMsY0FBYyxDQUFDLEVBQUUsRUFBRSxVQUFVLEVBQUU7QUFDcEMsT0FBRyxFQUFFLGVBQVc7QUFDZCxhQUFPLFFBQVEsQ0FBQztLQUNqQjtBQUNELE9BQUcsRUFBRSxRQUFRLENBQUMsU0FBUztHQUN4QixDQUFDLENBQUM7O0FBRUgsUUFBTSxDQUFDLGNBQWMsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFO0FBQzlCLE9BQUcsRUFBRSxlQUFXO0FBQ2QsYUFBTyxFQUFFLENBQUM7S0FDWDtBQUNELE9BQUcsRUFBRSxRQUFRLENBQUMsU0FBUztHQUN4QixDQUFDLENBQUM7O0FBRUgsUUFBTSxDQUFDLGNBQWMsQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFO0FBQ2hDLE9BQUcsRUFBRSxlQUFXO0FBQ2QsYUFBTyxJQUFJLENBQUM7S0FDYjtBQUNELE9BQUcsRUFBRSxhQUFTLE9BQU8sRUFBRTtBQUNyQixVQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsRUFBRTtBQUN6QyxlQUFPO09BQ1I7QUFDRCxVQUFJLEdBQUcsT0FBTyxDQUFDO0FBQ2YsVUFBSSxJQUFJLEtBQUssU0FBUyxFQUFFO0FBQ3RCLFlBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO09BQ2hEO0FBQ0QsVUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztLQUM1QjtHQUNGLENBQUMsQ0FBQzs7QUFFSCxRQUFNLENBQUMsY0FBYyxDQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUU7QUFDaEMsT0FBRyxFQUFFLGVBQVc7QUFDZCxVQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRTtBQUNqQixlQUFPLElBQUksQ0FBQztPQUNiOztBQUVELGFBQU8sSUFBSSxDQUFDO0tBQ2I7QUFDRCxPQUFHLEVBQUUsUUFBUSxDQUFDLFNBQVM7R0FDeEIsQ0FBQyxDQUFDOztBQUVILFFBQU0sQ0FBQyxjQUFjLENBQUMsRUFBRSxFQUFFLFlBQVksRUFBRTtBQUN0QyxPQUFHLEVBQUUsZUFBVztBQUNkLFVBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFO0FBQ2pCLGVBQU8sSUFBSSxDQUFDO09BQ2I7O0FBRUQsVUFBSSxJQUFJLEtBQVEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO0FBQzdCLGVBQU8sVUFBVSxDQUFDO09BQ25COztBQUVELFVBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDbEMsVUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDOztBQUVoQixXQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxLQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDbkQsWUFBSSxHQUFHLEdBQUcsSUFBSSxLQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDMUIsWUFBSSxHQUFHLFVBQWEsSUFBSSxFQUFFLElBQUksR0FBRyxRQUFXLElBQUksRUFBRSxFQUFFO0FBQ2xELGdCQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ2xCLE1BQU0sSUFBSSxHQUFHLFVBQWEsS0FBSyxHQUFHLFFBQVcsSUFBSSxHQUFHLFVBQWEsSUFBSSxFQUFFLElBQUksR0FBRyxVQUFhLEdBQUcsR0FBRyxJQUFJLEVBQUUsRUFBRTtBQUN4RyxnQkFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNsQjtPQUNGOztBQUVELGFBQU8sR0FBRyxLQUFLLENBQUM7O0FBRWhCLFVBQUksTUFBTSxDQUFDLE1BQU0sS0FBSyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRTtBQUM3QyxlQUFPLEdBQUcsSUFBSSxDQUFDO09BQ2hCLE1BQU07QUFDTCxhQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUN0QyxjQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtBQUNwRCxtQkFBTyxHQUFHLElBQUksQ0FBQztXQUNoQjtTQUNGO09BQ0Y7O0FBRUQsVUFBSSxDQUFDLFdBQVcsR0FBRyxNQUFNLENBQUM7QUFDMUIsZ0JBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDOztBQUV0QyxhQUFPLFVBQVUsQ0FBQztLQUNuQjtBQUNELE9BQUcsRUFBRSxRQUFRLENBQUMsU0FBUztHQUN4QixDQUFDLENBQUM7O0FBRUgsTUFBSSxPQUFPLENBQUMsR0FBRyxFQUFFO0FBQ2YsYUFBUyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7R0FDNUIsTUFBTTtBQUNMLE1BQUUsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO0dBQ25COztBQUVELE1BQUksR0FBRyxDQUFDLE1BQU0sRUFBRTtBQUNkLFdBQU8sRUFBRSxDQUFDO0dBQ1g7Q0FDRixDQUFBLENBQUM7O0FBRUYsU0FBUyxDQUFDLFNBQVMsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQywwQkFBYSxTQUFTLENBQUMsQ0FBQztBQUM3RCxTQUFTLENBQUMsU0FBUyxDQUFDLFdBQVcsR0FBRyxTQUFTLENBQUM7Ozs7O0FBSzVDLFNBQVMsQ0FBQyxTQUFTLENBQUMsY0FBYyxHQUFHO0FBQ25DLGFBQWEsV0FBVztDQUN6QixDQUFDOztBQUVGLFNBQVMsQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLFVBQVMsR0FBRyxFQUFFO0FBQ3pDLE1BQUksTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUM7O0FBRXJDLE1BQUksTUFBTSxFQUFFO0FBQ1YsU0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDdEMsVUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxFQUFFO0FBQ3RCLGNBQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7T0FDMUI7S0FDRjtHQUNGOztBQUVELE1BQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3JCLE1BQUksS0FBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDbkMsQ0FBQzs7QUFFRixTQUFTLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxVQUFTLFNBQVMsRUFBRTtBQUNsRCxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUM7O0FBRXBCLE9BQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQ2pELFFBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDeEIsUUFBSSxHQUFHLEtBQUssU0FBUyxFQUFFO0FBQ3JCLFVBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUN4QixhQUFPLEdBQUcsSUFBSSxDQUFDO0tBQ2hCO0dBQ0Y7O0FBRUQsTUFBSSxPQUFPLEVBQUU7QUFDWCxRQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7R0FDaEM7Q0FDRixDQUFDOzs7OztBQUtGLElBQUksU0FBUzs7Ozs7Ozs7OztHQUFHLFVBQVMsVUFBVSxFQUFFLEtBQUssRUFBRTtBQUMxQyxNQUFJLE9BQU8sMEJBQWdCLEtBQUssVUFBVSxFQUFFOztBQUUxQyxXQUFPLG9CQUFPLFVBQVUsQ0FBQyxZQUFXO0FBQ2xDLGVBQVMsQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDLENBQUM7S0FDOUIsRUFBRSxFQUFFLENBQUMsQ0FBQztHQUNSOztBQUVELE1BQUksTUFBTSxHQUFHLElBQUksMEJBQWdCLE9BQVUsc0JBQVMseUJBQWUsRUFBRSwwQkFBZ0IsY0FBaUIsRUFBRSxDQUFDLENBQUM7O0FBRTFHLFFBQU0sTUFBUyxHQUFHLFVBQVMsR0FBRyxFQUFFO0FBQzlCLFNBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7R0FDbkIsQ0FBQztBQUNGLFFBQU0sZUFBa0IsR0FBRyxVQUFTLEtBQUssRUFBRTtBQUN6QyxPQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztHQUN0QixDQUFDOztBQUVGLFFBQU0sTUFBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQzVCLFFBQU0sTUFBUyxFQUFFLENBQUM7Q0FDbkIsQ0FBQSxDQUFDOztBQUVGLElBQUksU0FBUyxHQUFHLG1CQUFTLEdBQUcsRUFBRSxLQUFLLEVBQUU7QUFDbkMsbUJBQUksR0FBRyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFVBQVMsR0FBRyxFQUFFLFFBQVEsRUFBRSxZQUFZLEVBQUM7QUFDM0QsUUFBSSxHQUFHLEVBQUU7QUFDUCxhQUFPLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQzNCOztBQUdELFNBQUssQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO0FBQ3JCLGFBQVMsQ0FBQyxZQUFZLEVBQUUsS0FBSyxDQUFDLENBQUM7R0FDaEMsQ0FBQyxDQUFDLENBQUM7Q0FDTCxDQUFDOztBQUVGLElBQUksT0FBTyxHQUFHLGlCQUFTLGFBQWEsRUFBRSxTQUFTLEVBQUU7QUFDL0MsTUFBSSxJQUFJLElBQUksSUFBSSxFQUFFO0FBQ2hCLFVBQU0sSUFBSSxTQUFTLENBQUMsK0JBQStCLENBQUMsQ0FBQztHQUN0RDs7QUFFRCxNQUFJLENBQUMsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7O0FBRXJCLE1BQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDOztBQUV6QixNQUFJLEdBQUcsS0FBSyxDQUFDLEVBQUU7QUFDYixXQUFPLENBQUMsQ0FBQyxDQUFDO0dBQ1g7O0FBRUQsTUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLElBQUksQ0FBQyxDQUFDOztBQUV4QixNQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUSxFQUFFO0FBQzVCLEtBQUMsR0FBRyxDQUFDLENBQUM7R0FDUDs7QUFFRCxNQUFJLENBQUMsSUFBSSxHQUFHLEVBQUU7QUFDWixXQUFPLENBQUMsQ0FBQyxDQUFDO0dBQ1g7O0FBRUQsTUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQzs7QUFFcEQsU0FBTyxDQUFDLEdBQUcsR0FBRyxFQUFFO0FBQ2QsUUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxhQUFhLEVBQUU7QUFDcEMsYUFBTyxDQUFDLENBQUM7S0FDVjtBQUNELEtBQUMsRUFBRSxDQUFDO0dBQ0w7QUFDRCxTQUFPLENBQUMsQ0FBQyxDQUFDO0NBQ1gsQ0FBQzs7cUJBRWEsU0FBUzs7Ozs7Ozs7OzttQkNyU0osT0FBTzs7Ozs7OztBQU8zQixJQUFJLElBQUksR0FBRyxFQUFFLENBQUM7Ozs7Ozs7Ozs7QUFVZCxJQUFJLFlBQVk7Ozs7Ozs7Ozs7R0FBRyxVQUFTLElBQUksRUFBRSxJQUFJLEVBQUM7QUFDckMsTUFBSSxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQzs7OztBQUlwQixNQUFJLEdBQUcsS0F0QkEsR0FBRyxDQXNCQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7O0FBRXRCLE9BQUssR0FBRyxJQUFJLElBQUksRUFBQztBQUNmLFFBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsRUFBRTtBQUM1QixVQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2pCLFVBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7OztBQUdqQixVQUFJLEtBOUJELEdBQUcsQ0E4QkUsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLEtBOUJ0QixHQUFHLENBOEJ1QixPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7QUFDMUMsWUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLFlBQVksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7T0FDdEMsTUFBTTtBQUNMLFlBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7T0FDdkI7S0FDRjtHQUNGO0FBQ0QsU0FBTyxJQUFJLENBQUM7Q0FDYixDQUFBLENBQUM7O1FBRU8sWUFBWSxHQUFaLFlBQVk7Ozs7Ozs7Ozs7O3dCQ3hDQSxpQkFBaUI7Ozs7MkJBRWQsa0JBQWtCOzs7O3FCQUN4QixpQkFBaUI7Ozs7cUJBQ2pCLGlCQUFpQjs7OzsyQkFDWCxtQkFBbUI7Ozs7Z0NBQ2QsZ0NBQWdDOzs7OzhCQUNsQyxzQkFBc0I7Ozs7NkJBQ3ZCLHNCQUFzQjs7OzswQkFDekIsOEJBQThCOzs7OzRCQUM1QixvQkFBb0I7Ozs7dUJBRXpCLFFBQVE7Ozs7c0JBQ0wsU0FBUzs7SUFBcEIsS0FBSzs7eUJBQ0ssYUFBYTs7Ozt1QkFDZCxPQUFPOztJQUFoQixHQUFHOzt1QkFDTyxXQUFXOztJQUFyQixJQUFJOztzQkFDRyxVQUFVOzs7O3lCQUNQLGNBQWM7Ozs7c0JBQ2pCLGNBQWM7Ozs7dUJBQ2IsY0FBYzs7OztBQUVsQyxJQUFJLE9BQU8sZ0JBQWdCLEtBQUssV0FBVyxFQUFFO0FBQzNDLHdCQUFTLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNoQyx3QkFBUyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDaEMsd0JBQVMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0NBQ2pDOzs7O0FBSUQsS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUMsdUJBQVUsQ0FBQzs7QUFFbkMscUJBQVEsWUFBWSxHQUFHLHVCQUFVLFlBQVksQ0FBQztBQUM5QyxxQkFBUSxpQkFBaUIsR0FBRyx1QkFBVSxpQkFBaUIsQ0FBQzs7OztBQUl4RCxxQkFBUSxhQUFhLEdBQUcsR0FBRyxDQUFDLGFBQWEsQ0FBQztBQUMxQyxxQkFBUSxJQUFJLEdBQUcsSUFBSSxDQUFDOzs7QUFHcEIscUJBQVEsT0FBTyxHQUFHLG9CQUFPLE9BQU8sQ0FBQzs7QUFFakMsK0JBQWUseUJBQVksQ0FBQzs7QUFFNUIscUJBQVEsZ0JBQWdCLEdBQUc7O0NBQWEsQ0FBQztBQUN6QyxxQkFBUSxnQkFBZ0IsR0FBRyxVQUFTLFVBQVUsRUFBRTtBQUM5QyxLQUFHLENBQUMsSUFBSSxDQUFDLFlBQVksdUJBQVUsVUFBVSxDQUFDLENBQUM7Q0FDNUMsQ0FBQzs7QUFFRixxQkFBUSxNQUFNLHNCQUFTLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztzQkNsREUsUUFBUTs7SUFBdEIsUUFBUTs7dUJBQ0MsT0FBTzs7SUFBaEIsR0FBRzs7c0JBQ0ksZUFBZTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWdDbEMsSUFBSSxHQUFHLEdBQUcsYUFBUyxPQUFPLEVBQUUsUUFBUSxFQUFDO0FBQ25DLE1BQUksWUFBWSxZQUFBLENBQUM7OztBQUdqQixNQUFJLE9BQU8sT0FBTyxLQUFLLFFBQVEsRUFBRTtBQUMvQixXQUFPLEdBQUc7QUFDUixTQUFHLEVBQUUsT0FBTztLQUNiLENBQUM7R0FDSDs7O0FBR0QsVUFBUSxDQUFDLFlBQVksQ0FBQztBQUNwQixVQUFNLEVBQUUsS0FBSztBQUNiLFdBQU8sRUFBRSxFQUFFLEdBQUcsSUFBSTtHQUNuQixFQUFFLE9BQU8sQ0FBQyxDQUFDOztBQUVaLFVBQVEsR0FBRyxRQUFRLElBQUksWUFBVSxFQUFFLENBQUM7O0FBRXBDLE1BQUksR0FBRyxHQUFHLG9CQUFPLGNBQWMsQ0FBQzs7QUFFaEMsTUFBSSxPQUFPLEdBQUcsS0FBSyxXQUFXLEVBQUU7O0FBRTlCLE9BQUcsR0FBRyxZQUFZO0FBQ2hCLFVBQUk7QUFBRSxlQUFPLElBQUksb0JBQU8sYUFBYSxDQUFDLG9CQUFvQixDQUFDLENBQUM7T0FBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUU7QUFDM0UsVUFBSTtBQUFFLGVBQU8sSUFBSSxvQkFBTyxhQUFhLENBQUMsb0JBQW9CLENBQUMsQ0FBQztPQUFFLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRTtBQUMzRSxVQUFJO0FBQUUsZUFBTyxJQUFJLG9CQUFPLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO09BQUUsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFO0FBQ3ZFLFlBQU0sSUFBSSxLQUFLLENBQUMsK0NBQStDLENBQUMsQ0FBQztLQUNsRSxDQUFDO0dBQ0g7O0FBRUQsTUFBSSxPQUFPLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQzs7QUFFeEIsU0FBTyxDQUFDLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDOztBQUUxQixNQUFJLE9BQU8sR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN4QyxNQUFJLE1BQU0sR0FBRyxvQkFBTyxRQUFRLENBQUM7O0FBRTdCLE1BQUksY0FBYyxHQUFHLDBCQUFVO0FBQzdCLHdCQUFPLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUNsQyxZQUFRLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsUUFBUSxJQUFJLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztHQUNuRSxDQUFDOztBQUVGLE1BQUksWUFBWSxHQUFHLHNCQUFTLEdBQUcsRUFBQztBQUM5Qix3QkFBTyxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUM7O0FBRWxDLFFBQUksQ0FBQyxHQUFHLElBQUksT0FBTyxHQUFHLEtBQUssUUFBUSxFQUFFO0FBQ25DLFNBQUcsR0FBRyxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUN0Qjs7QUFFRCxZQUFRLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0dBQ3hCLENBQUM7Ozs7QUFJRixNQUFNLFdBQVcsR0FBRyxBQUFDLE9BQU8sQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLElBQUksS0FBTyxNQUFNLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxJQUFJLEFBQUMsQ0FBQzs7Ozs7QUFLMUYsTUFBSSxXQUFXLElBQUksb0JBQU8sY0FBYyxJQUFJLEVBQUUsaUJBQWlCLElBQUksT0FBTyxDQUFBLEFBQUMsRUFBRTtBQUMzRSxXQUFPLEdBQUcsSUFBSSxvQkFBTyxjQUFjLEVBQUUsQ0FBQztBQUN0QyxXQUFPLENBQUMsTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUNoQyxXQUFPLENBQUMsT0FBTyxHQUFHLFlBQVksQ0FBQzs7O0FBRy9CLFdBQU8sQ0FBQyxVQUFVLEdBQUcsWUFBVSxFQUFFLENBQUM7QUFDbEMsV0FBTyxDQUFDLFNBQVMsR0FBRyxZQUFVLEVBQUUsQ0FBQzs7O0dBR2xDLE1BQU07O0FBQ0wsVUFBTSxPQUFPLEdBQUksT0FBTyxDQUFDLFFBQVEsS0FBSyxPQUFPLElBQUksTUFBTSxDQUFDLFFBQVEsS0FBSyxPQUFPLEFBQUMsQ0FBQzs7QUFFOUUsYUFBTyxDQUFDLGtCQUFrQixHQUFHLFlBQVc7QUFDdEMsWUFBSSxPQUFPLENBQUMsVUFBVSxLQUFLLENBQUMsRUFBRTtBQUM1QixjQUFJLE9BQU8sQ0FBQyxRQUFRLEVBQUU7QUFDcEIsbUJBQU8sWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1dBQ2hDOztBQUVELGNBQUksT0FBTyxDQUFDLE1BQU0sS0FBSyxHQUFHLElBQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO0FBQzdELDBCQUFjLEVBQUUsQ0FBQztXQUNsQixNQUFNO0FBQ0wsd0JBQVksRUFBRSxDQUFDO1dBQ2hCO1NBQ0Y7T0FDRixDQUFDOztBQUVGLFVBQUksT0FBTyxDQUFDLE9BQU8sRUFBRTtBQUNuQixvQkFBWSxHQUFHLG9CQUFPLFVBQVUsQ0FBQyxZQUFXO0FBQzFDLGNBQUksT0FBTyxDQUFDLFVBQVUsS0FBSyxDQUFDLEVBQUU7QUFDNUIsbUJBQU8sQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO0FBQ3hCLG1CQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7V0FDakI7U0FDRixFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztPQUNyQjs7R0FDRjs7O0FBR0QsTUFBSTs7QUFFRixXQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLElBQUksS0FBSyxFQUFFLE9BQU8sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7R0FDMUQsQ0FBQyxPQUFNLEdBQUcsRUFBRTtBQUNYLFdBQU8sWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0dBQzFCOzs7QUFHRCxNQUFHLE9BQU8sQ0FBQyxlQUFlLEVBQUU7QUFDMUIsV0FBTyxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7R0FDaEM7O0FBRUQsTUFBSSxPQUFPLENBQUMsWUFBWSxFQUFFO0FBQ3hCLFdBQU8sQ0FBQyxZQUFZLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQztHQUM3Qzs7O0FBR0QsTUFBSTtBQUNGLFdBQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztHQUNoQixDQUFDLE9BQU0sR0FBRyxFQUFFO0FBQ1gsV0FBTyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUM7R0FDMUI7O0FBRUQsU0FBTyxPQUFPLENBQUM7Q0FDaEIsQ0FBQzs7cUJBRWEsR0FBRyIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJ2YXIgdG9wTGV2ZWwgPSB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6XG4gICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB7fVxudmFyIG1pbkRvYyA9IHJlcXVpcmUoJ21pbi1kb2N1bWVudCcpO1xuXG5pZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gZG9jdW1lbnQ7XG59IGVsc2Uge1xuICAgIHZhciBkb2NjeSA9IHRvcExldmVsWydfX0dMT0JBTF9ET0NVTUVOVF9DQUNIRUA0J107XG5cbiAgICBpZiAoIWRvY2N5KSB7XG4gICAgICAgIGRvY2N5ID0gdG9wTGV2ZWxbJ19fR0xPQkFMX0RPQ1VNRU5UX0NBQ0hFQDQnXSA9IG1pbkRvYztcbiAgICB9XG5cbiAgICBtb2R1bGUuZXhwb3J0cyA9IGRvY2N5O1xufVxuIiwiaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHdpbmRvdztcbn0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsO1xufSBlbHNlIGlmICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIil7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBzZWxmO1xufSBlbHNlIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHt9O1xufVxuIixudWxsLCJtb2R1bGUuZXhwb3J0cyA9IFNhZmVQYXJzZVR1cGxlXG5cbmZ1bmN0aW9uIFNhZmVQYXJzZVR1cGxlKG9iaiwgcmV2aXZlcikge1xuICAgIHZhciBqc29uXG4gICAgdmFyIGVycm9yID0gbnVsbFxuXG4gICAgdHJ5IHtcbiAgICAgICAganNvbiA9IEpTT04ucGFyc2Uob2JqLCByZXZpdmVyKVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBlcnJvciA9IGVyclxuICAgIH1cblxuICAgIHJldHVybiBbZXJyb3IsIGpzb25dXG59XG4iLCJpbXBvcnQgQnV0dG9uIGZyb20gJy4vYnV0dG9uJztcblxuLyogQmlnIFBsYXkgQnV0dG9uXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLyoqXG4gKiBJbml0aWFsIHBsYXkgYnV0dG9uLiBTaG93cyBiZWZvcmUgdGhlIHZpZGVvIGhhcyBwbGF5ZWQuIFRoZSBoaWRpbmcgb2YgdGhlXG4gKiBiaWcgcGxheSBidXR0b24gaXMgZG9uZSB2aWEgQ1NTIGFuZCBwbGF5ZXIgc3RhdGVzLlxuICogQHBhcmFtIHtQbGF5ZXJ8T2JqZWN0fSBwbGF5ZXJcbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0aW9uc1xuICogQGNsYXNzXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuY2xhc3MgQmlnUGxheUJ1dHRvbiBleHRlbmRzIEJ1dHRvbiB7XG5cbiAgY3JlYXRlRWwoKSB7XG4gICAgcmV0dXJuIHN1cGVyLmNyZWF0ZUVsKCdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICd2anMtYmlnLXBsYXktYnV0dG9uJyxcbiAgICAgIGlubmVySFRNTDogJzxzcGFuIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvc3Bhbj4nLFxuICAgICAgJ2FyaWEtbGFiZWwnOiAncGxheSB2aWRlbydcbiAgICB9KTtcbiAgfVxuXG4gIGhhbmRsZUNsaWNrKCkge1xuICAgIHRoaXMucGxheWVyXy5wbGF5KCk7XG4gIH1cblxufVxuXG5CdXR0b24ucmVnaXN0ZXJDb21wb25lbnQoJ0JpZ1BsYXlCdXR0b24nLCBCaWdQbGF5QnV0dG9uKTtcbmV4cG9ydCBkZWZhdWx0IEJpZ1BsYXlCdXR0b247XG4iLCJpbXBvcnQgQ29tcG9uZW50IGZyb20gJy4vY29tcG9uZW50JztcbmltcG9ydCAqIGFzIExpYiBmcm9tICcuL2xpYic7XG5pbXBvcnQgKiBhcyBFdmVudHMgZnJvbSAnLi9ldmVudHMnO1xuaW1wb3J0IGRvY3VtZW50IGZyb20gJ2dsb2JhbC9kb2N1bWVudCc7XG5cbi8qIEJ1dHRvbiAtIEJhc2UgY2xhc3MgZm9yIGFsbCBidXR0b25zXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLyoqXG4gKiBCYXNlIGNsYXNzIGZvciBhbGwgYnV0dG9uc1xuICogQHBhcmFtIHtQbGF5ZXJ8T2JqZWN0fSBwbGF5ZXJcbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0aW9uc1xuICogQGNsYXNzXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuY2xhc3MgQnV0dG9uIGV4dGVuZHMgQ29tcG9uZW50IHtcblxuICBjb25zdHJ1Y3RvcihwbGF5ZXIsIG9wdGlvbnMpIHtcbiAgICBzdXBlcihwbGF5ZXIsIG9wdGlvbnMpO1xuXG4gICAgdGhpcy5lbWl0VGFwRXZlbnRzKCk7XG5cbiAgICB0aGlzLm9uKCd0YXAnLCB0aGlzLmhhbmRsZUNsaWNrKTtcbiAgICB0aGlzLm9uKCdjbGljaycsIHRoaXMuaGFuZGxlQ2xpY2spO1xuICAgIHRoaXMub24oJ2ZvY3VzJywgdGhpcy5oYW5kbGVGb2N1cyk7XG4gICAgdGhpcy5vbignYmx1cicsIHRoaXMuaGFuZGxlQmx1cik7XG4gIH1cblxuICBjcmVhdGVFbCh0eXBlLCBwcm9wcykge1xuICAgIC8vIEFkZCBzdGFuZGFyZCBBcmlhIGFuZCBUYWJpbmRleCBpbmZvXG4gICAgcHJvcHMgPSBMaWIub2JqLm1lcmdlKHtcbiAgICAgIGNsYXNzTmFtZTogdGhpcy5idWlsZENTU0NsYXNzKCksXG4gICAgICAncm9sZSc6ICdidXR0b24nLFxuICAgICAgJ2FyaWEtbGl2ZSc6ICdwb2xpdGUnLCAvLyBsZXQgdGhlIHNjcmVlbiByZWFkZXIgdXNlciBrbm93IHRoYXQgdGhlIHRleHQgb2YgdGhlIGJ1dHRvbiBtYXkgY2hhbmdlXG4gICAgICB0YWJJbmRleDogMFxuICAgIH0sIHByb3BzKTtcblxuICAgIGxldCBlbCA9IHN1cGVyLmNyZWF0ZUVsKHR5cGUsIHByb3BzKTtcblxuICAgIC8vIGlmIGlubmVySFRNTCBoYXNuJ3QgYmVlbiBvdmVycmlkZGVuIChiaWdQbGF5QnV0dG9uKSwgYWRkIGNvbnRlbnQgZWxlbWVudHNcbiAgICBpZiAoIXByb3BzLmlubmVySFRNTCkge1xuICAgICAgdGhpcy5jb250ZW50RWxfID0gTGliLmNyZWF0ZUVsKCdkaXYnLCB7XG4gICAgICAgIGNsYXNzTmFtZTogJ3Zqcy1jb250cm9sLWNvbnRlbnQnXG4gICAgICB9KTtcblxuICAgICAgdGhpcy5jb250cm9sVGV4dF8gPSBMaWIuY3JlYXRlRWwoJ3NwYW4nLCB7XG4gICAgICAgIGNsYXNzTmFtZTogJ3Zqcy1jb250cm9sLXRleHQnLFxuICAgICAgICBpbm5lckhUTUw6IHRoaXMubG9jYWxpemUodGhpcy5idXR0b25UZXh0KSB8fCAnTmVlZCBUZXh0J1xuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuY29udGVudEVsXy5hcHBlbmRDaGlsZCh0aGlzLmNvbnRyb2xUZXh0Xyk7XG4gICAgICBlbC5hcHBlbmRDaGlsZCh0aGlzLmNvbnRlbnRFbF8pO1xuICAgIH1cblxuICAgIHJldHVybiBlbDtcbiAgfVxuXG4gIGJ1aWxkQ1NTQ2xhc3MoKSB7XG4gICAgcmV0dXJuIGB2anMtY29udHJvbCB2anMtYnV0dG9uICR7c3VwZXIuYnVpbGRDU1NDbGFzcygpfWA7XG4gIH1cblxuICAvLyBDbGljayAtIE92ZXJyaWRlIHdpdGggc3BlY2lmaWMgZnVuY3Rpb25hbGl0eSBmb3IgYnV0dG9uXG4gIGhhbmRsZUNsaWNrKCkge31cblxuICAvLyBGb2N1cyAtIEFkZCBrZXlib2FyZCBmdW5jdGlvbmFsaXR5IHRvIGVsZW1lbnRcbiAgaGFuZGxlRm9jdXMoKSB7XG4gICAgRXZlbnRzLm9uKGRvY3VtZW50LCAna2V5ZG93bicsIExpYi5iaW5kKHRoaXMsIHRoaXMuaGFuZGxlS2V5UHJlc3MpKTtcbiAgfVxuXG4gIC8vIEtleVByZXNzIChkb2N1bWVudCBsZXZlbCkgLSBUcmlnZ2VyIGNsaWNrIHdoZW4ga2V5cyBhcmUgcHJlc3NlZFxuICBoYW5kbGVLZXlQcmVzcyhldmVudCkge1xuICAgIC8vIENoZWNrIGZvciBzcGFjZSBiYXIgKDMyKSBvciBlbnRlciAoMTMpIGtleXNcbiAgICBpZiAoZXZlbnQud2hpY2ggPT09IDMyIHx8IGV2ZW50LndoaWNoID09PSAxMykge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMuaGFuZGxlQ2xpY2soKTtcbiAgICB9XG4gIH1cblxuICAvLyBCbHVyIC0gUmVtb3ZlIGtleWJvYXJkIHRyaWdnZXJzXG4gIGhhbmRsZUJsdXIoKSB7XG4gICAgRXZlbnRzLm9mZihkb2N1bWVudCwgJ2tleWRvd24nLCBMaWIuYmluZCh0aGlzLCB0aGlzLmhhbmRsZUtleVByZXNzKSk7XG4gIH1cblxufVxuXG5cbkNvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudCgnQnV0dG9uJywgQnV0dG9uKTtcbmV4cG9ydCBkZWZhdWx0IEJ1dHRvbjtcbiIsIi8qKlxuICogQGZpbGVvdmVydmlldyBQbGF5ZXIgQ29tcG9uZW50IC0gQmFzZSBjbGFzcyBmb3IgYWxsIFVJIG9iamVjdHNcbiAqXG4gKi9cblxuaW1wb3J0ICogYXMgTGliIGZyb20gJy4vbGliLmpzJztcbmltcG9ydCAqIGFzIFZqc1V0aWwgZnJvbSAnLi91dGlsLmpzJztcbmltcG9ydCAqIGFzIEV2ZW50cyBmcm9tICcuL2V2ZW50cy5qcyc7XG5pbXBvcnQgd2luZG93IGZyb20gJ2dsb2JhbC93aW5kb3cnO1xuXG4vKipcbiAqIEJhc2UgVUkgQ29tcG9uZW50IGNsYXNzXG4gKlxuICogQ29tcG9uZW50cyBhcmUgZW1iZWRkYWJsZSBVSSBvYmplY3RzIHRoYXQgYXJlIHJlcHJlc2VudGVkIGJ5IGJvdGggYVxuICogamF2YXNjcmlwdCBvYmplY3QgYW5kIGFuIGVsZW1lbnQgaW4gdGhlIERPTS4gVGhleSBjYW4gYmUgY2hpbGRyZW4gb2Ygb3RoZXJcbiAqIGNvbXBvbmVudHMsIGFuZCBjYW4gaGF2ZSBtYW55IGNoaWxkcmVuIHRoZW1zZWx2ZXMuXG4gKlxuICogICAgIC8vIGFkZGluZyBhIGJ1dHRvbiB0byB0aGUgcGxheWVyXG4gKiAgICAgdmFyIGJ1dHRvbiA9IHBsYXllci5hZGRDaGlsZCgnYnV0dG9uJyk7XG4gKiAgICAgYnV0dG9uLmVsKCk7IC8vIC0+IGJ1dHRvbiBlbGVtZW50XG4gKlxuICogICAgIDxkaXYgY2xhc3M9XCJ2aWRlby1qc1wiPlxuICogICAgICAgPGRpdiBjbGFzcz1cInZqcy1idXR0b25cIj5CdXR0b248L2Rpdj5cbiAqICAgICA8L2Rpdj5cbiAqXG4gKiBDb21wb25lbnRzIGFyZSBhbHNvIGV2ZW50IGVtaXR0ZXJzLlxuICpcbiAqICAgICBidXR0b24ub24oJ2NsaWNrJywgZnVuY3Rpb24oKXtcbiAqICAgICAgIGNvbnNvbGUubG9nKCdCdXR0b24gQ2xpY2tlZCEnKTtcbiAqICAgICB9KTtcbiAqXG4gKiAgICAgYnV0dG9uLnRyaWdnZXIoJ2N1c3RvbWV2ZW50Jyk7XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBsYXllciAgTWFpbiBQbGF5ZXJcbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0aW9uc1xuICogQGNsYXNzXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuY2xhc3MgQ29tcG9uZW50IHtcblxuICBjb25zdHJ1Y3RvcihwbGF5ZXIsIG9wdGlvbnMsIHJlYWR5KSB7XG5cbiAgICAvLyBUaGUgY29tcG9uZW50IG1pZ2h0IGJlIHRoZSBwbGF5ZXIgaXRzZWxmIGFuZCB3ZSBjYW4ndCBwYXNzIGB0aGlzYCB0byBzdXBlclxuICAgIGlmICghcGxheWVyICYmIHRoaXMucGxheSkge1xuICAgICAgdGhpcy5wbGF5ZXJfID0gcGxheWVyID0gdGhpczsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnBsYXllcl8gPSBwbGF5ZXI7XG4gICAgfVxuXG4gICAgLy8gTWFrZSBhIGNvcHkgb2YgcHJvdG90eXBlLm9wdGlvbnNfIHRvIHByb3RlY3QgYWdhaW5zdCBvdmVycmlkaW5nIGdsb2JhbCBkZWZhdWx0c1xuICAgIHRoaXMub3B0aW9uc18gPSBMaWIub2JqLmNvcHkodGhpcy5vcHRpb25zXyk7XG5cbiAgICAvLyBVcGRhdGVkIG9wdGlvbnMgd2l0aCBzdXBwbGllZCBvcHRpb25zXG4gICAgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyhvcHRpb25zKTtcblxuICAgIC8vIEdldCBJRCBmcm9tIG9wdGlvbnMgb3Igb3B0aW9ucyBlbGVtZW50IGlmIG9uZSBpcyBzdXBwbGllZFxuICAgIHRoaXMuaWRfID0gb3B0aW9ucy5pZCB8fCAob3B0aW9ucy5lbCAmJiBvcHRpb25zLmVsLmlkKTtcblxuICAgIC8vIElmIHRoZXJlIHdhcyBubyBJRCBmcm9tIHRoZSBvcHRpb25zLCBnZW5lcmF0ZSBvbmVcbiAgICBpZiAoIXRoaXMuaWRfKSB7XG4gICAgICAvLyBEb24ndCByZXF1aXJlIHRoZSBwbGF5ZXIgSUQgZnVuY3Rpb24gaW4gdGhlIGNhc2Ugb2YgbW9jayBwbGF5ZXJzXG4gICAgICBsZXQgaWQgPSBwbGF5ZXIgJiYgcGxheWVyLmlkICYmIHBsYXllci5pZCgpIHx8ICdub19wbGF5ZXInO1xuICAgICAgdGhpcy5pZF8gPSBgJHtpZH1fY29tcG9uZW50XyR7TGliLmd1aWQrK31gO1xuICAgIH1cblxuICAgIHRoaXMubmFtZV8gPSBvcHRpb25zLm5hbWUgfHwgbnVsbDtcblxuICAgIC8vIENyZWF0ZSBlbGVtZW50IGlmIG9uZSB3YXNuJ3QgcHJvdmlkZWQgaW4gb3B0aW9uc1xuICAgIGlmIChvcHRpb25zLmVsKSB7XG4gICAgICB0aGlzLmVsXyA9IG9wdGlvbnMuZWw7XG4gICAgfSBlbHNlIGlmIChvcHRpb25zLmNyZWF0ZUVsICE9PSBmYWxzZSkge1xuICAgICAgdGhpcy5lbF8gPSB0aGlzLmNyZWF0ZUVsKCk7XG4gICAgfVxuXG4gICAgdGhpcy5jaGlsZHJlbl8gPSBbXTtcbiAgICB0aGlzLmNoaWxkSW5kZXhfID0ge307XG4gICAgdGhpcy5jaGlsZE5hbWVJbmRleF8gPSB7fTtcblxuICAgIC8vIEFkZCBhbnkgY2hpbGQgY29tcG9uZW50cyBpbiBvcHRpb25zXG4gICAgaWYgKG9wdGlvbnMuaW5pdENoaWxkcmVuICE9PSBmYWxzZSkge1xuICAgICAgdGhpcy5pbml0Q2hpbGRyZW4oKTtcbiAgICB9XG5cbiAgICB0aGlzLnJlYWR5KHJlYWR5KTtcbiAgICAvLyBEb24ndCB3YW50IHRvIHRyaWdnZXIgcmVhZHkgaGVyZSBvciBpdCB3aWxsIGJlZm9yZSBpbml0IGlzIGFjdHVhbGx5XG4gICAgLy8gZmluaXNoZWQgZm9yIGFsbCBjaGlsZHJlbiB0aGF0IHJ1biB0aGlzIGNvbnN0cnVjdG9yXG5cbiAgICBpZiAob3B0aW9ucy5yZXBvcnRUb3VjaEFjdGl2aXR5ICE9PSBmYWxzZSkge1xuICAgICAgdGhpcy5lbmFibGVUb3VjaEFjdGl2aXR5KCk7XG4gICAgfVxuICB9XG5cbiAgLy8gVGVtcCBmb3IgRVM2IGNsYXNzIHRyYW5zaXRpb24sIHJlbW92ZSBiZWZvcmUgNS4wXG4gIGluaXQoKSB7XG4gICAgLy8gY29uc29sZS5sb2coJ2luaXQgY2FsbGVkIG9uIENvbXBvbmVudCcpO1xuICAgIENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIERpc3Bvc2Ugb2YgdGhlIGNvbXBvbmVudCBhbmQgYWxsIGNoaWxkIGNvbXBvbmVudHNcbiAgICovXG4gIGRpc3Bvc2UoKSB7XG4gICAgdGhpcy50cmlnZ2VyKHsgdHlwZTogJ2Rpc3Bvc2UnLCBidWJibGVzOiBmYWxzZSB9KTtcblxuICAgIC8vIERpc3Bvc2UgYWxsIGNoaWxkcmVuLlxuICAgIGlmICh0aGlzLmNoaWxkcmVuXykge1xuICAgICAgZm9yIChsZXQgaSA9IHRoaXMuY2hpbGRyZW5fLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIGlmICh0aGlzLmNoaWxkcmVuX1tpXS5kaXNwb3NlKSB7XG4gICAgICAgICAgdGhpcy5jaGlsZHJlbl9baV0uZGlzcG9zZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRGVsZXRlIGNoaWxkIHJlZmVyZW5jZXNcbiAgICB0aGlzLmNoaWxkcmVuXyA9IG51bGw7XG4gICAgdGhpcy5jaGlsZEluZGV4XyA9IG51bGw7XG4gICAgdGhpcy5jaGlsZE5hbWVJbmRleF8gPSBudWxsO1xuXG4gICAgLy8gUmVtb3ZlIGFsbCBldmVudCBsaXN0ZW5lcnMuXG4gICAgdGhpcy5vZmYoKTtcblxuICAgIC8vIFJlbW92ZSBlbGVtZW50IGZyb20gRE9NXG4gICAgaWYgKHRoaXMuZWxfLnBhcmVudE5vZGUpIHtcbiAgICAgIHRoaXMuZWxfLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5lbF8pO1xuICAgIH1cblxuICAgIExpYi5yZW1vdmVEYXRhKHRoaXMuZWxfKTtcbiAgICB0aGlzLmVsXyA9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHRoZSBjb21wb25lbnQncyBwbGF5ZXJcbiAgICpcbiAgICogQHJldHVybiB7UGxheWVyfVxuICAgKi9cbiAgcGxheWVyKCkge1xuICAgIHJldHVybiB0aGlzLnBsYXllcl87XG4gIH1cblxuICAvKipcbiAgICogRGVlcCBtZXJnZSBvZiBvcHRpb25zIG9iamVjdHNcbiAgICpcbiAgICogV2hlbmV2ZXIgYSBwcm9wZXJ0eSBpcyBhbiBvYmplY3Qgb24gYm90aCBvcHRpb25zIG9iamVjdHNcbiAgICogdGhlIHR3byBwcm9wZXJ0aWVzIHdpbGwgYmUgbWVyZ2VkIHVzaW5nIExpYi5vYmouZGVlcE1lcmdlLlxuICAgKlxuICAgKiBUaGlzIGlzIHVzZWQgZm9yIG1lcmdpbmcgb3B0aW9ucyBmb3IgY2hpbGQgY29tcG9uZW50cy4gV2VcbiAgICogd2FudCBpdCB0byBiZSBlYXN5IHRvIG92ZXJyaWRlIGluZGl2aWR1YWwgb3B0aW9ucyBvbiBhIGNoaWxkXG4gICAqIGNvbXBvbmVudCB3aXRob3V0IGhhdmluZyB0byByZXdyaXRlIGFsbCB0aGUgb3RoZXIgZGVmYXVsdCBvcHRpb25zLlxuICAgKlxuICAgKiAgICAgUGFyZW50LnByb3RvdHlwZS5vcHRpb25zXyA9IHtcbiAgICogICAgICAgY2hpbGRyZW46IHtcbiAgICogICAgICAgICAnY2hpbGRPbmUnOiB7ICdmb28nOiAnYmFyJywgJ2FzZGYnOiAnZmRzYScgfSxcbiAgICogICAgICAgICAnY2hpbGRUd28nOiB7fSxcbiAgICogICAgICAgICAnY2hpbGRUaHJlZSc6IHt9XG4gICAqICAgICAgIH1cbiAgICogICAgIH1cbiAgICogICAgIG5ld09wdGlvbnMgPSB7XG4gICAqICAgICAgIGNoaWxkcmVuOiB7XG4gICAqICAgICAgICAgJ2NoaWxkT25lJzogeyAnZm9vJzogJ2JheicsICdhYmMnOiAnMTIzJyB9XG4gICAqICAgICAgICAgJ2NoaWxkVHdvJzogbnVsbCxcbiAgICogICAgICAgICAnY2hpbGRGb3VyJzoge31cbiAgICogICAgICAgfVxuICAgKiAgICAgfVxuICAgKlxuICAgKiAgICAgdGhpcy5vcHRpb25zKG5ld09wdGlvbnMpO1xuICAgKlxuICAgKiBSRVNVTFRcbiAgICpcbiAgICogICAgIHtcbiAgICogICAgICAgY2hpbGRyZW46IHtcbiAgICogICAgICAgICAnY2hpbGRPbmUnOiB7ICdmb28nOiAnYmF6JywgJ2FzZGYnOiAnZmRzYScsICdhYmMnOiAnMTIzJyB9LFxuICAgKiAgICAgICAgICdjaGlsZFR3byc6IG51bGwsIC8vIERpc2FibGVkLiBXb24ndCBiZSBpbml0aWFsaXplZC5cbiAgICogICAgICAgICAnY2hpbGRUaHJlZSc6IHt9LFxuICAgKiAgICAgICAgICdjaGlsZEZvdXInOiB7fVxuICAgKiAgICAgICB9XG4gICAqICAgICB9XG4gICAqXG4gICAqIEBwYXJhbSAge09iamVjdH0gb2JqIE9iamVjdCBvZiBuZXcgb3B0aW9uIHZhbHVlc1xuICAgKiBAcmV0dXJuIHtPYmplY3R9ICAgICBBIE5FVyBvYmplY3Qgb2YgdGhpcy5vcHRpb25zXyBhbmQgb2JqIG1lcmdlZFxuICAgKi9cbiAgb3B0aW9ucyhvYmopIHtcbiAgICBpZiAoIW9iaikge1xuICAgICAgcmV0dXJuIHRoaXMub3B0aW9uc187XG4gICAgfVxuXG4gICAgdGhpcy5vcHRpb25zXyA9IFZqc1V0aWwubWVyZ2VPcHRpb25zKHRoaXMub3B0aW9uc18sIG9iaik7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9uc187XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBjb21wb25lbnQncyBET00gZWxlbWVudFxuICAgKlxuICAgKiAgICAgdmFyIGRvbUVsID0gbXlDb21wb25lbnQuZWwoKTtcbiAgICpcbiAgICogQHJldHVybiB7RWxlbWVudH1cbiAgICovXG4gIGVsKCkge1xuICAgIHJldHVybiB0aGlzLmVsXztcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIGNvbXBvbmVudCdzIERPTSBlbGVtZW50XG4gICAqXG4gICAqIEBwYXJhbSAge1N0cmluZz19IHRhZ05hbWUgIEVsZW1lbnQncyBub2RlIHR5cGUuIGUuZy4gJ2RpdidcbiAgICogQHBhcmFtICB7T2JqZWN0PX0gYXR0cmlidXRlcyBBbiBvYmplY3Qgb2YgZWxlbWVudCBhdHRyaWJ1dGVzIHRoYXQgc2hvdWxkIGJlIHNldCBvbiB0aGUgZWxlbWVudFxuICAgKiBAcmV0dXJuIHtFbGVtZW50fVxuICAgKi9cbiAgY3JlYXRlRWwodGFnTmFtZSwgYXR0cmlidXRlcykge1xuICAgIHJldHVybiBMaWIuY3JlYXRlRWwodGFnTmFtZSwgYXR0cmlidXRlcyk7XG4gIH1cblxuICBsb2NhbGl6ZShzdHJpbmcpIHtcbiAgICBsZXQgbGFuZyA9IHRoaXMucGxheWVyXy5sYW5ndWFnZSgpO1xuICAgIGxldCBsYW5ndWFnZXMgPSB0aGlzLnBsYXllcl8ubGFuZ3VhZ2VzKCk7XG5cbiAgICBpZiAobGFuZ3VhZ2VzICYmIGxhbmd1YWdlc1tsYW5nXSAmJiBsYW5ndWFnZXNbbGFuZ11bc3RyaW5nXSkge1xuICAgICAgcmV0dXJuIGxhbmd1YWdlc1tsYW5nXVtzdHJpbmddO1xuICAgIH1cblxuICAgIHJldHVybiBzdHJpbmc7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHRoZSBjb21wb25lbnQncyBET00gZWxlbWVudCB3aGVyZSBjaGlsZHJlbiBhcmUgaW5zZXJ0ZWQuXG4gICAqIFdpbGwgZWl0aGVyIGJlIHRoZSBzYW1lIGFzIGVsKCkgb3IgYSBuZXcgZWxlbWVudCBkZWZpbmVkIGluIGNyZWF0ZUVsKCkuXG4gICAqXG4gICAqIEByZXR1cm4ge0VsZW1lbnR9XG4gICAqL1xuICBjb250ZW50RWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGVudEVsXyB8fCB0aGlzLmVsXztcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGNvbXBvbmVudCdzIElEXG4gICAqXG4gICAqICAgICB2YXIgaWQgPSBteUNvbXBvbmVudC5pZCgpO1xuICAgKlxuICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAqL1xuICBpZCgpIHtcbiAgICByZXR1cm4gdGhpcy5pZF87XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBjb21wb25lbnQncyBuYW1lLiBUaGUgbmFtZSBpcyBvZnRlbiB1c2VkIHRvIHJlZmVyZW5jZSB0aGUgY29tcG9uZW50LlxuICAgKlxuICAgKiAgICAgdmFyIG5hbWUgPSBteUNvbXBvbmVudC5uYW1lKCk7XG4gICAqXG4gICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICovXG4gIG5hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMubmFtZV87XG4gIH1cblxuICAvKipcbiAgICogR2V0IGFuIGFycmF5IG9mIGFsbCBjaGlsZCBjb21wb25lbnRzXG4gICAqXG4gICAqICAgICB2YXIga2lkcyA9IG15Q29tcG9uZW50LmNoaWxkcmVuKCk7XG4gICAqXG4gICAqIEByZXR1cm4ge0FycmF5fSBUaGUgY2hpbGRyZW5cbiAgICovXG4gIGNoaWxkcmVuKCkge1xuICAgIHJldHVybiB0aGlzLmNoaWxkcmVuXztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgY2hpbGQgY29tcG9uZW50IHdpdGggdGhlIHByb3ZpZGVkIElEXG4gICAqXG4gICAqIEByZXR1cm4ge0NvbXBvbmVudH1cbiAgICovXG4gIGdldENoaWxkQnlJZChpZCkge1xuICAgIHJldHVybiB0aGlzLmNoaWxkSW5kZXhfW2lkXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgY2hpbGQgY29tcG9uZW50IHdpdGggdGhlIHByb3ZpZGVkIG5hbWVcbiAgICpcbiAgICogQHJldHVybiB7Q29tcG9uZW50fVxuICAgKi9cbiAgZ2V0Q2hpbGQobmFtZSkge1xuICAgIHJldHVybiB0aGlzLmNoaWxkTmFtZUluZGV4X1tuYW1lXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGEgY2hpbGQgY29tcG9uZW50IGluc2lkZSB0aGlzIGNvbXBvbmVudFxuICAgKlxuICAgKiAgICAgbXlDb21wb25lbnQuZWwoKTtcbiAgICogICAgIC8vIC0+IDxkaXYgY2xhc3M9J215LWNvbXBvbmVudCc+PC9kaXY+XG4gICAqICAgICBteUNvbXBvbmVudC5jaGlsZHJlbigpO1xuICAgKiAgICAgLy8gW2VtcHR5IGFycmF5XVxuICAgKlxuICAgKiAgICAgdmFyIG15QnV0dG9uID0gbXlDb21wb25lbnQuYWRkQ2hpbGQoJ015QnV0dG9uJyk7XG4gICAqICAgICAvLyAtPiA8ZGl2IGNsYXNzPSdteS1jb21wb25lbnQnPjxkaXYgY2xhc3M9XCJteS1idXR0b25cIj5teUJ1dHRvbjxkaXY+PC9kaXY+XG4gICAqICAgICAvLyAtPiBteUJ1dHRvbiA9PT0gbXlDb21vbmVudC5jaGlsZHJlbigpWzBdO1xuICAgKlxuICAgKiBQYXNzIGluIG9wdGlvbnMgZm9yIGNoaWxkIGNvbnN0cnVjdG9ycyBhbmQgb3B0aW9ucyBmb3IgY2hpbGRyZW4gb2YgdGhlIGNoaWxkXG4gICAqXG4gICAqICAgICB2YXIgbXlCdXR0b24gPSBteUNvbXBvbmVudC5hZGRDaGlsZCgnTXlCdXR0b24nLCB7XG4gICAqICAgICAgIHRleHQ6ICdQcmVzcyBNZScsXG4gICAqICAgICAgIGNoaWxkcmVuOiB7XG4gICAqICAgICAgICAgYnV0dG9uQ2hpbGRFeGFtcGxlOiB7XG4gICAqICAgICAgICAgICBidXR0b25DaGlsZE9wdGlvbjogdHJ1ZVxuICAgKiAgICAgICAgIH1cbiAgICogICAgICAgfVxuICAgKiAgICAgfSk7XG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfENvbXBvbmVudH0gY2hpbGQgVGhlIGNsYXNzIG5hbWUgb3IgaW5zdGFuY2Ugb2YgYSBjaGlsZCB0byBhZGRcbiAgICogQHBhcmFtIHtPYmplY3Q9fSBvcHRpb25zIE9wdGlvbnMsIGluY2x1ZGluZyBvcHRpb25zIHRvIGJlIHBhc3NlZCB0byBjaGlsZHJlbiBvZiB0aGUgY2hpbGQuXG4gICAqIEByZXR1cm4ge0NvbXBvbmVudH0gVGhlIGNoaWxkIGNvbXBvbmVudCAoY3JlYXRlZCBieSB0aGlzIHByb2Nlc3MgaWYgYSBzdHJpbmcgd2FzIHVzZWQpXG4gICAqIEBzdXBwcmVzcyB7YWNjZXNzQ29udHJvbHN8Y2hlY2tSZWdFeHB8Y2hlY2tUeXBlc3xjaGVja1ZhcnN8Y29uc3R8Y29uc3RhbnRQcm9wZXJ0eXxkZXByZWNhdGVkfGR1cGxpY2F0ZXxlczVTdHJpY3R8ZmlsZW92ZXJ2aWV3VGFnc3xnbG9iYWxUaGlzfGludmFsaWRDYXN0c3xtaXNzaW5nUHJvcGVydGllc3xub25TdGFuZGFyZEpzRG9jc3xzdHJpY3RNb2R1bGVEZXBDaGVja3x1bmRlZmluZWROYW1lc3x1bmRlZmluZWRWYXJzfHVua25vd25EZWZpbmVzfHVzZWxlc3NDb2RlfHZpc2liaWxpdHl9XG4gICAqL1xuICBhZGRDaGlsZChjaGlsZCwgb3B0aW9ucz17fSkge1xuICAgIGxldCBjb21wb25lbnQ7XG4gICAgbGV0IGNvbXBvbmVudE5hbWU7XG5cbiAgICAvLyBJZiBjaGlsZCBpcyBhIHN0cmluZywgY3JlYXRlIG50IHdpdGggb3B0aW9uc1xuICAgIGlmICh0eXBlb2YgY2hpbGQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBjb21wb25lbnROYW1lID0gY2hpbGQ7XG5cbiAgICAgIC8vIE9wdGlvbnMgY2FuIGFsc28gYmUgc3BlY2lmaWVkIGFzIGEgYm9vbGVhbiwgc28gY29udmVydCB0byBhbiBlbXB0eSBvYmplY3QgaWYgZmFsc2UuXG4gICAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgICAgfVxuXG4gICAgICAvLyBTYW1lIGFzIGFib3ZlLCBidXQgdHJ1ZSBpcyBkZXByZWNhdGVkIHNvIHNob3cgYSB3YXJuaW5nLlxuICAgICAgaWYgKG9wdGlvbnMgPT09IHRydWUpIHtcbiAgICAgICAgTGliLmxvZy53YXJuKCdJbml0aWFsaXppbmcgYSBjaGlsZCBjb21wb25lbnQgd2l0aCBgdHJ1ZWAgaXMgZGVwcmVjYXRlZC4gQ2hpbGRyZW4gc2hvdWxkIGJlIGRlZmluZWQgaW4gYW4gYXJyYXkgd2hlbiBwb3NzaWJsZSwgYnV0IGlmIG5lY2Vzc2FyeSB1c2UgYW4gb2JqZWN0IGluc3RlYWQgb2YgYHRydWVgLicpO1xuICAgICAgICBvcHRpb25zID0ge307XG4gICAgICB9XG5cbiAgICAgIC8vIElmIG5vIGNvbXBvbmVudENsYXNzIGluIG9wdGlvbnMsIGFzc3VtZSBjb21wb25lbnRDbGFzcyBpcyB0aGUgbmFtZSBsb3dlcmNhc2VkXG4gICAgICAvLyAoZS5nLiBwbGF5QnV0dG9uKVxuICAgICAgbGV0IGNvbXBvbmVudENsYXNzTmFtZSA9IG9wdGlvbnMuY29tcG9uZW50Q2xhc3MgfHwgTGliLmNhcGl0YWxpemUoY29tcG9uZW50TmFtZSk7XG5cbiAgICAgIC8vIFNldCBuYW1lIHRocm91Z2ggb3B0aW9uc1xuICAgICAgb3B0aW9ucy5uYW1lID0gY29tcG9uZW50TmFtZTtcblxuICAgICAgLy8gQ3JlYXRlIGEgbmV3IG9iamVjdCAmIGVsZW1lbnQgZm9yIHRoaXMgY29udHJvbHMgc2V0XG4gICAgICAvLyBJZiB0aGVyZSdzIG5vIC5wbGF5ZXJfLCB0aGlzIGlzIGEgcGxheWVyXG4gICAgICBsZXQgQ29tcG9uZW50Q2xhc3MgPSBDb21wb25lbnQuZ2V0Q29tcG9uZW50KGNvbXBvbmVudENsYXNzTmFtZSk7XG5cbiAgICAgIGNvbXBvbmVudCA9IG5ldyBDb21wb25lbnRDbGFzcyh0aGlzLnBsYXllcl8gfHwgdGhpcywgb3B0aW9ucyk7XG5cbiAgICAvLyBjaGlsZCBpcyBhIGNvbXBvbmVudCBpbnN0YW5jZVxuICAgIH0gZWxzZSB7XG4gICAgICBjb21wb25lbnQgPSBjaGlsZDtcbiAgICB9XG5cbiAgICB0aGlzLmNoaWxkcmVuXy5wdXNoKGNvbXBvbmVudCk7XG5cbiAgICBpZiAodHlwZW9mIGNvbXBvbmVudC5pZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhpcy5jaGlsZEluZGV4X1tjb21wb25lbnQuaWQoKV0gPSBjb21wb25lbnQ7XG4gICAgfVxuXG4gICAgLy8gSWYgYSBuYW1lIHdhc24ndCB1c2VkIHRvIGNyZWF0ZSB0aGUgY29tcG9uZW50LCBjaGVjayBpZiB3ZSBjYW4gdXNlIHRoZVxuICAgIC8vIG5hbWUgZnVuY3Rpb24gb2YgdGhlIGNvbXBvbmVudFxuICAgIGNvbXBvbmVudE5hbWUgPSBjb21wb25lbnROYW1lIHx8IChjb21wb25lbnQubmFtZSAmJiBjb21wb25lbnQubmFtZSgpKTtcblxuICAgIGlmIChjb21wb25lbnROYW1lKSB7XG4gICAgICB0aGlzLmNoaWxkTmFtZUluZGV4X1tjb21wb25lbnROYW1lXSA9IGNvbXBvbmVudDtcbiAgICB9XG5cbiAgICAvLyBBZGQgdGhlIFVJIG9iamVjdCdzIGVsZW1lbnQgdG8gdGhlIGNvbnRhaW5lciBkaXYgKGJveClcbiAgICAvLyBIYXZpbmcgYW4gZWxlbWVudCBpcyBub3QgcmVxdWlyZWRcbiAgICBpZiAodHlwZW9mIGNvbXBvbmVudC5lbCA9PT0gJ2Z1bmN0aW9uJyAmJiBjb21wb25lbnQuZWwoKSkge1xuICAgICAgdGhpcy5jb250ZW50RWwoKS5hcHBlbmRDaGlsZChjb21wb25lbnQuZWwoKSk7XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIHNvIGl0IGNhbiBzdG9yZWQgb24gcGFyZW50IG9iamVjdCBpZiBkZXNpcmVkLlxuICAgIHJldHVybiBjb21wb25lbnQ7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGEgY2hpbGQgY29tcG9uZW50IGZyb20gdGhpcyBjb21wb25lbnQncyBsaXN0IG9mIGNoaWxkcmVuLCBhbmQgdGhlXG4gICAqIGNoaWxkIGNvbXBvbmVudCdzIGVsZW1lbnQgZnJvbSB0aGlzIGNvbXBvbmVudCdzIGVsZW1lbnRcbiAgICpcbiAgICogQHBhcmFtICB7Q29tcG9uZW50fSBjb21wb25lbnQgQ29tcG9uZW50IHRvIHJlbW92ZVxuICAgKi9cbiAgcmVtb3ZlQ2hpbGQoY29tcG9uZW50KSB7XG4gICAgaWYgKHR5cGVvZiBjb21wb25lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBjb21wb25lbnQgPSB0aGlzLmdldENoaWxkKGNvbXBvbmVudCk7XG4gICAgfVxuXG4gICAgaWYgKCFjb21wb25lbnQgfHwgIXRoaXMuY2hpbGRyZW5fKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IGNoaWxkRm91bmQgPSBmYWxzZTtcblxuICAgIGZvciAobGV0IGkgPSB0aGlzLmNoaWxkcmVuXy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgaWYgKHRoaXMuY2hpbGRyZW5fW2ldID09PSBjb21wb25lbnQpIHtcbiAgICAgICAgY2hpbGRGb3VuZCA9IHRydWU7XG4gICAgICAgIHRoaXMuY2hpbGRyZW5fLnNwbGljZShpLCAxKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFjaGlsZEZvdW5kKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5jaGlsZEluZGV4X1tjb21wb25lbnQuaWQoKV0gPSBudWxsO1xuICAgIHRoaXMuY2hpbGROYW1lSW5kZXhfW2NvbXBvbmVudC5uYW1lKCldID0gbnVsbDtcblxuICAgIGxldCBjb21wRWwgPSBjb21wb25lbnQuZWwoKTtcblxuICAgIGlmIChjb21wRWwgJiYgY29tcEVsLnBhcmVudE5vZGUgPT09IHRoaXMuY29udGVudEVsKCkpIHtcbiAgICAgIHRoaXMuY29udGVudEVsKCkucmVtb3ZlQ2hpbGQoY29tcG9uZW50LmVsKCkpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYW5kIGluaXRpYWxpemUgZGVmYXVsdCBjaGlsZCBjb21wb25lbnRzIGZyb20gb3B0aW9uc1xuICAgKlxuICAgKiAgICAgLy8gd2hlbiBhbiBpbnN0YW5jZSBvZiBNeUNvbXBvbmVudCBpcyBjcmVhdGVkLCBhbGwgY2hpbGRyZW4gaW4gb3B0aW9uc1xuICAgKiAgICAgLy8gd2lsbCBiZSBhZGRlZCB0byB0aGUgaW5zdGFuY2UgYnkgdGhlaXIgbmFtZSBzdHJpbmdzIGFuZCBvcHRpb25zXG4gICAqICAgICBNeUNvbXBvbmVudC5wcm90b3R5cGUub3B0aW9uc18uY2hpbGRyZW4gPSB7XG4gICAqICAgICAgIG15Q2hpbGRDb21wb25lbnQ6IHtcbiAgICogICAgICAgICBteUNoaWxkT3B0aW9uOiB0cnVlXG4gICAqICAgICAgIH1cbiAgICogICAgIH1cbiAgICpcbiAgICogICAgIC8vIE9yIHdoZW4gY3JlYXRpbmcgdGhlIGNvbXBvbmVudFxuICAgKiAgICAgdmFyIG15Q29tcCA9IG5ldyBNeUNvbXBvbmVudChwbGF5ZXIsIHtcbiAgICogICAgICAgY2hpbGRyZW46IHtcbiAgICogICAgICAgICBteUNoaWxkQ29tcG9uZW50OiB7XG4gICAqICAgICAgICAgICBteUNoaWxkT3B0aW9uOiB0cnVlXG4gICAqICAgICAgICAgfVxuICAgKiAgICAgICB9XG4gICAqICAgICB9KTtcbiAgICpcbiAgICogVGhlIGNoaWxkcmVuIG9wdGlvbiBjYW4gYWxzbyBiZSBhbiBBcnJheSBvZiBjaGlsZCBuYW1lcyBvclxuICAgKiBjaGlsZCBvcHRpb25zIG9iamVjdHMgKHRoYXQgYWxzbyBpbmNsdWRlIGEgJ25hbWUnIGtleSkuXG4gICAqXG4gICAqICAgICB2YXIgbXlDb21wID0gbmV3IE15Q29tcG9uZW50KHBsYXllciwge1xuICAgKiAgICAgICBjaGlsZHJlbjogW1xuICAgKiAgICAgICAgICdidXR0b24nLFxuICAgKiAgICAgICAgIHtcbiAgICogICAgICAgICAgIG5hbWU6ICdidXR0b24nLFxuICAgKiAgICAgICAgICAgc29tZU90aGVyT3B0aW9uOiB0cnVlXG4gICAqICAgICAgICAgfVxuICAgKiAgICAgICBdXG4gICAqICAgICB9KTtcbiAgICpcbiAgICovXG4gIGluaXRDaGlsZHJlbigpIHtcbiAgICBsZXQgY2hpbGRyZW4gPSB0aGlzLm9wdGlvbnNfLmNoaWxkcmVuO1xuXG4gICAgaWYgKGNoaWxkcmVuKSB7XG4gICAgICAvLyBgdGhpc2AgaXMgYHBhcmVudGBcbiAgICAgIGxldCBwYXJlbnRPcHRpb25zID0gdGhpcy5vcHRpb25zKCk7XG4gICAgICBsZXQgaGFuZGxlQWRkID0gKG5hbWUsIG9wdHMpID0+IHtcbiAgICAgICAgLy8gQWxsb3cgb3B0aW9ucyBmb3IgY2hpbGRyZW4gdG8gYmUgc2V0IGF0IHRoZSBwYXJlbnQgb3B0aW9uc1xuICAgICAgICAvLyBlLmcuIHZpZGVvanMoaWQsIHsgY29udHJvbEJhcjogZmFsc2UgfSk7XG4gICAgICAgIC8vIGluc3RlYWQgb2YgdmlkZW9qcyhpZCwgeyBjaGlsZHJlbjogeyBjb250cm9sQmFyOiBmYWxzZSB9KTtcbiAgICAgICAgaWYgKHBhcmVudE9wdGlvbnNbbmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIG9wdHMgPSBwYXJlbnRPcHRpb25zW25hbWVdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQWxsb3cgZm9yIGRpc2FibGluZyBkZWZhdWx0IGNvbXBvbmVudHNcbiAgICAgICAgLy8gZS5nLiBvcHRpb25zWydjaGlsZHJlbiddWydwb3N0ZXJJbWFnZSddID0gZmFsc2VcbiAgICAgICAgaWYgKG9wdHMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ3JlYXRlIGFuZCBhZGQgdGhlIGNoaWxkIGNvbXBvbmVudC5cbiAgICAgICAgLy8gQWRkIGEgZGlyZWN0IHJlZmVyZW5jZSB0byB0aGUgY2hpbGQgYnkgbmFtZSBvbiB0aGUgcGFyZW50IGluc3RhbmNlLlxuICAgICAgICAvLyBJZiB0d28gb2YgdGhlIHNhbWUgY29tcG9uZW50IGFyZSB1c2VkLCBkaWZmZXJlbnQgbmFtZXMgc2hvdWxkIGJlIHN1cHBsaWVkXG4gICAgICAgIC8vIGZvciBlYWNoXG4gICAgICAgIHRoaXNbbmFtZV0gPSB0aGlzLmFkZENoaWxkKG5hbWUsIG9wdHMpO1xuICAgICAgfTtcblxuICAgICAgLy8gQWxsb3cgZm9yIGFuIGFycmF5IG9mIGNoaWxkcmVuIGRldGFpbHMgdG8gcGFzc2VkIGluIHRoZSBvcHRpb25zXG4gICAgICBpZiAoTGliLm9iai5pc0FycmF5KGNoaWxkcmVuKSkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgbGV0IGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgICAgICAgbGV0IG5hbWU7XG4gICAgICAgICAgbGV0IG9wdHM7XG5cbiAgICAgICAgICBpZiAodHlwZW9mIGNoaWxkID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgLy8gWydteUNvbXBvbmVudCddXG4gICAgICAgICAgICBuYW1lID0gY2hpbGQ7XG4gICAgICAgICAgICBvcHRzID0ge307XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIFt7IG5hbWU6ICdteUNvbXBvbmVudCcsIG90aGVyT3B0aW9uOiB0cnVlIH1dXG4gICAgICAgICAgICBuYW1lID0gY2hpbGQubmFtZTtcbiAgICAgICAgICAgIG9wdHMgPSBjaGlsZDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBoYW5kbGVBZGQobmFtZSwgb3B0cyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIExpYi5vYmouZWFjaChjaGlsZHJlbiwgaGFuZGxlQWRkKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQWxsb3dzIHN1YiBjb21wb25lbnRzIHRvIHN0YWNrIENTUyBjbGFzcyBuYW1lc1xuICAgKlxuICAgKiBAcmV0dXJuIHtTdHJpbmd9IFRoZSBjb25zdHJ1Y3RlZCBjbGFzcyBuYW1lXG4gICAqL1xuICBidWlsZENTU0NsYXNzKCkge1xuICAgIC8vIENoaWxkIGNsYXNzZXMgY2FuIGluY2x1ZGUgYSBmdW5jdGlvbiB0aGF0IGRvZXM6XG4gICAgLy8gcmV0dXJuICdDTEFTUyBOQU1FJyArIHRoaXMuX3N1cGVyKCk7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhbiBldmVudCBsaXN0ZW5lciB0byB0aGlzIGNvbXBvbmVudCdzIGVsZW1lbnRcbiAgICpcbiAgICogICAgIHZhciBteUZ1bmMgPSBmdW5jdGlvbigpe1xuICAgKiAgICAgICB2YXIgbXlDb21wb25lbnQgPSB0aGlzO1xuICAgKiAgICAgICAvLyBEbyBzb21ldGhpbmcgd2hlbiB0aGUgZXZlbnQgaXMgZmlyZWRcbiAgICogICAgIH07XG4gICAqXG4gICAqICAgICBteUNvbXBvbmVudC5vbignZXZlbnRUeXBlJywgbXlGdW5jKTtcbiAgICpcbiAgICogVGhlIGNvbnRleHQgb2YgbXlGdW5jIHdpbGwgYmUgbXlDb21wb25lbnQgdW5sZXNzIHByZXZpb3VzbHkgYm91bmQuXG4gICAqXG4gICAqIEFsdGVybmF0aXZlbHksIHlvdSBjYW4gYWRkIGEgbGlzdGVuZXIgdG8gYW5vdGhlciBlbGVtZW50IG9yIGNvbXBvbmVudC5cbiAgICpcbiAgICogICAgIG15Q29tcG9uZW50Lm9uKG90aGVyRWxlbWVudCwgJ2V2ZW50TmFtZScsIG15RnVuYyk7XG4gICAqICAgICBteUNvbXBvbmVudC5vbihvdGhlckNvbXBvbmVudCwgJ2V2ZW50TmFtZScsIG15RnVuYyk7XG4gICAqXG4gICAqIFRoZSBiZW5lZml0IG9mIHVzaW5nIHRoaXMgb3ZlciBgVmpzRXZlbnRzLm9uKG90aGVyRWxlbWVudCwgJ2V2ZW50TmFtZScsIG15RnVuYylgXG4gICAqIGFuZCBgb3RoZXJDb21wb25lbnQub24oJ2V2ZW50TmFtZScsIG15RnVuYylgIGlzIHRoYXQgdGhpcyB3YXkgdGhlIGxpc3RlbmVyc1xuICAgKiB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgY2xlYW5lZCB1cCB3aGVuIGVpdGhlciBjb21wb25lbnQgaXMgZGlzcG9zZWQuXG4gICAqIEl0IHdpbGwgYWxzbyBiaW5kIG15Q29tcG9uZW50IGFzIHRoZSBjb250ZXh0IG9mIG15RnVuYy5cbiAgICpcbiAgICogKipOT1RFKio6IFdoZW4gdXNpbmcgdGhpcyBvbiBlbGVtZW50cyBpbiB0aGUgcGFnZSBvdGhlciB0aGFuIHdpbmRvd1xuICAgKiBhbmQgZG9jdW1lbnQgKGJvdGggcGVybWFuZW50KSwgaWYgeW91IHJlbW92ZSB0aGUgZWxlbWVudCBmcm9tIHRoZSBET01cbiAgICogeW91IG5lZWQgdG8gY2FsbCBgbXlDb21wb25lbnQudHJpZ2dlcihlbCwgJ2Rpc3Bvc2UnKWAgb24gaXQgdG8gY2xlYW4gdXBcbiAgICogcmVmZXJlbmNlcyB0byBpdCBhbmQgYWxsb3cgdGhlIGJyb3dzZXIgdG8gZ2FyYmFnZSBjb2xsZWN0IGl0LlxuICAgKlxuICAgKiBAcGFyYW0gIHtTdHJpbmd8Q29tcG9uZW50fSBmaXJzdCAgIFRoZSBldmVudCB0eXBlIG9yIG90aGVyIGNvbXBvbmVudFxuICAgKiBAcGFyYW0gIHtGdW5jdGlvbnxTdHJpbmd9ICAgICAgc2Vjb25kICBUaGUgZXZlbnQgaGFuZGxlciBvciBldmVudCB0eXBlXG4gICAqIEBwYXJhbSAge0Z1bmN0aW9ufSAgICAgICAgICAgICB0aGlyZCAgIFRoZSBldmVudCBoYW5kbGVyXG4gICAqIEByZXR1cm4ge0NvbXBvbmVudH0gICAgICAgIHNlbGZcbiAgICovXG4gIG9uKGZpcnN0LCBzZWNvbmQsIHRoaXJkKSB7XG4gICAgaWYgKHR5cGVvZiBmaXJzdCA9PT0gJ3N0cmluZycgfHwgTGliLm9iai5pc0FycmF5KGZpcnN0KSkge1xuICAgICAgRXZlbnRzLm9uKHRoaXMuZWxfLCBmaXJzdCwgTGliLmJpbmQodGhpcywgc2Vjb25kKSk7XG5cbiAgICAvLyBUYXJnZXRpbmcgYW5vdGhlciBjb21wb25lbnQgb3IgZWxlbWVudFxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB0YXJnZXQgPSBmaXJzdDtcbiAgICAgIGNvbnN0IHR5cGUgPSBzZWNvbmQ7XG4gICAgICBjb25zdCBmbiA9IExpYi5iaW5kKHRoaXMsIHRoaXJkKTtcblxuICAgICAgLy8gV2hlbiB0aGlzIGNvbXBvbmVudCBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSBsaXN0ZW5lciBmcm9tIHRoZSBvdGhlciBjb21wb25lbnRcbiAgICAgIGNvbnN0IHJlbW92ZU9uRGlzcG9zZSA9ICgpID0+IHRoaXMub2ZmKHRhcmdldCwgdHlwZSwgZm4pO1xuXG4gICAgICAvLyBVc2UgdGhlIHNhbWUgZnVuY3Rpb24gSUQgc28gd2UgY2FuIHJlbW92ZSBpdCBsYXRlciBpdCB1c2luZyB0aGUgSURcbiAgICAgIC8vIG9mIHRoZSBvcmlnaW5hbCBsaXN0ZW5lclxuICAgICAgcmVtb3ZlT25EaXNwb3NlLmd1aWQgPSBmbi5ndWlkO1xuICAgICAgdGhpcy5vbignZGlzcG9zZScsIHJlbW92ZU9uRGlzcG9zZSk7XG5cbiAgICAgIC8vIElmIHRoZSBvdGhlciBjb21wb25lbnQgaXMgZGlzcG9zZWQgZmlyc3Qgd2UgbmVlZCB0byBjbGVhbiB0aGUgcmVmZXJlbmNlXG4gICAgICAvLyB0byB0aGUgb3RoZXIgY29tcG9uZW50IGluIHRoaXMgY29tcG9uZW50J3MgcmVtb3ZlT25EaXNwb3NlIGxpc3RlbmVyXG4gICAgICAvLyBPdGhlcndpc2Ugd2UgY3JlYXRlIGEgbWVtb3J5IGxlYWsuXG4gICAgICBjb25zdCBjbGVhblJlbW92ZXIgPSAoKSA9PiB0aGlzLm9mZignZGlzcG9zZScsIHJlbW92ZU9uRGlzcG9zZSk7XG5cbiAgICAgIC8vIEFkZCB0aGUgc2FtZSBmdW5jdGlvbiBJRCBzbyB3ZSBjYW4gZWFzaWx5IHJlbW92ZSBpdCBsYXRlclxuICAgICAgY2xlYW5SZW1vdmVyLmd1aWQgPSBmbi5ndWlkO1xuXG4gICAgICAvLyBDaGVjayBpZiB0aGlzIGlzIGEgRE9NIG5vZGVcbiAgICAgIGlmIChmaXJzdC5ub2RlTmFtZSkge1xuICAgICAgICAvLyBBZGQgdGhlIGxpc3RlbmVyIHRvIHRoZSBvdGhlciBlbGVtZW50XG4gICAgICAgIEV2ZW50cy5vbih0YXJnZXQsIHR5cGUsIGZuKTtcbiAgICAgICAgRXZlbnRzLm9uKHRhcmdldCwgJ2Rpc3Bvc2UnLCBjbGVhblJlbW92ZXIpO1xuXG4gICAgICAvLyBTaG91bGQgYmUgYSBjb21wb25lbnRcbiAgICAgIC8vIE5vdCB1c2luZyBgaW5zdGFuY2VvZiBDb21wb25lbnRgIGJlY2F1c2UgaXQgbWFrZXMgbW9jayBwbGF5ZXJzIGRpZmZpY3VsdFxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZmlyc3Qub24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgLy8gQWRkIHRoZSBsaXN0ZW5lciB0byB0aGUgb3RoZXIgY29tcG9uZW50XG4gICAgICAgIHRhcmdldC5vbih0eXBlLCBmbik7XG4gICAgICAgIHRhcmdldC5vbignZGlzcG9zZScsIGNsZWFuUmVtb3Zlcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGFuIGV2ZW50IGxpc3RlbmVyIGZyb20gdGhpcyBjb21wb25lbnQncyBlbGVtZW50XG4gICAqXG4gICAqICAgICBteUNvbXBvbmVudC5vZmYoJ2V2ZW50VHlwZScsIG15RnVuYyk7XG4gICAqXG4gICAqIElmIG15RnVuYyBpcyBleGNsdWRlZCwgQUxMIGxpc3RlbmVycyBmb3IgdGhlIGV2ZW50IHR5cGUgd2lsbCBiZSByZW1vdmVkLlxuICAgKiBJZiBldmVudFR5cGUgaXMgZXhjbHVkZWQsIEFMTCBsaXN0ZW5lcnMgd2lsbCBiZSByZW1vdmVkIGZyb20gdGhlIGNvbXBvbmVudC5cbiAgICpcbiAgICogQWx0ZXJuYXRpdmVseSB5b3UgY2FuIHVzZSBgb2ZmYCB0byByZW1vdmUgbGlzdGVuZXJzIHRoYXQgd2VyZSBhZGRlZCB0byBvdGhlclxuICAgKiBlbGVtZW50cyBvciBjb21wb25lbnRzIHVzaW5nIGBteUNvbXBvbmVudC5vbihvdGhlckNvbXBvbmVudC4uLmAuXG4gICAqIEluIHRoaXMgY2FzZSBib3RoIHRoZSBldmVudCB0eXBlIGFuZCBsaXN0ZW5lciBmdW5jdGlvbiBhcmUgUkVRVUlSRUQuXG4gICAqXG4gICAqICAgICBteUNvbXBvbmVudC5vZmYob3RoZXJFbGVtZW50LCAnZXZlbnRUeXBlJywgbXlGdW5jKTtcbiAgICogICAgIG15Q29tcG9uZW50Lm9mZihvdGhlckNvbXBvbmVudCwgJ2V2ZW50VHlwZScsIG15RnVuYyk7XG4gICAqXG4gICAqIEBwYXJhbSAge1N0cmluZz18Q29tcG9uZW50fSAgZmlyc3QgIFRoZSBldmVudCB0eXBlIG9yIG90aGVyIGNvbXBvbmVudFxuICAgKiBAcGFyYW0gIHtGdW5jdGlvbj18U3RyaW5nfSAgICAgICBzZWNvbmQgVGhlIGxpc3RlbmVyIGZ1bmN0aW9uIG9yIGV2ZW50IHR5cGVcbiAgICogQHBhcmFtICB7RnVuY3Rpb249fSAgICAgICAgICAgICAgdGhpcmQgIFRoZSBsaXN0ZW5lciBmb3Igb3RoZXIgY29tcG9uZW50XG4gICAqIEByZXR1cm4ge0NvbXBvbmVudH1cbiAgICovXG4gIG9mZihmaXJzdCwgc2Vjb25kLCB0aGlyZCkge1xuICAgIGlmICghZmlyc3QgfHwgdHlwZW9mIGZpcnN0ID09PSAnc3RyaW5nJyB8fCBMaWIub2JqLmlzQXJyYXkoZmlyc3QpKSB7XG4gICAgICBFdmVudHMub2ZmKHRoaXMuZWxfLCBmaXJzdCwgc2Vjb25kKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgdGFyZ2V0ID0gZmlyc3Q7XG4gICAgICBjb25zdCB0eXBlID0gc2Vjb25kO1xuICAgICAgLy8gRW5zdXJlIHRoZXJlJ3MgYXQgbGVhc3QgYSBndWlkLCBldmVuIGlmIHRoZSBmdW5jdGlvbiBoYXNuJ3QgYmVlbiB1c2VkXG4gICAgICBjb25zdCBmbiA9IExpYi5iaW5kKHRoaXMsIHRoaXJkKTtcblxuICAgICAgLy8gUmVtb3ZlIHRoZSBkaXNwb3NlIGxpc3RlbmVyIG9uIHRoaXMgY29tcG9uZW50LFxuICAgICAgLy8gd2hpY2ggd2FzIGdpdmVuIHRoZSBzYW1lIGd1aWQgYXMgdGhlIGV2ZW50IGxpc3RlbmVyXG4gICAgICB0aGlzLm9mZignZGlzcG9zZScsIGZuKTtcblxuICAgICAgaWYgKGZpcnN0Lm5vZGVOYW1lKSB7XG4gICAgICAgIC8vIFJlbW92ZSB0aGUgbGlzdGVuZXJcbiAgICAgICAgRXZlbnRzLm9mZih0YXJnZXQsIHR5cGUsIGZuKTtcbiAgICAgICAgLy8gUmVtb3ZlIHRoZSBsaXN0ZW5lciBmb3IgY2xlYW5pbmcgdGhlIGRpc3Bvc2UgbGlzdGVuZXJcbiAgICAgICAgRXZlbnRzLm9mZih0YXJnZXQsICdkaXNwb3NlJywgZm4pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFyZ2V0Lm9mZih0eXBlLCBmbik7XG4gICAgICAgIHRhcmdldC5vZmYoJ2Rpc3Bvc2UnLCBmbik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQWRkIGFuIGV2ZW50IGxpc3RlbmVyIHRvIGJlIHRyaWdnZXJlZCBvbmx5IG9uY2UgYW5kIHRoZW4gcmVtb3ZlZFxuICAgKlxuICAgKiAgICAgbXlDb21wb25lbnQub25lKCdldmVudE5hbWUnLCBteUZ1bmMpO1xuICAgKlxuICAgKiBBbHRlcm5hdGl2ZWx5IHlvdSBjYW4gYWRkIGEgbGlzdGVuZXIgdG8gYW5vdGhlciBlbGVtZW50IG9yIGNvbXBvbmVudFxuICAgKiB0aGF0IHdpbGwgYmUgdHJpZ2dlcmVkIG9ubHkgb25jZS5cbiAgICpcbiAgICogICAgIG15Q29tcG9uZW50Lm9uZShvdGhlckVsZW1lbnQsICdldmVudE5hbWUnLCBteUZ1bmMpO1xuICAgKiAgICAgbXlDb21wb25lbnQub25lKG90aGVyQ29tcG9uZW50LCAnZXZlbnROYW1lJywgbXlGdW5jKTtcbiAgICpcbiAgICogQHBhcmFtICB7U3RyaW5nfENvbXBvbmVudH0gIGZpcnN0ICAgVGhlIGV2ZW50IHR5cGUgb3Igb3RoZXIgY29tcG9uZW50XG4gICAqIEBwYXJhbSAge0Z1bmN0aW9ufFN0cmluZ30gICAgICAgc2Vjb25kICBUaGUgbGlzdGVuZXIgZnVuY3Rpb24gb3IgZXZlbnQgdHlwZVxuICAgKiBAcGFyYW0gIHtGdW5jdGlvbj19ICAgICAgICAgICAgIHRoaXJkICAgVGhlIGxpc3RlbmVyIGZ1bmN0aW9uIGZvciBvdGhlciBjb21wb25lbnRcbiAgICogQHJldHVybiB7Q29tcG9uZW50fVxuICAgKi9cbiAgb25lKGZpcnN0LCBzZWNvbmQsIHRoaXJkKSB7XG4gICAgaWYgKHR5cGVvZiBmaXJzdCA9PT0gJ3N0cmluZycgfHwgTGliLm9iai5pc0FycmF5KGZpcnN0KSkge1xuICAgICAgRXZlbnRzLm9uZSh0aGlzLmVsXywgZmlyc3QsIExpYi5iaW5kKHRoaXMsIHNlY29uZCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB0YXJnZXQgPSBmaXJzdDtcbiAgICAgIGNvbnN0IHR5cGUgPSBzZWNvbmQ7XG4gICAgICBjb25zdCBmbiA9IExpYi5iaW5kKHRoaXMsIHRoaXJkKTtcblxuICAgICAgY29uc3QgbmV3RnVuYyA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5vZmYodGFyZ2V0LCB0eXBlLCBuZXdGdW5jKTtcbiAgICAgICAgZm4uYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICAgIH07XG5cbiAgICAgIC8vIEtlZXAgdGhlIHNhbWUgZnVuY3Rpb24gSUQgc28gd2UgY2FuIHJlbW92ZSBpdCBsYXRlclxuICAgICAgbmV3RnVuYy5ndWlkID0gZm4uZ3VpZDtcblxuICAgICAgdGhpcy5vbih0YXJnZXQsIHR5cGUsIG5ld0Z1bmMpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFRyaWdnZXIgYW4gZXZlbnQgb24gYW4gZWxlbWVudFxuICAgKlxuICAgKiAgICAgbXlDb21wb25lbnQudHJpZ2dlcignZXZlbnROYW1lJyk7XG4gICAqICAgICBteUNvbXBvbmVudC50cmlnZ2VyKHsndHlwZSc6J2V2ZW50TmFtZSd9KTtcbiAgICpcbiAgICogQHBhcmFtICB7RXZlbnR8T2JqZWN0fFN0cmluZ30gZXZlbnQgIEEgc3RyaW5nICh0aGUgdHlwZSkgb3IgYW4gZXZlbnQgb2JqZWN0IHdpdGggYSB0eXBlIGF0dHJpYnV0ZVxuICAgKiBAcmV0dXJuIHtDb21wb25lbnR9ICAgICAgIHNlbGZcbiAgICovXG4gIHRyaWdnZXIoZXZlbnQpIHtcbiAgICBFdmVudHMudHJpZ2dlcih0aGlzLmVsXywgZXZlbnQpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEJpbmQgYSBsaXN0ZW5lciB0byB0aGUgY29tcG9uZW50J3MgcmVhZHkgc3RhdGVcbiAgICpcbiAgICogRGlmZmVyZW50IGZyb20gZXZlbnQgbGlzdGVuZXJzIGluIHRoYXQgaWYgdGhlIHJlYWR5IGV2ZW50IGhhcyBhbHJlYWR5IGhhcHBlbmVkXG4gICAqIGl0IHdpbGwgdHJpZ2dlciB0aGUgZnVuY3Rpb24gaW1tZWRpYXRlbHkuXG4gICAqXG4gICAqIEBwYXJhbSAge0Z1bmN0aW9ufSBmbiBSZWFkeSBsaXN0ZW5lclxuICAgKiBAcmV0dXJuIHtDb21wb25lbnR9XG4gICAqL1xuICByZWFkeShmbikge1xuICAgIGlmIChmbikge1xuICAgICAgaWYgKHRoaXMuaXNSZWFkeV8pIHtcbiAgICAgICAgZm4uY2FsbCh0aGlzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVhZHlRdWV1ZV8gPSB0aGlzLnJlYWR5UXVldWVfIHx8IFtdO1xuICAgICAgICB0aGlzLnJlYWR5UXVldWVfLnB1c2goZm4pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmlnZ2VyIHRoZSByZWFkeSBsaXN0ZW5lcnNcbiAgICpcbiAgICogQHJldHVybiB7Q29tcG9uZW50fVxuICAgKi9cbiAgdHJpZ2dlclJlYWR5KCkge1xuICAgIHRoaXMuaXNSZWFkeV8gPSB0cnVlO1xuXG4gICAgbGV0IHJlYWR5UXVldWUgPSB0aGlzLnJlYWR5UXVldWVfO1xuXG4gICAgaWYgKHJlYWR5UXVldWUgJiYgcmVhZHlRdWV1ZS5sZW5ndGggPiAwKSB7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVhZHlRdWV1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICByZWFkeVF1ZXVlW2ldLmNhbGwodGhpcyk7XG4gICAgICB9XG5cbiAgICAgIC8vIFJlc2V0IFJlYWR5IFF1ZXVlXG4gICAgICB0aGlzLnJlYWR5UXVldWVfID0gW107XG5cbiAgICAgIC8vIEFsbG93IGZvciB1c2luZyBldmVudCBsaXN0ZW5lcnMgYWxzbywgaW4gY2FzZSB5b3Ugd2FudCB0byBkbyBzb21ldGhpbmcgZXZlcnl0aW1lIGEgc291cmNlIGlzIHJlYWR5LlxuICAgICAgdGhpcy50cmlnZ2VyKCdyZWFkeScpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIGNvbXBvbmVudCdzIGVsZW1lbnQgaGFzIGEgQ1NTIGNsYXNzIG5hbWVcbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IGNsYXNzVG9DaGVjayBDbGFzc25hbWUgdG8gY2hlY2tcbiAgICogQHJldHVybiB7Q29tcG9uZW50fVxuICAgKi9cbiAgaGFzQ2xhc3MoY2xhc3NUb0NoZWNrKSB7XG4gICAgcmV0dXJuIExpYi5oYXNDbGFzcyh0aGlzLmVsXywgY2xhc3NUb0NoZWNrKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSBDU1MgY2xhc3MgbmFtZSB0byB0aGUgY29tcG9uZW50J3MgZWxlbWVudFxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gY2xhc3NUb0FkZCBDbGFzc25hbWUgdG8gYWRkXG4gICAqIEByZXR1cm4ge0NvbXBvbmVudH1cbiAgICovXG4gIGFkZENsYXNzKGNsYXNzVG9BZGQpIHtcbiAgICBMaWIuYWRkQ2xhc3ModGhpcy5lbF8sIGNsYXNzVG9BZGQpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhIENTUyBjbGFzcyBuYW1lIGZyb20gdGhlIGNvbXBvbmVudCdzIGVsZW1lbnRcbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IGNsYXNzVG9SZW1vdmUgQ2xhc3NuYW1lIHRvIHJlbW92ZVxuICAgKiBAcmV0dXJuIHtDb21wb25lbnR9XG4gICAqL1xuICByZW1vdmVDbGFzcyhjbGFzc1RvUmVtb3ZlKSB7XG4gICAgTGliLnJlbW92ZUNsYXNzKHRoaXMuZWxfLCBjbGFzc1RvUmVtb3ZlKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBTaG93IHRoZSBjb21wb25lbnQgZWxlbWVudCBpZiBoaWRkZW5cbiAgICpcbiAgICogQHJldHVybiB7Q29tcG9uZW50fVxuICAgKi9cbiAgc2hvdygpIHtcbiAgICB0aGlzLnJlbW92ZUNsYXNzKCd2anMtaGlkZGVuJyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogSGlkZSB0aGUgY29tcG9uZW50IGVsZW1lbnQgaWYgY3VycmVudGx5IHNob3dpbmdcbiAgICpcbiAgICogQHJldHVybiB7Q29tcG9uZW50fVxuICAgKi9cbiAgaGlkZSgpIHtcbiAgICB0aGlzLmFkZENsYXNzKCd2anMtaGlkZGVuJyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogTG9jayBhbiBpdGVtIGluIGl0cyB2aXNpYmxlIHN0YXRlXG4gICAqIFRvIGJlIHVzZWQgd2l0aCBmYWRlSW4vZmFkZU91dC5cbiAgICpcbiAgICogQHJldHVybiB7Q29tcG9uZW50fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgbG9ja1Nob3dpbmcoKSB7XG4gICAgdGhpcy5hZGRDbGFzcygndmpzLWxvY2stc2hvd2luZycpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFVubG9jayBhbiBpdGVtIHRvIGJlIGhpZGRlblxuICAgKiBUbyBiZSB1c2VkIHdpdGggZmFkZUluL2ZhZGVPdXQuXG4gICAqXG4gICAqIEByZXR1cm4ge0NvbXBvbmVudH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHVubG9ja1Nob3dpbmcoKSB7XG4gICAgdGhpcy5yZW1vdmVDbGFzcygndmpzLWxvY2stc2hvd2luZycpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBvciBnZXQgdGhlIHdpZHRoIG9mIHRoZSBjb21wb25lbnQgKENTUyB2YWx1ZXMpXG4gICAqXG4gICAqIFNldHRpbmcgdGhlIHZpZGVvIHRhZyBkaW1lbnNpb24gdmFsdWVzIG9ubHkgd29ya3Mgd2l0aCB2YWx1ZXMgaW4gcGl4ZWxzLlxuICAgKiBQZXJjZW50IHZhbHVlcyB3aWxsIG5vdCB3b3JrLlxuICAgKiBTb21lIHBlcmNlbnRzIGNhbiBiZSB1c2VkLCBidXQgd2lkdGgoKS9oZWlnaHQoKSB3aWxsIHJldHVybiB0aGUgbnVtYmVyICsgJSxcbiAgICogbm90IHRoZSBhY3R1YWwgY29tcHV0ZWQgd2lkdGgvaGVpZ2h0LlxuICAgKlxuICAgKiBAcGFyYW0gIHtOdW1iZXJ8U3RyaW5nPX0gbnVtICAgT3B0aW9uYWwgd2lkdGggbnVtYmVyXG4gICAqIEBwYXJhbSAge0Jvb2xlYW59IHNraXBMaXN0ZW5lcnMgU2tpcCB0aGUgJ3Jlc2l6ZScgZXZlbnQgdHJpZ2dlclxuICAgKiBAcmV0dXJuIHtDb21wb25lbnR9IFRoaXMgY29tcG9uZW50LCB3aGVuIHNldHRpbmcgdGhlIHdpZHRoXG4gICAqIEByZXR1cm4ge051bWJlcnxTdHJpbmd9IFRoZSB3aWR0aCwgd2hlbiBnZXR0aW5nXG4gICAqL1xuICB3aWR0aChudW0sIHNraXBMaXN0ZW5lcnMpIHtcbiAgICByZXR1cm4gdGhpcy5kaW1lbnNpb24oJ3dpZHRoJywgbnVtLCBza2lwTGlzdGVuZXJzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgb3Igc2V0IHRoZSBoZWlnaHQgb2YgdGhlIGNvbXBvbmVudCAoQ1NTIHZhbHVlcylcbiAgICpcbiAgICogU2V0dGluZyB0aGUgdmlkZW8gdGFnIGRpbWVuc2lvbiB2YWx1ZXMgb25seSB3b3JrcyB3aXRoIHZhbHVlcyBpbiBwaXhlbHMuXG4gICAqIFBlcmNlbnQgdmFsdWVzIHdpbGwgbm90IHdvcmsuXG4gICAqIFNvbWUgcGVyY2VudHMgY2FuIGJlIHVzZWQsIGJ1dCB3aWR0aCgpL2hlaWdodCgpIHdpbGwgcmV0dXJuIHRoZSBudW1iZXIgKyAlLFxuICAgKiBub3QgdGhlIGFjdHVhbCBjb21wdXRlZCB3aWR0aC9oZWlnaHQuXG4gICAqXG4gICAqIEBwYXJhbSAge051bWJlcnxTdHJpbmc9fSBudW0gICAgIE5ldyBjb21wb25lbnQgaGVpZ2h0XG4gICAqIEBwYXJhbSAge0Jvb2xlYW49fSBza2lwTGlzdGVuZXJzIFNraXAgdGhlIHJlc2l6ZSBldmVudCB0cmlnZ2VyXG4gICAqIEByZXR1cm4ge0NvbXBvbmVudH0gVGhpcyBjb21wb25lbnQsIHdoZW4gc2V0dGluZyB0aGUgaGVpZ2h0XG4gICAqIEByZXR1cm4ge051bWJlcnxTdHJpbmd9IFRoZSBoZWlnaHQsIHdoZW4gZ2V0dGluZ1xuICAgKi9cbiAgaGVpZ2h0KG51bSwgc2tpcExpc3RlbmVycykge1xuICAgIHJldHVybiB0aGlzLmRpbWVuc2lvbignaGVpZ2h0JywgbnVtLCBza2lwTGlzdGVuZXJzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgYm90aCB3aWR0aCBhbmQgaGVpZ2h0IGF0IHRoZSBzYW1lIHRpbWVcbiAgICpcbiAgICogQHBhcmFtICB7TnVtYmVyfFN0cmluZ30gd2lkdGhcbiAgICogQHBhcmFtICB7TnVtYmVyfFN0cmluZ30gaGVpZ2h0XG4gICAqIEByZXR1cm4ge0NvbXBvbmVudH0gVGhlIGNvbXBvbmVudFxuICAgKi9cbiAgZGltZW5zaW9ucyh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgLy8gU2tpcCByZXNpemUgbGlzdGVuZXJzIG9uIHdpZHRoIGZvciBvcHRpbWl6YXRpb25cbiAgICByZXR1cm4gdGhpcy53aWR0aCh3aWR0aCwgdHJ1ZSkuaGVpZ2h0KGhlaWdodCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IG9yIHNldCB3aWR0aCBvciBoZWlnaHRcbiAgICpcbiAgICogVGhpcyBpcyB0aGUgc2hhcmVkIGNvZGUgZm9yIHRoZSB3aWR0aCgpIGFuZCBoZWlnaHQoKSBtZXRob2RzLlxuICAgKiBBbGwgZm9yIGFuIGludGVnZXIsIGludGVnZXIgKyAncHgnIG9yIGludGVnZXIgKyAnJSc7XG4gICAqXG4gICAqIEtub3duIGlzc3VlOiBIaWRkZW4gZWxlbWVudHMgb2ZmaWNpYWxseSBoYXZlIGEgd2lkdGggb2YgMC4gV2UncmUgZGVmYXVsdGluZ1xuICAgKiB0byB0aGUgc3R5bGUud2lkdGggdmFsdWUgYW5kIGZhbGxpbmcgYmFjayB0byBjb21wdXRlZFN0eWxlIHdoaWNoIGhhcyB0aGVcbiAgICogaGlkZGVuIGVsZW1lbnQgaXNzdWUuIEluZm8sIGJ1dCBwcm9iYWJseSBub3QgYW4gZWZmaWNpZW50IGZpeDpcbiAgICogaHR0cDovL3d3dy5mb2xpb3Rlay5jb20vZGV2YmxvZy9nZXR0aW5nLXRoZS13aWR0aC1vZi1hLWhpZGRlbi1lbGVtZW50LXdpdGgtanF1ZXJ5LXVzaW5nLXdpZHRoL1xuICAgKlxuICAgKiBAcGFyYW0gIHtTdHJpbmd9IHdpZHRoT3JIZWlnaHQgICd3aWR0aCcgb3IgJ2hlaWdodCdcbiAgICogQHBhcmFtICB7TnVtYmVyfFN0cmluZz19IG51bSAgICAgTmV3IGRpbWVuc2lvblxuICAgKiBAcGFyYW0gIHtCb29sZWFuPX0gc2tpcExpc3RlbmVycyBTa2lwIHJlc2l6ZSBldmVudCB0cmlnZ2VyXG4gICAqIEByZXR1cm4ge0NvbXBvbmVudH0gVGhlIGNvbXBvbmVudCBpZiBhIGRpbWVuc2lvbiB3YXMgc2V0XG4gICAqIEByZXR1cm4ge051bWJlcnxTdHJpbmd9IFRoZSBkaW1lbnNpb24gaWYgbm90aGluZyB3YXMgc2V0XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBkaW1lbnNpb24od2lkdGhPckhlaWdodCwgbnVtLCBza2lwTGlzdGVuZXJzKSB7XG4gICAgaWYgKG51bSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBTZXQgdG8gemVybyBpZiBudWxsIG9yIGxpdGVyYWxseSBOYU4gKE5hTiAhPT0gTmFOKVxuICAgICAgaWYgKG51bSA9PT0gbnVsbCB8fCBudW0gIT09IG51bSkge1xuICAgICAgICBudW0gPSAwO1xuICAgICAgfVxuXG4gICAgICAvLyBDaGVjayBpZiB1c2luZyBjc3Mgd2lkdGgvaGVpZ2h0ICglIG9yIHB4KSBhbmQgYWRqdXN0XG4gICAgICBpZiAoKCcnICsgbnVtKS5pbmRleE9mKCclJykgIT09IC0xIHx8ICgnJyArIG51bSkuaW5kZXhPZigncHgnKSAhPT0gLTEpIHtcbiAgICAgICAgdGhpcy5lbF8uc3R5bGVbd2lkdGhPckhlaWdodF0gPSBudW07XG4gICAgICB9IGVsc2UgaWYgKG51bSA9PT0gJ2F1dG8nKSB7XG4gICAgICAgIHRoaXMuZWxfLnN0eWxlW3dpZHRoT3JIZWlnaHRdID0gJyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmVsXy5zdHlsZVt3aWR0aE9ySGVpZ2h0XSA9IG51bSArICdweCc7XG4gICAgICB9XG5cbiAgICAgIC8vIHNraXBMaXN0ZW5lcnMgYWxsb3dzIHVzIHRvIGF2b2lkIHRyaWdnZXJpbmcgdGhlIHJlc2l6ZSBldmVudCB3aGVuIHNldHRpbmcgYm90aCB3aWR0aCBhbmQgaGVpZ2h0XG4gICAgICBpZiAoIXNraXBMaXN0ZW5lcnMpIHtcbiAgICAgICAgdGhpcy50cmlnZ2VyKCdyZXNpemUnKTtcbiAgICAgIH1cblxuICAgICAgLy8gUmV0dXJuIGNvbXBvbmVudFxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gTm90IHNldHRpbmcgYSB2YWx1ZSwgc28gZ2V0dGluZyBpdFxuICAgIC8vIE1ha2Ugc3VyZSBlbGVtZW50IGV4aXN0c1xuICAgIGlmICghdGhpcy5lbF8pIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIC8vIEdldCBkaW1lbnNpb24gdmFsdWUgZnJvbSBzdHlsZVxuICAgIGxldCB2YWwgPSB0aGlzLmVsXy5zdHlsZVt3aWR0aE9ySGVpZ2h0XTtcbiAgICBsZXQgcHhJbmRleCA9IHZhbC5pbmRleE9mKCdweCcpO1xuXG4gICAgaWYgKHB4SW5kZXggIT09IC0xKSB7XG4gICAgICAvLyBSZXR1cm4gdGhlIHBpeGVsIHZhbHVlIHdpdGggbm8gJ3B4J1xuICAgICAgcmV0dXJuIHBhcnNlSW50KHZhbC5zbGljZSgwLCBweEluZGV4KSwgMTApO1xuICAgIH1cblxuICAgIC8vIE5vIHB4IHNvIHVzaW5nICUgb3Igbm8gc3R5bGUgd2FzIHNldCwgc28gZmFsbGluZyBiYWNrIHRvIG9mZnNldFdpZHRoL2hlaWdodFxuICAgIC8vIElmIGNvbXBvbmVudCBoYXMgZGlzcGxheTpub25lLCBvZmZzZXQgd2lsbCByZXR1cm4gMFxuICAgIC8vIFRPRE86IGhhbmRsZSBkaXNwbGF5Om5vbmUgYW5kIG5vIGRpbWVuc2lvbiBzdHlsZSB1c2luZyBweFxuICAgIHJldHVybiBwYXJzZUludCh0aGlzLmVsX1snb2Zmc2V0JyArIExpYi5jYXBpdGFsaXplKHdpZHRoT3JIZWlnaHQpXSwgMTApO1xuXG4gICAgLy8gQ29tcHV0ZWRTdHlsZSB2ZXJzaW9uLlxuICAgIC8vIE9ubHkgZGlmZmVyZW5jZSBpcyBpZiB0aGUgZWxlbWVudCBpcyBoaWRkZW4gaXQgd2lsbCByZXR1cm5cbiAgICAvLyB0aGUgcGVyY2VudCB2YWx1ZSAoZS5nLiAnMTAwJScnKVxuICAgIC8vIGluc3RlYWQgb2YgemVybyBsaWtlIG9mZnNldFdpZHRoIHJldHVybnMuXG4gICAgLy8gdmFyIHZhbCA9IExpYi5nZXRDb21wdXRlZFN0eWxlVmFsdWUodGhpcy5lbF8sIHdpZHRoT3JIZWlnaHQpO1xuICAgIC8vIHZhciBweEluZGV4ID0gdmFsLmluZGV4T2YoJ3B4Jyk7XG5cbiAgICAvLyBpZiAocHhJbmRleCAhPT0gLTEpIHtcbiAgICAvLyAgIHJldHVybiB2YWwuc2xpY2UoMCwgcHhJbmRleCk7XG4gICAgLy8gfSBlbHNlIHtcbiAgICAvLyAgIHJldHVybiB2YWw7XG4gICAgLy8gfVxuICB9XG5cbiAgLyoqXG4gICAqIEVtaXQgJ3RhcCcgZXZlbnRzIHdoZW4gdG91Y2ggZXZlbnRzIGFyZSBzdXBwb3J0ZWRcbiAgICpcbiAgICogVGhpcyBpcyB1c2VkIHRvIHN1cHBvcnQgdG9nZ2xpbmcgdGhlIGNvbnRyb2xzIHRocm91Z2ggYSB0YXAgb24gdGhlIHZpZGVvLlxuICAgKlxuICAgKiBXZSdyZSByZXF1aXJpbmcgdGhlbSB0byBiZSBlbmFibGVkIGJlY2F1c2Ugb3RoZXJ3aXNlIGV2ZXJ5IGNvbXBvbmVudCB3b3VsZFxuICAgKiBoYXZlIHRoaXMgZXh0cmEgb3ZlcmhlYWQgdW5uZWNlc3NhcmlseSwgb24gbW9iaWxlIGRldmljZXMgd2hlcmUgZXh0cmFcbiAgICogb3ZlcmhlYWQgaXMgZXNwZWNpYWxseSBiYWQuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBlbWl0VGFwRXZlbnRzKCkge1xuICAgIC8vIFRyYWNrIHRoZSBzdGFydCB0aW1lIHNvIHdlIGNhbiBkZXRlcm1pbmUgaG93IGxvbmcgdGhlIHRvdWNoIGxhc3RlZFxuICAgIGxldCB0b3VjaFN0YXJ0ID0gMDtcbiAgICBsZXQgZmlyc3RUb3VjaCA9IG51bGw7XG5cbiAgICAvLyBNYXhpbXVtIG1vdmVtZW50IGFsbG93ZWQgZHVyaW5nIGEgdG91Y2ggZXZlbnQgdG8gc3RpbGwgYmUgY29uc2lkZXJlZCBhIHRhcFxuICAgIC8vIE90aGVyIHBvcHVsYXIgbGlicyB1c2UgYW55d2hlcmUgZnJvbSAyIChoYW1tZXIuanMpIHRvIDE1LCBzbyAxMCBzZWVtcyBsaWtlIGEgbmljZSwgcm91bmQgbnVtYmVyLlxuICAgIGNvbnN0IHRhcE1vdmVtZW50VGhyZXNob2xkID0gMTA7XG5cbiAgICAvLyBUaGUgbWF4aW11bSBsZW5ndGggYSB0b3VjaCBjYW4gYmUgd2hpbGUgc3RpbGwgYmVpbmcgY29uc2lkZXJlZCBhIHRhcFxuICAgIGNvbnN0IHRvdWNoVGltZVRocmVzaG9sZCA9IDIwMDtcblxuICAgIGxldCBjb3VsZEJlVGFwO1xuXG4gICAgdGhpcy5vbigndG91Y2hzdGFydCcsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAvLyBJZiBtb3JlIHRoYW4gb25lIGZpbmdlciwgZG9uJ3QgY29uc2lkZXIgdHJlYXRpbmcgdGhpcyBhcyBhIGNsaWNrXG4gICAgICBpZiAoZXZlbnQudG91Y2hlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgZmlyc3RUb3VjaCA9IExpYi5vYmouY29weShldmVudC50b3VjaGVzWzBdKTtcbiAgICAgICAgLy8gUmVjb3JkIHN0YXJ0IHRpbWUgc28gd2UgY2FuIGRldGVjdCBhIHRhcCB2cy4gXCJ0b3VjaCBhbmQgaG9sZFwiXG4gICAgICAgIHRvdWNoU3RhcnQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgICAgLy8gUmVzZXQgY291bGRCZVRhcCB0cmFja2luZ1xuICAgICAgICBjb3VsZEJlVGFwID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRoaXMub24oJ3RvdWNobW92ZScsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAvLyBJZiBtb3JlIHRoYW4gb25lIGZpbmdlciwgZG9uJ3QgY29uc2lkZXIgdHJlYXRpbmcgdGhpcyBhcyBhIGNsaWNrXG4gICAgICBpZiAoZXZlbnQudG91Y2hlcy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGNvdWxkQmVUYXAgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAoZmlyc3RUb3VjaCkge1xuICAgICAgICAvLyBTb21lIGRldmljZXMgd2lsbCB0aHJvdyB0b3VjaG1vdmVzIGZvciBhbGwgYnV0IHRoZSBzbGlnaHRlc3Qgb2YgdGFwcy5cbiAgICAgICAgLy8gU28sIGlmIHdlIG1vdmVkIG9ubHkgYSBzbWFsbCBkaXN0YW5jZSwgdGhpcyBjb3VsZCBzdGlsbCBiZSBhIHRhcFxuICAgICAgICBjb25zdCB4ZGlmZiA9IGV2ZW50LnRvdWNoZXNbMF0ucGFnZVggLSBmaXJzdFRvdWNoLnBhZ2VYO1xuICAgICAgICBjb25zdCB5ZGlmZiA9IGV2ZW50LnRvdWNoZXNbMF0ucGFnZVkgLSBmaXJzdFRvdWNoLnBhZ2VZO1xuICAgICAgICBjb25zdCB0b3VjaERpc3RhbmNlID0gTWF0aC5zcXJ0KHhkaWZmICogeGRpZmYgKyB5ZGlmZiAqIHlkaWZmKTtcblxuICAgICAgICBpZiAodG91Y2hEaXN0YW5jZSA+IHRhcE1vdmVtZW50VGhyZXNob2xkKSB7XG4gICAgICAgICAgY291bGRCZVRhcCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBjb25zdCBub1RhcCA9IGZ1bmN0aW9uKCkge1xuICAgICAgY291bGRCZVRhcCA9IGZhbHNlO1xuICAgIH07XG5cbiAgICAvLyBUT0RPOiBMaXN0ZW4gdG8gdGhlIG9yaWdpbmFsIHRhcmdldC4gaHR0cDovL3lvdXR1LmJlL0R1amZwWE9LVXA4P3Q9MTNtOHNcbiAgICB0aGlzLm9uKCd0b3VjaGxlYXZlJywgbm9UYXApO1xuICAgIHRoaXMub24oJ3RvdWNoY2FuY2VsJywgbm9UYXApO1xuXG4gICAgLy8gV2hlbiB0aGUgdG91Y2ggZW5kcywgbWVhc3VyZSBob3cgbG9uZyBpdCB0b29rIGFuZCB0cmlnZ2VyIHRoZSBhcHByb3ByaWF0ZVxuICAgIC8vIGV2ZW50XG4gICAgdGhpcy5vbigndG91Y2hlbmQnLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgZmlyc3RUb3VjaCA9IG51bGw7XG4gICAgICAvLyBQcm9jZWVkIG9ubHkgaWYgdGhlIHRvdWNobW92ZS9sZWF2ZS9jYW5jZWwgZXZlbnQgZGlkbid0IGhhcHBlblxuICAgICAgaWYgKGNvdWxkQmVUYXAgPT09IHRydWUpIHtcbiAgICAgICAgLy8gTWVhc3VyZSBob3cgbG9uZyB0aGUgdG91Y2ggbGFzdGVkXG4gICAgICAgIGNvbnN0IHRvdWNoVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gdG91Y2hTdGFydDtcblxuICAgICAgICAvLyBNYWtlIHN1cmUgdGhlIHRvdWNoIHdhcyBsZXNzIHRoYW4gdGhlIHRocmVzaG9sZCB0byBiZSBjb25zaWRlcmVkIGEgdGFwXG4gICAgICAgIGlmICh0b3VjaFRpbWUgPCB0b3VjaFRpbWVUaHJlc2hvbGQpIHtcbiAgICAgICAgICAvLyBEb24ndCBsZXQgYnJvd3NlciB0dXJuIHRoaXMgaW50byBhIGNsaWNrXG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB0aGlzLnRyaWdnZXIoJ3RhcCcpO1xuICAgICAgICAgIC8vIEl0IG1heSBiZSBnb29kIHRvIGNvcHkgdGhlIHRvdWNoZW5kIGV2ZW50IG9iamVjdCBhbmQgY2hhbmdlIHRoZVxuICAgICAgICAgIC8vIHR5cGUgdG8gdGFwLCBpZiB0aGUgb3RoZXIgZXZlbnQgcHJvcGVydGllcyBhcmVuJ3QgZXhhY3QgYWZ0ZXJcbiAgICAgICAgICAvLyBMaWIuZml4RXZlbnQgcnVucyAoZS5nLiBldmVudC50YXJnZXQpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXBvcnQgdXNlciB0b3VjaCBhY3Rpdml0eSB3aGVuIHRvdWNoIGV2ZW50cyBvY2N1clxuICAgKlxuICAgKiBVc2VyIGFjdGl2aXR5IGlzIHVzZWQgdG8gZGV0ZXJtaW5lIHdoZW4gY29udHJvbHMgc2hvdWxkIHNob3cvaGlkZS4gSXQnc1xuICAgKiByZWxhdGl2ZWx5IHNpbXBsZSB3aGVuIGl0IGNvbWVzIHRvIG1vdXNlIGV2ZW50cywgYmVjYXVzZSBhbnkgbW91c2UgZXZlbnRcbiAgICogc2hvdWxkIHNob3cgdGhlIGNvbnRyb2xzLiBTbyB3ZSBjYXB0dXJlIG1vdXNlIGV2ZW50cyB0aGF0IGJ1YmJsZSB1cCB0byB0aGVcbiAgICogcGxheWVyIGFuZCByZXBvcnQgYWN0aXZpdHkgd2hlbiB0aGF0IGhhcHBlbnMuXG4gICAqXG4gICAqIFdpdGggdG91Y2ggZXZlbnRzIGl0IGlzbid0IGFzIGVhc3kuIFdlIGNhbid0IHJlbHkgb24gdG91Y2ggZXZlbnRzIGF0IHRoZVxuICAgKiBwbGF5ZXIgbGV2ZWwsIGJlY2F1c2UgYSB0YXAgKHRvdWNoc3RhcnQgKyB0b3VjaGVuZCkgb24gdGhlIHZpZGVvIGl0c2VsZiBvblxuICAgKiBtb2JpbGUgZGV2aWNlcyBpcyBtZWFudCB0byB0dXJuIGNvbnRyb2xzIG9mZiAoYW5kIG9uKS4gVXNlciBhY3Rpdml0eSBpc1xuICAgKiBjaGVja2VkIGFzeW5jaHJvbm91c2x5LCBzbyB3aGF0IGNvdWxkIGhhcHBlbiBpcyBhIHRhcCBldmVudCBvbiB0aGUgdmlkZW9cbiAgICogdHVybnMgdGhlIGNvbnRyb2xzIG9mZiwgdGhlbiB0aGUgdG91Y2hlbmQgZXZlbnQgYnViYmxlcyB1cCB0byB0aGUgcGxheWVyLFxuICAgKiB3aGljaCBpZiBpdCByZXBvcnRlZCB1c2VyIGFjdGl2aXR5LCB3b3VsZCB0dXJuIHRoZSBjb250cm9scyByaWdodCBiYWNrIG9uLlxuICAgKiAoV2UgYWxzbyBkb24ndCB3YW50IHRvIGNvbXBsZXRlbHkgYmxvY2sgdG91Y2ggZXZlbnRzIGZyb20gYnViYmxpbmcgdXApXG4gICAqXG4gICAqIEFsc28gYSB0b3VjaG1vdmUsIHRvdWNoK2hvbGQsIGFuZCBhbnl0aGluZyBvdGhlciB0aGFuIGEgdGFwIGlzIG5vdCBzdXBwb3NlZFxuICAgKiB0byB0dXJuIHRoZSBjb250cm9scyBiYWNrIG9uIG9uIGEgbW9iaWxlIGRldmljZS5cbiAgICpcbiAgICogSGVyZSB3ZSdyZSBzZXR0aW5nIHRoZSBkZWZhdWx0IGNvbXBvbmVudCBiZWhhdmlvciB0byByZXBvcnQgdXNlciBhY3Rpdml0eVxuICAgKiB3aGVuZXZlciB0b3VjaCBldmVudHMgaGFwcGVuLCBhbmQgdGhpcyBjYW4gYmUgdHVybmVkIG9mZiBieSBjb21wb25lbnRzIHRoYXRcbiAgICogd2FudCB0b3VjaCBldmVudHMgdG8gYWN0IGRpZmZlcmVudGx5LlxuICAgKi9cbiAgZW5hYmxlVG91Y2hBY3Rpdml0eSgpIHtcbiAgICAvLyBEb24ndCBjb250aW51ZSBpZiB0aGUgcm9vdCBwbGF5ZXIgZG9lc24ndCBzdXBwb3J0IHJlcG9ydGluZyB1c2VyIGFjdGl2aXR5XG4gICAgaWYgKCF0aGlzLnBsYXllcigpIHx8ICF0aGlzLnBsYXllcigpLnJlcG9ydFVzZXJBY3Rpdml0eSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGxpc3RlbmVyIGZvciByZXBvcnRpbmcgdGhhdCB0aGUgdXNlciBpcyBhY3RpdmVcbiAgICBjb25zdCByZXBvcnQgPSBMaWIuYmluZCh0aGlzLnBsYXllcigpLCB0aGlzLnBsYXllcigpLnJlcG9ydFVzZXJBY3Rpdml0eSk7XG5cbiAgICBsZXQgdG91Y2hIb2xkaW5nO1xuXG4gICAgdGhpcy5vbigndG91Y2hzdGFydCcsIGZ1bmN0aW9uKCkge1xuICAgICAgcmVwb3J0KCk7XG4gICAgICAvLyBGb3IgYXMgbG9uZyBhcyB0aGUgdGhleSBhcmUgdG91Y2hpbmcgdGhlIGRldmljZSBvciBoYXZlIHRoZWlyIG1vdXNlIGRvd24sXG4gICAgICAvLyB3ZSBjb25zaWRlciB0aGVtIGFjdGl2ZSBldmVuIGlmIHRoZXkncmUgbm90IG1vdmluZyB0aGVpciBmaW5nZXIgb3IgbW91c2UuXG4gICAgICAvLyBTbyB3ZSB3YW50IHRvIGNvbnRpbnVlIHRvIHVwZGF0ZSB0aGF0IHRoZXkgYXJlIGFjdGl2ZVxuICAgICAgdGhpcy5jbGVhckludGVydmFsKHRvdWNoSG9sZGluZyk7XG4gICAgICAvLyByZXBvcnQgYXQgdGhlIHNhbWUgaW50ZXJ2YWwgYXMgYWN0aXZpdHlDaGVja1xuICAgICAgdG91Y2hIb2xkaW5nID0gdGhpcy5zZXRJbnRlcnZhbChyZXBvcnQsIDI1MCk7XG4gICAgfSk7XG5cbiAgICBjb25zdCB0b3VjaEVuZCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICByZXBvcnQoKTtcbiAgICAgIC8vIHN0b3AgdGhlIGludGVydmFsIHRoYXQgbWFpbnRhaW5zIGFjdGl2aXR5IGlmIHRoZSB0b3VjaCBpcyBob2xkaW5nXG4gICAgICB0aGlzLmNsZWFySW50ZXJ2YWwodG91Y2hIb2xkaW5nKTtcbiAgICB9O1xuXG4gICAgdGhpcy5vbigndG91Y2htb3ZlJywgcmVwb3J0KTtcbiAgICB0aGlzLm9uKCd0b3VjaGVuZCcsIHRvdWNoRW5kKTtcbiAgICB0aGlzLm9uKCd0b3VjaGNhbmNlbCcsIHRvdWNoRW5kKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIHRpbWVvdXQgYW5kIHNldHMgdXAgZGlzcG9zYWwgYXV0b21hdGljYWxseS5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIHJ1biBhZnRlciB0aGUgdGltZW91dC5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IHRpbWVvdXQgTnVtYmVyIG9mIG1zIHRvIGRlbGF5IGJlZm9yZSBleGVjdXRpbmcgc3BlY2lmaWVkIGZ1bmN0aW9uLlxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IFJldHVybnMgdGhlIHRpbWVvdXQgSURcbiAgICovXG4gIHNldFRpbWVvdXQoZm4sIHRpbWVvdXQpIHtcbiAgICBmbiA9IExpYi5iaW5kKHRoaXMsIGZuKTtcblxuICAgIC8vIHdpbmRvdy5zZXRUaW1lb3V0IHdvdWxkIGJlIHByZWZlcmFibGUgaGVyZSwgYnV0IGR1ZSB0byBzb21lIGJpemFycmUgaXNzdWUgd2l0aCBTaW5vbiBhbmQvb3IgUGhhbnRvbWpzLCB3ZSBjYW4ndC5cbiAgICBsZXQgdGltZW91dElkID0gd2luZG93LnNldFRpbWVvdXQoZm4sIHRpbWVvdXQpO1xuXG4gICAgY29uc3QgZGlzcG9zZUZuID0gZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xuICAgIH07XG5cbiAgICBkaXNwb3NlRm4uZ3VpZCA9IGB2anMtdGltZW91dC0ke3RpbWVvdXRJZH1gO1xuXG4gICAgdGhpcy5vbignZGlzcG9zZScsIGRpc3Bvc2VGbik7XG5cbiAgICByZXR1cm4gdGltZW91dElkO1xuICB9XG5cbiAgLyoqXG4gICAqIENsZWFycyBhIHRpbWVvdXQgYW5kIHJlbW92ZXMgdGhlIGFzc29jaWF0ZWQgZGlzcG9zZSBsaXN0ZW5lclxuICAgKiBAcGFyYW0ge051bWJlcn0gdGltZW91dElkIFRoZSBpZCBvZiB0aGUgdGltZW91dCB0byBjbGVhclxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IFJldHVybnMgdGhlIHRpbWVvdXQgSURcbiAgICovXG4gIGNsZWFyVGltZW91dCh0aW1lb3V0SWQpIHtcbiAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7XG5cbiAgICBjb25zdCBkaXNwb3NlRm4gPSBmdW5jdGlvbigpIHt9O1xuXG4gICAgZGlzcG9zZUZuLmd1aWQgPSBgdmpzLXRpbWVvdXQtJHt0aW1lb3V0SWR9YDtcblxuICAgIHRoaXMub2ZmKCdkaXNwb3NlJywgZGlzcG9zZUZuKTtcblxuICAgIHJldHVybiB0aW1lb3V0SWQ7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBpbnRlcnZhbCBhbmQgc2V0cyB1cCBkaXNwb3NhbCBhdXRvbWF0aWNhbGx5LlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gcnVuIGV2ZXJ5IE4gc2Vjb25kcy5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IGludGVydmFsIE51bWJlciBvZiBtcyB0byBkZWxheSBiZWZvcmUgZXhlY3V0aW5nIHNwZWNpZmllZCBmdW5jdGlvbi5cbiAgICogQHJldHVybiB7TnVtYmVyfSBSZXR1cm5zIHRoZSBpbnRlcnZhbCBJRFxuICAgKi9cbiAgc2V0SW50ZXJ2YWwoZm4sIGludGVydmFsKSB7XG4gICAgZm4gPSBMaWIuYmluZCh0aGlzLCBmbik7XG5cbiAgICBsZXQgaW50ZXJ2YWxJZCA9IHdpbmRvdy5zZXRJbnRlcnZhbChmbiwgaW50ZXJ2YWwpO1xuXG4gICAgY29uc3QgZGlzcG9zZUZuID0gZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmNsZWFySW50ZXJ2YWwoaW50ZXJ2YWxJZCk7XG4gICAgfTtcblxuICAgIGRpc3Bvc2VGbi5ndWlkID0gYHZqcy1pbnRlcnZhbC0ke2ludGVydmFsSWR9YDtcblxuICAgIHRoaXMub24oJ2Rpc3Bvc2UnLCBkaXNwb3NlRm4pO1xuXG4gICAgcmV0dXJuIGludGVydmFsSWQ7XG4gIH1cblxuICAvKipcbiAgICogQ2xlYXJzIGFuIGludGVydmFsIGFuZCByZW1vdmVzIHRoZSBhc3NvY2lhdGVkIGRpc3Bvc2UgbGlzdGVuZXJcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGludGVydmFsSWQgVGhlIGlkIG9mIHRoZSBpbnRlcnZhbCB0byBjbGVhclxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IFJldHVybnMgdGhlIGludGVydmFsIElEXG4gICAqL1xuICBjbGVhckludGVydmFsKGludGVydmFsSWQpIHtcbiAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbChpbnRlcnZhbElkKTtcblxuICAgIGNvbnN0IGRpc3Bvc2VGbiA9IGZ1bmN0aW9uKCkge307XG5cbiAgICBkaXNwb3NlRm4uZ3VpZCA9IGB2anMtaW50ZXJ2YWwtJHtpbnRlcnZhbElkfWA7XG5cbiAgICB0aGlzLm9mZignZGlzcG9zZScsIGRpc3Bvc2VGbik7XG5cbiAgICByZXR1cm4gaW50ZXJ2YWxJZDtcbiAgfVxuXG4gIHN0YXRpYyByZWdpc3RlckNvbXBvbmVudChuYW1lLCBjb21wKSB7XG4gICAgaWYgKCFDb21wb25lbnQuY29tcG9uZW50c18pIHtcbiAgICAgIENvbXBvbmVudC5jb21wb25lbnRzXyA9IHt9O1xuICAgIH1cblxuICAgIENvbXBvbmVudC5jb21wb25lbnRzX1tuYW1lXSA9IGNvbXA7XG4gICAgcmV0dXJuIGNvbXA7XG4gIH1cblxuICBzdGF0aWMgZ2V0Q29tcG9uZW50KG5hbWUpIHtcbiAgICBpZiAoQ29tcG9uZW50LmNvbXBvbmVudHNfICYmIENvbXBvbmVudC5jb21wb25lbnRzX1tuYW1lXSkge1xuICAgICAgcmV0dXJuIENvbXBvbmVudC5jb21wb25lbnRzX1tuYW1lXTtcbiAgICB9XG5cbiAgICBpZiAod2luZG93ICYmIHdpbmRvdy52aWRlb2pzICYmIHdpbmRvdy52aWRlb2pzW25hbWVdKSB7XG4gICAgICBMaWIubG9nLndhcm4oYFRoZSAke25hbWV9IGNvbXBvbmVudCB3YXMgYWRkZWQgdG8gdGhlIHZpZGVvanMgb2JqZWN0IHdoZW4gaXQgc2hvdWxkIGJlIHJlZ2lzdGVyZWQgdXNpbmcgdmlkZW9qcy5yZWdpc3RlckNvbXBvbmVudChuYW1lLCBjb21wb25lbnQpYCk7XG4gICAgICByZXR1cm4gd2luZG93LnZpZGVvanNbbmFtZV07XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGV4dGVuZChwcm9wcykge1xuICAgIHByb3BzID0gcHJvcHMgfHwge307XG4gICAgLy8gU2V0IHVwIHRoZSBjb25zdHJ1Y3RvciB1c2luZyB0aGUgc3VwcGxpZWQgaW5pdCBtZXRob2RcbiAgICAvLyBvciB1c2luZyB0aGUgaW5pdCBvZiB0aGUgcGFyZW50IG9iamVjdFxuICAgIC8vIE1ha2Ugc3VyZSB0byBjaGVjayB0aGUgdW5vYmZ1c2NhdGVkIHZlcnNpb24gZm9yIGV4dGVybmFsIGxpYnNcbiAgICBsZXQgaW5pdCA9IHByb3BzLmluaXQgfHwgcHJvcHMuaW5pdCB8fCB0aGlzLnByb3RvdHlwZS5pbml0IHx8IHRoaXMucHJvdG90eXBlLmluaXQgfHwgZnVuY3Rpb24oKSB7fTtcbiAgICAvLyBJbiBSZXNpZydzIHNpbXBsZSBjbGFzcyBpbmhlcml0YW5jZSAocHJldmlvdXNseSB1c2VkKSB0aGUgY29uc3RydWN0b3JcbiAgICAvLyAgaXMgYSBmdW5jdGlvbiB0aGF0IGNhbGxzIGB0aGlzLmluaXQuYXBwbHkoYXJndW1lbnRzKWBcbiAgICAvLyBIb3dldmVyIHRoYXQgd291bGQgcHJldmVudCB1cyBmcm9tIHVzaW5nIGBQYXJlbnRPYmplY3QuY2FsbCh0aGlzKTtgXG4gICAgLy8gIGluIGEgQ2hpbGQgY29uc3RydWN0b3IgYmVjYXVzZSB0aGUgYHRoaXNgIGluIGB0aGlzLmluaXRgXG4gICAgLy8gIHdvdWxkIHN0aWxsIHJlZmVyIHRvIHRoZSBDaGlsZCBhbmQgY2F1c2UgYW4gaW5maW5pdGUgbG9vcC5cbiAgICAvLyBXZSB3b3VsZCBpbnN0ZWFkIGhhdmUgdG8gZG9cbiAgICAvLyAgICBgUGFyZW50T2JqZWN0LnByb3RvdHlwZS5pbml0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7YFxuICAgIC8vICBCbGVoLiBXZSdyZSBub3QgY3JlYXRpbmcgYSBfc3VwZXIoKSBmdW5jdGlvbiwgc28gaXQncyBnb29kIHRvIGtlZXBcbiAgICAvLyAgdGhlIHBhcmVudCBjb25zdHJ1Y3RvciByZWZlcmVuY2Ugc2ltcGxlLlxuICAgIGxldCBzdWJPYmogPSBmdW5jdGlvbigpIHtcbiAgICAgIGluaXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgLy8gSW5oZXJpdCBmcm9tIHRoaXMgb2JqZWN0J3MgcHJvdG90eXBlXG4gICAgc3ViT2JqLnByb3RvdHlwZSA9IExpYi5vYmouY3JlYXRlKHRoaXMucHJvdG90eXBlKTtcbiAgICAvLyBSZXNldCB0aGUgY29uc3RydWN0b3IgcHJvcGVydHkgZm9yIHN1Yk9iaiBvdGhlcndpc2VcbiAgICAvLyBpbnN0YW5jZXMgb2Ygc3ViT2JqIHdvdWxkIGhhdmUgdGhlIGNvbnN0cnVjdG9yIG9mIHRoZSBwYXJlbnQgT2JqZWN0XG4gICAgc3ViT2JqLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1Yk9iajtcblxuICAgIC8vIE1ha2UgdGhlIGNsYXNzIGV4dGVuZGFibGVcbiAgICBzdWJPYmouZXh0ZW5kID0gQ29tcG9uZW50LmV4dGVuZDtcbiAgICAvLyBNYWtlIGEgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIGluc3RhbmNlc1xuICAgIC8vIHN1Yk9iai5jcmVhdGUgPSBDb3JlT2JqZWN0LmNyZWF0ZTtcblxuICAgIC8vIEV4dGVuZCBzdWJPYmoncyBwcm90b3R5cGUgd2l0aCBmdW5jdGlvbnMgYW5kIG90aGVyIHByb3BlcnRpZXMgZnJvbSBwcm9wc1xuICAgIGZvciAobGV0IG5hbWUgaW4gcHJvcHMpIHtcbiAgICAgIGlmIChwcm9wcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICBzdWJPYmoucHJvdG90eXBlW25hbWVdID0gcHJvcHNbbmFtZV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHN1Yk9iajtcbiAgfVxufVxuXG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ0NvbXBvbmVudCcsIENvbXBvbmVudCk7XG5leHBvcnQgZGVmYXVsdCBDb21wb25lbnQ7XG4iLCJpbXBvcnQgQ29tcG9uZW50IGZyb20gJy4uL2NvbXBvbmVudC5qcyc7XG5pbXBvcnQgKiBhcyBMaWIgZnJvbSAnLi4vbGliLmpzJztcblxuLy8gUmVxdWlyZWQgY2hpbGRyZW5cbmltcG9ydCBQbGF5VG9nZ2xlIGZyb20gJy4vcGxheS10b2dnbGUuanMnO1xuaW1wb3J0IEN1cnJlbnRUaW1lRGlzcGxheSBmcm9tICcuL3RpbWUtY29udHJvbHMvY3VycmVudC10aW1lLWRpc3BsYXkuanMnO1xuaW1wb3J0IER1cmF0aW9uRGlzcGxheSBmcm9tICcuL3RpbWUtY29udHJvbHMvZHVyYXRpb24tZGlzcGxheS5qcyc7XG5pbXBvcnQgVGltZURpdmlkZXIgZnJvbSAnLi90aW1lLWNvbnRyb2xzL3RpbWUtZGl2aWRlci5qcyc7XG5pbXBvcnQgUmVtYWluaW5nVGltZURpc3BsYXkgZnJvbSAnLi90aW1lLWNvbnRyb2xzL3JlbWFpbmluZy10aW1lLWRpc3BsYXkuanMnO1xuaW1wb3J0IExpdmVEaXNwbGF5IGZyb20gJy4vbGl2ZS1kaXNwbGF5LmpzJztcbmltcG9ydCBQcm9ncmVzc0NvbnRyb2wgZnJvbSAnLi9wcm9ncmVzcy1jb250cm9sL3Byb2dyZXNzLWNvbnRyb2wuanMnO1xuaW1wb3J0IEZ1bGxzY3JlZW5Ub2dnbGUgZnJvbSAnLi9mdWxsc2NyZWVuLXRvZ2dsZS5qcyc7XG5pbXBvcnQgVm9sdW1lQ29udHJvbCBmcm9tICcuL3ZvbHVtZS1jb250cm9sL3ZvbHVtZS1jb250cm9sLmpzJztcbmltcG9ydCBWb2x1bWVNZW51QnV0dG9uIGZyb20gJy4vdm9sdW1lLW1lbnUtYnV0dG9uLmpzJztcbmltcG9ydCBNdXRlVG9nZ2xlIGZyb20gJy4vbXV0ZS10b2dnbGUuanMnO1xuaW1wb3J0IENoYXB0ZXJzQnV0dG9uIGZyb20gJy4vdGV4dC10cmFjay1jb250cm9scy9jaGFwdGVycy1idXR0b24uanMnO1xuaW1wb3J0IFN1YnRpdGxlc0J1dHRvbiBmcm9tICcuL3RleHQtdHJhY2stY29udHJvbHMvc3VidGl0bGVzLWJ1dHRvbi5qcyc7XG5pbXBvcnQgQ2FwdGlvbnNCdXR0b24gZnJvbSAnLi90ZXh0LXRyYWNrLWNvbnRyb2xzL2NhcHRpb25zLWJ1dHRvbi5qcyc7XG5pbXBvcnQgUGxheWJhY2tSYXRlTWVudUJ1dHRvbiBmcm9tICcuL3BsYXliYWNrLXJhdGUtbWVudS9wbGF5YmFjay1yYXRlLW1lbnUtYnV0dG9uLmpzJztcbmltcG9ydCBDdXN0b21Db250cm9sU3BhY2VyIGZyb20gJy4vc3BhY2VyLWNvbnRyb2xzL2N1c3RvbS1jb250cm9sLXNwYWNlci5qcyc7XG5cbi8qKlxuICogQ29udGFpbmVyIG9mIG1haW4gY29udHJvbHNcbiAqIEBwYXJhbSB7UGxheWVyfE9iamVjdH0gcGxheWVyXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbnNcbiAqIEBjbGFzc1xuICogQGNvbnN0cnVjdG9yXG4gKiBAZXh0ZW5kcyBDb21wb25lbnRcbiAqL1xuY2xhc3MgQ29udHJvbEJhciBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNyZWF0ZUVsKCkge1xuICAgIHJldHVybiBMaWIuY3JlYXRlRWwoJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3Zqcy1jb250cm9sLWJhcidcbiAgICB9KTtcbiAgfVxufVxuXG5Db250cm9sQmFyLnByb3RvdHlwZS5vcHRpb25zXyA9IHtcbiAgbG9hZEV2ZW50OiAncGxheScsXG4gIGNoaWxkcmVuOiBbXG4gICAgJ3BsYXlUb2dnbGUnLFxuICAgICdjdXJyZW50VGltZURpc3BsYXknLFxuICAgICd0aW1lRGl2aWRlcicsXG4gICAgJ2R1cmF0aW9uRGlzcGxheScsXG4gICAgJ3Byb2dyZXNzQ29udHJvbCcsXG4gICAgJ2xpdmVEaXNwbGF5JyxcbiAgICAncmVtYWluaW5nVGltZURpc3BsYXknLFxuICAgICdjdXN0b21Db250cm9sU3BhY2VyJyxcbiAgICAncGxheWJhY2tSYXRlTWVudUJ1dHRvbicsXG4gICAgJ211dGVUb2dnbGUnLFxuICAgICd2b2x1bWVDb250cm9sJyxcbiAgICAnY2hhcHRlcnNCdXR0b24nLFxuICAgICdzdWJ0aXRsZXNCdXR0b24nLFxuICAgICdjYXB0aW9uc0J1dHRvbicsXG4gICAgJ3ZvbHVtZU1lbnVCdXR0b24nLFxuICAgICdmdWxsc2NyZWVuVG9nZ2xlJ1xuICBdXG59O1xuXG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ0NvbnRyb2xCYXInLCBDb250cm9sQmFyKTtcbmV4cG9ydCBkZWZhdWx0IENvbnRyb2xCYXI7XG4iLCJpbXBvcnQgQnV0dG9uIGZyb20gJy4uL2J1dHRvbic7XG5cbi8qKlxuICogVG9nZ2xlIGZ1bGxzY3JlZW4gdmlkZW9cbiAqIEBwYXJhbSB7UGxheWVyfE9iamVjdH0gcGxheWVyXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbnNcbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgdmpzLkJ1dHRvblxuICovXG5jbGFzcyBGdWxsc2NyZWVuVG9nZ2xlIGV4dGVuZHMgQnV0dG9uIHtcblxuICBidWlsZENTU0NsYXNzKCkge1xuICAgIHJldHVybiBgdmpzLWZ1bGxzY3JlZW4tY29udHJvbCAke3N1cGVyLmJ1aWxkQ1NTQ2xhc3MoKX1gO1xuICB9XG5cbiAgaGFuZGxlQ2xpY2soKSB7XG4gICAgaWYgKCF0aGlzLnBsYXllcl8uaXNGdWxsc2NyZWVuKCkpIHtcbiAgICAgIHRoaXMucGxheWVyXy5yZXF1ZXN0RnVsbHNjcmVlbigpO1xuICAgICAgdGhpcy5jb250cm9sVGV4dF8uaW5uZXJIVE1MID0gdGhpcy5sb2NhbGl6ZSgnTm9uLUZ1bGxzY3JlZW4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wbGF5ZXJfLmV4aXRGdWxsc2NyZWVuKCk7XG4gICAgICB0aGlzLmNvbnRyb2xUZXh0Xy5pbm5lckhUTUwgPSB0aGlzLmxvY2FsaXplKCdGdWxsc2NyZWVuJyk7XG4gICAgfVxuICB9XG5cbn1cblxuRnVsbHNjcmVlblRvZ2dsZS5wcm90b3R5cGUuYnV0dG9uVGV4dCA9ICdGdWxsc2NyZWVuJztcblxuQnV0dG9uLnJlZ2lzdGVyQ29tcG9uZW50KCdGdWxsc2NyZWVuVG9nZ2xlJywgRnVsbHNjcmVlblRvZ2dsZSk7XG5leHBvcnQgZGVmYXVsdCBGdWxsc2NyZWVuVG9nZ2xlO1xuIiwiaW1wb3J0IENvbXBvbmVudCBmcm9tICcuLi9jb21wb25lbnQnO1xuaW1wb3J0ICogYXMgTGliIGZyb20gJy4uL2xpYic7XG5cbi8qKlxuICogRGlzcGxheXMgdGhlIGxpdmUgaW5kaWNhdG9yXG4gKiBUT0RPIC0gRnV0dXJlIG1ha2UgaXQgY2xpY2sgdG8gc25hcCB0byBsaXZlXG4gKiBAcGFyYW0ge1BsYXllcnxPYmplY3R9IHBsYXllclxuICogQHBhcmFtIHtPYmplY3Q9fSBvcHRpb25zXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuY2xhc3MgTGl2ZURpc3BsYXkgZXh0ZW5kcyBDb21wb25lbnQge1xuXG4gIGNyZWF0ZUVsKCkge1xuICAgIHZhciBlbCA9IHN1cGVyLmNyZWF0ZUVsKCdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICd2anMtbGl2ZS1jb250cm9sIHZqcy1jb250cm9sJ1xuICAgIH0pO1xuXG4gICAgdGhpcy5jb250ZW50RWxfID0gTGliLmNyZWF0ZUVsKCdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICd2anMtbGl2ZS1kaXNwbGF5JyxcbiAgICAgIGlubmVySFRNTDogYDxzcGFuIGNsYXNzPVwidmpzLWNvbnRyb2wtdGV4dFwiPiR7dGhpcy5sb2NhbGl6ZSgnU3RyZWFtIFR5cGUnKX08L3NwYW4+JHt0aGlzLmxvY2FsaXplKCdMSVZFJyl9YCxcbiAgICAgICdhcmlhLWxpdmUnOiAnb2ZmJ1xuICAgIH0pO1xuXG4gICAgZWwuYXBwZW5kQ2hpbGQodGhpcy5jb250ZW50RWxfKTtcblxuICAgIHJldHVybiBlbDtcbiAgfVxuXG59XG5cbkNvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudCgnTGl2ZURpc3BsYXknLCBMaXZlRGlzcGxheSk7XG5leHBvcnQgZGVmYXVsdCBMaXZlRGlzcGxheTtcbiIsImltcG9ydCBCdXR0b24gZnJvbSAnLi4vYnV0dG9uJztcbmltcG9ydCBDb21wb25lbnQgZnJvbSAnLi4vY29tcG9uZW50JztcbmltcG9ydCAqIGFzIExpYiBmcm9tICcuLi9saWInO1xuXG4vKipcbiAqIEEgYnV0dG9uIGNvbXBvbmVudCBmb3IgbXV0aW5nIHRoZSBhdWRpb1xuICpcbiAqIEBwYXJhbSB7UGxheWVyfE9iamVjdH0gcGxheWVyXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbnNcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5jbGFzcyBNdXRlVG9nZ2xlIGV4dGVuZHMgQnV0dG9uIHtcblxuICBjb25zdHJ1Y3RvcihwbGF5ZXIsIG9wdGlvbnMpIHtcbiAgICBzdXBlcihwbGF5ZXIsIG9wdGlvbnMpO1xuXG4gICAgdGhpcy5vbihwbGF5ZXIsICd2b2x1bWVjaGFuZ2UnLCB0aGlzLnVwZGF0ZSk7XG5cbiAgICAvLyBoaWRlIG11dGUgdG9nZ2xlIGlmIHRoZSBjdXJyZW50IHRlY2ggZG9lc24ndCBzdXBwb3J0IHZvbHVtZSBjb250cm9sXG4gICAgaWYgKHBsYXllci50ZWNoICYmIHBsYXllci50ZWNoWydmZWF0dXJlc1ZvbHVtZUNvbnRyb2wnXSA9PT0gZmFsc2UpIHtcbiAgICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy1oaWRkZW4nKTtcbiAgICB9XG5cbiAgICB0aGlzLm9uKHBsYXllciwgJ2xvYWRzdGFydCcsIGZ1bmN0aW9uKCl7XG4gICAgICBpZiAocGxheWVyLnRlY2hbJ2ZlYXR1cmVzVm9sdW1lQ29udHJvbCddID09PSBmYWxzZSkge1xuICAgICAgICB0aGlzLmFkZENsYXNzKCd2anMtaGlkZGVuJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnJlbW92ZUNsYXNzKCd2anMtaGlkZGVuJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBjcmVhdGVFbCgpIHtcbiAgICByZXR1cm4gc3VwZXIuY3JlYXRlRWwoJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogdGhpcy5idWlsZENTU0NsYXNzKCksXG4gICAgICBpbm5lckhUTUw6IGA8ZGl2PjxzcGFuIGNsYXNzPVwidmpzLWNvbnRyb2wtdGV4dFwiPiR7dGhpcy5sb2NhbGl6ZSgnTXV0ZScpfTwvc3Bhbj48L2Rpdj5gXG4gICAgfSk7XG4gIH1cblxuICBidWlsZENTU0NsYXNzKCkge1xuICAgIHJldHVybiBgdmpzLW11dGUtY29udHJvbCAke3N1cGVyLmJ1aWxkQ1NTQ2xhc3MoKX1gO1xuICB9XG5cbiAgaGFuZGxlQ2xpY2soKSB7XG4gICAgdGhpcy5wbGF5ZXJfLm11dGVkKCB0aGlzLnBsYXllcl8ubXV0ZWQoKSA/IGZhbHNlIDogdHJ1ZSApO1xuICB9XG5cbiAgdXBkYXRlKCkge1xuICAgIHZhciB2b2wgPSB0aGlzLnBsYXllcl8udm9sdW1lKCksXG4gICAgICAgIGxldmVsID0gMztcblxuICAgIGlmICh2b2wgPT09IDAgfHwgdGhpcy5wbGF5ZXJfLm11dGVkKCkpIHtcbiAgICAgIGxldmVsID0gMDtcbiAgICB9IGVsc2UgaWYgKHZvbCA8IDAuMzMpIHtcbiAgICAgIGxldmVsID0gMTtcbiAgICB9IGVsc2UgaWYgKHZvbCA8IDAuNjcpIHtcbiAgICAgIGxldmVsID0gMjtcbiAgICB9XG5cbiAgICAvLyBEb24ndCByZXdyaXRlIHRoZSBidXR0b24gdGV4dCBpZiB0aGUgYWN0dWFsIHRleHQgZG9lc24ndCBjaGFuZ2UuXG4gICAgLy8gVGhpcyBjYXVzZXMgdW5uZWNlc3NhcnkgYW5kIGNvbmZ1c2luZyBpbmZvcm1hdGlvbiBmb3Igc2NyZWVuIHJlYWRlciB1c2Vycy5cbiAgICAvLyBUaGlzIGNoZWNrIGlzIG5lZWRlZCBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gZ2V0cyBjYWxsZWQgZXZlcnkgdGltZSB0aGUgdm9sdW1lIGxldmVsIGlzIGNoYW5nZWQuXG4gICAgbGV0IHRvTXV0ZSA9IHRoaXMucGxheWVyXy5tdXRlZCgpID8gJ1VubXV0ZScgOiAnTXV0ZSc7XG4gICAgbGV0IGxvY2FsaXplZE11dGUgPSB0aGlzLmxvY2FsaXplKHRvTXV0ZSk7XG4gICAgaWYgKHRoaXMuZWxfLmNoaWxkcmVuWzBdLmNoaWxkcmVuWzBdLmlubmVySFRNTCAhPT0gbG9jYWxpemVkTXV0ZSkge1xuICAgICAgdGhpcy5lbF8uY2hpbGRyZW5bMF0uY2hpbGRyZW5bMF0uaW5uZXJIVE1MID0gbG9jYWxpemVkTXV0ZTtcbiAgICB9XG5cbiAgICAvKiBUT0RPIGltcHJvdmUgbXV0ZWQgaWNvbiBjbGFzc2VzICovXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICAgIExpYi5yZW1vdmVDbGFzcyh0aGlzLmVsXywgYHZqcy12b2wtJHtpfWApO1xuICAgIH1cbiAgICBMaWIuYWRkQ2xhc3ModGhpcy5lbF8sIGB2anMtdm9sLSR7bGV2ZWx9YCk7XG4gIH1cblxufVxuXG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ011dGVUb2dnbGUnLCBNdXRlVG9nZ2xlKTtcbmV4cG9ydCBkZWZhdWx0IE11dGVUb2dnbGU7XG4iLCJpbXBvcnQgQnV0dG9uIGZyb20gJy4uL2J1dHRvbic7XG5pbXBvcnQgKiBhcyBMaWIgZnJvbSAnLi4vbGliJztcblxuLyoqXG4gKiBCdXR0b24gdG8gdG9nZ2xlIGJldHdlZW4gcGxheSBhbmQgcGF1c2VcbiAqIEBwYXJhbSB7UGxheWVyfE9iamVjdH0gcGxheWVyXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbnNcbiAqIEBjbGFzc1xuICogQGNvbnN0cnVjdG9yXG4gKi9cbmNsYXNzIFBsYXlUb2dnbGUgZXh0ZW5kcyBCdXR0b24ge1xuXG4gIGNvbnN0cnVjdG9yKHBsYXllciwgb3B0aW9ucyl7XG4gICAgc3VwZXIocGxheWVyLCBvcHRpb25zKTtcblxuICAgIHRoaXMub24ocGxheWVyLCAncGxheScsIHRoaXMuaGFuZGxlUGxheSk7XG4gICAgdGhpcy5vbihwbGF5ZXIsICdwYXVzZScsIHRoaXMuaGFuZGxlUGF1c2UpO1xuICB9XG5cbiAgYnVpbGRDU1NDbGFzcygpIHtcbiAgICByZXR1cm4gYHZqcy1wbGF5LWNvbnRyb2wgJHtzdXBlci5idWlsZENTU0NsYXNzKCl9YDtcbiAgfVxuXG4gIC8vIGhhbmRsZUNsaWNrIC0gVG9nZ2xlIGJldHdlZW4gcGxheSBhbmQgcGF1c2VcbiAgaGFuZGxlQ2xpY2soKSB7XG4gICAgaWYgKHRoaXMucGxheWVyXy5wYXVzZWQoKSkge1xuICAgICAgdGhpcy5wbGF5ZXJfLnBsYXkoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wbGF5ZXJfLnBhdXNlKCk7XG4gICAgfVxuICB9XG5cbiAgLy8gaGFuZGxlUGxheSAtIEFkZCB0aGUgdmpzLXBsYXlpbmcgY2xhc3MgdG8gdGhlIGVsZW1lbnQgc28gaXQgY2FuIGNoYW5nZSBhcHBlYXJhbmNlXG4gIGhhbmRsZVBsYXkoKSB7XG4gICAgdGhpcy5yZW1vdmVDbGFzcygndmpzLXBhdXNlZCcpO1xuICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy1wbGF5aW5nJyk7XG4gICAgdGhpcy5lbF8uY2hpbGRyZW5bMF0uY2hpbGRyZW5bMF0uaW5uZXJIVE1MID0gdGhpcy5sb2NhbGl6ZSgnUGF1c2UnKTsgLy8gY2hhbmdlIHRoZSBidXR0b24gdGV4dCB0byBcIlBhdXNlXCJcbiAgfVxuXG4gIC8vIGhhbmRsZVBhdXNlIC0gQWRkIHRoZSB2anMtcGF1c2VkIGNsYXNzIHRvIHRoZSBlbGVtZW50IHNvIGl0IGNhbiBjaGFuZ2UgYXBwZWFyYW5jZVxuICBoYW5kbGVQYXVzZSgpIHtcbiAgICB0aGlzLnJlbW92ZUNsYXNzKCd2anMtcGxheWluZycpO1xuICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy1wYXVzZWQnKTtcbiAgICB0aGlzLmVsXy5jaGlsZHJlblswXS5jaGlsZHJlblswXS5pbm5lckhUTUwgPSB0aGlzLmxvY2FsaXplKCdQbGF5Jyk7IC8vIGNoYW5nZSB0aGUgYnV0dG9uIHRleHQgdG8gXCJQbGF5XCJcbiAgfVxuXG59XG5cblBsYXlUb2dnbGUucHJvdG90eXBlLmJ1dHRvblRleHQgPSAnUGxheSc7XG5cbkJ1dHRvbi5yZWdpc3RlckNvbXBvbmVudCgnUGxheVRvZ2dsZScsIFBsYXlUb2dnbGUpO1xuZXhwb3J0IGRlZmF1bHQgUGxheVRvZ2dsZTtcbiIsImltcG9ydCBNZW51QnV0dG9uIGZyb20gJy4uLy4uL21lbnUvbWVudS1idXR0b24uanMnO1xuaW1wb3J0IE1lbnUgZnJvbSAnLi4vLi4vbWVudS9tZW51LmpzJztcbmltcG9ydCBQbGF5YmFja1JhdGVNZW51SXRlbSBmcm9tICcuL3BsYXliYWNrLXJhdGUtbWVudS1pdGVtLmpzJztcbmltcG9ydCAqIGFzIExpYiBmcm9tICcuLi8uLi9saWIuanMnO1xuXG4vKipcbiAqIFRoZSBjb21wb25lbnQgZm9yIGNvbnRyb2xsaW5nIHRoZSBwbGF5YmFjayByYXRlXG4gKlxuICogQHBhcmFtIHtQbGF5ZXJ8T2JqZWN0fSBwbGF5ZXJcbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0aW9uc1xuICogQGNvbnN0cnVjdG9yXG4gKi9cbmNsYXNzIFBsYXliYWNrUmF0ZU1lbnVCdXR0b24gZXh0ZW5kcyBNZW51QnV0dG9uIHtcblxuICBjb25zdHJ1Y3RvcihwbGF5ZXIsIG9wdGlvbnMpe1xuICAgIHN1cGVyKHBsYXllciwgb3B0aW9ucyk7XG5cbiAgICB0aGlzLnVwZGF0ZVZpc2liaWxpdHkoKTtcbiAgICB0aGlzLnVwZGF0ZUxhYmVsKCk7XG5cbiAgICB0aGlzLm9uKHBsYXllciwgJ2xvYWRzdGFydCcsIHRoaXMudXBkYXRlVmlzaWJpbGl0eSk7XG4gICAgdGhpcy5vbihwbGF5ZXIsICdyYXRlY2hhbmdlJywgdGhpcy51cGRhdGVMYWJlbCk7XG4gIH1cblxuICBjcmVhdGVFbCgpIHtcbiAgICBsZXQgZWwgPSBzdXBlci5jcmVhdGVFbCgpO1xuXG4gICAgdGhpcy5sYWJlbEVsXyA9IExpYi5jcmVhdGVFbCgnZGl2Jywge1xuICAgICAgY2xhc3NOYW1lOiAndmpzLXBsYXliYWNrLXJhdGUtdmFsdWUnLFxuICAgICAgaW5uZXJIVE1MOiAxLjBcbiAgICB9KTtcblxuICAgIGVsLmFwcGVuZENoaWxkKHRoaXMubGFiZWxFbF8pO1xuXG4gICAgcmV0dXJuIGVsO1xuICB9XG5cbiAgLy8gTWVudSBjcmVhdGlvblxuICBjcmVhdGVNZW51KCkge1xuICAgIGxldCBtZW51ID0gbmV3IE1lbnUodGhpcy5wbGF5ZXIoKSk7XG4gICAgbGV0IHJhdGVzID0gdGhpcy5wbGF5ZXIoKS5vcHRpb25zKClbJ3BsYXliYWNrUmF0ZXMnXTtcblxuICAgIGlmIChyYXRlcykge1xuICAgICAgZm9yIChsZXQgaSA9IHJhdGVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIG1lbnUuYWRkQ2hpbGQoXG4gICAgICAgICAgbmV3IFBsYXliYWNrUmF0ZU1lbnVJdGVtKHRoaXMucGxheWVyKCksIHsgJ3JhdGUnOiByYXRlc1tpXSArICd4J30pXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbnU7XG4gIH1cblxuICB1cGRhdGVBUklBQXR0cmlidXRlcygpIHtcbiAgICAvLyBDdXJyZW50IHBsYXliYWNrIHJhdGVcbiAgICB0aGlzLmVsKCkuc2V0QXR0cmlidXRlKCdhcmlhLXZhbHVlbm93JywgdGhpcy5wbGF5ZXIoKS5wbGF5YmFja1JhdGUoKSk7XG4gIH1cblxuICBoYW5kbGVDbGljaygpIHtcbiAgICAvLyBzZWxlY3QgbmV4dCByYXRlIG9wdGlvblxuICAgIGxldCBjdXJyZW50UmF0ZSA9IHRoaXMucGxheWVyKCkucGxheWJhY2tSYXRlKCk7XG4gICAgbGV0IHJhdGVzID0gdGhpcy5wbGF5ZXIoKS5vcHRpb25zKClbJ3BsYXliYWNrUmF0ZXMnXTtcbiAgICAvLyB0aGlzIHdpbGwgc2VsZWN0IGZpcnN0IG9uZSBpZiB0aGUgbGFzdCBvbmUgY3VycmVudGx5IHNlbGVjdGVkXG4gICAgbGV0IG5ld1JhdGUgPSByYXRlc1swXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8cmF0ZXMubGVuZ3RoIDsgaSsrKSB7XG4gICAgICBpZiAocmF0ZXNbaV0gPiBjdXJyZW50UmF0ZSkge1xuICAgICAgICBuZXdSYXRlID0gcmF0ZXNbaV07XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnBsYXllcigpLnBsYXliYWNrUmF0ZShuZXdSYXRlKTtcbiAgfVxuXG4gIHBsYXliYWNrUmF0ZVN1cHBvcnRlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5wbGF5ZXIoKS50ZWNoXG4gICAgICAmJiB0aGlzLnBsYXllcigpLnRlY2hbJ2ZlYXR1cmVzUGxheWJhY2tSYXRlJ11cbiAgICAgICYmIHRoaXMucGxheWVyKCkub3B0aW9ucygpWydwbGF5YmFja1JhdGVzJ11cbiAgICAgICYmIHRoaXMucGxheWVyKCkub3B0aW9ucygpWydwbGF5YmFja1JhdGVzJ10ubGVuZ3RoID4gMFxuICAgIDtcbiAgfVxuXG4gIC8qKlxuICAgKiBIaWRlIHBsYXliYWNrIHJhdGUgY29udHJvbHMgd2hlbiB0aGV5J3JlIG5vIHBsYXliYWNrIHJhdGUgb3B0aW9ucyB0byBzZWxlY3RcbiAgICovXG4gIHVwZGF0ZVZpc2liaWxpdHkoKSB7XG4gICAgaWYgKHRoaXMucGxheWJhY2tSYXRlU3VwcG9ydGVkKCkpIHtcbiAgICAgIHRoaXMucmVtb3ZlQ2xhc3MoJ3Zqcy1oaWRkZW4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hZGRDbGFzcygndmpzLWhpZGRlbicpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgYnV0dG9uIGxhYmVsIHdoZW4gcmF0ZSBjaGFuZ2VkXG4gICAqL1xuICB1cGRhdGVMYWJlbCgpIHtcbiAgICBpZiAodGhpcy5wbGF5YmFja1JhdGVTdXBwb3J0ZWQoKSkge1xuICAgICAgdGhpcy5sYWJlbEVsXy5pbm5lckhUTUwgPSB0aGlzLnBsYXllcigpLnBsYXliYWNrUmF0ZSgpICsgJ3gnO1xuICAgIH1cbiAgfVxuXG59XG5cblBsYXliYWNrUmF0ZU1lbnVCdXR0b24ucHJvdG90eXBlLmJ1dHRvblRleHQgPSAnUGxheWJhY2sgUmF0ZSc7XG5QbGF5YmFja1JhdGVNZW51QnV0dG9uLnByb3RvdHlwZS5jbGFzc05hbWUgPSAndmpzLXBsYXliYWNrLXJhdGUnO1xuXG5NZW51QnV0dG9uLnJlZ2lzdGVyQ29tcG9uZW50KCdQbGF5YmFja1JhdGVNZW51QnV0dG9uJywgUGxheWJhY2tSYXRlTWVudUJ1dHRvbik7XG5leHBvcnQgZGVmYXVsdCBQbGF5YmFja1JhdGVNZW51QnV0dG9uO1xuIiwiaW1wb3J0IE1lbnVJdGVtIGZyb20gJy4uLy4uL21lbnUvbWVudS1pdGVtLmpzJztcblxuLyoqXG4gKiBUaGUgc3BlY2lmaWMgbWVudSBpdGVtIHR5cGUgZm9yIHNlbGVjdGluZyBhIHBsYXliYWNrIHJhdGVcbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuY2xhc3MgUGxheWJhY2tSYXRlTWVudUl0ZW0gZXh0ZW5kcyBNZW51SXRlbSB7XG5cbiAgY29uc3RydWN0b3IocGxheWVyLCBvcHRpb25zKXtcbiAgICBsZXQgbGFiZWwgPSBvcHRpb25zWydyYXRlJ107XG4gICAgbGV0IHJhdGUgPSBwYXJzZUZsb2F0KGxhYmVsLCAxMCk7XG5cbiAgICAvLyBNb2RpZnkgb3B0aW9ucyBmb3IgcGFyZW50IE1lbnVJdGVtIGNsYXNzJ3MgaW5pdC5cbiAgICBvcHRpb25zWydsYWJlbCddID0gbGFiZWw7XG4gICAgb3B0aW9uc1snc2VsZWN0ZWQnXSA9IHJhdGUgPT09IDE7XG4gICAgc3VwZXIocGxheWVyLCBvcHRpb25zKTtcblxuICAgIHRoaXMubGFiZWwgPSBsYWJlbDtcbiAgICB0aGlzLnJhdGUgPSByYXRlO1xuXG4gICAgdGhpcy5vbihwbGF5ZXIsICdyYXRlY2hhbmdlJywgdGhpcy51cGRhdGUpO1xuICB9XG5cbiAgaGFuZGxlQ2xpY2soKSB7XG4gICAgc3VwZXIuaGFuZGxlQ2xpY2soKTtcbiAgICB0aGlzLnBsYXllcigpLnBsYXliYWNrUmF0ZSh0aGlzLnJhdGUpO1xuICB9XG5cbiAgdXBkYXRlKCkge1xuICAgIHRoaXMuc2VsZWN0ZWQodGhpcy5wbGF5ZXIoKS5wbGF5YmFja1JhdGUoKSA9PT0gdGhpcy5yYXRlKTtcbiAgfVxuXG59XG5cblBsYXliYWNrUmF0ZU1lbnVJdGVtLnByb3RvdHlwZS5jb250ZW50RWxUeXBlID0gJ2J1dHRvbic7XG5cbk1lbnVJdGVtLnJlZ2lzdGVyQ29tcG9uZW50KCdQbGF5YmFja1JhdGVNZW51SXRlbScsIFBsYXliYWNrUmF0ZU1lbnVJdGVtKTtcbmV4cG9ydCBkZWZhdWx0IFBsYXliYWNrUmF0ZU1lbnVJdGVtO1xuIiwiaW1wb3J0IENvbXBvbmVudCBmcm9tICcuLi8uLi9jb21wb25lbnQuanMnO1xuaW1wb3J0ICogYXMgTGliIGZyb20gJy4uLy4uL2xpYi5qcyc7XG5cbi8qKlxuICogU2hvd3MgbG9hZCBwcm9ncmVzc1xuICpcbiAqIEBwYXJhbSB7UGxheWVyfE9iamVjdH0gcGxheWVyXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbnNcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5jbGFzcyBMb2FkUHJvZ3Jlc3NCYXIgZXh0ZW5kcyBDb21wb25lbnQge1xuXG4gIGNvbnN0cnVjdG9yKHBsYXllciwgb3B0aW9ucyl7XG4gICAgc3VwZXIocGxheWVyLCBvcHRpb25zKTtcbiAgICB0aGlzLm9uKHBsYXllciwgJ3Byb2dyZXNzJywgdGhpcy51cGRhdGUpO1xuICB9XG5cbiAgY3JlYXRlRWwoKSB7XG4gICAgcmV0dXJuIHN1cGVyLmNyZWF0ZUVsKCdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICd2anMtbG9hZC1wcm9ncmVzcycsXG4gICAgICBpbm5lckhUTUw6IGA8c3BhbiBjbGFzcz1cInZqcy1jb250cm9sLXRleHRcIj48c3Bhbj4ke3RoaXMubG9jYWxpemUoJ0xvYWRlZCcpfTwvc3Bhbj46IDAlPC9zcGFuPmBcbiAgICB9KTtcbiAgfVxuXG4gIHVwZGF0ZSgpIHtcbiAgICBsZXQgYnVmZmVyZWQgPSB0aGlzLnBsYXllcl8uYnVmZmVyZWQoKTtcbiAgICBsZXQgZHVyYXRpb24gPSB0aGlzLnBsYXllcl8uZHVyYXRpb24oKTtcbiAgICBsZXQgYnVmZmVyZWRFbmQgPSB0aGlzLnBsYXllcl8uYnVmZmVyZWRFbmQoKTtcbiAgICBsZXQgY2hpbGRyZW4gPSB0aGlzLmVsXy5jaGlsZHJlbjtcblxuICAgIC8vIGdldCB0aGUgcGVyY2VudCB3aWR0aCBvZiBhIHRpbWUgY29tcGFyZWQgdG8gdGhlIHRvdGFsIGVuZFxuICAgIGxldCBwZXJjZW50aWZ5ID0gZnVuY3Rpb24gKHRpbWUsIGVuZCl7XG4gICAgICBsZXQgcGVyY2VudCA9ICh0aW1lIC8gZW5kKSB8fCAwOyAvLyBubyBOYU5cbiAgICAgIHJldHVybiAoKHBlcmNlbnQgPj0gMSA/IDEgOiBwZXJjZW50KSAqIDEwMCkgKyAnJSc7XG4gICAgfTtcblxuICAgIC8vIHVwZGF0ZSB0aGUgd2lkdGggb2YgdGhlIHByb2dyZXNzIGJhclxuICAgIHRoaXMuZWxfLnN0eWxlLndpZHRoID0gcGVyY2VudGlmeShidWZmZXJlZEVuZCwgZHVyYXRpb24pO1xuXG4gICAgLy8gYWRkIGNoaWxkIGVsZW1lbnRzIHRvIHJlcHJlc2VudCB0aGUgaW5kaXZpZHVhbCBidWZmZXJlZCB0aW1lIHJhbmdlc1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnVmZmVyZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBzdGFydCA9IGJ1ZmZlcmVkLnN0YXJ0KGkpO1xuICAgICAgbGV0IGVuZCA9IGJ1ZmZlcmVkLmVuZChpKTtcbiAgICAgIGxldCBwYXJ0ID0gY2hpbGRyZW5baV07XG5cbiAgICAgIGlmICghcGFydCkge1xuICAgICAgICBwYXJ0ID0gdGhpcy5lbF8uYXBwZW5kQ2hpbGQoTGliLmNyZWF0ZUVsKCkpO1xuICAgICAgfVxuXG4gICAgICAvLyBzZXQgdGhlIHBlcmNlbnQgYmFzZWQgb24gdGhlIHdpZHRoIG9mIHRoZSBwcm9ncmVzcyBiYXIgKGJ1ZmZlcmVkRW5kKVxuICAgICAgcGFydC5zdHlsZS5sZWZ0ID0gcGVyY2VudGlmeShzdGFydCwgYnVmZmVyZWRFbmQpO1xuICAgICAgcGFydC5zdHlsZS53aWR0aCA9IHBlcmNlbnRpZnkoZW5kIC0gc3RhcnQsIGJ1ZmZlcmVkRW5kKTtcbiAgICB9XG5cbiAgICAvLyByZW1vdmUgdW51c2VkIGJ1ZmZlcmVkIHJhbmdlIGVsZW1lbnRzXG4gICAgZm9yIChsZXQgaSA9IGNoaWxkcmVuLmxlbmd0aDsgaSA+IGJ1ZmZlcmVkLmxlbmd0aDsgaS0tKSB7XG4gICAgICB0aGlzLmVsXy5yZW1vdmVDaGlsZChjaGlsZHJlbltpLTFdKTtcbiAgICB9XG4gIH1cblxufVxuXG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ0xvYWRQcm9ncmVzc0JhcicsIExvYWRQcm9ncmVzc0Jhcik7XG5leHBvcnQgZGVmYXVsdCBMb2FkUHJvZ3Jlc3NCYXI7XG4iLCJpbXBvcnQgQ29tcG9uZW50IGZyb20gJy4uLy4uL2NvbXBvbmVudC5qcyc7XG5cbi8qKlxuICogU2hvd3MgcGxheSBwcm9ncmVzc1xuICpcbiAqIEBwYXJhbSB7UGxheWVyfE9iamVjdH0gcGxheWVyXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbnNcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5jbGFzcyBQbGF5UHJvZ3Jlc3NCYXIgZXh0ZW5kcyBDb21wb25lbnQge1xuXG4gIGNyZWF0ZUVsKCkge1xuICAgIHJldHVybiBzdXBlci5jcmVhdGVFbCgnZGl2Jywge1xuICAgICAgY2xhc3NOYW1lOiAndmpzLXBsYXktcHJvZ3Jlc3MnLFxuICAgICAgaW5uZXJIVE1MOiBgPHNwYW4gY2xhc3M9XCJ2anMtY29udHJvbC10ZXh0XCI+PHNwYW4+JHt0aGlzLmxvY2FsaXplKCdQcm9ncmVzcycpfTwvc3Bhbj46IDAlPC9zcGFuPmBcbiAgICB9KTtcbiAgfVxuXG59XG5cbkNvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudCgnUGxheVByb2dyZXNzQmFyJywgUGxheVByb2dyZXNzQmFyKTtcbmV4cG9ydCBkZWZhdWx0IFBsYXlQcm9ncmVzc0JhcjtcbiIsImltcG9ydCBDb21wb25lbnQgZnJvbSAnLi4vLi4vY29tcG9uZW50LmpzJztcbmltcG9ydCBTZWVrQmFyIGZyb20gJy4vc2Vlay1iYXIuanMnO1xuXG4vKipcbiAqIFRoZSBQcm9ncmVzcyBDb250cm9sIGNvbXBvbmVudCBjb250YWlucyB0aGUgc2VlayBiYXIsIGxvYWQgcHJvZ3Jlc3MsXG4gKiBhbmQgcGxheSBwcm9ncmVzc1xuICpcbiAqIEBwYXJhbSB7UGxheWVyfE9iamVjdH0gcGxheWVyXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbnNcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5jbGFzcyBQcm9ncmVzc0NvbnRyb2wgZXh0ZW5kcyBDb21wb25lbnQge1xuICBjcmVhdGVFbCgpIHtcbiAgICByZXR1cm4gc3VwZXIuY3JlYXRlRWwoJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3Zqcy1wcm9ncmVzcy1jb250cm9sIHZqcy1jb250cm9sJ1xuICAgIH0pO1xuICB9XG59XG5cblByb2dyZXNzQ29udHJvbC5wcm90b3R5cGUub3B0aW9uc18gPSB7XG4gIGNoaWxkcmVuOiB7XG4gICAgJ3NlZWtCYXInOiB7fVxuICB9XG59O1xuXG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ1Byb2dyZXNzQ29udHJvbCcsIFByb2dyZXNzQ29udHJvbCk7XG5leHBvcnQgZGVmYXVsdCBQcm9ncmVzc0NvbnRyb2w7XG4iLCJpbXBvcnQgU2xpZGVyIGZyb20gJy4uLy4uL3NsaWRlci9zbGlkZXIuanMnO1xuaW1wb3J0IExvYWRQcm9ncmVzc0JhciBmcm9tICcuL2xvYWQtcHJvZ3Jlc3MtYmFyLmpzJztcbmltcG9ydCBQbGF5UHJvZ3Jlc3NCYXIgZnJvbSAnLi9wbGF5LXByb2dyZXNzLWJhci5qcyc7XG5pbXBvcnQgU2Vla0hhbmRsZSBmcm9tICcuL3NlZWstaGFuZGxlLmpzJztcbmltcG9ydCAqIGFzIExpYiBmcm9tICcuLi8uLi9saWIuanMnO1xuXG4vKipcbiAqIFNlZWsgQmFyIGFuZCBob2xkZXIgZm9yIHRoZSBwcm9ncmVzcyBiYXJzXG4gKlxuICogQHBhcmFtIHtQbGF5ZXJ8T2JqZWN0fSBwbGF5ZXJcbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0aW9uc1xuICogQGNvbnN0cnVjdG9yXG4gKi9cbmNsYXNzIFNlZWtCYXIgZXh0ZW5kcyBTbGlkZXIge1xuXG4gIGNvbnN0cnVjdG9yKHBsYXllciwgb3B0aW9ucyl7XG4gICAgc3VwZXIocGxheWVyLCBvcHRpb25zKTtcbiAgICB0aGlzLm9uKHBsYXllciwgJ3RpbWV1cGRhdGUnLCB0aGlzLnVwZGF0ZUFSSUFBdHRyaWJ1dGVzKTtcbiAgICBwbGF5ZXIucmVhZHkoTGliLmJpbmQodGhpcywgdGhpcy51cGRhdGVBUklBQXR0cmlidXRlcykpO1xuICB9XG5cbiAgY3JlYXRlRWwoKSB7XG4gICAgcmV0dXJuIHN1cGVyLmNyZWF0ZUVsKCdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICd2anMtcHJvZ3Jlc3MtaG9sZGVyJyxcbiAgICAgICdhcmlhLWxhYmVsJzogJ3ZpZGVvIHByb2dyZXNzIGJhcidcbiAgICB9KTtcbiAgfVxuXG4gIHVwZGF0ZUFSSUFBdHRyaWJ1dGVzKCkge1xuICAgICAgLy8gQWxsb3dzIGZvciBzbW9vdGggc2NydWJiaW5nLCB3aGVuIHBsYXllciBjYW4ndCBrZWVwIHVwLlxuICAgICAgbGV0IHRpbWUgPSAodGhpcy5wbGF5ZXJfLnNjcnViYmluZygpKSA/IHRoaXMucGxheWVyXy5nZXRDYWNoZSgpLmN1cnJlbnRUaW1lIDogdGhpcy5wbGF5ZXJfLmN1cnJlbnRUaW1lKCk7XG4gICAgICB0aGlzLmVsXy5zZXRBdHRyaWJ1dGUoJ2FyaWEtdmFsdWVub3cnLCBMaWIucm91bmQodGhpcy5nZXRQZXJjZW50KCkqMTAwLCAyKSk7IC8vIG1hY2hpbmUgcmVhZGFibGUgdmFsdWUgb2YgcHJvZ3Jlc3MgYmFyIChwZXJjZW50YWdlIGNvbXBsZXRlKVxuICAgICAgdGhpcy5lbF8uc2V0QXR0cmlidXRlKCdhcmlhLXZhbHVldGV4dCcsIExpYi5mb3JtYXRUaW1lKHRpbWUsIHRoaXMucGxheWVyXy5kdXJhdGlvbigpKSk7IC8vIGh1bWFuIHJlYWRhYmxlIHZhbHVlIG9mIHByb2dyZXNzIGJhciAodGltZSBjb21wbGV0ZSlcbiAgfVxuXG4gIGdldFBlcmNlbnQoKSB7XG4gICAgbGV0IHBlcmNlbnQgPSB0aGlzLnBsYXllcl8uY3VycmVudFRpbWUoKSAvIHRoaXMucGxheWVyXy5kdXJhdGlvbigpO1xuICAgIHJldHVybiBwZXJjZW50ID49IDEgPyAxIDogcGVyY2VudDtcbiAgfVxuXG4gIGhhbmRsZU1vdXNlRG93bihldmVudCkge1xuICAgIHN1cGVyLmhhbmRsZU1vdXNlRG93bihldmVudCk7XG5cbiAgICB0aGlzLnBsYXllcl8uc2NydWJiaW5nKHRydWUpO1xuXG4gICAgdGhpcy52aWRlb1dhc1BsYXlpbmcgPSAhdGhpcy5wbGF5ZXJfLnBhdXNlZCgpO1xuICAgIHRoaXMucGxheWVyXy5wYXVzZSgpO1xuICB9XG5cbiAgaGFuZGxlTW91c2VNb3ZlKGV2ZW50KSB7XG4gICAgbGV0IG5ld1RpbWUgPSB0aGlzLmNhbGN1bGF0ZURpc3RhbmNlKGV2ZW50KSAqIHRoaXMucGxheWVyXy5kdXJhdGlvbigpO1xuXG4gICAgLy8gRG9uJ3QgbGV0IHZpZGVvIGVuZCB3aGlsZSBzY3J1YmJpbmcuXG4gICAgaWYgKG5ld1RpbWUgPT09IHRoaXMucGxheWVyXy5kdXJhdGlvbigpKSB7IG5ld1RpbWUgPSBuZXdUaW1lIC0gMC4xOyB9XG5cbiAgICAvLyBTZXQgbmV3IHRpbWUgKHRlbGwgcGxheWVyIHRvIHNlZWsgdG8gbmV3IHRpbWUpXG4gICAgdGhpcy5wbGF5ZXJfLmN1cnJlbnRUaW1lKG5ld1RpbWUpO1xuICB9XG5cbiAgaGFuZGxlTW91c2VVcChldmVudCkge1xuICAgIHN1cGVyLmhhbmRsZU1vdXNlVXAoZXZlbnQpO1xuXG4gICAgdGhpcy5wbGF5ZXJfLnNjcnViYmluZyhmYWxzZSk7XG4gICAgaWYgKHRoaXMudmlkZW9XYXNQbGF5aW5nKSB7XG4gICAgICB0aGlzLnBsYXllcl8ucGxheSgpO1xuICAgIH1cbiAgfVxuXG4gIHN0ZXBGb3J3YXJkKCkge1xuICAgIHRoaXMucGxheWVyXy5jdXJyZW50VGltZSh0aGlzLnBsYXllcl8uY3VycmVudFRpbWUoKSArIDUpOyAvLyBtb3JlIHF1aWNrbHkgZmFzdCBmb3J3YXJkIGZvciBrZXlib2FyZC1vbmx5IHVzZXJzXG4gIH1cblxuICBzdGVwQmFjaygpIHtcbiAgICB0aGlzLnBsYXllcl8uY3VycmVudFRpbWUodGhpcy5wbGF5ZXJfLmN1cnJlbnRUaW1lKCkgLSA1KTsgLy8gbW9yZSBxdWlja2x5IHJld2luZCBmb3Iga2V5Ym9hcmQtb25seSB1c2Vyc1xuICB9XG5cbn1cblxuU2Vla0Jhci5wcm90b3R5cGUub3B0aW9uc18gPSB7XG4gIGNoaWxkcmVuOiB7XG4gICAgJ2xvYWRQcm9ncmVzc0Jhcic6IHt9LFxuICAgICdwbGF5UHJvZ3Jlc3NCYXInOiB7fSxcbiAgICAnc2Vla0hhbmRsZSc6IHt9XG4gIH0sXG4gICdiYXJOYW1lJzogJ3BsYXlQcm9ncmVzc0JhcicsXG4gICdoYW5kbGVOYW1lJzogJ3NlZWtIYW5kbGUnXG59O1xuXG5TZWVrQmFyLnByb3RvdHlwZS5wbGF5ZXJFdmVudCA9ICd0aW1ldXBkYXRlJztcblxuU2xpZGVyLnJlZ2lzdGVyQ29tcG9uZW50KCdTZWVrQmFyJywgU2Vla0Jhcik7XG5leHBvcnQgZGVmYXVsdCBTZWVrQmFyO1xuIiwiaW1wb3J0IFNsaWRlckhhbmRsZSBmcm9tICcuLi8uLi9zbGlkZXIvc2xpZGVyLWhhbmRsZS5qcyc7XG5pbXBvcnQgKiBhcyBMaWIgZnJvbSAnLi4vLi4vbGliLmpzJztcblxuLyoqXG4gKiBUaGUgU2VlayBIYW5kbGUgc2hvd3MgdGhlIGN1cnJlbnQgcG9zaXRpb24gb2YgdGhlIHBsYXloZWFkIGR1cmluZyBwbGF5YmFjayxcbiAqIGFuZCBjYW4gYmUgZHJhZ2dlZCB0byBhZGp1c3QgdGhlIHBsYXloZWFkLlxuICpcbiAqIEBwYXJhbSB7UGxheWVyfE9iamVjdH0gcGxheWVyXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbnNcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5jbGFzcyBTZWVrSGFuZGxlIGV4dGVuZHMgU2xpZGVySGFuZGxlIHtcblxuICBjb25zdHJ1Y3RvcihwbGF5ZXIsIG9wdGlvbnMpIHtcbiAgICBzdXBlcihwbGF5ZXIsIG9wdGlvbnMpO1xuICAgIHRoaXMub24ocGxheWVyLCAndGltZXVwZGF0ZScsIHRoaXMudXBkYXRlQ29udGVudCk7XG4gIH1cblxuICAvKiogQGluaGVyaXREb2MgKi9cbiAgY3JlYXRlRWwoKSB7XG4gICAgcmV0dXJuIHN1cGVyLmNyZWF0ZUVsKCdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICd2anMtc2Vlay1oYW5kbGUnLFxuICAgICAgJ2FyaWEtbGl2ZSc6ICdvZmYnXG4gICAgfSk7XG4gIH1cblxuICB1cGRhdGVDb250ZW50KCkge1xuICAgIGxldCB0aW1lID0gKHRoaXMucGxheWVyXy5zY3J1YmJpbmcpID8gdGhpcy5wbGF5ZXJfLmdldENhY2hlKCkuY3VycmVudFRpbWUgOiB0aGlzLnBsYXllcl8uY3VycmVudFRpbWUoKTtcbiAgICB0aGlzLmVsXy5pbm5lckhUTUwgPSBgPHNwYW4gY2xhc3M9XCJ2anMtY29udHJvbC10ZXh0XCI+JHtMaWIuZm9ybWF0VGltZSh0aW1lLCB0aGlzLnBsYXllcl8uZHVyYXRpb24oKSl9PC9zcGFuPmA7XG4gIH1cblxufVxuXG4vKipcbiAqIFRoZSBkZWZhdWx0IHZhbHVlIGZvciB0aGUgaGFuZGxlIGNvbnRlbnQsIHdoaWNoIG1heSBiZSByZWFkIGJ5IHNjcmVlbiByZWFkZXJzXG4gKlxuICogQHR5cGUge1N0cmluZ31cbiAqIEBwcml2YXRlXG4gKi9cblNlZWtIYW5kbGUucHJvdG90eXBlLmRlZmF1bHRWYWx1ZSA9ICcwMDowMCc7XG5cblNsaWRlckhhbmRsZS5yZWdpc3RlckNvbXBvbmVudCgnU2Vla0hhbmRsZScsIFNlZWtIYW5kbGUpO1xuZXhwb3J0IGRlZmF1bHQgU2Vla0hhbmRsZTtcbiIsImltcG9ydCBTcGFjZXIgZnJvbSAnLi9zcGFjZXIuanMnO1xuXG4vKipcbiAqIFNwYWNlciBzcGVjaWZpY2FsbHkgbWVhbnQgdG8gYmUgdXNlZCBhcyBhbiBpbnNlcnRpb24gcG9pbnQgZm9yIG5ldyBwbHVnaW5zLCBldGMuXG4gKlxuICogQHBhcmFtIHtQbGF5ZXJ8T2JqZWN0fSBwbGF5ZXJcbiAqIEBwYXJhbSB7T2JlY3Q9fSBvcHRpb25zXG4gKi9cbmNsYXNzIEN1c3RvbUNvbnRyb2xTcGFjZXIgZXh0ZW5kcyBTcGFjZXIge1xuICBidWlsZENTU0NsYXNzKCkge1xuICAgIHJldHVybiBgdmpzLWN1c3RvbS1jb250cm9sLXNwYWNlciAke3N1cGVyLmJ1aWxkQ1NTQ2xhc3MoKX1gO1xuICB9XG5cbiAgY3JlYXRlRWwoKSB7XG4gICAgcmV0dXJuIHN1cGVyLmNyZWF0ZUVsKHtcbiAgICAgIGNsYXNzTmFtZTogdGhpcy5idWlsZENTU0NsYXNzKClcbiAgICB9KTtcbiAgfVxufVxuXG5TcGFjZXIucmVnaXN0ZXJDb21wb25lbnQoJ0N1c3RvbUNvbnRyb2xTcGFjZXInLCBDdXN0b21Db250cm9sU3BhY2VyKTtcblxuZXhwb3J0IGRlZmF1bHQgQ3VzdG9tQ29udHJvbFNwYWNlcjtcbiIsImltcG9ydCBDb21wb25lbnQgZnJvbSAnLi4vLi4vY29tcG9uZW50LmpzJztcblxuLyoqXG4gKiBKdXN0IGFuIGVtcHR5IHNwYWNlciBlbGVtZW50IHRoYXQgY2FuIGJlIHVzZWQgYXMgYW4gYXBwZW5kIHBvaW50IGZvciBwbHVnaW5zLCBldGMuXG4gKiBBbHNvIGNhbiBiZSB1c2VkIHRvIGNyZWF0ZSBzcGFjZSBiZXR3ZWVuIGVsZW1lbnRzIHdoZW4gbmVjZXNzYXJ5LlxuICpcbiAqIEBwYXJhbSB7UGxheWVyfE9iamVjdH0gcGxheWVyXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbnNcbiAqL1xuY2xhc3MgU3BhY2VyIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgYnVpbGRDU1NDbGFzcygpIHtcbiAgICByZXR1cm4gYHZqcy1zcGFjZXIgJHtzdXBlci5idWlsZENTU0NsYXNzKCl9YDtcbiAgfVxuXG4gIGNyZWF0ZUVsKHByb3BzKSB7XG4gICAgcmV0dXJuIHN1cGVyLmNyZWF0ZUVsKCdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6IHRoaXMuYnVpbGRDU1NDbGFzcygpXG4gICAgfSk7XG4gIH1cbn1cblxuQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50KCdTcGFjZXInLCBTcGFjZXIpO1xuXG5leHBvcnQgZGVmYXVsdCBTcGFjZXI7XG4iLCJpbXBvcnQgVGV4dFRyYWNrTWVudUl0ZW0gZnJvbSAnLi90ZXh0LXRyYWNrLW1lbnUtaXRlbS5qcyc7XG5cbmNsYXNzIENhcHRpb25TZXR0aW5nc01lbnVJdGVtIGV4dGVuZHMgVGV4dFRyYWNrTWVudUl0ZW0ge1xuXG4gIGNvbnN0cnVjdG9yKHBsYXllciwgb3B0aW9ucykge1xuICAgIG9wdGlvbnNbJ3RyYWNrJ10gPSB7XG4gICAgICAna2luZCc6IG9wdGlvbnNbJ2tpbmQnXSxcbiAgICAgICdwbGF5ZXInOiBwbGF5ZXIsXG4gICAgICAnbGFiZWwnOiBvcHRpb25zWydraW5kJ10gKyAnIHNldHRpbmdzJyxcbiAgICAgICdkZWZhdWx0JzogZmFsc2UsXG4gICAgICBtb2RlOiAnZGlzYWJsZWQnXG4gICAgfTtcblxuICAgIHN1cGVyKHBsYXllciwgb3B0aW9ucyk7XG4gICAgdGhpcy5hZGRDbGFzcygndmpzLXRleHR0cmFjay1zZXR0aW5ncycpO1xuICB9XG5cbiAgaGFuZGxlQ2xpY2soKSB7XG4gICAgdGhpcy5wbGF5ZXIoKS5nZXRDaGlsZCgndGV4dFRyYWNrU2V0dGluZ3MnKS5zaG93KCk7XG4gIH1cblxufVxuXG5UZXh0VHJhY2tNZW51SXRlbS5yZWdpc3RlckNvbXBvbmVudCgnQ2FwdGlvblNldHRpbmdzTWVudUl0ZW0nLCBDYXB0aW9uU2V0dGluZ3NNZW51SXRlbSk7XG5leHBvcnQgZGVmYXVsdCBDYXB0aW9uU2V0dGluZ3NNZW51SXRlbTtcbiIsImltcG9ydCBUZXh0VHJhY2tCdXR0b24gZnJvbSAnLi90ZXh0LXRyYWNrLWJ1dHRvbi5qcyc7XG5pbXBvcnQgQ2FwdGlvblNldHRpbmdzTWVudUl0ZW0gZnJvbSAnLi9jYXB0aW9uLXNldHRpbmdzLW1lbnUtaXRlbS5qcyc7XG5cbi8qKlxuICogVGhlIGJ1dHRvbiBjb21wb25lbnQgZm9yIHRvZ2dsaW5nIGFuZCBzZWxlY3RpbmcgY2FwdGlvbnNcbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuY2xhc3MgQ2FwdGlvbnNCdXR0b24gZXh0ZW5kcyBUZXh0VHJhY2tCdXR0b24ge1xuXG4gIGNvbnN0cnVjdG9yKHBsYXllciwgb3B0aW9ucywgcmVhZHkpe1xuICAgIHN1cGVyKHBsYXllciwgb3B0aW9ucywgcmVhZHkpO1xuICAgIHRoaXMuZWxfLnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsJ0NhcHRpb25zIE1lbnUnKTtcbiAgfVxuXG4gIHVwZGF0ZSgpIHtcbiAgICBsZXQgdGhyZXNob2xkID0gMjtcbiAgICBzdXBlci51cGRhdGUoKTtcblxuICAgIC8vIGlmIG5hdGl2ZSwgdGhlbiB0aHJlc2hvbGQgaXMgMSBiZWNhdXNlIG5vIHNldHRpbmdzIGJ1dHRvblxuICAgIGlmICh0aGlzLnBsYXllcigpLnRlY2ggJiYgdGhpcy5wbGF5ZXIoKS50ZWNoWydmZWF0dXJlc05hdGl2ZVRleHRUcmFja3MnXSkge1xuICAgICAgdGhyZXNob2xkID0gMTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pdGVtcyAmJiB0aGlzLml0ZW1zLmxlbmd0aCA+IHRocmVzaG9sZCkge1xuICAgICAgdGhpcy5zaG93KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH1cbiAgfVxuXG4gIGNyZWF0ZUl0ZW1zKCkge1xuICAgIGxldCBpdGVtcyA9IFtdO1xuXG4gICAgaWYgKCEodGhpcy5wbGF5ZXIoKS50ZWNoICYmIHRoaXMucGxheWVyKCkudGVjaFsnZmVhdHVyZXNOYXRpdmVUZXh0VHJhY2tzJ10pKSB7XG4gICAgICBpdGVtcy5wdXNoKG5ldyBDYXB0aW9uU2V0dGluZ3NNZW51SXRlbSh0aGlzLnBsYXllcl8sIHsgJ2tpbmQnOiB0aGlzLmtpbmRfIH0pKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3VwZXIuY3JlYXRlSXRlbXMoaXRlbXMpO1xuICB9XG5cbn1cblxuQ2FwdGlvbnNCdXR0b24ucHJvdG90eXBlLmtpbmRfID0gJ2NhcHRpb25zJztcbkNhcHRpb25zQnV0dG9uLnByb3RvdHlwZS5idXR0b25UZXh0ID0gJ0NhcHRpb25zJztcbkNhcHRpb25zQnV0dG9uLnByb3RvdHlwZS5jbGFzc05hbWUgPSAndmpzLWNhcHRpb25zLWJ1dHRvbic7XG5cblRleHRUcmFja0J1dHRvbi5yZWdpc3RlckNvbXBvbmVudCgnQ2FwdGlvbnNCdXR0b24nLCBDYXB0aW9uc0J1dHRvbik7XG5leHBvcnQgZGVmYXVsdCBDYXB0aW9uc0J1dHRvbjtcbiIsImltcG9ydCBUZXh0VHJhY2tCdXR0b24gZnJvbSAnLi90ZXh0LXRyYWNrLWJ1dHRvbi5qcyc7XG5pbXBvcnQgVGV4dFRyYWNrTWVudUl0ZW0gZnJvbSAnLi90ZXh0LXRyYWNrLW1lbnUtaXRlbS5qcyc7XG5pbXBvcnQgQ2hhcHRlcnNUcmFja01lbnVJdGVtIGZyb20gJy4vY2hhcHRlcnMtdHJhY2stbWVudS1pdGVtLmpzJztcbmltcG9ydCBNZW51IGZyb20gJy4uLy4uL21lbnUvbWVudS5qcyc7XG5pbXBvcnQgKiBhcyBMaWIgZnJvbSAnLi4vLi4vbGliLmpzJztcbmltcG9ydCB3aW5kb3cgZnJvbSAnZ2xvYmFsL3dpbmRvdyc7XG5cbi8vIENoYXB0ZXJzIGFjdCBtdWNoIGRpZmZlcmVudGx5IHRoYW4gb3RoZXIgdGV4dCB0cmFja3Ncbi8vIEN1ZXMgYXJlIG5hdmlnYXRpb24gdnMuIG90aGVyIHRyYWNrcyBvZiBhbHRlcm5hdGl2ZSBsYW5ndWFnZXNcbi8qKlxuICogVGhlIGJ1dHRvbiBjb21wb25lbnQgZm9yIHRvZ2dsaW5nIGFuZCBzZWxlY3RpbmcgY2hhcHRlcnNcbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuY2xhc3MgQ2hhcHRlcnNCdXR0b24gZXh0ZW5kcyBUZXh0VHJhY2tCdXR0b24ge1xuXG4gIGNvbnN0cnVjdG9yKHBsYXllciwgb3B0aW9ucywgcmVhZHkpe1xuICAgIHN1cGVyKHBsYXllciwgb3B0aW9ucywgcmVhZHkpO1xuICAgIHRoaXMuZWxfLnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsJ0NoYXB0ZXJzIE1lbnUnKTtcbiAgfVxuXG4gIC8vIENyZWF0ZSBhIG1lbnUgaXRlbSBmb3IgZWFjaCB0ZXh0IHRyYWNrXG4gIGNyZWF0ZUl0ZW1zKCkge1xuICAgIGxldCBpdGVtcyA9IFtdO1xuXG4gICAgbGV0IHRyYWNrcyA9IHRoaXMucGxheWVyXy50ZXh0VHJhY2tzKCk7XG5cbiAgICBpZiAoIXRyYWNrcykge1xuICAgICAgcmV0dXJuIGl0ZW1zO1xuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgdHJhY2sgPSB0cmFja3NbaV07XG4gICAgICBpZiAodHJhY2tbJ2tpbmQnXSA9PT0gdGhpcy5raW5kXykge1xuICAgICAgICBpdGVtcy5wdXNoKG5ldyBUZXh0VHJhY2tNZW51SXRlbSh0aGlzLnBsYXllcl8sIHtcbiAgICAgICAgICAndHJhY2snOiB0cmFja1xuICAgICAgICB9KSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGl0ZW1zO1xuICB9XG5cbiAgY3JlYXRlTWVudSgpIHtcbiAgICBsZXQgdHJhY2tzID0gdGhpcy5wbGF5ZXJfLnRleHRUcmFja3MoKSB8fCBbXTtcbiAgICBsZXQgY2hhcHRlcnNUcmFjaztcbiAgICBsZXQgaXRlbXMgPSB0aGlzLml0ZW1zID0gW107XG5cbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IHRyYWNrcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGxldCB0cmFjayA9IHRyYWNrc1tpXTtcbiAgICAgIGlmICh0cmFja1sna2luZCddID09PSB0aGlzLmtpbmRfKSB7XG4gICAgICAgIGlmICghdHJhY2suY3Vlcykge1xuICAgICAgICAgIHRyYWNrWydtb2RlJ10gPSAnaGlkZGVuJztcbiAgICAgICAgICAvKiBqc2hpbnQgbG9vcGZ1bmM6dHJ1ZSAqL1xuICAgICAgICAgIC8vIFRPRE8gc2VlIGlmIHdlIGNhbiBmaWd1cmUgb3V0IGEgYmV0dGVyIHdheSBvZiBkb2luZyB0aGlzIGh0dHBzOi8vZ2l0aHViLmNvbS92aWRlb2pzL3ZpZGVvLmpzL2lzc3Vlcy8xODY0XG4gICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoTGliLmJpbmQodGhpcywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLmNyZWF0ZU1lbnUoKTtcbiAgICAgICAgICB9KSwgMTAwKTtcbiAgICAgICAgICAvKiBqc2hpbnQgbG9vcGZ1bmM6ZmFsc2UgKi9cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjaGFwdGVyc1RyYWNrID0gdHJhY2s7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgbWVudSA9IHRoaXMubWVudTtcbiAgICBpZiAobWVudSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBtZW51ID0gbmV3IE1lbnUodGhpcy5wbGF5ZXJfKTtcbiAgICAgIG1lbnUuY29udGVudEVsKCkuYXBwZW5kQ2hpbGQoTGliLmNyZWF0ZUVsKCdsaScsIHtcbiAgICAgICAgY2xhc3NOYW1lOiAndmpzLW1lbnUtdGl0bGUnLFxuICAgICAgICBpbm5lckhUTUw6IExpYi5jYXBpdGFsaXplKHRoaXMua2luZF8pLFxuICAgICAgICB0YWJpbmRleDogLTFcbiAgICAgIH0pKTtcbiAgICB9XG5cbiAgICBpZiAoY2hhcHRlcnNUcmFjaykge1xuICAgICAgbGV0IGN1ZXMgPSBjaGFwdGVyc1RyYWNrWydjdWVzJ10sIGN1ZTtcblxuICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBjdWVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBjdWUgPSBjdWVzW2ldO1xuXG4gICAgICAgIGxldCBtaSA9IG5ldyBDaGFwdGVyc1RyYWNrTWVudUl0ZW0odGhpcy5wbGF5ZXJfLCB7XG4gICAgICAgICAgJ3RyYWNrJzogY2hhcHRlcnNUcmFjayxcbiAgICAgICAgICAnY3VlJzogY3VlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0ZW1zLnB1c2gobWkpO1xuXG4gICAgICAgIG1lbnUuYWRkQ2hpbGQobWkpO1xuICAgICAgfVxuICAgICAgdGhpcy5hZGRDaGlsZChtZW51KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pdGVtcy5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLnNob3coKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVudTtcbiAgfVxuXG59XG5cbkNoYXB0ZXJzQnV0dG9uLnByb3RvdHlwZS5raW5kXyA9ICdjaGFwdGVycyc7XG5DaGFwdGVyc0J1dHRvbi5wcm90b3R5cGUuYnV0dG9uVGV4dCA9ICdDaGFwdGVycyc7XG5DaGFwdGVyc0J1dHRvbi5wcm90b3R5cGUuY2xhc3NOYW1lID0gJ3Zqcy1jaGFwdGVycy1idXR0b24nO1xuXG5UZXh0VHJhY2tCdXR0b24ucmVnaXN0ZXJDb21wb25lbnQoJ0NoYXB0ZXJzQnV0dG9uJywgQ2hhcHRlcnNCdXR0b24pO1xuZXhwb3J0IGRlZmF1bHQgQ2hhcHRlcnNCdXR0b247XG4iLCJpbXBvcnQgTWVudUl0ZW0gZnJvbSAnLi4vLi4vbWVudS9tZW51LWl0ZW0uanMnO1xuaW1wb3J0ICogYXMgTGliIGZyb20gJy4uLy4uL2xpYi5qcyc7XG5cbi8qKlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmNsYXNzIENoYXB0ZXJzVHJhY2tNZW51SXRlbSBleHRlbmRzIE1lbnVJdGVtIHtcblxuICBjb25zdHJ1Y3RvcihwbGF5ZXIsIG9wdGlvbnMpe1xuICAgIGxldCB0cmFjayA9IG9wdGlvbnNbJ3RyYWNrJ107XG4gICAgbGV0IGN1ZSA9IG9wdGlvbnNbJ2N1ZSddO1xuICAgIGxldCBjdXJyZW50VGltZSA9IHBsYXllci5jdXJyZW50VGltZSgpO1xuXG4gICAgLy8gTW9kaWZ5IG9wdGlvbnMgZm9yIHBhcmVudCBNZW51SXRlbSBjbGFzcydzIGluaXQuXG4gICAgb3B0aW9uc1snbGFiZWwnXSA9IGN1ZS50ZXh0O1xuICAgIG9wdGlvbnNbJ3NlbGVjdGVkJ10gPSAoY3VlWydzdGFydFRpbWUnXSA8PSBjdXJyZW50VGltZSAmJiBjdXJyZW50VGltZSA8IGN1ZVsnZW5kVGltZSddKTtcbiAgICBzdXBlcihwbGF5ZXIsIG9wdGlvbnMpO1xuXG4gICAgdGhpcy50cmFjayA9IHRyYWNrO1xuICAgIHRoaXMuY3VlID0gY3VlO1xuICAgIHRyYWNrLmFkZEV2ZW50TGlzdGVuZXIoJ2N1ZWNoYW5nZScsIExpYi5iaW5kKHRoaXMsIHRoaXMudXBkYXRlKSk7XG4gIH1cblxuICBoYW5kbGVDbGljaygpIHtcbiAgICBzdXBlci5oYW5kbGVDbGljaygpO1xuICAgIHRoaXMucGxheWVyXy5jdXJyZW50VGltZSh0aGlzLmN1ZS5zdGFydFRpbWUpO1xuICAgIHRoaXMudXBkYXRlKHRoaXMuY3VlLnN0YXJ0VGltZSk7XG4gIH1cblxuICB1cGRhdGUoKSB7XG4gICAgbGV0IGN1ZSA9IHRoaXMuY3VlO1xuICAgIGxldCBjdXJyZW50VGltZSA9IHRoaXMucGxheWVyXy5jdXJyZW50VGltZSgpO1xuXG4gICAgLy8gdmpzLmxvZyhjdXJyZW50VGltZSwgY3VlLnN0YXJ0VGltZSk7XG4gICAgdGhpcy5zZWxlY3RlZChjdWVbJ3N0YXJ0VGltZSddIDw9IGN1cnJlbnRUaW1lICYmIGN1cnJlbnRUaW1lIDwgY3VlWydlbmRUaW1lJ10pO1xuICB9XG5cbn1cblxuTWVudUl0ZW0ucmVnaXN0ZXJDb21wb25lbnQoJ0NoYXB0ZXJzVHJhY2tNZW51SXRlbScsIENoYXB0ZXJzVHJhY2tNZW51SXRlbSk7XG5leHBvcnQgZGVmYXVsdCBDaGFwdGVyc1RyYWNrTWVudUl0ZW07XG4iLCJpbXBvcnQgVGV4dFRyYWNrTWVudUl0ZW0gZnJvbSAnLi90ZXh0LXRyYWNrLW1lbnUtaXRlbS5qcyc7XG5cbi8qKlxuICogQSBzcGVjaWFsIG1lbnUgaXRlbSBmb3IgdHVybmluZyBvZiBhIHNwZWNpZmljIHR5cGUgb2YgdGV4dCB0cmFja1xuICpcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5jbGFzcyBPZmZUZXh0VHJhY2tNZW51SXRlbSBleHRlbmRzIFRleHRUcmFja01lbnVJdGVtIHtcblxuICBjb25zdHJ1Y3RvcihwbGF5ZXIsIG9wdGlvbnMpe1xuICAgIC8vIENyZWF0ZSBwc2V1ZG8gdHJhY2sgaW5mb1xuICAgIC8vIFJlcXVpcmVzIG9wdGlvbnNbJ2tpbmQnXVxuICAgIG9wdGlvbnNbJ3RyYWNrJ10gPSB7XG4gICAgICAna2luZCc6IG9wdGlvbnNbJ2tpbmQnXSxcbiAgICAgICdwbGF5ZXInOiBwbGF5ZXIsXG4gICAgICAnbGFiZWwnOiBvcHRpb25zWydraW5kJ10gKyAnIG9mZicsXG4gICAgICAnZGVmYXVsdCc6IGZhbHNlLFxuICAgICAgJ21vZGUnOiAnZGlzYWJsZWQnXG4gICAgfTtcblxuICAgIHN1cGVyKHBsYXllciwgb3B0aW9ucyk7XG4gICAgdGhpcy5zZWxlY3RlZCh0cnVlKTtcbiAgfVxuXG4gIGhhbmRsZVRyYWNrc0NoYW5nZShldmVudCl7XG4gICAgbGV0IHRyYWNrcyA9IHRoaXMucGxheWVyKCkudGV4dFRyYWNrcygpO1xuICAgIGxldCBzZWxlY3RlZCA9IHRydWU7XG5cbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IHRyYWNrcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGxldCB0cmFjayA9IHRyYWNrc1tpXTtcbiAgICAgIGlmICh0cmFja1sna2luZCddID09PSB0aGlzLnRyYWNrWydraW5kJ10gJiYgdHJhY2tbJ21vZGUnXSA9PT0gJ3Nob3dpbmcnKSB7XG4gICAgICAgIHNlbGVjdGVkID0gZmFsc2U7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuc2VsZWN0ZWQoc2VsZWN0ZWQpO1xuICB9XG5cbn1cblxuVGV4dFRyYWNrTWVudUl0ZW0ucmVnaXN0ZXJDb21wb25lbnQoJ09mZlRleHRUcmFja01lbnVJdGVtJywgT2ZmVGV4dFRyYWNrTWVudUl0ZW0pO1xuZXhwb3J0IGRlZmF1bHQgT2ZmVGV4dFRyYWNrTWVudUl0ZW07IiwiaW1wb3J0IFRleHRUcmFja0J1dHRvbiBmcm9tICcuL3RleHQtdHJhY2stYnV0dG9uLmpzJztcblxuLyoqXG4gKiBUaGUgYnV0dG9uIGNvbXBvbmVudCBmb3IgdG9nZ2xpbmcgYW5kIHNlbGVjdGluZyBzdWJ0aXRsZXNcbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuY2xhc3MgU3VidGl0bGVzQnV0dG9uIGV4dGVuZHMgVGV4dFRyYWNrQnV0dG9uIHtcblxuICBjb25zdHJ1Y3RvcihwbGF5ZXIsIG9wdGlvbnMsIHJlYWR5KXtcbiAgICBzdXBlcihwbGF5ZXIsIG9wdGlvbnMsIHJlYWR5KTtcbiAgICB0aGlzLmVsXy5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnLCdTdWJ0aXRsZXMgTWVudScpO1xuICB9XG5cbn1cblxuU3VidGl0bGVzQnV0dG9uLnByb3RvdHlwZS5raW5kXyA9ICdzdWJ0aXRsZXMnO1xuU3VidGl0bGVzQnV0dG9uLnByb3RvdHlwZS5idXR0b25UZXh0ID0gJ1N1YnRpdGxlcyc7XG5TdWJ0aXRsZXNCdXR0b24ucHJvdG90eXBlLmNsYXNzTmFtZSA9ICd2anMtc3VidGl0bGVzLWJ1dHRvbic7XG5cblRleHRUcmFja0J1dHRvbi5yZWdpc3RlckNvbXBvbmVudCgnU3VidGl0bGVzQnV0dG9uJywgU3VidGl0bGVzQnV0dG9uKTtcbmV4cG9ydCBkZWZhdWx0IFN1YnRpdGxlc0J1dHRvbjsiLCJpbXBvcnQgTWVudUJ1dHRvbiBmcm9tICcuLi8uLi9tZW51L21lbnUtYnV0dG9uLmpzJztcbmltcG9ydCAqIGFzIExpYiBmcm9tICcuLi8uLi9saWIuanMnO1xuXG5pbXBvcnQgVGV4dFRyYWNrTWVudUl0ZW0gZnJvbSAnLi90ZXh0LXRyYWNrLW1lbnUtaXRlbS5qcyc7XG5pbXBvcnQgT2ZmVGV4dFRyYWNrTWVudUl0ZW0gZnJvbSAnLi9vZmYtdGV4dC10cmFjay1tZW51LWl0ZW0uanMnO1xuXG4vKipcbiAqIFRoZSBiYXNlIGNsYXNzIGZvciBidXR0b25zIHRoYXQgdG9nZ2xlIHNwZWNpZmljIHRleHQgdHJhY2sgdHlwZXMgKGUuZy4gc3VidGl0bGVzKVxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5jbGFzcyBUZXh0VHJhY2tCdXR0b24gZXh0ZW5kcyBNZW51QnV0dG9uIHtcblxuICBjb25zdHJ1Y3RvcihwbGF5ZXIsIG9wdGlvbnMpe1xuICAgIHN1cGVyKHBsYXllciwgb3B0aW9ucyk7XG5cbiAgICBsZXQgdHJhY2tzID0gdGhpcy5wbGF5ZXJfLnRleHRUcmFja3MoKTtcblxuICAgIGlmICh0aGlzLml0ZW1zLmxlbmd0aCA8PSAxKSB7XG4gICAgICB0aGlzLmhpZGUoKTtcbiAgICB9XG5cbiAgICBpZiAoIXRyYWNrcykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCB1cGRhdGVIYW5kbGVyID0gTGliLmJpbmQodGhpcywgdGhpcy51cGRhdGUpO1xuICAgIHRyYWNrcy5hZGRFdmVudExpc3RlbmVyKCdyZW1vdmV0cmFjaycsIHVwZGF0ZUhhbmRsZXIpO1xuICAgIHRyYWNrcy5hZGRFdmVudExpc3RlbmVyKCdhZGR0cmFjaycsIHVwZGF0ZUhhbmRsZXIpO1xuXG4gICAgdGhpcy5wbGF5ZXJfLm9uKCdkaXNwb3NlJywgZnVuY3Rpb24oKSB7XG4gICAgICB0cmFja3MucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVtb3ZldHJhY2snLCB1cGRhdGVIYW5kbGVyKTtcbiAgICAgIHRyYWNrcy5yZW1vdmVFdmVudExpc3RlbmVyKCdhZGR0cmFjaycsIHVwZGF0ZUhhbmRsZXIpO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gQ3JlYXRlIGEgbWVudSBpdGVtIGZvciBlYWNoIHRleHQgdHJhY2tcbiAgY3JlYXRlSXRlbXMoaXRlbXM9W10pIHtcbiAgICAvLyBBZGQgYW4gT0ZGIG1lbnUgaXRlbSB0byB0dXJuIGFsbCB0cmFja3Mgb2ZmXG4gICAgaXRlbXMucHVzaChuZXcgT2ZmVGV4dFRyYWNrTWVudUl0ZW0odGhpcy5wbGF5ZXJfLCB7ICdraW5kJzogdGhpcy5raW5kXyB9KSk7XG5cbiAgICBsZXQgdHJhY2tzID0gdGhpcy5wbGF5ZXJfLnRleHRUcmFja3MoKTtcblxuICAgIGlmICghdHJhY2tzKSB7XG4gICAgICByZXR1cm4gaXRlbXM7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0cmFja3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCB0cmFjayA9IHRyYWNrc1tpXTtcblxuICAgICAgLy8gb25seSBhZGQgdHJhY2tzIHRoYXQgYXJlIG9mIHRoZSBhcHByb3ByaWF0ZSBraW5kIGFuZCBoYXZlIGEgbGFiZWxcbiAgICAgIGlmICh0cmFja1sna2luZCddID09PSB0aGlzLmtpbmRfKSB7XG4gICAgICAgIGl0ZW1zLnB1c2gobmV3IFRleHRUcmFja01lbnVJdGVtKHRoaXMucGxheWVyXywge1xuICAgICAgICAgICd0cmFjayc6IHRyYWNrXG4gICAgICAgIH0pKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gaXRlbXM7XG4gIH1cblxufVxuXG5NZW51QnV0dG9uLnJlZ2lzdGVyQ29tcG9uZW50KCdUZXh0VHJhY2tCdXR0b24nLCBUZXh0VHJhY2tCdXR0b24pO1xuZXhwb3J0IGRlZmF1bHQgVGV4dFRyYWNrQnV0dG9uO1xuIiwiaW1wb3J0IE1lbnVJdGVtIGZyb20gJy4uLy4uL21lbnUvbWVudS1pdGVtLmpzJztcbmltcG9ydCAqIGFzIExpYiBmcm9tICcuLi8uLi9saWIuanMnO1xuXG5pbXBvcnQgd2luZG93IGZyb20gJ2dsb2JhbC93aW5kb3cnO1xuaW1wb3J0IGRvY3VtZW50IGZyb20gJ2dsb2JhbC9kb2N1bWVudCc7XG5cbi8qKlxuICogVGhlIHNwZWNpZmljIG1lbnUgaXRlbSB0eXBlIGZvciBzZWxlY3RpbmcgYSBsYW5ndWFnZSB3aXRoaW4gYSB0ZXh0IHRyYWNrIGtpbmRcbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuY2xhc3MgVGV4dFRyYWNrTWVudUl0ZW0gZXh0ZW5kcyBNZW51SXRlbSB7XG5cbiAgY29uc3RydWN0b3IocGxheWVyLCBvcHRpb25zKXtcbiAgICBsZXQgdHJhY2sgPSBvcHRpb25zWyd0cmFjayddO1xuICAgIGxldCB0cmFja3MgPSBwbGF5ZXIudGV4dFRyYWNrcygpO1xuXG4gICAgLy8gTW9kaWZ5IG9wdGlvbnMgZm9yIHBhcmVudCBNZW51SXRlbSBjbGFzcydzIGluaXQuXG4gICAgb3B0aW9uc1snbGFiZWwnXSA9IHRyYWNrWydsYWJlbCddIHx8IHRyYWNrWydsYW5ndWFnZSddIHx8ICdVbmtub3duJztcbiAgICBvcHRpb25zWydzZWxlY3RlZCddID0gdHJhY2tbJ2RlZmF1bHQnXSB8fCB0cmFja1snbW9kZSddID09PSAnc2hvd2luZyc7XG4gICAgc3VwZXIocGxheWVyLCBvcHRpb25zKTtcblxuICAgIHRoaXMudHJhY2sgPSB0cmFjaztcblxuICAgIGlmICh0cmFja3MpIHtcbiAgICAgIGxldCBjaGFuZ2VIYW5kbGVyID0gTGliLmJpbmQodGhpcywgdGhpcy5oYW5kbGVUcmFja3NDaGFuZ2UpO1xuXG4gICAgICB0cmFja3MuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgY2hhbmdlSGFuZGxlcik7XG4gICAgICB0aGlzLm9uKCdkaXNwb3NlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHRyYWNrcy5yZW1vdmVFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBjaGFuZ2VIYW5kbGVyKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIGlPUzcgZG9lc24ndCBkaXNwYXRjaCBjaGFuZ2UgZXZlbnRzIHRvIFRleHRUcmFja0xpc3RzIHdoZW4gYW5cbiAgICAvLyBhc3NvY2lhdGVkIHRyYWNrJ3MgbW9kZSBjaGFuZ2VzLiBXaXRob3V0IHNvbWV0aGluZyBsaWtlXG4gICAgLy8gT2JqZWN0Lm9ic2VydmUoKSAoYWxzbyBub3QgcHJlc2VudCBvbiBpT1M3KSwgaXQncyBub3RcbiAgICAvLyBwb3NzaWJsZSB0byBkZXRlY3QgY2hhbmdlcyB0byB0aGUgbW9kZSBhdHRyaWJ1dGUgYW5kIHBvbHlmaWxsXG4gICAgLy8gdGhlIGNoYW5nZSBldmVudC4gQXMgYSBwb29yIHN1YnN0aXR1dGUsIHdlIG1hbnVhbGx5IGRpc3BhdGNoXG4gICAgLy8gY2hhbmdlIGV2ZW50cyB3aGVuZXZlciB0aGUgY29udHJvbHMgbW9kaWZ5IHRoZSBtb2RlLlxuICAgIGlmICh0cmFja3MgJiYgdHJhY2tzLm9uY2hhbmdlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGxldCBldmVudDtcblxuICAgICAgdGhpcy5vbihbJ3RhcCcsICdjbGljayddLCBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cuRXZlbnQgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgLy8gQW5kcm9pZCAyLjMgdGhyb3dzIGFuIElsbGVnYWwgQ29uc3RydWN0b3IgZXJyb3IgZm9yIHdpbmRvdy5FdmVudFxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBldmVudCA9IG5ldyB3aW5kb3cuRXZlbnQoJ2NoYW5nZScpO1xuICAgICAgICAgIH0gY2F0Y2goZXJyKXt9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWV2ZW50KSB7XG4gICAgICAgICAgZXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKTtcbiAgICAgICAgICBldmVudC5pbml0RXZlbnQoJ2NoYW5nZScsIHRydWUsIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdHJhY2tzLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgaGFuZGxlQ2xpY2soZXZlbnQpIHtcbiAgICBsZXQga2luZCA9IHRoaXMudHJhY2tbJ2tpbmQnXTtcbiAgICBsZXQgdHJhY2tzID0gdGhpcy5wbGF5ZXJfLnRleHRUcmFja3MoKTtcblxuICAgIHN1cGVyLmhhbmRsZUNsaWNrKGV2ZW50KTtcblxuICAgIGlmICghdHJhY2tzKSByZXR1cm47XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRyYWNrcy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IHRyYWNrID0gdHJhY2tzW2ldO1xuXG4gICAgICBpZiAodHJhY2tbJ2tpbmQnXSAhPT0ga2luZCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRyYWNrID09PSB0aGlzLnRyYWNrKSB7XG4gICAgICAgIHRyYWNrWydtb2RlJ10gPSAnc2hvd2luZyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cmFja1snbW9kZSddID0gJ2Rpc2FibGVkJztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBoYW5kbGVUcmFja3NDaGFuZ2UoZXZlbnQpe1xuICAgIHRoaXMuc2VsZWN0ZWQodGhpcy50cmFja1snbW9kZSddID09PSAnc2hvd2luZycpO1xuICB9XG5cbn1cblxuTWVudUl0ZW0ucmVnaXN0ZXJDb21wb25lbnQoJ1RleHRUcmFja01lbnVJdGVtJywgVGV4dFRyYWNrTWVudUl0ZW0pO1xuZXhwb3J0IGRlZmF1bHQgVGV4dFRyYWNrTWVudUl0ZW07XG4iLCJpbXBvcnQgQ29tcG9uZW50IGZyb20gJy4uLy4uL2NvbXBvbmVudC5qcyc7XG5pbXBvcnQgKiBhcyBMaWIgZnJvbSAnLi4vLi4vbGliLmpzJztcblxuLyoqXG4gKiBEaXNwbGF5cyB0aGUgY3VycmVudCB0aW1lXG4gKiBAcGFyYW0ge1BsYXllcnxPYmplY3R9IHBsYXllclxuICogQHBhcmFtIHtPYmplY3Q9fSBvcHRpb25zXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuY2xhc3MgQ3VycmVudFRpbWVEaXNwbGF5IGV4dGVuZHMgQ29tcG9uZW50IHtcblxuICBjb25zdHJ1Y3RvcihwbGF5ZXIsIG9wdGlvbnMpe1xuICAgIHN1cGVyKHBsYXllciwgb3B0aW9ucyk7XG5cbiAgICB0aGlzLm9uKHBsYXllciwgJ3RpbWV1cGRhdGUnLCB0aGlzLnVwZGF0ZUNvbnRlbnQpO1xuICB9XG5cbiAgY3JlYXRlRWwoKSB7XG4gICAgbGV0IGVsID0gc3VwZXIuY3JlYXRlRWwoJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3Zqcy1jdXJyZW50LXRpbWUgdmpzLXRpbWUtY29udHJvbCB2anMtY29udHJvbCdcbiAgICB9KTtcblxuICAgIHRoaXMuY29udGVudEVsXyA9IExpYi5jcmVhdGVFbCgnZGl2Jywge1xuICAgICAgY2xhc3NOYW1lOiAndmpzLWN1cnJlbnQtdGltZS1kaXNwbGF5JyxcbiAgICAgIGlubmVySFRNTDogJzxzcGFuIGNsYXNzPVwidmpzLWNvbnRyb2wtdGV4dFwiPkN1cnJlbnQgVGltZSA8L3NwYW4+JyArICcwOjAwJywgLy8gbGFiZWwgdGhlIGN1cnJlbnQgdGltZSBmb3Igc2NyZWVuIHJlYWRlciB1c2Vyc1xuICAgICAgJ2FyaWEtbGl2ZSc6ICdvZmYnIC8vIHRlbGwgc2NyZWVuIHJlYWRlcnMgbm90IHRvIGF1dG9tYXRpY2FsbHkgcmVhZCB0aGUgdGltZSBhcyBpdCBjaGFuZ2VzXG4gICAgfSk7XG5cbiAgICBlbC5hcHBlbmRDaGlsZCh0aGlzLmNvbnRlbnRFbF8pO1xuICAgIHJldHVybiBlbDtcbiAgfVxuXG4gIHVwZGF0ZUNvbnRlbnQoKSB7XG4gICAgLy8gQWxsb3dzIGZvciBzbW9vdGggc2NydWJiaW5nLCB3aGVuIHBsYXllciBjYW4ndCBrZWVwIHVwLlxuICAgIGxldCB0aW1lID0gKHRoaXMucGxheWVyXy5zY3J1YmJpbmcpID8gdGhpcy5wbGF5ZXJfLmdldENhY2hlKCkuY3VycmVudFRpbWUgOiB0aGlzLnBsYXllcl8uY3VycmVudFRpbWUoKTtcbiAgICBsZXQgbG9jYWxpemVkVGV4dCA9IHRoaXMubG9jYWxpemUoJ0N1cnJlbnQgVGltZScpO1xuICAgIGxldCBmb3JtYXR0ZWRUaW1lID0gTGliLmZvcm1hdFRpbWUodGltZSwgdGhpcy5wbGF5ZXJfLmR1cmF0aW9uKCkpO1xuICAgIHRoaXMuY29udGVudEVsXy5pbm5lckhUTUwgPSBgPHNwYW4gY2xhc3M9XCJ2anMtY29udHJvbC10ZXh0XCI+JHtsb2NhbGl6ZWRUZXh0fTwvc3Bhbj4gJHtmb3JtYXR0ZWRUaW1lfWA7XG4gIH1cblxufVxuXG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ0N1cnJlbnRUaW1lRGlzcGxheScsIEN1cnJlbnRUaW1lRGlzcGxheSk7XG5leHBvcnQgZGVmYXVsdCBDdXJyZW50VGltZURpc3BsYXk7XG4iLCJpbXBvcnQgQ29tcG9uZW50IGZyb20gJy4uLy4uL2NvbXBvbmVudC5qcyc7XG5pbXBvcnQgKiBhcyBMaWIgZnJvbSAnLi4vLi4vbGliLmpzJztcblxuLyoqXG4gKiBEaXNwbGF5cyB0aGUgZHVyYXRpb25cbiAqIEBwYXJhbSB7UGxheWVyfE9iamVjdH0gcGxheWVyXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbnNcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5jbGFzcyBEdXJhdGlvbkRpc3BsYXkgZXh0ZW5kcyBDb21wb25lbnQge1xuXG4gIGNvbnN0cnVjdG9yKHBsYXllciwgb3B0aW9ucyl7XG4gICAgc3VwZXIocGxheWVyLCBvcHRpb25zKTtcblxuICAgIC8vIHRoaXMgbWlnaHQgbmVlZCB0byBiZSBjaGFuZ2VkIHRvICdkdXJhdGlvbmNoYW5nZScgaW5zdGVhZCBvZiAndGltZXVwZGF0ZScgZXZlbnR1YWxseSxcbiAgICAvLyBob3dldmVyIHRoZSBkdXJhdGlvbmNoYW5nZSBldmVudCBmaXJlcyBiZWZvcmUgdGhpcy5wbGF5ZXJfLmR1cmF0aW9uKCkgaXMgc2V0LFxuICAgIC8vIHNvIHRoZSB2YWx1ZSBjYW5ub3QgYmUgd3JpdHRlbiBvdXQgdXNpbmcgdGhpcyBtZXRob2QuXG4gICAgLy8gT25jZSB0aGUgb3JkZXIgb2YgZHVyYXRpb25jaGFuZ2UgYW5kIHRoaXMucGxheWVyXy5kdXJhdGlvbigpIGJlaW5nIHNldCBpcyBmaWd1cmVkIG91dCxcbiAgICAvLyB0aGlzIGNhbiBiZSB1cGRhdGVkLlxuICAgIHRoaXMub24ocGxheWVyLCAndGltZXVwZGF0ZScsIHRoaXMudXBkYXRlQ29udGVudCk7XG4gIH1cblxuICBjcmVhdGVFbCgpIHtcbiAgICBsZXQgZWwgPSBzdXBlci5jcmVhdGVFbCgnZGl2Jywge1xuICAgICAgY2xhc3NOYW1lOiAndmpzLWR1cmF0aW9uIHZqcy10aW1lLWNvbnRyb2wgdmpzLWNvbnRyb2wnXG4gICAgfSk7XG5cbiAgICB0aGlzLmNvbnRlbnRFbF8gPSBMaWIuY3JlYXRlRWwoJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3Zqcy1kdXJhdGlvbi1kaXNwbGF5JyxcbiAgICAgIGlubmVySFRNTDogYDxzcGFuIGNsYXNzPVwidmpzLWNvbnRyb2wtdGV4dFwiPiR7dGhpcy5sb2NhbGl6ZSgnRHVyYXRpb24gVGltZScpfTwvc3Bhbj4gMDowMGAsIC8vIGxhYmVsIHRoZSBkdXJhdGlvbiB0aW1lIGZvciBzY3JlZW4gcmVhZGVyIHVzZXJzXG4gICAgICAnYXJpYS1saXZlJzogJ29mZicgLy8gdGVsbCBzY3JlZW4gcmVhZGVycyBub3QgdG8gYXV0b21hdGljYWxseSByZWFkIHRoZSB0aW1lIGFzIGl0IGNoYW5nZXNcbiAgICB9KTtcblxuICAgIGVsLmFwcGVuZENoaWxkKHRoaXMuY29udGVudEVsXyk7XG4gICAgcmV0dXJuIGVsO1xuICB9XG5cbiAgdXBkYXRlQ29udGVudCgpIHtcbiAgICBsZXQgZHVyYXRpb24gPSB0aGlzLnBsYXllcl8uZHVyYXRpb24oKTtcbiAgICBpZiAoZHVyYXRpb24pIHtcbiAgICAgIGxldCBsb2NhbGl6ZWRUZXh0ID0gdGhpcy5sb2NhbGl6ZSgnRHVyYXRpb24gVGltZScpO1xuICAgICAgbGV0IGZvcm1hdHRlZFRpbWUgPSBMaWIuZm9ybWF0VGltZShkdXJhdGlvbik7XG4gICAgICB0aGlzLmNvbnRlbnRFbF8uaW5uZXJIVE1MID0gYDxzcGFuIGNsYXNzPVwidmpzLWNvbnRyb2wtdGV4dFwiPiR7bG9jYWxpemVkVGV4dH08L3NwYW4+ICR7Zm9ybWF0dGVkVGltZX1gOyAvLyBsYWJlbCB0aGUgZHVyYXRpb24gdGltZSBmb3Igc2NyZWVuIHJlYWRlciB1c2Vyc1xuICAgIH1cbiAgfVxuXG59XG5cbkNvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudCgnRHVyYXRpb25EaXNwbGF5JywgRHVyYXRpb25EaXNwbGF5KTtcbmV4cG9ydCBkZWZhdWx0IER1cmF0aW9uRGlzcGxheTtcbiIsImltcG9ydCBDb21wb25lbnQgZnJvbSAnLi4vLi4vY29tcG9uZW50LmpzJztcbmltcG9ydCAqIGFzIExpYiBmcm9tICcuLi8uLi9saWInO1xuXG4vKipcbiAqIERpc3BsYXlzIHRoZSB0aW1lIGxlZnQgaW4gdGhlIHZpZGVvXG4gKiBAcGFyYW0ge1BsYXllcnxPYmplY3R9IHBsYXllclxuICogQHBhcmFtIHtPYmplY3Q9fSBvcHRpb25zXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuY2xhc3MgUmVtYWluaW5nVGltZURpc3BsYXkgZXh0ZW5kcyBDb21wb25lbnQge1xuXG4gIGNvbnN0cnVjdG9yKHBsYXllciwgb3B0aW9ucyl7XG4gICAgc3VwZXIocGxheWVyLCBvcHRpb25zKTtcblxuICAgIHRoaXMub24ocGxheWVyLCAndGltZXVwZGF0ZScsIHRoaXMudXBkYXRlQ29udGVudCk7XG4gIH1cblxuICBjcmVhdGVFbCgpIHtcbiAgICBsZXQgZWwgPSBzdXBlci5jcmVhdGVFbCgnZGl2Jywge1xuICAgICAgY2xhc3NOYW1lOiAndmpzLXJlbWFpbmluZy10aW1lIHZqcy10aW1lLWNvbnRyb2wgdmpzLWNvbnRyb2wnXG4gICAgfSk7XG5cbiAgICB0aGlzLmNvbnRlbnRFbF8gPSBMaWIuY3JlYXRlRWwoJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3Zqcy1yZW1haW5pbmctdGltZS1kaXNwbGF5JyxcbiAgICAgIGlubmVySFRNTDogYDxzcGFuIGNsYXNzPVwidmpzLWNvbnRyb2wtdGV4dFwiPiR7dGhpcy5sb2NhbGl6ZSgnUmVtYWluaW5nIFRpbWUnKX08L3NwYW4+IC0wOjAwYCwgLy8gbGFiZWwgdGhlIHJlbWFpbmluZyB0aW1lIGZvciBzY3JlZW4gcmVhZGVyIHVzZXJzXG4gICAgICAnYXJpYS1saXZlJzogJ29mZicgLy8gdGVsbCBzY3JlZW4gcmVhZGVycyBub3QgdG8gYXV0b21hdGljYWxseSByZWFkIHRoZSB0aW1lIGFzIGl0IGNoYW5nZXNcbiAgICB9KTtcblxuICAgIGVsLmFwcGVuZENoaWxkKHRoaXMuY29udGVudEVsXyk7XG4gICAgcmV0dXJuIGVsO1xuICB9XG5cbiAgdXBkYXRlQ29udGVudCgpIHtcbiAgICBpZiAodGhpcy5wbGF5ZXJfLmR1cmF0aW9uKCkpIHtcbiAgICAgIGNvbnN0IGxvY2FsaXplZFRleHQgPSB0aGlzLmxvY2FsaXplKCdSZW1haW5pbmcgVGltZScpO1xuICAgICAgY29uc3QgZm9ybWF0dGVkVGltZSA9IExpYi5mb3JtYXRUaW1lKHRoaXMucGxheWVyXy5yZW1haW5pbmdUaW1lKCkpO1xuICAgICAgdGhpcy5jb250ZW50RWxfLmlubmVySFRNTCA9IGA8c3BhbiBjbGFzcz1cInZqcy1jb250cm9sLXRleHRcIj4ke2xvY2FsaXplZFRleHR9PC9zcGFuPiAtJHtmb3JtYXR0ZWRUaW1lfWA7XG4gICAgfVxuXG4gICAgLy8gQWxsb3dzIGZvciBzbW9vdGggc2NydWJiaW5nLCB3aGVuIHBsYXllciBjYW4ndCBrZWVwIHVwLlxuICAgIC8vIHZhciB0aW1lID0gKHRoaXMucGxheWVyXy5zY3J1YmJpbmcpID8gdGhpcy5wbGF5ZXJfLmdldENhY2hlKCkuY3VycmVudFRpbWUgOiB0aGlzLnBsYXllcl8uY3VycmVudFRpbWUoKTtcbiAgICAvLyB0aGlzLmNvbnRlbnRFbF8uaW5uZXJIVE1MID0gdmpzLmZvcm1hdFRpbWUodGltZSwgdGhpcy5wbGF5ZXJfLmR1cmF0aW9uKCkpO1xuICB9XG5cbn1cblxuQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50KCdSZW1haW5pbmdUaW1lRGlzcGxheScsIFJlbWFpbmluZ1RpbWVEaXNwbGF5KTtcbmV4cG9ydCBkZWZhdWx0IFJlbWFpbmluZ1RpbWVEaXNwbGF5O1xuIiwiaW1wb3J0IENvbXBvbmVudCBmcm9tICcuLi8uLi9jb21wb25lbnQuanMnO1xuXG4vKipcbiAqIFRoZSBzZXBhcmF0b3IgYmV0d2VlbiB0aGUgY3VycmVudCB0aW1lIGFuZCBkdXJhdGlvblxuICpcbiAqIENhbiBiZSBoaWRkZW4gaWYgaXQncyBub3QgbmVlZGVkIGluIHRoZSBkZXNpZ24uXG4gKlxuICogQHBhcmFtIHtQbGF5ZXJ8T2JqZWN0fSBwbGF5ZXJcbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0aW9uc1xuICogQGNvbnN0cnVjdG9yXG4gKi9cbmNsYXNzIFRpbWVEaXZpZGVyIGV4dGVuZHMgQ29tcG9uZW50IHtcblxuICBjcmVhdGVFbCgpIHtcbiAgICByZXR1cm4gc3VwZXIuY3JlYXRlRWwoJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3Zqcy10aW1lLWNvbnRyb2wgdmpzLXRpbWUtZGl2aWRlcicsXG4gICAgICBpbm5lckhUTUw6ICc8ZGl2PjxzcGFuPi88L3NwYW4+PC9kaXY+J1xuICAgIH0pO1xuICB9XG5cbn1cblxuQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50KCdUaW1lRGl2aWRlcicsIFRpbWVEaXZpZGVyKTtcbmV4cG9ydCBkZWZhdWx0IFRpbWVEaXZpZGVyO1xuIiwiaW1wb3J0IFNsaWRlciBmcm9tICcuLi8uLi9zbGlkZXIvc2xpZGVyLmpzJztcbmltcG9ydCAqIGFzIExpYiBmcm9tICcuLi8uLi9saWIuanMnO1xuXG4vLyBSZXF1aXJlZCBjaGlsZHJlblxuaW1wb3J0IFZvbHVtZUhhbmRsZSBmcm9tICcuL3ZvbHVtZS1oYW5kbGUuanMnO1xuaW1wb3J0IFZvbHVtZUxldmVsIGZyb20gJy4vdm9sdW1lLWxldmVsLmpzJztcblxuLyoqXG4gKiBUaGUgYmFyIHRoYXQgY29udGFpbnMgdGhlIHZvbHVtZSBsZXZlbCBhbmQgY2FuIGJlIGNsaWNrZWQgb24gdG8gYWRqdXN0IHRoZSBsZXZlbFxuICpcbiAqIEBwYXJhbSB7UGxheWVyfE9iamVjdH0gcGxheWVyXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbnNcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5jbGFzcyBWb2x1bWVCYXIgZXh0ZW5kcyBTbGlkZXIge1xuXG4gIGNvbnN0cnVjdG9yKHBsYXllciwgb3B0aW9ucyl7XG4gICAgc3VwZXIocGxheWVyLCBvcHRpb25zKTtcbiAgICB0aGlzLm9uKHBsYXllciwgJ3ZvbHVtZWNoYW5nZScsIHRoaXMudXBkYXRlQVJJQUF0dHJpYnV0ZXMpO1xuICAgIHBsYXllci5yZWFkeShMaWIuYmluZCh0aGlzLCB0aGlzLnVwZGF0ZUFSSUFBdHRyaWJ1dGVzKSk7XG4gIH1cblxuICBjcmVhdGVFbCgpIHtcbiAgICByZXR1cm4gc3VwZXIuY3JlYXRlRWwoJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3Zqcy12b2x1bWUtYmFyJyxcbiAgICAgICdhcmlhLWxhYmVsJzogJ3ZvbHVtZSBsZXZlbCdcbiAgICB9KTtcbiAgfVxuXG4gIGhhbmRsZU1vdXNlTW92ZShldmVudCkge1xuICAgIGlmICh0aGlzLnBsYXllcl8ubXV0ZWQoKSkge1xuICAgICAgdGhpcy5wbGF5ZXJfLm11dGVkKGZhbHNlKTtcbiAgICB9XG5cbiAgICB0aGlzLnBsYXllcl8udm9sdW1lKHRoaXMuY2FsY3VsYXRlRGlzdGFuY2UoZXZlbnQpKTtcbiAgfVxuXG4gIGdldFBlcmNlbnQoKSB7XG4gICAgaWYgKHRoaXMucGxheWVyXy5tdXRlZCgpKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMucGxheWVyXy52b2x1bWUoKTtcbiAgICB9XG4gIH1cblxuICBzdGVwRm9yd2FyZCgpIHtcbiAgICB0aGlzLnBsYXllcl8udm9sdW1lKHRoaXMucGxheWVyXy52b2x1bWUoKSArIDAuMSk7XG4gIH1cblxuICBzdGVwQmFjaygpIHtcbiAgICB0aGlzLnBsYXllcl8udm9sdW1lKHRoaXMucGxheWVyXy52b2x1bWUoKSAtIDAuMSk7XG4gIH1cblxuICB1cGRhdGVBUklBQXR0cmlidXRlcygpIHtcbiAgICAvLyBDdXJyZW50IHZhbHVlIG9mIHZvbHVtZSBiYXIgYXMgYSBwZXJjZW50YWdlXG4gICAgdGhpcy5lbF8uc2V0QXR0cmlidXRlKCdhcmlhLXZhbHVlbm93JywgTGliLnJvdW5kKHRoaXMucGxheWVyXy52b2x1bWUoKSoxMDAsIDIpKTtcbiAgICB0aGlzLmVsXy5zZXRBdHRyaWJ1dGUoJ2FyaWEtdmFsdWV0ZXh0JywgTGliLnJvdW5kKHRoaXMucGxheWVyXy52b2x1bWUoKSoxMDAsIDIpKyclJyk7XG4gIH1cblxufVxuXG5Wb2x1bWVCYXIucHJvdG90eXBlLm9wdGlvbnNfID0ge1xuICBjaGlsZHJlbjoge1xuICAgICd2b2x1bWVMZXZlbCc6IHt9LFxuICAgICd2b2x1bWVIYW5kbGUnOiB7fVxuICB9LFxuICAnYmFyTmFtZSc6ICd2b2x1bWVMZXZlbCcsXG4gICdoYW5kbGVOYW1lJzogJ3ZvbHVtZUhhbmRsZSdcbn07XG5cblZvbHVtZUJhci5wcm90b3R5cGUucGxheWVyRXZlbnQgPSAndm9sdW1lY2hhbmdlJztcblxuU2xpZGVyLnJlZ2lzdGVyQ29tcG9uZW50KCdWb2x1bWVCYXInLCBWb2x1bWVCYXIpO1xuZXhwb3J0IGRlZmF1bHQgVm9sdW1lQmFyO1xuIiwiaW1wb3J0IENvbXBvbmVudCBmcm9tICcuLi8uLi9jb21wb25lbnQuanMnO1xuaW1wb3J0ICogYXMgTGliIGZyb20gJy4uLy4uL2xpYi5qcyc7XG5cbi8vIFJlcXVpcmVkIGNoaWxkcmVuXG5pbXBvcnQgVm9sdW1lQmFyIGZyb20gJy4vdm9sdW1lLWJhci5qcyc7XG5cbi8qKlxuICogVGhlIGNvbXBvbmVudCBmb3IgY29udHJvbGxpbmcgdGhlIHZvbHVtZSBsZXZlbFxuICpcbiAqIEBwYXJhbSB7UGxheWVyfE9iamVjdH0gcGxheWVyXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbnNcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5jbGFzcyBWb2x1bWVDb250cm9sIGV4dGVuZHMgQ29tcG9uZW50IHtcblxuICBjb25zdHJ1Y3RvcihwbGF5ZXIsIG9wdGlvbnMpe1xuICAgIHN1cGVyKHBsYXllciwgb3B0aW9ucyk7XG5cbiAgICAvLyBoaWRlIHZvbHVtZSBjb250cm9scyB3aGVuIHRoZXkncmUgbm90IHN1cHBvcnRlZCBieSB0aGUgY3VycmVudCB0ZWNoXG4gICAgaWYgKHBsYXllci50ZWNoICYmIHBsYXllci50ZWNoWydmZWF0dXJlc1ZvbHVtZUNvbnRyb2wnXSA9PT0gZmFsc2UpIHtcbiAgICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy1oaWRkZW4nKTtcbiAgICB9XG4gICAgdGhpcy5vbihwbGF5ZXIsICdsb2Fkc3RhcnQnLCBmdW5jdGlvbigpe1xuICAgICAgaWYgKHBsYXllci50ZWNoWydmZWF0dXJlc1ZvbHVtZUNvbnRyb2wnXSA9PT0gZmFsc2UpIHtcbiAgICAgICAgdGhpcy5hZGRDbGFzcygndmpzLWhpZGRlbicpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5yZW1vdmVDbGFzcygndmpzLWhpZGRlbicpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgY3JlYXRlRWwoKSB7XG4gICAgcmV0dXJuIHN1cGVyLmNyZWF0ZUVsKCdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICd2anMtdm9sdW1lLWNvbnRyb2wgdmpzLWNvbnRyb2wnXG4gICAgfSk7XG4gIH1cblxufVxuXG5Wb2x1bWVDb250cm9sLnByb3RvdHlwZS5vcHRpb25zXyA9IHtcbiAgY2hpbGRyZW46IHtcbiAgICAndm9sdW1lQmFyJzoge31cbiAgfVxufTtcblxuQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50KCdWb2x1bWVDb250cm9sJywgVm9sdW1lQ29udHJvbCk7XG5leHBvcnQgZGVmYXVsdCBWb2x1bWVDb250cm9sO1xuIiwiaW1wb3J0IFNsaWRlckhhbmRsZSBmcm9tICcuLi8uLi9zbGlkZXIvc2xpZGVyLWhhbmRsZS5qcyc7XG5cbi8qKlxuICogVGhlIHZvbHVtZSBoYW5kbGUgY2FuIGJlIGRyYWdnZWQgdG8gYWRqdXN0IHRoZSB2b2x1bWUgbGV2ZWxcbiAqXG4gKiBAcGFyYW0ge1BsYXllcnxPYmplY3R9IHBsYXllclxuICogQHBhcmFtIHtPYmplY3Q9fSBvcHRpb25zXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuY2xhc3MgVm9sdW1lSGFuZGxlIGV4dGVuZHMgU2xpZGVySGFuZGxlIHtcblxuICAvKiogQGluaGVyaXREb2MgKi9cbiAgY3JlYXRlRWwoKSB7XG4gICAgcmV0dXJuIHN1cGVyLmNyZWF0ZUVsKCdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICd2anMtdm9sdW1lLWhhbmRsZSdcbiAgICB9KTtcbiAgfVxuXG59XG5cblZvbHVtZUhhbmRsZS5wcm90b3R5cGUuZGVmYXVsdFZhbHVlID0gJzAwOjAwJztcblxuU2xpZGVySGFuZGxlLnJlZ2lzdGVyQ29tcG9uZW50KCdWb2x1bWVIYW5kbGUnLCBWb2x1bWVIYW5kbGUpO1xuZXhwb3J0IGRlZmF1bHQgVm9sdW1lSGFuZGxlO1xuIiwiaW1wb3J0IENvbXBvbmVudCBmcm9tICcuLi8uLi9jb21wb25lbnQuanMnO1xuXG4vKipcbiAqIFNob3dzIHZvbHVtZSBsZXZlbFxuICpcbiAqIEBwYXJhbSB7UGxheWVyfE9iamVjdH0gcGxheWVyXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbnNcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5jbGFzcyBWb2x1bWVMZXZlbCBleHRlbmRzIENvbXBvbmVudCB7XG5cbiAgY3JlYXRlRWwoKSB7XG4gICAgcmV0dXJuIHN1cGVyLmNyZWF0ZUVsKCdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICd2anMtdm9sdW1lLWxldmVsJyxcbiAgICAgIGlubmVySFRNTDogJzxzcGFuIGNsYXNzPVwidmpzLWNvbnRyb2wtdGV4dFwiPjwvc3Bhbj4nXG4gICAgfSk7XG4gIH1cblxufVxuXG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ1ZvbHVtZUxldmVsJywgVm9sdW1lTGV2ZWwpO1xuZXhwb3J0IGRlZmF1bHQgVm9sdW1lTGV2ZWw7XG4iLCJpbXBvcnQgQnV0dG9uIGZyb20gJy4uL2J1dHRvbi5qcyc7XG5pbXBvcnQgTWVudSBmcm9tICcuLi9tZW51L21lbnUuanMnO1xuaW1wb3J0IE1lbnVCdXR0b24gZnJvbSAnLi4vbWVudS9tZW51LWJ1dHRvbi5qcyc7XG5pbXBvcnQgTXV0ZVRvZ2dsZSBmcm9tICcuL211dGUtdG9nZ2xlLmpzJztcbmltcG9ydCAqIGFzIExpYiBmcm9tICcuLi9saWIuanMnO1xuaW1wb3J0IFZvbHVtZUJhciBmcm9tICcuL3ZvbHVtZS1jb250cm9sL3ZvbHVtZS1iYXIuanMnO1xuXG4vKipcbiAqIE1lbnUgYnV0dG9uIHdpdGggYSBwb3B1cCBmb3Igc2hvd2luZyB0aGUgdm9sdW1lIHNsaWRlci5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5jbGFzcyBWb2x1bWVNZW51QnV0dG9uIGV4dGVuZHMgTWVudUJ1dHRvbiB7XG5cbiAgY29uc3RydWN0b3IocGxheWVyLCBvcHRpb25zKXtcbiAgICBzdXBlcihwbGF5ZXIsIG9wdGlvbnMpO1xuXG4gICAgLy8gU2FtZSBsaXN0ZW5lcnMgYXMgTXV0ZVRvZ2dsZVxuICAgIHRoaXMub24ocGxheWVyLCAndm9sdW1lY2hhbmdlJywgdGhpcy52b2x1bWVVcGRhdGUpO1xuXG4gICAgLy8gaGlkZSBtdXRlIHRvZ2dsZSBpZiB0aGUgY3VycmVudCB0ZWNoIGRvZXNuJ3Qgc3VwcG9ydCB2b2x1bWUgY29udHJvbFxuICAgIGlmIChwbGF5ZXIudGVjaCAmJiBwbGF5ZXIudGVjaFsnZmVhdHVyZXNWb2x1bWVDb250cm9sJ10gPT09IGZhbHNlKSB7XG4gICAgICB0aGlzLmFkZENsYXNzKCd2anMtaGlkZGVuJyk7XG4gICAgfVxuICAgIHRoaXMub24ocGxheWVyLCAnbG9hZHN0YXJ0JywgZnVuY3Rpb24oKXtcbiAgICAgIGlmIChwbGF5ZXIudGVjaFsnZmVhdHVyZXNWb2x1bWVDb250cm9sJ10gPT09IGZhbHNlKSB7XG4gICAgICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy1oaWRkZW4nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVtb3ZlQ2xhc3MoJ3Zqcy1oaWRkZW4nKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLmFkZENsYXNzKCd2anMtbWVudS1idXR0b24nKTtcbiAgfVxuXG4gIGNyZWF0ZU1lbnUoKSB7XG4gICAgbGV0IG1lbnUgPSBuZXcgTWVudSh0aGlzLnBsYXllcl8sIHtcbiAgICAgIGNvbnRlbnRFbFR5cGU6ICdkaXYnXG4gICAgfSk7XG5cbiAgICAvLyBUaGUgdm9sdW1lQmFyIGlzIHZlcnRpY2FsIGJ5IGRlZmF1bHQgaW4gdGhlIGJhc2UgdGhlbWUgd2hlbiB1c2VkIHdpdGggYSBWb2x1bWVNZW51QnV0dG9uXG4gICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnNfWyd2b2x1bWVCYXInXSB8fCB7fTtcbiAgICBvcHRpb25zWyd2ZXJ0aWNhbCddID0gb3B0aW9uc1sndmVydGljYWwnXSB8fCB0cnVlO1xuXG4gICAgbGV0IHZjID0gbmV3IFZvbHVtZUJhcih0aGlzLnBsYXllcl8sIG9wdGlvbnMpO1xuXG4gICAgdmMub24oJ2ZvY3VzJywgZnVuY3Rpb24oKSB7XG4gICAgICBtZW51LmxvY2tTaG93aW5nKCk7XG4gICAgfSk7XG4gICAgdmMub24oJ2JsdXInLCBmdW5jdGlvbigpIHtcbiAgICAgIG1lbnUudW5sb2NrU2hvd2luZygpO1xuICAgIH0pO1xuICAgIG1lbnUuYWRkQ2hpbGQodmMpO1xuICAgIHJldHVybiBtZW51O1xuICB9XG5cbiAgaGFuZGxlQ2xpY2soKSB7XG4gICAgTXV0ZVRvZ2dsZS5wcm90b3R5cGUuaGFuZGxlQ2xpY2suY2FsbCh0aGlzKTtcbiAgICBzdXBlci5oYW5kbGVDbGljaygpO1xuICB9XG5cbiAgY3JlYXRlRWwoKSB7XG4gICAgcmV0dXJuIHN1cGVyLmNyZWF0ZUVsKCdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICd2anMtdm9sdW1lLW1lbnUtYnV0dG9uIHZqcy1tZW51LWJ1dHRvbiB2anMtY29udHJvbCB2anMtYnV0dG9uJyxcbiAgICAgIGlubmVySFRNTDogYDxkaXY+PHNwYW4gY2xhc3M9XCJ2anMtY29udHJvbC10ZXh0XCI+JHt0aGlzLmxvY2FsaXplKCdNdXRlJyl9PC9zcGFuPjwvZGl2PmBcbiAgICB9KTtcbiAgfVxuXG59XG5cblZvbHVtZU1lbnVCdXR0b24ucHJvdG90eXBlLnZvbHVtZVVwZGF0ZSA9IE11dGVUb2dnbGUucHJvdG90eXBlLnVwZGF0ZTtcblxuQnV0dG9uLnJlZ2lzdGVyQ29tcG9uZW50KCdWb2x1bWVNZW51QnV0dG9uJywgVm9sdW1lTWVudUJ1dHRvbik7XG5leHBvcnQgZGVmYXVsdCBWb2x1bWVNZW51QnV0dG9uO1xuIiwiaW1wb3J0ICogYXMgTGliIGZyb20gJy4vbGliJztcblxuLyoqXG4gKiBDb3JlIE9iamVjdC9DbGFzcyBmb3Igb2JqZWN0cyB0aGF0IHVzZSBpbmhlcml0YW5jZSArIGNvbnN0cnVjdG9yc1xuICpcbiAqIFRvIGNyZWF0ZSBhIGNsYXNzIHRoYXQgY2FuIGJlIHN1YmNsYXNzZWQgaXRzZWxmLCBleHRlbmQgdGhlIENvcmVPYmplY3QgY2xhc3MuXG4gKlxuICogICAgIHZhciBBbmltYWwgPSBDb3JlT2JqZWN0LmV4dGVuZCgpO1xuICogICAgIHZhciBIb3JzZSA9IEFuaW1hbC5leHRlbmQoKTtcbiAqXG4gKiBUaGUgY29uc3RydWN0b3IgY2FuIGJlIGRlZmluZWQgdGhyb3VnaCB0aGUgaW5pdCBwcm9wZXJ0eSBvZiBhbiBvYmplY3QgYXJndW1lbnQuXG4gKlxuICogICAgIHZhciBBbmltYWwgPSBDb3JlT2JqZWN0LmV4dGVuZCh7XG4gKiAgICAgICBpbml0OiBmdW5jdGlvbihuYW1lLCBzb3VuZCl7XG4gKiAgICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gKiAgICAgICB9XG4gKiAgICAgfSk7XG4gKlxuICogT3RoZXIgbWV0aG9kcyBhbmQgcHJvcGVydGllcyBjYW4gYmUgYWRkZWQgdGhlIHNhbWUgd2F5LCBvciBkaXJlY3RseSB0byB0aGVcbiAqIHByb3RvdHlwZS5cbiAqXG4gKiAgICB2YXIgQW5pbWFsID0gQ29yZU9iamVjdC5leHRlbmQoe1xuICogICAgICAgaW5pdDogZnVuY3Rpb24obmFtZSl7XG4gKiAgICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gKiAgICAgICB9LFxuICogICAgICAgZ2V0TmFtZTogZnVuY3Rpb24oKXtcbiAqICAgICAgICAgcmV0dXJuIHRoaXMubmFtZTtcbiAqICAgICAgIH0sXG4gKiAgICAgICBzb3VuZDogJy4uLidcbiAqICAgIH0pO1xuICpcbiAqICAgIEFuaW1hbC5wcm90b3R5cGUubWFrZVNvdW5kID0gZnVuY3Rpb24oKXtcbiAqICAgICAgYWxlcnQodGhpcy5zb3VuZCk7XG4gKiAgICB9O1xuICpcbiAqIFRvIGNyZWF0ZSBhbiBpbnN0YW5jZSBvZiBhIGNsYXNzLCB1c2UgdGhlIGNyZWF0ZSBtZXRob2QuXG4gKlxuICogICAgdmFyIGZsdWZmeSA9IEFuaW1hbC5jcmVhdGUoJ0ZsdWZmeScpO1xuICogICAgZmx1ZmZ5LmdldE5hbWUoKTsgLy8gLT4gRmx1ZmZ5XG4gKlxuICogTWV0aG9kcyBhbmQgcHJvcGVydGllcyBjYW4gYmUgb3ZlcnJpZGRlbiBpbiBzdWJjbGFzc2VzLlxuICpcbiAqICAgICB2YXIgSG9yc2UgPSBBbmltYWwuZXh0ZW5kKHtcbiAqICAgICAgIHNvdW5kOiAnTmVpZ2hoaGhoISdcbiAqICAgICB9KTtcbiAqXG4gKiAgICAgdmFyIGhvcnNleSA9IEhvcnNlLmNyZWF0ZSgnSG9yc2V5Jyk7XG4gKiAgICAgaG9yc2V5LmdldE5hbWUoKTsgLy8gLT4gSG9yc2V5XG4gKiAgICAgaG9yc2V5Lm1ha2VTb3VuZCgpOyAvLyAtPiBBbGVydDogTmVpZ2hoaGhoIVxuICpcbiAqIEBjbGFzc1xuICogQGNvbnN0cnVjdG9yXG4gKi9cbnZhciBDb3JlT2JqZWN0ID0gZnVuY3Rpb24oKXt9O1xuLy8gTWFudWFsbHkgZXhwb3J0aW5nIHZqc1snQ29yZU9iamVjdCddIGhlcmUgZm9yIENsb3N1cmUgQ29tcGlsZXJcbi8vIGJlY2F1c2Ugb2YgdGhlIHVzZSBvZiB0aGUgZXh0ZW5kL2NyZWF0ZSBjbGFzcyBtZXRob2RzXG4vLyBJZiB3ZSBkaWRuJ3QgZG8gdGhpcywgdGhvc2UgZnVuY3Rpb25zIHdvdWxkIGdldCBmbGF0dGVuZWQgdG8gc29tZXRoaW5nIGxpa2Vcbi8vIGBhID0gLi4uYCBhbmQgYHRoaXMucHJvdG90eXBlYCB3b3VsZCByZWZlciB0byB0aGUgZ2xvYmFsIG9iamVjdCBpbnN0ZWFkIG9mXG4vLyBDb3JlT2JqZWN0XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IG9iamVjdCB0aGF0IGluaGVyaXRzIGZyb20gdGhpcyBPYmplY3RcbiAqXG4gKiAgICAgdmFyIEFuaW1hbCA9IENvcmVPYmplY3QuZXh0ZW5kKCk7XG4gKiAgICAgdmFyIEhvcnNlID0gQW5pbWFsLmV4dGVuZCgpO1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyBGdW5jdGlvbnMgYW5kIHByb3BlcnRpZXMgdG8gYmUgYXBwbGllZCB0byB0aGVcbiAqICAgICAgICAgICAgICAgICAgICAgICBuZXcgb2JqZWN0J3MgcHJvdG90eXBlXG4gKiBAcmV0dXJuIHtDb3JlT2JqZWN0fSBBbiBvYmplY3QgdGhhdCBpbmhlcml0cyBmcm9tIENvcmVPYmplY3RcbiAqIEB0aGlzIHsqfVxuICovXG5Db3JlT2JqZWN0LmV4dGVuZCA9IGZ1bmN0aW9uKHByb3BzPXt9KXtcbiAgLy8gU2V0IHVwIHRoZSBjb25zdHJ1Y3RvciB1c2luZyB0aGUgc3VwcGxpZWQgaW5pdCBtZXRob2RcbiAgLy8gb3IgdXNpbmcgdGhlIGluaXQgb2YgdGhlIHBhcmVudCBvYmplY3RcbiAgLy8gTWFrZSBzdXJlIHRvIGNoZWNrIHRoZSB1bm9iZnVzY2F0ZWQgdmVyc2lvbiBmb3IgZXh0ZXJuYWwgbGlic1xuICBsZXQgaW5pdCA9IHByb3BzWydpbml0J10gfHwgcHJvcHMuaW5pdCB8fCB0aGlzLnByb3RvdHlwZVsnaW5pdCddIHx8IHRoaXMucHJvdG90eXBlLmluaXQgfHwgZnVuY3Rpb24oKXt9O1xuICAvLyBJbiBSZXNpZydzIHNpbXBsZSBjbGFzcyBpbmhlcml0YW5jZSAocHJldmlvdXNseSB1c2VkKSB0aGUgY29uc3RydWN0b3JcbiAgLy8gIGlzIGEgZnVuY3Rpb24gdGhhdCBjYWxscyBgdGhpcy5pbml0LmFwcGx5KGFyZ3VtZW50cylgXG4gIC8vIEhvd2V2ZXIgdGhhdCB3b3VsZCBwcmV2ZW50IHVzIGZyb20gdXNpbmcgYFBhcmVudE9iamVjdC5jYWxsKHRoaXMpO2BcbiAgLy8gIGluIGEgQ2hpbGQgY29uc3RydWN0b3IgYmVjYXVzZSB0aGUgYHRoaXNgIGluIGB0aGlzLmluaXRgXG4gIC8vICB3b3VsZCBzdGlsbCByZWZlciB0byB0aGUgQ2hpbGQgYW5kIGNhdXNlIGFuIGluZmluaXRlIGxvb3AuXG4gIC8vIFdlIHdvdWxkIGluc3RlYWQgaGF2ZSB0byBkb1xuICAvLyAgICBgUGFyZW50T2JqZWN0LnByb3RvdHlwZS5pbml0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7YFxuICAvLyAgQmxlaC4gV2UncmUgbm90IGNyZWF0aW5nIGEgX3N1cGVyKCkgZnVuY3Rpb24sIHNvIGl0J3MgZ29vZCB0byBrZWVwXG4gIC8vICB0aGUgcGFyZW50IGNvbnN0cnVjdG9yIHJlZmVyZW5jZSBzaW1wbGUuXG4gIGxldCBzdWJPYmogPSBmdW5jdGlvbigpe1xuICAgIGluaXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcblxuICAvLyBJbmhlcml0IGZyb20gdGhpcyBvYmplY3QncyBwcm90b3R5cGVcbiAgc3ViT2JqLnByb3RvdHlwZSA9IExpYi5vYmouY3JlYXRlKHRoaXMucHJvdG90eXBlKTtcbiAgLy8gUmVzZXQgdGhlIGNvbnN0cnVjdG9yIHByb3BlcnR5IGZvciBzdWJPYmogb3RoZXJ3aXNlXG4gIC8vIGluc3RhbmNlcyBvZiBzdWJPYmogd291bGQgaGF2ZSB0aGUgY29uc3RydWN0b3Igb2YgdGhlIHBhcmVudCBPYmplY3RcbiAgc3ViT2JqLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1Yk9iajtcblxuICAvLyBNYWtlIHRoZSBjbGFzcyBleHRlbmRhYmxlXG4gIHN1Yk9iai5leHRlbmQgPSBDb3JlT2JqZWN0LmV4dGVuZDtcbiAgLy8gTWFrZSBhIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBpbnN0YW5jZXNcbiAgc3ViT2JqLmNyZWF0ZSA9IENvcmVPYmplY3QuY3JlYXRlO1xuXG4gIC8vIEV4dGVuZCBzdWJPYmoncyBwcm90b3R5cGUgd2l0aCBmdW5jdGlvbnMgYW5kIG90aGVyIHByb3BlcnRpZXMgZnJvbSBwcm9wc1xuICBmb3IgKHZhciBuYW1lIGluIHByb3BzKSB7XG4gICAgaWYgKHByb3BzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICBzdWJPYmoucHJvdG90eXBlW25hbWVdID0gcHJvcHNbbmFtZV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN1Yk9iajtcbn07XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIHRoaXMgT2JqZWN0IGNsYXNzXG4gKlxuICogICAgIHZhciBteUFuaW1hbCA9IEFuaW1hbC5jcmVhdGUoKTtcbiAqXG4gKiBAcmV0dXJuIHtDb3JlT2JqZWN0fSBBbiBpbnN0YW5jZSBvZiBhIENvcmVPYmplY3Qgc3ViY2xhc3NcbiAqIEB0aGlzIHsqfVxuICovXG5Db3JlT2JqZWN0LmNyZWF0ZSA9IGZ1bmN0aW9uKCl7XG4gIC8vIENyZWF0ZSBhIG5ldyBvYmplY3QgdGhhdCBpbmhlcml0cyBmcm9tIHRoaXMgb2JqZWN0J3MgcHJvdG90eXBlXG4gIHZhciBpbnN0ID0gTGliLm9iai5jcmVhdGUodGhpcy5wcm90b3R5cGUpO1xuXG4gIC8vIEFwcGx5IHRoaXMgY29uc3RydWN0b3IgZnVuY3Rpb24gdG8gdGhlIG5ldyBvYmplY3RcbiAgdGhpcy5hcHBseShpbnN0LCBhcmd1bWVudHMpO1xuXG4gIC8vIFJldHVybiB0aGUgbmV3IG9iamVjdFxuICByZXR1cm4gaW5zdDtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IENvcmVPYmplY3Q7XG4iLCIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgTWFpbiBmdW5jdGlvbiBzcmMuXG4gKi9cblxuaW1wb3J0IFBsYXllciBmcm9tICcuL3BsYXllcic7XG5pbXBvcnQgUGx1Z2lucyBmcm9tICcuL3BsdWdpbnMnO1xuaW1wb3J0IE9wdGlvbnMgZnJvbSAnLi9vcHRpb25zJztcbmltcG9ydCAqIGFzIExpYiBmcm9tICcuL2xpYic7XG5pbXBvcnQgKiBhcyBWanNVdGlsIGZyb20gJy4vdXRpbCc7XG5pbXBvcnQgQ29yZU9iamVjdCBmcm9tICcuL2NvcmUtb2JqZWN0JztcbmltcG9ydCBkb2N1bWVudCBmcm9tICdnbG9iYWwvZG9jdW1lbnQnO1xuXG4vKipcbiAqIERvdWJsZXMgYXMgdGhlIG1haW4gZnVuY3Rpb24gZm9yIHVzZXJzIHRvIGNyZWF0ZSBhIHBsYXllciBpbnN0YW5jZSBhbmQgYWxzb1xuICogdGhlIG1haW4gbGlicmFyeSBvYmplY3QuXG4gKlxuICogKipBTElBU0VTKiogdmlkZW9qcywgX1ZfIChkZXByZWNhdGVkKVxuICpcbiAqIFRoZSBgdmpzYCBmdW5jdGlvbiBjYW4gYmUgdXNlZCB0byBpbml0aWFsaXplIG9yIHJldHJpZXZlIGEgcGxheWVyLlxuICpcbiAqICAgICB2YXIgbXlQbGF5ZXIgPSB2anMoJ215X3ZpZGVvX2lkJyk7XG4gKlxuICogQHBhcmFtICB7U3RyaW5nfEVsZW1lbnR9IGlkICAgICAgVmlkZW8gZWxlbWVudCBvciB2aWRlbyBlbGVtZW50IElEXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSBvcHRpb25zICAgICAgICBPcHRpb25hbCBvcHRpb25zIG9iamVjdCBmb3IgY29uZmlnL3NldHRpbmdzXG4gKiBAcGFyYW0gIHtGdW5jdGlvbj19IHJlYWR5ICAgICAgICBPcHRpb25hbCByZWFkeSBjYWxsYmFja1xuICogQHJldHVybiB7UGxheWVyfSAgICAgICAgICAgICBBIHBsYXllciBpbnN0YW5jZVxuICogQG5hbWVzcGFjZVxuICovXG52YXIgdmlkZW9qcyA9IGZ1bmN0aW9uKGlkLCBvcHRpb25zLCByZWFkeSl7XG4gIHZhciB0YWc7IC8vIEVsZW1lbnQgb2YgSURcblxuICAvLyBBbGxvdyBmb3IgZWxlbWVudCBvciBJRCB0byBiZSBwYXNzZWQgaW5cbiAgLy8gU3RyaW5nIElEXG4gIGlmICh0eXBlb2YgaWQgPT09ICdzdHJpbmcnKSB7XG5cbiAgICAvLyBBZGp1c3QgZm9yIGpRdWVyeSBJRCBzeW50YXhcbiAgICBpZiAoaWQuaW5kZXhPZignIycpID09PSAwKSB7XG4gICAgICBpZCA9IGlkLnNsaWNlKDEpO1xuICAgIH1cblxuICAgIC8vIElmIGEgcGxheWVyIGluc3RhbmNlIGhhcyBhbHJlYWR5IGJlZW4gY3JlYXRlZCBmb3IgdGhpcyBJRCByZXR1cm4gaXQuXG4gICAgaWYgKFBsYXllci5wbGF5ZXJzW2lkXSkge1xuXG4gICAgICAvLyBJZiBvcHRpb25zIG9yIHJlYWR5IGZ1bnRpb24gYXJlIHBhc3NlZCwgd2FyblxuICAgICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgTGliLmxvZy53YXJuKGBQbGF5ZXIgXCIke2lkfVwiIGlzIGFscmVhZHkgaW5pdGlhbGlzZWQuIE9wdGlvbnMgd2lsbCBub3QgYmUgYXBwbGllZC5gKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlYWR5KSB7XG4gICAgICAgIFBsYXllci5wbGF5ZXJzW2lkXS5yZWFkeShyZWFkeSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBQbGF5ZXIucGxheWVyc1tpZF07XG5cbiAgICAvLyBPdGhlcndpc2UgZ2V0IGVsZW1lbnQgZm9yIElEXG4gICAgfSBlbHNlIHtcbiAgICAgIHRhZyA9IExpYi5lbChpZCk7XG4gICAgfVxuXG4gIC8vIElEIGlzIGEgbWVkaWEgZWxlbWVudFxuICB9IGVsc2Uge1xuICAgIHRhZyA9IGlkO1xuICB9XG5cbiAgLy8gQ2hlY2sgZm9yIGEgdXNlYWJsZSBlbGVtZW50XG4gIGlmICghdGFnIHx8ICF0YWcubm9kZU5hbWUpIHsgLy8gcmU6IG5vZGVOYW1lLCBjb3VsZCBiZSBhIGJveCBkaXYgYWxzb1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBlbGVtZW50IG9yIElEIHN1cHBsaWVkIGlzIG5vdCB2YWxpZC4gKHZpZGVvanMpJyk7IC8vIFJldHVybnNcbiAgfVxuXG4gIC8vIEVsZW1lbnQgbWF5IGhhdmUgYSBwbGF5ZXIgYXR0ciByZWZlcnJpbmcgdG8gYW4gYWxyZWFkeSBjcmVhdGVkIHBsYXllciBpbnN0YW5jZS5cbiAgLy8gSWYgbm90LCBzZXQgdXAgYSBuZXcgcGxheWVyIGFuZCByZXR1cm4gdGhlIGluc3RhbmNlLlxuICByZXR1cm4gdGFnWydwbGF5ZXInXSB8fCBuZXcgUGxheWVyKHRhZywgb3B0aW9ucywgcmVhZHkpO1xufTtcblxuLy8gQ0ROIFZlcnNpb24uIFVzZWQgdG8gdGFyZ2V0IHJpZ2h0IGZsYXNoIHN3Zi5cbnZpZGVvanMuQ0ROX1ZFUlNJT04gPSAnX19WRVJTSU9OX05PX1BBVENIX18nO1xudmlkZW9qcy5BQ0NFU1NfUFJPVE9DT0wgPSAoJ2h0dHBzOicgPT09IGRvY3VtZW50LmxvY2F0aW9uLnByb3RvY29sID8gJ2h0dHBzOi8vJyA6ICdodHRwOi8vJyk7XG5cbi8qKlxuKiBGdWxsIHBsYXllciB2ZXJzaW9uXG4qIEB0eXBlIHtzdHJpbmd9XG4qL1xudmlkZW9qc1snVkVSU0lPTiddID0gJ19fVkVSU0lPTl9fJztcblxuLy8gU2V0IENETiBWZXJzaW9uIG9mIHN3ZlxuLy8gVGhlIGFkZGVkICgrKSBibG9ja3MgdGhlIHJlcGxhY2UgZnJvbSBjaGFuZ2luZyB0aGlzIF9WRVJTSU9OX05PX1BBVENIXyBzdHJpbmdcbmlmICh2aWRlb2pzLkNETl9WRVJTSU9OICE9PSAnX19WRVJTSU9OXycrJ05PX1BBVENIX18nKSB7XG4gIE9wdGlvbnNbJ2ZsYXNoJ11bJ3N3ZiddID0gYCR7dmlkZW9qcy5BQ0NFU1NfUFJPVE9DT0x9dmpzLnplbmNkbi5uZXQvJHt2aWRlb2pzLkNETl9WRVJTSU9OfS92aWRlby1qcy5zd2ZgO1xufVxuXG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb24gZm9yIGFkZGluZyBsYW5ndWFnZXMgdG8gdGhlIGRlZmF1bHQgb3B0aW9ucy4gVXNlZnVsIGZvclxuICogYW1lbmRpbmcgbXVsdGlwbGUgbGFuZ3VhZ2Ugc3VwcG9ydCBhdCBydW50aW1lLlxuICpcbiAqIEV4YW1wbGU6IHZpZGVvanMuYWRkTGFuZ3VhZ2UoJ2VzJywgeydIZWxsbyc6J0hvbGEnfSk7XG4gKlxuICogQHBhcmFtICB7U3RyaW5nfSBjb2RlIFRoZSBsYW5ndWFnZSBjb2RlIG9yIGRpY3Rpb25hcnkgcHJvcGVydHlcbiAqIEBwYXJhbSAge09iamVjdH0gZGF0YSBUaGUgZGF0YSB2YWx1ZXMgdG8gYmUgdHJhbnNsYXRlZFxuICogQHJldHVybiB7T2JqZWN0fSBUaGUgcmVzdWx0aW5nIGdsb2JhbCBsYW5ndWFnZXMgZGljdGlvbmFyeSBvYmplY3RcbiAqL1xudmlkZW9qcy5hZGRMYW5ndWFnZSA9IGZ1bmN0aW9uKGNvZGUsIGRhdGEpe1xuICBpZihPcHRpb25zWydsYW5ndWFnZXMnXVtjb2RlXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgT3B0aW9uc1snbGFuZ3VhZ2VzJ11bY29kZV0gPSBWanNVdGlsLm1lcmdlT3B0aW9ucyhPcHRpb25zWydsYW5ndWFnZXMnXVtjb2RlXSwgZGF0YSk7XG4gIH0gZWxzZSB7XG4gICAgT3B0aW9uc1snbGFuZ3VhZ2VzJ11bY29kZV0gPSBkYXRhO1xuICB9XG4gIHJldHVybiBPcHRpb25zWydsYW5ndWFnZXMnXTtcbn07XG5cbi8qKlxuICogQ3VzdG9tIFVuaXZlcnNhbCBNb2R1bGUgRGVmaW5pdGlvbiAoVU1EKVxuICpcbiAqIFZpZGVvLmpzIHdpbGwgbmV2ZXIgYmUgYSBub24tYnJvd3NlciBsaWIgc28gd2UgY2FuIHNpbXBsaWZ5IFVNRCBhIGJ1bmNoIGFuZFxuICogc3RpbGwgc3VwcG9ydCByZXF1aXJlanMgYW5kIGJyb3dzZXJpZnkuIFRoaXMgYWxzbyBuZWVkcyB0byBiZSBjbG9zdXJlXG4gKiBjb21waWxlciBjb21wYXRpYmxlLCBzbyBzdHJpbmcga2V5cyBhcmUgdXNlZC5cbiAqL1xuaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lWydhbWQnXSkge1xuICBkZWZpbmUoJ3ZpZGVvanMnLCBbXSwgZnVuY3Rpb24oKXsgcmV0dXJuIHZpZGVvanM7IH0pO1xuXG4vLyBjaGVja2luZyB0aGF0IG1vZHVsZSBpcyBhbiBvYmplY3QgdG9vIGJlY2F1c2Ugb2YgdW1kanMvdW1kIzM1XG59IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jykge1xuICBtb2R1bGVbJ2V4cG9ydHMnXSA9IHZpZGVvanM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHZpZGVvanM7XG4iLCJpbXBvcnQgQ29tcG9uZW50IGZyb20gJy4vY29tcG9uZW50JztcbmltcG9ydCAqIGFzIExpYiBmcm9tICcuL2xpYic7XG5cbi8qKlxuICogRGlzcGxheSB0aGF0IGFuIGVycm9yIGhhcyBvY2N1cnJlZCBtYWtpbmcgdGhlIHZpZGVvIHVucGxheWFibGVcbiAqIEBwYXJhbSB7UGxheWVyfE9iamVjdH0gcGxheWVyXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbnNcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5jbGFzcyBFcnJvckRpc3BsYXkgZXh0ZW5kcyBDb21wb25lbnQge1xuXG4gIGNvbnN0cnVjdG9yKHBsYXllciwgb3B0aW9ucykge1xuICAgIHN1cGVyKHBsYXllciwgb3B0aW9ucyk7XG5cbiAgICB0aGlzLnVwZGF0ZSgpO1xuICAgIHRoaXMub24ocGxheWVyLCAnZXJyb3InLCB0aGlzLnVwZGF0ZSk7XG4gIH1cblxuICBjcmVhdGVFbCgpIHtcbiAgICB2YXIgZWwgPSBzdXBlci5jcmVhdGVFbCgnZGl2Jywge1xuICAgICAgY2xhc3NOYW1lOiAndmpzLWVycm9yLWRpc3BsYXknXG4gICAgfSk7XG5cbiAgICB0aGlzLmNvbnRlbnRFbF8gPSBMaWIuY3JlYXRlRWwoJ2RpdicpO1xuICAgIGVsLmFwcGVuZENoaWxkKHRoaXMuY29udGVudEVsXyk7XG5cbiAgICByZXR1cm4gZWw7XG4gIH1cblxuICB1cGRhdGUoKSB7XG4gICAgaWYgKHRoaXMucGxheWVyKCkuZXJyb3IoKSkge1xuICAgICAgdGhpcy5jb250ZW50RWxfLmlubmVySFRNTCA9IHRoaXMubG9jYWxpemUodGhpcy5wbGF5ZXIoKS5lcnJvcigpLm1lc3NhZ2UpO1xuICAgIH1cbiAgfVxufVxuXG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ0Vycm9yRGlzcGxheScsIEVycm9yRGlzcGxheSk7XG5leHBvcnQgZGVmYXVsdCBFcnJvckRpc3BsYXk7XG4iLCJpbXBvcnQgKiBhcyBFdmVudHMgZnJvbSAnLi9ldmVudHMnO1xuaW1wb3J0ICogYXMgTGliIGZyb20gJy4vbGliJztcblxudmFyIEV2ZW50RW1pdHRlciA9IGZ1bmN0aW9uKCkge307XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWxsb3dlZEV2ZW50c18gPSB7fTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uKHR5cGUsIGZuKSB7XG4gIC8vIFJlbW92ZSB0aGUgYWRkRXZlbnRMaXN0ZW5lciBhbGlhcyBiZWZvcmUgY2FsbGluZyBFdmVudHMub25cbiAgLy8gc28gd2UgZG9uJ3QgZ2V0IGludG8gYW4gaW5maW5pdGUgdHlwZSBsb29wXG4gIGxldCBhZWwgPSB0aGlzLmFkZEV2ZW50TGlzdGVuZXI7XG4gIHRoaXMuYWRkRXZlbnRMaXN0ZW5lciA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbiAgRXZlbnRzLm9uKHRoaXMsIHR5cGUsIGZuKTtcbiAgdGhpcy5hZGRFdmVudExpc3RlbmVyID0gYWVsO1xufTtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUub247XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub2ZmID0gZnVuY3Rpb24odHlwZSwgZm4pIHtcbiAgRXZlbnRzLm9mZih0aGlzLCB0eXBlLCBmbik7XG59O1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVFdmVudExpc3RlbmVyID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vZmY7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub25lID0gZnVuY3Rpb24odHlwZSwgZm4pIHtcbiAgRXZlbnRzLm9uZSh0aGlzLCB0eXBlLCBmbik7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnRyaWdnZXIgPSBmdW5jdGlvbihldmVudCkge1xuICBsZXQgdHlwZSA9IGV2ZW50LnR5cGUgfHwgZXZlbnQ7XG5cbiAgaWYgKHR5cGVvZiBldmVudCA9PT0gJ3N0cmluZycpIHtcbiAgICBldmVudCA9IHtcbiAgICAgIHR5cGU6IHR5cGVcbiAgICB9O1xuICB9XG4gIGV2ZW50ID0gRXZlbnRzLmZpeEV2ZW50KGV2ZW50KTtcblxuICBpZiAodGhpcy5hbGxvd2VkRXZlbnRzX1t0eXBlXSAmJiB0aGlzWydvbicgKyB0eXBlXSkge1xuICAgIHRoaXNbJ29uJyArIHR5cGVdKGV2ZW50KTtcbiAgfVxuXG4gIEV2ZW50cy50cmlnZ2VyKHRoaXMsIGV2ZW50KTtcbn07XG4vLyBUaGUgc3RhbmRhcmQgRE9NIEV2ZW50VGFyZ2V0LmRpc3BhdGNoRXZlbnQoKSBpcyBhbGlhc2VkIHRvIHRyaWdnZXIoKVxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5kaXNwYXRjaEV2ZW50ID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS50cmlnZ2VyO1xuXG5leHBvcnQgZGVmYXVsdCBFdmVudEVtaXR0ZXI7XG4iLCIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgRXZlbnQgU3lzdGVtIChKb2huIFJlc2lnIC0gU2VjcmV0cyBvZiBhIEpTIE5pbmphIGh0dHA6Ly9qc25pbmphLmNvbS8pXG4gKiAoT3JpZ2luYWwgYm9vayB2ZXJzaW9uIHdhc24ndCBjb21wbGV0ZWx5IHVzYWJsZSwgc28gZml4ZWQgc29tZSB0aGluZ3MgYW5kIG1hZGUgQ2xvc3VyZSBDb21waWxlciBjb21wYXRpYmxlKVxuICogVGhpcyBzaG91bGQgd29yayB2ZXJ5IHNpbWlsYXJseSB0byBqUXVlcnkncyBldmVudHMsIGhvd2V2ZXIgaXQncyBiYXNlZCBvZmYgdGhlIGJvb2sgdmVyc2lvbiB3aGljaCBpc24ndCBhc1xuICogcm9idXN0IGFzIGpxdWVyeSdzLCBzbyB0aGVyZSdzIHByb2JhYmx5IHNvbWUgZGlmZmVyZW5jZXMuXG4gKi9cblxuaW1wb3J0ICogYXMgTGliIGZyb20gJy4vbGliJztcbmltcG9ydCB3aW5kb3cgZnJvbSAnZ2xvYmFsL3dpbmRvdyc7XG5pbXBvcnQgZG9jdW1lbnQgZnJvbSAnZ2xvYmFsL2RvY3VtZW50JztcblxuLyoqXG4gKiBGaXggYSBuYXRpdmUgZXZlbnQgdG8gaGF2ZSBzdGFuZGFyZCBwcm9wZXJ0eSB2YWx1ZXNcbiAqIEBwYXJhbSAge09iamVjdH0gZXZlbnQgRXZlbnQgb2JqZWN0IHRvIGZpeFxuICogQHJldHVybiB7T2JqZWN0fVxuICogQHByaXZhdGVcbiAqL1xudmFyIGZpeEV2ZW50ID0gZnVuY3Rpb24oZXZlbnQpIHtcblxuICBmdW5jdGlvbiByZXR1cm5UcnVlKCkgeyByZXR1cm4gdHJ1ZTsgfVxuICBmdW5jdGlvbiByZXR1cm5GYWxzZSgpIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgLy8gVGVzdCBpZiBmaXhpbmcgdXAgaXMgbmVlZGVkXG4gIC8vIFVzZWQgdG8gY2hlY2sgaWYgIWV2ZW50LnN0b3BQcm9wYWdhdGlvbiBpbnN0ZWFkIG9mIGlzUHJvcGFnYXRpb25TdG9wcGVkXG4gIC8vIEJ1dCBuYXRpdmUgZXZlbnRzIHJldHVybiB0cnVlIGZvciBzdG9wUHJvcGFnYXRpb24sIGJ1dCBkb24ndCBoYXZlXG4gIC8vIG90aGVyIGV4cGVjdGVkIG1ldGhvZHMgbGlrZSBpc1Byb3BhZ2F0aW9uU3RvcHBlZC4gU2VlbXMgdG8gYmUgYSBwcm9ibGVtXG4gIC8vIHdpdGggdGhlIEphdmFzY3JpcHQgTmluamEgY29kZS4gU28gd2UncmUganVzdCBvdmVycmlkaW5nIGFsbCBldmVudHMgbm93LlxuICBpZiAoIWV2ZW50IHx8ICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCkge1xuICAgIHZhciBvbGQgPSBldmVudCB8fCB3aW5kb3cuZXZlbnQ7XG5cbiAgICBldmVudCA9IHt9O1xuICAgIC8vIENsb25lIHRoZSBvbGQgb2JqZWN0IHNvIHRoYXQgd2UgY2FuIG1vZGlmeSB0aGUgdmFsdWVzIGV2ZW50ID0ge307XG4gICAgLy8gSUU4IERvZXNuJ3QgbGlrZSB3aGVuIHlvdSBtZXNzIHdpdGggbmF0aXZlIGV2ZW50IHByb3BlcnRpZXNcbiAgICAvLyBGaXJlZm94IHJldHVybnMgZmFsc2UgZm9yIGV2ZW50Lmhhc093blByb3BlcnR5KCd0eXBlJykgYW5kIG90aGVyIHByb3BzXG4gICAgLy8gIHdoaWNoIG1ha2VzIGNvcHlpbmcgbW9yZSBkaWZmaWN1bHQuXG4gICAgLy8gVE9ETzogUHJvYmFibHkgYmVzdCB0byBjcmVhdGUgYSB3aGl0ZWxpc3Qgb2YgZXZlbnQgcHJvcHNcbiAgICBmb3IgKHZhciBrZXkgaW4gb2xkKSB7XG4gICAgICAvLyBTYWZhcmkgNi4wLjMgd2FybnMgeW91IGlmIHlvdSB0cnkgdG8gY29weSBkZXByZWNhdGVkIGxheWVyWC9ZXG4gICAgICAvLyBDaHJvbWUgd2FybnMgeW91IGlmIHlvdSB0cnkgdG8gY29weSBkZXByZWNhdGVkIGtleWJvYXJkRXZlbnQua2V5TG9jYXRpb25cbiAgICAgIGlmIChrZXkgIT09ICdsYXllclgnICYmIGtleSAhPT0gJ2xheWVyWScgJiYga2V5ICE9PSAna2V5TG9jYXRpb24nKSB7XG4gICAgICAgIC8vIENocm9tZSAzMisgd2FybnMgaWYgeW91IHRyeSB0byBjb3B5IGRlcHJlY2F0ZWQgcmV0dXJuVmFsdWUsIGJ1dFxuICAgICAgICAvLyB3ZSBzdGlsbCB3YW50IHRvIGlmIHByZXZlbnREZWZhdWx0IGlzbid0IHN1cHBvcnRlZCAoSUU4KS5cbiAgICAgICAgaWYgKCEoa2V5ID09PSAncmV0dXJuVmFsdWUnICYmIG9sZC5wcmV2ZW50RGVmYXVsdCkpIHtcbiAgICAgICAgICBldmVudFtrZXldID0gb2xkW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUaGUgZXZlbnQgb2NjdXJyZWQgb24gdGhpcyBlbGVtZW50XG4gICAgaWYgKCFldmVudC50YXJnZXQpIHtcbiAgICAgIGV2ZW50LnRhcmdldCA9IGV2ZW50LnNyY0VsZW1lbnQgfHwgZG9jdW1lbnQ7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHdoaWNoIG90aGVyIGVsZW1lbnQgdGhlIGV2ZW50IGlzIHJlbGF0ZWQgdG9cbiAgICBldmVudC5yZWxhdGVkVGFyZ2V0ID0gZXZlbnQuZnJvbUVsZW1lbnQgPT09IGV2ZW50LnRhcmdldCA/XG4gICAgICBldmVudC50b0VsZW1lbnQgOlxuICAgICAgZXZlbnQuZnJvbUVsZW1lbnQ7XG5cbiAgICAvLyBTdG9wIHRoZSBkZWZhdWx0IGJyb3dzZXIgYWN0aW9uXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAob2xkLnByZXZlbnREZWZhdWx0KSB7XG4gICAgICAgIG9sZC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuICAgICAgZXZlbnQucmV0dXJuVmFsdWUgPSBmYWxzZTtcbiAgICAgIGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgPSB0cnVlO1xuICAgIH07XG5cbiAgICBldmVudC5kZWZhdWx0UHJldmVudGVkID0gZmFsc2U7XG5cbiAgICAvLyBTdG9wIHRoZSBldmVudCBmcm9tIGJ1YmJsaW5nXG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKG9sZC5zdG9wUHJvcGFnYXRpb24pIHtcbiAgICAgICAgb2xkLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgfVxuICAgICAgZXZlbnQuY2FuY2VsQnViYmxlID0gdHJ1ZTtcbiAgICAgIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcbiAgICB9O1xuXG4gICAgZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5GYWxzZTtcblxuICAgIC8vIFN0b3AgdGhlIGV2ZW50IGZyb20gYnViYmxpbmcgYW5kIGV4ZWN1dGluZyBvdGhlciBoYW5kbGVyc1xuICAgIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChvbGQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKSB7XG4gICAgICAgIG9sZC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgIH1cbiAgICAgIGV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH07XG5cbiAgICBldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVybkZhbHNlO1xuXG4gICAgLy8gSGFuZGxlIG1vdXNlIHBvc2l0aW9uXG4gICAgaWYgKGV2ZW50LmNsaWVudFggIT0gbnVsbCkge1xuICAgICAgdmFyIGRvYyA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgYm9keSA9IGRvY3VtZW50LmJvZHk7XG5cbiAgICAgIGV2ZW50LnBhZ2VYID0gZXZlbnQuY2xpZW50WCArXG4gICAgICAgIChkb2MgJiYgZG9jLnNjcm9sbExlZnQgfHwgYm9keSAmJiBib2R5LnNjcm9sbExlZnQgfHwgMCkgLVxuICAgICAgICAoZG9jICYmIGRvYy5jbGllbnRMZWZ0IHx8IGJvZHkgJiYgYm9keS5jbGllbnRMZWZ0IHx8IDApO1xuICAgICAgZXZlbnQucGFnZVkgPSBldmVudC5jbGllbnRZICtcbiAgICAgICAgKGRvYyAmJiBkb2Muc2Nyb2xsVG9wIHx8IGJvZHkgJiYgYm9keS5zY3JvbGxUb3AgfHwgMCkgLVxuICAgICAgICAoZG9jICYmIGRvYy5jbGllbnRUb3AgfHwgYm9keSAmJiBib2R5LmNsaWVudFRvcCB8fCAwKTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUga2V5IHByZXNzZXNcbiAgICBldmVudC53aGljaCA9IGV2ZW50LmNoYXJDb2RlIHx8IGV2ZW50LmtleUNvZGU7XG5cbiAgICAvLyBGaXggYnV0dG9uIGZvciBtb3VzZSBjbGlja3M6XG4gICAgLy8gMCA9PSBsZWZ0OyAxID09IG1pZGRsZTsgMiA9PSByaWdodFxuICAgIGlmIChldmVudC5idXR0b24gIT0gbnVsbCkge1xuICAgICAgZXZlbnQuYnV0dG9uID0gKGV2ZW50LmJ1dHRvbiAmIDEgPyAwIDpcbiAgICAgICAgKGV2ZW50LmJ1dHRvbiAmIDQgPyAxIDpcbiAgICAgICAgICAoZXZlbnQuYnV0dG9uICYgMiA/IDIgOiAwKSkpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFJldHVybnMgZml4ZWQtdXAgaW5zdGFuY2VcbiAgcmV0dXJuIGV2ZW50O1xufTtcblxuLyoqXG4gKiBBZGQgYW4gZXZlbnQgbGlzdGVuZXIgdG8gZWxlbWVudFxuICogSXQgc3RvcmVzIHRoZSBoYW5kbGVyIGZ1bmN0aW9uIGluIGEgc2VwYXJhdGUgY2FjaGUgb2JqZWN0XG4gKiBhbmQgYWRkcyBhIGdlbmVyaWMgaGFuZGxlciB0byB0aGUgZWxlbWVudCdzIGV2ZW50LFxuICogYWxvbmcgd2l0aCBhIHVuaXF1ZSBpZCAoZ3VpZCkgdG8gdGhlIGVsZW1lbnQuXG4gKiBAcGFyYW0gIHtFbGVtZW50fE9iamVjdH0gICBlbGVtIEVsZW1lbnQgb3Igb2JqZWN0IHRvIGJpbmQgbGlzdGVuZXJzIHRvXG4gKiBAcGFyYW0gIHtTdHJpbmd8QXJyYXl9ICAgdHlwZSBUeXBlIG9mIGV2ZW50IHRvIGJpbmQgdG8uXG4gKiBAcGFyYW0gIHtGdW5jdGlvbn0gZm4gICBFdmVudCBsaXN0ZW5lci5cbiAqIEBwcml2YXRlXG4gKi9cbnZhciBvbiA9IGZ1bmN0aW9uKGVsZW0sIHR5cGUsIGZuKXtcbiAgaWYgKExpYi5vYmouaXNBcnJheSh0eXBlKSkge1xuICAgIHJldHVybiBfaGFuZGxlTXVsdGlwbGVFdmVudHMob24sIGVsZW0sIHR5cGUsIGZuKTtcbiAgfVxuXG4gIGxldCBkYXRhID0gTGliLmdldERhdGEoZWxlbSk7XG5cbiAgLy8gV2UgbmVlZCBhIHBsYWNlIHRvIHN0b3JlIGFsbCBvdXIgaGFuZGxlciBkYXRhXG4gIGlmICghZGF0YS5oYW5kbGVycykgZGF0YS5oYW5kbGVycyA9IHt9O1xuXG4gIGlmICghZGF0YS5oYW5kbGVyc1t0eXBlXSkgZGF0YS5oYW5kbGVyc1t0eXBlXSA9IFtdO1xuXG4gIGlmICghZm4uZ3VpZCkgZm4uZ3VpZCA9IExpYi5ndWlkKys7XG5cbiAgZGF0YS5oYW5kbGVyc1t0eXBlXS5wdXNoKGZuKTtcblxuICBpZiAoIWRhdGEuZGlzcGF0Y2hlcikge1xuICAgIGRhdGEuZGlzYWJsZWQgPSBmYWxzZTtcblxuICAgIGRhdGEuZGlzcGF0Y2hlciA9IGZ1bmN0aW9uIChldmVudCl7XG5cbiAgICAgIGlmIChkYXRhLmRpc2FibGVkKSByZXR1cm47XG4gICAgICBldmVudCA9IGZpeEV2ZW50KGV2ZW50KTtcblxuICAgICAgdmFyIGhhbmRsZXJzID0gZGF0YS5oYW5kbGVyc1tldmVudC50eXBlXTtcblxuICAgICAgaWYgKGhhbmRsZXJzKSB7XG4gICAgICAgIC8vIENvcHkgaGFuZGxlcnMgc28gaWYgaGFuZGxlcnMgYXJlIGFkZGVkL3JlbW92ZWQgZHVyaW5nIHRoZSBwcm9jZXNzIGl0IGRvZXNuJ3QgdGhyb3cgZXZlcnl0aGluZyBvZmYuXG4gICAgICAgIHZhciBoYW5kbGVyc0NvcHkgPSBoYW5kbGVycy5zbGljZSgwKTtcblxuICAgICAgICBmb3IgKHZhciBtID0gMCwgbiA9IGhhbmRsZXJzQ29weS5sZW5ndGg7IG0gPCBuOyBtKyspIHtcbiAgICAgICAgICBpZiAoZXZlbnQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhhbmRsZXJzQ29weVttXS5jYWxsKGVsZW0sIGV2ZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgaWYgKGRhdGEuaGFuZGxlcnNbdHlwZV0ubGVuZ3RoID09PSAxKSB7XG4gICAgaWYgKGVsZW0uYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgZWxlbS5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGRhdGEuZGlzcGF0Y2hlciwgZmFsc2UpO1xuICAgIH0gZWxzZSBpZiAoZWxlbS5hdHRhY2hFdmVudCkge1xuICAgICAgZWxlbS5hdHRhY2hFdmVudCgnb24nICsgdHlwZSwgZGF0YS5kaXNwYXRjaGVyKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogUmVtb3ZlcyBldmVudCBsaXN0ZW5lcnMgZnJvbSBhbiBlbGVtZW50XG4gKiBAcGFyYW0gIHtFbGVtZW50fE9iamVjdH0gICBlbGVtIE9iamVjdCB0byByZW1vdmUgbGlzdGVuZXJzIGZyb21cbiAqIEBwYXJhbSAge1N0cmluZ3xBcnJheT19ICAgdHlwZSBUeXBlIG9mIGxpc3RlbmVyIHRvIHJlbW92ZS4gRG9uJ3QgaW5jbHVkZSB0byByZW1vdmUgYWxsIGV2ZW50cyBmcm9tIGVsZW1lbnQuXG4gKiBAcGFyYW0gIHtGdW5jdGlvbn0gZm4gICBTcGVjaWZpYyBsaXN0ZW5lciB0byByZW1vdmUuIERvbid0IGluY2x1ZGUgdG8gcmVtb3ZlIGxpc3RlbmVycyBmb3IgYW4gZXZlbnQgdHlwZS5cbiAqIEBwcml2YXRlXG4gKi9cbnZhciBvZmYgPSBmdW5jdGlvbihlbGVtLCB0eXBlLCBmbikge1xuICAvLyBEb24ndCB3YW50IHRvIGFkZCBhIGNhY2hlIG9iamVjdCB0aHJvdWdoIGdldERhdGEgaWYgbm90IG5lZWRlZFxuICBpZiAoIUxpYi5oYXNEYXRhKGVsZW0pKSByZXR1cm47XG5cbiAgbGV0IGRhdGEgPSBMaWIuZ2V0RGF0YShlbGVtKTtcblxuICAvLyBJZiBubyBldmVudHMgZXhpc3QsIG5vdGhpbmcgdG8gdW5iaW5kXG4gIGlmICghZGF0YS5oYW5kbGVycykgeyByZXR1cm47IH1cblxuICBpZiAoTGliLm9iai5pc0FycmF5KHR5cGUpKSB7XG4gICAgcmV0dXJuIF9oYW5kbGVNdWx0aXBsZUV2ZW50cyhvZmYsIGVsZW0sIHR5cGUsIGZuKTtcbiAgfVxuXG4gIC8vIFV0aWxpdHkgZnVuY3Rpb25cbiAgdmFyIHJlbW92ZVR5cGUgPSBmdW5jdGlvbih0KXtcbiAgICAgZGF0YS5oYW5kbGVyc1t0XSA9IFtdO1xuICAgICBjbGVhblVwRXZlbnRzKGVsZW0sdCk7XG4gIH07XG5cbiAgLy8gQXJlIHdlIHJlbW92aW5nIGFsbCBib3VuZCBldmVudHM/XG4gIGlmICghdHlwZSkge1xuICAgIGZvciAobGV0IHQgaW4gZGF0YS5oYW5kbGVycykgcmVtb3ZlVHlwZSh0KTtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgaGFuZGxlcnMgPSBkYXRhLmhhbmRsZXJzW3R5cGVdO1xuXG4gIC8vIElmIG5vIGhhbmRsZXJzIGV4aXN0LCBub3RoaW5nIHRvIHVuYmluZFxuICBpZiAoIWhhbmRsZXJzKSByZXR1cm47XG5cbiAgLy8gSWYgbm8gbGlzdGVuZXIgd2FzIHByb3ZpZGVkLCByZW1vdmUgYWxsIGxpc3RlbmVycyBmb3IgdHlwZVxuICBpZiAoIWZuKSB7XG4gICAgcmVtb3ZlVHlwZSh0eXBlKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBXZSdyZSBvbmx5IHJlbW92aW5nIGEgc2luZ2xlIGhhbmRsZXJcbiAgaWYgKGZuLmd1aWQpIHtcbiAgICBmb3IgKGxldCBuID0gMDsgbiA8IGhhbmRsZXJzLmxlbmd0aDsgbisrKSB7XG4gICAgICBpZiAoaGFuZGxlcnNbbl0uZ3VpZCA9PT0gZm4uZ3VpZCkge1xuICAgICAgICBoYW5kbGVycy5zcGxpY2Uobi0tLCAxKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjbGVhblVwRXZlbnRzKGVsZW0sIHR5cGUpO1xufTtcblxuLyoqXG4gKiBDbGVhbiB1cCB0aGUgbGlzdGVuZXIgY2FjaGUgYW5kIGRpc3BhdGNoZXJzXG4gKiBAcGFyYW0gIHtFbGVtZW50fE9iamVjdH0gZWxlbSBFbGVtZW50IHRvIGNsZWFuIHVwXG4gKiBAcGFyYW0gIHtTdHJpbmd9IHR5cGUgVHlwZSBvZiBldmVudCB0byBjbGVhbiB1cFxuICogQHByaXZhdGVcbiAqL1xudmFyIGNsZWFuVXBFdmVudHMgPSBmdW5jdGlvbihlbGVtLCB0eXBlKSB7XG4gIHZhciBkYXRhID0gTGliLmdldERhdGEoZWxlbSk7XG5cbiAgLy8gUmVtb3ZlIHRoZSBldmVudHMgb2YgYSBwYXJ0aWN1bGFyIHR5cGUgaWYgdGhlcmUgYXJlIG5vbmUgbGVmdFxuICBpZiAoZGF0YS5oYW5kbGVyc1t0eXBlXS5sZW5ndGggPT09IDApIHtcbiAgICBkZWxldGUgZGF0YS5oYW5kbGVyc1t0eXBlXTtcbiAgICAvLyBkYXRhLmhhbmRsZXJzW3R5cGVdID0gbnVsbDtcbiAgICAvLyBTZXR0aW5nIHRvIG51bGwgd2FzIGNhdXNpbmcgYW4gZXJyb3Igd2l0aCBkYXRhLmhhbmRsZXJzXG5cbiAgICAvLyBSZW1vdmUgdGhlIG1ldGEtaGFuZGxlciBmcm9tIHRoZSBlbGVtZW50XG4gICAgaWYgKGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lcikge1xuICAgICAgZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGRhdGEuZGlzcGF0Y2hlciwgZmFsc2UpO1xuICAgIH0gZWxzZSBpZiAoZWxlbS5kZXRhY2hFdmVudCkge1xuICAgICAgZWxlbS5kZXRhY2hFdmVudCgnb24nICsgdHlwZSwgZGF0YS5kaXNwYXRjaGVyKTtcbiAgICB9XG4gIH1cblxuICAvLyBSZW1vdmUgdGhlIGV2ZW50cyBvYmplY3QgaWYgdGhlcmUgYXJlIG5vIHR5cGVzIGxlZnRcbiAgaWYgKExpYi5pc0VtcHR5KGRhdGEuaGFuZGxlcnMpKSB7XG4gICAgZGVsZXRlIGRhdGEuaGFuZGxlcnM7XG4gICAgZGVsZXRlIGRhdGEuZGlzcGF0Y2hlcjtcbiAgICBkZWxldGUgZGF0YS5kaXNhYmxlZDtcblxuICAgIC8vIGRhdGEuaGFuZGxlcnMgPSBudWxsO1xuICAgIC8vIGRhdGEuZGlzcGF0Y2hlciA9IG51bGw7XG4gICAgLy8gZGF0YS5kaXNhYmxlZCA9IG51bGw7XG4gIH1cblxuICAvLyBGaW5hbGx5IHJlbW92ZSB0aGUgZXhwYW5kbyBpZiB0aGVyZSBpcyBubyBkYXRhIGxlZnRcbiAgaWYgKExpYi5pc0VtcHR5KGRhdGEpKSB7XG4gICAgTGliLnJlbW92ZURhdGEoZWxlbSk7XG4gIH1cbn07XG5cbi8qKlxuICogVHJpZ2dlciBhbiBldmVudCBmb3IgYW4gZWxlbWVudFxuICogQHBhcmFtICB7RWxlbWVudHxPYmplY3R9ICAgICAgZWxlbSAgRWxlbWVudCB0byB0cmlnZ2VyIGFuIGV2ZW50IG9uXG4gKiBAcGFyYW0gIHtFdmVudHxPYmplY3R8U3RyaW5nfSBldmVudCBBIHN0cmluZyAodGhlIHR5cGUpIG9yIGFuIGV2ZW50IG9iamVjdCB3aXRoIGEgdHlwZSBhdHRyaWJ1dGVcbiAqIEBwcml2YXRlXG4gKi9cbnZhciB0cmlnZ2VyID0gZnVuY3Rpb24oZWxlbSwgZXZlbnQpIHtcbiAgLy8gRmV0Y2hlcyBlbGVtZW50IGRhdGEgYW5kIGEgcmVmZXJlbmNlIHRvIHRoZSBwYXJlbnQgKGZvciBidWJibGluZykuXG4gIC8vIERvbid0IHdhbnQgdG8gYWRkIGEgZGF0YSBvYmplY3QgdG8gY2FjaGUgZm9yIGV2ZXJ5IHBhcmVudCxcbiAgLy8gc28gY2hlY2tpbmcgaGFzRGF0YSBmaXJzdC5cbiAgdmFyIGVsZW1EYXRhID0gKExpYi5oYXNEYXRhKGVsZW0pKSA/IExpYi5nZXREYXRhKGVsZW0pIDoge307XG4gIHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGUgfHwgZWxlbS5vd25lckRvY3VtZW50O1xuICAgICAgLy8gdHlwZSA9IGV2ZW50LnR5cGUgfHwgZXZlbnQsXG4gICAgICAvLyBoYW5kbGVyO1xuXG4gIC8vIElmIGFuIGV2ZW50IG5hbWUgd2FzIHBhc3NlZCBhcyBhIHN0cmluZywgY3JlYXRlcyBhbiBldmVudCBvdXQgb2YgaXRcbiAgaWYgKHR5cGVvZiBldmVudCA9PT0gJ3N0cmluZycpIHtcbiAgICBldmVudCA9IHsgdHlwZTpldmVudCwgdGFyZ2V0OmVsZW0gfTtcbiAgfVxuICAvLyBOb3JtYWxpemVzIHRoZSBldmVudCBwcm9wZXJ0aWVzLlxuICBldmVudCA9IGZpeEV2ZW50KGV2ZW50KTtcblxuICAvLyBJZiB0aGUgcGFzc2VkIGVsZW1lbnQgaGFzIGEgZGlzcGF0Y2hlciwgZXhlY3V0ZXMgdGhlIGVzdGFibGlzaGVkIGhhbmRsZXJzLlxuICBpZiAoZWxlbURhdGEuZGlzcGF0Y2hlcikge1xuICAgIGVsZW1EYXRhLmRpc3BhdGNoZXIuY2FsbChlbGVtLCBldmVudCk7XG4gIH1cblxuICAvLyBVbmxlc3MgZXhwbGljaXRseSBzdG9wcGVkIG9yIHRoZSBldmVudCBkb2VzIG5vdCBidWJibGUgKGUuZy4gbWVkaWEgZXZlbnRzKVxuICAgIC8vIHJlY3Vyc2l2ZWx5IGNhbGxzIHRoaXMgZnVuY3Rpb24gdG8gYnViYmxlIHRoZSBldmVudCB1cCB0aGUgRE9NLlxuICAgIGlmIChwYXJlbnQgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgJiYgZXZlbnQuYnViYmxlcyAhPT0gZmFsc2UpIHtcbiAgICB0cmlnZ2VyKHBhcmVudCwgZXZlbnQpO1xuXG4gIC8vIElmIGF0IHRoZSB0b3Agb2YgdGhlIERPTSwgdHJpZ2dlcnMgdGhlIGRlZmF1bHQgYWN0aW9uIHVubGVzcyBkaXNhYmxlZC5cbiAgfSBlbHNlIGlmICghcGFyZW50ICYmICFldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgdmFyIHRhcmdldERhdGEgPSBMaWIuZ2V0RGF0YShldmVudC50YXJnZXQpO1xuXG4gICAgLy8gQ2hlY2tzIGlmIHRoZSB0YXJnZXQgaGFzIGEgZGVmYXVsdCBhY3Rpb24gZm9yIHRoaXMgZXZlbnQuXG4gICAgaWYgKGV2ZW50LnRhcmdldFtldmVudC50eXBlXSkge1xuICAgICAgLy8gVGVtcG9yYXJpbHkgZGlzYWJsZXMgZXZlbnQgZGlzcGF0Y2hpbmcgb24gdGhlIHRhcmdldCBhcyB3ZSBoYXZlIGFscmVhZHkgZXhlY3V0ZWQgdGhlIGhhbmRsZXIuXG4gICAgICB0YXJnZXREYXRhLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgIC8vIEV4ZWN1dGVzIHRoZSBkZWZhdWx0IGFjdGlvbi5cbiAgICAgIGlmICh0eXBlb2YgZXZlbnQudGFyZ2V0W2V2ZW50LnR5cGVdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGV2ZW50LnRhcmdldFtldmVudC50eXBlXSgpO1xuICAgICAgfVxuICAgICAgLy8gUmUtZW5hYmxlcyBldmVudCBkaXNwYXRjaGluZy5cbiAgICAgIHRhcmdldERhdGEuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICAvLyBJbmZvcm0gdGhlIHRyaWdnZXJlciBpZiB0aGUgZGVmYXVsdCB3YXMgcHJldmVudGVkIGJ5IHJldHVybmluZyBmYWxzZVxuICByZXR1cm4gIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQ7XG59O1xuXG4vKipcbiAqIFRyaWdnZXIgYSBsaXN0ZW5lciBvbmx5IG9uY2UgZm9yIGFuIGV2ZW50XG4gKiBAcGFyYW0gIHtFbGVtZW50fE9iamVjdH0gICBlbGVtIEVsZW1lbnQgb3Igb2JqZWN0IHRvXG4gKiBAcGFyYW0gIHtTdHJpbmd8QXJyYXl9ICAgdHlwZVxuICogQHBhcmFtICB7RnVuY3Rpb259IGZuXG4gKiBAcHJpdmF0ZVxuICovXG52YXIgb25lID0gZnVuY3Rpb24oZWxlbSwgdHlwZSwgZm4pIHtcbiAgaWYgKExpYi5vYmouaXNBcnJheSh0eXBlKSkge1xuICAgIHJldHVybiBfaGFuZGxlTXVsdGlwbGVFdmVudHMob25lLCBlbGVtLCB0eXBlLCBmbik7XG4gIH1cbiAgdmFyIGZ1bmMgPSBmdW5jdGlvbigpe1xuICAgIG9mZihlbGVtLCB0eXBlLCBmdW5jKTtcbiAgICBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xuICAvLyBjb3B5IHRoZSBndWlkIHRvIHRoZSBuZXcgZnVuY3Rpb24gc28gaXQgY2FuIHJlbW92ZWQgdXNpbmcgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uJ3MgSURcbiAgZnVuYy5ndWlkID0gZm4uZ3VpZCA9IGZuLmd1aWQgfHwgTGliLmd1aWQrKztcbiAgb24oZWxlbSwgdHlwZSwgZnVuYyk7XG59O1xuXG4vKipcbiAqIExvb3BzIHRocm91Z2ggYW4gYXJyYXkgb2YgZXZlbnQgdHlwZXMgYW5kIGNhbGxzIHRoZSByZXF1ZXN0ZWQgbWV0aG9kIGZvciBlYWNoIHR5cGUuXG4gKiBAcGFyYW0gIHtGdW5jdGlvbn0gZm4gICBUaGUgZXZlbnQgbWV0aG9kIHdlIHdhbnQgdG8gdXNlLlxuICogQHBhcmFtICB7RWxlbWVudHxPYmplY3R9IGVsZW0gRWxlbWVudCBvciBvYmplY3QgdG8gYmluZCBsaXN0ZW5lcnMgdG9cbiAqIEBwYXJhbSAge1N0cmluZ30gICB0eXBlIFR5cGUgb2YgZXZlbnQgdG8gYmluZCB0by5cbiAqIEBwYXJhbSAge0Z1bmN0aW9ufSBjYWxsYmFjayAgIEV2ZW50IGxpc3RlbmVyLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gX2hhbmRsZU11bHRpcGxlRXZlbnRzKGZuLCBlbGVtLCB0eXBlLCBjYWxsYmFjaykge1xuICBMaWIuYXJyLmZvckVhY2godHlwZSwgZnVuY3Rpb24odHlwZSkge1xuICAgIGZuKGVsZW0sIHR5cGUsIGNhbGxiYWNrKTsgLy9DYWxsIHRoZSBldmVudCBtZXRob2QgZm9yIGVhY2ggb25lIG9mIHRoZSB0eXBlc1xuICB9KTtcbn1cblxuZXhwb3J0IHsgb24sIG9mZiwgY2xlYW5VcEV2ZW50cywgZml4RXZlbnQsIG9uZSwgdHJpZ2dlciB9O1xuIiwiaW1wb3J0ICogYXMgTGliIGZyb20gJy4vbGliJztcblxuLyoqXG4gKiBBIGNvbWJpbmF0aW9uIG9mIG5vZGUgaW5oZXJpdHMgYW5kIGJhYmVsJ3MgaW5oZXJpdHMgKGFmdGVyIHRyYW5zcGlsZSkuXG4gKiBCb3RoIHdvcmsgdGhlIHNhbWUgYnV0IG5vZGUgYWRkcyBgc3VwZXJfYCB0byB0aGUgc3ViQ2xhc3NcbiAqIGFuZCBCYWJsZSBhZGRzIHRoZSBzdXBlckNsYXNzIGFzIF9fcHJvdG9fXy4gQm90aCBzZWVtIHVzZWZ1bC5cbiAqL1xuY29uc3QgX2luaGVyaXRzID0gZnVuY3Rpb24gKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gJ2Z1bmN0aW9uJyAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCAnICsgdHlwZW9mIHN1cGVyQ2xhc3MpO1xuICB9XG5cbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuXG4gIGlmIChzdXBlckNsYXNzKSB7XG4gICAgLy8gbm9kZVxuICAgIHN1YkNsYXNzLnN1cGVyXyA9IHN1cGVyQ2xhc3M7XG4gIH1cbn07XG5cbi8qKlxuICogRnVuY3Rpb24gZm9yIHN1YmNsYXNzaW5nIHVzaW5nIHRoZSBzYW1lIGluaGVyaXRhbmNlIHRoYXRcbiAqIHZpZGVvanMgdXNlcyBpbnRlcm5hbGx5XG4gKlxuICogYGBgXG4gKiB2YXIgQnV0dG9uID0gdmlkZW9qcy5nZXRDb21wb25lbnQoJ0J1dHRvbicpO1xuICpcbiAqIHZhciBNeUJ1dHRvbiA9IHZpZGVvanMuZXh0ZW5kcyhCdXR0b24sIHtcbiAqICAgY29uc3RydWN0b3I6IGZ1bmN0aW9uKHBsYXllciwgb3B0aW9ucykge1xuICogICAgIEJ1dHRvbi5jYWxsKHRoaXMsIHBsYXllciwgb3B0aW9ucyk7XG4gKiAgIH0sXG4gKlxuICogICBvbkNsaWNrOiBmdW5jdGlvbigpIHtcbiAqICAgICAvLyBkb1NvbWV0aGluZ1xuICogICB9XG4gKiB9KTtcbiAqIGBgYFxuICovXG5jb25zdCBleHRlbmRzRm4gPSBmdW5jdGlvbihzdXBlckNsYXNzLCBzdWJDbGFzc01ldGhvZHM9e30pIHtcbiAgbGV0IHN1YkNsYXNzID0gZnVuY3Rpb24oKSB7XG4gICAgc3VwZXJDbGFzcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xuICBsZXQgbWV0aG9kcyA9IHt9O1xuXG4gIGlmIChzdWJDbGFzc01ldGhvZHMuY29uc3RydWN0b3IgIT09IE9iamVjdC5wcm90b3R5cGUuY29uc3RydWN0b3IpIHtcbiAgICBzdWJDbGFzcyA9IHN1YkNsYXNzTWV0aG9kcy5jb25zdHJ1Y3RvcjtcbiAgICBtZXRob2RzID0gc3ViQ2xhc3NNZXRob2RzO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBzdWJDbGFzc01ldGhvZHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBzdWJDbGFzcyA9IHN1YkNsYXNzTWV0aG9kcztcbiAgfVxuXG4gIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG5cbiAgLy8gRXh0ZW5kIHN1Yk9iaidzIHByb3RvdHlwZSB3aXRoIGZ1bmN0aW9ucyBhbmQgb3RoZXIgcHJvcGVydGllcyBmcm9tIHByb3BzXG4gIGZvciAodmFyIG5hbWUgaW4gbWV0aG9kcykge1xuICAgIGlmIChtZXRob2RzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICBzdWJDbGFzcy5wcm90b3R5cGVbbmFtZV0gPSBtZXRob2RzW25hbWVdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdWJDbGFzcztcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGV4dGVuZHNGbjtcbiIsImltcG9ydCBkb2N1bWVudCBmcm9tICdnbG9iYWwvZG9jdW1lbnQnO1xuXG4vKipcbiAqIFN0b3JlIHRoZSBicm93c2VyLXNwZWNpZmljIG1ldGhvZHMgZm9yIHRoZSBmdWxsc2NyZWVuIEFQSVxuICogQHR5cGUge09iamVjdHx1bmRlZmluZWR9XG4gKiBAcHJpdmF0ZVxuICovXG5sZXQgRnVsbHNjcmVlbkFwaSA9IHt9O1xuXG4vLyBicm93c2VyIEFQSSBtZXRob2RzXG4vLyBtYXAgYXBwcm9hY2ggZnJvbSBTY3JlZW5mdWwuanMgLSBodHRwczovL2dpdGh1Yi5jb20vc2luZHJlc29yaHVzL3NjcmVlbmZ1bGwuanNcbmNvbnN0IGFwaU1hcCA9IFtcbiAgLy8gU3BlYzogaHR0cHM6Ly9kdmNzLnczLm9yZy9oZy9mdWxsc2NyZWVuL3Jhdy1maWxlL3RpcC9PdmVydmlldy5odG1sXG4gIFtcbiAgICAncmVxdWVzdEZ1bGxzY3JlZW4nLFxuICAgICdleGl0RnVsbHNjcmVlbicsXG4gICAgJ2Z1bGxzY3JlZW5FbGVtZW50JyxcbiAgICAnZnVsbHNjcmVlbkVuYWJsZWQnLFxuICAgICdmdWxsc2NyZWVuY2hhbmdlJyxcbiAgICAnZnVsbHNjcmVlbmVycm9yJ1xuICBdLFxuICAvLyBXZWJLaXRcbiAgW1xuICAgICd3ZWJraXRSZXF1ZXN0RnVsbHNjcmVlbicsXG4gICAgJ3dlYmtpdEV4aXRGdWxsc2NyZWVuJyxcbiAgICAnd2Via2l0RnVsbHNjcmVlbkVsZW1lbnQnLFxuICAgICd3ZWJraXRGdWxsc2NyZWVuRW5hYmxlZCcsXG4gICAgJ3dlYmtpdGZ1bGxzY3JlZW5jaGFuZ2UnLFxuICAgICd3ZWJraXRmdWxsc2NyZWVuZXJyb3InXG4gIF0sXG4gIC8vIE9sZCBXZWJLaXQgKFNhZmFyaSA1LjEpXG4gIFtcbiAgICAnd2Via2l0UmVxdWVzdEZ1bGxTY3JlZW4nLFxuICAgICd3ZWJraXRDYW5jZWxGdWxsU2NyZWVuJyxcbiAgICAnd2Via2l0Q3VycmVudEZ1bGxTY3JlZW5FbGVtZW50JyxcbiAgICAnd2Via2l0Q2FuY2VsRnVsbFNjcmVlbicsXG4gICAgJ3dlYmtpdGZ1bGxzY3JlZW5jaGFuZ2UnLFxuICAgICd3ZWJraXRmdWxsc2NyZWVuZXJyb3InXG4gIF0sXG4gIC8vIE1vemlsbGFcbiAgW1xuICAgICdtb3pSZXF1ZXN0RnVsbFNjcmVlbicsXG4gICAgJ21vekNhbmNlbEZ1bGxTY3JlZW4nLFxuICAgICdtb3pGdWxsU2NyZWVuRWxlbWVudCcsXG4gICAgJ21vekZ1bGxTY3JlZW5FbmFibGVkJyxcbiAgICAnbW96ZnVsbHNjcmVlbmNoYW5nZScsXG4gICAgJ21vemZ1bGxzY3JlZW5lcnJvcidcbiAgXSxcbiAgLy8gTWljcm9zb2Z0XG4gIFtcbiAgICAnbXNSZXF1ZXN0RnVsbHNjcmVlbicsXG4gICAgJ21zRXhpdEZ1bGxzY3JlZW4nLFxuICAgICdtc0Z1bGxzY3JlZW5FbGVtZW50JyxcbiAgICAnbXNGdWxsc2NyZWVuRW5hYmxlZCcsXG4gICAgJ01TRnVsbHNjcmVlbkNoYW5nZScsXG4gICAgJ01TRnVsbHNjcmVlbkVycm9yJ1xuICBdXG5dO1xuXG5sZXQgc3BlY0FwaSA9IGFwaU1hcFswXTtcbmxldCBicm93c2VyQXBpO1xuXG4vLyBkZXRlcm1pbmUgdGhlIHN1cHBvcnRlZCBzZXQgb2YgZnVuY3Rpb25zXG5mb3IgKGxldCBpID0gMDsgaSA8IGFwaU1hcC5sZW5ndGg7IGkrKykge1xuICAvLyBjaGVjayBmb3IgZXhpdEZ1bGxzY3JlZW4gZnVuY3Rpb25cbiAgaWYgKGFwaU1hcFtpXVsxXSBpbiBkb2N1bWVudCkge1xuICAgIGJyb3dzZXJBcGkgPSBhcGlNYXBbaV07XG4gICAgYnJlYWs7XG4gIH1cbn1cblxuLy8gbWFwIHRoZSBicm93c2VyIEFQSSBuYW1lcyB0byB0aGUgc3BlYyBBUEkgbmFtZXNcbmlmIChicm93c2VyQXBpKSB7XG4gIGZvciAobGV0IGk9MDsgaTxicm93c2VyQXBpLmxlbmd0aDsgaSsrKSB7XG4gICAgRnVsbHNjcmVlbkFwaVtzcGVjQXBpW2ldXSA9IGJyb3dzZXJBcGlbaV07XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRnVsbHNjcmVlbkFwaTtcbiIsImltcG9ydCB3aW5kb3cgZnJvbSAnZ2xvYmFsL3dpbmRvdyc7XG5pbXBvcnQgZG9jdW1lbnQgZnJvbSAnZ2xvYmFsL2RvY3VtZW50JztcbmxldCBuYXZpZ2F0b3IgPSB3aW5kb3cubmF2aWdhdG9yO1xuXG5sZXQgaGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBlbGVtZW50IGFuZCBhcHBsaWVzIHByb3BlcnRpZXMuXG4gKiBAcGFyYW0gIHtTdHJpbmc9fSB0YWdOYW1lICAgIE5hbWUgb2YgdGFnIHRvIGJlIGNyZWF0ZWQuXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSBwcm9wZXJ0aWVzIEVsZW1lbnQgcHJvcGVydGllcyB0byBiZSBhcHBsaWVkLlxuICogQHJldHVybiB7RWxlbWVudH1cbiAqIEBwcml2YXRlXG4gKi9cbnZhciBjcmVhdGVFbCA9IGZ1bmN0aW9uKHRhZ05hbWU9J2RpdicsIHByb3BlcnRpZXM9e30pe1xuICBsZXQgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZ05hbWUpO1xuXG4gIG9iai5lYWNoKHByb3BlcnRpZXMsIGZ1bmN0aW9uKHByb3BOYW1lLCB2YWwpe1xuICAgIC8vIE5vdCByZW1lbWJlcmluZyB3aHkgd2Ugd2VyZSBjaGVja2luZyBmb3IgZGFzaFxuICAgIC8vIGJ1dCB1c2luZyBzZXRBdHRyaWJ1dGUgbWVhbnMgeW91IGhhdmUgdG8gdXNlIGdldEF0dHJpYnV0ZVxuXG4gICAgLy8gVGhlIGNoZWNrIGZvciBkYXNoIGNoZWNrcyBmb3IgdGhlIGFyaWEtKiBhdHRyaWJ1dGVzLCBsaWtlIGFyaWEtbGFiZWwsIGFyaWEtdmFsdWVtaW4uXG4gICAgLy8gVGhlIGFkZGl0aW9uYWwgY2hlY2sgZm9yIFwicm9sZVwiIGlzIGJlY2F1c2UgdGhlIGRlZmF1bHQgbWV0aG9kIGZvciBhZGRpbmcgYXR0cmlidXRlcyBkb2VzIG5vdFxuICAgIC8vIGFkZCB0aGUgYXR0cmlidXRlIFwicm9sZVwiLiBNeSBndWVzcyBpcyBiZWNhdXNlIGl0J3Mgbm90IGEgdmFsaWQgYXR0cmlidXRlIGluIHNvbWUgbmFtZXNwYWNlcywgYWx0aG91Z2hcbiAgICAvLyBicm93c2VycyBoYW5kbGUgdGhlIGF0dHJpYnV0ZSBqdXN0IGZpbmUuIFRoZSBXM0MgYWxsb3dzIGZvciBhcmlhLSogYXR0cmlidXRlcyB0byBiZSB1c2VkIGluIHByZS1IVE1MNSBkb2NzLlxuICAgIC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLXByaW1lci8jYXJpYWh0bWwuIFVzaW5nIHNldEF0dHJpYnV0ZSBnZXRzIGFyb3VuZCB0aGlzIHByb2JsZW0uXG4gICAgaWYgKHByb3BOYW1lLmluZGV4T2YoJ2FyaWEtJykgIT09IC0xIHx8IHByb3BOYW1lID09PSAncm9sZScpIHtcbiAgICAgZWwuc2V0QXR0cmlidXRlKHByb3BOYW1lLCB2YWwpO1xuICAgIH0gZWxzZSB7XG4gICAgIGVsW3Byb3BOYW1lXSA9IHZhbDtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBlbDtcbn07XG5cbi8qKlxuICogVXBwZXJjYXNlIHRoZSBmaXJzdCBsZXR0ZXIgb2YgYSBzdHJpbmdcbiAqIEBwYXJhbSAge1N0cmluZ30gc3RyaW5nIFN0cmluZyB0byBiZSB1cHBlcmNhc2VkXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAcHJpdmF0ZVxuICovXG52YXIgY2FwaXRhbGl6ZSA9IGZ1bmN0aW9uKHN0cmluZyl7XG4gIHJldHVybiBzdHJpbmcuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHJpbmcuc2xpY2UoMSk7XG59O1xuXG4vKipcbiAqIE9iamVjdCBmdW5jdGlvbnMgY29udGFpbmVyXG4gKiBAdHlwZSB7T2JqZWN0fVxuICogQHByaXZhdGVcbiAqL1xudmFyIG9iaiA9IHt9O1xuXG4vKipcbiAqIE9iamVjdC5jcmVhdGUgc2hpbSBmb3IgcHJvdG90eXBhbCBpbmhlcml0YW5jZVxuICpcbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2NyZWF0ZVxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtICB7T2JqZWN0fSAgIG9iaiBPYmplY3QgdG8gdXNlIGFzIHByb3RvdHlwZVxuICogQHByaXZhdGVcbiAqL1xub2JqLmNyZWF0ZSA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24ob2JqKXtcbiAgLy9DcmVhdGUgYSBuZXcgZnVuY3Rpb24gY2FsbGVkICdGJyB3aGljaCBpcyBqdXN0IGFuIGVtcHR5IG9iamVjdC5cbiAgZnVuY3Rpb24gRigpIHt9XG5cbiAgLy90aGUgcHJvdG90eXBlIG9mIHRoZSAnRicgZnVuY3Rpb24gc2hvdWxkIHBvaW50IHRvIHRoZVxuICAvL3BhcmFtZXRlciBvZiB0aGUgYW5vbnltb3VzIGZ1bmN0aW9uLlxuICBGLnByb3RvdHlwZSA9IG9iajtcblxuICAvL2NyZWF0ZSBhIG5ldyBjb25zdHJ1Y3RvciBmdW5jdGlvbiBiYXNlZCBvZmYgb2YgdGhlICdGJyBmdW5jdGlvbi5cbiAgcmV0dXJuIG5ldyBGKCk7XG59O1xuXG4vKipcbiAqIExvb3AgdGhyb3VnaCBlYWNoIHByb3BlcnR5IGluIGFuIG9iamVjdCBhbmQgY2FsbCBhIGZ1bmN0aW9uXG4gKiB3aG9zZSBhcmd1bWVudHMgYXJlIChrZXksdmFsdWUpXG4gKiBAcGFyYW0gIHtPYmplY3R9ICAgb2JqIE9iamVjdCBvZiBwcm9wZXJ0aWVzXG4gKiBAcGFyYW0gIHtGdW5jdGlvbn0gZm4gIEZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBvbiBlYWNoIHByb3BlcnR5LlxuICogQHRoaXMgeyp9XG4gKiBAcHJpdmF0ZVxuICovXG5vYmouZWFjaCA9IGZ1bmN0aW9uKG9iaiwgZm4sIGNvbnRleHQpe1xuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgaWYgKGhhc093blByb3AuY2FsbChvYmosIGtleSkpIHtcbiAgICAgIGZuLmNhbGwoY29udGV4dCB8fCB0aGlzLCBrZXksIG9ialtrZXldKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogTWVyZ2UgdHdvIG9iamVjdHMgdG9nZXRoZXIgYW5kIHJldHVybiB0aGUgb3JpZ2luYWwuXG4gKiBAcGFyYW0gIHtPYmplY3R9IG9iajFcbiAqIEBwYXJhbSAge09iamVjdH0gb2JqMlxuICogQHJldHVybiB7T2JqZWN0fVxuICogQHByaXZhdGVcbiAqL1xub2JqLm1lcmdlID0gZnVuY3Rpb24ob2JqMSwgb2JqMil7XG4gIGlmICghb2JqMikgeyByZXR1cm4gb2JqMTsgfVxuICBmb3IgKHZhciBrZXkgaW4gb2JqMil7XG4gICAgaWYgKGhhc093blByb3AuY2FsbChvYmoyLCBrZXkpKSB7XG4gICAgICBvYmoxW2tleV0gPSBvYmoyW2tleV07XG4gICAgfVxuICB9XG4gIHJldHVybiBvYmoxO1xufTtcblxuLyoqXG4gKiBNZXJnZSB0d28gb2JqZWN0cywgYW5kIG1lcmdlIGFueSBwcm9wZXJ0aWVzIHRoYXQgYXJlIG9iamVjdHNcbiAqIGluc3RlYWQgb2YganVzdCBvdmVyd3JpdGluZyBvbmUuIFVzZXMgdG8gbWVyZ2Ugb3B0aW9ucyBoYXNoZXNcbiAqIHdoZXJlIGRlZXBlciBkZWZhdWx0IHNldHRpbmdzIGFyZSBpbXBvcnRhbnQuXG4gKiBAcGFyYW0gIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG92ZXJyaWRlXG4gKiBAcGFyYW0gIHtPYmplY3R9IG9iajIgT3ZlcnJpZGluZyBvYmplY3RcbiAqIEByZXR1cm4ge09iamVjdH0gICAgICBOZXcgb2JqZWN0LiBPYmoxIGFuZCBPYmoyIHdpbGwgYmUgdW50b3VjaGVkLlxuICogQHByaXZhdGVcbiAqL1xub2JqLmRlZXBNZXJnZSA9IGZ1bmN0aW9uKG9iajEsIG9iajIpe1xuICB2YXIga2V5LCB2YWwxLCB2YWwyO1xuXG4gIC8vIG1ha2UgYSBjb3B5IG9mIG9iajEgc28gd2UncmUgbm90IG92ZXJ3cml0aW5nIG9yaWdpbmFsIHZhbHVlcy5cbiAgLy8gbGlrZSBwcm90b3R5cGUub3B0aW9uc18gYW5kIGFsbCBzdWIgb3B0aW9ucyBvYmplY3RzXG4gIG9iajEgPSBvYmouY29weShvYmoxKTtcblxuICBmb3IgKGtleSBpbiBvYmoyKXtcbiAgICBpZiAoaGFzT3duUHJvcC5jYWxsKG9iajIsIGtleSkpIHtcbiAgICAgIHZhbDEgPSBvYmoxW2tleV07XG4gICAgICB2YWwyID0gb2JqMltrZXldO1xuXG4gICAgICAvLyBDaGVjayBpZiBib3RoIHByb3BlcnRpZXMgYXJlIHB1cmUgb2JqZWN0cyBhbmQgZG8gYSBkZWVwIG1lcmdlIGlmIHNvXG4gICAgICBpZiAob2JqLmlzUGxhaW4odmFsMSkgJiYgb2JqLmlzUGxhaW4odmFsMikpIHtcbiAgICAgICAgb2JqMVtrZXldID0gb2JqLmRlZXBNZXJnZSh2YWwxLCB2YWwyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9iajFba2V5XSA9IG9iajJba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG9iajE7XG59O1xuXG4vKipcbiAqIE1ha2UgYSBjb3B5IG9mIHRoZSBzdXBwbGllZCBvYmplY3RcbiAqIEBwYXJhbSAge09iamVjdH0gb2JqIE9iamVjdCB0byBjb3B5XG4gKiBAcmV0dXJuIHtPYmplY3R9ICAgICBDb3B5IG9mIG9iamVjdFxuICogQHByaXZhdGVcbiAqL1xub2JqLmNvcHkgPSBmdW5jdGlvbihvYmpUb0NvcHkpe1xuICByZXR1cm4gb2JqLm1lcmdlKHt9LCBvYmpUb0NvcHkpO1xufTtcblxuLyoqXG4gKiBDaGVjayBpZiBhbiBvYmplY3QgaXMgcGxhaW4sIGFuZCBub3QgYSBkb20gbm9kZSBvciBhbnkgb2JqZWN0IHN1Yi1pbnN0YW5jZVxuICogQHBhcmFtICB7T2JqZWN0fSBvYmogT2JqZWN0IHRvIGNoZWNrXG4gKiBAcmV0dXJuIHtCb29sZWFufSAgICAgVHJ1ZSBpZiBwbGFpbiwgZmFsc2Ugb3RoZXJ3aXNlXG4gKiBAcHJpdmF0ZVxuICovXG5vYmouaXNQbGFpbiA9IGZ1bmN0aW9uKG9iail7XG4gIHJldHVybiAhIW9ialxuICAgICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnXG4gICAgJiYgb2JqLnRvU3RyaW5nKCkgPT09ICdbb2JqZWN0IE9iamVjdF0nXG4gICAgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBPYmplY3Q7XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIGFuIG9iamVjdCBpcyBBcnJheVxuKiAgU2luY2UgaW5zdGFuY2VvZiBBcnJheSB3aWxsIG5vdCB3b3JrIG9uIGFycmF5cyBjcmVhdGVkIGluIGFub3RoZXIgZnJhbWUgd2UgbmVlZCB0byB1c2UgQXJyYXkuaXNBcnJheSwgYnV0IHNpbmNlIElFOCBkb2VzIG5vdCBzdXBwb3J0IEFycmF5LmlzQXJyYXkgd2UgbmVlZCB0aGlzIHNoaW1cbiAqIEBwYXJhbSAge09iamVjdH0gb2JqIE9iamVjdCB0byBjaGVja1xuICogQHJldHVybiB7Qm9vbGVhbn0gICAgIFRydWUgaWYgcGxhaW4sIGZhbHNlIG90aGVyd2lzZVxuICogQHByaXZhdGVcbiAqL1xub2JqLmlzQXJyYXkgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uKGFycikge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFycikgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuXG4vKipcbiAqIEJpbmQgKGEuay5hIHByb3h5IG9yIENvbnRleHQpLiBBIHNpbXBsZSBtZXRob2QgZm9yIGNoYW5naW5nIHRoZSBjb250ZXh0IG9mIGEgZnVuY3Rpb25cbiAgIEl0IGFsc28gc3RvcmVzIGEgdW5pcXVlIGlkIG9uIHRoZSBmdW5jdGlvbiBzbyBpdCBjYW4gYmUgZWFzaWx5IHJlbW92ZWQgZnJvbSBldmVudHNcbiAqIEBwYXJhbSAgeyp9ICAgY29udGV4dCBUaGUgb2JqZWN0IHRvIGJpbmQgYXMgc2NvcGVcbiAqIEBwYXJhbSAge0Z1bmN0aW9ufSBmbiAgICAgIFRoZSBmdW5jdGlvbiB0byBiZSBib3VuZCB0byBhIHNjb3BlXG4gKiBAcGFyYW0gIHtOdW1iZXI9fSAgIHVpZCAgICAgQW4gb3B0aW9uYWwgdW5pcXVlIElEIGZvciB0aGUgZnVuY3Rpb24gdG8gYmUgc2V0XG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqIEBwcml2YXRlXG4gKi9cbnZhciBiaW5kID0gZnVuY3Rpb24oY29udGV4dCwgZm4sIHVpZCkge1xuICAvLyBNYWtlIHN1cmUgdGhlIGZ1bmN0aW9uIGhhcyBhIHVuaXF1ZSBJRFxuICBpZiAoIWZuLmd1aWQpIHsgZm4uZ3VpZCA9IGd1aWQrKzsgfVxuXG4gIC8vIENyZWF0ZSB0aGUgbmV3IGZ1bmN0aW9uIHRoYXQgY2hhbmdlcyB0aGUgY29udGV4dFxuICBsZXQgcmV0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KGNvbnRleHQsIGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgLy8gQWxsb3cgZm9yIHRoZSBhYmlsaXR5IHRvIGluZGl2aWR1YWxpemUgdGhpcyBmdW5jdGlvblxuICAvLyBOZWVkZWQgaW4gdGhlIGNhc2Ugd2hlcmUgbXVsdGlwbGUgb2JqZWN0cyBtaWdodCBzaGFyZSB0aGUgc2FtZSBwcm90b3R5cGVcbiAgLy8gSUYgYm90aCBpdGVtcyBhZGQgYW4gZXZlbnQgbGlzdGVuZXIgd2l0aCB0aGUgc2FtZSBmdW5jdGlvbiwgdGhlbiB5b3UgdHJ5IHRvIHJlbW92ZSBqdXN0IG9uZVxuICAvLyBpdCB3aWxsIHJlbW92ZSBib3RoIGJlY2F1c2UgdGhleSBib3RoIGhhdmUgdGhlIHNhbWUgZ3VpZC5cbiAgLy8gd2hlbiB1c2luZyB0aGlzLCB5b3UgbmVlZCB0byB1c2UgdGhlIGJpbmQgbWV0aG9kIHdoZW4geW91IHJlbW92ZSB0aGUgbGlzdGVuZXIgYXMgd2VsbC5cbiAgLy8gY3VycmVudGx5IHVzZWQgaW4gdGV4dCB0cmFja3NcbiAgcmV0Lmd1aWQgPSAodWlkKSA/IHVpZCArICdfJyArIGZuLmd1aWQgOiBmbi5ndWlkO1xuXG4gIHJldHVybiByZXQ7XG59O1xuXG4vKipcbiAqIEVsZW1lbnQgRGF0YSBTdG9yZS4gQWxsb3dzIGZvciBiaW5kaW5nIGRhdGEgdG8gYW4gZWxlbWVudCB3aXRob3V0IHB1dHRpbmcgaXQgZGlyZWN0bHkgb24gdGhlIGVsZW1lbnQuXG4gKiBFeC4gRXZlbnQgbGlzdGVuZXJzIGFyZSBzdG9yZWQgaGVyZS5cbiAqIChhbHNvIGZyb20ganNuaW5qYS5jb20sIHNsaWdodGx5IG1vZGlmaWVkIGFuZCB1cGRhdGVkIGZvciBjbG9zdXJlIGNvbXBpbGVyKVxuICogQHR5cGUge09iamVjdH1cbiAqIEBwcml2YXRlXG4gKi9cbnZhciBjYWNoZSA9IHt9O1xuXG4vKipcbiAqIFVuaXF1ZSBJRCBmb3IgYW4gZWxlbWVudCBvciBmdW5jdGlvblxuICogQHR5cGUge051bWJlcn1cbiAqIEBwcml2YXRlXG4gKi9cbnZhciBndWlkID0gMTtcblxuLyoqXG4gKiBVbmlxdWUgYXR0cmlidXRlIG5hbWUgdG8gc3RvcmUgYW4gZWxlbWVudCdzIGd1aWQgaW5cbiAqIEB0eXBlIHtTdHJpbmd9XG4gKiBAY29uc3RhbnRcbiAqIEBwcml2YXRlXG4gKi9cbnZhciBleHBhbmRvID0gJ3ZkYXRhJyArIChuZXcgRGF0ZSgpKS5nZXRUaW1lKCk7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgY2FjaGUgb2JqZWN0IHdoZXJlIGRhdGEgZm9yIGFuIGVsZW1lbnQgaXMgc3RvcmVkXG4gKiBAcGFyYW0gIHtFbGVtZW50fSBlbCBFbGVtZW50IHRvIHN0b3JlIGRhdGEgZm9yLlxuICogQHJldHVybiB7T2JqZWN0fVxuICogQHByaXZhdGVcbiAqL1xudmFyIGdldERhdGEgPSBmdW5jdGlvbihlbCl7XG4gIHZhciBpZCA9IGVsW2V4cGFuZG9dO1xuICBpZiAoIWlkKSB7XG4gICAgaWQgPSBlbFtleHBhbmRvXSA9IGd1aWQrKztcbiAgfVxuICBpZiAoIWNhY2hlW2lkXSkge1xuICAgIGNhY2hlW2lkXSA9IHt9O1xuICB9XG4gIHJldHVybiBjYWNoZVtpZF07XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGNhY2hlIG9iamVjdCB3aGVyZSBkYXRhIGZvciBhbiBlbGVtZW50IGlzIHN0b3JlZFxuICogQHBhcmFtICB7RWxlbWVudH0gZWwgRWxlbWVudCB0byBzdG9yZSBkYXRhIGZvci5cbiAqIEByZXR1cm4ge09iamVjdH1cbiAqIEBwcml2YXRlXG4gKi9cbnZhciBoYXNEYXRhID0gZnVuY3Rpb24oZWwpe1xuICB2YXIgaWQgPSBlbFtleHBhbmRvXTtcbiAgcmV0dXJuICEoIWlkIHx8IGlzRW1wdHkoY2FjaGVbaWRdKSk7XG59O1xuXG4vKipcbiAqIERlbGV0ZSBkYXRhIGZvciB0aGUgZWxlbWVudCBmcm9tIHRoZSBjYWNoZSBhbmQgdGhlIGd1aWQgYXR0ciBmcm9tIGdldEVsZW1lbnRCeUlkXG4gKiBAcGFyYW0gIHtFbGVtZW50fSBlbCBSZW1vdmUgZGF0YSBmb3IgYW4gZWxlbWVudFxuICogQHByaXZhdGVcbiAqL1xudmFyIHJlbW92ZURhdGEgPSBmdW5jdGlvbihlbCl7XG4gIHZhciBpZCA9IGVsW2V4cGFuZG9dO1xuICBpZiAoIWlkKSB7IHJldHVybjsgfVxuICAvLyBSZW1vdmUgYWxsIHN0b3JlZCBkYXRhXG4gIC8vIENoYW5nZWQgdG8gPSBudWxsXG4gIC8vIGh0dHA6Ly9jb2Rpbmcuc21hc2hpbmdtYWdhemluZS5jb20vMjAxMi8xMS8wNS93cml0aW5nLWZhc3QtbWVtb3J5LWVmZmljaWVudC1qYXZhc2NyaXB0L1xuICAvLyBjYWNoZVtpZF0gPSBudWxsO1xuICBkZWxldGUgY2FjaGVbaWRdO1xuXG4gIC8vIFJlbW92ZSB0aGUgZXhwYW5kbyBwcm9wZXJ0eSBmcm9tIHRoZSBET00gbm9kZVxuICB0cnkge1xuICAgIGRlbGV0ZSBlbFtleHBhbmRvXTtcbiAgfSBjYXRjaChlKSB7XG4gICAgaWYgKGVsLnJlbW92ZUF0dHJpYnV0ZSkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKGV4cGFuZG8pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJRSBkb2Vzbid0IGFwcGVhciB0byBzdXBwb3J0IHJlbW92ZUF0dHJpYnV0ZSBvbiB0aGUgZG9jdW1lbnQgZWxlbWVudFxuICAgICAgZWxbZXhwYW5kb10gPSBudWxsO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBDaGVjayBpZiBhbiBvYmplY3QgaXMgZW1wdHlcbiAqIEBwYXJhbSAge09iamVjdH0gIG9iaiBUaGUgb2JqZWN0IHRvIGNoZWNrIGZvciBlbXB0aW5lc3NcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKiBAcHJpdmF0ZVxuICovXG52YXIgaXNFbXB0eSA9IGZ1bmN0aW9uKG9iaikge1xuICBmb3IgKHZhciBwcm9wIGluIG9iaikge1xuICAgIC8vIElubHVkZSBudWxsIHByb3BlcnRpZXMgYXMgZW1wdHkuXG4gICAgaWYgKG9ialtwcm9wXSAhPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbi8qKlxuICogQ2hlY2sgaWYgYW4gZWxlbWVudCBoYXMgYSBDU1MgY2xhc3NcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBFbGVtZW50IHRvIGNoZWNrXG4gKiBAcGFyYW0ge1N0cmluZ30gY2xhc3NUb0NoZWNrIENsYXNzbmFtZSB0byBjaGVja1xuICogQHByaXZhdGVcbiAqL1xudmFyIGhhc0NsYXNzID0gZnVuY3Rpb24oZWxlbWVudCwgY2xhc3NUb0NoZWNrKXtcbiAgcmV0dXJuICgoJyAnICsgZWxlbWVudC5jbGFzc05hbWUgKyAnICcpLmluZGV4T2YoJyAnICsgY2xhc3NUb0NoZWNrICsgJyAnKSAhPT0gLTEpO1xufTtcblxuLyoqXG4gKiBBZGQgYSBDU1MgY2xhc3MgbmFtZSB0byBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgICAgRWxlbWVudCB0byBhZGQgY2xhc3MgbmFtZSB0b1xuICogQHBhcmFtIHtTdHJpbmd9IGNsYXNzVG9BZGQgQ2xhc3NuYW1lIHRvIGFkZFxuICogQHByaXZhdGVcbiAqL1xudmFyIGFkZENsYXNzID0gZnVuY3Rpb24oZWxlbWVudCwgY2xhc3NUb0FkZCl7XG4gIGlmICghaGFzQ2xhc3MoZWxlbWVudCwgY2xhc3NUb0FkZCkpIHtcbiAgICBlbGVtZW50LmNsYXNzTmFtZSA9IGVsZW1lbnQuY2xhc3NOYW1lID09PSAnJyA/IGNsYXNzVG9BZGQgOiBlbGVtZW50LmNsYXNzTmFtZSArICcgJyArIGNsYXNzVG9BZGQ7XG4gIH1cbn07XG5cbi8qKlxuICogUmVtb3ZlIGEgQ1NTIGNsYXNzIG5hbWUgZnJvbSBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgICAgRWxlbWVudCB0byByZW1vdmUgZnJvbSBjbGFzcyBuYW1lXG4gKiBAcGFyYW0ge1N0cmluZ30gY2xhc3NUb0FkZCBDbGFzc25hbWUgdG8gcmVtb3ZlXG4gKiBAcHJpdmF0ZVxuICovXG52YXIgcmVtb3ZlQ2xhc3MgPSBmdW5jdGlvbihlbGVtZW50LCBjbGFzc1RvUmVtb3ZlKXtcbiAgaWYgKCFoYXNDbGFzcyhlbGVtZW50LCBjbGFzc1RvUmVtb3ZlKSkge3JldHVybjt9XG5cbiAgbGV0IGNsYXNzTmFtZXMgPSBlbGVtZW50LmNsYXNzTmFtZS5zcGxpdCgnICcpO1xuXG4gIC8vIG5vIGFyci5pbmRleE9mIGluIGllOCwgYW5kIHdlIGRvbid0IHdhbnQgdG8gYWRkIGEgYmlnIHNoaW1cbiAgZm9yIChsZXQgaSA9IGNsYXNzTmFtZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBpZiAoY2xhc3NOYW1lc1tpXSA9PT0gY2xhc3NUb1JlbW92ZSkge1xuICAgICAgY2xhc3NOYW1lcy5zcGxpY2UoaSwxKTtcbiAgICB9XG4gIH1cblxuICBlbGVtZW50LmNsYXNzTmFtZSA9IGNsYXNzTmFtZXMuam9pbignICcpO1xufTtcblxuLyoqXG4gKiBFbGVtZW50IGZvciB0ZXN0aW5nIGJyb3dzZXIgSFRNTDUgdmlkZW8gY2FwYWJpbGl0aWVzXG4gKiBAdHlwZSB7RWxlbWVudH1cbiAqIEBjb25zdGFudFxuICogQHByaXZhdGVcbiAqL1xudmFyIFRFU1RfVklEID0gY3JlYXRlRWwoJ3ZpZGVvJyk7XG5sZXQgdHJhY2sgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0cmFjaycpO1xudHJhY2sua2luZCA9ICdjYXB0aW9ucyc7XG50cmFjay5zcmNsYW5nID0gJ2VuJztcbnRyYWNrLmxhYmVsID0gJ0VuZ2xpc2gnO1xuVEVTVF9WSUQuYXBwZW5kQ2hpbGQodHJhY2spO1xuXG4vKipcbiAqIFVzZXJhZ2VudCBmb3IgYnJvd3NlciB0ZXN0aW5nLlxuICogQHR5cGUge1N0cmluZ31cbiAqIEBjb25zdGFudFxuICogQHByaXZhdGVcbiAqL1xudmFyIFVTRVJfQUdFTlQgPSBuYXZpZ2F0b3IudXNlckFnZW50O1xuXG4vKipcbiAqIERldmljZSBpcyBhbiBpUGhvbmVcbiAqIEB0eXBlIHtCb29sZWFufVxuICogQGNvbnN0YW50XG4gKiBAcHJpdmF0ZVxuICovXG52YXIgSVNfSVBIT05FID0gKC9pUGhvbmUvaSkudGVzdChVU0VSX0FHRU5UKTtcbnZhciBJU19JUEFEID0gKC9pUGFkL2kpLnRlc3QoVVNFUl9BR0VOVCk7XG52YXIgSVNfSVBPRCA9ICgvaVBvZC9pKS50ZXN0KFVTRVJfQUdFTlQpO1xudmFyIElTX0lPUyA9IElTX0lQSE9ORSB8fCBJU19JUEFEIHx8IElTX0lQT0Q7XG5cbnZhciBJT1NfVkVSU0lPTiA9IChmdW5jdGlvbigpe1xuICB2YXIgbWF0Y2ggPSBVU0VSX0FHRU5ULm1hdGNoKC9PUyAoXFxkKylfL2kpO1xuICBpZiAobWF0Y2ggJiYgbWF0Y2hbMV0pIHsgcmV0dXJuIG1hdGNoWzFdOyB9XG59KSgpO1xuXG52YXIgSVNfQU5EUk9JRCA9ICgvQW5kcm9pZC9pKS50ZXN0KFVTRVJfQUdFTlQpO1xudmFyIEFORFJPSURfVkVSU0lPTiA9IChmdW5jdGlvbigpIHtcbiAgLy8gVGhpcyBtYXRjaGVzIEFuZHJvaWQgTWFqb3IuTWlub3IuUGF0Y2ggdmVyc2lvbnNcbiAgLy8gQU5EUk9JRF9WRVJTSU9OIGlzIE1ham9yLk1pbm9yIGFzIGEgTnVtYmVyLCBpZiBNaW5vciBpc24ndCBhdmFpbGFibGUsIHRoZW4gb25seSBNYWpvciBpcyByZXR1cm5lZFxuICB2YXIgbWF0Y2ggPSBVU0VSX0FHRU5ULm1hdGNoKC9BbmRyb2lkIChcXGQrKSg/OlxcLihcXGQrKSk/KD86XFwuKFxcZCspKSovaSksXG4gICAgbWFqb3IsXG4gICAgbWlub3I7XG5cbiAgaWYgKCFtYXRjaCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgbWFqb3IgPSBtYXRjaFsxXSAmJiBwYXJzZUZsb2F0KG1hdGNoWzFdKTtcbiAgbWlub3IgPSBtYXRjaFsyXSAmJiBwYXJzZUZsb2F0KG1hdGNoWzJdKTtcblxuICBpZiAobWFqb3IgJiYgbWlub3IpIHtcbiAgICByZXR1cm4gcGFyc2VGbG9hdChtYXRjaFsxXSArICcuJyArIG1hdGNoWzJdKTtcbiAgfSBlbHNlIGlmIChtYWpvcikge1xuICAgIHJldHVybiBtYWpvcjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufSkoKTtcbi8vIE9sZCBBbmRyb2lkIGlzIGRlZmluZWQgYXMgVmVyc2lvbiBvbGRlciB0aGFuIDIuMywgYW5kIHJlcXVpcmluZyBhIHdlYmtpdCB2ZXJzaW9uIG9mIHRoZSBhbmRyb2lkIGJyb3dzZXJcbnZhciBJU19PTERfQU5EUk9JRCA9IElTX0FORFJPSUQgJiYgKC93ZWJraXQvaSkudGVzdChVU0VSX0FHRU5UKSAmJiBBTkRST0lEX1ZFUlNJT04gPCAyLjM7XG5cbnZhciBJU19GSVJFRk9YID0gKC9GaXJlZm94L2kpLnRlc3QoVVNFUl9BR0VOVCk7XG52YXIgSVNfQ0hST01FID0gKC9DaHJvbWUvaSkudGVzdChVU0VSX0FHRU5UKTtcbnZhciBJU19JRTggPSAoL01TSUVcXHM4XFwuMC8pLnRlc3QoVVNFUl9BR0VOVCk7XG5cbnZhciBUT1VDSF9FTkFCTEVEID0gISEoKCdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdykgfHwgd2luZG93LkRvY3VtZW50VG91Y2ggJiYgZG9jdW1lbnQgaW5zdGFuY2VvZiB3aW5kb3cuRG9jdW1lbnRUb3VjaCk7XG52YXIgQkFDS0dST1VORF9TSVpFX1NVUFBPUlRFRCA9ICdiYWNrZ3JvdW5kU2l6ZScgaW4gVEVTVF9WSUQuc3R5bGU7XG5cbi8qKlxuICogQXBwbHkgYXR0cmlidXRlcyB0byBhbiBIVE1MIGVsZW1lbnQuXG4gKiBAcGFyYW0gIHtFbGVtZW50fSBlbCAgICAgICAgIFRhcmdldCBlbGVtZW50LlxuICogQHBhcmFtICB7T2JqZWN0PX0gYXR0cmlidXRlcyBFbGVtZW50IGF0dHJpYnV0ZXMgdG8gYmUgYXBwbGllZC5cbiAqIEBwcml2YXRlXG4gKi9cbnZhciBzZXRFbGVtZW50QXR0cmlidXRlcyA9IGZ1bmN0aW9uKGVsLCBhdHRyaWJ1dGVzKXtcbiAgb2JqLmVhY2goYXR0cmlidXRlcywgZnVuY3Rpb24oYXR0ck5hbWUsIGF0dHJWYWx1ZSkge1xuICAgIGlmIChhdHRyVmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIGF0dHJWYWx1ZSA9PT0gJ3VuZGVmaW5lZCcgfHwgYXR0clZhbHVlID09PSBmYWxzZSkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKGF0dHJOYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKGF0dHJOYW1lLCAoYXR0clZhbHVlID09PSB0cnVlID8gJycgOiBhdHRyVmFsdWUpKTtcbiAgICB9XG4gIH0pO1xufTtcblxuLyoqXG4gKiBHZXQgYW4gZWxlbWVudCdzIGF0dHJpYnV0ZSB2YWx1ZXMsIGFzIGRlZmluZWQgb24gdGhlIEhUTUwgdGFnXG4gKiBBdHRyaWJ1dGVzIGFyZSBub3QgdGhlIHNhbWUgYXMgcHJvcGVydGllcy4gVGhleSdyZSBkZWZpbmVkIG9uIHRoZSB0YWdcbiAqIG9yIHdpdGggc2V0QXR0cmlidXRlICh3aGljaCBzaG91bGRuJ3QgYmUgdXNlZCB3aXRoIEhUTUwpXG4gKiBUaGlzIHdpbGwgcmV0dXJuIHRydWUgb3IgZmFsc2UgZm9yIGJvb2xlYW4gYXR0cmlidXRlcy5cbiAqIEBwYXJhbSAge0VsZW1lbnR9IHRhZyBFbGVtZW50IGZyb20gd2hpY2ggdG8gZ2V0IHRhZyBhdHRyaWJ1dGVzXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKiBAcHJpdmF0ZVxuICovXG52YXIgZ2V0RWxlbWVudEF0dHJpYnV0ZXMgPSBmdW5jdGlvbih0YWcpe1xuICB2YXIgb2JqLCBrbm93bkJvb2xlYW5zLCBhdHRycywgYXR0ck5hbWUsIGF0dHJWYWw7XG5cbiAgb2JqID0ge307XG5cbiAgLy8ga25vd24gYm9vbGVhbiBhdHRyaWJ1dGVzXG4gIC8vIHdlIGNhbiBjaGVjayBmb3IgbWF0Y2hpbmcgYm9vbGVhbiBwcm9wZXJ0aWVzLCBidXQgb2xkZXIgYnJvd3NlcnNcbiAgLy8gd29uJ3Qga25vdyBhYm91dCBIVE1MNSBib29sZWFuIGF0dHJpYnV0ZXMgdGhhdCB3ZSBzdGlsbCByZWFkIGZyb21cbiAga25vd25Cb29sZWFucyA9ICcsJysnYXV0b3BsYXksY29udHJvbHMsbG9vcCxtdXRlZCxkZWZhdWx0JysnLCc7XG5cbiAgaWYgKHRhZyAmJiB0YWcuYXR0cmlidXRlcyAmJiB0YWcuYXR0cmlidXRlcy5sZW5ndGggPiAwKSB7XG4gICAgYXR0cnMgPSB0YWcuYXR0cmlidXRlcztcblxuICAgIGZvciAodmFyIGkgPSBhdHRycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgYXR0ck5hbWUgPSBhdHRyc1tpXS5uYW1lO1xuICAgICAgYXR0clZhbCA9IGF0dHJzW2ldLnZhbHVlO1xuXG4gICAgICAvLyBjaGVjayBmb3Iga25vd24gYm9vbGVhbnNcbiAgICAgIC8vIHRoZSBtYXRjaGluZyBlbGVtZW50IHByb3BlcnR5IHdpbGwgcmV0dXJuIGEgdmFsdWUgZm9yIHR5cGVvZlxuICAgICAgaWYgKHR5cGVvZiB0YWdbYXR0ck5hbWVdID09PSAnYm9vbGVhbicgfHwga25vd25Cb29sZWFucy5pbmRleE9mKCcsJythdHRyTmFtZSsnLCcpICE9PSAtMSkge1xuICAgICAgICAvLyB0aGUgdmFsdWUgb2YgYW4gaW5jbHVkZWQgYm9vbGVhbiBhdHRyaWJ1dGUgaXMgdHlwaWNhbGx5IGFuIGVtcHR5XG4gICAgICAgIC8vIHN0cmluZyAoJycpIHdoaWNoIHdvdWxkIGVxdWFsIGZhbHNlIGlmIHdlIGp1c3QgY2hlY2sgZm9yIGEgZmFsc2UgdmFsdWUuXG4gICAgICAgIC8vIHdlIGFsc28gZG9uJ3Qgd2FudCBzdXBwb3J0IGJhZCBjb2RlIGxpa2UgYXV0b3BsYXk9J2ZhbHNlJ1xuICAgICAgICBhdHRyVmFsID0gKGF0dHJWYWwgIT09IG51bGwpID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBvYmpbYXR0ck5hbWVdID0gYXR0clZhbDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2JqO1xufTtcblxuLyoqXG4gKiBHZXQgdGhlIGNvbXB1dGVkIHN0eWxlIHZhbHVlIGZvciBhbiBlbGVtZW50XG4gKiBGcm9tIGh0dHA6Ly9yb2JlcnRueW1hbi5jb20vMjAwNi8wNC8yNC9nZXQtdGhlLXJlbmRlcmVkLXN0eWxlLW9mLWFuLWVsZW1lbnQvXG4gKiBAcGFyYW0gIHtFbGVtZW50fSBlbCAgICAgICAgRWxlbWVudCB0byBnZXQgc3R5bGUgdmFsdWUgZm9yXG4gKiBAcGFyYW0gIHtTdHJpbmd9IHN0ckNzc1J1bGUgU3R5bGUgbmFtZVxuICogQHJldHVybiB7U3RyaW5nfSAgICAgICAgICAgIFN0eWxlIHZhbHVlXG4gKiBAcHJpdmF0ZVxuICovXG52YXIgZ2V0Q29tcHV0ZWREaW1lbnNpb24gPSBmdW5jdGlvbihlbCwgc3RyQ3NzUnVsZSl7XG4gIHZhciBzdHJWYWx1ZSA9ICcnO1xuICBpZihkb2N1bWVudC5kZWZhdWx0VmlldyAmJiBkb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKXtcbiAgICBzdHJWYWx1ZSA9IGRvY3VtZW50LmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUoZWwsICcnKS5nZXRQcm9wZXJ0eVZhbHVlKHN0ckNzc1J1bGUpO1xuXG4gIH0gZWxzZSBpZihlbC5jdXJyZW50U3R5bGUpe1xuICAgIC8vIElFOCBXaWR0aC9IZWlnaHQgc3VwcG9ydFxuICAgIGxldCB1cHBlckNhc2VkUnVsZSA9IHN0ckNzc1J1bGUuc3Vic3RyKDAsMSkudG9VcHBlckNhc2UoKSArIHN0ckNzc1J1bGUuc3Vic3RyKDEpO1xuICAgIHN0clZhbHVlID0gZWxbYGNsaWVudCR7dXBwZXJDYXNlZFJ1bGV9YF0gKyAncHgnO1xuICB9XG4gIHJldHVybiBzdHJWYWx1ZTtcbn07XG5cbi8qKlxuICogSW5zZXJ0IGFuIGVsZW1lbnQgYXMgdGhlIGZpcnN0IGNoaWxkIG5vZGUgb2YgYW5vdGhlclxuICogQHBhcmFtICB7RWxlbWVudH0gY2hpbGQgICBFbGVtZW50IHRvIGluc2VydFxuICogQHBhcmFtICB7W3R5cGVdfSBwYXJlbnQgRWxlbWVudCB0byBpbnNlcnQgY2hpbGQgaW50b1xuICogQHByaXZhdGVcbiAqL1xudmFyIGluc2VydEZpcnN0ID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCl7XG4gIGlmIChwYXJlbnQuZmlyc3RDaGlsZCkge1xuICAgIHBhcmVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIHBhcmVudC5maXJzdENoaWxkKTtcbiAgfSBlbHNlIHtcbiAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoY2hpbGQpO1xuICB9XG59O1xuXG4vKipcbiAqIE9iamVjdCB0byBob2xkIGJyb3dzZXIgc3VwcG9ydCBpbmZvcm1hdGlvblxuICogQHR5cGUge09iamVjdH1cbiAqIEBwcml2YXRlXG4gKi9cbnZhciBicm93c2VyID0ge307XG5cbi8qKlxuICogU2hvcnRoYW5kIGZvciBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgpXG4gKiBBbHNvIGFsbG93cyBmb3IgQ1NTIChqUXVlcnkpIElEIHN5bnRheC4gQnV0IG5vdGhpbmcgb3RoZXIgdGhhbiBJRHMuXG4gKiBAcGFyYW0gIHtTdHJpbmd9IGlkICBFbGVtZW50IElEXG4gKiBAcmV0dXJuIHtFbGVtZW50fSAgICBFbGVtZW50IHdpdGggc3VwcGxpZWQgSURcbiAqIEBwcml2YXRlXG4gKi9cbnZhciBlbCA9IGZ1bmN0aW9uKGlkKXtcbiAgaWYgKGlkLmluZGV4T2YoJyMnKSA9PT0gMCkge1xuICAgIGlkID0gaWQuc2xpY2UoMSk7XG4gIH1cblxuICByZXR1cm4gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpO1xufTtcblxuLyoqXG4gKiBGb3JtYXQgc2Vjb25kcyBhcyBhIHRpbWUgc3RyaW5nLCBIOk1NOlNTIG9yIE06U1NcbiAqIFN1cHBseWluZyBhIGd1aWRlIChpbiBzZWNvbmRzKSB3aWxsIGZvcmNlIGEgbnVtYmVyIG9mIGxlYWRpbmcgemVyb3NcbiAqIHRvIGNvdmVyIHRoZSBsZW5ndGggb2YgdGhlIGd1aWRlXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHNlY29uZHMgTnVtYmVyIG9mIHNlY29uZHMgdG8gYmUgdHVybmVkIGludG8gYSBzdHJpbmdcbiAqIEBwYXJhbSAge051bWJlcn0gZ3VpZGUgICBOdW1iZXIgKGluIHNlY29uZHMpIHRvIG1vZGVsIHRoZSBzdHJpbmcgYWZ0ZXJcbiAqIEByZXR1cm4ge1N0cmluZ30gICAgICAgICBUaW1lIGZvcm1hdHRlZCBhcyBIOk1NOlNTIG9yIE06U1NcbiAqIEBwcml2YXRlXG4gKi9cbnZhciBmb3JtYXRUaW1lID0gZnVuY3Rpb24oc2Vjb25kcywgZ3VpZGU9c2Vjb25kcykge1xuICBsZXQgcyA9IE1hdGguZmxvb3Ioc2Vjb25kcyAlIDYwKTtcbiAgbGV0IG0gPSBNYXRoLmZsb29yKHNlY29uZHMgLyA2MCAlIDYwKTtcbiAgbGV0IGggPSBNYXRoLmZsb29yKHNlY29uZHMgLyAzNjAwKTtcbiAgY29uc3QgZ20gPSBNYXRoLmZsb29yKGd1aWRlIC8gNjAgJSA2MCk7XG4gIGNvbnN0IGdoID0gTWF0aC5mbG9vcihndWlkZSAvIDM2MDApO1xuXG4gIC8vIGhhbmRsZSBpbnZhbGlkIHRpbWVzXG4gIGlmIChpc05hTihzZWNvbmRzKSB8fCBzZWNvbmRzID09PSBJbmZpbml0eSkge1xuICAgIC8vICctJyBpcyBmYWxzZSBmb3IgYWxsIHJlbGF0aW9uYWwgb3BlcmF0b3JzIChlLmcuIDwsID49KSBzbyB0aGlzIHNldHRpbmdcbiAgICAvLyB3aWxsIGFkZCB0aGUgbWluaW11bSBudW1iZXIgb2YgZmllbGRzIHNwZWNpZmllZCBieSB0aGUgZ3VpZGVcbiAgICBoID0gbSA9IHMgPSAnLSc7XG4gIH1cblxuICAvLyBDaGVjayBpZiB3ZSBuZWVkIHRvIHNob3cgaG91cnNcbiAgaCA9IChoID4gMCB8fCBnaCA+IDApID8gaCArICc6JyA6ICcnO1xuXG4gIC8vIElmIGhvdXJzIGFyZSBzaG93aW5nLCB3ZSBtYXkgbmVlZCB0byBhZGQgYSBsZWFkaW5nIHplcm8uXG4gIC8vIEFsd2F5cyBzaG93IGF0IGxlYXN0IG9uZSBkaWdpdCBvZiBtaW51dGVzLlxuICBtID0gKCgoaCB8fCBnbSA+PSAxMCkgJiYgbSA8IDEwKSA/ICcwJyArIG0gOiBtKSArICc6JztcblxuICAvLyBDaGVjayBpZiBsZWFkaW5nIHplcm8gaXMgbmVlZCBmb3Igc2Vjb25kc1xuICBzID0gKHMgPCAxMCkgPyAnMCcgKyBzIDogcztcblxuICByZXR1cm4gaCArIG0gKyBzO1xufTtcblxuLy8gQXR0ZW1wdCB0byBibG9jayB0aGUgYWJpbGl0eSB0byBzZWxlY3QgdGV4dCB3aGlsZSBkcmFnZ2luZyBjb250cm9sc1xudmFyIGJsb2NrVGV4dFNlbGVjdGlvbiA9IGZ1bmN0aW9uKCl7XG4gIGRvY3VtZW50LmJvZHkuZm9jdXMoKTtcbiAgZG9jdW1lbnQub25zZWxlY3RzdGFydCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZhbHNlOyB9O1xufTtcbi8vIFR1cm4gb2ZmIHRleHQgc2VsZWN0aW9uIGJsb2NraW5nXG52YXIgdW5ibG9ja1RleHRTZWxlY3Rpb24gPSBmdW5jdGlvbigpeyBkb2N1bWVudC5vbnNlbGVjdHN0YXJ0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdHJ1ZTsgfTsgfTtcblxuLyoqXG4gKiBUcmltIHdoaXRlc3BhY2UgZnJvbSB0aGUgZW5kcyBvZiBhIHN0cmluZy5cbiAqIEBwYXJhbSAge1N0cmluZ30gc3RyaW5nIFN0cmluZyB0byB0cmltXG4gKiBAcmV0dXJuIHtTdHJpbmd9ICAgICAgICBUcmltbWVkIHN0cmluZ1xuICogQHByaXZhdGVcbiAqL1xudmFyIHRyaW0gPSBmdW5jdGlvbihzdHIpe1xuICByZXR1cm4gKHN0cisnJykucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpO1xufTtcblxuLyoqXG4gKiBTaG91bGQgcm91bmQgb2ZmIGEgbnVtYmVyIHRvIGEgZGVjaW1hbCBwbGFjZVxuICogQHBhcmFtICB7TnVtYmVyfSBudW0gTnVtYmVyIHRvIHJvdW5kXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IGRlYyBOdW1iZXIgb2YgZGVjaW1hbCBwbGFjZXMgdG8gcm91bmQgdG9cbiAqIEByZXR1cm4ge051bWJlcn0gICAgIFJvdW5kZWQgbnVtYmVyXG4gKiBAcHJpdmF0ZVxuICovXG52YXIgcm91bmQgPSBmdW5jdGlvbihudW0sIGRlYz0wKSB7XG4gIHJldHVybiBNYXRoLnJvdW5kKG51bSpNYXRoLnBvdygxMCxkZWMpKS9NYXRoLnBvdygxMCxkZWMpO1xufTtcblxuLyoqXG4gKiBTaG91bGQgY3JlYXRlIGEgZmFrZSBUaW1lUmFuZ2Ugb2JqZWN0XG4gKiBNaW1pY3MgYW4gSFRNTDUgdGltZSByYW5nZSBpbnN0YW5jZSwgd2hpY2ggaGFzIGZ1bmN0aW9ucyB0aGF0XG4gKiByZXR1cm4gdGhlIHN0YXJ0IGFuZCBlbmQgdGltZXMgZm9yIGEgcmFuZ2VcbiAqIFRpbWVSYW5nZXMgYXJlIHJldHVybmVkIGJ5IHRoZSBidWZmZXJlZCgpIG1ldGhvZFxuICogQHBhcmFtICB7TnVtYmVyfSBzdGFydCBTdGFydCB0aW1lIGluIHNlY29uZHNcbiAqIEBwYXJhbSAge051bWJlcn0gZW5kICAgRW5kIHRpbWUgaW4gc2Vjb25kc1xuICogQHJldHVybiB7T2JqZWN0fSAgICAgICBGYWtlIFRpbWVSYW5nZSBvYmplY3RcbiAqIEBwcml2YXRlXG4gKi9cbnZhciBjcmVhdGVUaW1lUmFuZ2UgPSBmdW5jdGlvbihzdGFydCwgZW5kKXtcbiAgcmV0dXJuIHtcbiAgICBsZW5ndGg6IDEsXG4gICAgc3RhcnQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gc3RhcnQ7IH0sXG4gICAgZW5kOiBmdW5jdGlvbigpIHsgcmV0dXJuIGVuZDsgfVxuICB9O1xufTtcblxuLyoqXG4gKiBBZGQgdG8gbG9jYWwgc3RvcmFnZSAobWF5YmUgcmVtb3ZhYmxlKVxuICogQHByaXZhdGVcbiAqL1xudmFyIHNldExvY2FsU3RvcmFnZSA9IGZ1bmN0aW9uKGtleSwgdmFsdWUpe1xuICB0cnkge1xuICAgIC8vIElFIHdhcyB0aHJvd2luZyBlcnJvcnMgcmVmZXJlbmNpbmcgdGhlIHZhciBhbnl3aGVyZSB3aXRob3V0IHRoaXNcbiAgICBsZXQgbG9jYWxTdG9yYWdlID0gd2luZG93LmxvY2FsU3RvcmFnZSB8fCBmYWxzZTtcbiAgICBpZiAoIWxvY2FsU3RvcmFnZSkgeyByZXR1cm47IH1cbiAgICBsb2NhbFN0b3JhZ2Vba2V5XSA9IHZhbHVlO1xuICB9IGNhdGNoKGUpIHtcbiAgICBpZiAoZS5jb2RlID09PSAyMiB8fCBlLmNvZGUgPT09IDEwMTQpIHsgLy8gV2Via2l0ID09IDIyIC8gRmlyZWZveCA9PSAxMDE0XG4gICAgICBsb2coJ0xvY2FsU3RvcmFnZSBGdWxsIChWaWRlb0pTKScsIGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoZS5jb2RlID09PSAxOCkge1xuICAgICAgICBsb2coJ0xvY2FsU3RvcmFnZSBub3QgYWxsb3dlZCAoVmlkZW9KUyknLCBlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvZygnTG9jYWxTdG9yYWdlIEVycm9yIChWaWRlb0pTKScsIGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBHZXQgYWJzb2x1dGUgdmVyc2lvbiBvZiByZWxhdGl2ZSBVUkwuIFVzZWQgdG8gdGVsbCBmbGFzaCBjb3JyZWN0IFVSTC5cbiAqIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNDcwODMyL2dldHRpbmctYW4tYWJzb2x1dGUtdXJsLWZyb20tYS1yZWxhdGl2ZS1vbmUtaWU2LWlzc3VlXG4gKiBAcGFyYW0gIHtTdHJpbmd9IHVybCBVUkwgdG8gbWFrZSBhYnNvbHV0ZVxuICogQHJldHVybiB7U3RyaW5nfSAgICAgQWJzb2x1dGUgVVJMXG4gKiBAcHJpdmF0ZVxuICovXG52YXIgZ2V0QWJzb2x1dGVVUkwgPSBmdW5jdGlvbih1cmwpe1xuICAvLyBDaGVjayBpZiBhYnNvbHV0ZSBVUkxcbiAgaWYgKCF1cmwubWF0Y2goL15odHRwcz86XFwvXFwvLykpIHtcbiAgICAvLyBDb252ZXJ0IHRvIGFic29sdXRlIFVSTC4gRmxhc2ggaG9zdGVkIG9mZi1zaXRlIG5lZWRzIGFuIGFic29sdXRlIFVSTC5cbiAgICB1cmwgPSBjcmVhdGVFbCgnZGl2Jywge1xuICAgICAgaW5uZXJIVE1MOiBgPGEgaHJlZj1cIiR7dXJsfVwiPng8L2E+YFxuICAgIH0pLmZpcnN0Q2hpbGQuaHJlZjtcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59O1xuXG4vKipcbiAqIFJlc29sdmUgYW5kIHBhcnNlIHRoZSBlbGVtZW50cyBvZiBhIFVSTFxuICogQHBhcmFtICB7U3RyaW5nfSB1cmwgVGhlIHVybCB0byBwYXJzZVxuICogQHJldHVybiB7T2JqZWN0fSAgICAgQW4gb2JqZWN0IG9mIHVybCBkZXRhaWxzXG4gKi9cbnZhciBwYXJzZVVybCA9IGZ1bmN0aW9uKHVybCkge1xuICBjb25zdCBwcm9wcyA9IFsncHJvdG9jb2wnLCAnaG9zdG5hbWUnLCAncG9ydCcsICdwYXRobmFtZScsICdzZWFyY2gnLCAnaGFzaCcsICdob3N0J107XG5cbiAgLy8gYWRkIHRoZSB1cmwgdG8gYW4gYW5jaG9yIGFuZCBsZXQgdGhlIGJyb3dzZXIgcGFyc2UgdGhlIFVSTFxuICBsZXQgYSA9IGNyZWF0ZUVsKCdhJywgeyBocmVmOiB1cmwgfSk7XG5cbiAgLy8gSUU4IChhbmQgOT8pIEZpeFxuICAvLyBpZTggZG9lc24ndCBwYXJzZSB0aGUgVVJMIGNvcnJlY3RseSB1bnRpbCB0aGUgYW5jaG9yIGlzIGFjdHVhbGx5XG4gIC8vIGFkZGVkIHRvIHRoZSBib2R5LCBhbmQgYW4gaW5uZXJIVE1MIGlzIG5lZWRlZCB0byB0cmlnZ2VyIHRoZSBwYXJzaW5nXG4gIGxldCBhZGRUb0JvZHkgPSAoYS5ob3N0ID09PSAnJyAmJiBhLnByb3RvY29sICE9PSAnZmlsZTonKTtcbiAgbGV0IGRpdjtcbiAgaWYgKGFkZFRvQm9keSkge1xuICAgIGRpdiA9IGNyZWF0ZUVsKCdkaXYnKTtcbiAgICBkaXYuaW5uZXJIVE1MID0gYDxhIGhyZWY9XCIke3VybH1cIj48L2E+YDtcbiAgICBhID0gZGl2LmZpcnN0Q2hpbGQ7XG4gICAgLy8gcHJldmVudCB0aGUgZGl2IGZyb20gYWZmZWN0aW5nIGxheW91dFxuICAgIGRpdi5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgJ2Rpc3BsYXk6bm9uZTsgcG9zaXRpb246YWJzb2x1dGU7Jyk7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkaXYpO1xuICB9XG5cbiAgLy8gQ29weSB0aGUgc3BlY2lmaWMgVVJMIHByb3BlcnRpZXMgdG8gYSBuZXcgb2JqZWN0XG4gIC8vIFRoaXMgaXMgYWxzbyBuZWVkZWQgZm9yIElFOCBiZWNhdXNlIHRoZSBhbmNob3IgbG9zZXMgaXRzXG4gIC8vIHByb3BlcnRpZXMgd2hlbiBpdCdzIHJlbW92ZWQgZnJvbSB0aGUgZG9tXG4gIGxldCBkZXRhaWxzID0ge307XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICBkZXRhaWxzW3Byb3BzW2ldXSA9IGFbcHJvcHNbaV1dO1xuICB9XG5cbiAgLy8gSUU5IGFkZHMgdGhlIHBvcnQgdG8gdGhlIGhvc3QgcHJvcGVydHkgdW5saWtlIGV2ZXJ5b25lIGVsc2UuIElmXG4gIC8vIGEgcG9ydCBpZGVudGlmaWVyIGlzIGFkZGVkIGZvciBzdGFuZGFyZCBwb3J0cywgc3RyaXAgaXQuXG4gIGlmIChkZXRhaWxzLnByb3RvY29sID09PSAnaHR0cDonKSB7XG4gICAgZGV0YWlscy5ob3N0ID0gZGV0YWlscy5ob3N0LnJlcGxhY2UoLzo4MCQvLCAnJyk7XG4gIH1cbiAgaWYgKGRldGFpbHMucHJvdG9jb2wgPT09ICdodHRwczonKSB7XG4gICAgZGV0YWlscy5ob3N0ID0gZGV0YWlscy5ob3N0LnJlcGxhY2UoLzo0NDMkLywgJycpO1xuICB9XG5cbiAgaWYgKGFkZFRvQm9keSkge1xuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZGl2KTtcbiAgfVxuXG4gIHJldHVybiBkZXRhaWxzO1xufTtcblxuLyoqXG4gKiBMb2cgbWVzc2FnZXMgdG8gdGhlIGNvbnNvbGUgYW5kIGhpc3RvcnkgYmFzZWQgb24gdGhlIHR5cGUgb2YgbWVzc2FnZVxuICpcbiAqIEBwYXJhbSAge1N0cmluZ30gdHlwZSBUaGUgdHlwZSBvZiBtZXNzYWdlLCBvciBgbnVsbGAgZm9yIGBsb2dgXG4gKiBAcGFyYW0gIHtbdHlwZV19IGFyZ3MgVGhlIGFyZ3MgdG8gYmUgcGFzc2VkIHRvIHRoZSBsb2dcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIF9sb2dUeXBlKHR5cGUsIGFyZ3Mpe1xuICAvLyBjb252ZXJ0IGFyZ3MgdG8gYW4gYXJyYXkgdG8gZ2V0IGFycmF5IGZ1bmN0aW9uc1xuICBsZXQgYXJnc0FycmF5ID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJncyk7XG4gIC8vIGlmIHRoZXJlJ3Mgbm8gY29uc29sZSB0aGVuIGRvbid0IHRyeSB0byBvdXRwdXQgbWVzc2FnZXNcbiAgLy8gdGhleSB3aWxsIHN0aWxsIGJlIHN0b3JlZCBpbiBMaWIubG9nLmhpc3RvcnlcbiAgLy8gV2FzIHNldHRpbmcgdGhlc2Ugb25jZSBvdXRzaWRlIG9mIHRoaXMgZnVuY3Rpb24sIGJ1dCBjb250YWluaW5nIHRoZW1cbiAgLy8gaW4gdGhlIGZ1bmN0aW9uIG1ha2VzIGl0IGVhc2llciB0byB0ZXN0IGNhc2VzIHdoZXJlIGNvbnNvbGUgZG9lc24ndCBleGlzdFxuICBsZXQgbm9vcCA9IGZ1bmN0aW9uKCl7fTtcblxuICBsZXQgY29uc29sZSA9IHdpbmRvd1snY29uc29sZSddIHx8IHtcbiAgICAnbG9nJzogbm9vcCxcbiAgICAnd2Fybic6IG5vb3AsXG4gICAgJ2Vycm9yJzogbm9vcFxuICB9O1xuXG4gIGlmICh0eXBlKSB7XG4gICAgLy8gYWRkIHRoZSB0eXBlIHRvIHRoZSBmcm9udCBvZiB0aGUgbWVzc2FnZVxuICAgIGFyZ3NBcnJheS51bnNoaWZ0KHR5cGUudG9VcHBlckNhc2UoKSsnOicpO1xuICB9IGVsc2Uge1xuICAgIC8vIGRlZmF1bHQgdG8gbG9nIHdpdGggbm8gcHJlZml4XG4gICAgdHlwZSA9ICdsb2cnO1xuICB9XG5cbiAgLy8gYWRkIHRvIGhpc3RvcnlcbiAgbG9nLmhpc3RvcnkucHVzaChhcmdzQXJyYXkpO1xuXG4gIC8vIGFkZCBjb25zb2xlIHByZWZpeCBhZnRlciBhZGRpbmcgdG8gaGlzdG9yeVxuICBhcmdzQXJyYXkudW5zaGlmdCgnVklERU9KUzonKTtcblxuICAvLyBjYWxsIGFwcHJvcHJpYXRlIGxvZyBmdW5jdGlvblxuICBpZiAoY29uc29sZVt0eXBlXS5hcHBseSkge1xuICAgIGNvbnNvbGVbdHlwZV0uYXBwbHkoY29uc29sZSwgYXJnc0FycmF5KTtcbiAgfSBlbHNlIHtcbiAgICAvLyBpZTggZG9lc24ndCBhbGxvdyBlcnJvci5hcHBseSwgYnV0IGl0IHdpbGwganVzdCBqb2luKCkgdGhlIGFycmF5IGFueXdheVxuICAgIGNvbnNvbGVbdHlwZV0oYXJnc0FycmF5LmpvaW4oJyAnKSk7XG4gIH1cbn1cblxuLyoqXG4gKiBMb2cgcGxhaW4gZGVidWcgbWVzc2FnZXNcbiAqL1xudmFyIGxvZyA9IGZ1bmN0aW9uKCl7XG4gIF9sb2dUeXBlKG51bGwsIGFyZ3VtZW50cyk7XG59O1xuXG4vKipcbiAqIEtlZXAgYSBoaXN0b3J5IG9mIGxvZyBtZXNzYWdlc1xuICogQHR5cGUge0FycmF5fVxuICovXG5sb2cuaGlzdG9yeSA9IFtdO1xuXG4vKipcbiAqIExvZyBlcnJvciBtZXNzYWdlc1xuICovXG5sb2cuZXJyb3IgPSBmdW5jdGlvbigpe1xuICBfbG9nVHlwZSgnZXJyb3InLCBhcmd1bWVudHMpO1xufTtcblxuLyoqXG4gKiBMb2cgd2FybmluZyBtZXNzYWdlc1xuICovXG5sb2cud2FybiA9IGZ1bmN0aW9uKCl7XG4gIF9sb2dUeXBlKCd3YXJuJywgYXJndW1lbnRzKTtcbn07XG5cbi8vIE9mZnNldCBMZWZ0XG4vLyBnZXRCb3VuZGluZ0NsaWVudFJlY3QgdGVjaG5pcXVlIGZyb20gSm9obiBSZXNpZyBodHRwOi8vZWpvaG4ub3JnL2Jsb2cvZ2V0Ym91bmRpbmdjbGllbnRyZWN0LWlzLWF3ZXNvbWUvXG52YXIgZmluZFBvc2l0aW9uID0gZnVuY3Rpb24oZWwpIHtcbiAgbGV0IGJveDtcblxuICBpZiAoZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0ICYmIGVsLnBhcmVudE5vZGUpIHtcbiAgICBib3ggPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgfVxuXG4gIGlmICghYm94KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxlZnQ6IDAsXG4gICAgICB0b3A6IDBcbiAgICB9O1xuICB9XG5cbiAgY29uc3QgZG9jRWwgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIGNvbnN0IGJvZHkgPSBkb2N1bWVudC5ib2R5O1xuXG4gIGNvbnN0IGNsaWVudExlZnQgPSBkb2NFbC5jbGllbnRMZWZ0IHx8IGJvZHkuY2xpZW50TGVmdCB8fCAwO1xuICBjb25zdCBzY3JvbGxMZWZ0ID0gd2luZG93LnBhZ2VYT2Zmc2V0IHx8IGJvZHkuc2Nyb2xsTGVmdDtcbiAgY29uc3QgbGVmdCA9IGJveC5sZWZ0ICsgc2Nyb2xsTGVmdCAtIGNsaWVudExlZnQ7XG5cbiAgY29uc3QgY2xpZW50VG9wID0gZG9jRWwuY2xpZW50VG9wIHx8IGJvZHkuY2xpZW50VG9wIHx8IDA7XG4gIGNvbnN0IHNjcm9sbFRvcCA9IHdpbmRvdy5wYWdlWU9mZnNldCB8fCBib2R5LnNjcm9sbFRvcDtcbiAgY29uc3QgdG9wID0gYm94LnRvcCArIHNjcm9sbFRvcCAtIGNsaWVudFRvcDtcblxuICAvLyBBbmRyb2lkIHNvbWV0aW1lcyByZXR1cm5zIHNsaWdodGx5IG9mZiBkZWNpbWFsIHZhbHVlcywgc28gbmVlZCB0byByb3VuZFxuICByZXR1cm4ge1xuICAgIGxlZnQ6IHJvdW5kKGxlZnQpLFxuICAgIHRvcDogcm91bmQodG9wKVxuICB9O1xufTtcblxuLyoqXG4gKiBBcnJheSBmdW5jdGlvbnMgY29udGFpbmVyXG4gKiBAdHlwZSB7T2JqZWN0fVxuICogQHByaXZhdGVcbiAqL1xudmFyIGFyciA9IHt9O1xuXG4vKlxuICogTG9vcHMgdGhyb3VnaCBhbiBhcnJheSBhbmQgcnVucyBhIGZ1bmN0aW9uIGZvciBlYWNoIGl0ZW0gaW5zaWRlIGl0LlxuICogQHBhcmFtICB7QXJyYXl9ICAgIGFycmF5ICAgICAgIFRoZSBhcnJheVxuICogQHBhcmFtICB7RnVuY3Rpb259IGNhbGxiYWNrICAgIFRoZSBmdW5jdGlvbiB0byBiZSBydW4gZm9yIGVhY2ggaXRlbVxuICogQHBhcmFtICB7Kn0gICAgICAgIHRoaXNBcmcgICAgIFRoZSBgdGhpc2AgYmluZGluZyBvZiBjYWxsYmFja1xuICogQHJldHVybnMge0FycmF5fSAgICAgICAgICAgICAgIFRoZSBhcnJheVxuICogQHByaXZhdGVcbiAqL1xuYXJyLmZvckVhY2ggPSBmdW5jdGlvbihhcnJheSwgY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgdGhpc0FyZyA9IHRoaXNBcmcgfHwgdGhpcztcblxuICBpZiAob2JqLmlzQXJyYXkoYXJyYXkpICYmIGNhbGxiYWNrIGluc3RhbmNlb2YgRnVuY3Rpb24pIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gYXJyYXkubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgIGNhbGxiYWNrLmNhbGwodGhpc0FyZywgYXJyYXlbaV0sIGksIGFycmF5KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYXJyYXk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGV4dGVuc2lvbiBvZiB0aGUgcGFzc2VkIGZpbGUgbmFtZS4gSXQgd2lsbCByZXR1cm4gYW4gZW1wdHkgc3RyaW5nIGlmIHlvdSBwYXNzIGFuIGludmFsaWQgcGF0aFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSAgICBwYXRoICAgIFRoZSBmaWxlTmFtZSBwYXRoIGxpa2UgJy9wYXRoL3RvL2ZpbGUubXA0J1xuICogQHJldHVybnMge1N0cmluZ30gICAgICAgICAgVGhlIGV4dGVuc2lvbiBpbiBsb3dlciBjYXNlIG9yIGFuIGVtcHR5IHN0cmluZyBpZiBubyBleHRlbnNpb24gY291bGQgYmUgZm91bmQuXG4gKi9cbnZhciBnZXRGaWxlRXh0ZW5zaW9uID0gZnVuY3Rpb24ocGF0aCkge1xuICBpZih0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpe1xuICAgIGxldCBzcGxpdFBhdGhSZSA9IC9eKFxcLz8pKFtcXHNcXFNdKj8pKCg/OlxcLnsxLDJ9fFteXFwvXSs/KShcXC4oW15cXC5cXC9cXD9dKykpKSg/OltcXC9dKnxbXFw/XS4qKSQvaTtcbiAgICBsZXQgcGF0aFBhcnRzID0gc3BsaXRQYXRoUmUuZXhlYyhwYXRoKTtcblxuICAgIGlmIChwYXRoUGFydHMpIHtcbiAgICAgIHJldHVybiBwYXRoUGFydHMucG9wKCkudG9Mb3dlckNhc2UoKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gJyc7XG59O1xuXG5leHBvcnQge1xuICBjcmVhdGVFbCxcbiAgY2FwaXRhbGl6ZSxcbiAgb2JqLFxuICBpc05hTixcbiAgYmluZCxcbiAgY2FjaGUsXG4gIGd1aWQsXG4gIGV4cGFuZG8sXG4gIGdldERhdGEsXG4gIGhhc0RhdGEsXG4gIHJlbW92ZURhdGEsXG4gIGlzRW1wdHksXG4gIGhhc0NsYXNzLFxuICBhZGRDbGFzcyxcbiAgcmVtb3ZlQ2xhc3MsXG4gIFRFU1RfVklELFxuICBVU0VSX0FHRU5ULFxuICBJU19JUEhPTkUsXG4gIElTX0lQQUQsXG4gIElTX0lQT0QsXG4gIElTX0lPUyxcbiAgSU9TX1ZFUlNJT04sXG4gIElTX0FORFJPSUQsXG4gIEFORFJPSURfVkVSU0lPTixcbiAgSVNfT0xEX0FORFJPSUQsXG4gIElTX0ZJUkVGT1gsXG4gIElTX0lFOCxcbiAgSVNfQ0hST01FLFxuICBUT1VDSF9FTkFCTEVELFxuICBCQUNLR1JPVU5EX1NJWkVfU1VQUE9SVEVELFxuICBzZXRFbGVtZW50QXR0cmlidXRlcyxcbiAgZ2V0RWxlbWVudEF0dHJpYnV0ZXMsXG4gIGdldENvbXB1dGVkRGltZW5zaW9uLFxuICBpbnNlcnRGaXJzdCxcbiAgYnJvd3NlcixcbiAgZWwsXG4gIGZvcm1hdFRpbWUsXG4gIGJsb2NrVGV4dFNlbGVjdGlvbixcbiAgdW5ibG9ja1RleHRTZWxlY3Rpb24sXG4gIHRyaW0sXG4gIHJvdW5kLFxuICBjcmVhdGVUaW1lUmFuZ2UsXG4gIHNldExvY2FsU3RvcmFnZSxcbiAgZ2V0QWJzb2x1dGVVUkwsXG4gIHBhcnNlVXJsLFxuICBsb2csXG4gIGZpbmRQb3NpdGlvbixcbiAgYXJyLFxuICBnZXRGaWxlRXh0ZW5zaW9uXG59O1xuIiwiaW1wb3J0IENvbXBvbmVudCBmcm9tICcuL2NvbXBvbmVudCc7XG5cbi8qIExvYWRpbmcgU3Bpbm5lclxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxuICogTG9hZGluZyBzcGlubmVyIGZvciB3YWl0aW5nIGV2ZW50c1xuICogQHBhcmFtIHtQbGF5ZXJ8T2JqZWN0fSBwbGF5ZXJcbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0aW9uc1xuICogQGNsYXNzXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuY2xhc3MgTG9hZGluZ1NwaW5uZXIgZXh0ZW5kcyBDb21wb25lbnQge1xuICBjcmVhdGVFbCgpIHtcbiAgICByZXR1cm4gc3VwZXIuY3JlYXRlRWwoJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3Zqcy1sb2FkaW5nLXNwaW5uZXInXG4gICAgfSk7XG4gIH1cbn1cblxuQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50KCdMb2FkaW5nU3Bpbm5lcicsIExvYWRpbmdTcGlubmVyKTtcbmV4cG9ydCBkZWZhdWx0IExvYWRpbmdTcGlubmVyO1xuIiwiaW1wb3J0ICogYXMgTGliIGZyb20gJy4vbGliJztcblxuLyoqXG4gKiBDdXN0b20gTWVkaWFFcnJvciB0byBtaW1pYyB0aGUgSFRNTDUgTWVkaWFFcnJvclxuICogQHBhcmFtIHtOdW1iZXJ9IGNvZGUgVGhlIG1lZGlhIGVycm9yIGNvZGVcbiAqL1xubGV0IE1lZGlhRXJyb3IgPSBmdW5jdGlvbihjb2RlKXtcbiAgaWYgKHR5cGVvZiBjb2RlID09PSAnbnVtYmVyJykge1xuICAgIHRoaXMuY29kZSA9IGNvZGU7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGNvZGUgPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gZGVmYXVsdCBjb2RlIGlzIHplcm8sIHNvIHRoaXMgaXMgYSBjdXN0b20gZXJyb3JcbiAgICB0aGlzLm1lc3NhZ2UgPSBjb2RlO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBjb2RlID09PSAnb2JqZWN0JykgeyAvLyBvYmplY3RcbiAgICBMaWIub2JqLm1lcmdlKHRoaXMsIGNvZGUpO1xuICB9XG5cbiAgaWYgKCF0aGlzLm1lc3NhZ2UpIHtcbiAgICB0aGlzLm1lc3NhZ2UgPSBNZWRpYUVycm9yLmRlZmF1bHRNZXNzYWdlc1t0aGlzLmNvZGVdIHx8ICcnO1xuICB9XG59O1xuXG4vKipcbiAqIFRoZSBlcnJvciBjb2RlIHRoYXQgcmVmZXJzIHR3byBvbmUgb2YgdGhlIGRlZmluZWRcbiAqIE1lZGlhRXJyb3IgdHlwZXNcbiAqIEB0eXBlIHtOdW1iZXJ9XG4gKi9cbk1lZGlhRXJyb3IucHJvdG90eXBlLmNvZGUgPSAwO1xuXG4vKipcbiAqIEFuIG9wdGlvbmFsIG1lc3NhZ2UgdG8gYmUgc2hvd24gd2l0aCB0aGUgZXJyb3IuXG4gKiBNZXNzYWdlIGlzIG5vdCBwYXJ0IG9mIHRoZSBIVE1MNSB2aWRlbyBzcGVjXG4gKiBidXQgYWxsb3dzIGZvciBtb3JlIGluZm9ybWF0aXZlIGN1c3RvbSBlcnJvcnMuXG4gKiBAdHlwZSB7U3RyaW5nfVxuICovXG5NZWRpYUVycm9yLnByb3RvdHlwZS5tZXNzYWdlID0gJyc7XG5cbi8qKlxuICogQW4gb3B0aW9uYWwgc3RhdHVzIGNvZGUgdGhhdCBjYW4gYmUgc2V0IGJ5IHBsdWdpbnNcbiAqIHRvIGFsbG93IGV2ZW4gbW9yZSBkZXRhaWwgYWJvdXQgdGhlIGVycm9yLlxuICogRm9yIGV4YW1wbGUgdGhlIEhMUyBwbHVnaW4gbWlnaHQgcHJvdmlkZSB0aGUgc3BlY2lmaWNcbiAqIEhUVFAgc3RhdHVzIGNvZGUgdGhhdCB3YXMgcmV0dXJuZWQgd2hlbiB0aGUgZXJyb3JcbiAqIG9jY3VycmVkLCB0aGVuIGFsbG93aW5nIGEgY3VzdG9tIGVycm9yIG92ZXJsYXlcbiAqIHRvIGRpc3BsYXkgbW9yZSBpbmZvcm1hdGlvbi5cbiAqIEB0eXBlIHtbdHlwZV19XG4gKi9cbk1lZGlhRXJyb3IucHJvdG90eXBlLnN0YXR1cyA9IG51bGw7XG5cbk1lZGlhRXJyb3IuZXJyb3JUeXBlcyA9IFtcbiAgJ01FRElBX0VSUl9DVVNUT00nLCAgICAgICAgICAgIC8vID0gMFxuICAnTUVESUFfRVJSX0FCT1JURUQnLCAgICAgICAgICAgLy8gPSAxXG4gICdNRURJQV9FUlJfTkVUV09SSycsICAgICAgICAgICAvLyA9IDJcbiAgJ01FRElBX0VSUl9ERUNPREUnLCAgICAgICAgICAgIC8vID0gM1xuICAnTUVESUFfRVJSX1NSQ19OT1RfU1VQUE9SVEVEJywgLy8gPSA0XG4gICdNRURJQV9FUlJfRU5DUllQVEVEJyAgICAgICAgICAvLyA9IDVcbl07XG5cbk1lZGlhRXJyb3IuZGVmYXVsdE1lc3NhZ2VzID0ge1xuICAxOiAnWW91IGFib3J0ZWQgdGhlIHZpZGVvIHBsYXliYWNrJyxcbiAgMjogJ0EgbmV0d29yayBlcnJvciBjYXVzZWQgdGhlIHZpZGVvIGRvd25sb2FkIHRvIGZhaWwgcGFydC13YXkuJyxcbiAgMzogJ1RoZSB2aWRlbyBwbGF5YmFjayB3YXMgYWJvcnRlZCBkdWUgdG8gYSBjb3JydXB0aW9uIHByb2JsZW0gb3IgYmVjYXVzZSB0aGUgdmlkZW8gdXNlZCBmZWF0dXJlcyB5b3VyIGJyb3dzZXIgZGlkIG5vdCBzdXBwb3J0LicsXG4gIDQ6ICdUaGUgdmlkZW8gY291bGQgbm90IGJlIGxvYWRlZCwgZWl0aGVyIGJlY2F1c2UgdGhlIHNlcnZlciBvciBuZXR3b3JrIGZhaWxlZCBvciBiZWNhdXNlIHRoZSBmb3JtYXQgaXMgbm90IHN1cHBvcnRlZC4nLFxuICA1OiAnVGhlIHZpZGVvIGlzIGVuY3J5cHRlZCBhbmQgd2UgZG8gbm90IGhhdmUgdGhlIGtleXMgdG8gZGVjcnlwdCBpdC4nXG59O1xuXG4vLyBBZGQgdHlwZXMgYXMgcHJvcGVydGllcyBvbiBNZWRpYUVycm9yXG4vLyBlLmcuIE1lZGlhRXJyb3IuTUVESUFfRVJSX1NSQ19OT1RfU1VQUE9SVEVEID0gNDtcbmZvciAodmFyIGVyck51bSA9IDA7IGVyck51bSA8IE1lZGlhRXJyb3IuZXJyb3JUeXBlcy5sZW5ndGg7IGVyck51bSsrKSB7XG4gIE1lZGlhRXJyb3JbTWVkaWFFcnJvci5lcnJvclR5cGVzW2Vyck51bV1dID0gZXJyTnVtO1xuICAvLyB2YWx1ZXMgc2hvdWxkIGJlIGFjY2Vzc2libGUgb24gYm90aCB0aGUgY2xhc3MgYW5kIGluc3RhbmNlXG4gIE1lZGlhRXJyb3IucHJvdG90eXBlW01lZGlhRXJyb3IuZXJyb3JUeXBlc1tlcnJOdW1dXSA9IGVyck51bTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgTWVkaWFFcnJvcjtcbiIsImltcG9ydCBCdXR0b24gZnJvbSAnLi4vYnV0dG9uLmpzJztcbmltcG9ydCBNZW51IGZyb20gJy4vbWVudS5qcyc7XG5pbXBvcnQgKiBhcyBMaWIgZnJvbSAnLi4vbGliLmpzJztcblxuLyoqXG4gKiBBIGJ1dHRvbiBjbGFzcyB3aXRoIGEgcG9wdXAgbWVudVxuICogQHBhcmFtIHtQbGF5ZXJ8T2JqZWN0fSBwbGF5ZXJcbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0aW9uc1xuICogQGNvbnN0cnVjdG9yXG4gKi9cbmNsYXNzIE1lbnVCdXR0b24gZXh0ZW5kcyBCdXR0b24ge1xuXG4gIGNvbnN0cnVjdG9yKHBsYXllciwgb3B0aW9ucyl7XG4gICAgc3VwZXIocGxheWVyLCBvcHRpb25zKTtcblxuICAgIHRoaXMudXBkYXRlKCk7XG5cbiAgICB0aGlzLm9uKCdrZXlkb3duJywgdGhpcy5oYW5kbGVLZXlQcmVzcyk7XG4gICAgdGhpcy5lbF8uc2V0QXR0cmlidXRlKCdhcmlhLWhhc3BvcHVwJywgdHJ1ZSk7XG4gICAgdGhpcy5lbF8uc2V0QXR0cmlidXRlKCdyb2xlJywgJ2J1dHRvbicpO1xuICB9XG5cbiAgdXBkYXRlKCkge1xuICAgIGxldCBtZW51ID0gdGhpcy5jcmVhdGVNZW51KCk7XG5cbiAgICBpZiAodGhpcy5tZW51KSB7XG4gICAgICB0aGlzLnJlbW92ZUNoaWxkKHRoaXMubWVudSk7XG4gICAgfVxuXG4gICAgdGhpcy5tZW51ID0gbWVudTtcbiAgICB0aGlzLmFkZENoaWxkKG1lbnUpO1xuXG4gICAgLyoqXG4gICAgICogVHJhY2sgdGhlIHN0YXRlIG9mIHRoZSBtZW51IGJ1dHRvblxuICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5idXR0b25QcmVzc2VkXyA9IGZhbHNlO1xuXG4gICAgaWYgKHRoaXMuaXRlbXMgJiYgdGhpcy5pdGVtcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5pdGVtcyAmJiB0aGlzLml0ZW1zLmxlbmd0aCA+IDEpIHtcbiAgICAgIHRoaXMuc2hvdygpO1xuICAgIH1cbiAgfVxuXG4gIGNyZWF0ZU1lbnUoKSB7XG4gICAgdmFyIG1lbnUgPSBuZXcgTWVudSh0aGlzLnBsYXllcl8pO1xuXG4gICAgLy8gQWRkIGEgdGl0bGUgbGlzdCBpdGVtIHRvIHRoZSB0b3BcbiAgICBpZiAodGhpcy5vcHRpb25zKCkudGl0bGUpIHtcbiAgICAgIG1lbnUuY29udGVudEVsKCkuYXBwZW5kQ2hpbGQoTGliLmNyZWF0ZUVsKCdsaScsIHtcbiAgICAgICAgY2xhc3NOYW1lOiAndmpzLW1lbnUtdGl0bGUnLFxuICAgICAgICBpbm5lckhUTUw6IExpYi5jYXBpdGFsaXplKHRoaXMub3B0aW9ucygpLnRpdGxlKSxcbiAgICAgICAgdGFiaW5kZXg6IC0xXG4gICAgICB9KSk7XG4gICAgfVxuXG4gICAgdGhpcy5pdGVtcyA9IHRoaXNbJ2NyZWF0ZUl0ZW1zJ10oKTtcblxuICAgIGlmICh0aGlzLml0ZW1zKSB7XG4gICAgICAvLyBBZGQgbWVudSBpdGVtcyB0byB0aGUgbWVudVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLml0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG1lbnUuYWRkSXRlbSh0aGlzLml0ZW1zW2ldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbWVudTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIGxpc3Qgb2YgbWVudSBpdGVtcy4gU3BlY2lmaWMgdG8gZWFjaCBzdWJjbGFzcy5cbiAgICovXG4gIGNyZWF0ZUl0ZW1zKCl7fVxuXG4gIC8qKiBAaW5oZXJpdERvYyAqL1xuICBidWlsZENTU0NsYXNzKCkge1xuICAgIHJldHVybiBgJHt0aGlzLmNsYXNzTmFtZX0gdmpzLW1lbnUtYnV0dG9uICR7c3VwZXIuYnVpbGRDU1NDbGFzcygpfWA7XG4gIH1cblxuICAvLyBGb2N1cyAtIEFkZCBrZXlib2FyZCBmdW5jdGlvbmFsaXR5IHRvIGVsZW1lbnRcbiAgLy8gVGhpcyBmdW5jdGlvbiBpcyBub3QgbmVlZGVkIGFueW1vcmUuIEluc3RlYWQsIHRoZSBrZXlib2FyZCBmdW5jdGlvbmFsaXR5IGlzIGhhbmRsZWQgYnlcbiAgLy8gdHJlYXRpbmcgdGhlIGJ1dHRvbiBhcyB0cmlnZ2VyaW5nIGEgc3VibWVudS4gV2hlbiB0aGUgYnV0dG9uIGlzIHByZXNzZWQsIHRoZSBzdWJtZW51XG4gIC8vIGFwcGVhcnMuIFByZXNzaW5nIHRoZSBidXR0b24gYWdhaW4gbWFrZXMgdGhlIHN1Ym1lbnUgZGlzYXBwZWFyLlxuICBoYW5kbGVGb2N1cygpIHt9XG5cbiAgLy8gQ2FuJ3QgdHVybiBvZmYgbGlzdCBkaXNwbGF5IHRoYXQgd2UgdHVybmVkIG9uIHdpdGggZm9jdXMsIGJlY2F1c2UgbGlzdCB3b3VsZCBnbyBhd2F5LlxuICBoYW5kbGVCbHVyKCkge31cblxuICBoYW5kbGVDbGljaygpIHtcbiAgICAvLyBXaGVuIHlvdSBjbGljayB0aGUgYnV0dG9uIGl0IGFkZHMgZm9jdXMsIHdoaWNoIHdpbGwgc2hvdyB0aGUgbWVudSBpbmRlZmluaXRlbHkuXG4gICAgLy8gU28gd2UnbGwgcmVtb3ZlIGZvY3VzIHdoZW4gdGhlIG1vdXNlIGxlYXZlcyB0aGUgYnV0dG9uLlxuICAgIC8vIEZvY3VzIGlzIG5lZWRlZCBmb3IgdGFiIG5hdmlnYXRpb24uXG4gICAgdGhpcy5vbmUoJ21vdXNlb3V0JywgTGliLmJpbmQodGhpcywgZnVuY3Rpb24oKXtcbiAgICAgIHRoaXMubWVudS51bmxvY2tTaG93aW5nKCk7XG4gICAgICB0aGlzLmVsXy5ibHVyKCk7XG4gICAgfSkpO1xuICAgIGlmICh0aGlzLmJ1dHRvblByZXNzZWRfKXtcbiAgICAgIHRoaXMudW5wcmVzc0J1dHRvbigpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnByZXNzQnV0dG9uKCk7XG4gICAgfVxuICB9XG5cbiAgaGFuZGxlS2V5UHJlc3MoZXZlbnQpIHtcblxuICAgIC8vIENoZWNrIGZvciBzcGFjZSBiYXIgKDMyKSBvciBlbnRlciAoMTMpIGtleXNcbiAgICBpZiAoZXZlbnQud2hpY2ggPT09IDMyIHx8IGV2ZW50LndoaWNoID09PSAxMykge1xuICAgICAgaWYgKHRoaXMuYnV0dG9uUHJlc3NlZF8pe1xuICAgICAgICB0aGlzLnVucHJlc3NCdXR0b24oKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucHJlc3NCdXR0b24oKTtcbiAgICAgIH1cbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgLy8gQ2hlY2sgZm9yIGVzY2FwZSAoMjcpIGtleVxuICAgIH0gZWxzZSBpZiAoZXZlbnQud2hpY2ggPT09IDI3KXtcbiAgICAgIGlmICh0aGlzLmJ1dHRvblByZXNzZWRfKXtcbiAgICAgICAgdGhpcy51bnByZXNzQnV0dG9uKCk7XG4gICAgICB9XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfVxuXG4gIHByZXNzQnV0dG9uKCkge1xuICAgIHRoaXMuYnV0dG9uUHJlc3NlZF8gPSB0cnVlO1xuICAgIHRoaXMubWVudS5sb2NrU2hvd2luZygpO1xuICAgIHRoaXMuZWxfLnNldEF0dHJpYnV0ZSgnYXJpYS1wcmVzc2VkJywgdHJ1ZSk7XG4gICAgaWYgKHRoaXMuaXRlbXMgJiYgdGhpcy5pdGVtcy5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLml0ZW1zWzBdLmVsKCkuZm9jdXMoKTsgLy8gc2V0IHRoZSBmb2N1cyB0byB0aGUgdGl0bGUgb2YgdGhlIHN1Ym1lbnVcbiAgICB9XG4gIH1cblxuICB1bnByZXNzQnV0dG9uKCkge1xuICAgIHRoaXMuYnV0dG9uUHJlc3NlZF8gPSBmYWxzZTtcbiAgICB0aGlzLm1lbnUudW5sb2NrU2hvd2luZygpO1xuICAgIHRoaXMuZWxfLnNldEF0dHJpYnV0ZSgnYXJpYS1wcmVzc2VkJywgZmFsc2UpO1xuICB9XG59XG5cbkJ1dHRvbi5yZWdpc3RlckNvbXBvbmVudCgnTWVudUJ1dHRvbicsIE1lbnVCdXR0b24pO1xuZXhwb3J0IGRlZmF1bHQgTWVudUJ1dHRvbjtcbiIsImltcG9ydCBCdXR0b24gZnJvbSAnLi4vYnV0dG9uLmpzJztcbmltcG9ydCAqIGFzIExpYiBmcm9tICcuLi9saWIuanMnO1xuXG4vKipcbiAqIFRoZSBjb21wb25lbnQgZm9yIGEgbWVudSBpdGVtLiBgPGxpPmBcbiAqXG4gKiBAcGFyYW0ge1BsYXllcnxPYmplY3R9IHBsYXllclxuICogQHBhcmFtIHtPYmplY3Q9fSBvcHRpb25zXG4gKiBAY2xhc3NcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5jbGFzcyBNZW51SXRlbSBleHRlbmRzIEJ1dHRvbiB7XG5cbiAgY29uc3RydWN0b3IocGxheWVyLCBvcHRpb25zKSB7XG4gICAgc3VwZXIocGxheWVyLCBvcHRpb25zKTtcbiAgICB0aGlzLnNlbGVjdGVkKG9wdGlvbnNbJ3NlbGVjdGVkJ10pO1xuICB9XG5cbiAgLyoqIEBpbmhlcml0RG9jICovXG4gIGNyZWF0ZUVsKHR5cGUsIHByb3BzKSB7XG4gICAgcmV0dXJuIHN1cGVyLmNyZWF0ZUVsKCdsaScsIExpYi5vYmoubWVyZ2Uoe1xuICAgICAgY2xhc3NOYW1lOiAndmpzLW1lbnUtaXRlbScsXG4gICAgICBpbm5lckhUTUw6IHRoaXMubG9jYWxpemUodGhpcy5vcHRpb25zX1snbGFiZWwnXSlcbiAgICB9LCBwcm9wcykpO1xuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZSBhIGNsaWNrIG9uIHRoZSBtZW51IGl0ZW0sIGFuZCBzZXQgaXQgdG8gc2VsZWN0ZWRcbiAgICovXG4gIGhhbmRsZUNsaWNrKCkge1xuICAgIHRoaXMuc2VsZWN0ZWQodHJ1ZSk7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoaXMgbWVudSBpdGVtIGFzIHNlbGVjdGVkIG9yIG5vdFxuICAgKiBAcGFyYW0gIHtCb29sZWFufSBzZWxlY3RlZFxuICAgKi9cbiAgc2VsZWN0ZWQoc2VsZWN0ZWQpIHtcbiAgICBpZiAoc2VsZWN0ZWQpIHtcbiAgICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy1zZWxlY3RlZCcpO1xuICAgICAgdGhpcy5lbF8uc2V0QXR0cmlidXRlKCdhcmlhLXNlbGVjdGVkJyx0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZW1vdmVDbGFzcygndmpzLXNlbGVjdGVkJyk7XG4gICAgICB0aGlzLmVsXy5zZXRBdHRyaWJ1dGUoJ2FyaWEtc2VsZWN0ZWQnLGZhbHNlKTtcbiAgICB9XG4gIH1cblxufVxuXG5CdXR0b24ucmVnaXN0ZXJDb21wb25lbnQoJ01lbnVJdGVtJywgTWVudUl0ZW0pO1xuZXhwb3J0IGRlZmF1bHQgTWVudUl0ZW07XG4iLCJpbXBvcnQgQ29tcG9uZW50IGZyb20gJy4uL2NvbXBvbmVudC5qcyc7XG5pbXBvcnQgKiBhcyBMaWIgZnJvbSAnLi4vbGliLmpzJztcbmltcG9ydCAqIGFzIEV2ZW50cyBmcm9tICcuLi9ldmVudHMuanMnO1xuXG4vKiBNZW51XG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLyoqXG4gKiBUaGUgTWVudSBjb21wb25lbnQgaXMgdXNlZCB0byBidWlsZCBwb3AgdXAgbWVudXMsIGluY2x1ZGluZyBzdWJ0aXRsZSBhbmRcbiAqIGNhcHRpb25zIHNlbGVjdGlvbiBtZW51cy5cbiAqXG4gKiBAcGFyYW0ge1BsYXllcnxPYmplY3R9IHBsYXllclxuICogQHBhcmFtIHtPYmplY3Q9fSBvcHRpb25zXG4gKiBAY2xhc3NcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5jbGFzcyBNZW51IGV4dGVuZHMgQ29tcG9uZW50IHtcblxuICAvKipcbiAgICogQWRkIGEgbWVudSBpdGVtIHRvIHRoZSBtZW51XG4gICAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gY29tcG9uZW50IENvbXBvbmVudCBvciBjb21wb25lbnQgdHlwZSB0byBhZGRcbiAgICovXG4gIGFkZEl0ZW0oY29tcG9uZW50KSB7XG4gICAgdGhpcy5hZGRDaGlsZChjb21wb25lbnQpO1xuICAgIGNvbXBvbmVudC5vbignY2xpY2snLCBMaWIuYmluZCh0aGlzLCBmdW5jdGlvbigpe1xuICAgICAgdGhpcy51bmxvY2tTaG93aW5nKCk7XG4gICAgfSkpO1xuICB9XG5cbiAgY3JlYXRlRWwoKSB7XG4gICAgbGV0IGNvbnRlbnRFbFR5cGUgPSB0aGlzLm9wdGlvbnMoKS5jb250ZW50RWxUeXBlIHx8ICd1bCc7XG4gICAgdGhpcy5jb250ZW50RWxfID0gTGliLmNyZWF0ZUVsKGNvbnRlbnRFbFR5cGUsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3Zqcy1tZW51LWNvbnRlbnQnXG4gICAgfSk7XG4gICAgdmFyIGVsID0gc3VwZXIuY3JlYXRlRWwoJ2RpdicsIHtcbiAgICAgIGFwcGVuZDogdGhpcy5jb250ZW50RWxfLFxuICAgICAgY2xhc3NOYW1lOiAndmpzLW1lbnUnXG4gICAgfSk7XG4gICAgZWwuYXBwZW5kQ2hpbGQodGhpcy5jb250ZW50RWxfKTtcblxuICAgIC8vIFByZXZlbnQgY2xpY2tzIGZyb20gYnViYmxpbmcgdXAuIE5lZWRlZCBmb3IgTWVudSBCdXR0b25zLFxuICAgIC8vIHdoZXJlIGEgY2xpY2sgb24gdGhlIHBhcmVudCBpcyBzaWduaWZpY2FudFxuICAgIEV2ZW50cy5vbihlbCwgJ2NsaWNrJywgZnVuY3Rpb24oZXZlbnQpe1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGVsO1xuICB9XG59XG5cbkNvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudCgnTWVudScsIE1lbnUpO1xuZXhwb3J0IGRlZmF1bHQgTWVudTtcbiIsImltcG9ydCBkb2N1bWVudCBmcm9tICdnbG9iYWwvZG9jdW1lbnQnO1xuaW1wb3J0IHdpbmRvdyBmcm9tICdnbG9iYWwvd2luZG93JztcbmxldCBuYXZpZ2F0b3IgPSB3aW5kb3cubmF2aWdhdG9yO1xuXG4vKipcbiAqIEdsb2JhbCBQbGF5ZXIgaW5zdGFuY2Ugb3B0aW9ucywgc3VyZmFjZWQgZnJvbSBQbGF5ZXIucHJvdG90eXBlLm9wdGlvbnNfXG4gKiBvcHRpb25zID0gUGxheWVyLnByb3RvdHlwZS5vcHRpb25zX1xuICogQWxsIG9wdGlvbnMgc2hvdWxkIHVzZSBzdHJpbmcga2V5cyBzbyB0aGV5IGF2b2lkXG4gKiByZW5hbWluZyBieSBjbG9zdXJlIGNvbXBpbGVyXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5leHBvcnQgZGVmYXVsdCB7XG4gIC8vIERlZmF1bHQgb3JkZXIgb2YgZmFsbGJhY2sgdGVjaG5vbG9neVxuICAndGVjaE9yZGVyJzogWydodG1sNScsJ2ZsYXNoJ10sXG4gIC8vIHRlY2hPcmRlcjogWydmbGFzaCcsJ2h0bWw1J10sXG5cbiAgJ2h0bWw1Jzoge30sXG4gICdmbGFzaCc6IHt9LFxuXG4gIC8vIGRlZmF1bHRWb2x1bWU6IDAuODUsXG4gICdkZWZhdWx0Vm9sdW1lJzogMC4wMCwgLy8gVGhlIGZyZWFraW4gc2VhZ3VscyBhcmUgZHJpdmluZyBtZSBjcmF6eSFcblxuICAvLyBkZWZhdWx0IGluYWN0aXZpdHkgdGltZW91dFxuICAnaW5hY3Rpdml0eVRpbWVvdXQnOiAyMDAwLFxuXG4gIC8vIGRlZmF1bHQgcGxheWJhY2sgcmF0ZXNcbiAgJ3BsYXliYWNrUmF0ZXMnOiBbXSxcbiAgLy8gQWRkIHBsYXliYWNrIHJhdGUgc2VsZWN0aW9uIGJ5IGFkZGluZyByYXRlc1xuICAvLyAncGxheWJhY2tSYXRlcyc6IFswLjUsIDEsIDEuNSwgMl0sXG5cbiAgLy8gSW5jbHVkZWQgY29udHJvbCBzZXRzXG4gICdjaGlsZHJlbic6IHtcbiAgICAnbWVkaWFMb2FkZXInOiB7fSxcbiAgICAncG9zdGVySW1hZ2UnOiB7fSxcbiAgICAndGV4dFRyYWNrRGlzcGxheSc6IHt9LFxuICAgICdsb2FkaW5nU3Bpbm5lcic6IHt9LFxuICAgICdiaWdQbGF5QnV0dG9uJzoge30sXG4gICAgJ2NvbnRyb2xCYXInOiB7fSxcbiAgICAnZXJyb3JEaXNwbGF5Jzoge30sXG4gICAgJ3RleHRUcmFja1NldHRpbmdzJzoge31cbiAgfSxcblxuICAnbGFuZ3VhZ2UnOiBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaHRtbCcpWzBdLmdldEF0dHJpYnV0ZSgnbGFuZycpIHx8IG5hdmlnYXRvci5sYW5ndWFnZXMgJiYgbmF2aWdhdG9yLmxhbmd1YWdlc1swXSB8fCBuYXZpZ2F0b3IudXNlckxhbmd1YWdlIHx8IG5hdmlnYXRvci5sYW5ndWFnZSB8fCAnZW4nLFxuXG4gIC8vIGxvY2FsZXMgYW5kIHRoZWlyIGxhbmd1YWdlIHRyYW5zbGF0aW9uc1xuICAnbGFuZ3VhZ2VzJzoge30sXG5cbiAgLy8gRGVmYXVsdCBtZXNzYWdlIHRvIHNob3cgd2hlbiBhIHZpZGVvIGNhbm5vdCBiZSBwbGF5ZWQuXG4gICdub3RTdXBwb3J0ZWRNZXNzYWdlJzogJ05vIGNvbXBhdGlibGUgc291cmNlIHdhcyBmb3VuZCBmb3IgdGhpcyB2aWRlby4nXG59O1xuIiwiaW1wb3J0IENvbXBvbmVudCBmcm9tICcuL2NvbXBvbmVudC5qcyc7XG5pbXBvcnQgKiBhcyBMaWIgZnJvbSAnLi9saWIuanMnO1xuaW1wb3J0ICogYXMgRXZlbnRzIGZyb20gJy4vZXZlbnRzLmpzJztcbmltcG9ydCBGdWxsc2NyZWVuQXBpIGZyb20gJy4vZnVsbHNjcmVlbi1hcGkuanMnO1xuaW1wb3J0IE1lZGlhRXJyb3IgZnJvbSAnLi9tZWRpYS1lcnJvci5qcyc7XG5pbXBvcnQgT3B0aW9ucyBmcm9tICcuL29wdGlvbnMuanMnO1xuaW1wb3J0IHNhZmVQYXJzZVR1cGxlIGZyb20gJ3NhZmUtanNvbi1wYXJzZS90dXBsZSc7XG5pbXBvcnQgd2luZG93IGZyb20gJ2dsb2JhbC93aW5kb3cnO1xuaW1wb3J0IGRvY3VtZW50IGZyb20gJ2dsb2JhbC9kb2N1bWVudCc7XG5cbi8vIEluY2x1ZGUgcmVxdWlyZWQgY2hpbGQgY29tcG9uZW50c1xuaW1wb3J0IE1lZGlhTG9hZGVyIGZyb20gJy4vdGVjaC9sb2FkZXIuanMnO1xuaW1wb3J0IFBvc3RlciBmcm9tICcuL3Bvc3Rlci1pbWFnZS5qcyc7XG5pbXBvcnQgVGV4dFRyYWNrRGlzcGxheSBmcm9tICcuL3RyYWNrcy90ZXh0LXRyYWNrLWRpc3BsYXkuanMnO1xuaW1wb3J0IExvYWRpbmdTcGlubmVyIGZyb20gJy4vbG9hZGluZy1zcGlubmVyLmpzJztcbmltcG9ydCBCaWdQbGF5QnV0dG9uIGZyb20gJy4vYmlnLXBsYXktYnV0dG9uLmpzJztcbmltcG9ydCBjb250cm9sQmFyIGZyb20gJy4vY29udHJvbC1iYXIvY29udHJvbC1iYXIuanMnO1xuaW1wb3J0IEVycm9yRGlzcGxheSBmcm9tICcuL2Vycm9yLWRpc3BsYXkuanMnO1xuaW1wb3J0IFRleHRUcmFja1NldHRpbmdzIGZyb20gJy4vdHJhY2tzL3RleHQtdHJhY2stc2V0dGluZ3MuanMnO1xuLy8gUmVxdWlyZSBodG1sNSBmb3IgZGlzcG9zaW5nIHRoZSBvcmlnaW5hbCB2aWRlbyB0YWdcbmltcG9ydCBIdG1sNSBmcm9tICcuL3RlY2gvaHRtbDUuanMnO1xuXG4vKipcbiAqIEFuIGluc3RhbmNlIG9mIHRoZSBgUGxheWVyYCBjbGFzcyBpcyBjcmVhdGVkIHdoZW4gYW55IG9mIHRoZSBWaWRlby5qcyBzZXR1cCBtZXRob2RzIGFyZSB1c2VkIHRvIGluaXRpYWxpemUgYSB2aWRlby5cbiAqXG4gKiBgYGBqc1xuICogdmFyIG15UGxheWVyID0gdmlkZW9qcygnZXhhbXBsZV92aWRlb18xJyk7XG4gKiBgYGBcbiAqXG4gKiBJbiB0aGUgZm9sbG93aW5nIGV4YW1wbGUsIHRoZSBgZGF0YS1zZXR1cGAgYXR0cmlidXRlIHRlbGxzIHRoZSBWaWRlby5qcyBsaWJyYXJ5IHRvIGNyZWF0ZSBhIHBsYXllciBpbnN0YW5jZSB3aGVuIHRoZSBsaWJyYXJ5IGlzIHJlYWR5LlxuICpcbiAqIGBgYGh0bWxcbiAqIDx2aWRlbyBpZD1cImV4YW1wbGVfdmlkZW9fMVwiIGRhdGEtc2V0dXA9J3t9JyBjb250cm9scz5cbiAqICAgPHNvdXJjZSBzcmM9XCJteS1zb3VyY2UubXA0XCIgdHlwZT1cInZpZGVvL21wNFwiPlxuICogPC92aWRlbz5cbiAqIGBgYFxuICpcbiAqIEFmdGVyIGFuIGluc3RhbmNlIGhhcyBiZWVuIGNyZWF0ZWQgaXQgY2FuIGJlIGFjY2Vzc2VkIGdsb2JhbGx5IHVzaW5nIGBWaWRlbygnZXhhbXBsZV92aWRlb18xJylgLlxuICpcbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgQ29tcG9uZW50XG4gKi9cbmNsYXNzIFBsYXllciBleHRlbmRzIENvbXBvbmVudCB7XG5cbiAgLyoqXG4gICAqIHBsYXllcidzIGNvbnN0cnVjdG9yIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBjb25zdHJ1Y3RzXG4gICAqIEBtZXRob2QgaW5pdFxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IHRhZyAgICAgICAgVGhlIG9yaWdpbmFsIHZpZGVvIHRhZyB1c2VkIGZvciBjb25maWd1cmluZyBvcHRpb25zXG4gICAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0aW9ucyAgICBQbGF5ZXIgb3B0aW9uc1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9uPX0gcmVhZHkgICAgUmVhZHkgY2FsbGJhY2sgZnVuY3Rpb25cbiAgICovXG4gIGNvbnN0cnVjdG9yKHRhZywgb3B0aW9ucywgcmVhZHkpe1xuICAgIC8vIE1ha2Ugc3VyZSB0YWcgSUQgZXhpc3RzXG4gICAgdGFnLmlkID0gdGFnLmlkIHx8IGB2anNfdmlkZW9fJHtMaWIuZ3VpZCsrfWA7XG5cbiAgICAvLyBTZXQgT3B0aW9uc1xuICAgIC8vIFRoZSBvcHRpb25zIGFyZ3VtZW50IG92ZXJyaWRlcyBvcHRpb25zIHNldCBpbiB0aGUgdmlkZW8gdGFnXG4gICAgLy8gd2hpY2ggb3ZlcnJpZGVzIGdsb2JhbGx5IHNldCBvcHRpb25zLlxuICAgIC8vIFRoaXMgbGF0dGVyIHBhcnQgY29pbmNpZGVzIHdpdGggdGhlIGxvYWQgb3JkZXJcbiAgICAvLyAodGFnIG11c3QgZXhpc3QgYmVmb3JlIFBsYXllcilcbiAgICBvcHRpb25zID0gTGliLm9iai5tZXJnZShQbGF5ZXIuZ2V0VGFnU2V0dGluZ3ModGFnKSwgb3B0aW9ucyk7XG5cbiAgICAvLyBEZWxheSB0aGUgaW5pdGlhbGl6YXRpb24gb2YgY2hpbGRyZW4gYmVjYXVzZSB3ZSBuZWVkIHRvIHNldCB1cFxuICAgIC8vIHBsYXllciBwcm9wZXJ0aWVzIGZpcnN0LCBhbmQgY2FuJ3QgdXNlIGB0aGlzYCBiZWZvcmUgYHN1cGVyKClgXG4gICAgb3B0aW9ucy5pbml0Q2hpbGRyZW4gPSBmYWxzZTtcblxuICAgIC8vIFNhbWUgd2l0aCBjcmVhdGluZyB0aGUgZWxlbWVudFxuICAgIG9wdGlvbnMuY3JlYXRlRWwgPSBmYWxzZTtcblxuICAgIC8vIHdlIGRvbid0IHdhbnQgdGhlIHBsYXllciB0byByZXBvcnQgdG91Y2ggYWN0aXZpdHkgb24gaXRzZWxmXG4gICAgLy8gc2VlIGVuYWJsZVRvdWNoQWN0aXZpdHkgaW4gQ29tcG9uZW50XG4gICAgb3B0aW9ucy5yZXBvcnRUb3VjaEFjdGl2aXR5ID0gZmFsc2U7XG5cbiAgICAvLyBSdW4gYmFzZSBjb21wb25lbnQgaW5pdGlhbGl6aW5nIHdpdGggbmV3IG9wdGlvbnNcbiAgICBzdXBlcihudWxsLCBvcHRpb25zLCByZWFkeSk7XG5cblxuICAgIC8vIGlmIHRoZSBnbG9iYWwgb3B0aW9uIG9iamVjdCB3YXMgYWNjaWRlbnRhbGx5IGJsb3duIGF3YXkgYnlcbiAgICAvLyBzb21lb25lLCBiYWlsIGVhcmx5IHdpdGggYW4gaW5mb3JtYXRpdmUgZXJyb3JcbiAgICBpZiAoIXRoaXMub3B0aW9uc18gfHxcbiAgICAgICAgIXRoaXMub3B0aW9uc18udGVjaE9yZGVyIHx8XG4gICAgICAgICF0aGlzLm9wdGlvbnNfLnRlY2hPcmRlci5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm8gdGVjaE9yZGVyIHNwZWNpZmllZC4gRGlkIHlvdSBvdmVyd3JpdGUgJyArXG4gICAgICAgICAgICAgICAgICAgICAgJ3ZpZGVvanMub3B0aW9ucyBpbnN0ZWFkIG9mIGp1c3QgY2hhbmdpbmcgdGhlICcgK1xuICAgICAgICAgICAgICAgICAgICAgICdwcm9wZXJ0aWVzIHlvdSB3YW50IHRvIG92ZXJyaWRlPycpO1xuICAgIH1cblxuICAgIHRoaXMudGFnID0gdGFnOyAvLyBTdG9yZSB0aGUgb3JpZ2luYWwgdGFnIHVzZWQgdG8gc2V0IG9wdGlvbnNcblxuICAgIC8vIFN0b3JlIHRoZSB0YWcgYXR0cmlidXRlcyB1c2VkIHRvIHJlc3RvcmUgaHRtbDUgZWxlbWVudFxuICAgIHRoaXMudGFnQXR0cmlidXRlcyA9IHRhZyAmJiBMaWIuZ2V0RWxlbWVudEF0dHJpYnV0ZXModGFnKTtcblxuICAgIC8vIFVwZGF0ZSBDdXJyZW50IExhbmd1YWdlXG4gICAgdGhpcy5sYW5ndWFnZV8gPSBvcHRpb25zWydsYW5ndWFnZSddIHx8IE9wdGlvbnNbJ2xhbmd1YWdlJ107XG5cbiAgICAvLyBVcGRhdGUgU3VwcG9ydGVkIExhbmd1YWdlc1xuICAgIHRoaXMubGFuZ3VhZ2VzXyA9IG9wdGlvbnNbJ2xhbmd1YWdlcyddIHx8IE9wdGlvbnNbJ2xhbmd1YWdlcyddO1xuXG4gICAgLy8gQ2FjaGUgZm9yIHZpZGVvIHByb3BlcnR5IHZhbHVlcy5cbiAgICB0aGlzLmNhY2hlXyA9IHt9O1xuXG4gICAgLy8gU2V0IHBvc3RlclxuICAgIHRoaXMucG9zdGVyXyA9IG9wdGlvbnNbJ3Bvc3RlciddIHx8ICcnO1xuXG4gICAgLy8gU2V0IGNvbnRyb2xzXG4gICAgdGhpcy5jb250cm9sc18gPSAhIW9wdGlvbnNbJ2NvbnRyb2xzJ107XG4gICAgLy8gT3JpZ2luYWwgdGFnIHNldHRpbmdzIHN0b3JlZCBpbiBvcHRpb25zXG4gICAgLy8gbm93IHJlbW92ZSBpbW1lZGlhdGVseSBzbyBuYXRpdmUgY29udHJvbHMgZG9uJ3QgZmxhc2guXG4gICAgLy8gTWF5IGJlIHR1cm5lZCBiYWNrIG9uIGJ5IEhUTUw1IHRlY2ggaWYgbmF0aXZlQ29udHJvbHNGb3JUb3VjaCBpcyB0cnVlXG4gICAgdGFnLmNvbnRyb2xzID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAqIFN0b3JlIHRoZSBpbnRlcm5hbCBzdGF0ZSBvZiBzY3J1YmJpbmdcbiAgICAqIEBwcml2YXRlXG4gICAgKiBAcmV0dXJuIHtCb29sZWFufSBUcnVlIGlmIHRoZSB1c2VyIGlzIHNjcnViYmluZ1xuICAgICovXG4gICAgdGhpcy5zY3J1YmJpbmdfID0gZmFsc2U7XG5cbiAgICB0aGlzLmVsXyA9IHRoaXMuY3JlYXRlRWwoKTtcblxuICAgIC8vIExvYWQgcGx1Z2luc1xuICAgIGlmIChvcHRpb25zWydwbHVnaW5zJ10pIHtcbiAgICAgIExpYi5vYmouZWFjaChvcHRpb25zWydwbHVnaW5zJ10sIGZ1bmN0aW9uKGtleSwgdmFsKXtcbiAgICAgICAgdGhpc1trZXldKHZhbCk7XG4gICAgICB9LCB0aGlzKTtcbiAgICB9XG5cbiAgICB0aGlzLmluaXRDaGlsZHJlbigpO1xuXG4gICAgLy8gU2V0IGlzQXVkaW8gYmFzZWQgb24gd2hldGhlciBvciBub3QgYW4gYXVkaW8gdGFnIHdhcyB1c2VkXG4gICAgdGhpcy5pc0F1ZGlvKHRhZy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnYXVkaW8nKTtcblxuICAgIC8vIFVwZGF0ZSBjb250cm9scyBjbGFzc05hbWUuIENhbid0IGRvIHRoaXMgd2hlbiB0aGUgY29udHJvbHMgYXJlIGluaXRpYWxseVxuICAgIC8vIHNldCBiZWNhdXNlIHRoZSBlbGVtZW50IGRvZXNuJ3QgZXhpc3QgeWV0LlxuICAgIGlmICh0aGlzLmNvbnRyb2xzKCkpIHtcbiAgICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy1jb250cm9scy1lbmFibGVkJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy1jb250cm9scy1kaXNhYmxlZCcpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmlzQXVkaW8oKSkge1xuICAgICAgdGhpcy5hZGRDbGFzcygndmpzLWF1ZGlvJyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZmxleE5vdFN1cHBvcnRlZF8oKSkge1xuICAgICAgdGhpcy5hZGRDbGFzcygndmpzLW5vLWZsZXgnKTtcbiAgICB9XG5cbiAgICAvLyBUT0RPOiBNYWtlIHRoaXMgc21hcnRlci4gVG9nZ2xlIHVzZXIgc3RhdGUgYmV0d2VlbiB0b3VjaGluZy9tb3VzaW5nXG4gICAgLy8gdXNpbmcgZXZlbnRzLCBzaW5jZSBkZXZpY2VzIGNhbiBoYXZlIGJvdGggdG91Y2ggYW5kIG1vdXNlIGV2ZW50cy5cbiAgICAvLyBpZiAoTGliLlRPVUNIX0VOQUJMRUQpIHtcbiAgICAvLyAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy10b3VjaC1lbmFibGVkJyk7XG4gICAgLy8gfVxuXG4gICAgLy8gTWFrZSBwbGF5ZXIgZWFzaWx5IGZpbmRhYmxlIGJ5IElEXG4gICAgUGxheWVyLnBsYXllcnNbdGhpcy5pZF9dID0gdGhpcztcblxuICAgIC8vIFdoZW4gdGhlIHBsYXllciBpcyBmaXJzdCBpbml0aWFsaXplZCwgdHJpZ2dlciBhY3Rpdml0eSBzbyBjb21wb25lbnRzXG4gICAgLy8gbGlrZSB0aGUgY29udHJvbCBiYXIgc2hvdyB0aGVtc2VsdmVzIGlmIG5lZWRlZFxuICAgIHRoaXMudXNlckFjdGl2ZV8gPSB0cnVlO1xuICAgIHRoaXMucmVwb3J0VXNlckFjdGl2aXR5KCk7XG4gICAgdGhpcy5saXN0ZW5Gb3JVc2VyQWN0aXZpdHkoKTtcblxuICAgIHRoaXMub24oJ2Z1bGxzY3JlZW5jaGFuZ2UnLCB0aGlzLmhhbmRsZUZ1bGxzY3JlZW5DaGFuZ2UpO1xuICAgIHRoaXMub24oJ3N0YWdlY2xpY2snLCB0aGlzLmhhbmRsZVN0YWdlQ2xpY2spO1xuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIHRoZSB2aWRlbyBwbGF5ZXIgYW5kIGRvZXMgYW55IG5lY2Vzc2FyeSBjbGVhbnVwXG4gICAqXG4gICAqICAgICBteVBsYXllci5kaXNwb3NlKCk7XG4gICAqXG4gICAqIFRoaXMgaXMgZXNwZWNpYWxseSBoZWxwZnVsIGlmIHlvdSBhcmUgZHluYW1pY2FsbHkgYWRkaW5nIGFuZCByZW1vdmluZyB2aWRlb3NcbiAgICogdG8vZnJvbSB0aGUgRE9NLlxuICAgKi9cbiAgZGlzcG9zZSgpIHtcbiAgICB0aGlzLnRyaWdnZXIoJ2Rpc3Bvc2UnKTtcbiAgICAvLyBwcmV2ZW50IGRpc3Bvc2UgZnJvbSBiZWluZyBjYWxsZWQgdHdpY2VcbiAgICB0aGlzLm9mZignZGlzcG9zZScpO1xuXG4gICAgLy8gS2lsbCByZWZlcmVuY2UgdG8gdGhpcyBwbGF5ZXJcbiAgICBQbGF5ZXIucGxheWVyc1t0aGlzLmlkX10gPSBudWxsO1xuICAgIGlmICh0aGlzLnRhZyAmJiB0aGlzLnRhZ1sncGxheWVyJ10pIHsgdGhpcy50YWdbJ3BsYXllciddID0gbnVsbDsgfVxuICAgIGlmICh0aGlzLmVsXyAmJiB0aGlzLmVsX1sncGxheWVyJ10pIHsgdGhpcy5lbF9bJ3BsYXllciddID0gbnVsbDsgfVxuXG4gICAgaWYgKHRoaXMudGVjaCkgeyB0aGlzLnRlY2guZGlzcG9zZSgpOyB9XG5cbiAgICBzdXBlci5kaXNwb3NlKCk7XG4gIH1cblxuICBjcmVhdGVFbCgpIHtcbiAgICBsZXQgZWwgPSB0aGlzLmVsXyA9IHN1cGVyLmNyZWF0ZUVsKCdkaXYnKTtcbiAgICBsZXQgdGFnID0gdGhpcy50YWc7XG5cbiAgICAvLyBSZW1vdmUgd2lkdGgvaGVpZ2h0IGF0dHJzIGZyb20gdGFnIHNvIENTUyBjYW4gbWFrZSBpdCAxMDAlIHdpZHRoL2hlaWdodFxuICAgIHRhZy5yZW1vdmVBdHRyaWJ1dGUoJ3dpZHRoJyk7XG4gICAgdGFnLnJlbW92ZUF0dHJpYnV0ZSgnaGVpZ2h0Jyk7XG5cbiAgICAvLyBDb3B5IG92ZXIgYWxsIHRoZSBhdHRyaWJ1dGVzIGZyb20gdGhlIHRhZywgaW5jbHVkaW5nIElEIGFuZCBjbGFzc1xuICAgIC8vIElEIHdpbGwgbm93IHJlZmVyZW5jZSBwbGF5ZXIgYm94LCBub3QgdGhlIHZpZGVvIHRhZ1xuICAgIGNvbnN0IGF0dHJzID0gTGliLmdldEVsZW1lbnRBdHRyaWJ1dGVzKHRhZyk7XG4gICAgTGliLm9iai5lYWNoKGF0dHJzLCBmdW5jdGlvbihhdHRyKSB7XG4gICAgICAvLyB3b3JrYXJvdW5kIHNvIHdlIGRvbid0IHRvdGFsbHkgYnJlYWsgSUU3XG4gICAgICAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzM2NTM0NDQvY3NzLXN0eWxlcy1ub3QtYXBwbGllZC1vbi1keW5hbWljLWVsZW1lbnRzLWluLWludGVybmV0LWV4cGxvcmVyLTdcbiAgICAgIGlmIChhdHRyID09PSAnY2xhc3MnKSB7XG4gICAgICAgIGVsLmNsYXNzTmFtZSA9IGF0dHJzW2F0dHJdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWwuc2V0QXR0cmlidXRlKGF0dHIsIGF0dHJzW2F0dHJdKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIFVwZGF0ZSB0YWcgaWQvY2xhc3MgZm9yIHVzZSBhcyBIVE1MNSBwbGF5YmFjayB0ZWNoXG4gICAgLy8gTWlnaHQgdGhpbmsgd2Ugc2hvdWxkIGRvIHRoaXMgYWZ0ZXIgZW1iZWRkaW5nIGluIGNvbnRhaW5lciBzbyAudmpzLXRlY2ggY2xhc3NcbiAgICAvLyBkb2Vzbid0IGZsYXNoIDEwMCUgd2lkdGgvaGVpZ2h0LCBidXQgY2xhc3Mgb25seSBhcHBsaWVzIHdpdGggLnZpZGVvLWpzIHBhcmVudFxuICAgIHRhZy5pZCArPSAnX2h0bWw1X2FwaSc7XG4gICAgdGFnLmNsYXNzTmFtZSA9ICd2anMtdGVjaCc7XG5cbiAgICAvLyBNYWtlIHBsYXllciBmaW5kYWJsZSBvbiBlbGVtZW50c1xuICAgIHRhZ1sncGxheWVyJ10gPSBlbFsncGxheWVyJ10gPSB0aGlzO1xuICAgIC8vIERlZmF1bHQgc3RhdGUgb2YgdmlkZW8gaXMgcGF1c2VkXG4gICAgdGhpcy5hZGRDbGFzcygndmpzLXBhdXNlZCcpO1xuXG4gICAgLy8gQWRkIGEgc3R5bGUgZWxlbWVudCBpbiB0aGUgcGxheWVyIHRoYXQgd2UnbGwgdXNlIHRvIHNldCB0aGUgd2lkdGgvaGVpZ2h0XG4gICAgLy8gb2YgdGhlIHBsYXllciBpbiBhIHdheSB0aGF0J3Mgc3RpbGwgb3ZlcnJpZGVhYmxlIGJ5IENTUywganVzdCBsaWtlIHRoZVxuICAgIC8vIHZpZGVvIGVsZW1lbnRcbiAgICB0aGlzLnN0eWxlRWxfID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICBlbC5hcHBlbmRDaGlsZCh0aGlzLnN0eWxlRWxfKTtcblxuICAgIC8vIFBhc3MgaW4gdGhlIHdpZHRoL2hlaWdodC9hc3BlY3RSYXRpbyBvcHRpb25zIHdoaWNoIHdpbGwgdXBkYXRlIHRoZSBzdHlsZSBlbFxuICAgIHRoaXMud2lkdGgodGhpcy5vcHRpb25zX1snd2lkdGgnXSk7XG4gICAgdGhpcy5oZWlnaHQodGhpcy5vcHRpb25zX1snaGVpZ2h0J10pO1xuICAgIHRoaXMuZmx1aWQodGhpcy5vcHRpb25zX1snZmx1aWQnXSk7XG4gICAgdGhpcy5hc3BlY3RSYXRpbyh0aGlzLm9wdGlvbnNfWydhc3BlY3RSYXRpbyddKTtcblxuICAgIC8vIExpYi5pbnNlcnRGaXJzdCBzZWVtcyB0byBjYXVzZSB0aGUgbmV0d29ya1N0YXRlIHRvIGZsaWNrZXIgZnJvbSAzIHRvIDIsIHNvXG4gICAgLy8ga2VlcCB0cmFjayBvZiB0aGUgb3JpZ2luYWwgZm9yIGxhdGVyIHNvIHdlIGNhbiBrbm93IGlmIHRoZSBzb3VyY2Ugb3JpZ2luYWxseSBmYWlsZWRcbiAgICB0YWcuaW5pdE5ldHdvcmtTdGF0ZV8gPSB0YWcubmV0d29ya1N0YXRlO1xuXG4gICAgLy8gV3JhcCB2aWRlbyB0YWcgaW4gZGl2IChlbC9ib3gpIGNvbnRhaW5lclxuICAgIGlmICh0YWcucGFyZW50Tm9kZSkge1xuICAgICAgdGFnLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGVsLCB0YWcpO1xuICAgIH1cbiAgICBMaWIuaW5zZXJ0Rmlyc3QodGFnLCBlbCk7IC8vIEJyZWFrcyBpUGhvbmUsIGZpeGVkIGluIEhUTUw1IHNldHVwLlxuXG4gICAgdGhpcy5lbF8gPSBlbDtcblxuICAgIHJldHVybiBlbDtcbiAgfVxuXG4gIHdpZHRoKHZhbHVlKSB7XG4gICAgcmV0dXJuIHRoaXMuZGltZW5zaW9uKCd3aWR0aCcsIHZhbHVlKTtcbiAgfVxuXG4gIGhlaWdodCh2YWx1ZSkge1xuICAgIHJldHVybiB0aGlzLmRpbWVuc2lvbignaGVpZ2h0JywgdmFsdWUpO1xuICB9XG5cbiAgZGltZW5zaW9uKGRpbWVuc2lvbiwgdmFsdWUpIHtcbiAgICBsZXQgcHJpdkRpbWVuc2lvbiA9IGRpbWVuc2lvbiArICdfJztcblxuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdGhpc1twcml2RGltZW5zaW9uXSB8fCAwO1xuICAgIH1cblxuICAgIGlmICh2YWx1ZSA9PT0gJycpIHtcbiAgICAgIC8vIElmIGFuIGVtcHR5IHN0cmluZyBpcyBnaXZlbiwgcmVzZXQgdGhlIGRpbWVuc2lvbiB0byBiZSBhdXRvbWF0aWNcbiAgICAgIHRoaXNbcHJpdkRpbWVuc2lvbl0gPSB1bmRlZmluZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBwYXJzZWRWYWwgPSBwYXJzZUZsb2F0KHZhbHVlKTtcblxuICAgICAgaWYgKGlzTmFOKHBhcnNlZFZhbCkpIHtcbiAgICAgICAgTGliLmxvZy5lcnJvcihgSW1wcm9wZXIgdmFsdWUgXCIke3ZhbHVlfVwiIHN1cHBsaWVkIGZvciBmb3IgJHtkaW1lbnNpb259YCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICB0aGlzW3ByaXZEaW1lbnNpb25dID0gcGFyc2VkVmFsO1xuICAgIH1cblxuICAgIHRoaXMudXBkYXRlU3R5bGVFbF8oKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGZsdWlkKGJvb2wpIHtcbiAgICBpZiAoYm9vbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gISF0aGlzLmZsdWlkXztcbiAgICB9XG5cbiAgICB0aGlzLmZsdWlkXyA9ICEhYm9vbDtcblxuICAgIGlmIChib29sKSB7XG4gICAgICB0aGlzLmFkZENsYXNzKCd2anMtZmx1aWQnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZW1vdmVDbGFzcygndmpzLWZsdWlkJyk7XG4gICAgfVxuICB9XG5cbiAgYXNwZWN0UmF0aW8ocmF0aW8pIHtcbiAgICBpZiAocmF0aW8gPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHRoaXMuYXNwZWN0UmF0aW9fO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGZvciB3aWR0aDpoZWlnaHQgZm9ybWF0XG4gICAgaWYgKCEvXlxcZCtcXDpcXGQrJC8udGVzdChyYXRpbykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW1wcm9wZXIgdmFsdWUgc3VwbGllZCBmb3IgYXNwZWN0IHJhdGlvLiBUaGUgZm9ybWF0IHNob3VsZCBiZSB3aWR0aDpoZWlnaHQsIGZvciBleGFtcGxlIDE2OjkuJyk7XG4gICAgfVxuICAgIHRoaXMuYXNwZWN0UmF0aW9fID0gcmF0aW87XG5cbiAgICAvLyBXZSdyZSBhc3N1bWluZyBpZiB5b3Ugc2V0IGFuIGFzcGVjdCByYXRpbyB5b3Ugd2FudCBmbHVpZCBtb2RlLFxuICAgIC8vIGJlY2F1c2UgaW4gZml4ZWQgbW9kZSB5b3UgY291bGQgY2FsY3VsYXRlIHdpZHRoIGFuZCBoZWlnaHQgeW91cnNlbGYuXG4gICAgdGhpcy5mbHVpZCh0cnVlKTtcblxuICAgIHRoaXMudXBkYXRlU3R5bGVFbF8oKTtcbiAgfVxuXG4gIHVwZGF0ZVN0eWxlRWxfKCkge1xuICAgIGxldCB3aWR0aDtcbiAgICBsZXQgaGVpZ2h0O1xuICAgIGxldCBhc3BlY3RSYXRpbztcblxuICAgIC8vIFRoZSBhc3BlY3QgcmF0aW8gaXMgZWl0aGVyIHVzZWQgZGlyZWN0bHkgb3IgdG8gY2FsY3VsYXRlIHdpZHRoIGFuZCBoZWlnaHQuXG4gICAgaWYgKHRoaXMuYXNwZWN0UmF0aW9fICE9PSB1bmRlZmluZWQgJiYgdGhpcy5hc3BlY3RSYXRpb18gIT09ICdhdXRvJykge1xuICAgICAgLy8gVXNlIGFueSBhc3BlY3RSYXRpbyB0aGF0J3MgYmVlbiBzcGVjaWZpY2FsbHkgc2V0XG4gICAgICBhc3BlY3RSYXRpbyA9IHRoaXMuYXNwZWN0UmF0aW9fO1xuICAgIH0gZWxzZSBpZiAodGhpcy52aWRlb1dpZHRoKCkpIHtcbiAgICAgIC8vIE90aGVyd2lzZSB0cnkgdG8gZ2V0IHRoZSBhc3BlY3QgcmF0aW8gZnJvbSB0aGUgdmlkZW8gbWV0YWRhdGFcbiAgICAgIGFzcGVjdFJhdGlvID0gdGhpcy52aWRlb1dpZHRoKCkgKyAnOicgKyB0aGlzLnZpZGVvSGVpZ2h0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE9yIHVzZSBhIGRlZmF1bHQuIFRoZSB2aWRlbyBlbGVtZW50J3MgaXMgMjoxLCBidXQgMTY6OSBpcyBtb3JlIGNvbW1vbi5cbiAgICAgIGFzcGVjdFJhdGlvID0gJzE2OjknO1xuICAgIH1cblxuICAgIC8vIEdldCB0aGUgcmF0aW8gYXMgYSBkZWNpbWFsIHdlIGNhbiB1c2UgdG8gY2FsY3VsYXRlIGRpbWVuc2lvbnNcbiAgICBsZXQgcmF0aW9QYXJ0cyA9IGFzcGVjdFJhdGlvLnNwbGl0KCc6Jyk7XG4gICAgbGV0IHJhdGlvTXVsdGlwbGllciA9IHJhdGlvUGFydHNbMV0gLyByYXRpb1BhcnRzWzBdO1xuXG4gICAgaWYgKHRoaXMud2lkdGhfICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIFVzZSBhbnkgd2lkdGggdGhhdCdzIGJlZW4gc3BlY2lmaWNhbGx5IHNldFxuICAgICAgd2lkdGggPSB0aGlzLndpZHRoXztcbiAgICB9IGVsc2UgaWYgKHRoaXMuaGVpZ2h0XyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBPciBjYWx1bGF0ZSB0aGUgd2lkdGggZnJvbSB0aGUgYXNwZWN0IHJhdGlvIGlmIGEgaGVpZ2h0IGhhcyBiZWVuIHNldFxuICAgICAgd2lkdGggPSB0aGlzLmhlaWdodF8gLyByYXRpb011bHRpcGxpZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE9yIHVzZSB0aGUgdmlkZW8ncyBtZXRhZGF0YSwgb3IgdXNlIHRoZSB2aWRlbyBlbCdzIGRlZmF1bHQgb2YgMzAwXG4gICAgICB3aWR0aCA9IHRoaXMudmlkZW9XaWR0aCgpIHx8IDMwMDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5oZWlnaHRfICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIFVzZSBhbnkgaGVpZ2h0IHRoYXQncyBiZWVuIHNwZWNpZmljYWxseSBzZXRcbiAgICAgIGhlaWdodCA9IHRoaXMuaGVpZ2h0XztcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gT3RoZXJ3aXNlIGNhbGN1bGF0ZSB0aGUgaGVpZ2h0IGZyb20gdGhlIHJhdGlvIGFuZCB0aGUgd2lkdGhcbiAgICAgIGhlaWdodCA9IHdpZHRoICogcmF0aW9NdWx0aXBsaWVyO1xuICAgIH1cblxuICAgIGxldCBpZENsYXNzID0gdGhpcy5pZCgpKyctZGltZW5zaW9ucyc7XG5cbiAgICAvLyBFbnN1cmUgdGhlIHJpZ2h0IGNsYXNzIGlzIHN0aWxsIG9uIHRoZSBwbGF5ZXIgZm9yIHRoZSBzdHlsZSBlbGVtZW50XG4gICAgdGhpcy5hZGRDbGFzcyhpZENsYXNzKTtcblxuICAgIC8vIENyZWF0ZSB0aGUgd2lkdGgvaGVpZ2h0IENTU1xuICAgIHZhciBjc3MgPSBgLiR7aWRDbGFzc30geyB3aWR0aDogJHt3aWR0aH1weDsgaGVpZ2h0OiAke2hlaWdodH1weDsgfWA7XG4gICAgLy8gQWRkIHRoZSBhc3BlY3QgcmF0aW8gQ1NTIGZvciB3aGVuIHVzaW5nIGEgZmx1aWQgbGF5b3V0XG4gICAgY3NzICs9IGAuJHtpZENsYXNzfS52anMtZmx1aWQgeyBwYWRkaW5nLXRvcDogJHtyYXRpb011bHRpcGxpZXIgKiAxMDB9JTsgfWA7XG5cbiAgICAvLyBVcGRhdGUgdGhlIHN0eWxlIGVsXG4gICAgaWYgKHRoaXMuc3R5bGVFbF8uc3R5bGVTaGVldCl7XG4gICAgICB0aGlzLnN0eWxlRWxfLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zdHlsZUVsXy5pbm5lckhUTUwgPSBjc3M7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIExvYWQgdGhlIE1lZGlhIFBsYXliYWNrIFRlY2hub2xvZ3kgKHRlY2gpXG4gICAqIExvYWQvQ3JlYXRlIGFuIGluc3RhbmNlIG9mIHBsYXliYWNrIHRlY2hub2xvZ3kgaW5jbHVkaW5nIGVsZW1lbnQgYW5kIEFQSSBtZXRob2RzXG4gICAqIEFuZCBhcHBlbmQgcGxheWJhY2sgZWxlbWVudCBpbiBwbGF5ZXIgZGl2LlxuICAgKi9cbiAgbG9hZFRlY2godGVjaE5hbWUsIHNvdXJjZSkge1xuXG4gICAgLy8gUGF1c2UgYW5kIHJlbW92ZSBjdXJyZW50IHBsYXliYWNrIHRlY2hub2xvZ3lcbiAgICBpZiAodGhpcy50ZWNoKSB7XG4gICAgICB0aGlzLnVubG9hZFRlY2goKTtcbiAgICB9XG5cbiAgICAvLyBnZXQgcmlkIG9mIHRoZSBIVE1MNSB2aWRlbyB0YWcgYXMgc29vbiBhcyB3ZSBhcmUgdXNpbmcgYW5vdGhlciB0ZWNoXG4gICAgaWYgKHRlY2hOYW1lICE9PSAnSHRtbDUnICYmIHRoaXMudGFnKSB7XG4gICAgICBDb21wb25lbnQuZ2V0Q29tcG9uZW50KCdIdG1sNScpLmRpc3Bvc2VNZWRpYUVsZW1lbnQodGhpcy50YWcpO1xuICAgICAgdGhpcy50YWcucGxheWVyID0gbnVsbDtcbiAgICAgIHRoaXMudGFnID0gbnVsbDtcbiAgICB9XG5cbiAgICB0aGlzLnRlY2hOYW1lID0gdGVjaE5hbWU7XG5cbiAgICAvLyBUdXJuIG9mZiBBUEkgYWNjZXNzIGJlY2F1c2Ugd2UncmUgbG9hZGluZyBhIG5ldyB0ZWNoIHRoYXQgbWlnaHQgbG9hZCBhc3luY2hyb25vdXNseVxuICAgIHRoaXMuaXNSZWFkeV8gPSBmYWxzZTtcblxuICAgIHZhciB0ZWNoUmVhZHkgPSBMaWIuYmluZCh0aGlzLCBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMudHJpZ2dlclJlYWR5KCk7XG4gICAgfSk7XG5cbiAgICAvLyBHcmFiIHRlY2gtc3BlY2lmaWMgb3B0aW9ucyBmcm9tIHBsYXllciBvcHRpb25zIGFuZCBhZGQgc291cmNlIGFuZCBwYXJlbnQgZWxlbWVudCB0byB1c2UuXG4gICAgdmFyIHRlY2hPcHRpb25zID0gTGliLm9iai5tZXJnZSh7XG4gICAgICAnc291cmNlJzogc291cmNlLFxuICAgICAgJ3BsYXllcklkJzogdGhpcy5pZCgpLFxuICAgICAgJ3RleHRUcmFja3MnOiB0aGlzLnRleHRUcmFja3NfXG4gICAgfSwgdGhpcy5vcHRpb25zX1t0ZWNoTmFtZS50b0xvd2VyQ2FzZSgpXSk7XG5cbiAgICBpZiAodGhpcy50YWcpIHtcbiAgICAgIHRlY2hPcHRpb25zLnRhZyA9IHRoaXMudGFnO1xuICAgIH1cblxuICAgIGlmIChzb3VyY2UpIHtcbiAgICAgIHRoaXMuY3VycmVudFR5cGVfID0gc291cmNlLnR5cGU7XG4gICAgICBpZiAoc291cmNlLnNyYyA9PT0gdGhpcy5jYWNoZV8uc3JjICYmIHRoaXMuY2FjaGVfLmN1cnJlbnRUaW1lID4gMCkge1xuICAgICAgICB0ZWNoT3B0aW9uc1snc3RhcnRUaW1lJ10gPSB0aGlzLmNhY2hlXy5jdXJyZW50VGltZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5jYWNoZV8uc3JjID0gc291cmNlLnNyYztcbiAgICB9XG5cbiAgICAvLyBJbml0aWFsaXplIHRlY2ggaW5zdGFuY2VcbiAgICBsZXQgdGVjaENvbXBvbmVudCA9IENvbXBvbmVudC5nZXRDb21wb25lbnQodGVjaE5hbWUpO1xuICAgIHRoaXMudGVjaCA9IG5ldyB0ZWNoQ29tcG9uZW50KHRlY2hPcHRpb25zKTtcblxuICAgIHRoaXMub24odGhpcy50ZWNoLCAncmVhZHknLCB0aGlzLmhhbmRsZVRlY2hSZWFkeSk7XG4gICAgdGhpcy5vbih0aGlzLnRlY2gsICd1c2VuYXRpdmVjb250cm9scycsIHRoaXMuaGFuZGxlVGVjaFVzZU5hdGl2ZUNvbnRyb2xzKTtcblxuICAgIC8vIExpc3RlbiB0byBldmVyeSBIVE1MNSBldmVudHMgYW5kIHRyaWdnZXIgdGhlbSBiYWNrIG9uIHRoZSBwbGF5ZXIgZm9yIHRoZSBwbHVnaW5zXG4gICAgdGhpcy5vbih0aGlzLnRlY2gsICdsb2Fkc3RhcnQnLCB0aGlzLmhhbmRsZVRlY2hMb2FkU3RhcnQpO1xuICAgIHRoaXMub24odGhpcy50ZWNoLCAnd2FpdGluZycsIHRoaXMuaGFuZGxlVGVjaFdhaXRpbmcpO1xuICAgIHRoaXMub24odGhpcy50ZWNoLCAnY2FucGxheScsIHRoaXMuaGFuZGxlVGVjaENhblBsYXkpO1xuICAgIHRoaXMub24odGhpcy50ZWNoLCAnY2FucGxheXRocm91Z2gnLCB0aGlzLmhhbmRsZVRlY2hDYW5QbGF5VGhyb3VnaCk7XG4gICAgdGhpcy5vbih0aGlzLnRlY2gsICdwbGF5aW5nJywgdGhpcy5oYW5kbGVUZWNoUGxheWluZyk7XG4gICAgdGhpcy5vbih0aGlzLnRlY2gsICdlbmRlZCcsIHRoaXMuaGFuZGxlVGVjaEVuZGVkKTtcbiAgICB0aGlzLm9uKHRoaXMudGVjaCwgJ3NlZWtpbmcnLCB0aGlzLmhhbmRsZVRlY2hTZWVraW5nKTtcbiAgICB0aGlzLm9uKHRoaXMudGVjaCwgJ3NlZWtlZCcsIHRoaXMuaGFuZGxlVGVjaFNlZWtlZCk7XG4gICAgdGhpcy5vbih0aGlzLnRlY2gsICdwbGF5JywgdGhpcy5oYW5kbGVUZWNoUGxheSk7XG4gICAgdGhpcy5vbih0aGlzLnRlY2gsICdmaXJzdHBsYXknLCB0aGlzLmhhbmRsZVRlY2hGaXJzdFBsYXkpO1xuICAgIHRoaXMub24odGhpcy50ZWNoLCAncGF1c2UnLCB0aGlzLmhhbmRsZVRlY2hQYXVzZSk7XG4gICAgdGhpcy5vbih0aGlzLnRlY2gsICdwcm9ncmVzcycsIHRoaXMuaGFuZGxlVGVjaFByb2dyZXNzKTtcbiAgICB0aGlzLm9uKHRoaXMudGVjaCwgJ2R1cmF0aW9uY2hhbmdlJywgdGhpcy5oYW5kbGVUZWNoRHVyYXRpb25DaGFuZ2UpO1xuICAgIHRoaXMub24odGhpcy50ZWNoLCAnZnVsbHNjcmVlbmNoYW5nZScsIHRoaXMuaGFuZGxlVGVjaEZ1bGxzY3JlZW5DaGFuZ2UpO1xuICAgIHRoaXMub24odGhpcy50ZWNoLCAnZXJyb3InLCB0aGlzLmhhbmRsZVRlY2hFcnJvcik7XG4gICAgdGhpcy5vbih0aGlzLnRlY2gsICdzdXNwZW5kJywgdGhpcy5oYW5kbGVUZWNoU3VzcGVuZCk7XG4gICAgdGhpcy5vbih0aGlzLnRlY2gsICdhYm9ydCcsIHRoaXMuaGFuZGxlVGVjaEFib3J0KTtcbiAgICB0aGlzLm9uKHRoaXMudGVjaCwgJ2VtcHRpZWQnLCB0aGlzLmhhbmRsZVRlY2hFbXB0aWVkKTtcbiAgICB0aGlzLm9uKHRoaXMudGVjaCwgJ3N0YWxsZWQnLCB0aGlzLmhhbmRsZVRlY2hTdGFsbGVkKTtcbiAgICB0aGlzLm9uKHRoaXMudGVjaCwgJ2xvYWRlZG1ldGFkYXRhJywgdGhpcy5oYW5kbGVUZWNoTG9hZGVkTWV0YURhdGEpO1xuICAgIHRoaXMub24odGhpcy50ZWNoLCAnbG9hZGVkZGF0YScsIHRoaXMuaGFuZGxlVGVjaExvYWRlZERhdGEpO1xuICAgIHRoaXMub24odGhpcy50ZWNoLCAndGltZXVwZGF0ZScsIHRoaXMuaGFuZGxlVGVjaFRpbWVVcGRhdGUpO1xuICAgIHRoaXMub24odGhpcy50ZWNoLCAncmF0ZWNoYW5nZScsIHRoaXMuaGFuZGxlVGVjaFJhdGVDaGFuZ2UpO1xuICAgIHRoaXMub24odGhpcy50ZWNoLCAndm9sdW1lY2hhbmdlJywgdGhpcy5oYW5kbGVUZWNoVm9sdW1lQ2hhbmdlKTtcbiAgICB0aGlzLm9uKHRoaXMudGVjaCwgJ3RleHR0cmFja2NoYW5nZScsIHRoaXMub25UZXh0VHJhY2tDaGFuZ2UpO1xuICAgIHRoaXMub24odGhpcy50ZWNoLCAnbG9hZGVkbWV0YWRhdGEnLCB0aGlzLnVwZGF0ZVN0eWxlRWxfKTtcblxuICAgIGlmICh0aGlzLmNvbnRyb2xzKCkgJiYgIXRoaXMudXNpbmdOYXRpdmVDb250cm9scygpKSB7XG4gICAgICB0aGlzLmFkZFRlY2hDb250cm9sc0xpc3RlbmVycygpO1xuICAgIH1cblxuICAgIC8vIEFkZCB0aGUgdGVjaCBlbGVtZW50IGluIHRoZSBET00gaWYgaXQgd2FzIG5vdCBhbHJlYWR5IHRoZXJlXG4gICAgLy8gTWFrZSBzdXJlIHRvIG5vdCBpbnNlcnQgdGhlIG9yaWdpbmFsIHZpZGVvIGVsZW1lbnQgaWYgdXNpbmcgSHRtbDVcbiAgICBpZiAodGhpcy50ZWNoLmVsKCkucGFyZW50Tm9kZSAhPT0gdGhpcy5lbCgpICYmICh0ZWNoTmFtZSAhPT0gJ0h0bWw1JyB8fCAhdGhpcy50YWcpKSB7XG4gICAgICBMaWIuaW5zZXJ0Rmlyc3QodGhpcy50ZWNoLmVsKCksIHRoaXMuZWwoKSk7XG4gICAgfVxuXG4gICAgLy8gR2V0IHJpZCBvZiB0aGUgb3JpZ2luYWwgdmlkZW8gdGFnIHJlZmVyZW5jZSBhZnRlciB0aGUgZmlyc3QgdGVjaCBpcyBsb2FkZWRcbiAgICBpZiAodGhpcy50YWcpIHtcbiAgICAgIHRoaXMudGFnLnBsYXllciA9IG51bGw7XG4gICAgICB0aGlzLnRhZyA9IG51bGw7XG4gICAgfVxuXG4gICAgdGhpcy50ZWNoLnJlYWR5KHRlY2hSZWFkeSk7XG4gIH1cblxuICB1bmxvYWRUZWNoKCkge1xuICAgIC8vIFNhdmUgdGhlIGN1cnJlbnQgdGV4dCB0cmFja3Mgc28gdGhhdCB3ZSBjYW4gcmV1c2UgdGhlIHNhbWUgdGV4dCB0cmFja3Mgd2l0aCB0aGUgbmV4dCB0ZWNoXG4gICAgdGhpcy50ZXh0VHJhY2tzXyA9IHRoaXMudGV4dFRyYWNrcygpO1xuXG4gICAgdGhpcy5pc1JlYWR5XyA9IGZhbHNlO1xuXG4gICAgdGhpcy50ZWNoLmRpc3Bvc2UoKTtcblxuICAgIHRoaXMudGVjaCA9IGZhbHNlO1xuICB9XG5cbiAgYWRkVGVjaENvbnRyb2xzTGlzdGVuZXJzKCkge1xuICAgIC8vIFNvbWUgYnJvd3NlcnMgKENocm9tZSAmIElFKSBkb24ndCB0cmlnZ2VyIGEgY2xpY2sgb24gYSBmbGFzaCBzd2YsIGJ1dCBkb1xuICAgIC8vIHRyaWdnZXIgbW91c2Vkb3duL3VwLlxuICAgIC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTQ0NDU2Mi9qYXZhc2NyaXB0LW9uY2xpY2stZXZlbnQtb3Zlci1mbGFzaC1vYmplY3RcbiAgICAvLyBBbnkgdG91Y2ggZXZlbnRzIGFyZSBzZXQgdG8gYmxvY2sgdGhlIG1vdXNlZG93biBldmVudCBmcm9tIGhhcHBlbmluZ1xuICAgIHRoaXMub24odGhpcy50ZWNoLCAnbW91c2Vkb3duJywgdGhpcy5oYW5kbGVUZWNoQ2xpY2spO1xuXG4gICAgLy8gSWYgdGhlIGNvbnRyb2xzIHdlcmUgaGlkZGVuIHdlIGRvbid0IHdhbnQgdGhhdCB0byBjaGFuZ2Ugd2l0aG91dCBhIHRhcCBldmVudFxuICAgIC8vIHNvIHdlJ2xsIGNoZWNrIGlmIHRoZSBjb250cm9scyB3ZXJlIGFscmVhZHkgc2hvd2luZyBiZWZvcmUgcmVwb3J0aW5nIHVzZXJcbiAgICAvLyBhY3Rpdml0eVxuICAgIHRoaXMub24odGhpcy50ZWNoLCAndG91Y2hzdGFydCcsIHRoaXMuaGFuZGxlVGVjaFRvdWNoU3RhcnQpO1xuICAgIHRoaXMub24odGhpcy50ZWNoLCAndG91Y2htb3ZlJywgdGhpcy5oYW5kbGVUZWNoVG91Y2hNb3ZlKTtcbiAgICB0aGlzLm9uKHRoaXMudGVjaCwgJ3RvdWNoZW5kJywgdGhpcy5oYW5kbGVUZWNoVG91Y2hFbmQpO1xuXG4gICAgLy8gVHVybiBvbiBjb21wb25lbnQgdGFwIGV2ZW50c1xuICAgIHRoaXMudGVjaC5lbWl0VGFwRXZlbnRzKCk7XG5cbiAgICAvLyBUaGUgdGFwIGxpc3RlbmVyIG5lZWRzIHRvIGNvbWUgYWZ0ZXIgdGhlIHRvdWNoZW5kIGxpc3RlbmVyIGJlY2F1c2UgdGhlIHRhcFxuICAgIC8vIGxpc3RlbmVyIGNhbmNlbHMgb3V0IGFueSByZXBvcnRlZFVzZXJBY3Rpdml0eSB3aGVuIHNldHRpbmcgdXNlckFjdGl2ZShmYWxzZSlcbiAgICB0aGlzLm9uKHRoaXMudGVjaCwgJ3RhcCcsIHRoaXMuaGFuZGxlVGVjaFRhcCk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIHRoZSBsaXN0ZW5lcnMgdXNlZCBmb3IgY2xpY2sgYW5kIHRhcCBjb250cm9scy4gVGhpcyBpcyBuZWVkZWQgZm9yXG4gICAqIHRvZ2dsaW5nIHRvIGNvbnRyb2xzIGRpc2FibGVkLCB3aGVyZSBhIHRhcC90b3VjaCBzaG91bGQgZG8gbm90aGluZy5cbiAgICovXG4gIHJlbW92ZVRlY2hDb250cm9sc0xpc3RlbmVycygpIHtcbiAgICAvLyBXZSBkb24ndCB3YW50IHRvIGp1c3QgdXNlIGB0aGlzLm9mZigpYCBiZWNhdXNlIHRoZXJlIG1pZ2h0IGJlIG90aGVyIG5lZWRlZFxuICAgIC8vIGxpc3RlbmVycyBhZGRlZCBieSB0ZWNocyB0aGF0IGV4dGVuZCB0aGlzLlxuICAgIHRoaXMub2ZmKHRoaXMudGVjaCwgJ3RhcCcsIHRoaXMuaGFuZGxlVGVjaFRhcCk7XG4gICAgdGhpcy5vZmYodGhpcy50ZWNoLCAndG91Y2hzdGFydCcsIHRoaXMuaGFuZGxlVGVjaFRvdWNoU3RhcnQpO1xuICAgIHRoaXMub2ZmKHRoaXMudGVjaCwgJ3RvdWNobW92ZScsIHRoaXMuaGFuZGxlVGVjaFRvdWNoTW92ZSk7XG4gICAgdGhpcy5vZmYodGhpcy50ZWNoLCAndG91Y2hlbmQnLCB0aGlzLmhhbmRsZVRlY2hUb3VjaEVuZCk7XG4gICAgdGhpcy5vZmYodGhpcy50ZWNoLCAnbW91c2Vkb3duJywgdGhpcy5oYW5kbGVUZWNoQ2xpY2spO1xuICB9XG5cbiAgLyoqXG4gICAqIFBsYXllciB3YWl0cyBmb3IgdGhlIHRlY2ggdG8gYmUgcmVhZHlcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGhhbmRsZVRlY2hSZWFkeSgpIHtcbiAgICB0aGlzLnRyaWdnZXJSZWFkeSgpO1xuXG4gICAgLy8gQ2hyb21lIGFuZCBTYWZhcmkgYm90aCBoYXZlIGlzc3VlcyB3aXRoIGF1dG9wbGF5LlxuICAgIC8vIEluIFNhZmFyaSAoNS4xLjEpLCB3aGVuIHdlIG1vdmUgdGhlIHZpZGVvIGVsZW1lbnQgaW50byB0aGUgY29udGFpbmVyIGRpdiwgYXV0b3BsYXkgZG9lc24ndCB3b3JrLlxuICAgIC8vIEluIENocm9tZSAoMTUpLCBpZiB5b3UgaGF2ZSBhdXRvcGxheSArIGEgcG9zdGVyICsgbm8gY29udHJvbHMsIHRoZSB2aWRlbyBnZXRzIGhpZGRlbiAoYnV0IGF1ZGlvIHBsYXlzKVxuICAgIC8vIFRoaXMgZml4ZXMgYm90aCBpc3N1ZXMuIE5lZWQgdG8gd2FpdCBmb3IgQVBJLCBzbyBpdCB1cGRhdGVzIGRpc3BsYXlzIGNvcnJlY3RseVxuICAgIGlmICh0aGlzLnRhZyAmJiB0aGlzLm9wdGlvbnNfLmF1dG9wbGF5ICYmIHRoaXMucGF1c2VkKCkpIHtcbiAgICAgIGRlbGV0ZSB0aGlzLnRhZy5wb3N0ZXI7IC8vIENocm9tZSBGaXguIEZpeGVkIGluIENocm9tZSB2MTYuXG4gICAgICB0aGlzLnBsYXkoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRmlyZWQgd2hlbiB0aGUgbmF0aXZlIGNvbnRyb2xzIGFyZSB1c2VkXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBoYW5kbGVUZWNoVXNlTmF0aXZlQ29udHJvbHMoKSB7XG4gICAgdGhpcy51c2luZ05hdGl2ZUNvbnRyb2xzKHRydWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpcmVkIHdoZW4gdGhlIHVzZXIgYWdlbnQgYmVnaW5zIGxvb2tpbmcgZm9yIG1lZGlhIGRhdGFcbiAgICogQGV2ZW50IGxvYWRzdGFydFxuICAgKi9cbiAgaGFuZGxlVGVjaExvYWRTdGFydCgpIHtcbiAgICAvLyBUT0RPOiBVcGRhdGUgdG8gdXNlIGBlbXB0aWVkYCBldmVudCBpbnN0ZWFkLiBTZWUgIzEyNzcuXG5cbiAgICB0aGlzLnJlbW92ZUNsYXNzKCd2anMtZW5kZWQnKTtcblxuICAgIC8vIHJlc2V0IHRoZSBlcnJvciBzdGF0ZVxuICAgIHRoaXMuZXJyb3IobnVsbCk7XG5cbiAgICAvLyBJZiBpdCdzIGFscmVhZHkgcGxheWluZyB3ZSB3YW50IHRvIHRyaWdnZXIgYSBmaXJzdHBsYXkgZXZlbnQgbm93LlxuICAgIC8vIFRoZSBmaXJzdHBsYXkgZXZlbnQgcmVsaWVzIG9uIGJvdGggdGhlIHBsYXkgYW5kIGxvYWRzdGFydCBldmVudHNcbiAgICAvLyB3aGljaCBjYW4gaGFwcGVuIGluIGFueSBvcmRlciBmb3IgYSBuZXcgc291cmNlXG4gICAgaWYgKCF0aGlzLnBhdXNlZCgpKSB7XG4gICAgICB0aGlzLnRyaWdnZXIoJ2xvYWRzdGFydCcpO1xuICAgICAgdGhpcy50cmlnZ2VyKCdmaXJzdHBsYXknKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gcmVzZXQgdGhlIGhhc1N0YXJ0ZWQgc3RhdGVcbiAgICAgIHRoaXMuaGFzU3RhcnRlZChmYWxzZSk7XG4gICAgICB0aGlzLnRyaWdnZXIoJ2xvYWRzdGFydCcpO1xuICAgIH1cbiAgfVxuXG4gIGhhc1N0YXJ0ZWQoaGFzU3RhcnRlZCkge1xuICAgIGlmIChoYXNTdGFydGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIG9ubHkgdXBkYXRlIGlmIHRoaXMgaXMgYSBuZXcgdmFsdWVcbiAgICAgIGlmICh0aGlzLmhhc1N0YXJ0ZWRfICE9PSBoYXNTdGFydGVkKSB7XG4gICAgICAgIHRoaXMuaGFzU3RhcnRlZF8gPSBoYXNTdGFydGVkO1xuICAgICAgICBpZiAoaGFzU3RhcnRlZCkge1xuICAgICAgICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy1oYXMtc3RhcnRlZCcpO1xuICAgICAgICAgIC8vIHRyaWdnZXIgdGhlIGZpcnN0cGxheSBldmVudCBpZiB0aGlzIG5ld2x5IGhhcyBwbGF5ZWRcbiAgICAgICAgICB0aGlzLnRyaWdnZXIoJ2ZpcnN0cGxheScpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMucmVtb3ZlQ2xhc3MoJ3Zqcy1oYXMtc3RhcnRlZCcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmV0dXJuICEhdGhpcy5oYXNTdGFydGVkXztcbiAgfVxuXG4gIC8qKlxuICAgKiBGaXJlZCB3aGVuZXZlciB0aGUgbWVkaWEgYmVnaW5zIG9yIHJlc3VtZXMgcGxheWJhY2tcbiAgICogQGV2ZW50IHBsYXlcbiAgICovXG4gIGhhbmRsZVRlY2hQbGF5KCkge1xuICAgIHRoaXMucmVtb3ZlQ2xhc3MoJ3Zqcy1lbmRlZCcpO1xuICAgIHRoaXMucmVtb3ZlQ2xhc3MoJ3Zqcy1wYXVzZWQnKTtcbiAgICB0aGlzLmFkZENsYXNzKCd2anMtcGxheWluZycpO1xuXG4gICAgLy8gaGlkZSB0aGUgcG9zdGVyIHdoZW4gdGhlIHVzZXIgaGl0cyBwbGF5XG4gICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZW1iZWRkZWQtY29udGVudC5odG1sI2RvbS1tZWRpYS1wbGF5XG4gICAgdGhpcy5oYXNTdGFydGVkKHRydWUpO1xuXG4gICAgdGhpcy50cmlnZ2VyKCdwbGF5Jyk7XG4gIH1cblxuICAvKipcbiAgICogRmlyZWQgd2hlbmV2ZXIgdGhlIG1lZGlhIGJlZ2lucyB3YWl0aW5nXG4gICAqIEBldmVudCB3YWl0aW5nXG4gICAqL1xuICBoYW5kbGVUZWNoV2FpdGluZygpIHtcbiAgICB0aGlzLmFkZENsYXNzKCd2anMtd2FpdGluZycpO1xuICAgIHRoaXMudHJpZ2dlcignd2FpdGluZycpO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgaGFuZGxlciBmb3IgZXZlbnRzIHRoYXQgc2lnbmFsIHRoYXQgd2FpdGluZyBoYXMgZW5kZWRcbiAgICogd2hpY2ggaXMgbm90IGNvbnNpc3RlbnQgYmV0d2VlbiBicm93c2Vycy4gU2VlICMxMzUxXG4gICAqIEBldmVudCBjYW5wbGF5XG4gICAqL1xuICBoYW5kbGVUZWNoQ2FuUGxheSgpIHtcbiAgICB0aGlzLnJlbW92ZUNsYXNzKCd2anMtd2FpdGluZycpO1xuICAgIHRoaXMudHJpZ2dlcignY2FucGxheScpO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgaGFuZGxlciBmb3IgZXZlbnRzIHRoYXQgc2lnbmFsIHRoYXQgd2FpdGluZyBoYXMgZW5kZWRcbiAgICogd2hpY2ggaXMgbm90IGNvbnNpc3RlbnQgYmV0d2VlbiBicm93c2Vycy4gU2VlICMxMzUxXG4gICAqIEBldmVudCBjYW5wbGF5dGhyb3VnaFxuICAgKi9cbiAgaGFuZGxlVGVjaENhblBsYXlUaHJvdWdoKCkge1xuICAgIHRoaXMucmVtb3ZlQ2xhc3MoJ3Zqcy13YWl0aW5nJyk7XG4gICAgdGhpcy50cmlnZ2VyKCdjYW5wbGF5dGhyb3VnaCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgaGFuZGxlciBmb3IgZXZlbnRzIHRoYXQgc2lnbmFsIHRoYXQgd2FpdGluZyBoYXMgZW5kZWRcbiAgICogd2hpY2ggaXMgbm90IGNvbnNpc3RlbnQgYmV0d2VlbiBicm93c2Vycy4gU2VlICMxMzUxXG4gICAqIEBldmVudCBwbGF5aW5nXG4gICAqL1xuICBoYW5kbGVUZWNoUGxheWluZygpIHtcbiAgICB0aGlzLnJlbW92ZUNsYXNzKCd2anMtd2FpdGluZycpO1xuICAgIHRoaXMudHJpZ2dlcigncGxheWluZycpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpcmVkIHdoZW5ldmVyIHRoZSBwbGF5ZXIgaXMganVtcGluZyB0byBhIG5ldyB0aW1lXG4gICAqIEBldmVudCBzZWVraW5nXG4gICAqL1xuICBoYW5kbGVUZWNoU2Vla2luZygpIHtcbiAgICB0aGlzLmFkZENsYXNzKCd2anMtc2Vla2luZycpO1xuICAgIHRoaXMudHJpZ2dlcignc2Vla2luZycpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpcmVkIHdoZW4gdGhlIHBsYXllciBoYXMgZmluaXNoZWQganVtcGluZyB0byBhIG5ldyB0aW1lXG4gICAqIEBldmVudCBzZWVrZWRcbiAgICovXG4gIGhhbmRsZVRlY2hTZWVrZWQoKSB7XG4gICAgdGhpcy5yZW1vdmVDbGFzcygndmpzLXNlZWtpbmcnKTtcbiAgICB0aGlzLnRyaWdnZXIoJ3NlZWtlZCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpcmVkIHRoZSBmaXJzdCB0aW1lIGEgdmlkZW8gaXMgcGxheWVkXG4gICAqXG4gICAqIE5vdCBwYXJ0IG9mIHRoZSBITFMgc3BlYywgYW5kIHdlJ3JlIG5vdCBzdXJlIGlmIHRoaXMgaXMgdGhlIGJlc3RcbiAgICogaW1wbGVtZW50YXRpb24geWV0LCBzbyB1c2Ugc3BhcmluZ2x5LiBJZiB5b3UgZG9uJ3QgaGF2ZSBhIHJlYXNvbiB0b1xuICAgKiBwcmV2ZW50IHBsYXliYWNrLCB1c2UgYG15UGxheWVyLm9uZSgncGxheScpO2AgaW5zdGVhZC5cbiAgICpcbiAgICogQGV2ZW50IGZpcnN0cGxheVxuICAgKi9cbiAgaGFuZGxlVGVjaEZpcnN0UGxheSgpIHtcbiAgICAvL0lmIHRoZSBmaXJzdCBzdGFydHRpbWUgYXR0cmlidXRlIGlzIHNwZWNpZmllZFxuICAgIC8vdGhlbiB3ZSB3aWxsIHN0YXJ0IGF0IHRoZSBnaXZlbiBvZmZzZXQgaW4gc2Vjb25kc1xuICAgIGlmKHRoaXMub3B0aW9uc19bJ3N0YXJ0dGltZSddKXtcbiAgICAgIHRoaXMuY3VycmVudFRpbWUodGhpcy5vcHRpb25zX1snc3RhcnR0aW1lJ10pO1xuICAgIH1cblxuICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy1oYXMtc3RhcnRlZCcpO1xuICAgIHRoaXMudHJpZ2dlcignZmlyc3RwbGF5Jyk7XG4gIH1cblxuICAvKipcbiAgICogRmlyZWQgd2hlbmV2ZXIgdGhlIG1lZGlhIGhhcyBiZWVuIHBhdXNlZFxuICAgKiBAZXZlbnQgcGF1c2VcbiAgICovXG4gIGhhbmRsZVRlY2hQYXVzZSgpIHtcbiAgICB0aGlzLnJlbW92ZUNsYXNzKCd2anMtcGxheWluZycpO1xuICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy1wYXVzZWQnKTtcbiAgICB0aGlzLnRyaWdnZXIoJ3BhdXNlJyk7XG4gIH1cblxuICAvKipcbiAgICogRmlyZWQgd2hpbGUgdGhlIHVzZXIgYWdlbnQgaXMgZG93bmxvYWRpbmcgbWVkaWEgZGF0YVxuICAgKiBAZXZlbnQgcHJvZ3Jlc3NcbiAgICovXG4gIGhhbmRsZVRlY2hQcm9ncmVzcygpIHtcbiAgICB0aGlzLnRyaWdnZXIoJ3Byb2dyZXNzJyk7XG5cbiAgICAvLyBBZGQgY3VzdG9tIGV2ZW50IGZvciB3aGVuIHNvdXJjZSBpcyBmaW5pc2hlZCBkb3dubG9hZGluZy5cbiAgICBpZiAodGhpcy5idWZmZXJlZFBlcmNlbnQoKSA9PT0gMSkge1xuICAgICAgdGhpcy50cmlnZ2VyKCdsb2FkZWRhbGxkYXRhJyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEZpcmVkIHdoZW4gdGhlIGVuZCBvZiB0aGUgbWVkaWEgcmVzb3VyY2UgaXMgcmVhY2hlZCAoY3VycmVudFRpbWUgPT0gZHVyYXRpb24pXG4gICAqIEBldmVudCBlbmRlZFxuICAgKi9cbiAgaGFuZGxlVGVjaEVuZGVkKCkge1xuICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy1lbmRlZCcpO1xuICAgIGlmICh0aGlzLm9wdGlvbnNfWydsb29wJ10pIHtcbiAgICAgIHRoaXMuY3VycmVudFRpbWUoMCk7XG4gICAgICB0aGlzLnBsYXkoKTtcbiAgICB9IGVsc2UgaWYgKCF0aGlzLnBhdXNlZCgpKSB7XG4gICAgICB0aGlzLnBhdXNlKCk7XG4gICAgfVxuXG4gICAgdGhpcy50cmlnZ2VyKCdlbmRlZCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpcmVkIHdoZW4gdGhlIGR1cmF0aW9uIG9mIHRoZSBtZWRpYSByZXNvdXJjZSBpcyBmaXJzdCBrbm93biBvciBjaGFuZ2VkXG4gICAqIEBldmVudCBkdXJhdGlvbmNoYW5nZVxuICAgKi9cbiAgaGFuZGxlVGVjaER1cmF0aW9uQ2hhbmdlKCkge1xuICAgIHRoaXMudXBkYXRlRHVyYXRpb24oKTtcbiAgICB0aGlzLnRyaWdnZXIoJ2R1cmF0aW9uY2hhbmdlJyk7XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlIGEgY2xpY2sgb24gdGhlIG1lZGlhIGVsZW1lbnQgdG8gcGxheS9wYXVzZVxuICAgKi9cbiAgaGFuZGxlVGVjaENsaWNrKGV2ZW50KSB7XG4gICAgLy8gV2UncmUgdXNpbmcgbW91c2Vkb3duIHRvIGRldGVjdCBjbGlja3MgdGhhbmtzIHRvIEZsYXNoLCBidXQgbW91c2Vkb3duXG4gICAgLy8gd2lsbCBhbHNvIGJlIHRyaWdnZXJlZCB3aXRoIHJpZ2h0LWNsaWNrcywgc28gd2UgbmVlZCB0byBwcmV2ZW50IHRoYXRcbiAgICBpZiAoZXZlbnQuYnV0dG9uICE9PSAwKSByZXR1cm47XG5cbiAgICAvLyBXaGVuIGNvbnRyb2xzIGFyZSBkaXNhYmxlZCBhIGNsaWNrIHNob3VsZCBub3QgdG9nZ2xlIHBsYXliYWNrIGJlY2F1c2VcbiAgICAvLyB0aGUgY2xpY2sgaXMgY29uc2lkZXJlZCBhIGNvbnRyb2xcbiAgICBpZiAodGhpcy5jb250cm9scygpKSB7XG4gICAgICBpZiAodGhpcy5wYXVzZWQoKSkge1xuICAgICAgICB0aGlzLnBsYXkoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucGF1c2UoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlIGEgdGFwIG9uIHRoZSBtZWRpYSBlbGVtZW50LiBJdCB3aWxsIHRvZ2dsZSB0aGUgdXNlclxuICAgKiBhY3Rpdml0eSBzdGF0ZSwgd2hpY2ggaGlkZXMgYW5kIHNob3dzIHRoZSBjb250cm9scy5cbiAgICovXG4gIGhhbmRsZVRlY2hUYXAoKSB7XG4gICAgdGhpcy51c2VyQWN0aXZlKCF0aGlzLnVzZXJBY3RpdmUoKSk7XG4gIH1cblxuICBoYW5kbGVUZWNoVG91Y2hTdGFydCgpIHtcbiAgICB0aGlzLnVzZXJXYXNBY3RpdmUgPSB0aGlzLnVzZXJBY3RpdmUoKTtcbiAgfVxuXG4gIGhhbmRsZVRlY2hUb3VjaE1vdmUoKSB7XG4gICAgaWYgKHRoaXMudXNlcldhc0FjdGl2ZSl7XG4gICAgICB0aGlzLnJlcG9ydFVzZXJBY3Rpdml0eSgpO1xuICAgIH1cbiAgfVxuXG4gIGhhbmRsZVRlY2hUb3VjaEVuZChldmVudCkge1xuICAgIC8vIFN0b3AgdGhlIG1vdXNlIGV2ZW50cyBmcm9tIGFsc28gaGFwcGVuaW5nXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIGR1cmF0aW9uIG9mIHRoZSBwbGF5ZXIgdXNpbmcgdGhlIHRlY2hcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHVwZGF0ZUR1cmF0aW9uKCkge1xuICAgIC8vIEFsbG93cyBmb3IgY2FjaGluZyB2YWx1ZSBpbnN0ZWFkIG9mIGFza2luZyBwbGF5ZXIgZWFjaCB0aW1lLlxuICAgIC8vIFdlIG5lZWQgdG8gZ2V0IHRoZSB0ZWNoR2V0IHJlc3BvbnNlIGFuZCBjaGVjayBmb3IgYSB2YWx1ZSBzbyB3ZSBkb24ndFxuICAgIC8vIGFjY2lkZW50YWxseSBjYXVzZSB0aGUgc3RhY2sgdG8gYmxvdyB1cC5cbiAgICB2YXIgZHVyYXRpb24gPSB0aGlzLnRlY2hHZXQoJ2R1cmF0aW9uJyk7XG4gICAgaWYgKGR1cmF0aW9uKSB7XG4gICAgICBpZiAoZHVyYXRpb24gPCAwKSB7XG4gICAgICAgIGR1cmF0aW9uID0gSW5maW5pdHk7XG4gICAgICB9XG4gICAgICB0aGlzLmR1cmF0aW9uKGR1cmF0aW9uKTtcbiAgICAgIC8vIERldGVybWluZSBpZiB0aGUgc3RyZWFtIGlzIGxpdmUgYW5kIHByb3BhZ2F0ZSBzdHlsZXMgZG93biB0byBVSS5cbiAgICAgIGlmIChkdXJhdGlvbiA9PT0gSW5maW5pdHkpIHtcbiAgICAgICAgdGhpcy5hZGRDbGFzcygndmpzLWxpdmUnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVtb3ZlQ2xhc3MoJ3Zqcy1saXZlJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEZpcmVkIHdoZW4gdGhlIHBsYXllciBzd2l0Y2hlcyBpbiBvciBvdXQgb2YgZnVsbHNjcmVlbiBtb2RlXG4gICAqIEBldmVudCBmdWxsc2NyZWVuY2hhbmdlXG4gICAqL1xuICBoYW5kbGVGdWxsc2NyZWVuQ2hhbmdlKCkge1xuICAgIGlmICh0aGlzLmlzRnVsbHNjcmVlbigpKSB7XG4gICAgICB0aGlzLmFkZENsYXNzKCd2anMtZnVsbHNjcmVlbicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlbW92ZUNsYXNzKCd2anMtZnVsbHNjcmVlbicpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBuYXRpdmUgY2xpY2sgZXZlbnRzIG9uIHRoZSBTV0YgYXJlbid0IHRyaWdnZXJlZCBvbiBJRTExLCBXaW44LjFSVFxuICAgKiB1c2Ugc3RhZ2VjbGljayBldmVudHMgdHJpZ2dlcmVkIGZyb20gaW5zaWRlIHRoZSBTV0YgaW5zdGVhZFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgaGFuZGxlU3RhZ2VDbGljaygpIHtcbiAgICB0aGlzLnJlcG9ydFVzZXJBY3Rpdml0eSgpO1xuICB9XG5cbiAgaGFuZGxlVGVjaEZ1bGxzY3JlZW5DaGFuZ2UoKSB7XG4gICAgdGhpcy50cmlnZ2VyKCdmdWxsc2NyZWVuY2hhbmdlJyk7XG4gIH1cblxuICAvKipcbiAgICogRmlyZXMgd2hlbiBhbiBlcnJvciBvY2N1cnJlZCBkdXJpbmcgdGhlIGxvYWRpbmcgb2YgYW4gYXVkaW8vdmlkZW9cbiAgICogQGV2ZW50IGVycm9yXG4gICAqL1xuICBoYW5kbGVUZWNoRXJyb3IoKSB7XG4gICAgdGhpcy5lcnJvcih0aGlzLnRlY2guZXJyb3IoKS5jb2RlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaXJlcyB3aGVuIHRoZSBicm93c2VyIGlzIGludGVudGlvbmFsbHkgbm90IGdldHRpbmcgbWVkaWEgZGF0YVxuICAgKiBAZXZlbnQgc3VzcGVuZFxuICAgKi9cbiAgaGFuZGxlVGVjaFN1c3BlbmQoKSB7XG4gICAgdGhpcy50cmlnZ2VyKCdzdXNwZW5kJyk7XG4gIH1cblxuICAvKipcbiAgICogRmlyZXMgd2hlbiB0aGUgbG9hZGluZyBvZiBhbiBhdWRpby92aWRlbyBpcyBhYm9ydGVkXG4gICAqIEBldmVudCBhYm9ydFxuICAgKi9cbiAgaGFuZGxlVGVjaEFib3J0KCkge1xuICAgIHRoaXMudHJpZ2dlcignYWJvcnQnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaXJlcyB3aGVuIHRoZSBjdXJyZW50IHBsYXlsaXN0IGlzIGVtcHR5XG4gICAqIEBldmVudCBlbXB0aWVkXG4gICAqL1xuICBoYW5kbGVUZWNoRW1wdGllZCgpIHtcbiAgICB0aGlzLnRyaWdnZXIoJ2VtcHRpZWQnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaXJlcyB3aGVuIHRoZSBicm93c2VyIGlzIHRyeWluZyB0byBnZXQgbWVkaWEgZGF0YSwgYnV0IGRhdGEgaXMgbm90IGF2YWlsYWJsZVxuICAgKiBAZXZlbnQgc3RhbGxlZFxuICAgKi9cbiAgaGFuZGxlVGVjaFN0YWxsZWQoKSB7XG4gICAgdGhpcy50cmlnZ2VyKCdzdGFsbGVkJyk7XG4gIH1cblxuICAvKipcbiAgICogRmlyZXMgd2hlbiB0aGUgYnJvd3NlciBoYXMgbG9hZGVkIG1ldGEgZGF0YSBmb3IgdGhlIGF1ZGlvL3ZpZGVvXG4gICAqIEBldmVudCBsb2FkZWRtZXRhZGF0YVxuICAgKi9cbiAgaGFuZGxlVGVjaExvYWRlZE1ldGFEYXRhKCkge1xuICAgIHRoaXMudHJpZ2dlcignbG9hZGVkbWV0YWRhdGEnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaXJlcyB3aGVuIHRoZSBicm93c2VyIGhhcyBsb2FkZWQgdGhlIGN1cnJlbnQgZnJhbWUgb2YgdGhlIGF1ZGlvL3ZpZGVvXG4gICAqIEBldmVudCBsb2FkZGF0YVxuICAgKi9cbiAgaGFuZGxlVGVjaExvYWRlZERhdGEoKSB7XG4gICAgdGhpcy50cmlnZ2VyKCdsb2FkZWRkYXRhJyk7XG4gIH1cblxuICAvKipcbiAgICogRmlyZXMgd2hlbiB0aGUgY3VycmVudCBwbGF5YmFjayBwb3NpdGlvbiBoYXMgY2hhbmdlZFxuICAgKiBAZXZlbnQgdGltZXVwZGF0ZVxuICAgKi9cbiAgaGFuZGxlVGVjaFRpbWVVcGRhdGUoKSB7XG4gICAgdGhpcy50cmlnZ2VyKCd0aW1ldXBkYXRlJyk7XG4gIH1cblxuICAvKipcbiAgICogRmlyZXMgd2hlbiB0aGUgcGxheWluZyBzcGVlZCBvZiB0aGUgYXVkaW8vdmlkZW8gaXMgY2hhbmdlZFxuICAgKiBAZXZlbnQgcmF0ZWNoYW5nZVxuICAgKi9cbiAgaGFuZGxlVGVjaFJhdGVDaGFuZ2UoKSB7XG4gICAgdGhpcy50cmlnZ2VyKCdyYXRlY2hhbmdlJyk7XG4gIH1cblxuICAvKipcbiAgICogRmlyZXMgd2hlbiB0aGUgdm9sdW1lIGhhcyBiZWVuIGNoYW5nZWRcbiAgICogQGV2ZW50IHZvbHVtZWNoYW5nZVxuICAgKi9cbiAgaGFuZGxlVGVjaFZvbHVtZUNoYW5nZSgpIHtcbiAgICB0aGlzLnRyaWdnZXIoJ3ZvbHVtZWNoYW5nZScpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpcmVzIHdoZW4gdGhlIHRleHQgdHJhY2sgaGFzIGJlZW4gY2hhbmdlZFxuICAgKiBAZXZlbnQgdGV4dHRyYWNrY2hhbmdlXG4gICAqL1xuICBvblRleHRUcmFja0NoYW5nZSgpIHtcbiAgICB0aGlzLnRyaWdnZXIoJ3RleHR0cmFja2NoYW5nZScpO1xuICB9XG5cbiAgLyoqXG4gICAqIE9iamVjdCBmb3IgY2FjaGVkIHZhbHVlcy5cbiAgICovXG4gIGdldENhY2hlKCkge1xuICAgIHJldHVybiB0aGlzLmNhY2hlXztcbiAgfVxuXG4gIC8vIFBhc3MgdmFsdWVzIHRvIHRoZSBwbGF5YmFjayB0ZWNoXG4gIHRlY2hDYWxsKG1ldGhvZCwgYXJnKSB7XG4gICAgLy8gSWYgaXQncyBub3QgcmVhZHkgeWV0LCBjYWxsIG1ldGhvZCB3aGVuIGl0IGlzXG4gICAgaWYgKHRoaXMudGVjaCAmJiAhdGhpcy50ZWNoLmlzUmVhZHlfKSB7XG4gICAgICB0aGlzLnRlY2gucmVhZHkoZnVuY3Rpb24oKXtcbiAgICAgICAgdGhpc1ttZXRob2RdKGFyZyk7XG4gICAgICB9KTtcblxuICAgIC8vIE90aGVyd2lzZSBjYWxsIG1ldGhvZCBub3dcbiAgICB9IGVsc2Uge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdGhpcy50ZWNoW21ldGhvZF0oYXJnKTtcbiAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICBMaWIubG9nKGUpO1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIEdldCBjYWxscyBjYW4ndCB3YWl0IGZvciB0aGUgdGVjaCwgYW5kIHNvbWV0aW1lcyBkb24ndCBuZWVkIHRvLlxuICB0ZWNoR2V0KG1ldGhvZCkge1xuICAgIGlmICh0aGlzLnRlY2ggJiYgdGhpcy50ZWNoLmlzUmVhZHlfKSB7XG5cbiAgICAgIC8vIEZsYXNoIGxpa2VzIHRvIGRpZSBhbmQgcmVsb2FkIHdoZW4geW91IGhpZGUgb3IgcmVwb3NpdGlvbiBpdC5cbiAgICAgIC8vIEluIHRoZXNlIGNhc2VzIHRoZSBvYmplY3QgbWV0aG9kcyBnbyBhd2F5IGFuZCB3ZSBnZXQgZXJyb3JzLlxuICAgICAgLy8gV2hlbiB0aGF0IGhhcHBlbnMgd2UnbGwgY2F0Y2ggdGhlIGVycm9ycyBhbmQgaW5mb3JtIHRlY2ggdGhhdCBpdCdzIG5vdCByZWFkeSBhbnkgbW9yZS5cbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRlY2hbbWV0aG9kXSgpO1xuICAgICAgfSBjYXRjaChlKSB7XG4gICAgICAgIC8vIFdoZW4gYnVpbGRpbmcgYWRkaXRpb25hbCB0ZWNoIGxpYnMsIGFuIGV4cGVjdGVkIG1ldGhvZCBtYXkgbm90IGJlIGRlZmluZWQgeWV0XG4gICAgICAgIGlmICh0aGlzLnRlY2hbbWV0aG9kXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgTGliLmxvZyhgVmlkZW8uanM6ICR7bWV0aG9kfSBtZXRob2Qgbm90IGRlZmluZWQgZm9yICR7dGhpcy50ZWNoTmFtZX0gcGxheWJhY2sgdGVjaG5vbG9neS5gLCBlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBXaGVuIGEgbWV0aG9kIGlzbid0IGF2YWlsYWJsZSBvbiB0aGUgb2JqZWN0IGl0IHRocm93cyBhIFR5cGVFcnJvclxuICAgICAgICAgIGlmIChlLm5hbWUgPT09ICdUeXBlRXJyb3InKSB7XG4gICAgICAgICAgICBMaWIubG9nKGBWaWRlby5qczogJHttZXRob2R9IHVuYXZhaWxhYmxlIG9uICR7dGhpcy50ZWNoTmFtZX0gcGxheWJhY2sgdGVjaG5vbG9neSBlbGVtZW50LmAsIGUpO1xuICAgICAgICAgICAgdGhpcy50ZWNoLmlzUmVhZHlfID0gZmFsc2U7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIExpYi5sb2coZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIHN0YXJ0IG1lZGlhIHBsYXliYWNrXG4gICAqXG4gICAqICAgICBteVBsYXllci5wbGF5KCk7XG4gICAqXG4gICAqIEByZXR1cm4ge1BsYXllcn0gc2VsZlxuICAgKi9cbiAgcGxheSgpIHtcbiAgICB0aGlzLnRlY2hDYWxsKCdwbGF5Jyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogUGF1c2UgdGhlIHZpZGVvIHBsYXliYWNrXG4gICAqXG4gICAqICAgICBteVBsYXllci5wYXVzZSgpO1xuICAgKlxuICAgKiBAcmV0dXJuIHtQbGF5ZXJ9IHNlbGZcbiAgICovXG4gIHBhdXNlKCkge1xuICAgIHRoaXMudGVjaENhbGwoJ3BhdXNlJyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgdGhlIHBsYXllciBpcyBwYXVzZWRcbiAgICpcbiAgICogICAgIHZhciBpc1BhdXNlZCA9IG15UGxheWVyLnBhdXNlZCgpO1xuICAgKiAgICAgdmFyIGlzUGxheWluZyA9ICFteVBsYXllci5wYXVzZWQoKTtcbiAgICpcbiAgICogQHJldHVybiB7Qm9vbGVhbn0gZmFsc2UgaWYgdGhlIG1lZGlhIGlzIGN1cnJlbnRseSBwbGF5aW5nLCBvciB0cnVlIG90aGVyd2lzZVxuICAgKi9cbiAgcGF1c2VkKCkge1xuICAgIC8vIFRoZSBpbml0aWFsIHN0YXRlIG9mIHBhdXNlZCBzaG91bGQgYmUgdHJ1ZSAoaW4gU2FmYXJpIGl0J3MgYWN0dWFsbHkgZmFsc2UpXG4gICAgcmV0dXJuICh0aGlzLnRlY2hHZXQoJ3BhdXNlZCcpID09PSBmYWxzZSkgPyBmYWxzZSA6IHRydWU7XG4gIH1cblxuICAvKipcbiAgKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSB1c2VyIGlzIFwic2NydWJiaW5nXCIuIFNjcnViYmluZyBpcyB3aGVuIHRoZSB1c2VyXG4gICogaGFzIGNsaWNrZWQgdGhlIHByb2dyZXNzIGJhciBoYW5kbGUgYW5kIGlzIGRyYWdnaW5nIGl0IGFsb25nIHRoZSBwcm9ncmVzcyBiYXIuXG4gICogQHBhcmFtICB7Qm9vbGVhbn0gaXNTY3J1YmJpbmcgICBUcnVlL2ZhbHNlIHRoZSB1c2VyIGlzIHNjcnViYmluZ1xuICAqIEByZXR1cm4ge0Jvb2xlYW59ICAgICAgICAgICAgICAgVGhlIHNjcnViYmluZyBzdGF0dXMgd2hlbiBnZXR0aW5nXG4gICogQHJldHVybiB7T2JqZWN0fSAgICAgICAgICAgICAgICBUaGUgcGxheWVyIHdoZW4gc2V0dGluZ1xuICAqL1xuICBzY3J1YmJpbmcoaXNTY3J1YmJpbmcpIHtcbiAgICBpZiAoaXNTY3J1YmJpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5zY3J1YmJpbmdfID0gISFpc1NjcnViYmluZztcblxuICAgICAgaWYgKGlzU2NydWJiaW5nKSB7XG4gICAgICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy1zY3J1YmJpbmcnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVtb3ZlQ2xhc3MoJ3Zqcy1zY3J1YmJpbmcnKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc2NydWJiaW5nXztcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgb3Igc2V0IHRoZSBjdXJyZW50IHRpbWUgKGluIHNlY29uZHMpXG4gICAqXG4gICAqICAgICAvLyBnZXRcbiAgICogICAgIHZhciB3aGVyZVlvdUF0ID0gbXlQbGF5ZXIuY3VycmVudFRpbWUoKTtcbiAgICpcbiAgICogICAgIC8vIHNldFxuICAgKiAgICAgbXlQbGF5ZXIuY3VycmVudFRpbWUoMTIwKTsgLy8gMiBtaW51dGVzIGludG8gdGhlIHZpZGVvXG4gICAqXG4gICAqIEBwYXJhbSAge051bWJlcnxTdHJpbmc9fSBzZWNvbmRzIFRoZSB0aW1lIHRvIHNlZWsgdG9cbiAgICogQHJldHVybiB7TnVtYmVyfSAgICAgICAgVGhlIHRpbWUgaW4gc2Vjb25kcywgd2hlbiBub3Qgc2V0dGluZ1xuICAgKiBAcmV0dXJuIHtQbGF5ZXJ9ICAgIHNlbGYsIHdoZW4gdGhlIGN1cnJlbnQgdGltZSBpcyBzZXRcbiAgICovXG4gIGN1cnJlbnRUaW1lKHNlY29uZHMpIHtcbiAgICBpZiAoc2Vjb25kcyAhPT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgIHRoaXMudGVjaENhbGwoJ3NldEN1cnJlbnRUaW1lJywgc2Vjb25kcyk7XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIGNhY2hlIGxhc3QgY3VycmVudFRpbWUgYW5kIHJldHVybi4gZGVmYXVsdCB0byAwIHNlY29uZHNcbiAgICAvL1xuICAgIC8vIENhY2hpbmcgdGhlIGN1cnJlbnRUaW1lIGlzIG1lYW50IHRvIHByZXZlbnQgYSBtYXNzaXZlIGFtb3VudCBvZiByZWFkcyBvbiB0aGUgdGVjaCdzXG4gICAgLy8gY3VycmVudFRpbWUgd2hlbiBzY3J1YmJpbmcsIGJ1dCBtYXkgbm90IHByb3ZpZGUgbXVjaCBwZXJmb3JtYW5jZSBiZW5lZml0IGFmdGVyYWxsLlxuICAgIC8vIFNob3VsZCBiZSB0ZXN0ZWQuIEFsc28gc29tZXRoaW5nIGhhcyB0byByZWFkIHRoZSBhY3R1YWwgY3VycmVudCB0aW1lIG9yIHRoZSBjYWNoZSB3aWxsXG4gICAgLy8gbmV2ZXIgZ2V0IHVwZGF0ZWQuXG4gICAgcmV0dXJuIHRoaXMuY2FjaGVfLmN1cnJlbnRUaW1lID0gKHRoaXMudGVjaEdldCgnY3VycmVudFRpbWUnKSB8fCAwKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGxlbmd0aCBpbiB0aW1lIG9mIHRoZSB2aWRlbyBpbiBzZWNvbmRzXG4gICAqXG4gICAqICAgICB2YXIgbGVuZ3RoT2ZWaWRlbyA9IG15UGxheWVyLmR1cmF0aW9uKCk7XG4gICAqXG4gICAqICoqTk9URSoqOiBUaGUgdmlkZW8gbXVzdCBoYXZlIHN0YXJ0ZWQgbG9hZGluZyBiZWZvcmUgdGhlIGR1cmF0aW9uIGNhbiBiZVxuICAgKiBrbm93biwgYW5kIGluIHRoZSBjYXNlIG9mIEZsYXNoLCBtYXkgbm90IGJlIGtub3duIHVudGlsIHRoZSB2aWRlbyBzdGFydHNcbiAgICogcGxheWluZy5cbiAgICpcbiAgICogQHJldHVybiB7TnVtYmVyfSBUaGUgZHVyYXRpb24gb2YgdGhlIHZpZGVvIGluIHNlY29uZHNcbiAgICovXG4gIGR1cmF0aW9uKHNlY29uZHMpIHtcbiAgICBpZiAoc2Vjb25kcyAhPT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgIC8vIGNhY2hlIHRoZSBsYXN0IHNldCB2YWx1ZSBmb3Igb3B0aW1pemVkIHNjcnViYmluZyAoZXNwLiBGbGFzaClcbiAgICAgIHRoaXMuY2FjaGVfLmR1cmF0aW9uID0gcGFyc2VGbG9hdChzZWNvbmRzKTtcblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuY2FjaGVfLmR1cmF0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMudXBkYXRlRHVyYXRpb24oKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5jYWNoZV8uZHVyYXRpb24gfHwgMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGVzIGhvdyBtdWNoIHRpbWUgaXMgbGVmdC5cbiAgICpcbiAgICogICAgIHZhciB0aW1lTGVmdCA9IG15UGxheWVyLnJlbWFpbmluZ1RpbWUoKTtcbiAgICpcbiAgICogTm90IGEgbmF0aXZlIHZpZGVvIGVsZW1lbnQgZnVuY3Rpb24sIGJ1dCB1c2VmdWxcbiAgICogQHJldHVybiB7TnVtYmVyfSBUaGUgdGltZSByZW1haW5pbmcgaW4gc2Vjb25kc1xuICAgKi9cbiAgcmVtYWluaW5nVGltZSgpIHtcbiAgICByZXR1cm4gdGhpcy5kdXJhdGlvbigpIC0gdGhpcy5jdXJyZW50VGltZSgpO1xuICB9XG5cbiAgLy8gaHR0cDovL2Rldi53My5vcmcvaHRtbDUvc3BlYy92aWRlby5odG1sI2RvbS1tZWRpYS1idWZmZXJlZFxuICAvLyBCdWZmZXJlZCByZXR1cm5zIGEgdGltZXJhbmdlIG9iamVjdC5cbiAgLy8gS2luZCBvZiBsaWtlIGFuIGFycmF5IG9mIHBvcnRpb25zIG9mIHRoZSB2aWRlbyB0aGF0IGhhdmUgYmVlbiBkb3dubG9hZGVkLlxuXG4gIC8qKlxuICAgKiBHZXQgYSBUaW1lUmFuZ2Ugb2JqZWN0IHdpdGggdGhlIHRpbWVzIG9mIHRoZSB2aWRlbyB0aGF0IGhhdmUgYmVlbiBkb3dubG9hZGVkXG4gICAqXG4gICAqIElmIHlvdSBqdXN0IHdhbnQgdGhlIHBlcmNlbnQgb2YgdGhlIHZpZGVvIHRoYXQncyBiZWVuIGRvd25sb2FkZWQsXG4gICAqIHVzZSBidWZmZXJlZFBlcmNlbnQuXG4gICAqXG4gICAqICAgICAvLyBOdW1iZXIgb2YgZGlmZmVyZW50IHJhbmdlcyBvZiB0aW1lIGhhdmUgYmVlbiBidWZmZXJlZC4gVXN1YWxseSAxLlxuICAgKiAgICAgbnVtYmVyT2ZSYW5nZXMgPSBidWZmZXJlZFRpbWVSYW5nZS5sZW5ndGgsXG4gICAqXG4gICAqICAgICAvLyBUaW1lIGluIHNlY29uZHMgd2hlbiB0aGUgZmlyc3QgcmFuZ2Ugc3RhcnRzLiBVc3VhbGx5IDAuXG4gICAqICAgICBmaXJzdFJhbmdlU3RhcnQgPSBidWZmZXJlZFRpbWVSYW5nZS5zdGFydCgwKSxcbiAgICpcbiAgICogICAgIC8vIFRpbWUgaW4gc2Vjb25kcyB3aGVuIHRoZSBmaXJzdCByYW5nZSBlbmRzXG4gICAqICAgICBmaXJzdFJhbmdlRW5kID0gYnVmZmVyZWRUaW1lUmFuZ2UuZW5kKDApLFxuICAgKlxuICAgKiAgICAgLy8gTGVuZ3RoIGluIHNlY29uZHMgb2YgdGhlIGZpcnN0IHRpbWUgcmFuZ2VcbiAgICogICAgIGZpcnN0UmFuZ2VMZW5ndGggPSBmaXJzdFJhbmdlRW5kIC0gZmlyc3RSYW5nZVN0YXJ0O1xuICAgKlxuICAgKiBAcmV0dXJuIHtPYmplY3R9IEEgbW9jayBUaW1lUmFuZ2Ugb2JqZWN0IChmb2xsb3dpbmcgSFRNTCBzcGVjKVxuICAgKi9cbiAgYnVmZmVyZWQoKSB7XG4gICAgdmFyIGJ1ZmZlcmVkID0gdGhpcy50ZWNoR2V0KCdidWZmZXJlZCcpO1xuXG4gICAgaWYgKCFidWZmZXJlZCB8fCAhYnVmZmVyZWQubGVuZ3RoKSB7XG4gICAgICBidWZmZXJlZCA9IExpYi5jcmVhdGVUaW1lUmFuZ2UoMCwwKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYnVmZmVyZWQ7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBwZXJjZW50IChhcyBhIGRlY2ltYWwpIG9mIHRoZSB2aWRlbyB0aGF0J3MgYmVlbiBkb3dubG9hZGVkXG4gICAqXG4gICAqICAgICB2YXIgaG93TXVjaElzRG93bmxvYWRlZCA9IG15UGxheWVyLmJ1ZmZlcmVkUGVyY2VudCgpO1xuICAgKlxuICAgKiAwIG1lYW5zIG5vbmUsIDEgbWVhbnMgYWxsLlxuICAgKiAoVGhpcyBtZXRob2QgaXNuJ3QgaW4gdGhlIEhUTUw1IHNwZWMsIGJ1dCBpdCdzIHZlcnkgY29udmVuaWVudClcbiAgICpcbiAgICogQHJldHVybiB7TnVtYmVyfSBBIGRlY2ltYWwgYmV0d2VlbiAwIGFuZCAxIHJlcHJlc2VudGluZyB0aGUgcGVyY2VudFxuICAgKi9cbiAgYnVmZmVyZWRQZXJjZW50KCkge1xuICAgIHZhciBkdXJhdGlvbiA9IHRoaXMuZHVyYXRpb24oKSxcbiAgICAgICAgYnVmZmVyZWQgPSB0aGlzLmJ1ZmZlcmVkKCksXG4gICAgICAgIGJ1ZmZlcmVkRHVyYXRpb24gPSAwLFxuICAgICAgICBzdGFydCwgZW5kO1xuXG4gICAgaWYgKCFkdXJhdGlvbikge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaT0wOyBpPGJ1ZmZlcmVkLmxlbmd0aDsgaSsrKXtcbiAgICAgIHN0YXJ0ID0gYnVmZmVyZWQuc3RhcnQoaSk7XG4gICAgICBlbmQgICA9IGJ1ZmZlcmVkLmVuZChpKTtcblxuICAgICAgLy8gYnVmZmVyZWQgZW5kIGNhbiBiZSBiaWdnZXIgdGhhbiBkdXJhdGlvbiBieSBhIHZlcnkgc21hbGwgZnJhY3Rpb25cbiAgICAgIGlmIChlbmQgPiBkdXJhdGlvbikge1xuICAgICAgICBlbmQgPSBkdXJhdGlvbjtcbiAgICAgIH1cblxuICAgICAgYnVmZmVyZWREdXJhdGlvbiArPSBlbmQgLSBzdGFydDtcbiAgICB9XG5cbiAgICByZXR1cm4gYnVmZmVyZWREdXJhdGlvbiAvIGR1cmF0aW9uO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgZW5kaW5nIHRpbWUgb2YgdGhlIGxhc3QgYnVmZmVyZWQgdGltZSByYW5nZVxuICAgKlxuICAgKiBUaGlzIGlzIHVzZWQgaW4gdGhlIHByb2dyZXNzIGJhciB0byBlbmNhcHN1bGF0ZSBhbGwgdGltZSByYW5nZXMuXG4gICAqIEByZXR1cm4ge051bWJlcn0gVGhlIGVuZCBvZiB0aGUgbGFzdCBidWZmZXJlZCB0aW1lIHJhbmdlXG4gICAqL1xuICBidWZmZXJlZEVuZCgpIHtcbiAgICB2YXIgYnVmZmVyZWQgPSB0aGlzLmJ1ZmZlcmVkKCksXG4gICAgICAgIGR1cmF0aW9uID0gdGhpcy5kdXJhdGlvbigpLFxuICAgICAgICBlbmQgPSBidWZmZXJlZC5lbmQoYnVmZmVyZWQubGVuZ3RoLTEpO1xuXG4gICAgaWYgKGVuZCA+IGR1cmF0aW9uKSB7XG4gICAgICBlbmQgPSBkdXJhdGlvbjtcbiAgICB9XG5cbiAgICByZXR1cm4gZW5kO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBvciBzZXQgdGhlIGN1cnJlbnQgdm9sdW1lIG9mIHRoZSBtZWRpYVxuICAgKlxuICAgKiAgICAgLy8gZ2V0XG4gICAqICAgICB2YXIgaG93TG91ZElzSXQgPSBteVBsYXllci52b2x1bWUoKTtcbiAgICpcbiAgICogICAgIC8vIHNldFxuICAgKiAgICAgbXlQbGF5ZXIudm9sdW1lKDAuNSk7IC8vIFNldCB2b2x1bWUgdG8gaGFsZlxuICAgKlxuICAgKiAwIGlzIG9mZiAobXV0ZWQpLCAxLjAgaXMgYWxsIHRoZSB3YXkgdXAsIDAuNSBpcyBoYWxmIHdheS5cbiAgICpcbiAgICogQHBhcmFtICB7TnVtYmVyfSBwZXJjZW50QXNEZWNpbWFsIFRoZSBuZXcgdm9sdW1lIGFzIGEgZGVjaW1hbCBwZXJjZW50XG4gICAqIEByZXR1cm4ge051bWJlcn0gICAgICAgICAgICAgICAgICBUaGUgY3VycmVudCB2b2x1bWUsIHdoZW4gZ2V0dGluZ1xuICAgKiBAcmV0dXJuIHtQbGF5ZXJ9ICAgICAgICAgICAgICBzZWxmLCB3aGVuIHNldHRpbmdcbiAgICovXG4gIHZvbHVtZShwZXJjZW50QXNEZWNpbWFsKSB7XG4gICAgbGV0IHZvbDtcblxuICAgIGlmIChwZXJjZW50QXNEZWNpbWFsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZvbCA9IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIHBhcnNlRmxvYXQocGVyY2VudEFzRGVjaW1hbCkpKTsgLy8gRm9yY2UgdmFsdWUgdG8gYmV0d2VlbiAwIGFuZCAxXG4gICAgICB0aGlzLmNhY2hlXy52b2x1bWUgPSB2b2w7XG4gICAgICB0aGlzLnRlY2hDYWxsKCdzZXRWb2x1bWUnLCB2b2wpO1xuICAgICAgTGliLnNldExvY2FsU3RvcmFnZSgndm9sdW1lJywgdm9sKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIERlZmF1bHQgdG8gMSB3aGVuIHJldHVybmluZyBjdXJyZW50IHZvbHVtZS5cbiAgICB2b2wgPSBwYXJzZUZsb2F0KHRoaXMudGVjaEdldCgndm9sdW1lJykpO1xuICAgIHJldHVybiAoaXNOYU4odm9sKSkgPyAxIDogdm9sO1xuICB9XG5cblxuICAvKipcbiAgICogR2V0IHRoZSBjdXJyZW50IG11dGVkIHN0YXRlLCBvciB0dXJuIG11dGUgb24gb3Igb2ZmXG4gICAqXG4gICAqICAgICAvLyBnZXRcbiAgICogICAgIHZhciBpc1ZvbHVtZU11dGVkID0gbXlQbGF5ZXIubXV0ZWQoKTtcbiAgICpcbiAgICogICAgIC8vIHNldFxuICAgKiAgICAgbXlQbGF5ZXIubXV0ZWQodHJ1ZSk7IC8vIG11dGUgdGhlIHZvbHVtZVxuICAgKlxuICAgKiBAcGFyYW0gIHtCb29sZWFuPX0gbXV0ZWQgVHJ1ZSB0byBtdXRlLCBmYWxzZSB0byB1bm11dGVcbiAgICogQHJldHVybiB7Qm9vbGVhbn0gVHJ1ZSBpZiBtdXRlIGlzIG9uLCBmYWxzZSBpZiBub3QsIHdoZW4gZ2V0dGluZ1xuICAgKiBAcmV0dXJuIHtQbGF5ZXJ9IHNlbGYsIHdoZW4gc2V0dGluZyBtdXRlXG4gICAqL1xuICBtdXRlZChtdXRlZCkge1xuICAgIGlmIChtdXRlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLnRlY2hDYWxsKCdzZXRNdXRlZCcsIG11dGVkKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy50ZWNoR2V0KCdtdXRlZCcpIHx8IGZhbHNlOyAvLyBEZWZhdWx0IHRvIGZhbHNlXG4gIH1cblxuICAvLyBDaGVjayBpZiBjdXJyZW50IHRlY2ggY2FuIHN1cHBvcnQgbmF0aXZlIGZ1bGxzY3JlZW5cbiAgLy8gKGUuZy4gd2l0aCBidWlsdCBpbiBjb250cm9scyBsaWtlIGlPUywgc28gbm90IG91ciBmbGFzaCBzd2YpXG4gIHN1cHBvcnRzRnVsbFNjcmVlbigpIHtcbiAgICByZXR1cm4gdGhpcy50ZWNoR2V0KCdzdXBwb3J0c0Z1bGxTY3JlZW4nKSB8fCBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiB0aGUgcGxheWVyIGlzIGluIGZ1bGxzY3JlZW4gbW9kZVxuICAgKlxuICAgKiAgICAgLy8gZ2V0XG4gICAqICAgICB2YXIgZnVsbHNjcmVlbk9yTm90ID0gbXlQbGF5ZXIuaXNGdWxsc2NyZWVuKCk7XG4gICAqXG4gICAqICAgICAvLyBzZXRcbiAgICogICAgIG15UGxheWVyLmlzRnVsbHNjcmVlbih0cnVlKTsgLy8gdGVsbCB0aGUgcGxheWVyIGl0J3MgaW4gZnVsbHNjcmVlblxuICAgKlxuICAgKiBOT1RFOiBBcyBvZiB0aGUgbGF0ZXN0IEhUTUw1IHNwZWMsIGlzRnVsbHNjcmVlbiBpcyBubyBsb25nZXIgYW4gb2ZmaWNpYWxcbiAgICogcHJvcGVydHkgYW5kIGluc3RlYWQgZG9jdW1lbnQuZnVsbHNjcmVlbkVsZW1lbnQgaXMgdXNlZC4gQnV0IGlzRnVsbHNjcmVlbiBpc1xuICAgKiBzdGlsbCBhIHZhbHVhYmxlIHByb3BlcnR5IGZvciBpbnRlcm5hbCBwbGF5ZXIgd29ya2luZ3MuXG4gICAqXG4gICAqIEBwYXJhbSAge0Jvb2xlYW49fSBpc0ZTIFVwZGF0ZSB0aGUgcGxheWVyJ3MgZnVsbHNjcmVlbiBzdGF0ZVxuICAgKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIGZ1bGxzY3JlZW4sIGZhbHNlIGlmIG5vdFxuICAgKiBAcmV0dXJuIHtQbGF5ZXJ9IHNlbGYsIHdoZW4gc2V0dGluZ1xuICAgKi9cbiAgaXNGdWxsc2NyZWVuKGlzRlMpIHtcbiAgICBpZiAoaXNGUyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLmlzRnVsbHNjcmVlbl8gPSAhIWlzRlM7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmV0dXJuICEhdGhpcy5pc0Z1bGxzY3JlZW5fO1xuICB9XG5cbiAgLyoqXG4gICAqIE9sZCBuYW1pbmcgZm9yIGlzRnVsbHNjcmVlbigpXG4gICAqIEBkZXByZWNhdGVkIGZvciBsb3dlcmNhc2UgJ3MnIHZlcnNpb25cbiAgICovXG4gIGlzRnVsbFNjcmVlbihpc0ZTKSB7XG4gICAgTGliLmxvZy53YXJuKCdwbGF5ZXIuaXNGdWxsU2NyZWVuKCkgaGFzIGJlZW4gZGVwcmVjYXRlZCwgdXNlIHBsYXllci5pc0Z1bGxzY3JlZW4oKSB3aXRoIGEgbG93ZXJjYXNlIFwic1wiKScpO1xuICAgIHJldHVybiB0aGlzLmlzRnVsbHNjcmVlbihpc0ZTKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbmNyZWFzZSB0aGUgc2l6ZSBvZiB0aGUgdmlkZW8gdG8gZnVsbCBzY3JlZW5cbiAgICpcbiAgICogICAgIG15UGxheWVyLnJlcXVlc3RGdWxsc2NyZWVuKCk7XG4gICAqXG4gICAqIEluIHNvbWUgYnJvd3NlcnMsIGZ1bGwgc2NyZWVuIGlzIG5vdCBzdXBwb3J0ZWQgbmF0aXZlbHksIHNvIGl0IGVudGVyc1xuICAgKiBcImZ1bGwgd2luZG93IG1vZGVcIiwgd2hlcmUgdGhlIHZpZGVvIGZpbGxzIHRoZSBicm93c2VyIHdpbmRvdy5cbiAgICogSW4gYnJvd3NlcnMgYW5kIGRldmljZXMgdGhhdCBzdXBwb3J0IG5hdGl2ZSBmdWxsIHNjcmVlbiwgc29tZXRpbWVzIHRoZVxuICAgKiBicm93c2VyJ3MgZGVmYXVsdCBjb250cm9scyB3aWxsIGJlIHNob3duLCBhbmQgbm90IHRoZSBWaWRlby5qcyBjdXN0b20gc2tpbi5cbiAgICogVGhpcyBpbmNsdWRlcyBtb3N0IG1vYmlsZSBkZXZpY2VzIChpT1MsIEFuZHJvaWQpIGFuZCBvbGRlciB2ZXJzaW9ucyBvZlxuICAgKiBTYWZhcmkuXG4gICAqXG4gICAqIEByZXR1cm4ge1BsYXllcn0gc2VsZlxuICAgKi9cbiAgcmVxdWVzdEZ1bGxzY3JlZW4oKSB7XG4gICAgdmFyIGZzQXBpID0gRnVsbHNjcmVlbkFwaTtcblxuICAgIHRoaXMuaXNGdWxsc2NyZWVuKHRydWUpO1xuXG4gICAgaWYgKGZzQXBpKSB7XG4gICAgICAvLyB0aGUgYnJvd3NlciBzdXBwb3J0cyBnb2luZyBmdWxsc2NyZWVuIGF0IHRoZSBlbGVtZW50IGxldmVsIHNvIHdlIGNhblxuICAgICAgLy8gdGFrZSB0aGUgY29udHJvbHMgZnVsbHNjcmVlbiBhcyB3ZWxsIGFzIHRoZSB2aWRlb1xuXG4gICAgICAvLyBUcmlnZ2VyIGZ1bGxzY3JlZW5jaGFuZ2UgZXZlbnQgYWZ0ZXIgY2hhbmdlXG4gICAgICAvLyBXZSBoYXZlIHRvIHNwZWNpZmljYWxseSBhZGQgdGhpcyBlYWNoIHRpbWUsIGFuZCByZW1vdmVcbiAgICAgIC8vIHdoZW4gY2FuY2VsaW5nIGZ1bGxzY3JlZW4uIE90aGVyd2lzZSBpZiB0aGVyZSdzIG11bHRpcGxlXG4gICAgICAvLyBwbGF5ZXJzIG9uIGEgcGFnZSwgdGhleSB3b3VsZCBhbGwgYmUgcmVhY3RpbmcgdG8gdGhlIHNhbWUgZnVsbHNjcmVlblxuICAgICAgLy8gZXZlbnRzXG4gICAgICBFdmVudHMub24oZG9jdW1lbnQsIGZzQXBpWydmdWxsc2NyZWVuY2hhbmdlJ10sIExpYi5iaW5kKHRoaXMsIGZ1bmN0aW9uIGRvY3VtZW50RnVsbHNjcmVlbkNoYW5nZShlKXtcbiAgICAgICAgdGhpcy5pc0Z1bGxzY3JlZW4oZG9jdW1lbnRbZnNBcGkuZnVsbHNjcmVlbkVsZW1lbnRdKTtcblxuICAgICAgICAvLyBJZiBjYW5jZWxsaW5nIGZ1bGxzY3JlZW4sIHJlbW92ZSBldmVudCBsaXN0ZW5lci5cbiAgICAgICAgaWYgKHRoaXMuaXNGdWxsc2NyZWVuKCkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgRXZlbnRzLm9mZihkb2N1bWVudCwgZnNBcGlbJ2Z1bGxzY3JlZW5jaGFuZ2UnXSwgZG9jdW1lbnRGdWxsc2NyZWVuQ2hhbmdlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudHJpZ2dlcignZnVsbHNjcmVlbmNoYW5nZScpO1xuICAgICAgfSkpO1xuXG4gICAgICB0aGlzLmVsX1tmc0FwaS5yZXF1ZXN0RnVsbHNjcmVlbl0oKTtcblxuICAgIH0gZWxzZSBpZiAodGhpcy50ZWNoLnN1cHBvcnRzRnVsbFNjcmVlbigpKSB7XG4gICAgICAvLyB3ZSBjYW4ndCB0YWtlIHRoZSB2aWRlby5qcyBjb250cm9scyBmdWxsc2NyZWVuIGJ1dCB3ZSBjYW4gZ28gZnVsbHNjcmVlblxuICAgICAgLy8gd2l0aCBuYXRpdmUgY29udHJvbHNcbiAgICAgIHRoaXMudGVjaENhbGwoJ2VudGVyRnVsbFNjcmVlbicpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBmdWxsc2NyZWVuIGlzbid0IHN1cHBvcnRlZCBzbyB3ZSdsbCBqdXN0IHN0cmV0Y2ggdGhlIHZpZGVvIGVsZW1lbnQgdG9cbiAgICAgIC8vIGZpbGwgdGhlIHZpZXdwb3J0XG4gICAgICB0aGlzLmVudGVyRnVsbFdpbmRvdygpO1xuICAgICAgdGhpcy50cmlnZ2VyKCdmdWxsc2NyZWVuY2hhbmdlJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogT2xkIG5hbWluZyBmb3IgcmVxdWVzdEZ1bGxzY3JlZW5cbiAgICogQGRlcHJlY2F0ZWQgZm9yIGxvd2VyIGNhc2UgJ3MnIHZlcnNpb25cbiAgICovXG4gIHJlcXVlc3RGdWxsU2NyZWVuKCkge1xuICAgIExpYi5sb2cud2FybigncGxheWVyLnJlcXVlc3RGdWxsU2NyZWVuKCkgaGFzIGJlZW4gZGVwcmVjYXRlZCwgdXNlIHBsYXllci5yZXF1ZXN0RnVsbHNjcmVlbigpIHdpdGggYSBsb3dlcmNhc2UgXCJzXCIpJyk7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdEZ1bGxzY3JlZW4oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIHZpZGVvIHRvIGl0cyBub3JtYWwgc2l6ZSBhZnRlciBoYXZpbmcgYmVlbiBpbiBmdWxsIHNjcmVlbiBtb2RlXG4gICAqXG4gICAqICAgICBteVBsYXllci5leGl0RnVsbHNjcmVlbigpO1xuICAgKlxuICAgKiBAcmV0dXJuIHtQbGF5ZXJ9IHNlbGZcbiAgICovXG4gIGV4aXRGdWxsc2NyZWVuKCkge1xuICAgIHZhciBmc0FwaSA9IEZ1bGxzY3JlZW5BcGk7XG4gICAgdGhpcy5pc0Z1bGxzY3JlZW4oZmFsc2UpO1xuXG4gICAgLy8gQ2hlY2sgZm9yIGJyb3dzZXIgZWxlbWVudCBmdWxsc2NyZWVuIHN1cHBvcnRcbiAgICBpZiAoZnNBcGkpIHtcbiAgICAgIGRvY3VtZW50W2ZzQXBpLmV4aXRGdWxsc2NyZWVuXSgpO1xuICAgIH0gZWxzZSBpZiAodGhpcy50ZWNoLnN1cHBvcnRzRnVsbFNjcmVlbigpKSB7XG4gICAgIHRoaXMudGVjaENhbGwoJ2V4aXRGdWxsU2NyZWVuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgdGhpcy5leGl0RnVsbFdpbmRvdygpO1xuICAgICB0aGlzLnRyaWdnZXIoJ2Z1bGxzY3JlZW5jaGFuZ2UnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBPbGQgbmFtaW5nIGZvciBleGl0RnVsbHNjcmVlblxuICAgKiBAZGVwcmVjYXRlZCBmb3IgZXhpdEZ1bGxzY3JlZW5cbiAgICovXG4gIGNhbmNlbEZ1bGxTY3JlZW4oKSB7XG4gICAgTGliLmxvZy53YXJuKCdwbGF5ZXIuY2FuY2VsRnVsbFNjcmVlbigpIGhhcyBiZWVuIGRlcHJlY2F0ZWQsIHVzZSBwbGF5ZXIuZXhpdEZ1bGxzY3JlZW4oKScpO1xuICAgIHJldHVybiB0aGlzLmV4aXRGdWxsc2NyZWVuKCk7XG4gIH1cblxuICAvLyBXaGVuIGZ1bGxzY3JlZW4gaXNuJ3Qgc3VwcG9ydGVkIHdlIGNhbiBzdHJldGNoIHRoZSB2aWRlbyBjb250YWluZXIgdG8gYXMgd2lkZSBhcyB0aGUgYnJvd3NlciB3aWxsIGxldCB1cy5cbiAgZW50ZXJGdWxsV2luZG93KCkge1xuICAgIHRoaXMuaXNGdWxsV2luZG93ID0gdHJ1ZTtcblxuICAgIC8vIFN0b3Jpbmcgb3JpZ2luYWwgZG9jIG92ZXJmbG93IHZhbHVlIHRvIHJldHVybiB0byB3aGVuIGZ1bGxzY3JlZW4gaXMgb2ZmXG4gICAgdGhpcy5kb2NPcmlnT3ZlcmZsb3cgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUub3ZlcmZsb3c7XG5cbiAgICAvLyBBZGQgbGlzdGVuZXIgZm9yIGVzYyBrZXkgdG8gZXhpdCBmdWxsc2NyZWVuXG4gICAgRXZlbnRzLm9uKGRvY3VtZW50LCAna2V5ZG93bicsIExpYi5iaW5kKHRoaXMsIHRoaXMuZnVsbFdpbmRvd09uRXNjS2V5KSk7XG5cbiAgICAvLyBIaWRlIGFueSBzY3JvbGwgYmFyc1xuICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xuXG4gICAgLy8gQXBwbHkgZnVsbHNjcmVlbiBzdHlsZXNcbiAgICBMaWIuYWRkQ2xhc3MoZG9jdW1lbnQuYm9keSwgJ3Zqcy1mdWxsLXdpbmRvdycpO1xuXG4gICAgdGhpcy50cmlnZ2VyKCdlbnRlckZ1bGxXaW5kb3cnKTtcbiAgfVxuXG4gIGZ1bGxXaW5kb3dPbkVzY0tleShldmVudCkge1xuICAgIGlmIChldmVudC5rZXlDb2RlID09PSAyNykge1xuICAgICAgaWYgKHRoaXMuaXNGdWxsc2NyZWVuKCkgPT09IHRydWUpIHtcbiAgICAgICAgdGhpcy5leGl0RnVsbHNjcmVlbigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5leGl0RnVsbFdpbmRvdygpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGV4aXRGdWxsV2luZG93KCkge1xuICAgIHRoaXMuaXNGdWxsV2luZG93ID0gZmFsc2U7XG4gICAgRXZlbnRzLm9mZihkb2N1bWVudCwgJ2tleWRvd24nLCB0aGlzLmZ1bGxXaW5kb3dPbkVzY0tleSk7XG5cbiAgICAvLyBVbmhpZGUgc2Nyb2xsIGJhcnMuXG4gICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLm92ZXJmbG93ID0gdGhpcy5kb2NPcmlnT3ZlcmZsb3c7XG5cbiAgICAvLyBSZW1vdmUgZnVsbHNjcmVlbiBzdHlsZXNcbiAgICBMaWIucmVtb3ZlQ2xhc3MoZG9jdW1lbnQuYm9keSwgJ3Zqcy1mdWxsLXdpbmRvdycpO1xuXG4gICAgLy8gUmVzaXplIHRoZSBib3gsIGNvbnRyb2xsZXIsIGFuZCBwb3N0ZXIgdG8gb3JpZ2luYWwgc2l6ZXNcbiAgICAvLyB0aGlzLnBvc2l0aW9uQWxsKCk7XG4gICAgdGhpcy50cmlnZ2VyKCdleGl0RnVsbFdpbmRvdycpO1xuICB9XG5cbiAgc2VsZWN0U291cmNlKHNvdXJjZXMpIHtcbiAgICAvLyBMb29wIHRocm91Z2ggZWFjaCBwbGF5YmFjayB0ZWNobm9sb2d5IGluIHRoZSBvcHRpb25zIG9yZGVyXG4gICAgZm9yICh2YXIgaT0wLGo9dGhpcy5vcHRpb25zX1sndGVjaE9yZGVyJ107aTxqLmxlbmd0aDtpKyspIHtcbiAgICAgIGxldCB0ZWNoTmFtZSA9IExpYi5jYXBpdGFsaXplKGpbaV0pO1xuICAgICAgbGV0IHRlY2ggPSBDb21wb25lbnQuZ2V0Q29tcG9uZW50KHRlY2hOYW1lKTtcblxuICAgICAgLy8gQ2hlY2sgaWYgdGhlIGN1cnJlbnQgdGVjaCBpcyBkZWZpbmVkIGJlZm9yZSBjb250aW51aW5nXG4gICAgICBpZiAoIXRlY2gpIHtcbiAgICAgICAgTGliLmxvZy5lcnJvcihgVGhlIFwiJHt0ZWNoTmFtZX1cIiB0ZWNoIGlzIHVuZGVmaW5lZC4gU2tpcHBlZCBicm93c2VyIHN1cHBvcnQgY2hlY2sgZm9yIHRoYXQgdGVjaC5gKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIC8vIENoZWNrIGlmIHRoZSBicm93c2VyIHN1cHBvcnRzIHRoaXMgdGVjaG5vbG9neVxuICAgICAgaWYgKHRlY2guaXNTdXBwb3J0ZWQoKSkge1xuICAgICAgICAvLyBMb29wIHRocm91Z2ggZWFjaCBzb3VyY2Ugb2JqZWN0XG4gICAgICAgIGZvciAodmFyIGE9MCxiPXNvdXJjZXM7YTxiLmxlbmd0aDthKyspIHtcbiAgICAgICAgICB2YXIgc291cmNlID0gYlthXTtcblxuICAgICAgICAgIC8vIENoZWNrIGlmIHNvdXJjZSBjYW4gYmUgcGxheWVkIHdpdGggdGhpcyB0ZWNobm9sb2d5XG4gICAgICAgICAgaWYgKHRlY2hbJ2NhblBsYXlTb3VyY2UnXShzb3VyY2UpKSB7XG4gICAgICAgICAgICByZXR1cm4geyBzb3VyY2U6IHNvdXJjZSwgdGVjaDogdGVjaE5hbWUgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogVGhlIHNvdXJjZSBmdW5jdGlvbiB1cGRhdGVzIHRoZSB2aWRlbyBzb3VyY2VcbiAgICpcbiAgICogVGhlcmUgYXJlIHRocmVlIHR5cGVzIG9mIHZhcmlhYmxlcyB5b3UgY2FuIHBhc3MgYXMgdGhlIGFyZ3VtZW50LlxuICAgKlxuICAgKiAqKlVSTCBTdHJpbmcqKjogQSBVUkwgdG8gdGhlIHRoZSB2aWRlbyBmaWxlLiBVc2UgdGhpcyBtZXRob2QgaWYgeW91IGFyZSBzdXJlXG4gICAqIHRoZSBjdXJyZW50IHBsYXliYWNrIHRlY2hub2xvZ3kgKEhUTUw1L0ZsYXNoKSBjYW4gc3VwcG9ydCB0aGUgc291cmNlIHlvdVxuICAgKiBwcm92aWRlLiBDdXJyZW50bHkgb25seSBNUDQgZmlsZXMgY2FuIGJlIHVzZWQgaW4gYm90aCBIVE1MNSBhbmQgRmxhc2guXG4gICAqXG4gICAqICAgICBteVBsYXllci5zcmMoXCJodHRwOi8vd3d3LmV4YW1wbGUuY29tL3BhdGgvdG8vdmlkZW8ubXA0XCIpO1xuICAgKlxuICAgKiAqKlNvdXJjZSBPYmplY3QgKG9yIGVsZW1lbnQpOioqIEEgamF2YXNjcmlwdCBvYmplY3QgY29udGFpbmluZyBpbmZvcm1hdGlvblxuICAgKiBhYm91dCB0aGUgc291cmNlIGZpbGUuIFVzZSB0aGlzIG1ldGhvZCBpZiB5b3Ugd2FudCB0aGUgcGxheWVyIHRvIGRldGVybWluZSBpZlxuICAgKiBpdCBjYW4gc3VwcG9ydCB0aGUgZmlsZSB1c2luZyB0aGUgdHlwZSBpbmZvcm1hdGlvbi5cbiAgICpcbiAgICogICAgIG15UGxheWVyLnNyYyh7IHR5cGU6IFwidmlkZW8vbXA0XCIsIHNyYzogXCJodHRwOi8vd3d3LmV4YW1wbGUuY29tL3BhdGgvdG8vdmlkZW8ubXA0XCIgfSk7XG4gICAqXG4gICAqICoqQXJyYXkgb2YgU291cmNlIE9iamVjdHM6KiogVG8gcHJvdmlkZSBtdWx0aXBsZSB2ZXJzaW9ucyBvZiB0aGUgc291cmNlIHNvXG4gICAqIHRoYXQgaXQgY2FuIGJlIHBsYXllZCB1c2luZyBIVE1MNSBhY3Jvc3MgYnJvd3NlcnMgeW91IGNhbiB1c2UgYW4gYXJyYXkgb2ZcbiAgICogc291cmNlIG9iamVjdHMuIFZpZGVvLmpzIHdpbGwgZGV0ZWN0IHdoaWNoIHZlcnNpb24gaXMgc3VwcG9ydGVkIGFuZCBsb2FkIHRoYXRcbiAgICogZmlsZS5cbiAgICpcbiAgICogICAgIG15UGxheWVyLnNyYyhbXG4gICAqICAgICAgIHsgdHlwZTogXCJ2aWRlby9tcDRcIiwgc3JjOiBcImh0dHA6Ly93d3cuZXhhbXBsZS5jb20vcGF0aC90by92aWRlby5tcDRcIiB9LFxuICAgKiAgICAgICB7IHR5cGU6IFwidmlkZW8vd2VibVwiLCBzcmM6IFwiaHR0cDovL3d3dy5leGFtcGxlLmNvbS9wYXRoL3RvL3ZpZGVvLndlYm1cIiB9LFxuICAgKiAgICAgICB7IHR5cGU6IFwidmlkZW8vb2dnXCIsIHNyYzogXCJodHRwOi8vd3d3LmV4YW1wbGUuY29tL3BhdGgvdG8vdmlkZW8ub2d2XCIgfVxuICAgKiAgICAgXSk7XG4gICAqXG4gICAqIEBwYXJhbSAge1N0cmluZ3xPYmplY3R8QXJyYXk9fSBzb3VyY2UgVGhlIHNvdXJjZSBVUkwsIG9iamVjdCwgb3IgYXJyYXkgb2Ygc291cmNlc1xuICAgKiBAcmV0dXJuIHtTdHJpbmd9IFRoZSBjdXJyZW50IHZpZGVvIHNvdXJjZSB3aGVuIGdldHRpbmdcbiAgICogQHJldHVybiB7U3RyaW5nfSBUaGUgcGxheWVyIHdoZW4gc2V0dGluZ1xuICAgKi9cbiAgc3JjKHNvdXJjZT10aGlzLnRlY2hHZXQoJ3NyYycpKSB7XG4gICAgbGV0IGN1cnJlbnRUZWNoID0gQ29tcG9uZW50LmdldENvbXBvbmVudCh0aGlzLnRlY2hOYW1lKTtcblxuICAgIC8vIGNhc2U6IEFycmF5IG9mIHNvdXJjZSBvYmplY3RzIHRvIGNob29zZSBmcm9tIGFuZCBwaWNrIHRoZSBiZXN0IHRvIHBsYXlcbiAgICBpZiAoTGliLm9iai5pc0FycmF5KHNvdXJjZSkpIHtcbiAgICAgIHRoaXMuc291cmNlTGlzdF8oc291cmNlKTtcblxuICAgIC8vIGNhc2U6IFVSTCBTdHJpbmcgKGh0dHA6Ly9teXZpZGVvLi4uKVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIHNvdXJjZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIC8vIGNyZWF0ZSBhIHNvdXJjZSBvYmplY3QgZnJvbSB0aGUgc3RyaW5nXG4gICAgICB0aGlzLnNyYyh7IHNyYzogc291cmNlIH0pO1xuXG4gICAgLy8gY2FzZTogU291cmNlIG9iamVjdCB7IHNyYzogJycsIHR5cGU6ICcnIC4uLiB9XG4gICAgfSBlbHNlIGlmIChzb3VyY2UgaW5zdGFuY2VvZiBPYmplY3QpIHtcbiAgICAgIC8vIGNoZWNrIGlmIHRoZSBzb3VyY2UgaGFzIGEgdHlwZSBhbmQgdGhlIGxvYWRlZCB0ZWNoIGNhbm5vdCBwbGF5IHRoZSBzb3VyY2VcbiAgICAgIC8vIGlmIHRoZXJlJ3Mgbm8gdHlwZSB3ZSdsbCBqdXN0IHRyeSB0aGUgY3VycmVudCB0ZWNoXG4gICAgICBpZiAoc291cmNlLnR5cGUgJiYgIWN1cnJlbnRUZWNoWydjYW5QbGF5U291cmNlJ10oc291cmNlKSkge1xuICAgICAgICAvLyBjcmVhdGUgYSBzb3VyY2UgbGlzdCB3aXRoIHRoZSBjdXJyZW50IHNvdXJjZSBhbmQgc2VuZCB0aHJvdWdoXG4gICAgICAgIC8vIHRoZSB0ZWNoIGxvb3AgdG8gY2hlY2sgZm9yIGEgY29tcGF0aWJsZSB0ZWNobm9sb2d5XG4gICAgICAgIHRoaXMuc291cmNlTGlzdF8oW3NvdXJjZV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jYWNoZV8uc3JjID0gc291cmNlLnNyYztcbiAgICAgICAgdGhpcy5jdXJyZW50VHlwZV8gPSBzb3VyY2UudHlwZSB8fCAnJztcblxuICAgICAgICAvLyB3YWl0IHVudGlsIHRoZSB0ZWNoIGlzIHJlYWR5IHRvIHNldCB0aGUgc291cmNlXG4gICAgICAgIHRoaXMucmVhZHkoZnVuY3Rpb24oKXtcblxuICAgICAgICAgIC8vIFRoZSBzZXRTb3VyY2UgdGVjaCBtZXRob2Qgd2FzIGFkZGVkIHdpdGggc291cmNlIGhhbmRsZXJzXG4gICAgICAgICAgLy8gc28gb2xkZXIgdGVjaHMgd29uJ3Qgc3VwcG9ydCBpdFxuICAgICAgICAgIC8vIFdlIG5lZWQgdG8gY2hlY2sgdGhlIGRpcmVjdCBwcm90b3R5cGUgZm9yIHRoZSBjYXNlIHdoZXJlIHN1YmNsYXNzZXNcbiAgICAgICAgICAvLyBvZiB0aGUgdGVjaCBkbyBub3Qgc3VwcG9ydCBzb3VyY2UgaGFuZGxlcnNcbiAgICAgICAgICBpZiAoY3VycmVudFRlY2gucHJvdG90eXBlLmhhc093blByb3BlcnR5KCdzZXRTb3VyY2UnKSkge1xuICAgICAgICAgICAgdGhpcy50ZWNoQ2FsbCgnc2V0U291cmNlJywgc291cmNlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy50ZWNoQ2FsbCgnc3JjJywgc291cmNlLnNyYyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRoaXMub3B0aW9uc19bJ3ByZWxvYWQnXSA9PT0gJ2F1dG8nKSB7XG4gICAgICAgICAgICB0aGlzLmxvYWQoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodGhpcy5vcHRpb25zX1snYXV0b3BsYXknXSkge1xuICAgICAgICAgICAgdGhpcy5wbGF5KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGUgYW4gYXJyYXkgb2Ygc291cmNlIG9iamVjdHNcbiAgICogQHBhcmFtICB7W3R5cGVdfSBzb3VyY2VzIEFycmF5IG9mIHNvdXJjZSBvYmplY3RzXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBzb3VyY2VMaXN0Xyhzb3VyY2VzKSB7XG4gICAgdmFyIHNvdXJjZVRlY2ggPSB0aGlzLnNlbGVjdFNvdXJjZShzb3VyY2VzKTtcblxuICAgIGlmIChzb3VyY2VUZWNoKSB7XG4gICAgICBpZiAoc291cmNlVGVjaC50ZWNoID09PSB0aGlzLnRlY2hOYW1lKSB7XG4gICAgICAgIC8vIGlmIHRoaXMgdGVjaG5vbG9neSBpcyBhbHJlYWR5IGxvYWRlZCwgc2V0IHRoZSBzb3VyY2VcbiAgICAgICAgdGhpcy5zcmMoc291cmNlVGVjaC5zb3VyY2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gbG9hZCB0aGlzIHRlY2hub2xvZ3kgd2l0aCB0aGUgY2hvc2VuIHNvdXJjZVxuICAgICAgICB0aGlzLmxvYWRUZWNoKHNvdXJjZVRlY2gudGVjaCwgc291cmNlVGVjaC5zb3VyY2UpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBXZSBuZWVkIHRvIHdyYXAgdGhpcyBpbiBhIHRpbWVvdXQgdG8gZ2l2ZSBmb2xrcyBhIGNoYW5jZSB0byBhZGQgZXJyb3IgZXZlbnQgaGFuZGxlcnNcbiAgICAgIHRoaXMuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZXJyb3IoeyBjb2RlOiA0LCBtZXNzYWdlOiB0aGlzLmxvY2FsaXplKHRoaXMub3B0aW9ucygpWydub3RTdXBwb3J0ZWRNZXNzYWdlJ10pIH0pO1xuICAgICAgfSwgMCk7XG5cbiAgICAgIC8vIHdlIGNvdWxkIG5vdCBmaW5kIGFuIGFwcHJvcHJpYXRlIHRlY2gsIGJ1dCBsZXQncyBzdGlsbCBub3RpZnkgdGhlIGRlbGVnYXRlIHRoYXQgdGhpcyBpcyBpdFxuICAgICAgLy8gdGhpcyBuZWVkcyBhIGJldHRlciBjb21tZW50IGFib3V0IHdoeSB0aGlzIGlzIG5lZWRlZFxuICAgICAgdGhpcy50cmlnZ2VyUmVhZHkoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQmVnaW4gbG9hZGluZyB0aGUgc3JjIGRhdGEuXG4gICAqIEByZXR1cm4ge1BsYXllcn0gUmV0dXJucyB0aGUgcGxheWVyXG4gICAqL1xuICBsb2FkKCkge1xuICAgIHRoaXMudGVjaENhbGwoJ2xvYWQnKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBmdWxseSBxdWFsaWZpZWQgVVJMIG9mIHRoZSBjdXJyZW50IHNvdXJjZSB2YWx1ZSBlLmcuIGh0dHA6Ly9teXNpdGUuY29tL3ZpZGVvLm1wNFxuICAgKiBDYW4gYmUgdXNlZCBpbiBjb25qdWN0aW9uIHdpdGggYGN1cnJlbnRUeXBlYCB0byBhc3Npc3QgaW4gcmVidWlsZGluZyB0aGUgY3VycmVudCBzb3VyY2Ugb2JqZWN0LlxuICAgKiBAcmV0dXJuIHtTdHJpbmd9IFRoZSBjdXJyZW50IHNvdXJjZVxuICAgKi9cbiAgY3VycmVudFNyYygpIHtcbiAgICByZXR1cm4gdGhpcy50ZWNoR2V0KCdjdXJyZW50U3JjJykgfHwgdGhpcy5jYWNoZV8uc3JjIHx8ICcnO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgY3VycmVudCBzb3VyY2UgdHlwZSBlLmcuIHZpZGVvL21wNFxuICAgKiBUaGlzIGNhbiBhbGxvdyB5b3UgcmVidWlsZCB0aGUgY3VycmVudCBzb3VyY2Ugb2JqZWN0IHNvIHRoYXQgeW91IGNvdWxkIGxvYWQgdGhlIHNhbWVcbiAgICogc291cmNlIGFuZCB0ZWNoIGxhdGVyXG4gICAqIEByZXR1cm4ge1N0cmluZ30gVGhlIHNvdXJjZSBNSU1FIHR5cGVcbiAgICovXG4gIGN1cnJlbnRUeXBlKCkge1xuICAgICAgcmV0dXJuIHRoaXMuY3VycmVudFR5cGVfIHx8ICcnO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBvciBzZXQgdGhlIHByZWxvYWQgYXR0cmlidXRlLlxuICAgKiBAcmV0dXJuIHtTdHJpbmd9IFRoZSBwcmVsb2FkIGF0dHJpYnV0ZSB2YWx1ZSB3aGVuIGdldHRpbmdcbiAgICogQHJldHVybiB7UGxheWVyfSBSZXR1cm5zIHRoZSBwbGF5ZXIgd2hlbiBzZXR0aW5nXG4gICAqL1xuICBwcmVsb2FkKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMudGVjaENhbGwoJ3NldFByZWxvYWQnLCB2YWx1ZSk7XG4gICAgICB0aGlzLm9wdGlvbnNfWydwcmVsb2FkJ10gPSB2YWx1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy50ZWNoR2V0KCdwcmVsb2FkJyk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IG9yIHNldCB0aGUgYXV0b3BsYXkgYXR0cmlidXRlLlxuICAgKiBAcmV0dXJuIHtTdHJpbmd9IFRoZSBhdXRvcGxheSBhdHRyaWJ1dGUgdmFsdWUgd2hlbiBnZXR0aW5nXG4gICAqIEByZXR1cm4ge1BsYXllcn0gUmV0dXJucyB0aGUgcGxheWVyIHdoZW4gc2V0dGluZ1xuICAgKi9cbiAgYXV0b3BsYXkodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy50ZWNoQ2FsbCgnc2V0QXV0b3BsYXknLCB2YWx1ZSk7XG4gICAgICB0aGlzLm9wdGlvbnNfWydhdXRvcGxheSddID0gdmFsdWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMudGVjaEdldCgnYXV0b3BsYXknLCB2YWx1ZSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IG9yIHNldCB0aGUgbG9vcCBhdHRyaWJ1dGUgb24gdGhlIHZpZGVvIGVsZW1lbnQuXG4gICAqIEByZXR1cm4ge1N0cmluZ30gVGhlIGxvb3AgYXR0cmlidXRlIHZhbHVlIHdoZW4gZ2V0dGluZ1xuICAgKiBAcmV0dXJuIHtQbGF5ZXJ9IFJldHVybnMgdGhlIHBsYXllciB3aGVuIHNldHRpbmdcbiAgICovXG4gIGxvb3AodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy50ZWNoQ2FsbCgnc2V0TG9vcCcsIHZhbHVlKTtcbiAgICAgIHRoaXMub3B0aW9uc19bJ2xvb3AnXSA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnRlY2hHZXQoJ2xvb3AnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBnZXQgb3Igc2V0IHRoZSBwb3N0ZXIgaW1hZ2Ugc291cmNlIHVybFxuICAgKlxuICAgKiAjIyMjIyBFWEFNUExFOlxuICAgKlxuICAgKiAgICAgLy8gZ2V0dGluZ1xuICAgKiAgICAgdmFyIGN1cnJlbnRQb3N0ZXIgPSBteVBsYXllci5wb3N0ZXIoKTtcbiAgICpcbiAgICogICAgIC8vIHNldHRpbmdcbiAgICogICAgIG15UGxheWVyLnBvc3RlcignaHR0cDovL2V4YW1wbGUuY29tL215SW1hZ2UuanBnJyk7XG4gICAqXG4gICAqIEBwYXJhbSAge1N0cmluZz19IFtzcmNdIFBvc3RlciBpbWFnZSBzb3VyY2UgVVJMXG4gICAqIEByZXR1cm4ge1N0cmluZ30gcG9zdGVyIFVSTCB3aGVuIGdldHRpbmdcbiAgICogQHJldHVybiB7UGxheWVyfSBzZWxmIHdoZW4gc2V0dGluZ1xuICAgKi9cbiAgcG9zdGVyKHNyYykge1xuICAgIGlmIChzcmMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHRoaXMucG9zdGVyXztcbiAgICB9XG5cbiAgICAvLyBUaGUgY29ycmVjdCB3YXkgdG8gcmVtb3ZlIGEgcG9zdGVyIGlzIHRvIHNldCBhcyBhbiBlbXB0eSBzdHJpbmdcbiAgICAvLyBvdGhlciBmYWxzZXkgdmFsdWVzIHdpbGwgdGhyb3cgZXJyb3JzXG4gICAgaWYgKCFzcmMpIHtcbiAgICAgIHNyYyA9ICcnO1xuICAgIH1cblxuICAgIC8vIHVwZGF0ZSB0aGUgaW50ZXJuYWwgcG9zdGVyIHZhcmlhYmxlXG4gICAgdGhpcy5wb3N0ZXJfID0gc3JjO1xuXG4gICAgLy8gdXBkYXRlIHRoZSB0ZWNoJ3MgcG9zdGVyXG4gICAgdGhpcy50ZWNoQ2FsbCgnc2V0UG9zdGVyJywgc3JjKTtcblxuICAgIC8vIGFsZXJ0IGNvbXBvbmVudHMgdGhhdCB0aGUgcG9zdGVyIGhhcyBiZWVuIHNldFxuICAgIHRoaXMudHJpZ2dlcigncG9zdGVyY2hhbmdlJyk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgb3Igc2V0IHdoZXRoZXIgb3Igbm90IHRoZSBjb250cm9scyBhcmUgc2hvd2luZy5cbiAgICogQHBhcmFtICB7Qm9vbGVhbn0gY29udHJvbHMgU2V0IGNvbnRyb2xzIHRvIHNob3dpbmcgb3Igbm90XG4gICAqIEByZXR1cm4ge0Jvb2xlYW59ICAgIENvbnRyb2xzIGFyZSBzaG93aW5nXG4gICAqL1xuICBjb250cm9scyhib29sKSB7XG4gICAgaWYgKGJvb2wgIT09IHVuZGVmaW5lZCkge1xuICAgICAgYm9vbCA9ICEhYm9vbDsgLy8gZm9yY2UgYm9vbGVhblxuICAgICAgLy8gRG9uJ3QgdHJpZ2dlciBhIGNoYW5nZSBldmVudCB1bmxlc3MgaXQgYWN0dWFsbHkgY2hhbmdlZFxuICAgICAgaWYgKHRoaXMuY29udHJvbHNfICE9PSBib29sKSB7XG4gICAgICAgIHRoaXMuY29udHJvbHNfID0gYm9vbDtcblxuICAgICAgICBpZiAodGhpcy51c2luZ05hdGl2ZUNvbnRyb2xzKCkpIHtcbiAgICAgICAgICB0aGlzLnRlY2hDYWxsKCdzZXRDb250cm9scycsIGJvb2wpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJvb2wpIHtcbiAgICAgICAgICB0aGlzLnJlbW92ZUNsYXNzKCd2anMtY29udHJvbHMtZGlzYWJsZWQnKTtcbiAgICAgICAgICB0aGlzLmFkZENsYXNzKCd2anMtY29udHJvbHMtZW5hYmxlZCcpO1xuICAgICAgICAgIHRoaXMudHJpZ2dlcignY29udHJvbHNlbmFibGVkJyk7XG5cbiAgICAgICAgICBpZiAoIXRoaXMudXNpbmdOYXRpdmVDb250cm9scygpKSB7XG4gICAgICAgICAgICB0aGlzLmFkZFRlY2hDb250cm9sc0xpc3RlbmVycygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnJlbW92ZUNsYXNzKCd2anMtY29udHJvbHMtZW5hYmxlZCcpO1xuICAgICAgICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy1jb250cm9scy1kaXNhYmxlZCcpO1xuICAgICAgICAgIHRoaXMudHJpZ2dlcignY29udHJvbHNkaXNhYmxlZCcpO1xuXG4gICAgICAgICAgaWYgKCF0aGlzLnVzaW5nTmF0aXZlQ29udHJvbHMoKSkge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVUZWNoQ29udHJvbHNMaXN0ZW5lcnMoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gISF0aGlzLmNvbnRyb2xzXztcbiAgfVxuXG4gIC8qKlxuICAgKiBUb2dnbGUgbmF0aXZlIGNvbnRyb2xzIG9uL29mZi4gTmF0aXZlIGNvbnRyb2xzIGFyZSB0aGUgY29udHJvbHMgYnVpbHQgaW50b1xuICAgKiBkZXZpY2VzIChlLmcuIGRlZmF1bHQgaVBob25lIGNvbnRyb2xzKSwgRmxhc2gsIG9yIG90aGVyIHRlY2hzXG4gICAqIChlLmcuIFZpbWVvIENvbnRyb2xzKVxuICAgKlxuICAgKiAqKlRoaXMgc2hvdWxkIG9ubHkgYmUgc2V0IGJ5IHRoZSBjdXJyZW50IHRlY2gsIGJlY2F1c2Ugb25seSB0aGUgdGVjaCBrbm93c1xuICAgKiBpZiBpdCBjYW4gc3VwcG9ydCBuYXRpdmUgY29udHJvbHMqKlxuICAgKlxuICAgKiBAcGFyYW0gIHtCb29sZWFufSBib29sICAgIFRydWUgc2lnbmFscyB0aGF0IG5hdGl2ZSBjb250cm9scyBhcmUgb25cbiAgICogQHJldHVybiB7UGxheWVyfSAgICAgIFJldHVybnMgdGhlIHBsYXllclxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdXNpbmdOYXRpdmVDb250cm9scyhib29sKSB7XG4gICAgaWYgKGJvb2wgIT09IHVuZGVmaW5lZCkge1xuICAgICAgYm9vbCA9ICEhYm9vbDsgLy8gZm9yY2UgYm9vbGVhblxuICAgICAgLy8gRG9uJ3QgdHJpZ2dlciBhIGNoYW5nZSBldmVudCB1bmxlc3MgaXQgYWN0dWFsbHkgY2hhbmdlZFxuICAgICAgaWYgKHRoaXMudXNpbmdOYXRpdmVDb250cm9sc18gIT09IGJvb2wpIHtcbiAgICAgICAgdGhpcy51c2luZ05hdGl2ZUNvbnRyb2xzXyA9IGJvb2w7XG4gICAgICAgIGlmIChib29sKSB7XG4gICAgICAgICAgdGhpcy5hZGRDbGFzcygndmpzLXVzaW5nLW5hdGl2ZS1jb250cm9scycpO1xuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogcGxheWVyIGlzIHVzaW5nIHRoZSBuYXRpdmUgZGV2aWNlIGNvbnRyb2xzXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBAZXZlbnQgdXNpbmduYXRpdmVjb250cm9sc1xuICAgICAgICAgICAqIEBtZW1iZXJvZiBQbGF5ZXJcbiAgICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgICAqL1xuICAgICAgICAgIHRoaXMudHJpZ2dlcigndXNpbmduYXRpdmVjb250cm9scycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMucmVtb3ZlQ2xhc3MoJ3Zqcy11c2luZy1uYXRpdmUtY29udHJvbHMnKTtcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIHBsYXllciBpcyB1c2luZyB0aGUgY3VzdG9tIEhUTUwgY29udHJvbHNcbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIEBldmVudCB1c2luZ2N1c3RvbWNvbnRyb2xzXG4gICAgICAgICAgICogQG1lbWJlcm9mIFBsYXllclxuICAgICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAgICovXG4gICAgICAgICAgdGhpcy50cmlnZ2VyKCd1c2luZ2N1c3RvbWNvbnRyb2xzJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gISF0aGlzLnVzaW5nTmF0aXZlQ29udHJvbHNfO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBvciBnZXQgdGhlIGN1cnJlbnQgTWVkaWFFcnJvclxuICAgKiBAcGFyYW0gIHsqfSBlcnIgQSBNZWRpYUVycm9yIG9yIGEgU3RyaW5nL051bWJlciB0byBiZSB0dXJuZWQgaW50byBhIE1lZGlhRXJyb3JcbiAgICogQHJldHVybiB7TWVkaWFFcnJvcnxudWxsfSAgICAgd2hlbiBnZXR0aW5nXG4gICAqIEByZXR1cm4ge1BsYXllcn0gICAgICAgICAgICAgIHdoZW4gc2V0dGluZ1xuICAgKi9cbiAgZXJyb3IoZXJyKSB7XG4gICAgaWYgKGVyciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdGhpcy5lcnJvcl8gfHwgbnVsbDtcbiAgICB9XG5cbiAgICAvLyByZXN0b3JpbmcgdG8gZGVmYXVsdFxuICAgIGlmIChlcnIgPT09IG51bGwpIHtcbiAgICAgIHRoaXMuZXJyb3JfID0gZXJyO1xuICAgICAgdGhpcy5yZW1vdmVDbGFzcygndmpzLWVycm9yJyk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBlcnJvciBpbnN0YW5jZVxuICAgIGlmIChlcnIgaW5zdGFuY2VvZiBNZWRpYUVycm9yKSB7XG4gICAgICB0aGlzLmVycm9yXyA9IGVycjtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5lcnJvcl8gPSBuZXcgTWVkaWFFcnJvcihlcnIpO1xuICAgIH1cblxuICAgIC8vIGZpcmUgYW4gZXJyb3IgZXZlbnQgb24gdGhlIHBsYXllclxuICAgIHRoaXMudHJpZ2dlcignZXJyb3InKTtcblxuICAgIC8vIGFkZCB0aGUgdmpzLWVycm9yIGNsYXNzbmFtZSB0byB0aGUgcGxheWVyXG4gICAgdGhpcy5hZGRDbGFzcygndmpzLWVycm9yJyk7XG5cbiAgICAvLyBsb2cgdGhlIG5hbWUgb2YgdGhlIGVycm9yIHR5cGUgYW5kIGFueSBtZXNzYWdlXG4gICAgLy8gaWU4IGp1c3QgbG9ncyBcIltvYmplY3Qgb2JqZWN0XVwiIGlmIHlvdSBqdXN0IGxvZyB0aGUgZXJyb3Igb2JqZWN0XG4gICAgTGliLmxvZy5lcnJvcihgKENPREU6JHt0aGlzLmVycm9yXy5jb2RlfSAke01lZGlhRXJyb3IuZXJyb3JUeXBlc1t0aGlzLmVycm9yXy5jb2RlXX0pYCwgdGhpcy5lcnJvcl8ubWVzc2FnZSwgdGhpcy5lcnJvcl8pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgcGxheWVyIGlzIGluIHRoZSBcImVuZGVkXCIgc3RhdGUuXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59IFRydWUgaWYgdGhlIHBsYXllciBpcyBpbiB0aGUgZW5kZWQgc3RhdGUsIGZhbHNlIGlmIG5vdC5cbiAgICovXG4gIGVuZGVkKCkgeyByZXR1cm4gdGhpcy50ZWNoR2V0KCdlbmRlZCcpOyB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIHBsYXllciBpcyBpbiB0aGUgXCJzZWVraW5nXCIgc3RhdGUuXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59IFRydWUgaWYgdGhlIHBsYXllciBpcyBpbiB0aGUgc2Vla2luZyBzdGF0ZSwgZmFsc2UgaWYgbm90LlxuICAgKi9cbiAgc2Vla2luZygpIHsgcmV0dXJuIHRoaXMudGVjaEdldCgnc2Vla2luZycpOyB9XG5cbiAgcmVwb3J0VXNlckFjdGl2aXR5KGV2ZW50KSB7XG4gICAgdGhpcy51c2VyQWN0aXZpdHlfID0gdHJ1ZTtcbiAgfVxuXG4gIHVzZXJBY3RpdmUoYm9vbCkge1xuICAgIGlmIChib29sICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGJvb2wgPSAhIWJvb2w7XG4gICAgICBpZiAoYm9vbCAhPT0gdGhpcy51c2VyQWN0aXZlXykge1xuICAgICAgICB0aGlzLnVzZXJBY3RpdmVfID0gYm9vbDtcbiAgICAgICAgaWYgKGJvb2wpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgdXNlciB3YXMgaW5hY3RpdmUgYW5kIGlzIG5vdyBhY3RpdmUgd2Ugd2FudCB0byByZXNldCB0aGVcbiAgICAgICAgICAvLyBpbmFjdGl2aXR5IHRpbWVyXG4gICAgICAgICAgdGhpcy51c2VyQWN0aXZpdHlfID0gdHJ1ZTtcbiAgICAgICAgICB0aGlzLnJlbW92ZUNsYXNzKCd2anMtdXNlci1pbmFjdGl2ZScpO1xuICAgICAgICAgIHRoaXMuYWRkQ2xhc3MoJ3Zqcy11c2VyLWFjdGl2ZScpO1xuICAgICAgICAgIHRoaXMudHJpZ2dlcigndXNlcmFjdGl2ZScpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFdlJ3JlIHN3aXRjaGluZyB0aGUgc3RhdGUgdG8gaW5hY3RpdmUgbWFudWFsbHksIHNvIGVyYXNlIGFueSBvdGhlclxuICAgICAgICAgIC8vIGFjdGl2aXR5XG4gICAgICAgICAgdGhpcy51c2VyQWN0aXZpdHlfID0gZmFsc2U7XG5cbiAgICAgICAgICAvLyBDaHJvbWUvU2FmYXJpL0lFIGhhdmUgYnVncyB3aGVyZSB3aGVuIHlvdSBjaGFuZ2UgdGhlIGN1cnNvciBpdCBjYW5cbiAgICAgICAgICAvLyB0cmlnZ2VyIGEgbW91c2Vtb3ZlIGV2ZW50LiBUaGlzIGNhdXNlcyBhbiBpc3N1ZSB3aGVuIHlvdSdyZSBoaWRpbmdcbiAgICAgICAgICAvLyB0aGUgY3Vyc29yIHdoZW4gdGhlIHVzZXIgaXMgaW5hY3RpdmUsIGFuZCBhIG1vdXNlbW92ZSBzaWduYWxzIHVzZXJcbiAgICAgICAgICAvLyBhY3Rpdml0eS4gTWFraW5nIGl0IGltcG9zc2libGUgdG8gZ28gaW50byBpbmFjdGl2ZSBtb2RlLiBTcGVjaWZpY2FsbHlcbiAgICAgICAgICAvLyB0aGlzIGhhcHBlbnMgaW4gZnVsbHNjcmVlbiB3aGVuIHdlIHJlYWxseSBuZWVkIHRvIGhpZGUgdGhlIGN1cnNvci5cbiAgICAgICAgICAvL1xuICAgICAgICAgIC8vIFdoZW4gdGhpcyBnZXRzIHJlc29sdmVkIGluIEFMTCBicm93c2VycyBpdCBjYW4gYmUgcmVtb3ZlZFxuICAgICAgICAgIC8vIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0xMDMwNDFcbiAgICAgICAgICBpZih0aGlzLnRlY2gpIHtcbiAgICAgICAgICAgIHRoaXMudGVjaC5vbmUoJ21vdXNlbW92ZScsIGZ1bmN0aW9uKGUpe1xuICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLnJlbW92ZUNsYXNzKCd2anMtdXNlci1hY3RpdmUnKTtcbiAgICAgICAgICB0aGlzLmFkZENsYXNzKCd2anMtdXNlci1pbmFjdGl2ZScpO1xuICAgICAgICAgIHRoaXMudHJpZ2dlcigndXNlcmluYWN0aXZlJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy51c2VyQWN0aXZlXztcbiAgfVxuXG4gIGxpc3RlbkZvclVzZXJBY3Rpdml0eSgpIHtcbiAgICBsZXQgbW91c2VJblByb2dyZXNzLCBsYXN0TW92ZVgsIGxhc3RNb3ZlWTtcblxuICAgIGxldCBoYW5kbGVBY3Rpdml0eSA9IExpYi5iaW5kKHRoaXMsIHRoaXMucmVwb3J0VXNlckFjdGl2aXR5KTtcblxuICAgIGxldCBoYW5kbGVNb3VzZU1vdmUgPSBmdW5jdGlvbihlKSB7XG4gICAgICAvLyAjMTA2OCAtIFByZXZlbnQgbW91c2Vtb3ZlIHNwYW1taW5nXG4gICAgICAvLyBDaHJvbWUgQnVnOiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9MzY2OTcwXG4gICAgICBpZihlLnNjcmVlblggIT09IGxhc3RNb3ZlWCB8fCBlLnNjcmVlblkgIT09IGxhc3RNb3ZlWSkge1xuICAgICAgICBsYXN0TW92ZVggPSBlLnNjcmVlblg7XG4gICAgICAgIGxhc3RNb3ZlWSA9IGUuc2NyZWVuWTtcbiAgICAgICAgaGFuZGxlQWN0aXZpdHkoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgbGV0IGhhbmRsZU1vdXNlRG93biA9IGZ1bmN0aW9uKCkge1xuICAgICAgaGFuZGxlQWN0aXZpdHkoKTtcbiAgICAgIC8vIEZvciBhcyBsb25nIGFzIHRoZSB0aGV5IGFyZSB0b3VjaGluZyB0aGUgZGV2aWNlIG9yIGhhdmUgdGhlaXIgbW91c2UgZG93bixcbiAgICAgIC8vIHdlIGNvbnNpZGVyIHRoZW0gYWN0aXZlIGV2ZW4gaWYgdGhleSdyZSBub3QgbW92aW5nIHRoZWlyIGZpbmdlciBvciBtb3VzZS5cbiAgICAgIC8vIFNvIHdlIHdhbnQgdG8gY29udGludWUgdG8gdXBkYXRlIHRoYXQgdGhleSBhcmUgYWN0aXZlXG4gICAgICB0aGlzLmNsZWFySW50ZXJ2YWwobW91c2VJblByb2dyZXNzKTtcbiAgICAgIC8vIFNldHRpbmcgdXNlckFjdGl2aXR5PXRydWUgbm93IGFuZCBzZXR0aW5nIHRoZSBpbnRlcnZhbCB0byB0aGUgc2FtZSB0aW1lXG4gICAgICAvLyBhcyB0aGUgYWN0aXZpdHlDaGVjayBpbnRlcnZhbCAoMjUwKSBzaG91bGQgZW5zdXJlIHdlIG5ldmVyIG1pc3MgdGhlXG4gICAgICAvLyBuZXh0IGFjdGl2aXR5Q2hlY2tcbiAgICAgIG1vdXNlSW5Qcm9ncmVzcyA9IHRoaXMuc2V0SW50ZXJ2YWwoaGFuZGxlQWN0aXZpdHksIDI1MCk7XG4gICAgfTtcblxuICAgIGxldCBoYW5kbGVNb3VzZVVwID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIGhhbmRsZUFjdGl2aXR5KCk7XG4gICAgICAvLyBTdG9wIHRoZSBpbnRlcnZhbCB0aGF0IG1haW50YWlucyBhY3Rpdml0eSBpZiB0aGUgbW91c2UvdG91Y2ggaXMgZG93blxuICAgICAgdGhpcy5jbGVhckludGVydmFsKG1vdXNlSW5Qcm9ncmVzcyk7XG4gICAgfTtcblxuICAgIC8vIEFueSBtb3VzZSBtb3ZlbWVudCB3aWxsIGJlIGNvbnNpZGVyZWQgdXNlciBhY3Rpdml0eVxuICAgIHRoaXMub24oJ21vdXNlZG93bicsIGhhbmRsZU1vdXNlRG93bik7XG4gICAgdGhpcy5vbignbW91c2Vtb3ZlJywgaGFuZGxlTW91c2VNb3ZlKTtcbiAgICB0aGlzLm9uKCdtb3VzZXVwJywgaGFuZGxlTW91c2VVcCk7XG5cbiAgICAvLyBMaXN0ZW4gZm9yIGtleWJvYXJkIG5hdmlnYXRpb25cbiAgICAvLyBTaG91bGRuJ3QgbmVlZCB0byB1c2UgaW5Qcm9ncmVzcyBpbnRlcnZhbCBiZWNhdXNlIG9mIGtleSByZXBlYXRcbiAgICB0aGlzLm9uKCdrZXlkb3duJywgaGFuZGxlQWN0aXZpdHkpO1xuICAgIHRoaXMub24oJ2tleXVwJywgaGFuZGxlQWN0aXZpdHkpO1xuXG4gICAgLy8gUnVuIGFuIGludGVydmFsIGV2ZXJ5IDI1MCBtaWxsaXNlY29uZHMgaW5zdGVhZCBvZiBzdHVmZmluZyBldmVyeXRoaW5nIGludG9cbiAgICAvLyB0aGUgbW91c2Vtb3ZlL3RvdWNobW92ZSBmdW5jdGlvbiBpdHNlbGYsIHRvIHByZXZlbnQgcGVyZm9ybWFuY2UgZGVncmFkYXRpb24uXG4gICAgLy8gYHRoaXMucmVwb3J0VXNlckFjdGl2aXR5YCBzaW1wbHkgc2V0cyB0aGlzLnVzZXJBY3Rpdml0eV8gdG8gdHJ1ZSwgd2hpY2hcbiAgICAvLyB0aGVuIGdldHMgcGlja2VkIHVwIGJ5IHRoaXMgbG9vcFxuICAgIC8vIGh0dHA6Ly9lam9obi5vcmcvYmxvZy9sZWFybmluZy1mcm9tLXR3aXR0ZXIvXG4gICAgbGV0IGFjdGl2aXR5Q2hlY2sgPSB0aGlzLnNldEludGVydmFsKGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IGluYWN0aXZpdHlUaW1lb3V0O1xuXG4gICAgICAvLyBDaGVjayB0byBzZWUgaWYgbW91c2UvdG91Y2ggYWN0aXZpdHkgaGFzIGhhcHBlbmVkXG4gICAgICBpZiAodGhpcy51c2VyQWN0aXZpdHlfKSB7XG4gICAgICAgIC8vIFJlc2V0IHRoZSBhY3Rpdml0eSB0cmFja2VyXG4gICAgICAgIHRoaXMudXNlckFjdGl2aXR5XyA9IGZhbHNlO1xuXG4gICAgICAgIC8vIElmIHRoZSB1c2VyIHN0YXRlIHdhcyBpbmFjdGl2ZSwgc2V0IHRoZSBzdGF0ZSB0byBhY3RpdmVcbiAgICAgICAgdGhpcy51c2VyQWN0aXZlKHRydWUpO1xuXG4gICAgICAgIC8vIENsZWFyIGFueSBleGlzdGluZyBpbmFjdGl2aXR5IHRpbWVvdXQgdG8gc3RhcnQgdGhlIHRpbWVyIG92ZXJcbiAgICAgICAgdGhpcy5jbGVhclRpbWVvdXQoaW5hY3Rpdml0eVRpbWVvdXQpO1xuXG4gICAgICAgIHZhciB0aW1lb3V0ID0gdGhpcy5vcHRpb25zKClbJ2luYWN0aXZpdHlUaW1lb3V0J107XG4gICAgICAgIGlmICh0aW1lb3V0ID4gMCkge1xuICAgICAgICAgIC8vIEluIDx0aW1lb3V0PiBtaWxsaXNlY29uZHMsIGlmIG5vIG1vcmUgYWN0aXZpdHkgaGFzIG9jY3VycmVkIHRoZVxuICAgICAgICAgIC8vIHVzZXIgd2lsbCBiZSBjb25zaWRlcmVkIGluYWN0aXZlXG4gICAgICAgICAgaW5hY3Rpdml0eVRpbWVvdXQgPSB0aGlzLnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gUHJvdGVjdCBhZ2FpbnN0IHRoZSBjYXNlIHdoZXJlIHRoZSBpbmFjdGl2aXR5VGltZW91dCBjYW4gdHJpZ2dlciBqdXN0XG4gICAgICAgICAgICAvLyBiZWZvcmUgdGhlIG5leHQgdXNlciBhY3Rpdml0eSBpcyBwaWNrZWQgdXAgYnkgdGhlIGFjdGl2aXR5Q2hlY2sgbG9vcFxuICAgICAgICAgICAgLy8gY2F1c2luZyBhIGZsaWNrZXJcbiAgICAgICAgICAgIGlmICghdGhpcy51c2VyQWN0aXZpdHlfKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51c2VyQWN0aXZlKGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCB0aW1lb3V0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIDI1MCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyBvciBzZXRzIHRoZSBjdXJyZW50IHBsYXliYWNrIHJhdGUuICBBIHBsYXliYWNrIHJhdGUgb2ZcbiAgICogMS4wIHJlcHJlc2VudHMgbm9ybWFsIHNwZWVkIGFuZCAwLjUgd291bGQgaW5kaWNhdGUgaGFsZi1zcGVlZFxuICAgKiBwbGF5YmFjaywgZm9yIGluc3RhbmNlLlxuICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHJhdGUgICAgTmV3IHBsYXliYWNrIHJhdGUgdG8gc2V0LlxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9ICAgICAgICAgUmV0dXJucyB0aGUgbmV3IHBsYXliYWNrIHJhdGUgd2hlbiBzZXR0aW5nXG4gICAqIEByZXR1cm4ge051bWJlcn0gICAgICAgICBSZXR1cm5zIHRoZSBjdXJyZW50IHBsYXliYWNrIHJhdGUgd2hlbiBnZXR0aW5nXG4gICAqIEBzZWUgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZW1iZWRkZWQtY29udGVudC5odG1sI2RvbS1tZWRpYS1wbGF5YmFja3JhdGVcbiAgICovXG4gIHBsYXliYWNrUmF0ZShyYXRlKSB7XG4gICAgaWYgKHJhdGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy50ZWNoQ2FsbCgnc2V0UGxheWJhY2tSYXRlJywgcmF0ZSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBpZiAodGhpcy50ZWNoICYmIHRoaXMudGVjaFsnZmVhdHVyZXNQbGF5YmFja1JhdGUnXSkge1xuICAgICAgcmV0dXJuIHRoaXMudGVjaEdldCgncGxheWJhY2tSYXRlJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAxLjA7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgb3Igc2V0cyB0aGUgYXVkaW8gZmxhZ1xuICAgKlxuICAgKiBAcGFyYW0gIHtCb29sZWFufSBib29sICAgIFRydWUgc2lnbmFscyB0aGF0IHRoaXMgaXMgYW4gYXVkaW8gcGxheWVyLlxuICAgKiBAcmV0dXJuIHtCb29sZWFufSAgICAgICAgIFJldHVybnMgdHJ1ZSBpZiBwbGF5ZXIgaXMgYXVkaW8sIGZhbHNlIGlmIG5vdCB3aGVuIGdldHRpbmdcbiAgICogQHJldHVybiB7UGxheWVyfSAgICAgIFJldHVybnMgdGhlIHBsYXllciBpZiBzZXR0aW5nXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBpc0F1ZGlvKGJvb2wpIHtcbiAgICBpZiAoYm9vbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLmlzQXVkaW9fID0gISFib29sO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuICEhdGhpcy5pc0F1ZGlvXztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50IHN0YXRlIG9mIG5ldHdvcmsgYWN0aXZpdHkgZm9yIHRoZSBlbGVtZW50LCBmcm9tXG4gICAqIHRoZSBjb2RlcyBpbiB0aGUgbGlzdCBiZWxvdy5cbiAgICogLSBORVRXT1JLX0VNUFRZIChudW1lcmljIHZhbHVlIDApXG4gICAqICAgVGhlIGVsZW1lbnQgaGFzIG5vdCB5ZXQgYmVlbiBpbml0aWFsaXNlZC4gQWxsIGF0dHJpYnV0ZXMgYXJlIGluXG4gICAqICAgdGhlaXIgaW5pdGlhbCBzdGF0ZXMuXG4gICAqIC0gTkVUV09SS19JRExFIChudW1lcmljIHZhbHVlIDEpXG4gICAqICAgVGhlIGVsZW1lbnQncyByZXNvdXJjZSBzZWxlY3Rpb24gYWxnb3JpdGhtIGlzIGFjdGl2ZSBhbmQgaGFzXG4gICAqICAgc2VsZWN0ZWQgYSByZXNvdXJjZSwgYnV0IGl0IGlzIG5vdCBhY3R1YWxseSB1c2luZyB0aGUgbmV0d29yayBhdFxuICAgKiAgIHRoaXMgdGltZS5cbiAgICogLSBORVRXT1JLX0xPQURJTkcgKG51bWVyaWMgdmFsdWUgMilcbiAgICogICBUaGUgdXNlciBhZ2VudCBpcyBhY3RpdmVseSB0cnlpbmcgdG8gZG93bmxvYWQgZGF0YS5cbiAgICogLSBORVRXT1JLX05PX1NPVVJDRSAobnVtZXJpYyB2YWx1ZSAzKVxuICAgKiAgIFRoZSBlbGVtZW50J3MgcmVzb3VyY2Ugc2VsZWN0aW9uIGFsZ29yaXRobSBpcyBhY3RpdmUsIGJ1dCBpdCBoYXNcbiAgICogICBub3QgeWV0IGZvdW5kIGEgcmVzb3VyY2UgdG8gdXNlLlxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IHRoZSBjdXJyZW50IG5ldHdvcmsgYWN0aXZpdHkgc3RhdGVcbiAgICogQHNlZSBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9lbWJlZGRlZC1jb250ZW50Lmh0bWwjbmV0d29yay1zdGF0ZXNcbiAgICovXG4gIG5ldHdvcmtTdGF0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy50ZWNoR2V0KCduZXR3b3JrU3RhdGUnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgdmFsdWUgdGhhdCBleHByZXNzZXMgdGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIGVsZW1lbnRcbiAgICogd2l0aCByZXNwZWN0IHRvIHJlbmRlcmluZyB0aGUgY3VycmVudCBwbGF5YmFjayBwb3NpdGlvbiwgZnJvbSB0aGVcbiAgICogY29kZXMgaW4gdGhlIGxpc3QgYmVsb3cuXG4gICAqIC0gSEFWRV9OT1RISU5HIChudW1lcmljIHZhbHVlIDApXG4gICAqICAgTm8gaW5mb3JtYXRpb24gcmVnYXJkaW5nIHRoZSBtZWRpYSByZXNvdXJjZSBpcyBhdmFpbGFibGUuXG4gICAqIC0gSEFWRV9NRVRBREFUQSAobnVtZXJpYyB2YWx1ZSAxKVxuICAgKiAgIEVub3VnaCBvZiB0aGUgcmVzb3VyY2UgaGFzIGJlZW4gb2J0YWluZWQgdGhhdCB0aGUgZHVyYXRpb24gb2YgdGhlXG4gICAqICAgcmVzb3VyY2UgaXMgYXZhaWxhYmxlLlxuICAgKiAtIEhBVkVfQ1VSUkVOVF9EQVRBIChudW1lcmljIHZhbHVlIDIpXG4gICAqICAgRGF0YSBmb3IgdGhlIGltbWVkaWF0ZSBjdXJyZW50IHBsYXliYWNrIHBvc2l0aW9uIGlzIGF2YWlsYWJsZS5cbiAgICogLSBIQVZFX0ZVVFVSRV9EQVRBIChudW1lcmljIHZhbHVlIDMpXG4gICAqICAgRGF0YSBmb3IgdGhlIGltbWVkaWF0ZSBjdXJyZW50IHBsYXliYWNrIHBvc2l0aW9uIGlzIGF2YWlsYWJsZSwgYXNcbiAgICogICB3ZWxsIGFzIGVub3VnaCBkYXRhIGZvciB0aGUgdXNlciBhZ2VudCB0byBhZHZhbmNlIHRoZSBjdXJyZW50XG4gICAqICAgcGxheWJhY2sgcG9zaXRpb24gaW4gdGhlIGRpcmVjdGlvbiBvZiBwbGF5YmFjay5cbiAgICogLSBIQVZFX0VOT1VHSF9EQVRBIChudW1lcmljIHZhbHVlIDQpXG4gICAqICAgVGhlIHVzZXIgYWdlbnQgZXN0aW1hdGVzIHRoYXQgZW5vdWdoIGRhdGEgaXMgYXZhaWxhYmxlIGZvclxuICAgKiAgIHBsYXliYWNrIHRvIHByb2NlZWQgdW5pbnRlcnJ1cHRlZC5cbiAgICogQHJldHVybiB7TnVtYmVyfSB0aGUgY3VycmVudCBwbGF5YmFjayByZW5kZXJpbmcgc3RhdGVcbiAgICogQHNlZSBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9lbWJlZGRlZC1jb250ZW50Lmh0bWwjZG9tLW1lZGlhLXJlYWR5c3RhdGVcbiAgICovXG4gIHJlYWR5U3RhdGUoKSB7XG4gICAgcmV0dXJuIHRoaXMudGVjaEdldCgncmVhZHlTdGF0ZScpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRleHQgdHJhY2tzIGFyZSB0cmFja3Mgb2YgdGltZWQgdGV4dCBldmVudHMuXG4gICAqIENhcHRpb25zIC0gdGV4dCBkaXNwbGF5ZWQgb3ZlciB0aGUgdmlkZW8gZm9yIHRoZSBoZWFyaW5nIGltcGFpcmVkXG4gICAqIFN1YnRpdGxlcyAtIHRleHQgZGlzcGxheWVkIG92ZXIgdGhlIHZpZGVvIGZvciB0aG9zZSB3aG8gZG9uJ3QgdW5kZXJzdGFuZCBsYW5ndWFnZSBpbiB0aGUgdmlkZW9cbiAgICogQ2hhcHRlcnMgLSB0ZXh0IGRpc3BsYXllZCBpbiBhIG1lbnUgYWxsb3dpbmcgdGhlIHVzZXIgdG8ganVtcCB0byBwYXJ0aWN1bGFyIHBvaW50cyAoY2hhcHRlcnMpIGluIHRoZSB2aWRlb1xuICAgKiBEZXNjcmlwdGlvbnMgKG5vdCBzdXBwb3J0ZWQgeWV0KSAtIGF1ZGlvIGRlc2NyaXB0aW9ucyB0aGF0IGFyZSByZWFkIGJhY2sgdG8gdGhlIHVzZXIgYnkgYSBzY3JlZW4gcmVhZGluZyBkZXZpY2VcbiAgICovXG5cbiAgLyoqXG4gICAqIEdldCBhbiBhcnJheSBvZiBhc3NvY2lhdGVkIHRleHQgdHJhY2tzLiBjYXB0aW9ucywgc3VidGl0bGVzLCBjaGFwdGVycywgZGVzY3JpcHRpb25zXG4gICAqIGh0dHA6Ly93d3cudzMub3JnL2h0bWwvd2cvZHJhZnRzL2h0bWwvbWFzdGVyL2VtYmVkZGVkLWNvbnRlbnQtMC5odG1sI2RvbS1tZWRpYS10ZXh0dHJhY2tzXG4gICAqIEByZXR1cm4ge0FycmF5fSAgICAgICAgICAgQXJyYXkgb2YgdHJhY2sgb2JqZWN0c1xuICAgKi9cbiAgdGV4dFRyYWNrcygpIHtcbiAgICAvLyBjYW5ub3QgdXNlIHRlY2hHZXQgZGlyZWN0bHkgYmVjYXVzZSBpdCBjaGVja3MgdG8gc2VlIHdoZXRoZXIgdGhlIHRlY2ggaXMgcmVhZHkuXG4gICAgLy8gRmxhc2ggaXMgdW5saWtlbHkgdG8gYmUgcmVhZHkgaW4gdGltZSBidXQgdGV4dFRyYWNrcyBzaG91bGQgc3RpbGwgd29yay5cbiAgICByZXR1cm4gdGhpcy50ZWNoICYmIHRoaXMudGVjaFsndGV4dFRyYWNrcyddKCk7XG4gIH1cblxuICByZW1vdGVUZXh0VHJhY2tzKCkge1xuICAgIHJldHVybiB0aGlzLnRlY2ggJiYgdGhpcy50ZWNoWydyZW1vdGVUZXh0VHJhY2tzJ10oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSB0ZXh0IHRyYWNrXG4gICAqIEluIGFkZGl0aW9uIHRvIHRoZSBXM0Mgc2V0dGluZ3Mgd2UgYWxsb3cgYWRkaW5nIGFkZGl0aW9uYWwgaW5mbyB0aHJvdWdoIG9wdGlvbnMuXG4gICAqIGh0dHA6Ly93d3cudzMub3JnL2h0bWwvd2cvZHJhZnRzL2h0bWwvbWFzdGVyL2VtYmVkZGVkLWNvbnRlbnQtMC5odG1sI2RvbS1tZWRpYS1hZGR0ZXh0dHJhY2tcbiAgICogQHBhcmFtIHtTdHJpbmd9ICBraW5kICAgICAgICBDYXB0aW9ucywgc3VidGl0bGVzLCBjaGFwdGVycywgZGVzY3JpcHRpb25zLCBvciBtZXRhZGF0YVxuICAgKiBAcGFyYW0ge1N0cmluZz19IGxhYmVsICAgICAgIE9wdGlvbmFsIGxhYmVsXG4gICAqIEBwYXJhbSB7U3RyaW5nPX0gbGFuZ3VhZ2UgICAgT3B0aW9uYWwgbGFuZ3VhZ2VcbiAgICovXG4gIGFkZFRleHRUcmFjayhraW5kLCBsYWJlbCwgbGFuZ3VhZ2UpIHtcbiAgICByZXR1cm4gdGhpcy50ZWNoICYmIHRoaXMudGVjaFsnYWRkVGV4dFRyYWNrJ10oa2luZCwgbGFiZWwsIGxhbmd1YWdlKTtcbiAgfVxuXG4gIGFkZFJlbW90ZVRleHRUcmFjayhvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMudGVjaCAmJiB0aGlzLnRlY2hbJ2FkZFJlbW90ZVRleHRUcmFjayddKG9wdGlvbnMpO1xuICB9XG5cbiAgcmVtb3ZlUmVtb3RlVGV4dFRyYWNrKHRyYWNrKSB7XG4gICAgdGhpcy50ZWNoICYmIHRoaXMudGVjaFsncmVtb3ZlUmVtb3RlVGV4dFRyYWNrJ10odHJhY2spO1xuICB9XG5cbiAgdmlkZW9XaWR0aCgpIHtcbiAgICByZXR1cm4gdGhpcy50ZWNoICYmIHRoaXMudGVjaC52aWRlb1dpZHRoICYmIHRoaXMudGVjaC52aWRlb1dpZHRoKCkgfHwgMDtcbiAgfVxuXG4gIHZpZGVvSGVpZ2h0KCkge1xuICAgIHJldHVybiB0aGlzLnRlY2ggJiYgdGhpcy50ZWNoLnZpZGVvSGVpZ2h0ICYmIHRoaXMudGVjaC52aWRlb0hlaWdodCgpIHx8IDA7XG4gIH1cblxuICAvLyBNZXRob2RzIHRvIGFkZCBzdXBwb3J0IGZvclxuICAvLyBpbml0aWFsVGltZTogZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXMudGVjaENhbGwoJ2luaXRpYWxUaW1lJyk7IH0sXG4gIC8vIHN0YXJ0T2Zmc2V0VGltZTogZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXMudGVjaENhbGwoJ3N0YXJ0T2Zmc2V0VGltZScpOyB9LFxuICAvLyBwbGF5ZWQ6IGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzLnRlY2hDYWxsKCdwbGF5ZWQnKTsgfSxcbiAgLy8gc2Vla2FibGU6IGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzLnRlY2hDYWxsKCdzZWVrYWJsZScpOyB9LFxuICAvLyB2aWRlb1RyYWNrczogZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXMudGVjaENhbGwoJ3ZpZGVvVHJhY2tzJyk7IH0sXG4gIC8vIGF1ZGlvVHJhY2tzOiBmdW5jdGlvbigpeyByZXR1cm4gdGhpcy50ZWNoQ2FsbCgnYXVkaW9UcmFja3MnKTsgfSxcbiAgLy8gZGVmYXVsdFBsYXliYWNrUmF0ZTogZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXMudGVjaENhbGwoJ2RlZmF1bHRQbGF5YmFja1JhdGUnKTsgfSxcbiAgLy8gbWVkaWFHcm91cDogZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXMudGVjaENhbGwoJ21lZGlhR3JvdXAnKTsgfSxcbiAgLy8gY29udHJvbGxlcjogZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXMudGVjaENhbGwoJ2NvbnRyb2xsZXInKTsgfSxcbiAgLy8gZGVmYXVsdE11dGVkOiBmdW5jdGlvbigpeyByZXR1cm4gdGhpcy50ZWNoQ2FsbCgnZGVmYXVsdE11dGVkJyk7IH1cblxuICAvLyBUT0RPXG4gIC8vIGN1cnJlbnRTcmNMaXN0OiB0aGUgYXJyYXkgb2Ygc291cmNlcyBpbmNsdWRpbmcgb3RoZXIgZm9ybWF0cyBhbmQgYml0cmF0ZXNcbiAgLy8gcGxheUxpc3Q6IGFycmF5IG9mIHNvdXJjZSBsaXN0cyBpbiBvcmRlciBvZiBwbGF5YmFja1xuXG4gIC8qKlxuICAgKiBUaGUgcGxheWVyJ3MgbGFuZ3VhZ2UgY29kZVxuICAgKiBAcGFyYW0gIHtTdHJpbmd9IGxhbmd1YWdlQ29kZSAgVGhlIGxvY2FsZSBzdHJpbmdcbiAgICogQHJldHVybiB7U3RyaW5nfSAgICAgICAgICAgICBUaGUgbG9jYWxlIHN0cmluZyB3aGVuIGdldHRpbmdcbiAgICogQHJldHVybiB7UGxheWVyfSAgICAgICAgIHNlbGYsIHdoZW4gc2V0dGluZ1xuICAgKi9cbiAgbGFuZ3VhZ2UobGFuZ3VhZ2VDb2RlKSB7XG4gICAgaWYgKGxhbmd1YWdlQ29kZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdGhpcy5sYW5ndWFnZV87XG4gICAgfVxuXG4gICAgdGhpcy5sYW5ndWFnZV8gPSBsYW5ndWFnZUNvZGU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBwbGF5ZXIncyBsYW5ndWFnZSBkaWN0aW9uYXJ5XG4gICAqL1xuICBsYW5ndWFnZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMubGFuZ3VhZ2VzXztcbiAgfVxuXG4gIHRvSlNPTigpIHtcbiAgICBsZXQgb3B0aW9ucyA9IExpYi5vYmouZGVlcE1lcmdlKHt9LCB0aGlzLm9wdGlvbnMoKSk7XG4gICAgbGV0IHRyYWNrcyA9IG9wdGlvbnMudHJhY2tzO1xuXG4gICAgb3B0aW9ucy50cmFja3MgPSBbXTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgdHJhY2sgPSB0cmFja3NbaV07XG5cbiAgICAgIC8vIGRlZXAgbWVyZ2UgdHJhY2tzIGFuZCBudWxsIG91dCBwbGF5ZXIgc28gbm8gY2lyY3VsYXIgcmVmZXJlbmNlc1xuICAgICAgdHJhY2sgPSBMaWIub2JqLmRlZXBNZXJnZSh7fSwgdHJhY2spO1xuICAgICAgdHJhY2sucGxheWVyID0gdW5kZWZpbmVkO1xuICAgICAgb3B0aW9ucy50cmFja3NbaV0gPSB0cmFjaztcbiAgICB9XG5cbiAgICByZXR1cm4gb3B0aW9ucztcbiAgfVxuXG4gIHN0YXRpYyBnZXRUYWdTZXR0aW5ncyh0YWcpIHtcbiAgICBsZXQgYmFzZU9wdGlvbnMgPSB7XG4gICAgICAnc291cmNlcyc6IFtdLFxuICAgICAgJ3RyYWNrcyc6IFtdXG4gICAgfTtcblxuICAgIGNvbnN0IHRhZ09wdGlvbnMgPSBMaWIuZ2V0RWxlbWVudEF0dHJpYnV0ZXModGFnKTtcbiAgICBjb25zdCBkYXRhU2V0dXAgPSB0YWdPcHRpb25zWydkYXRhLXNldHVwJ107XG5cbiAgICAvLyBDaGVjayBpZiBkYXRhLXNldHVwIGF0dHIgZXhpc3RzLlxuICAgIGlmIChkYXRhU2V0dXAgIT09IG51bGwpe1xuICAgICAgLy8gUGFyc2Ugb3B0aW9ucyBKU09OXG4gICAgICAvLyBJZiBlbXB0eSBzdHJpbmcsIG1ha2UgaXQgYSBwYXJzYWJsZSBqc29uIG9iamVjdC5cbiAgICAgIGNvbnN0IFtlcnIsIGRhdGFdID0gc2FmZVBhcnNlVHVwbGUoZGF0YVNldHVwIHx8ICd7fScpO1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBMaWIubG9nLmVycm9yKGVycik7XG4gICAgICB9XG4gICAgICBMaWIub2JqLm1lcmdlKHRhZ09wdGlvbnMsIGRhdGEpO1xuICAgIH1cblxuICAgIExpYi5vYmoubWVyZ2UoYmFzZU9wdGlvbnMsIHRhZ09wdGlvbnMpO1xuXG4gICAgLy8gR2V0IHRhZyBjaGlsZHJlbiBzZXR0aW5nc1xuICAgIGlmICh0YWcuaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgICBjb25zdCBjaGlsZHJlbiA9IHRhZy5jaGlsZE5vZGVzO1xuXG4gICAgICBmb3IgKGxldCBpPTAsIGo9Y2hpbGRyZW4ubGVuZ3RoOyBpPGo7IGkrKykge1xuICAgICAgICBjb25zdCBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgICAgICAvLyBDaGFuZ2UgY2FzZSBuZWVkZWQ6IGh0dHA6Ly9lam9obi5vcmcvYmxvZy9ub2RlbmFtZS1jYXNlLXNlbnNpdGl2aXR5L1xuICAgICAgICBjb25zdCBjaGlsZE5hbWUgPSBjaGlsZC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoY2hpbGROYW1lID09PSAnc291cmNlJykge1xuICAgICAgICAgIGJhc2VPcHRpb25zWydzb3VyY2VzJ10ucHVzaChMaWIuZ2V0RWxlbWVudEF0dHJpYnV0ZXMoY2hpbGQpKTtcbiAgICAgICAgfSBlbHNlIGlmIChjaGlsZE5hbWUgPT09ICd0cmFjaycpIHtcbiAgICAgICAgICBiYXNlT3B0aW9uc1sndHJhY2tzJ10ucHVzaChMaWIuZ2V0RWxlbWVudEF0dHJpYnV0ZXMoY2hpbGQpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBiYXNlT3B0aW9ucztcbiAgfVxuXG59XG5cbi8qKlxuICogR2xvYmFsIHBsYXllciBsaXN0XG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5QbGF5ZXIucGxheWVycyA9IHt9O1xuXG4vKipcbiAqIFBsYXllciBpbnN0YW5jZSBvcHRpb25zLCBzdXJmYWNlZCB1c2luZyBvcHRpb25zXG4gKiBvcHRpb25zID0gUGxheWVyLnByb3RvdHlwZS5vcHRpb25zX1xuICogTWFrZSBjaGFuZ2VzIGluIG9wdGlvbnMsIG5vdCBoZXJlLlxuICogQWxsIG9wdGlvbnMgc2hvdWxkIHVzZSBzdHJpbmcga2V5cyBzbyB0aGV5IGF2b2lkXG4gKiByZW5hbWluZyBieSBjbG9zdXJlIGNvbXBpbGVyXG4gKiBAdHlwZSB7T2JqZWN0fVxuICogQHByaXZhdGVcbiAqL1xuUGxheWVyLnByb3RvdHlwZS5vcHRpb25zXyA9IE9wdGlvbnM7XG5cbi8qKlxuICogRmlyZWQgd2hlbiB0aGUgcGxheWVyIGhhcyBpbml0aWFsIGR1cmF0aW9uIGFuZCBkaW1lbnNpb24gaW5mb3JtYXRpb25cbiAqIEBldmVudCBsb2FkZWRtZXRhZGF0YVxuICovXG5QbGF5ZXIucHJvdG90eXBlLmhhbmRsZUxvYWRlZE1ldGFEYXRhO1xuXG4vKipcbiAqIEZpcmVkIHdoZW4gdGhlIHBsYXllciBoYXMgZG93bmxvYWRlZCBkYXRhIGF0IHRoZSBjdXJyZW50IHBsYXliYWNrIHBvc2l0aW9uXG4gKiBAZXZlbnQgbG9hZGVkZGF0YVxuICovXG5QbGF5ZXIucHJvdG90eXBlLmhhbmRsZUxvYWRlZERhdGE7XG5cbi8qKlxuICogRmlyZWQgd2hlbiB0aGUgcGxheWVyIGhhcyBmaW5pc2hlZCBkb3dubG9hZGluZyB0aGUgc291cmNlIGRhdGFcbiAqIEBldmVudCBsb2FkZWRhbGxkYXRhXG4gKi9cblBsYXllci5wcm90b3R5cGUuaGFuZGxlTG9hZGVkQWxsRGF0YTtcblxuLyoqXG4gKiBGaXJlZCB3aGVuIHRoZSB1c2VyIGlzIGFjdGl2ZSwgZS5nLiBtb3ZlcyB0aGUgbW91c2Ugb3ZlciB0aGUgcGxheWVyXG4gKiBAZXZlbnQgdXNlcmFjdGl2ZVxuICovXG5QbGF5ZXIucHJvdG90eXBlLmhhbmRsZVVzZXJBY3RpdmU7XG5cbi8qKlxuICogRmlyZWQgd2hlbiB0aGUgdXNlciBpcyBpbmFjdGl2ZSwgZS5nLiBhIHNob3J0IGRlbGF5IGFmdGVyIHRoZSBsYXN0IG1vdXNlIG1vdmUgb3IgY29udHJvbCBpbnRlcmFjdGlvblxuICogQGV2ZW50IHVzZXJpbmFjdGl2ZVxuICovXG5QbGF5ZXIucHJvdG90eXBlLmhhbmRsZVVzZXJJbmFjdGl2ZTtcblxuLyoqXG4gKiBGaXJlZCB3aGVuIHRoZSBjdXJyZW50IHBsYXliYWNrIHBvc2l0aW9uIGhhcyBjaGFuZ2VkXG4gKlxuICogRHVyaW5nIHBsYXliYWNrIHRoaXMgaXMgZmlyZWQgZXZlcnkgMTUtMjUwIG1pbGxpc2Vjb25kcywgZGVwZW5kaW5nIG9uIHRoZVxuICogcGxheWJhY2sgdGVjaG5vbG9neSBpbiB1c2UuXG4gKiBAZXZlbnQgdGltZXVwZGF0ZVxuICovXG5QbGF5ZXIucHJvdG90eXBlLmhhbmRsZVRpbWVVcGRhdGU7XG5cbi8qKlxuICogRmlyZWQgd2hlbiB0aGUgdm9sdW1lIGNoYW5nZXNcbiAqIEBldmVudCB2b2x1bWVjaGFuZ2VcbiAqL1xuUGxheWVyLnByb3RvdHlwZS5oYW5kbGVWb2x1bWVDaGFuZ2U7XG5cbi8qKlxuICogRmlyZWQgd2hlbiBhbiBlcnJvciBvY2N1cnNcbiAqIEBldmVudCBlcnJvclxuICovXG5QbGF5ZXIucHJvdG90eXBlLmhhbmRsZUVycm9yO1xuXG5QbGF5ZXIucHJvdG90eXBlLmZsZXhOb3RTdXBwb3J0ZWRfID0gZnVuY3Rpb24oKSB7XG4gIHZhciBlbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaScpO1xuXG4gIHJldHVybiAhKCdmbGV4QmFzaXMnIGluIGVsZW0uc3R5bGUgfHxcbiAgICAgICAgICAnd2Via2l0RmxleEJhc2lzJyBpbiBlbGVtLnN0eWxlIHx8XG4gICAgICAgICAgJ21vekZsZXhCYXNpcycgaW4gZWxlbS5zdHlsZSB8fFxuICAgICAgICAgICdtc0ZsZXhCYXNpcycgaW4gZWxlbS5zdHlsZSk7XG59O1xuXG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ1BsYXllcicsIFBsYXllcik7XG5leHBvcnQgZGVmYXVsdCBQbGF5ZXI7XG4iLCJpbXBvcnQgUGxheWVyIGZyb20gJy4vcGxheWVyJztcblxuLyoqXG4gKiB0aGUgbWV0aG9kIGZvciByZWdpc3RlcmluZyBhIHZpZGVvLmpzIHBsdWdpblxuICpcbiAqIEBwYXJhbSAge1N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgcGx1Z2luXG4gKiBAcGFyYW0gIHtGdW5jdGlvbn0gaW5pdCBUaGUgZnVuY3Rpb24gdGhhdCBpcyBydW4gd2hlbiB0aGUgcGxheWVyIGluaXRzXG4gKi9cbnZhciBwbHVnaW4gPSBmdW5jdGlvbihuYW1lLCBpbml0KXtcbiAgUGxheWVyLnByb3RvdHlwZVtuYW1lXSA9IGluaXQ7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwbHVnaW47XG4iLCJpbXBvcnQgQnV0dG9uIGZyb20gJy4vYnV0dG9uJztcbmltcG9ydCAqIGFzIExpYiBmcm9tICcuL2xpYic7XG5cbi8qIFBvc3RlciBJbWFnZVxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxuICogVGhlIGNvbXBvbmVudCB0aGF0IGhhbmRsZXMgc2hvd2luZyB0aGUgcG9zdGVyIGltYWdlLlxuICpcbiAqIEBwYXJhbSB7UGxheWVyfE9iamVjdH0gcGxheWVyXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbnNcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5jbGFzcyBQb3N0ZXJJbWFnZSBleHRlbmRzIEJ1dHRvbiB7XG5cbiAgY29uc3RydWN0b3IocGxheWVyLCBvcHRpb25zKXtcbiAgICBzdXBlcihwbGF5ZXIsIG9wdGlvbnMpO1xuXG4gICAgdGhpcy51cGRhdGUoKTtcbiAgICBwbGF5ZXIub24oJ3Bvc3RlcmNoYW5nZScsIExpYi5iaW5kKHRoaXMsIHRoaXMudXBkYXRlKSk7XG4gIH1cblxuICAvKipcbiAgICogQ2xlYW4gdXAgdGhlIHBvc3RlciBpbWFnZVxuICAgKi9cbiAgZGlzcG9zZSgpIHtcbiAgICB0aGlzLnBsYXllcigpLm9mZigncG9zdGVyY2hhbmdlJywgdGhpcy51cGRhdGUpO1xuICAgIHN1cGVyLmRpc3Bvc2UoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIHBvc3RlciBpbWFnZSBlbGVtZW50XG4gICAqIEByZXR1cm4ge0VsZW1lbnR9XG4gICAqL1xuICBjcmVhdGVFbCgpIHtcbiAgICBsZXQgZWwgPSBMaWIuY3JlYXRlRWwoJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3Zqcy1wb3N0ZXInLFxuXG4gICAgICAvLyBEb24ndCB3YW50IHBvc3RlciB0byBiZSB0YWJiYWJsZS5cbiAgICAgIHRhYkluZGV4OiAtMVxuICAgIH0pO1xuXG4gICAgLy8gVG8gZW5zdXJlIHRoZSBwb3N0ZXIgaW1hZ2UgcmVzaXplcyB3aGlsZSBtYWludGFpbmluZyBpdHMgb3JpZ2luYWwgYXNwZWN0XG4gICAgLy8gcmF0aW8sIHVzZSBhIGRpdiB3aXRoIGBiYWNrZ3JvdW5kLXNpemVgIHdoZW4gYXZhaWxhYmxlLiBGb3IgYnJvd3NlcnMgdGhhdFxuICAgIC8vIGRvIG5vdCBzdXBwb3J0IGBiYWNrZ3JvdW5kLXNpemVgIChlLmcuIElFOCksIGZhbGwgYmFjayBvbiB1c2luZyBhIHJlZ3VsYXJcbiAgICAvLyBpbWcgZWxlbWVudC5cbiAgICBpZiAoIUxpYi5CQUNLR1JPVU5EX1NJWkVfU1VQUE9SVEVEKSB7XG4gICAgICB0aGlzLmZhbGxiYWNrSW1nXyA9IExpYi5jcmVhdGVFbCgnaW1nJyk7XG4gICAgICBlbC5hcHBlbmRDaGlsZCh0aGlzLmZhbGxiYWNrSW1nXyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVsO1xuICB9XG5cbiAgLyoqXG4gICAqIEV2ZW50IGhhbmRsZXIgZm9yIHVwZGF0ZXMgdG8gdGhlIHBsYXllcidzIHBvc3RlciBzb3VyY2VcbiAgICovXG4gIHVwZGF0ZSgpIHtcbiAgICBsZXQgdXJsID0gdGhpcy5wbGF5ZXIoKS5wb3N0ZXIoKTtcblxuICAgIHRoaXMuc2V0U3JjKHVybCk7XG5cbiAgICAvLyBJZiB0aGVyZSdzIG5vIHBvc3RlciBzb3VyY2Ugd2Ugc2hvdWxkIGRpc3BsYXk6bm9uZSBvbiB0aGlzIGNvbXBvbmVudFxuICAgIC8vIHNvIGl0J3Mgbm90IHN0aWxsIGNsaWNrYWJsZSBvciByaWdodC1jbGlja2FibGVcbiAgICBpZiAodXJsKSB7XG4gICAgICB0aGlzLnNob3coKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5oaWRlKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgcG9zdGVyIHNvdXJjZSBkZXBlbmRpbmcgb24gdGhlIGRpc3BsYXkgbWV0aG9kXG4gICAqL1xuICBzZXRTcmModXJsKSB7XG4gICAgaWYgKHRoaXMuZmFsbGJhY2tJbWdfKSB7XG4gICAgICB0aGlzLmZhbGxiYWNrSW1nXy5zcmMgPSB1cmw7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBiYWNrZ3JvdW5kSW1hZ2UgPSAnJztcbiAgICAgIC8vIEFueSBmYWxzZXkgdmFsdWVzIHNob3VsZCBzdGF5IGFzIGFuIGVtcHR5IHN0cmluZywgb3RoZXJ3aXNlXG4gICAgICAvLyB0aGlzIHdpbGwgdGhyb3cgYW4gZXh0cmEgZXJyb3JcbiAgICAgIGlmICh1cmwpIHtcbiAgICAgICAgYmFja2dyb3VuZEltYWdlID0gYHVybChcIiR7dXJsfVwiKWA7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZWxfLnN0eWxlLmJhY2tncm91bmRJbWFnZSA9IGJhY2tncm91bmRJbWFnZTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRXZlbnQgaGFuZGxlciBmb3IgY2xpY2tzIG9uIHRoZSBwb3N0ZXIgaW1hZ2VcbiAgICovXG4gIGhhbmRsZUNsaWNrKCkge1xuICAgIC8vIFdlIGRvbid0IHdhbnQgYSBjbGljayB0byB0cmlnZ2VyIHBsYXliYWNrIHdoZW4gY29udHJvbHMgYXJlIGRpc2FibGVkXG4gICAgLy8gYnV0IENTUyBzaG91bGQgYmUgaGlkaW5nIHRoZSBwb3N0ZXIgdG8gcHJldmVudCB0aGF0IGZyb20gaGFwcGVuaW5nXG4gICAgaWYgKHRoaXMucGxheWVyXy5wYXVzZWQoKSkge1xuICAgICAgdGhpcy5wbGF5ZXJfLnBsYXkoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wbGF5ZXJfLnBhdXNlKCk7XG4gICAgfVxuICB9XG5cbn1cblxuQnV0dG9uLnJlZ2lzdGVyQ29tcG9uZW50KCdQb3N0ZXJJbWFnZScsIFBvc3RlckltYWdlKTtcbmV4cG9ydCBkZWZhdWx0IFBvc3RlckltYWdlO1xuIiwiaW1wb3J0ICogYXMgRXZlbnRzIGZyb20gJy4vZXZlbnRzJztcbmltcG9ydCBkb2N1bWVudCBmcm9tICdnbG9iYWwvZG9jdW1lbnQnO1xuaW1wb3J0IHdpbmRvdyBmcm9tICdnbG9iYWwvd2luZG93JztcblxubGV0IF93aW5kb3dMb2FkZWQgPSBmYWxzZTtcbmxldCB2aWRlb2pzO1xuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgRnVuY3Rpb25zIGZvciBhdXRvbWF0aWNhbGx5IHNldHRpbmcgdXAgYSBwbGF5ZXJcbiAqIGJhc2VkIG9uIHRoZSBkYXRhLXNldHVwIGF0dHJpYnV0ZSBvZiB0aGUgdmlkZW8gdGFnXG4gKi9cblxuLy8gQXV0b21hdGljYWxseSBzZXQgdXAgYW55IHRhZ3MgdGhhdCBoYXZlIGEgZGF0YS1zZXR1cCBhdHRyaWJ1dGVcbnZhciBhdXRvU2V0dXAgPSBmdW5jdGlvbigpe1xuICAvLyBPbmUgZGF5LCB3aGVuIHdlIHN0b3Agc3VwcG9ydGluZyBJRTgsIGdvIGJhY2sgdG8gdGhpcywgYnV0IGluIHRoZSBtZWFudGltZS4uLipoYWNrIGhhY2sgaGFjaypcbiAgLy8gdmFyIHZpZHMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgndmlkZW8nKSk7XG4gIC8vIHZhciBhdWRpb3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYXVkaW8nKSk7XG4gIC8vIHZhciBtZWRpYUVscyA9IHZpZHMuY29uY2F0KGF1ZGlvcyk7XG5cbiAgLy8gQmVjYXVzZSBJRTggZG9lc24ndCBzdXBwb3J0IGNhbGxpbmcgc2xpY2Ugb24gYSBub2RlIGxpc3QsIHdlIG5lZWQgdG8gbG9vcCB0aHJvdWdoIGVhY2ggbGlzdCBvZiBlbGVtZW50c1xuICAvLyB0byBidWlsZCB1cCBhIG5ldywgY29tYmluZWQgbGlzdCBvZiBlbGVtZW50cy5cbiAgdmFyIHZpZHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgndmlkZW8nKTtcbiAgdmFyIGF1ZGlvcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdhdWRpbycpO1xuICB2YXIgbWVkaWFFbHMgPSBbXTtcbiAgaWYgKHZpZHMgJiYgdmlkcy5sZW5ndGggPiAwKSB7XG4gICAgZm9yKGxldCBpPTAsIGU9dmlkcy5sZW5ndGg7IGk8ZTsgaSsrKSB7XG4gICAgICBtZWRpYUVscy5wdXNoKHZpZHNbaV0pO1xuICAgIH1cbiAgfVxuICBpZiAoYXVkaW9zICYmIGF1ZGlvcy5sZW5ndGggPiAwKSB7XG4gICAgZm9yKGxldCBpPTAsIGU9YXVkaW9zLmxlbmd0aDsgaTxlOyBpKyspIHtcbiAgICAgIG1lZGlhRWxzLnB1c2goYXVkaW9zW2ldKTtcbiAgICB9XG4gIH1cblxuICAvLyBDaGVjayBpZiBhbnkgbWVkaWEgZWxlbWVudHMgZXhpc3RcbiAgaWYgKG1lZGlhRWxzICYmIG1lZGlhRWxzLmxlbmd0aCA+IDApIHtcblxuICAgIGZvciAobGV0IGk9MCwgZT1tZWRpYUVscy5sZW5ndGg7IGk8ZTsgaSsrKSB7XG4gICAgICBsZXQgbWVkaWFFbCA9IG1lZGlhRWxzW2ldO1xuXG4gICAgICAvLyBDaGVjayBpZiBlbGVtZW50IGV4aXN0cywgaGFzIGdldEF0dHJpYnV0ZSBmdW5jLlxuICAgICAgLy8gSUUgc2VlbXMgdG8gY29uc2lkZXIgdHlwZW9mIGVsLmdldEF0dHJpYnV0ZSA9PSAnb2JqZWN0JyBpbnN0ZWFkIG9mICdmdW5jdGlvbicgbGlrZSBleHBlY3RlZCwgYXQgbGVhc3Qgd2hlbiBsb2FkaW5nIHRoZSBwbGF5ZXIgaW1tZWRpYXRlbHkuXG4gICAgICBpZiAobWVkaWFFbCAmJiBtZWRpYUVsLmdldEF0dHJpYnV0ZSkge1xuXG4gICAgICAgIC8vIE1ha2Ugc3VyZSB0aGlzIHBsYXllciBoYXNuJ3QgYWxyZWFkeSBiZWVuIHNldCB1cC5cbiAgICAgICAgaWYgKG1lZGlhRWxbJ3BsYXllciddID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBsZXQgb3B0aW9ucyA9IG1lZGlhRWwuZ2V0QXR0cmlidXRlKCdkYXRhLXNldHVwJyk7XG5cbiAgICAgICAgICAvLyBDaGVjayBpZiBkYXRhLXNldHVwIGF0dHIgZXhpc3RzLlxuICAgICAgICAgIC8vIFdlIG9ubHkgYXV0by1zZXR1cCBpZiB0aGV5J3ZlIGFkZGVkIHRoZSBkYXRhLXNldHVwIGF0dHIuXG4gICAgICAgICAgaWYgKG9wdGlvbnMgIT09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBuZXcgdmlkZW8uanMgaW5zdGFuY2UuXG4gICAgICAgICAgICBsZXQgcGxheWVyID0gdmlkZW9qcyhtZWRpYUVsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgLy8gSWYgZ2V0QXR0cmlidXRlIGlzbid0IGRlZmluZWQsIHdlIG5lZWQgdG8gd2FpdCBmb3IgdGhlIERPTS5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGF1dG9TZXR1cFRpbWVvdXQoMSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAvLyBObyB2aWRlb3Mgd2VyZSBmb3VuZCwgc28ga2VlcCBsb29waW5nIHVubGVzcyBwYWdlIGlzIGZpbmlzaGVkIGxvYWRpbmcuXG4gIH0gZWxzZSBpZiAoIV93aW5kb3dMb2FkZWQpIHtcbiAgICBhdXRvU2V0dXBUaW1lb3V0KDEpO1xuICB9XG59O1xuXG4vLyBQYXVzZSB0byBsZXQgdGhlIERPTSBrZWVwIHByb2Nlc3NpbmdcbnZhciBhdXRvU2V0dXBUaW1lb3V0ID0gZnVuY3Rpb24od2FpdCwgdmpzKXtcbiAgdmlkZW9qcyA9IHZqcztcbiAgc2V0VGltZW91dChhdXRvU2V0dXAsIHdhaXQpO1xufTtcblxuaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdjb21wbGV0ZScpIHtcbiAgX3dpbmRvd0xvYWRlZCA9IHRydWU7XG59IGVsc2Uge1xuICBFdmVudHMub25lKHdpbmRvdywgJ2xvYWQnLCBmdW5jdGlvbigpe1xuICAgIF93aW5kb3dMb2FkZWQgPSB0cnVlO1xuICB9KTtcbn1cblxudmFyIGhhc0xvYWRlZCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gX3dpbmRvd0xvYWRlZDtcbn07XG5cbmV4cG9ydCB7IGF1dG9TZXR1cCwgYXV0b1NldHVwVGltZW91dCwgaGFzTG9hZGVkIH07XG4iLCJpbXBvcnQgQ29tcG9uZW50IGZyb20gJy4uL2NvbXBvbmVudC5qcyc7XG5pbXBvcnQgKiBhcyBMaWIgZnJvbSAnLi4vbGliLmpzJztcblxuLyoqXG4gKiBTZWVrQmFyIEJlaGF2aW9yIGluY2x1ZGVzIHBsYXkgcHJvZ3Jlc3MgYmFyLCBhbmQgc2VlayBoYW5kbGVcbiAqIE5lZWRlZCBzbyBpdCBjYW4gZGV0ZXJtaW5lIHNlZWsgcG9zaXRpb24gYmFzZWQgb24gaGFuZGxlIHBvc2l0aW9uL3NpemVcbiAqIEBwYXJhbSB7UGxheWVyfE9iamVjdH0gcGxheWVyXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbnNcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5jbGFzcyBTbGlkZXJIYW5kbGUgZXh0ZW5kcyBDb21wb25lbnQge1xuXG4gIC8qKiBAaW5oZXJpdERvYyAqL1xuICBjcmVhdGVFbCh0eXBlLCBwcm9wcykge1xuICAgIHByb3BzID0gcHJvcHMgfHwge307XG4gICAgLy8gQWRkIHRoZSBzbGlkZXIgZWxlbWVudCBjbGFzcyB0byBhbGwgc3ViIGNsYXNzZXNcbiAgICBwcm9wcy5jbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUgKyAnIHZqcy1zbGlkZXItaGFuZGxlJztcbiAgICBwcm9wcyA9IExpYi5vYmoubWVyZ2Uoe1xuICAgICAgaW5uZXJIVE1MOiBgPHNwYW4gY2xhc3M9XCJ2anMtY29udHJvbC10ZXh0XCI+JHt0aGlzLmRlZmF1bHRWYWx1ZSB8fCAwfTwvc3Bhbj5gXG4gICAgfSwgcHJvcHMpO1xuXG4gICAgcmV0dXJuIHN1cGVyLmNyZWF0ZUVsKCdkaXYnLCBwcm9wcyk7XG4gIH1cblxufVxuXG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ1NsaWRlckhhbmRsZScsIFNsaWRlckhhbmRsZSk7XG5leHBvcnQgZGVmYXVsdCBTbGlkZXJIYW5kbGU7XG4iLCJpbXBvcnQgQ29tcG9uZW50IGZyb20gJy4uL2NvbXBvbmVudC5qcyc7XG5pbXBvcnQgKiBhcyBMaWIgZnJvbSAnLi4vbGliLmpzJztcbmltcG9ydCBkb2N1bWVudCBmcm9tICdnbG9iYWwvZG9jdW1lbnQnO1xuXG4vKiBTbGlkZXJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4vKipcbiAqIFRoZSBiYXNlIGZ1bmN0aW9uYWxpdHkgZm9yIHNsaWRlcnMgbGlrZSB0aGUgdm9sdW1lIGJhciBhbmQgc2VlayBiYXJcbiAqXG4gKiBAcGFyYW0ge1BsYXllcnxPYmplY3R9IHBsYXllclxuICogQHBhcmFtIHtPYmplY3Q9fSBvcHRpb25zXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuY2xhc3MgU2xpZGVyIGV4dGVuZHMgQ29tcG9uZW50IHtcblxuICBjb25zdHJ1Y3RvcihwbGF5ZXIsIG9wdGlvbnMpIHtcbiAgICBzdXBlcihwbGF5ZXIsIG9wdGlvbnMpO1xuXG4gICAgLy8gU2V0IHByb3BlcnR5IG5hbWVzIHRvIGJhciBhbmQgaGFuZGxlIHRvIG1hdGNoIHdpdGggdGhlIGNoaWxkIFNsaWRlciBjbGFzcyBpcyBsb29raW5nIGZvclxuICAgIHRoaXMuYmFyID0gdGhpcy5nZXRDaGlsZCh0aGlzLm9wdGlvbnNfWydiYXJOYW1lJ10pO1xuICAgIHRoaXMuaGFuZGxlID0gdGhpcy5nZXRDaGlsZCh0aGlzLm9wdGlvbnNfWydoYW5kbGVOYW1lJ10pO1xuXG4gICAgLy8gU2V0IGEgaG9yaXpvbnRhbCBvciB2ZXJ0aWNhbCBjbGFzcyBvbiB0aGUgc2xpZGVyIGRlcGVuZGluZyBvbiB0aGUgc2xpZGVyIHR5cGVcbiAgICB0aGlzLnZlcnRpY2FsKCEhdGhpcy5vcHRpb25zKClbJ3ZlcnRpY2FsJ10pO1xuXG4gICAgdGhpcy5vbignbW91c2Vkb3duJywgdGhpcy5oYW5kbGVNb3VzZURvd24pO1xuICAgIHRoaXMub24oJ3RvdWNoc3RhcnQnLCB0aGlzLmhhbmRsZU1vdXNlRG93bik7XG4gICAgdGhpcy5vbignZm9jdXMnLCB0aGlzLmhhbmRsZUZvY3VzKTtcbiAgICB0aGlzLm9uKCdibHVyJywgdGhpcy5oYW5kbGVCbHVyKTtcbiAgICB0aGlzLm9uKCdjbGljaycsIHRoaXMuaGFuZGxlQ2xpY2spO1xuXG4gICAgdGhpcy5vbihwbGF5ZXIsICdjb250cm9sc3Zpc2libGUnLCB0aGlzLnVwZGF0ZSk7XG4gICAgdGhpcy5vbihwbGF5ZXIsIHRoaXMucGxheWVyRXZlbnQsIHRoaXMudXBkYXRlKTtcbiAgfVxuXG4gIGNyZWF0ZUVsKHR5cGUsIHByb3BzPXt9KSB7XG4gICAgLy8gQWRkIHRoZSBzbGlkZXIgZWxlbWVudCBjbGFzcyB0byBhbGwgc3ViIGNsYXNzZXNcbiAgICBwcm9wcy5jbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUgKyAnIHZqcy1zbGlkZXInO1xuICAgIHByb3BzID0gTGliLm9iai5tZXJnZSh7XG4gICAgICAncm9sZSc6ICdzbGlkZXInLFxuICAgICAgJ2FyaWEtdmFsdWVub3cnOiAwLFxuICAgICAgJ2FyaWEtdmFsdWVtaW4nOiAwLFxuICAgICAgJ2FyaWEtdmFsdWVtYXgnOiAxMDAsXG4gICAgICB0YWJJbmRleDogMFxuICAgIH0sIHByb3BzKTtcblxuICAgIHJldHVybiBzdXBlci5jcmVhdGVFbCh0eXBlLCBwcm9wcyk7XG4gIH1cblxuICBoYW5kbGVNb3VzZURvd24oZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIExpYi5ibG9ja1RleHRTZWxlY3Rpb24oKTtcbiAgICB0aGlzLmFkZENsYXNzKCd2anMtc2xpZGluZycpO1xuXG4gICAgdGhpcy5vbihkb2N1bWVudCwgJ21vdXNlbW92ZScsIHRoaXMuaGFuZGxlTW91c2VNb3ZlKTtcbiAgICB0aGlzLm9uKGRvY3VtZW50LCAnbW91c2V1cCcsIHRoaXMuaGFuZGxlTW91c2VVcCk7XG4gICAgdGhpcy5vbihkb2N1bWVudCwgJ3RvdWNobW92ZScsIHRoaXMuaGFuZGxlTW91c2VNb3ZlKTtcbiAgICB0aGlzLm9uKGRvY3VtZW50LCAndG91Y2hlbmQnLCB0aGlzLmhhbmRsZU1vdXNlVXApO1xuXG4gICAgdGhpcy5oYW5kbGVNb3VzZU1vdmUoZXZlbnQpO1xuICB9XG5cbiAgLy8gVG8gYmUgb3ZlcnJpZGRlbiBieSBhIHN1YmNsYXNzXG4gIGhhbmRsZU1vdXNlTW92ZSgpIHt9XG5cbiAgaGFuZGxlTW91c2VVcCgpIHtcbiAgICBMaWIudW5ibG9ja1RleHRTZWxlY3Rpb24oKTtcbiAgICB0aGlzLnJlbW92ZUNsYXNzKCd2anMtc2xpZGluZycpO1xuXG4gICAgdGhpcy5vZmYoZG9jdW1lbnQsICdtb3VzZW1vdmUnLCB0aGlzLmhhbmRsZU1vdXNlTW92ZSk7XG4gICAgdGhpcy5vZmYoZG9jdW1lbnQsICdtb3VzZXVwJywgdGhpcy5oYW5kbGVNb3VzZVVwKTtcbiAgICB0aGlzLm9mZihkb2N1bWVudCwgJ3RvdWNobW92ZScsIHRoaXMuaGFuZGxlTW91c2VNb3ZlKTtcbiAgICB0aGlzLm9mZihkb2N1bWVudCwgJ3RvdWNoZW5kJywgdGhpcy5oYW5kbGVNb3VzZVVwKTtcblxuICAgIHRoaXMudXBkYXRlKCk7XG4gIH1cblxuICB1cGRhdGUoKSB7XG4gICAgLy8gSW4gVm9sdW1lQmFyIGluaXQgd2UgaGF2ZSBhIHNldFRpbWVvdXQgZm9yIHVwZGF0ZSB0aGF0IHBvcHMgYW5kIHVwZGF0ZSB0byB0aGUgZW5kIG9mIHRoZVxuICAgIC8vIGV4ZWN1dGlvbiBzdGFjay4gVGhlIHBsYXllciBpcyBkZXN0cm95ZWQgYmVmb3JlIHRoZW4gdXBkYXRlIHdpbGwgY2F1c2UgYW4gZXJyb3JcbiAgICBpZiAoIXRoaXMuZWxfKSByZXR1cm47XG5cbiAgICAvLyBJZiBzY3J1YmJpbmcsIHdlIGNvdWxkIHVzZSBhIGNhY2hlZCB2YWx1ZSB0byBtYWtlIHRoZSBoYW5kbGUga2VlcCB1cCB3aXRoIHRoZSB1c2VyJ3MgbW91c2UuXG4gICAgLy8gT24gSFRNTDUgYnJvd3NlcnMgc2NydWJiaW5nIGlzIHJlYWxseSBzbW9vdGgsIGJ1dCBzb21lIGZsYXNoIHBsYXllcnMgYXJlIHNsb3csIHNvIHdlIG1pZ2h0IHdhbnQgdG8gdXRpbGl6ZSB0aGlzIGxhdGVyLlxuICAgIC8vIHZhciBwcm9ncmVzcyA9ICAodGhpcy5wbGF5ZXJfLnNjcnViYmluZykgPyB0aGlzLnBsYXllcl8uZ2V0Q2FjaGUoKS5jdXJyZW50VGltZSAvIHRoaXMucGxheWVyXy5kdXJhdGlvbigpIDogdGhpcy5wbGF5ZXJfLmN1cnJlbnRUaW1lKCkgLyB0aGlzLnBsYXllcl8uZHVyYXRpb24oKTtcbiAgICBsZXQgcHJvZ3Jlc3MgPSB0aGlzLmdldFBlcmNlbnQoKTtcbiAgICBsZXQgYmFyID0gdGhpcy5iYXI7XG5cbiAgICAvLyBJZiB0aGVyZSdzIG5vIGJhci4uLlxuICAgIGlmICghYmFyKSByZXR1cm47XG5cbiAgICAvLyBQcm90ZWN0IGFnYWluc3Qgbm8gZHVyYXRpb24gYW5kIG90aGVyIGRpdmlzaW9uIGlzc3Vlc1xuICAgIGlmICh0eXBlb2YgcHJvZ3Jlc3MgIT09ICdudW1iZXInIHx8XG4gICAgICAgIHByb2dyZXNzICE9PSBwcm9ncmVzcyB8fFxuICAgICAgICBwcm9ncmVzcyA8IDAgfHxcbiAgICAgICAgcHJvZ3Jlc3MgPT09IEluZmluaXR5KSB7XG4gICAgICAgICAgcHJvZ3Jlc3MgPSAwO1xuICAgIH1cblxuICAgIC8vIElmIHRoZXJlIGlzIGEgaGFuZGxlLCB3ZSBuZWVkIHRvIGFjY291bnQgZm9yIHRoZSBoYW5kbGUgaW4gb3VyIGNhbGN1bGF0aW9uIGZvciBwcm9ncmVzcyBiYXJcbiAgICAvLyBzbyB0aGF0IGl0IGRvZXNuJ3QgZmFsbCBzaG9ydCBvZiBvciBleHRlbmQgcGFzdCB0aGUgaGFuZGxlLlxuICAgIGxldCBiYXJQcm9ncmVzcyA9IHRoaXMudXBkYXRlSGFuZGxlUG9zaXRpb24ocHJvZ3Jlc3MpO1xuXG4gICAgLy8gQ29udmVydCB0byBhIHBlcmNlbnRhZ2UgZm9yIHNldHRpbmdcbiAgICBsZXQgcGVyY2VudGFnZSA9IExpYi5yb3VuZChiYXJQcm9ncmVzcyAqIDEwMCwgMikgKyAnJSc7XG5cbiAgICAvLyBTZXQgdGhlIG5ldyBiYXIgd2lkdGggb3IgaGVpZ2h0XG4gICAgaWYgKHRoaXMudmVydGljYWwoKSkge1xuICAgICAgYmFyLmVsKCkuc3R5bGUuaGVpZ2h0ID0gcGVyY2VudGFnZTtcbiAgICB9IGVsc2Uge1xuICAgICAgYmFyLmVsKCkuc3R5bGUud2lkdGggPSBwZXJjZW50YWdlO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAqIFVwZGF0ZSB0aGUgaGFuZGxlIHBvc2l0aW9uLlxuICAqL1xuICB1cGRhdGVIYW5kbGVQb3NpdGlvbihwcm9ncmVzcykge1xuICAgIGxldCBoYW5kbGUgPSB0aGlzLmhhbmRsZTtcbiAgICBpZiAoIWhhbmRsZSkgcmV0dXJuO1xuXG4gICAgbGV0IHZlcnRpY2FsID0gdGhpcy52ZXJ0aWNhbCgpO1xuICAgIGxldCBib3ggPSB0aGlzLmVsXztcblxuICAgIGxldCBib3hTaXplLCBoYW5kbGVTaXplO1xuICAgIGlmICh2ZXJ0aWNhbCkge1xuICAgICAgYm94U2l6ZSA9IGJveC5vZmZzZXRIZWlnaHQ7XG4gICAgICBoYW5kbGVTaXplID0gaGFuZGxlLmVsKCkub2Zmc2V0SGVpZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICBib3hTaXplID0gYm94Lm9mZnNldFdpZHRoO1xuICAgICAgaGFuZGxlU2l6ZSA9IGhhbmRsZS5lbCgpLm9mZnNldFdpZHRoO1xuICAgIH1cblxuICAgIC8vIFRoZSB3aWR0aCBvZiB0aGUgaGFuZGxlIGluIHBlcmNlbnQgb2YgdGhlIGNvbnRhaW5pbmcgYm94XG4gICAgLy8gSW4gSUUsIHdpZHRocyBtYXkgbm90IGJlIHJlYWR5IHlldCBjYXVzaW5nIE5hTlxuICAgIGxldCBoYW5kbGVQZXJjZW50ID0gKGhhbmRsZVNpemUpID8gaGFuZGxlU2l6ZSAvIGJveFNpemUgOiAwO1xuXG4gICAgLy8gR2V0IHRoZSBhZGp1c3RlZCBzaXplIG9mIHRoZSBib3gsIGNvbnNpZGVyaW5nIHRoYXQgdGhlIGhhbmRsZSdzIGNlbnRlciBuZXZlciB0b3VjaGVzIHRoZSBsZWZ0IG9yIHJpZ2h0IHNpZGUuXG4gICAgLy8gVGhlcmUgaXMgYSBtYXJnaW4gb2YgaGFsZiB0aGUgaGFuZGxlJ3Mgd2lkdGggb24gYm90aCBzaWRlcy5cbiAgICBsZXQgYm94QWRqdXN0ZWRQZXJjZW50ID0gMSAtIGhhbmRsZVBlcmNlbnQ7XG5cbiAgICAvLyBBZGp1c3QgdGhlIHByb2dyZXNzIHRoYXQgd2UnbGwgdXNlIHRvIHNldCB3aWR0aHMgdG8gdGhlIG5ldyBhZGp1c3RlZCBib3ggd2lkdGhcbiAgICBsZXQgYWRqdXN0ZWRQcm9ncmVzcyA9IHByb2dyZXNzICogYm94QWRqdXN0ZWRQZXJjZW50O1xuXG4gICAgLy8gVGhlIGJhciBkb2VzIHJlYWNoIHRoZSBsZWZ0IHNpZGUsIHNvIHdlIG5lZWQgdG8gYWNjb3VudCBmb3IgdGhpcyBpbiB0aGUgYmFyJ3Mgd2lkdGhcbiAgICBsZXQgYmFyUHJvZ3Jlc3MgPSBhZGp1c3RlZFByb2dyZXNzICsgKGhhbmRsZVBlcmNlbnQgLyAyKTtcblxuICAgIGxldCBwZXJjZW50YWdlID0gTGliLnJvdW5kKGFkanVzdGVkUHJvZ3Jlc3MgKiAxMDAsIDIpICsgJyUnO1xuXG4gICAgaWYgKHZlcnRpY2FsKSB7XG4gICAgICBoYW5kbGUuZWwoKS5zdHlsZS5ib3R0b20gPSBwZXJjZW50YWdlO1xuICAgIH0gZWxzZSB7XG4gICAgICBoYW5kbGUuZWwoKS5zdHlsZS5sZWZ0ID0gcGVyY2VudGFnZTtcbiAgICB9XG5cbiAgICByZXR1cm4gYmFyUHJvZ3Jlc3M7XG4gIH1cblxuICBjYWxjdWxhdGVEaXN0YW5jZShldmVudCl7XG4gICAgbGV0IGVsID0gdGhpcy5lbF87XG4gICAgbGV0IGJveCA9IExpYi5maW5kUG9zaXRpb24oZWwpO1xuICAgIGxldCBib3hXID0gZWwub2Zmc2V0V2lkdGg7XG4gICAgbGV0IGJveEggPSBlbC5vZmZzZXRIZWlnaHQ7XG4gICAgbGV0IGhhbmRsZSA9IHRoaXMuaGFuZGxlO1xuXG4gICAgaWYgKHRoaXMub3B0aW9ucygpWyd2ZXJ0aWNhbCddKSB7XG4gICAgICBsZXQgYm94WSA9IGJveC50b3A7XG5cbiAgICAgIGxldCBwYWdlWTtcbiAgICAgIGlmIChldmVudC5jaGFuZ2VkVG91Y2hlcykge1xuICAgICAgICBwYWdlWSA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VZO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFnZVkgPSBldmVudC5wYWdlWTtcbiAgICAgIH1cblxuICAgICAgaWYgKGhhbmRsZSkge1xuICAgICAgICB2YXIgaGFuZGxlSCA9IGhhbmRsZS5lbCgpLm9mZnNldEhlaWdodDtcbiAgICAgICAgLy8gQWRqdXN0ZWQgWCBhbmQgV2lkdGgsIHNvIGhhbmRsZSBkb2Vzbid0IGdvIG91dHNpZGUgdGhlIGJhclxuICAgICAgICBib3hZID0gYm94WSArIChoYW5kbGVIIC8gMik7XG4gICAgICAgIGJveEggPSBib3hIIC0gaGFuZGxlSDtcbiAgICAgIH1cblxuICAgICAgLy8gUGVyY2VudCB0aGF0IHRoZSBjbGljayBpcyB0aHJvdWdoIHRoZSBhZGp1c3RlZCBhcmVhXG4gICAgICByZXR1cm4gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgKChib3hZIC0gcGFnZVkpICsgYm94SCkgLyBib3hIKSk7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IGJveFggPSBib3gubGVmdDtcblxuICAgICAgbGV0IHBhZ2VYO1xuICAgICAgaWYgKGV2ZW50LmNoYW5nZWRUb3VjaGVzKSB7XG4gICAgICAgIHBhZ2VYID0gZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYWdlWCA9IGV2ZW50LnBhZ2VYO1xuICAgICAgfVxuXG4gICAgICBpZiAoaGFuZGxlKSB7XG4gICAgICAgIHZhciBoYW5kbGVXID0gaGFuZGxlLmVsKCkub2Zmc2V0V2lkdGg7XG5cbiAgICAgICAgLy8gQWRqdXN0ZWQgWCBhbmQgV2lkdGgsIHNvIGhhbmRsZSBkb2Vzbid0IGdvIG91dHNpZGUgdGhlIGJhclxuICAgICAgICBib3hYID0gYm94WCArIChoYW5kbGVXIC8gMik7XG4gICAgICAgIGJveFcgPSBib3hXIC0gaGFuZGxlVztcbiAgICAgIH1cblxuICAgICAgLy8gUGVyY2VudCB0aGF0IHRoZSBjbGljayBpcyB0aHJvdWdoIHRoZSBhZGp1c3RlZCBhcmVhXG4gICAgICByZXR1cm4gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgKHBhZ2VYIC0gYm94WCkgLyBib3hXKSk7XG4gICAgfVxuICB9XG5cbiAgaGFuZGxlRm9jdXMoKSB7XG4gICAgdGhpcy5vbihkb2N1bWVudCwgJ2tleWRvd24nLCB0aGlzLmhhbmRsZUtleVByZXNzKTtcbiAgfVxuXG4gIGhhbmRsZUtleVByZXNzKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LndoaWNoID09PSAzNyB8fCBldmVudC53aGljaCA9PT0gNDApIHsgLy8gTGVmdCBhbmQgRG93biBBcnJvd3NcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB0aGlzLnN0ZXBCYWNrKCk7XG4gICAgfSBlbHNlIGlmIChldmVudC53aGljaCA9PT0gMzggfHwgZXZlbnQud2hpY2ggPT09IDM5KSB7IC8vIFVwIGFuZCBSaWdodCBBcnJvd3NcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB0aGlzLnN0ZXBGb3J3YXJkKCk7XG4gICAgfVxuICB9XG5cbiAgaGFuZGxlQmx1cigpIHtcbiAgICB0aGlzLm9mZihkb2N1bWVudCwgJ2tleWRvd24nLCB0aGlzLmhhbmRsZUtleVByZXNzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMaXN0ZW5lciBmb3IgY2xpY2sgZXZlbnRzIG9uIHNsaWRlciwgdXNlZCB0byBwcmV2ZW50IGNsaWNrc1xuICAgKiAgIGZyb20gYnViYmxpbmcgdXAgdG8gcGFyZW50IGVsZW1lbnRzIGxpa2UgYnV0dG9uIG1lbnVzLlxuICAgKiBAcGFyYW0gIHtPYmplY3R9IGV2ZW50IEV2ZW50IG9iamVjdFxuICAgKi9cbiAgaGFuZGxlQ2xpY2soZXZlbnQpIHtcbiAgICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG5cbiAgdmVydGljYWwoYm9vbCkge1xuICAgIGlmIChib29sID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnZlcnRpY2FsXyB8fCBmYWxzZTtcbiAgICB9XG5cbiAgICB0aGlzLnZlcnRpY2FsXyA9ICEhYm9vbDtcblxuICAgIGlmICh0aGlzLnZlcnRpY2FsXykge1xuICAgICAgdGhpcy5hZGRDbGFzcygndmpzLXNsaWRlci12ZXJ0aWNhbCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFkZENsYXNzKCd2anMtc2xpZGVyLWhvcml6b250YWwnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG59XG5cbkNvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudCgnU2xpZGVyJywgU2xpZGVyKTtcbmV4cG9ydCBkZWZhdWx0IFNsaWRlcjtcbiIsImZ1bmN0aW9uIEZsYXNoUnRtcERlY29yYXRvcihGbGFzaCkge1xuICBGbGFzaC5zdHJlYW1pbmdGb3JtYXRzID0ge1xuICAgICdydG1wL21wNCc6ICdNUDQnLFxuICAgICdydG1wL2Zsdic6ICdGTFYnXG4gIH07XG5cbiAgRmxhc2guc3RyZWFtRnJvbVBhcnRzID0gZnVuY3Rpb24oY29ubmVjdGlvbiwgc3RyZWFtKSB7XG4gICAgcmV0dXJuIGNvbm5lY3Rpb24gKyAnJicgKyBzdHJlYW07XG4gIH07XG5cbiAgRmxhc2guc3RyZWFtVG9QYXJ0cyA9IGZ1bmN0aW9uKHNyYykge1xuICAgIGxldCBwYXJ0cyA9IHtcbiAgICAgIGNvbm5lY3Rpb246ICcnLFxuICAgICAgc3RyZWFtOiAnJ1xuICAgIH07XG5cbiAgICBpZiAoIXNyYykgcmV0dXJuIHBhcnRzO1xuXG4gICAgLy8gTG9vayBmb3IgdGhlIG5vcm1hbCBVUkwgc2VwYXJhdG9yIHdlIGV4cGVjdCwgJyYnLlxuICAgIC8vIElmIGZvdW5kLCB3ZSBzcGxpdCB0aGUgVVJMIGludG8gdHdvIHBpZWNlcyBhcm91bmQgdGhlXG4gICAgLy8gZmlyc3QgJyYnLlxuICAgIGxldCBjb25uRW5kID0gc3JjLmluZGV4T2YoJyYnKTtcbiAgICBsZXQgc3RyZWFtQmVnaW47XG4gICAgaWYgKGNvbm5FbmQgIT09IC0xKSB7XG4gICAgICBzdHJlYW1CZWdpbiA9IGNvbm5FbmQgKyAxO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIC8vIElmIHRoZXJlJ3Mgbm90IGEgJyYnLCB3ZSB1c2UgdGhlIGxhc3QgJy8nIGFzIHRoZSBkZWxpbWl0ZXIuXG4gICAgICBjb25uRW5kID0gc3RyZWFtQmVnaW4gPSBzcmMubGFzdEluZGV4T2YoJy8nKSArIDE7XG4gICAgICBpZiAoY29ubkVuZCA9PT0gMCkge1xuICAgICAgICAvLyByZWFsbHksIHRoZXJlJ3Mgbm90IGEgJy8nP1xuICAgICAgICBjb25uRW5kID0gc3RyZWFtQmVnaW4gPSBzcmMubGVuZ3RoO1xuICAgICAgfVxuICAgIH1cbiAgICBwYXJ0cy5jb25uZWN0aW9uID0gc3JjLnN1YnN0cmluZygwLCBjb25uRW5kKTtcbiAgICBwYXJ0cy5zdHJlYW0gPSBzcmMuc3Vic3RyaW5nKHN0cmVhbUJlZ2luLCBzcmMubGVuZ3RoKTtcblxuICAgIHJldHVybiBwYXJ0cztcbiAgfTtcblxuICBGbGFzaC5pc1N0cmVhbWluZ1R5cGUgPSBmdW5jdGlvbihzcmNUeXBlKSB7XG4gICAgcmV0dXJuIHNyY1R5cGUgaW4gRmxhc2guc3RyZWFtaW5nRm9ybWF0cztcbiAgfTtcblxuICAvLyBSVE1QIGhhcyBmb3VyIHZhcmlhdGlvbnMsIGFueSBzdHJpbmcgc3RhcnRpbmdcbiAgLy8gd2l0aCBvbmUgb2YgdGhlc2UgcHJvdG9jb2xzIHNob3VsZCBiZSB2YWxpZFxuICBGbGFzaC5SVE1QX1JFID0gL15ydG1wW3NldF0/OlxcL1xcLy9pO1xuXG4gIEZsYXNoLmlzU3RyZWFtaW5nU3JjID0gZnVuY3Rpb24oc3JjKSB7XG4gICAgcmV0dXJuIEZsYXNoLlJUTVBfUkUudGVzdChzcmMpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBBIHNvdXJjZSBoYW5kbGVyIGZvciBSVE1QIHVybHNcbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG4gIEZsYXNoLnJ0bXBTb3VyY2VIYW5kbGVyID0ge307XG5cbiAgLyoqXG4gICAqIENoZWNrIEZsYXNoIGNhbiBoYW5kbGUgdGhlIHNvdXJjZSBuYXRpdmVseVxuICAgKiBAcGFyYW0gIHtPYmplY3R9IHNvdXJjZSAgVGhlIHNvdXJjZSBvYmplY3RcbiAgICogQHJldHVybiB7U3RyaW5nfSAgICAgICAgICdwcm9iYWJseScsICdtYXliZScsIG9yICcnIChlbXB0eSBzdHJpbmcpXG4gICAqL1xuICBGbGFzaC5ydG1wU291cmNlSGFuZGxlci5jYW5IYW5kbGVTb3VyY2UgPSBmdW5jdGlvbihzb3VyY2Upe1xuICAgIGlmIChGbGFzaC5pc1N0cmVhbWluZ1R5cGUoc291cmNlLnR5cGUpIHx8IEZsYXNoLmlzU3RyZWFtaW5nU3JjKHNvdXJjZS5zcmMpKSB7XG4gICAgICByZXR1cm4gJ21heWJlJztcbiAgICB9XG5cbiAgICByZXR1cm4gJyc7XG4gIH07XG5cbiAgLyoqXG4gICAqIFBhc3MgdGhlIHNvdXJjZSB0byB0aGUgZmxhc2ggb2JqZWN0XG4gICAqIEFkYXB0aXZlIHNvdXJjZSBoYW5kbGVycyB3aWxsIGhhdmUgbW9yZSBjb21wbGljYXRlZCB3b3JrZmxvd3MgYmVmb3JlIHBhc3NpbmdcbiAgICogdmlkZW8gZGF0YSB0byB0aGUgdmlkZW8gZWxlbWVudFxuICAgKiBAcGFyYW0gIHtPYmplY3R9IHNvdXJjZSAgICBUaGUgc291cmNlIG9iamVjdFxuICAgKiBAcGFyYW0gIHtGbGFzaH0gdGVjaCAgIFRoZSBpbnN0YW5jZSBvZiB0aGUgRmxhc2ggdGVjaFxuICAgKi9cbiAgRmxhc2gucnRtcFNvdXJjZUhhbmRsZXIuaGFuZGxlU291cmNlID0gZnVuY3Rpb24oc291cmNlLCB0ZWNoKXtcbiAgICBsZXQgc3JjUGFydHMgPSBGbGFzaC5zdHJlYW1Ub1BhcnRzKHNvdXJjZS5zcmMpO1xuXG4gICAgdGVjaFsnc2V0UnRtcENvbm5lY3Rpb24nXShzcmNQYXJ0cy5jb25uZWN0aW9uKTtcbiAgICB0ZWNoWydzZXRSdG1wU3RyZWFtJ10oc3JjUGFydHMuc3RyZWFtKTtcbiAgfTtcblxuICAvLyBSZWdpc3RlciB0aGUgbmF0aXZlIHNvdXJjZSBoYW5kbGVyXG4gIEZsYXNoLnJlZ2lzdGVyU291cmNlSGFuZGxlcihGbGFzaC5ydG1wU291cmNlSGFuZGxlcik7XG5cbiAgcmV0dXJuIEZsYXNoO1xufVxuXG5leHBvcnQgZGVmYXVsdCBGbGFzaFJ0bXBEZWNvcmF0b3I7XG4iLCIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgVmlkZW9KUy1TV0YgLSBDdXN0b20gRmxhc2ggUGxheWVyIHdpdGggSFRNTDUtaXNoIEFQSVxuICogaHR0cHM6Ly9naXRodWIuY29tL3plbmNvZGVyL3ZpZGVvLWpzLXN3ZlxuICogTm90IHVzaW5nIHNldHVwVHJpZ2dlcnMuIFVzaW5nIGdsb2JhbCBvbkV2ZW50IGZ1bmMgdG8gZGlzdHJpYnV0ZSBldmVudHNcbiAqL1xuXG5pbXBvcnQgVGVjaCBmcm9tICcuL3RlY2gnO1xuaW1wb3J0ICogYXMgTGliIGZyb20gJy4uL2xpYic7XG5pbXBvcnQgRmxhc2hSdG1wRGVjb3JhdG9yIGZyb20gJy4vZmxhc2gtcnRtcCc7XG5pbXBvcnQgQ29tcG9uZW50IGZyb20gJy4uL2NvbXBvbmVudCc7XG5pbXBvcnQgd2luZG93IGZyb20gJ2dsb2JhbC93aW5kb3cnO1xuXG5sZXQgbmF2aWdhdG9yID0gd2luZG93Lm5hdmlnYXRvcjtcbi8qKlxuICogRmxhc2ggTWVkaWEgQ29udHJvbGxlciAtIFdyYXBwZXIgZm9yIGZhbGxiYWNrIFNXRiBBUElcbiAqXG4gKiBAcGFyYW0ge1BsYXllcn0gcGxheWVyXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbnNcbiAqIEBwYXJhbSB7RnVuY3Rpb249fSByZWFkeVxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmNsYXNzIEZsYXNoIGV4dGVuZHMgVGVjaCB7XG5cbiAgY29uc3RydWN0b3Iob3B0aW9ucywgcmVhZHkpe1xuICAgIHN1cGVyKG9wdGlvbnMsIHJlYWR5KTtcblxuICAgIGxldCB7IHNvdXJjZSwgcGFyZW50RWwgfSA9IG9wdGlvbnM7XG5cbiAgICAvLyBHZW5lcmF0ZSBJRCBmb3Igc3dmIG9iamVjdFxuICAgIGxldCBvYmpJZCA9IG9wdGlvbnMucGxheWVySWQrJ19mbGFzaF9hcGknO1xuXG4gICAgLy8gTWVyZ2UgZGVmYXVsdCBmbGFzaHZhcnMgd2l0aCBvbmVzIHBhc3NlZCBpbiB0byBpbml0XG4gICAgbGV0IGZsYXNoVmFycyA9IExpYi5vYmoubWVyZ2Uoe1xuXG4gICAgICAvLyBTV0YgQ2FsbGJhY2sgRnVuY3Rpb25zXG4gICAgICAncmVhZHlGdW5jdGlvbic6ICd2aWRlb2pzLkZsYXNoLm9uUmVhZHknLFxuICAgICAgJ2V2ZW50UHJveHlGdW5jdGlvbic6ICd2aWRlb2pzLkZsYXNoLm9uRXZlbnQnLFxuICAgICAgJ2Vycm9yRXZlbnRQcm94eUZ1bmN0aW9uJzogJ3ZpZGVvanMuRmxhc2gub25FcnJvcicsXG5cbiAgICAgIC8vIFBsYXllciBTZXR0aW5nc1xuICAgICAgJ2F1dG9wbGF5Jzogb3B0aW9ucy5hdXRvcGxheSxcbiAgICAgICdwcmVsb2FkJzogb3B0aW9ucy5wcmVsb2FkLFxuICAgICAgJ2xvb3AnOiBvcHRpb25zLmxvb3AsXG4gICAgICAnbXV0ZWQnOiBvcHRpb25zLm11dGVkXG5cbiAgICB9LCBvcHRpb25zLmZsYXNoVmFycyk7XG5cbiAgICAvLyBNZXJnZSBkZWZhdWx0IHBhcmFtZXMgd2l0aCBvbmVzIHBhc3NlZCBpblxuICAgIGxldCBwYXJhbXMgPSBMaWIub2JqLm1lcmdlKHtcbiAgICAgICd3bW9kZSc6ICdvcGFxdWUnLCAvLyBPcGFxdWUgaXMgbmVlZGVkIHRvIG92ZXJsYXkgY29udHJvbHMsIGJ1dCBjYW4gYWZmZWN0IHBsYXliYWNrIHBlcmZvcm1hbmNlXG4gICAgICAnYmdjb2xvcic6ICcjMDAwMDAwJyAvLyBVc2luZyBiZ2NvbG9yIHByZXZlbnRzIGEgd2hpdGUgZmxhc2ggd2hlbiB0aGUgb2JqZWN0IGlzIGxvYWRpbmdcbiAgICB9LCBvcHRpb25zLnBhcmFtcyk7XG5cbiAgICAvLyBNZXJnZSBkZWZhdWx0IGF0dHJpYnV0ZXMgd2l0aCBvbmVzIHBhc3NlZCBpblxuICAgIGxldCBhdHRyaWJ1dGVzID0gTGliLm9iai5tZXJnZSh7XG4gICAgICAnaWQnOiBvYmpJZCxcbiAgICAgICduYW1lJzogb2JqSWQsIC8vIEJvdGggSUQgYW5kIE5hbWUgbmVlZGVkIG9yIHN3ZiB0byBpZGVudGlmeSBpdHNlbGZcbiAgICAgICdjbGFzcyc6ICd2anMtdGVjaCdcbiAgICB9LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuXG4gICAgLy8gSWYgc291cmNlIHdhcyBzdXBwbGllZCBwYXNzIGFzIGEgZmxhc2ggdmFyLlxuICAgIGlmIChzb3VyY2UpIHtcbiAgICAgIHRoaXMucmVhZHkoZnVuY3Rpb24oKXtcbiAgICAgICAgdGhpcy5zZXRTb3VyY2Uoc291cmNlKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEhhdmluZyBpc3N1ZXMgd2l0aCBGbGFzaCByZWxvYWRpbmcgb24gY2VydGFpbiBwYWdlIGFjdGlvbnMgKGhpZGUvcmVzaXplL2Z1bGxzY3JlZW4pIGluIGNlcnRhaW4gYnJvd3NlcnNcbiAgICAvLyBUaGlzIGFsbG93cyByZXNldHRpbmcgdGhlIHBsYXloZWFkIHdoZW4gd2UgY2F0Y2ggdGhlIHJlbG9hZFxuICAgIGlmIChvcHRpb25zLnN0YXJ0VGltZSkge1xuICAgICAgdGhpcy5yZWFkeShmdW5jdGlvbigpe1xuICAgICAgICB0aGlzLmxvYWQoKTtcbiAgICAgICAgdGhpcy5wbGF5KCk7XG4gICAgICAgIHRoaXMuY3VycmVudFRpbWUob3B0aW9ucy5zdGFydFRpbWUpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgd2luZG93LnZpZGVvanMgPSB3aW5kb3cudmlkZW9qcyB8fCB7fTtcbiAgICB3aW5kb3cudmlkZW9qcy5GbGFzaCA9IHdpbmRvdy52aWRlb2pzLkZsYXNoIHx8IHt9O1xuICAgIHdpbmRvdy52aWRlb2pzLkZsYXNoLm9uUmVhZHkgPSBGbGFzaC5vblJlYWR5O1xuICAgIHdpbmRvdy52aWRlb2pzLkZsYXNoLm9uRXZlbnQgPSBGbGFzaC5vbkV2ZW50O1xuICAgIHdpbmRvdy52aWRlb2pzLkZsYXNoLm9uRXJyb3IgPSBGbGFzaC5vbkVycm9yO1xuXG4gICAgdGhpcy5lbF8gPSBGbGFzaC5lbWJlZChvcHRpb25zLnN3ZiwgZmxhc2hWYXJzLCBwYXJhbXMsIGF0dHJpYnV0ZXMpO1xuICAgIHRoaXMuZWxfLnRlY2ggPSB0aGlzO1xuICB9XG5cbiAgcGxheSgpIHtcbiAgICB0aGlzLmVsXy52anNfcGxheSgpO1xuICB9XG5cbiAgcGF1c2UoKSB7XG4gICAgdGhpcy5lbF8udmpzX3BhdXNlKCk7XG4gIH1cblxuICBzcmMoc3JjKSB7XG4gICAgaWYgKHNyYyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdGhpcy5jdXJyZW50U3JjKCk7XG4gICAgfVxuXG4gICAgLy8gU2V0dGluZyBzcmMgdGhyb3VnaCBgc3JjYCBub3QgYHNldFNyY2Agd2lsbCBiZSBkZXByZWNhdGVkXG4gICAgcmV0dXJuIHRoaXMuc2V0U3JjKHNyYyk7XG4gIH1cblxuICBzZXRTcmMoc3JjKSB7XG4gICAgLy8gTWFrZSBzdXJlIHNvdXJjZSBVUkwgaXMgYWJzb2x1dGUuXG4gICAgc3JjID0gTGliLmdldEFic29sdXRlVVJMKHNyYyk7XG4gICAgdGhpcy5lbF8udmpzX3NyYyhzcmMpO1xuXG4gICAgLy8gQ3VycmVudGx5IHRoZSBTV0YgZG9lc24ndCBhdXRvcGxheSBpZiB5b3UgbG9hZCBhIHNvdXJjZSBsYXRlci5cbiAgICAvLyBlLmcuIExvYWQgcGxheWVyIHcvIG5vIHNvdXJjZSwgd2FpdCAycywgc2V0IHNyYy5cbiAgICBpZiAodGhpcy5hdXRvcGxheSgpKSB7XG4gICAgICB2YXIgdGVjaCA9IHRoaXM7XG4gICAgICB0aGlzLnNldFRpbWVvdXQoZnVuY3Rpb24oKXsgdGVjaC5wbGF5KCk7IH0sIDApO1xuICAgIH1cbiAgfVxuXG4gIHNldEN1cnJlbnRUaW1lKHRpbWUpIHtcbiAgICB0aGlzLmxhc3RTZWVrVGFyZ2V0XyA9IHRpbWU7XG4gICAgdGhpcy5lbF8udmpzX3NldFByb3BlcnR5KCdjdXJyZW50VGltZScsIHRpbWUpO1xuICAgIHN1cGVyLnNldEN1cnJlbnRUaW1lKCk7XG4gIH1cblxuICBjdXJyZW50VGltZSh0aW1lKSB7XG4gICAgLy8gd2hlbiBzZWVraW5nIG1ha2UgdGhlIHJlcG9ydGVkIHRpbWUga2VlcCB1cCB3aXRoIHRoZSByZXF1ZXN0ZWQgdGltZVxuICAgIC8vIGJ5IHJlYWRpbmcgdGhlIHRpbWUgd2UncmUgc2Vla2luZyB0b1xuICAgIGlmICh0aGlzLnNlZWtpbmcoKSkge1xuICAgICAgcmV0dXJuIHRoaXMubGFzdFNlZWtUYXJnZXRfIHx8IDA7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmVsXy52anNfZ2V0UHJvcGVydHkoJ2N1cnJlbnRUaW1lJyk7XG4gIH1cblxuICBjdXJyZW50U3JjKCkge1xuICAgIGlmICh0aGlzLmN1cnJlbnRTb3VyY2VfKSB7XG4gICAgICByZXR1cm4gdGhpcy5jdXJyZW50U291cmNlXy5zcmM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmVsXy52anNfZ2V0UHJvcGVydHkoJ2N1cnJlbnRTcmMnKTtcbiAgICB9XG4gIH1cblxuICBsb2FkKCkge1xuICAgIHRoaXMuZWxfLnZqc19sb2FkKCk7XG4gIH1cblxuICBwb3N0ZXIoKSB7XG4gICAgdGhpcy5lbF8udmpzX2dldFByb3BlcnR5KCdwb3N0ZXInKTtcbiAgfVxuXG4gIC8vIHBvc3RlciBpbWFnZXMgYXJlIG5vdCBoYW5kbGVkIGJ5IHRoZSBGbGFzaCB0ZWNoIHNvIG1ha2UgdGhpcyBhIG5vLW9wXG4gIHNldFBvc3RlcigpIHt9XG5cbiAgYnVmZmVyZWQoKSB7XG4gICAgcmV0dXJuIExpYi5jcmVhdGVUaW1lUmFuZ2UoMCwgdGhpcy5lbF8udmpzX2dldFByb3BlcnR5KCdidWZmZXJlZCcpKTtcbiAgfVxuXG4gIHN1cHBvcnRzRnVsbFNjcmVlbigpIHtcbiAgICByZXR1cm4gZmFsc2U7IC8vIEZsYXNoIGRvZXMgbm90IGFsbG93IGZ1bGxzY3JlZW4gdGhyb3VnaCBqYXZhc2NyaXB0XG4gIH1cblxuICBlbnRlckZ1bGxTY3JlZW4oKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbn1cblxuXG4vLyBDcmVhdGUgc2V0dGVycyBhbmQgZ2V0dGVycyBmb3IgYXR0cmlidXRlc1xuY29uc3QgX2FwaSA9IEZsYXNoLnByb3RvdHlwZTtcbmNvbnN0IF9yZWFkV3JpdGUgPSAncnRtcENvbm5lY3Rpb24scnRtcFN0cmVhbSxwcmVsb2FkLGRlZmF1bHRQbGF5YmFja1JhdGUscGxheWJhY2tSYXRlLGF1dG9wbGF5LGxvb3AsbWVkaWFHcm91cCxjb250cm9sbGVyLGNvbnRyb2xzLHZvbHVtZSxtdXRlZCxkZWZhdWx0TXV0ZWQnLnNwbGl0KCcsJyk7XG5jb25zdCBfcmVhZE9ubHkgPSAnZXJyb3IsbmV0d29ya1N0YXRlLHJlYWR5U3RhdGUsc2Vla2luZyxpbml0aWFsVGltZSxkdXJhdGlvbixzdGFydE9mZnNldFRpbWUscGF1c2VkLHBsYXllZCxzZWVrYWJsZSxlbmRlZCx2aWRlb1RyYWNrcyxhdWRpb1RyYWNrcyx2aWRlb1dpZHRoLHZpZGVvSGVpZ2h0Jy5zcGxpdCgnLCcpO1xuXG5mdW5jdGlvbiBfY3JlYXRlU2V0dGVyKGF0dHIpe1xuICB2YXIgYXR0clVwcGVyID0gYXR0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGF0dHIuc2xpY2UoMSk7XG4gIF9hcGlbJ3NldCcrYXR0clVwcGVyXSA9IGZ1bmN0aW9uKHZhbCl7IHJldHVybiB0aGlzLmVsXy52anNfc2V0UHJvcGVydHkoYXR0ciwgdmFsKTsgfTtcbn1cbmZ1bmN0aW9uIF9jcmVhdGVHZXR0ZXIoYXR0cikge1xuICBfYXBpW2F0dHJdID0gZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXMuZWxfLnZqc19nZXRQcm9wZXJ0eShhdHRyKTsgfTtcbn1cblxuLy8gQ3JlYXRlIGdldHRlciBhbmQgc2V0dGVycyBmb3IgYWxsIHJlYWQvd3JpdGUgYXR0cmlidXRlc1xuZm9yIChsZXQgaSA9IDA7IGkgPCBfcmVhZFdyaXRlLmxlbmd0aDsgaSsrKSB7XG4gIF9jcmVhdGVHZXR0ZXIoX3JlYWRXcml0ZVtpXSk7XG4gIF9jcmVhdGVTZXR0ZXIoX3JlYWRXcml0ZVtpXSk7XG59XG5cbi8vIENyZWF0ZSBnZXR0ZXJzIGZvciByZWFkLW9ubHkgYXR0cmlidXRlc1xuZm9yIChsZXQgaSA9IDA7IGkgPCBfcmVhZE9ubHkubGVuZ3RoOyBpKyspIHtcbiAgX2NyZWF0ZUdldHRlcihfcmVhZE9ubHlbaV0pO1xufVxuXG4vKiBGbGFzaCBTdXBwb3J0IFRlc3RpbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuRmxhc2guaXNTdXBwb3J0ZWQgPSBmdW5jdGlvbigpe1xuICByZXR1cm4gRmxhc2gudmVyc2lvbigpWzBdID49IDEwO1xuICAvLyByZXR1cm4gc3dmb2JqZWN0Lmhhc0ZsYXNoUGxheWVyVmVyc2lvbignMTAnKTtcbn07XG5cbi8vIEFkZCBTb3VyY2UgSGFuZGxlciBwYXR0ZXJuIGZ1bmN0aW9ucyB0byB0aGlzIHRlY2hcblRlY2gud2l0aFNvdXJjZUhhbmRsZXJzKEZsYXNoKTtcblxuLyoqXG4gKiBUaGUgZGVmYXVsdCBuYXRpdmUgc291cmNlIGhhbmRsZXIuXG4gKiBUaGlzIHNpbXBseSBwYXNzZXMgdGhlIHNvdXJjZSB0byB0aGUgdmlkZW8gZWxlbWVudC4gTm90aGluZyBmYW5jeS5cbiAqIEBwYXJhbSAge09iamVjdH0gc291cmNlICAgVGhlIHNvdXJjZSBvYmplY3RcbiAqIEBwYXJhbSAge0ZsYXNofSB0ZWNoICBUaGUgaW5zdGFuY2Ugb2YgdGhlIEZsYXNoIHRlY2hcbiAqL1xuRmxhc2gubmF0aXZlU291cmNlSGFuZGxlciA9IHt9O1xuXG4vKipcbiAqIENoZWNrIEZsYXNoIGNhbiBoYW5kbGUgdGhlIHNvdXJjZSBuYXRpdmVseVxuICogQHBhcmFtICB7T2JqZWN0fSBzb3VyY2UgIFRoZSBzb3VyY2Ugb2JqZWN0XG4gKiBAcmV0dXJuIHtTdHJpbmd9ICAgICAgICAgJ3Byb2JhYmx5JywgJ21heWJlJywgb3IgJycgKGVtcHR5IHN0cmluZylcbiAqL1xuRmxhc2gubmF0aXZlU291cmNlSGFuZGxlci5jYW5IYW5kbGVTb3VyY2UgPSBmdW5jdGlvbihzb3VyY2Upe1xuICB2YXIgdHlwZTtcblxuICBmdW5jdGlvbiBndWVzc01pbWVUeXBlKHNyYykge1xuICAgIHZhciBleHQgPSBMaWIuZ2V0RmlsZUV4dGVuc2lvbihzcmMpO1xuICAgIGlmIChleHQpIHtcbiAgICAgIHJldHVybiBgdmlkZW8vJHtleHR9YDtcbiAgICB9XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgaWYgKCFzb3VyY2UudHlwZSkge1xuICAgIHR5cGUgPSBndWVzc01pbWVUeXBlKHNvdXJjZS5zcmMpO1xuICB9IGVsc2Uge1xuICAgIC8vIFN0cmlwIGNvZGUgaW5mb3JtYXRpb24gZnJvbSB0aGUgdHlwZSBiZWNhdXNlIHdlIGRvbid0IGdldCB0aGF0IHNwZWNpZmljXG4gICAgdHlwZSA9IHNvdXJjZS50eXBlLnJlcGxhY2UoLzsuKi8sICcnKS50b0xvd2VyQ2FzZSgpO1xuICB9XG5cbiAgaWYgKHR5cGUgaW4gRmxhc2guZm9ybWF0cykge1xuICAgIHJldHVybiAnbWF5YmUnO1xuICB9XG5cbiAgcmV0dXJuICcnO1xufTtcblxuLyoqXG4gKiBQYXNzIHRoZSBzb3VyY2UgdG8gdGhlIGZsYXNoIG9iamVjdFxuICogQWRhcHRpdmUgc291cmNlIGhhbmRsZXJzIHdpbGwgaGF2ZSBtb3JlIGNvbXBsaWNhdGVkIHdvcmtmbG93cyBiZWZvcmUgcGFzc2luZ1xuICogdmlkZW8gZGF0YSB0byB0aGUgdmlkZW8gZWxlbWVudFxuICogQHBhcmFtICB7T2JqZWN0fSBzb3VyY2UgICAgVGhlIHNvdXJjZSBvYmplY3RcbiAqIEBwYXJhbSAge0ZsYXNofSB0ZWNoICAgVGhlIGluc3RhbmNlIG9mIHRoZSBGbGFzaCB0ZWNoXG4gKi9cbkZsYXNoLm5hdGl2ZVNvdXJjZUhhbmRsZXIuaGFuZGxlU291cmNlID0gZnVuY3Rpb24oc291cmNlLCB0ZWNoKXtcbiAgdGVjaC5zZXRTcmMoc291cmNlLnNyYyk7XG59O1xuXG4vKipcbiAqIENsZWFuIHVwIHRoZSBzb3VyY2UgaGFuZGxlciB3aGVuIGRpc3Bvc2luZyB0aGUgcGxheWVyIG9yIHN3aXRjaGluZyBzb3VyY2VzLi5cbiAqIChubyBjbGVhbnVwIGlzIG5lZWRlZCB3aGVuIHN1cHBvcnRpbmcgdGhlIGZvcm1hdCBuYXRpdmVseSlcbiAqL1xuRmxhc2gubmF0aXZlU291cmNlSGFuZGxlci5kaXNwb3NlID0gZnVuY3Rpb24oKXt9O1xuXG4vLyBSZWdpc3RlciB0aGUgbmF0aXZlIHNvdXJjZSBoYW5kbGVyXG5GbGFzaC5yZWdpc3RlclNvdXJjZUhhbmRsZXIoRmxhc2gubmF0aXZlU291cmNlSGFuZGxlcik7XG5cbkZsYXNoLmZvcm1hdHMgPSB7XG4gICd2aWRlby9mbHYnOiAnRkxWJyxcbiAgJ3ZpZGVvL3gtZmx2JzogJ0ZMVicsXG4gICd2aWRlby9tcDQnOiAnTVA0JyxcbiAgJ3ZpZGVvL200dic6ICdNUDQnXG59O1xuXG5GbGFzaC5vblJlYWR5ID0gZnVuY3Rpb24oY3VyclN3Zil7XG4gIGxldCBlbCA9IExpYi5lbChjdXJyU3dmKTtcbiAgbGV0IHRlY2ggPSBlbCAmJiBlbC50ZWNoO1xuXG4gIC8vIGlmIHRoZXJlIGlzIG5vIGVsIHRoZW4gdGhlIHRlY2ggaGFzIGJlZW4gZGlzcG9zZWRcbiAgLy8gYW5kIHRoZSB0ZWNoIGVsZW1lbnQgd2FzIHJlbW92ZWQgZnJvbSB0aGUgcGxheWVyIGRpdlxuICBpZiAodGVjaCAmJiB0ZWNoLmVsKCkpIHtcbiAgICAvLyBjaGVjayB0aGF0IHRoZSBmbGFzaCBvYmplY3QgaXMgcmVhbGx5IHJlYWR5XG4gICAgRmxhc2guY2hlY2tSZWFkeSh0ZWNoKTtcbiAgfVxufTtcblxuLy8gVGhlIFNXRiBpc24ndCBhbHdheXMgcmVhZHkgd2hlbiBpdCBzYXlzIGl0IGlzLiBTb21ldGltZXMgdGhlIEFQSSBmdW5jdGlvbnMgc3RpbGwgbmVlZCB0byBiZSBhZGRlZCB0byB0aGUgb2JqZWN0LlxuLy8gSWYgaXQncyBub3QgcmVhZHksIHdlIHNldCBhIHRpbWVvdXQgdG8gY2hlY2sgYWdhaW4gc2hvcnRseS5cbkZsYXNoLmNoZWNrUmVhZHkgPSBmdW5jdGlvbih0ZWNoKXtcbiAgLy8gc3RvcCB3b3JyeWluZyBpZiB0aGUgdGVjaCBoYXMgYmVlbiBkaXNwb3NlZFxuICBpZiAoIXRlY2guZWwoKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIGNoZWNrIGlmIEFQSSBwcm9wZXJ0eSBleGlzdHNcbiAgaWYgKHRlY2guZWwoKS52anNfZ2V0UHJvcGVydHkpIHtcbiAgICAvLyB0ZWxsIHRlY2ggaXQncyByZWFkeVxuICAgIHRlY2gudHJpZ2dlclJlYWR5KCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gd2FpdCBsb25nZXJcbiAgICB0aGlzLnNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgIEZsYXNoWydjaGVja1JlYWR5J10odGVjaCk7XG4gICAgfSwgNTApO1xuICB9XG59O1xuXG4vLyBUcmlnZ2VyIGV2ZW50cyBmcm9tIHRoZSBzd2Ygb24gdGhlIHBsYXllclxuRmxhc2gub25FdmVudCA9IGZ1bmN0aW9uKHN3ZklELCBldmVudE5hbWUpe1xuICBsZXQgdGVjaCA9IExpYi5lbChzd2ZJRCkudGVjaDtcbiAgdGVjaC50cmlnZ2VyKGV2ZW50TmFtZSk7XG59O1xuXG4vLyBMb2cgZXJyb3JzIGZyb20gdGhlIHN3ZlxuRmxhc2gub25FcnJvciA9IGZ1bmN0aW9uKHN3ZklELCBlcnIpe1xuICBjb25zdCB0ZWNoID0gTGliLmVsKHN3ZklEKS50ZWNoO1xuICBjb25zdCBtc2cgPSAnRkxBU0g6ICcrZXJyO1xuXG4gIGlmIChlcnIgPT09ICdzcmNub3Rmb3VuZCcpIHtcbiAgICB0ZWNoLnRyaWdnZXIoJ2Vycm9yJywgeyBjb2RlOiA0LCBtZXNzYWdlOiBtc2cgfSk7XG5cbiAgLy8gZXJyb3JzIHdlIGhhdmVuJ3QgY2F0ZWdvcml6ZWQgaW50byB0aGUgbWVkaWEgZXJyb3JzXG4gIH0gZWxzZSB7XG4gICAgdGVjaC50cmlnZ2VyKCdlcnJvcicsIG1zZyk7XG4gIH1cbn07XG5cbi8vIEZsYXNoIFZlcnNpb24gQ2hlY2tcbkZsYXNoLnZlcnNpb24gPSBmdW5jdGlvbigpe1xuICBsZXQgdmVyc2lvbiA9ICcwLDAsMCc7XG5cbiAgLy8gSUVcbiAgdHJ5IHtcbiAgICB2ZXJzaW9uID0gbmV3IHdpbmRvdy5BY3RpdmVYT2JqZWN0KCdTaG9ja3dhdmVGbGFzaC5TaG9ja3dhdmVGbGFzaCcpLkdldFZhcmlhYmxlKCckdmVyc2lvbicpLnJlcGxhY2UoL1xcRCsvZywgJywnKS5tYXRjaCgvXiw/KC4rKSw/JC8pWzFdO1xuXG4gIC8vIG90aGVyIGJyb3dzZXJzXG4gIH0gY2F0Y2goZSkge1xuICAgIHRyeSB7XG4gICAgICBpZiAobmF2aWdhdG9yLm1pbWVUeXBlc1snYXBwbGljYXRpb24veC1zaG9ja3dhdmUtZmxhc2gnXS5lbmFibGVkUGx1Z2luKXtcbiAgICAgICAgdmVyc2lvbiA9IChuYXZpZ2F0b3IucGx1Z2luc1snU2hvY2t3YXZlIEZsYXNoIDIuMCddIHx8IG5hdmlnYXRvci5wbHVnaW5zWydTaG9ja3dhdmUgRmxhc2gnXSkuZGVzY3JpcHRpb24ucmVwbGFjZSgvXFxEKy9nLCAnLCcpLm1hdGNoKC9eLD8oLispLD8kLylbMV07XG4gICAgICB9XG4gICAgfSBjYXRjaChlcnIpIHt9XG4gIH1cbiAgcmV0dXJuIHZlcnNpb24uc3BsaXQoJywnKTtcbn07XG5cbi8vIEZsYXNoIGVtYmVkZGluZyBtZXRob2QuIE9ubHkgdXNlZCBpbiBub24taWZyYW1lIG1vZGVcbkZsYXNoLmVtYmVkID0gZnVuY3Rpb24oc3dmLCBmbGFzaFZhcnMsIHBhcmFtcywgYXR0cmlidXRlcyl7XG4gIGNvbnN0IGNvZGUgPSBGbGFzaC5nZXRFbWJlZENvZGUoc3dmLCBmbGFzaFZhcnMsIHBhcmFtcywgYXR0cmlidXRlcyk7XG5cbiAgLy8gR2V0IGVsZW1lbnQgYnkgZW1iZWRkaW5nIGNvZGUgYW5kIHJldHJpZXZpbmcgY3JlYXRlZCBlbGVtZW50XG4gIGNvbnN0IG9iaiA9IExpYi5jcmVhdGVFbCgnZGl2JywgeyBpbm5lckhUTUw6IGNvZGUgfSkuY2hpbGROb2Rlc1swXTtcblxuICByZXR1cm4gb2JqO1xufTtcblxuRmxhc2guZ2V0RW1iZWRDb2RlID0gZnVuY3Rpb24oc3dmLCBmbGFzaFZhcnMsIHBhcmFtcywgYXR0cmlidXRlcyl7XG4gIGNvbnN0IG9ialRhZyA9ICc8b2JqZWN0IHR5cGU9XCJhcHBsaWNhdGlvbi94LXNob2Nrd2F2ZS1mbGFzaFwiICc7XG4gIGxldCBmbGFzaFZhcnNTdHJpbmcgPSAnJztcbiAgbGV0IHBhcmFtc1N0cmluZyA9ICcnO1xuICBsZXQgYXR0cnNTdHJpbmcgPSAnJztcblxuICAvLyBDb252ZXJ0IGZsYXNoIHZhcnMgdG8gc3RyaW5nXG4gIGlmIChmbGFzaFZhcnMpIHtcbiAgICBMaWIub2JqLmVhY2goZmxhc2hWYXJzLCBmdW5jdGlvbihrZXksIHZhbCl7XG4gICAgICBmbGFzaFZhcnNTdHJpbmcgKz0gYCR7a2V5fT0ke3ZhbH0mYW1wO2A7XG4gICAgfSk7XG4gIH1cblxuICAvLyBBZGQgc3dmLCBmbGFzaFZhcnMsIGFuZCBvdGhlciBkZWZhdWx0IHBhcmFtc1xuICBwYXJhbXMgPSBMaWIub2JqLm1lcmdlKHtcbiAgICAnbW92aWUnOiBzd2YsXG4gICAgJ2ZsYXNodmFycyc6IGZsYXNoVmFyc1N0cmluZyxcbiAgICAnYWxsb3dTY3JpcHRBY2Nlc3MnOiAnYWx3YXlzJywgLy8gUmVxdWlyZWQgdG8gdGFsayB0byBzd2ZcbiAgICAnYWxsb3dOZXR3b3JraW5nJzogJ2FsbCcgLy8gQWxsIHNob3VsZCBiZSBkZWZhdWx0LCBidXQgaGF2aW5nIHNlY3VyaXR5IGlzc3Vlcy5cbiAgfSwgcGFyYW1zKTtcblxuICAvLyBDcmVhdGUgcGFyYW0gdGFncyBzdHJpbmdcbiAgTGliLm9iai5lYWNoKHBhcmFtcywgZnVuY3Rpb24oa2V5LCB2YWwpe1xuICAgIHBhcmFtc1N0cmluZyArPSBgPHBhcmFtIG5hbWU9XCIke2tleX1cIiB2YWx1ZT1cIiR7dmFsfVwiIC8+YDtcbiAgfSk7XG5cbiAgYXR0cmlidXRlcyA9IExpYi5vYmoubWVyZ2Uoe1xuICAgIC8vIEFkZCBzd2YgdG8gYXR0cmlidXRlcyAobmVlZCBib3RoIGZvciBJRSBhbmQgT3RoZXJzIHRvIHdvcmspXG4gICAgJ2RhdGEnOiBzd2YsXG5cbiAgICAvLyBEZWZhdWx0IHRvIDEwMCUgd2lkdGgvaGVpZ2h0XG4gICAgJ3dpZHRoJzogJzEwMCUnLFxuICAgICdoZWlnaHQnOiAnMTAwJSdcblxuICB9LCBhdHRyaWJ1dGVzKTtcblxuICAvLyBDcmVhdGUgQXR0cmlidXRlcyBzdHJpbmdcbiAgTGliLm9iai5lYWNoKGF0dHJpYnV0ZXMsIGZ1bmN0aW9uKGtleSwgdmFsKXtcbiAgICBhdHRyc1N0cmluZyArPSBgJHtrZXl9PVwiJHt2YWx9XCIgYDtcbiAgfSk7XG5cbiAgcmV0dXJuIGAke29ialRhZ30ke2F0dHJzU3RyaW5nfT4ke3BhcmFtc1N0cmluZ308L29iamVjdD5gO1xufTtcblxuLy8gUnVuIEZsYXNoIHRocm91Z2ggdGhlIFJUTVAgZGVjb3JhdG9yXG5GbGFzaFJ0bXBEZWNvcmF0b3IoRmxhc2gpO1xuXG5UZWNoLnJlZ2lzdGVyQ29tcG9uZW50KCdGbGFzaCcsIEZsYXNoKTtcbmV4cG9ydCBkZWZhdWx0IEZsYXNoO1xuIiwiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IEhUTUw1IE1lZGlhIENvbnRyb2xsZXIgLSBXcmFwcGVyIGZvciBIVE1MNSBNZWRpYSBBUElcbiAqL1xuXG5pbXBvcnQgVGVjaCBmcm9tICcuL3RlY2guanMnO1xuaW1wb3J0IENvbXBvbmVudCBmcm9tICcuLi9jb21wb25lbnQnO1xuaW1wb3J0ICogYXMgTGliIGZyb20gJy4uL2xpYic7XG5pbXBvcnQgKiBhcyBWanNVdGlsIGZyb20gJy4uL3V0aWwnO1xuaW1wb3J0IGRvY3VtZW50IGZyb20gJ2dsb2JhbC9kb2N1bWVudCc7XG5cbi8qKlxuICogSFRNTDUgTWVkaWEgQ29udHJvbGxlciAtIFdyYXBwZXIgZm9yIEhUTUw1IE1lZGlhIEFQSVxuICogQHBhcmFtIHtQbGF5ZXJ8T2JqZWN0fSBwbGF5ZXJcbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0aW9uc1xuICogQHBhcmFtIHtGdW5jdGlvbj19IHJlYWR5XG4gKiBAY29uc3RydWN0b3JcbiAqL1xuY2xhc3MgSHRtbDUgZXh0ZW5kcyBUZWNoIHtcblxuICBjb25zdHJ1Y3RvcihvcHRpb25zLCByZWFkeSl7XG4gICAgc3VwZXIob3B0aW9ucywgcmVhZHkpO1xuXG4gICAgY29uc3Qgc291cmNlID0gb3B0aW9ucy5zb3VyY2U7XG5cbiAgICAvLyBTZXQgdGhlIHNvdXJjZSBpZiBvbmUgaXMgcHJvdmlkZWRcbiAgICAvLyAxKSBDaGVjayBpZiB0aGUgc291cmNlIGlzIG5ldyAoaWYgbm90LCB3ZSB3YW50IHRvIGtlZXAgdGhlIG9yaWdpbmFsIHNvIHBsYXliYWNrIGlzbid0IGludGVycnVwdGVkKVxuICAgIC8vIDIpIENoZWNrIHRvIHNlZSBpZiB0aGUgbmV0d29yayBzdGF0ZSBvZiB0aGUgdGFnIHdhcyBmYWlsZWQgYXQgaW5pdCwgYW5kIGlmIHNvLCByZXNldCB0aGUgc291cmNlXG4gICAgLy8gYW55d2F5IHNvIHRoZSBlcnJvciBnZXRzIGZpcmVkLlxuICAgIGlmIChzb3VyY2UgJiYgKHRoaXMuZWxfLmN1cnJlbnRTcmMgIT09IHNvdXJjZS5zcmMgfHwgKG9wdGlvbnMudGFnICYmIG9wdGlvbnMudGFnLmluaXROZXR3b3JrU3RhdGVfID09PSAzKSkpIHtcbiAgICAgIHRoaXMuc2V0U291cmNlKHNvdXJjZSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZWxfLmhhc0NoaWxkTm9kZXMoKSkge1xuXG4gICAgICBsZXQgbm9kZXMgPSB0aGlzLmVsXy5jaGlsZE5vZGVzO1xuICAgICAgbGV0IG5vZGVzTGVuZ3RoID0gbm9kZXMubGVuZ3RoO1xuICAgICAgbGV0IHJlbW92ZU5vZGVzID0gW107XG5cbiAgICAgIHdoaWxlIChub2Rlc0xlbmd0aC0tKSB7XG4gICAgICAgIGxldCBub2RlID0gbm9kZXNbbm9kZXNMZW5ndGhdO1xuICAgICAgICBsZXQgbm9kZU5hbWUgPSBub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmIChub2RlTmFtZSA9PT0gJ3RyYWNrJykge1xuICAgICAgICAgIGlmICghdGhpcy5mZWF0dXJlc05hdGl2ZVRleHRUcmFja3MpIHtcbiAgICAgICAgICAgIC8vIEVtcHR5IHZpZGVvIHRhZyB0cmFja3Mgc28gdGhlIGJ1aWx0LWluIHBsYXllciBkb2Vzbid0IHVzZSB0aGVtIGFsc28uXG4gICAgICAgICAgICAvLyBUaGlzIG1heSBub3QgYmUgZmFzdCBlbm91Z2ggdG8gc3RvcCBIVE1MNSBicm93c2VycyBmcm9tIHJlYWRpbmcgdGhlIHRhZ3NcbiAgICAgICAgICAgIC8vIHNvIHdlJ2xsIG5lZWQgdG8gdHVybiBvZmYgYW55IGRlZmF1bHQgdHJhY2tzIGlmIHdlJ3JlIG1hbnVhbGx5IGRvaW5nXG4gICAgICAgICAgICAvLyBjYXB0aW9ucyBhbmQgc3VidGl0bGVzLiB2aWRlb0VsZW1lbnQudGV4dFRyYWNrc1xuICAgICAgICAgICAgcmVtb3ZlTm9kZXMucHVzaChub2RlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5yZW1vdGVUZXh0VHJhY2tzKCkuYWRkVHJhY2tfKG5vZGUudHJhY2spO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKGxldCBpPTA7IGk8cmVtb3ZlTm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy5lbF8ucmVtb3ZlQ2hpbGQocmVtb3ZlTm9kZXNbaV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLmZlYXR1cmVzTmF0aXZlVGV4dFRyYWNrcykge1xuICAgICAgdGhpcy5vbignbG9hZHN0YXJ0JywgTGliLmJpbmQodGhpcywgdGhpcy5oaWRlQ2FwdGlvbnMpKTtcbiAgICB9XG5cbiAgICAvLyBEZXRlcm1pbmUgaWYgbmF0aXZlIGNvbnRyb2xzIHNob3VsZCBiZSB1c2VkXG4gICAgLy8gT3VyIGdvYWwgc2hvdWxkIGJlIHRvIGdldCB0aGUgY3VzdG9tIGNvbnRyb2xzIG9uIG1vYmlsZSBzb2xpZCBldmVyeXdoZXJlXG4gICAgLy8gc28gd2UgY2FuIHJlbW92ZSB0aGlzIGFsbCB0b2dldGhlci4gUmlnaHQgbm93IHRoaXMgd2lsbCBibG9jayBjdXN0b21cbiAgICAvLyBjb250cm9scyBvbiB0b3VjaCBlbmFibGVkIGxhcHRvcHMgbGlrZSB0aGUgQ2hyb21lIFBpeGVsXG4gICAgaWYgKExpYi5UT1VDSF9FTkFCTEVEICYmIG9wdGlvbnMubmF0aXZlQ29udHJvbHNGb3JUb3VjaCA9PT0gdHJ1ZSkge1xuICAgICAgdGhpcy50cmlnZ2VyKCd1c2VuYXRpdmVjb250cm9scycpO1xuICAgIH1cblxuICAgIHRoaXMudHJpZ2dlclJlYWR5KCk7XG4gIH1cblxuXG4gIGRpc3Bvc2UoKSB7XG4gICAgSHRtbDUuZGlzcG9zZU1lZGlhRWxlbWVudCh0aGlzLmVsXyk7XG4gICAgc3VwZXIuZGlzcG9zZSgpO1xuICB9XG5cbiAgY3JlYXRlRWwoKSB7XG4gICAgbGV0IGVsID0gdGhpcy5vcHRpb25zXy50YWc7XG5cbiAgICAvLyBDaGVjayBpZiB0aGlzIGJyb3dzZXIgc3VwcG9ydHMgbW92aW5nIHRoZSBlbGVtZW50IGludG8gdGhlIGJveC5cbiAgICAvLyBPbiB0aGUgaVBob25lIHZpZGVvIHdpbGwgYnJlYWsgaWYgeW91IG1vdmUgdGhlIGVsZW1lbnQsXG4gICAgLy8gU28gd2UgaGF2ZSB0byBjcmVhdGUgYSBicmFuZCBuZXcgZWxlbWVudC5cbiAgICBpZiAoIWVsIHx8IHRoaXNbJ21vdmluZ01lZGlhRWxlbWVudEluRE9NJ10gPT09IGZhbHNlKSB7XG5cbiAgICAgIC8vIElmIHRoZSBvcmlnaW5hbCB0YWcgaXMgc3RpbGwgdGhlcmUsIGNsb25lIGFuZCByZW1vdmUgaXQuXG4gICAgICBpZiAoZWwpIHtcbiAgICAgICAgY29uc3QgY2xvbmUgPSBlbC5jbG9uZU5vZGUoZmFsc2UpO1xuICAgICAgICBIdG1sNS5kaXNwb3NlTWVkaWFFbGVtZW50KGVsKTtcbiAgICAgICAgZWwgPSBjbG9uZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsID0gTGliLmNyZWF0ZUVsKCd2aWRlbycpO1xuXG4gICAgICAgIC8vIGRldGVybWluZSBpZiBuYXRpdmUgY29udHJvbHMgc2hvdWxkIGJlIHVzZWRcbiAgICAgICAgbGV0IHRhZ0F0dHJpYnV0ZXMgPSB0aGlzLm9wdGlvbnNfLnRhZyAmJiBMaWIuZ2V0RWxlbWVudEF0dHJpYnV0ZXModGhpcy5vcHRpb25zXy50YWcpO1xuICAgICAgICBsZXQgYXR0cmlidXRlcyA9IFZqc1V0aWwubWVyZ2VPcHRpb25zKHt9LCB0YWdBdHRyaWJ1dGVzKTtcbiAgICAgICAgaWYgKCFMaWIuVE9VQ0hfRU5BQkxFRCB8fCB0aGlzLm9wdGlvbnNfLm5hdGl2ZUNvbnRyb2xzRm9yVG91Y2ggIT09IHRydWUpIHtcbiAgICAgICAgICBkZWxldGUgYXR0cmlidXRlcy5jb250cm9scztcbiAgICAgICAgfVxuXG4gICAgICAgIExpYi5zZXRFbGVtZW50QXR0cmlidXRlcyhlbCxcbiAgICAgICAgICBMaWIub2JqLm1lcmdlKGF0dHJpYnV0ZXMsIHtcbiAgICAgICAgICAgIGlkOiB0aGlzLm9wdGlvbnNfLnBsYXllcklkICsgJ19odG1sNV9hcGknLFxuICAgICAgICAgICAgY2xhc3M6ICd2anMtdGVjaCdcbiAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5vcHRpb25zXy50cmFja3MpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm9wdGlvbnNfLnRyYWNrcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGNvbnN0IHRyYWNrID0gdGhpcy5vcHRpb25zXy50cmFja3NbaV07XG4gICAgICAgICAgbGV0IHRyYWNrRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0cmFjaycpO1xuICAgICAgICAgIHRyYWNrRWwua2luZCA9IHRyYWNrLmtpbmQ7XG4gICAgICAgICAgdHJhY2tFbC5sYWJlbCA9IHRyYWNrLmxhYmVsO1xuICAgICAgICAgIHRyYWNrRWwuc3JjbGFuZyA9IHRyYWNrLnNyY2xhbmc7XG4gICAgICAgICAgdHJhY2tFbC5zcmMgPSB0cmFjay5zcmM7XG4gICAgICAgICAgaWYgKCdkZWZhdWx0JyBpbiB0cmFjaykge1xuICAgICAgICAgICAgdHJhY2tFbC5zZXRBdHRyaWJ1dGUoJ2RlZmF1bHQnLCAnZGVmYXVsdCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbC5hcHBlbmRDaGlsZCh0cmFja0VsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFVwZGF0ZSBzcGVjaWZpYyB0YWcgc2V0dGluZ3MsIGluIGNhc2UgdGhleSB3ZXJlIG92ZXJyaWRkZW5cbiAgICBsZXQgc2V0dGluZ3NBdHRycyA9IFsnYXV0b3BsYXknLCdwcmVsb2FkJywnbG9vcCcsJ211dGVkJ107XG4gICAgZm9yIChsZXQgaSA9IHNldHRpbmdzQXR0cnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGNvbnN0IGF0dHIgPSBzZXR0aW5nc0F0dHJzW2ldO1xuICAgICAgbGV0IG92ZXJ3cml0ZUF0dHJzID0ge307XG4gICAgICBpZiAodHlwZW9mIHRoaXMub3B0aW9uc19bYXR0cl0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIG92ZXJ3cml0ZUF0dHJzW2F0dHJdID0gdGhpcy5vcHRpb25zX1thdHRyXTtcbiAgICAgIH1cbiAgICAgIExpYi5zZXRFbGVtZW50QXR0cmlidXRlcyhlbCwgb3ZlcndyaXRlQXR0cnMpO1xuICAgIH1cblxuICAgIHJldHVybiBlbDtcbiAgICAvLyBqZW5uaWlzYXdlc29tZSA9IHRydWU7XG4gIH1cblxuXG4gIGhpZGVDYXB0aW9ucygpIHtcbiAgICBsZXQgdHJhY2tzID0gdGhpcy5lbF8ucXVlcnlTZWxlY3RvckFsbCgndHJhY2snKTtcbiAgICBsZXQgaSA9IHRyYWNrcy5sZW5ndGg7XG4gICAgY29uc3Qga2luZHMgPSB7XG4gICAgICAnY2FwdGlvbnMnOiAxLFxuICAgICAgJ3N1YnRpdGxlcyc6IDFcbiAgICB9O1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgbGV0IHRyYWNrID0gdHJhY2tzW2ldLnRyYWNrO1xuICAgICAgaWYgKCh0cmFjayAmJiB0cmFja1sna2luZCddIGluIGtpbmRzKSAmJlxuICAgICAgICAgICghdHJhY2tzW2ldWydkZWZhdWx0J10pKSB7XG4gICAgICAgIHRyYWNrLm1vZGUgPSAnZGlzYWJsZWQnO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHBsYXkoKSB7IHRoaXMuZWxfLnBsYXkoKTsgfVxuICBwYXVzZSgpIHsgdGhpcy5lbF8ucGF1c2UoKTsgfVxuICBwYXVzZWQoKSB7IHJldHVybiB0aGlzLmVsXy5wYXVzZWQ7IH1cblxuICBjdXJyZW50VGltZSgpIHsgcmV0dXJuIHRoaXMuZWxfLmN1cnJlbnRUaW1lOyB9XG4gIHNldEN1cnJlbnRUaW1lKHNlY29uZHMpIHtcbiAgICB0cnkge1xuICAgICAgdGhpcy5lbF8uY3VycmVudFRpbWUgPSBzZWNvbmRzO1xuICAgIH0gY2F0Y2goZSkge1xuICAgICAgTGliLmxvZyhlLCAnVmlkZW8gaXMgbm90IHJlYWR5LiAoVmlkZW8uanMpJyk7XG4gICAgICAvLyB0aGlzLndhcm5pbmcoVmlkZW9KUy53YXJuaW5ncy52aWRlb05vdFJlYWR5KTtcbiAgICB9XG4gIH1cblxuICBkdXJhdGlvbigpIHsgcmV0dXJuIHRoaXMuZWxfLmR1cmF0aW9uIHx8IDA7IH1cblxuICBidWZmZXJlZCgpIHsgcmV0dXJuIHRoaXMuZWxfLmJ1ZmZlcmVkOyB9XG5cbiAgdm9sdW1lKCkgeyByZXR1cm4gdGhpcy5lbF8udm9sdW1lOyB9XG4gIHNldFZvbHVtZShwZXJjZW50QXNEZWNpbWFsKSB7IHRoaXMuZWxfLnZvbHVtZSA9IHBlcmNlbnRBc0RlY2ltYWw7IH1cblxuICBtdXRlZCgpIHsgcmV0dXJuIHRoaXMuZWxfLm11dGVkOyB9XG4gIHNldE11dGVkKG11dGVkKSB7IHRoaXMuZWxfLm11dGVkID0gbXV0ZWQ7IH1cblxuICB3aWR0aCgpIHsgcmV0dXJuIHRoaXMuZWxfLm9mZnNldFdpZHRoOyB9XG4gIGhlaWdodCgpIHsgIHJldHVybiB0aGlzLmVsXy5vZmZzZXRIZWlnaHQ7IH1cblxuICBzdXBwb3J0c0Z1bGxTY3JlZW4oKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLmVsXy53ZWJraXRFbnRlckZ1bGxTY3JlZW4gPT09ICdmdW5jdGlvbicpIHtcblxuICAgICAgLy8gU2VlbXMgdG8gYmUgYnJva2VuIGluIENocm9taXVtL0Nocm9tZSAmJiBTYWZhcmkgaW4gTGVvcGFyZFxuICAgICAgaWYgKC9BbmRyb2lkLy50ZXN0KExpYi5VU0VSX0FHRU5UKSB8fCAhL0Nocm9tZXxNYWMgT1MgWCAxMC41Ly50ZXN0KExpYi5VU0VSX0FHRU5UKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZW50ZXJGdWxsU2NyZWVuKCkge1xuICAgIHZhciB2aWRlbyA9IHRoaXMuZWxfO1xuXG4gICAgaWYgKCd3ZWJraXREaXNwbGF5aW5nRnVsbHNjcmVlbicgaW4gdmlkZW8pIHtcbiAgICAgIHRoaXMub25lKCd3ZWJraXRiZWdpbmZ1bGxzY3JlZW4nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5vbmUoJ3dlYmtpdGVuZGZ1bGxzY3JlZW4nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB0aGlzLnRyaWdnZXIoJ2Z1bGxzY3JlZW5jaGFuZ2UnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy50cmlnZ2VyKCdmdWxsc2NyZWVuY2hhbmdlJyk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodmlkZW8ucGF1c2VkICYmIHZpZGVvLm5ldHdvcmtTdGF0ZSA8PSB2aWRlby5IQVZFX01FVEFEQVRBKSB7XG4gICAgICAvLyBhdHRlbXB0IHRvIHByaW1lIHRoZSB2aWRlbyBlbGVtZW50IGZvciBwcm9ncmFtbWF0aWMgYWNjZXNzXG4gICAgICAvLyB0aGlzIGlzbid0IG5lY2Vzc2FyeSBvbiB0aGUgZGVza3RvcCBidXQgc2hvdWxkbid0IGh1cnRcbiAgICAgIHRoaXMuZWxfLnBsYXkoKTtcblxuICAgICAgLy8gcGxheWluZyBhbmQgcGF1c2luZyBzeW5jaHJvbm91c2x5IGR1cmluZyB0aGUgdHJhbnNpdGlvbiB0byBmdWxsc2NyZWVuXG4gICAgICAvLyBjYW4gZ2V0IGlPUyB+Ni4xIGRldmljZXMgaW50byBhIHBsYXkvcGF1c2UgbG9vcFxuICAgICAgdGhpcy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgIHZpZGVvLnBhdXNlKCk7XG4gICAgICAgIHZpZGVvLndlYmtpdEVudGVyRnVsbFNjcmVlbigpO1xuICAgICAgfSwgMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZpZGVvLndlYmtpdEVudGVyRnVsbFNjcmVlbigpO1xuICAgIH1cbiAgfVxuXG4gIGV4aXRGdWxsU2NyZWVuKCkge1xuICAgIHRoaXMuZWxfLndlYmtpdEV4aXRGdWxsU2NyZWVuKCk7XG4gIH1cblxuICBzcmMoc3JjKSB7XG4gICAgaWYgKHNyYyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdGhpcy5lbF8uc3JjO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTZXR0aW5nIHNyYyB0aHJvdWdoIGBzcmNgIGluc3RlYWQgb2YgYHNldFNyY2Agd2lsbCBiZSBkZXByZWNhdGVkXG4gICAgICB0aGlzLnNldFNyYyhzcmMpO1xuICAgIH1cbiAgfVxuXG4gIHNldFNyYyhzcmMpIHsgdGhpcy5lbF8uc3JjID0gc3JjOyB9XG5cbiAgbG9hZCgpeyB0aGlzLmVsXy5sb2FkKCk7IH1cblxuICBjdXJyZW50U3JjKCkgeyByZXR1cm4gdGhpcy5lbF8uY3VycmVudFNyYzsgfVxuXG4gIHBvc3RlcigpIHsgcmV0dXJuIHRoaXMuZWxfLnBvc3RlcjsgfVxuICBzZXRQb3N0ZXIodmFsKSB7IHRoaXMuZWxfLnBvc3RlciA9IHZhbDsgfVxuXG4gIHByZWxvYWQoKSB7IHJldHVybiB0aGlzLmVsXy5wcmVsb2FkOyB9XG4gIHNldFByZWxvYWQodmFsKSB7IHRoaXMuZWxfLnByZWxvYWQgPSB2YWw7IH1cblxuICBhdXRvcGxheSgpIHsgcmV0dXJuIHRoaXMuZWxfLmF1dG9wbGF5OyB9XG4gIHNldEF1dG9wbGF5KHZhbCkgeyB0aGlzLmVsXy5hdXRvcGxheSA9IHZhbDsgfVxuXG4gIGNvbnRyb2xzKCkgeyByZXR1cm4gdGhpcy5lbF8uY29udHJvbHM7IH1cbiAgc2V0Q29udHJvbHModmFsKSB7IHRoaXMuZWxfLmNvbnRyb2xzID0gISF2YWw7IH1cblxuICBsb29wKCkgeyByZXR1cm4gdGhpcy5lbF8ubG9vcDsgfVxuICBzZXRMb29wKHZhbCkgeyB0aGlzLmVsXy5sb29wID0gdmFsOyB9XG5cbiAgZXJyb3IoKSB7IHJldHVybiB0aGlzLmVsXy5lcnJvcjsgfVxuICBzZWVraW5nKCkgeyByZXR1cm4gdGhpcy5lbF8uc2Vla2luZzsgfVxuICBlbmRlZCgpIHsgcmV0dXJuIHRoaXMuZWxfLmVuZGVkOyB9XG4gIGRlZmF1bHRNdXRlZCgpIHsgcmV0dXJuIHRoaXMuZWxfLmRlZmF1bHRNdXRlZDsgfVxuXG4gIHBsYXliYWNrUmF0ZSgpIHsgcmV0dXJuIHRoaXMuZWxfLnBsYXliYWNrUmF0ZTsgfVxuICBzZXRQbGF5YmFja1JhdGUodmFsKSB7IHRoaXMuZWxfLnBsYXliYWNrUmF0ZSA9IHZhbDsgfVxuXG4gIG5ldHdvcmtTdGF0ZSgpIHsgcmV0dXJuIHRoaXMuZWxfLm5ldHdvcmtTdGF0ZTsgfVxuICByZWFkeVN0YXRlKCkgeyByZXR1cm4gdGhpcy5lbF8ucmVhZHlTdGF0ZTsgfVxuXG4gIHZpZGVvV2lkdGgoKSB7IHJldHVybiB0aGlzLmVsXy52aWRlb1dpZHRoOyB9XG4gIHZpZGVvSGVpZ2h0KCkgeyByZXR1cm4gdGhpcy5lbF8udmlkZW9IZWlnaHQ7IH1cblxuICB0ZXh0VHJhY2tzKCkge1xuICAgIGlmICghdGhpc1snZmVhdHVyZXNOYXRpdmVUZXh0VHJhY2tzJ10pIHtcbiAgICAgIHJldHVybiBzdXBlci50ZXh0VHJhY2tzKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZWxfLnRleHRUcmFja3M7XG4gIH1cbiAgYWRkVGV4dFRyYWNrKGtpbmQsIGxhYmVsLCBsYW5ndWFnZSkge1xuICAgIGlmICghdGhpc1snZmVhdHVyZXNOYXRpdmVUZXh0VHJhY2tzJ10pIHtcbiAgICAgIHJldHVybiBzdXBlci5hZGRUZXh0VHJhY2soa2luZCwgbGFiZWwsIGxhbmd1YWdlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5lbF8uYWRkVGV4dFRyYWNrKGtpbmQsIGxhYmVsLCBsYW5ndWFnZSk7XG4gIH1cblxuICBhZGRSZW1vdGVUZXh0VHJhY2sob3B0aW9ucz17fSkge1xuICAgIGlmICghdGhpc1snZmVhdHVyZXNOYXRpdmVUZXh0VHJhY2tzJ10pIHtcbiAgICAgIHJldHVybiBzdXBlci5hZGRSZW1vdGVUZXh0VHJhY2sob3B0aW9ucyk7XG4gICAgfVxuXG4gICAgdmFyIHRyYWNrID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndHJhY2snKTtcblxuICAgIGlmIChvcHRpb25zWydraW5kJ10pIHtcbiAgICAgIHRyYWNrWydraW5kJ10gPSBvcHRpb25zWydraW5kJ107XG4gICAgfVxuICAgIGlmIChvcHRpb25zWydsYWJlbCddKSB7XG4gICAgICB0cmFja1snbGFiZWwnXSA9IG9wdGlvbnNbJ2xhYmVsJ107XG4gICAgfVxuICAgIGlmIChvcHRpb25zWydsYW5ndWFnZSddIHx8IG9wdGlvbnNbJ3NyY2xhbmcnXSkge1xuICAgICAgdHJhY2tbJ3NyY2xhbmcnXSA9IG9wdGlvbnNbJ2xhbmd1YWdlJ10gfHwgb3B0aW9uc1snc3JjbGFuZyddO1xuICAgIH1cbiAgICBpZiAob3B0aW9uc1snZGVmYXVsdCddKSB7XG4gICAgICB0cmFja1snZGVmYXVsdCddID0gb3B0aW9uc1snZGVmYXVsdCddO1xuICAgIH1cbiAgICBpZiAob3B0aW9uc1snaWQnXSkge1xuICAgICAgdHJhY2tbJ2lkJ10gPSBvcHRpb25zWydpZCddO1xuICAgIH1cbiAgICBpZiAob3B0aW9uc1snc3JjJ10pIHtcbiAgICAgIHRyYWNrWydzcmMnXSA9IG9wdGlvbnNbJ3NyYyddO1xuICAgIH1cblxuICAgIHRoaXMuZWwoKS5hcHBlbmRDaGlsZCh0cmFjayk7XG5cbiAgICBpZiAodHJhY2sudHJhY2tbJ2tpbmQnXSA9PT0gJ21ldGFkYXRhJykge1xuICAgICAgdHJhY2tbJ3RyYWNrJ11bJ21vZGUnXSA9ICdoaWRkZW4nO1xuICAgIH0gZWxzZSB7XG4gICAgICB0cmFja1sndHJhY2snXVsnbW9kZSddID0gJ2Rpc2FibGVkJztcbiAgICB9XG5cbiAgICB0cmFja1snb25sb2FkJ10gPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB0dCA9IHRyYWNrWyd0cmFjayddO1xuICAgICAgaWYgKHRyYWNrLnJlYWR5U3RhdGUgPj0gMikge1xuICAgICAgICBpZiAodHRbJ2tpbmQnXSA9PT0gJ21ldGFkYXRhJyAmJiB0dFsnbW9kZSddICE9PSAnaGlkZGVuJykge1xuICAgICAgICAgIHR0Wydtb2RlJ10gPSAnaGlkZGVuJztcbiAgICAgICAgfSBlbHNlIGlmICh0dFsna2luZCddICE9PSAnbWV0YWRhdGEnICYmIHR0Wydtb2RlJ10gIT09ICdkaXNhYmxlZCcpIHtcbiAgICAgICAgICB0dFsnbW9kZSddID0gJ2Rpc2FibGVkJztcbiAgICAgICAgfVxuICAgICAgICB0cmFja1snb25sb2FkJ10gPSBudWxsO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLnJlbW90ZVRleHRUcmFja3MoKS5hZGRUcmFja18odHJhY2sudHJhY2spO1xuXG4gICAgcmV0dXJuIHRyYWNrO1xuICB9XG5cbiAgcmVtb3ZlUmVtb3RlVGV4dFRyYWNrKHRyYWNrKSB7XG4gICAgaWYgKCF0aGlzWydmZWF0dXJlc05hdGl2ZVRleHRUcmFja3MnXSkge1xuICAgICAgcmV0dXJuIHN1cGVyLnJlbW92ZVJlbW90ZVRleHRUcmFjayh0cmFjayk7XG4gICAgfVxuXG4gICAgdmFyIHRyYWNrcywgaTtcblxuICAgIHRoaXMucmVtb3RlVGV4dFRyYWNrcygpLnJlbW92ZVRyYWNrXyh0cmFjayk7XG5cbiAgICB0cmFja3MgPSB0aGlzLmVsKClbJ3F1ZXJ5U2VsZWN0b3JBbGwnXSgndHJhY2snKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCB0cmFja3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh0cmFja3NbaV0gPT09IHRyYWNrIHx8IHRyYWNrc1tpXVsndHJhY2snXSA9PT0gdHJhY2spIHtcbiAgICAgICAgdHJhY2tzW2ldWydwYXJlbnROb2RlJ11bJ3JlbW92ZUNoaWxkJ10odHJhY2tzW2ldKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbn1cblxuXG4vKiBIVE1MNSBTdXBwb3J0IFRlc3RpbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG4vKipcbiAqIENoZWNrIGlmIEhUTUw1IHZpZGVvIGlzIHN1cHBvcnRlZCBieSB0aGlzIGJyb3dzZXIvZGV2aWNlXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5IdG1sNS5pc1N1cHBvcnRlZCA9IGZ1bmN0aW9uKCl7XG4gIC8vIElFOSB3aXRoIG5vIE1lZGlhIFBsYXllciBpcyBhIExJQVIhICgjOTg0KVxuICB0cnkge1xuICAgIExpYi5URVNUX1ZJRFsndm9sdW1lJ10gPSAwLjU7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gISFMaWIuVEVTVF9WSUQuY2FuUGxheVR5cGU7XG59O1xuXG4vLyBBZGQgU291cmNlIEhhbmRsZXIgcGF0dGVybiBmdW5jdGlvbnMgdG8gdGhpcyB0ZWNoXG5UZWNoLndpdGhTb3VyY2VIYW5kbGVycyhIdG1sNSk7XG5cbi8qKlxuICogVGhlIGRlZmF1bHQgbmF0aXZlIHNvdXJjZSBoYW5kbGVyLlxuICogVGhpcyBzaW1wbHkgcGFzc2VzIHRoZSBzb3VyY2UgdG8gdGhlIHZpZGVvIGVsZW1lbnQuIE5vdGhpbmcgZmFuY3kuXG4gKiBAcGFyYW0gIHtPYmplY3R9IHNvdXJjZSAgIFRoZSBzb3VyY2Ugb2JqZWN0XG4gKiBAcGFyYW0gIHtIdG1sNX0gdGVjaCAgVGhlIGluc3RhbmNlIG9mIHRoZSBIVE1MNSB0ZWNoXG4gKi9cbkh0bWw1Lm5hdGl2ZVNvdXJjZUhhbmRsZXIgPSB7fTtcblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgdmlkZW8gZWxlbWVudCBjYW4gaGFuZGxlIHRoZSBzb3VyY2UgbmF0aXZlbHlcbiAqIEBwYXJhbSAge09iamVjdH0gc291cmNlICBUaGUgc291cmNlIG9iamVjdFxuICogQHJldHVybiB7U3RyaW5nfSAgICAgICAgICdwcm9iYWJseScsICdtYXliZScsIG9yICcnIChlbXB0eSBzdHJpbmcpXG4gKi9cbkh0bWw1Lm5hdGl2ZVNvdXJjZUhhbmRsZXIuY2FuSGFuZGxlU291cmNlID0gZnVuY3Rpb24oc291cmNlKXtcbiAgdmFyIG1hdGNoLCBleHQ7XG5cbiAgZnVuY3Rpb24gY2FuUGxheVR5cGUodHlwZSl7XG4gICAgLy8gSUU5IG9uIFdpbmRvd3MgNyB3aXRob3V0IE1lZGlhUGxheWVyIHRocm93cyBhbiBlcnJvciBoZXJlXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3ZpZGVvanMvdmlkZW8uanMvaXNzdWVzLzUxOVxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gTGliLlRFU1RfVklELmNhblBsYXlUeXBlKHR5cGUpO1xuICAgIH0gY2F0Y2goZSkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfVxuXG4gIC8vIElmIGEgdHlwZSB3YXMgcHJvdmlkZWQgd2Ugc2hvdWxkIHJlbHkgb24gdGhhdFxuICBpZiAoc291cmNlLnR5cGUpIHtcbiAgICByZXR1cm4gY2FuUGxheVR5cGUoc291cmNlLnR5cGUpO1xuICB9IGVsc2UgaWYgKHNvdXJjZS5zcmMpIHtcbiAgICAvLyBJZiBubyB0eXBlLCBmYWxsIGJhY2sgdG8gY2hlY2tpbmcgJ3ZpZGVvL1tFWFRFTlNJT05dJ1xuICAgIGV4dCA9IExpYi5nZXRGaWxlRXh0ZW5zaW9uKHNvdXJjZS5zcmMpO1xuXG4gICAgcmV0dXJuIGNhblBsYXlUeXBlKGB2aWRlby8ke2V4dH1gKTtcbiAgfVxuXG4gIHJldHVybiAnJztcbn07XG5cbi8qKlxuICogUGFzcyB0aGUgc291cmNlIHRvIHRoZSB2aWRlbyBlbGVtZW50XG4gKiBBZGFwdGl2ZSBzb3VyY2UgaGFuZGxlcnMgd2lsbCBoYXZlIG1vcmUgY29tcGxpY2F0ZWQgd29ya2Zsb3dzIGJlZm9yZSBwYXNzaW5nXG4gKiB2aWRlbyBkYXRhIHRvIHRoZSB2aWRlbyBlbGVtZW50XG4gKiBAcGFyYW0gIHtPYmplY3R9IHNvdXJjZSAgICBUaGUgc291cmNlIG9iamVjdFxuICogQHBhcmFtICB7SHRtbDV9IHRlY2ggICBUaGUgaW5zdGFuY2Ugb2YgdGhlIEh0bWw1IHRlY2hcbiAqL1xuSHRtbDUubmF0aXZlU291cmNlSGFuZGxlci5oYW5kbGVTb3VyY2UgPSBmdW5jdGlvbihzb3VyY2UsIHRlY2gpe1xuICB0ZWNoLnNldFNyYyhzb3VyY2Uuc3JjKTtcbn07XG5cbi8qKlxuICogQ2xlYW4gdXAgdGhlIHNvdXJjZSBoYW5kbGVyIHdoZW4gZGlzcG9zaW5nIHRoZSBwbGF5ZXIgb3Igc3dpdGNoaW5nIHNvdXJjZXMuLlxuICogKG5vIGNsZWFudXAgaXMgbmVlZGVkIHdoZW4gc3VwcG9ydGluZyB0aGUgZm9ybWF0IG5hdGl2ZWx5KVxuICovXG5IdG1sNS5uYXRpdmVTb3VyY2VIYW5kbGVyLmRpc3Bvc2UgPSBmdW5jdGlvbigpe307XG5cbi8vIFJlZ2lzdGVyIHRoZSBuYXRpdmUgc291cmNlIGhhbmRsZXJcbkh0bWw1LnJlZ2lzdGVyU291cmNlSGFuZGxlcihIdG1sNS5uYXRpdmVTb3VyY2VIYW5kbGVyKTtcblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgdm9sdW1lIGNhbiBiZSBjaGFuZ2VkIGluIHRoaXMgYnJvd3Nlci9kZXZpY2UuXG4gKiBWb2x1bWUgY2Fubm90IGJlIGNoYW5nZWQgaW4gYSBsb3Qgb2YgbW9iaWxlIGRldmljZXMuXG4gKiBTcGVjaWZpY2FsbHksIGl0IGNhbid0IGJlIGNoYW5nZWQgZnJvbSAxIG9uIGlPUy5cbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cbkh0bWw1LmNhbkNvbnRyb2xWb2x1bWUgPSBmdW5jdGlvbigpe1xuICB2YXIgdm9sdW1lID0gIExpYi5URVNUX1ZJRC52b2x1bWU7XG4gIExpYi5URVNUX1ZJRC52b2x1bWUgPSAodm9sdW1lIC8gMikgKyAwLjE7XG4gIHJldHVybiB2b2x1bWUgIT09IExpYi5URVNUX1ZJRC52b2x1bWU7XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIHBsYXliYWNrUmF0ZSBpcyBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyL2RldmljZS5cbiAqIEByZXR1cm4ge1t0eXBlXX0gW2Rlc2NyaXB0aW9uXVxuICovXG5IdG1sNS5jYW5Db250cm9sUGxheWJhY2tSYXRlID0gZnVuY3Rpb24oKXtcbiAgdmFyIHBsYXliYWNrUmF0ZSA9ICBMaWIuVEVTVF9WSUQucGxheWJhY2tSYXRlO1xuICBMaWIuVEVTVF9WSUQucGxheWJhY2tSYXRlID0gKHBsYXliYWNrUmF0ZSAvIDIpICsgMC4xO1xuICByZXR1cm4gcGxheWJhY2tSYXRlICE9PSBMaWIuVEVTVF9WSUQucGxheWJhY2tSYXRlO1xufTtcblxuLyoqXG4gKiBDaGVjayB0byBzZWUgaWYgbmF0aXZlIHRleHQgdHJhY2tzIGFyZSBzdXBwb3J0ZWQgYnkgdGhpcyBicm93c2VyL2RldmljZVxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xuSHRtbDUuc3VwcG9ydHNOYXRpdmVUZXh0VHJhY2tzID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzdXBwb3J0c1RleHRUcmFja3M7XG5cbiAgLy8gRmlndXJlIG91dCBuYXRpdmUgdGV4dCB0cmFjayBzdXBwb3J0XG4gIC8vIElmIG1vZGUgaXMgYSBudW1iZXIsIHdlIGNhbm5vdCBjaGFuZ2UgaXQgYmVjYXVzZSBpdCdsbCBkaXNhcHBlYXIgZnJvbSB2aWV3LlxuICAvLyBCcm93c2VycyB3aXRoIG51bWVyaWMgbW9kZXMgaW5jbHVkZSBJRTEwIGFuZCBvbGRlciAoPD0yMDEzKSBzYW1zdW5nIGFuZHJvaWQgbW9kZWxzLlxuICAvLyBGaXJlZm94IGlzbid0IHBsYXlpbmcgbmljZSBlaXRoZXIgd2l0aCBtb2RpZnlpbmcgdGhlIG1vZGVcbiAgLy8gVE9ETzogSW52ZXN0aWdhdGUgZmlyZWZveDogaHR0cHM6Ly9naXRodWIuY29tL3ZpZGVvanMvdmlkZW8uanMvaXNzdWVzLzE4NjJcbiAgc3VwcG9ydHNUZXh0VHJhY2tzID0gISFMaWIuVEVTVF9WSUQudGV4dFRyYWNrcztcbiAgaWYgKHN1cHBvcnRzVGV4dFRyYWNrcyAmJiBMaWIuVEVTVF9WSUQudGV4dFRyYWNrcy5sZW5ndGggPiAwKSB7XG4gICAgc3VwcG9ydHNUZXh0VHJhY2tzID0gdHlwZW9mIExpYi5URVNUX1ZJRC50ZXh0VHJhY2tzWzBdWydtb2RlJ10gIT09ICdudW1iZXInO1xuICB9XG4gIGlmIChzdXBwb3J0c1RleHRUcmFja3MgJiYgTGliLklTX0ZJUkVGT1gpIHtcbiAgICBzdXBwb3J0c1RleHRUcmFja3MgPSBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBzdXBwb3J0c1RleHRUcmFja3M7XG59O1xuXG4vKipcbiAqIFNldCB0aGUgdGVjaCdzIHZvbHVtZSBjb250cm9sIHN1cHBvcnQgc3RhdHVzXG4gKiBAdHlwZSB7Qm9vbGVhbn1cbiAqL1xuSHRtbDUucHJvdG90eXBlWydmZWF0dXJlc1ZvbHVtZUNvbnRyb2wnXSA9IEh0bWw1LmNhbkNvbnRyb2xWb2x1bWUoKTtcblxuLyoqXG4gKiBTZXQgdGhlIHRlY2gncyBwbGF5YmFja1JhdGUgc3VwcG9ydCBzdGF0dXNcbiAqIEB0eXBlIHtCb29sZWFufVxuICovXG5IdG1sNS5wcm90b3R5cGVbJ2ZlYXR1cmVzUGxheWJhY2tSYXRlJ10gPSBIdG1sNS5jYW5Db250cm9sUGxheWJhY2tSYXRlKCk7XG5cbi8qKlxuICogU2V0IHRoZSB0ZWNoJ3Mgc3RhdHVzIG9uIG1vdmluZyB0aGUgdmlkZW8gZWxlbWVudC5cbiAqIEluIGlPUywgaWYgeW91IG1vdmUgYSB2aWRlbyBlbGVtZW50IGluIHRoZSBET00sIGl0IGJyZWFrcyB2aWRlbyBwbGF5YmFjay5cbiAqIEB0eXBlIHtCb29sZWFufVxuICovXG5IdG1sNS5wcm90b3R5cGVbJ21vdmluZ01lZGlhRWxlbWVudEluRE9NJ10gPSAhTGliLklTX0lPUztcblxuLyoqXG4gKiBTZXQgdGhlIHRoZSB0ZWNoJ3MgZnVsbHNjcmVlbiByZXNpemUgc3VwcG9ydCBzdGF0dXMuXG4gKiBIVE1MIHZpZGVvIGlzIGFibGUgdG8gYXV0b21hdGljYWxseSByZXNpemUgd2hlbiBnb2luZyB0byBmdWxsc2NyZWVuLlxuICogKE5vIGxvbmdlciBhcHBlYXJzIHRvIGJlIHVzZWQuIENhbiBwcm9iYWJseSBiZSByZW1vdmVkLilcbiAqL1xuSHRtbDUucHJvdG90eXBlWydmZWF0dXJlc0Z1bGxzY3JlZW5SZXNpemUnXSA9IHRydWU7XG5cbi8qKlxuICogU2V0IHRoZSB0ZWNoJ3MgcHJvZ3Jlc3MgZXZlbnQgc3VwcG9ydCBzdGF0dXNcbiAqICh0aGlzIGRpc2FibGVzIHRoZSBtYW51YWwgcHJvZ3Jlc3MgZXZlbnRzIG9mIHRoZSBUZWNoKVxuICovXG5IdG1sNS5wcm90b3R5cGVbJ2ZlYXR1cmVzUHJvZ3Jlc3NFdmVudHMnXSA9IHRydWU7XG5cbi8qKlxuICogU2V0cyB0aGUgdGVjaCdzIHN0YXR1cyBvbiBuYXRpdmUgdGV4dCB0cmFjayBzdXBwb3J0XG4gKiBAdHlwZSB7Qm9vbGVhbn1cbiAqL1xuSHRtbDUucHJvdG90eXBlWydmZWF0dXJlc05hdGl2ZVRleHRUcmFja3MnXSA9IEh0bWw1LnN1cHBvcnRzTmF0aXZlVGV4dFRyYWNrcygpO1xuXG4vLyBIVE1MNSBGZWF0dXJlIGRldGVjdGlvbiBhbmQgRGV2aWNlIEZpeGVzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xubGV0IGNhblBsYXlUeXBlO1xuY29uc3QgbXBlZ3VybFJFID0gL15hcHBsaWNhdGlvblxcLyg/OngtfHZuZFxcLmFwcGxlXFwuKW1wZWd1cmwvaTtcbmNvbnN0IG1wNFJFID0gL152aWRlb1xcL21wNC9pO1xuXG5IdG1sNS5wYXRjaENhblBsYXlUeXBlID0gZnVuY3Rpb24oKSB7XG4gIC8vIEFuZHJvaWQgNC4wIGFuZCBhYm92ZSBjYW4gcGxheSBITFMgdG8gc29tZSBleHRlbnQgYnV0IGl0IHJlcG9ydHMgYmVpbmcgdW5hYmxlIHRvIGRvIHNvXG4gIGlmIChMaWIuQU5EUk9JRF9WRVJTSU9OID49IDQuMCkge1xuICAgIGlmICghY2FuUGxheVR5cGUpIHtcbiAgICAgIGNhblBsYXlUeXBlID0gTGliLlRFU1RfVklELmNvbnN0cnVjdG9yLnByb3RvdHlwZS5jYW5QbGF5VHlwZTtcbiAgICB9XG5cbiAgICBMaWIuVEVTVF9WSUQuY29uc3RydWN0b3IucHJvdG90eXBlLmNhblBsYXlUeXBlID0gZnVuY3Rpb24odHlwZSkge1xuICAgICAgaWYgKHR5cGUgJiYgbXBlZ3VybFJFLnRlc3QodHlwZSkpIHtcbiAgICAgICAgcmV0dXJuICdtYXliZSc7XG4gICAgICB9XG4gICAgICByZXR1cm4gY2FuUGxheVR5cGUuY2FsbCh0aGlzLCB0eXBlKTtcbiAgICB9O1xuICB9XG5cbiAgLy8gT3ZlcnJpZGUgQW5kcm9pZCAyLjIgYW5kIGxlc3MgY2FuUGxheVR5cGUgbWV0aG9kIHdoaWNoIGlzIGJyb2tlblxuICBpZiAoTGliLklTX09MRF9BTkRST0lEKSB7XG4gICAgaWYgKCFjYW5QbGF5VHlwZSkge1xuICAgICAgY2FuUGxheVR5cGUgPSBMaWIuVEVTVF9WSUQuY29uc3RydWN0b3IucHJvdG90eXBlLmNhblBsYXlUeXBlO1xuICAgIH1cblxuICAgIExpYi5URVNUX1ZJRC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUuY2FuUGxheVR5cGUgPSBmdW5jdGlvbih0eXBlKXtcbiAgICAgIGlmICh0eXBlICYmIG1wNFJFLnRlc3QodHlwZSkpIHtcbiAgICAgICAgcmV0dXJuICdtYXliZSc7XG4gICAgICB9XG4gICAgICByZXR1cm4gY2FuUGxheVR5cGUuY2FsbCh0aGlzLCB0eXBlKTtcbiAgICB9O1xuICB9XG59O1xuXG5IdG1sNS51bnBhdGNoQ2FuUGxheVR5cGUgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHIgPSBMaWIuVEVTVF9WSUQuY29uc3RydWN0b3IucHJvdG90eXBlLmNhblBsYXlUeXBlO1xuICBMaWIuVEVTVF9WSUQuY29uc3RydWN0b3IucHJvdG90eXBlLmNhblBsYXlUeXBlID0gY2FuUGxheVR5cGU7XG4gIGNhblBsYXlUeXBlID0gbnVsbDtcbiAgcmV0dXJuIHI7XG59O1xuXG4vLyBieSBkZWZhdWx0LCBwYXRjaCB0aGUgdmlkZW8gZWxlbWVudFxuSHRtbDUucGF0Y2hDYW5QbGF5VHlwZSgpO1xuXG5IdG1sNS5kaXNwb3NlTWVkaWFFbGVtZW50ID0gZnVuY3Rpb24oZWwpe1xuICBpZiAoIWVsKSB7IHJldHVybjsgfVxuXG4gIGlmIChlbC5wYXJlbnROb2RlKSB7XG4gICAgZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbCk7XG4gIH1cblxuICAvLyByZW1vdmUgYW55IGNoaWxkIHRyYWNrIG9yIHNvdXJjZSBub2RlcyB0byBwcmV2ZW50IHRoZWlyIGxvYWRpbmdcbiAgd2hpbGUoZWwuaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgZWwucmVtb3ZlQ2hpbGQoZWwuZmlyc3RDaGlsZCk7XG4gIH1cblxuICAvLyByZW1vdmUgYW55IHNyYyByZWZlcmVuY2UuIG5vdCBzZXR0aW5nIGBzcmM9JydgIGJlY2F1c2UgdGhhdCBjYXVzZXMgYSB3YXJuaW5nXG4gIC8vIGluIGZpcmVmb3hcbiAgZWwucmVtb3ZlQXR0cmlidXRlKCdzcmMnKTtcblxuICAvLyBmb3JjZSB0aGUgbWVkaWEgZWxlbWVudCB0byB1cGRhdGUgaXRzIGxvYWRpbmcgc3RhdGUgYnkgY2FsbGluZyBsb2FkKClcbiAgLy8gaG93ZXZlciBJRSBvbiBXaW5kb3dzIDdOIGhhcyBhIGJ1ZyB0aGF0IHRocm93cyBhbiBlcnJvciBzbyBuZWVkIGEgdHJ5L2NhdGNoICgjNzkzKVxuICBpZiAodHlwZW9mIGVsLmxvYWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyB3cmFwcGluZyBpbiBhbiBpaWZlIHNvIGl0J3Mgbm90IGRlb3B0aW1pemVkICgjMTA2MCNkaXNjdXNzaW9uX3IxMDMyNDQ3MylcbiAgICAoZnVuY3Rpb24oKSB7XG4gICAgICB0cnkge1xuICAgICAgICBlbC5sb2FkKCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIG5vdCBzdXBwb3J0ZWRcbiAgICAgIH1cbiAgICB9KSgpO1xuICB9XG59O1xuXG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ0h0bWw1JywgSHRtbDUpO1xuZXhwb3J0IGRlZmF1bHQgSHRtbDU7XG4iLCJpbXBvcnQgQ29tcG9uZW50IGZyb20gJy4uL2NvbXBvbmVudCc7XG5pbXBvcnQgKiBhcyBMaWIgZnJvbSAnLi4vbGliJztcbmltcG9ydCB3aW5kb3cgZnJvbSAnZ2xvYmFsL3dpbmRvdyc7XG5cbi8qKlxuICogVGhlIE1lZGlhIExvYWRlciBpcyB0aGUgY29tcG9uZW50IHRoYXQgZGVjaWRlcyB3aGljaCBwbGF5YmFjayB0ZWNobm9sb2d5IHRvIGxvYWRcbiAqIHdoZW4gdGhlIHBsYXllciBpcyBpbml0aWFsaXplZC5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuY2xhc3MgTWVkaWFMb2FkZXIgZXh0ZW5kcyBDb21wb25lbnQge1xuXG4gIGNvbnN0cnVjdG9yKHBsYXllciwgb3B0aW9ucywgcmVhZHkpe1xuICAgIHN1cGVyKHBsYXllciwgb3B0aW9ucywgcmVhZHkpO1xuXG4gICAgLy8gSWYgdGhlcmUgYXJlIG5vIHNvdXJjZXMgd2hlbiB0aGUgcGxheWVyIGlzIGluaXRpYWxpemVkLFxuICAgIC8vIGxvYWQgdGhlIGZpcnN0IHN1cHBvcnRlZCBwbGF5YmFjayB0ZWNobm9sb2d5LlxuICAgIGlmICghcGxheWVyLm9wdGlvbnNfWydzb3VyY2VzJ10gfHwgcGxheWVyLm9wdGlvbnNfWydzb3VyY2VzJ10ubGVuZ3RoID09PSAwKSB7XG4gICAgICBmb3IgKGxldCBpPTAsIGo9cGxheWVyLm9wdGlvbnNfWyd0ZWNoT3JkZXInXTsgaTxqLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCB0ZWNoTmFtZSA9IExpYi5jYXBpdGFsaXplKGpbaV0pO1xuICAgICAgICBsZXQgdGVjaCA9IENvbXBvbmVudC5nZXRDb21wb25lbnQodGVjaE5hbWUpO1xuXG4gICAgICAgIC8vIENoZWNrIGlmIHRoZSBicm93c2VyIHN1cHBvcnRzIHRoaXMgdGVjaG5vbG9neVxuICAgICAgICBpZiAodGVjaCAmJiB0ZWNoLmlzU3VwcG9ydGVkKCkpIHtcbiAgICAgICAgICBwbGF5ZXIubG9hZFRlY2godGVjaE5hbWUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIC8vIExvb3AgdGhyb3VnaCBwbGF5YmFjayB0ZWNobm9sb2dpZXMgKEhUTUw1LCBGbGFzaCkgYW5kIGNoZWNrIGZvciBzdXBwb3J0LlxuICAgICAgLy8gLy8gVGhlbiBsb2FkIHRoZSBiZXN0IHNvdXJjZS5cbiAgICAgIC8vIC8vIEEgZmV3IGFzc3VtcHRpb25zIGhlcmU6XG4gICAgICAvLyAvLyAgIEFsbCBwbGF5YmFjayB0ZWNobm9sb2dpZXMgcmVzcGVjdCBwcmVsb2FkIGZhbHNlLlxuICAgICAgcGxheWVyLnNyYyhwbGF5ZXIub3B0aW9uc19bJ3NvdXJjZXMnXSk7XG4gICAgfVxuICB9XG59XG5cbkNvbXBvbmVudC5yZWdpc3RlckNvbXBvbmVudCgnTWVkaWFMb2FkZXInLCBNZWRpYUxvYWRlcik7XG5leHBvcnQgZGVmYXVsdCBNZWRpYUxvYWRlcjtcbiIsIi8qKlxuICogQGZpbGVvdmVydmlldyBNZWRpYSBUZWNobm9sb2d5IENvbnRyb2xsZXIgLSBCYXNlIGNsYXNzIGZvciBtZWRpYSBwbGF5YmFja1xuICogdGVjaG5vbG9neSBjb250cm9sbGVycyBsaWtlIEZsYXNoIGFuZCBIVE1MNVxuICovXG5cbmltcG9ydCBDb21wb25lbnQgZnJvbSAnLi4vY29tcG9uZW50JztcbmltcG9ydCBUZXh0VHJhY2sgZnJvbSAnLi4vdHJhY2tzL3RleHQtdHJhY2snO1xuaW1wb3J0IFRleHRUcmFja0xpc3QgZnJvbSAnLi4vdHJhY2tzL3RleHQtdHJhY2stbGlzdCc7XG5pbXBvcnQgKiBhcyBMaWIgZnJvbSAnLi4vbGliJztcbmltcG9ydCB3aW5kb3cgZnJvbSAnZ2xvYmFsL3dpbmRvdyc7XG5pbXBvcnQgZG9jdW1lbnQgZnJvbSAnZ2xvYmFsL2RvY3VtZW50JztcblxuLyoqXG4gKiBCYXNlIGNsYXNzIGZvciBtZWRpYSAoSFRNTDUgVmlkZW8sIEZsYXNoKSBjb250cm9sbGVyc1xuICogQHBhcmFtIHtQbGF5ZXJ8T2JqZWN0fSBwbGF5ZXIgIENlbnRyYWwgcGxheWVyIGluc3RhbmNlXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbnMgT3B0aW9ucyBvYmplY3RcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5jbGFzcyBUZWNoIGV4dGVuZHMgQ29tcG9uZW50IHtcblxuICBjb25zdHJ1Y3RvcihvcHRpb25zPXt9LCByZWFkeT1mdW5jdGlvbigpe30pe1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIC8vIHdlIGRvbid0IHdhbnQgdGhlIHRlY2ggdG8gcmVwb3J0IHVzZXIgYWN0aXZpdHkgYXV0b21hdGljYWxseS5cbiAgICAvLyBUaGlzIGlzIGRvbmUgbWFudWFsbHkgaW4gYWRkQ29udHJvbHNMaXN0ZW5lcnNcbiAgICBvcHRpb25zLnJlcG9ydFRvdWNoQWN0aXZpdHkgPSBmYWxzZTtcbiAgICBzdXBlcihudWxsLCBvcHRpb25zLCByZWFkeSk7XG5cbiAgICB0aGlzLnRleHRUcmFja3NfID0gb3B0aW9ucy50ZXh0VHJhY2tzO1xuXG4gICAgLy8gTWFudWFsbHkgdHJhY2sgcHJvZ3Jlc3MgaW4gY2FzZXMgd2hlcmUgdGhlIGJyb3dzZXIvZmxhc2ggcGxheWVyIGRvZXNuJ3QgcmVwb3J0IGl0LlxuICAgIGlmICghdGhpcy5mZWF0dXJlc1Byb2dyZXNzRXZlbnRzKSB7XG4gICAgICB0aGlzLm1hbnVhbFByb2dyZXNzT24oKTtcbiAgICB9XG5cbiAgICAvLyBNYW51YWxseSB0cmFjayB0aW1ldXBkYXRlcyBpbiBjYXNlcyB3aGVyZSB0aGUgYnJvd3Nlci9mbGFzaCBwbGF5ZXIgZG9lc24ndCByZXBvcnQgaXQuXG4gICAgaWYgKCF0aGlzLmZlYXR1cmVzVGltZXVwZGF0ZUV2ZW50cykge1xuICAgICAgdGhpcy5tYW51YWxUaW1lVXBkYXRlc09uKCk7XG4gICAgfVxuXG4gICAgdGhpcy5pbml0Q29udHJvbHNMaXN0ZW5lcnMoKTtcblxuICAgIGlmIChvcHRpb25zLm5hdGl2ZUNhcHRpb25zID09PSBmYWxzZSB8fCBvcHRpb25zLm5hdGl2ZVRleHRUcmFja3MgPT09IGZhbHNlKSB7XG4gICAgICB0aGlzLmZlYXR1cmVzTmF0aXZlVGV4dFRyYWNrcyA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5mZWF0dXJlc05hdGl2ZVRleHRUcmFja3MpIHtcbiAgICAgIHRoaXMuZW11bGF0ZVRleHRUcmFja3MoKTtcbiAgICB9XG5cbiAgICB0aGlzLmluaXRUZXh0VHJhY2tMaXN0ZW5lcnMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdXAgY2xpY2sgYW5kIHRvdWNoIGxpc3RlbmVycyBmb3IgdGhlIHBsYXliYWNrIGVsZW1lbnRcbiAgICogT24gZGVza3RvcHMsIGEgY2xpY2sgb24gdGhlIHZpZGVvIGl0c2VsZiB3aWxsIHRvZ2dsZSBwbGF5YmFjayxcbiAgICogb24gYSBtb2JpbGUgZGV2aWNlIGEgY2xpY2sgb24gdGhlIHZpZGVvIHRvZ2dsZXMgY29udHJvbHMuXG4gICAqICh0b2dnbGluZyBjb250cm9scyBpcyBkb25lIGJ5IHRvZ2dsaW5nIHRoZSB1c2VyIHN0YXRlIGJldHdlZW4gYWN0aXZlIGFuZFxuICAgKiBpbmFjdGl2ZSlcbiAgICpcbiAgICogQSB0YXAgY2FuIHNpZ25hbCB0aGF0IGEgdXNlciBoYXMgYmVjb21lIGFjdGl2ZSwgb3IgaGFzIGJlY29tZSBpbmFjdGl2ZVxuICAgKiBlLmcuIGEgcXVpY2sgdGFwIG9uIGFuIGlQaG9uZSBtb3ZpZSBzaG91bGQgcmV2ZWFsIHRoZSBjb250cm9scy4gQW5vdGhlclxuICAgKiBxdWljayB0YXAgc2hvdWxkIGhpZGUgdGhlbSBhZ2FpbiAoc2lnbmFsaW5nIHRoZSB1c2VyIGlzIGluIGFuIGluYWN0aXZlXG4gICAqIHZpZXdpbmcgc3RhdGUpXG4gICAqXG4gICAqIEluIGFkZGl0aW9uIHRvIHRoaXMsIHdlIHN0aWxsIHdhbnQgdGhlIHVzZXIgdG8gYmUgY29uc2lkZXJlZCBpbmFjdGl2ZSBhZnRlclxuICAgKiBhIGZldyBzZWNvbmRzIG9mIGluYWN0aXZpdHkuXG4gICAqXG4gICAqIE5vdGU6IHRoZSBvbmx5IHBhcnQgb2YgaU9TIGludGVyYWN0aW9uIHdlIGNhbid0IG1pbWljIHdpdGggdGhpcyBzZXR1cFxuICAgKiBpcyBhIHRvdWNoIGFuZCBob2xkIG9uIHRoZSB2aWRlbyBlbGVtZW50IGNvdW50aW5nIGFzIGFjdGl2aXR5IGluIG9yZGVyIHRvXG4gICAqIGtlZXAgdGhlIGNvbnRyb2xzIHNob3dpbmcsIGJ1dCB0aGF0IHNob3VsZG4ndCBiZSBhbiBpc3N1ZS4gQSB0b3VjaCBhbmQgaG9sZCBvblxuICAgKiBhbnkgY29udHJvbHMgd2lsbCBzdGlsbCBrZWVwIHRoZSB1c2VyIGFjdGl2ZVxuICAgKi9cbiAgaW5pdENvbnRyb2xzTGlzdGVuZXJzKCkge1xuICAgIC8vIGlmIHdlJ3JlIGxvYWRpbmcgdGhlIHBsYXliYWNrIG9iamVjdCBhZnRlciBpdCBoYXMgc3RhcnRlZCBsb2FkaW5nIG9yIHBsYXlpbmcgdGhlXG4gICAgLy8gdmlkZW8gKG9mdGVuIHdpdGggYXV0b3BsYXkgb24pIHRoZW4gdGhlIGxvYWRzdGFydCBldmVudCBoYXMgYWxyZWFkeSBmaXJlZCBhbmQgd2VcbiAgICAvLyBuZWVkIHRvIGZpcmUgaXQgbWFudWFsbHkgYmVjYXVzZSBtYW55IHRoaW5ncyByZWx5IG9uIGl0LlxuICAgIC8vIExvbmcgdGVybSB3ZSBtaWdodCBjb25zaWRlciBob3cgd2Ugd291bGQgZG8gdGhpcyBmb3Igb3RoZXIgZXZlbnRzIGxpa2UgJ2NhbnBsYXknXG4gICAgLy8gdGhhdCBtYXkgYWxzbyBoYXZlIGZpcmVkLlxuICAgIHRoaXMucmVhZHkoZnVuY3Rpb24oKXtcbiAgICAgIGlmICh0aGlzLm5ldHdvcmtTdGF0ZSAmJiB0aGlzLm5ldHdvcmtTdGF0ZSgpID4gMCkge1xuICAgICAgICB0aGlzLnRyaWdnZXIoJ2xvYWRzdGFydCcpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyogRmFsbGJhY2tzIGZvciB1bnN1cHBvcnRlZCBldmVudCB0eXBlc1xuICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuICAvLyBNYW51YWxseSB0cmlnZ2VyIHByb2dyZXNzIGV2ZW50cyBiYXNlZCBvbiBjaGFuZ2VzIHRvIHRoZSBidWZmZXJlZCBhbW91bnRcbiAgLy8gTWFueSBmbGFzaCBwbGF5ZXJzIGFuZCBvbGRlciBIVE1MNSBicm93c2VycyBkb24ndCBzZW5kIHByb2dyZXNzIG9yIHByb2dyZXNzLWxpa2UgZXZlbnRzXG4gIG1hbnVhbFByb2dyZXNzT24oKSB7XG4gICAgdGhpcy5vbignZHVyYXRpb25jaGFuZ2UnLCB0aGlzLm9uRHVyYXRpb25DaGFuZ2UpO1xuXG4gICAgdGhpcy5tYW51YWxQcm9ncmVzcyA9IHRydWU7XG5cbiAgICAvLyBUcmlnZ2VyIHByb2dyZXNzIHdhdGNoaW5nIHdoZW4gYSBzb3VyY2UgYmVnaW5zIGxvYWRpbmdcbiAgICB0aGlzLnRyYWNrUHJvZ3Jlc3MoKTtcbiAgfVxuXG4gIG1hbnVhbFByb2dyZXNzT2ZmKCkge1xuICAgIHRoaXMubWFudWFsUHJvZ3Jlc3MgPSBmYWxzZTtcbiAgICB0aGlzLnN0b3BUcmFja2luZ1Byb2dyZXNzKCk7XG5cbiAgICB0aGlzLm9mZignZHVyYXRpb25jaGFuZ2UnLCB0aGlzLm9uRHVyYXRpb25DaGFuZ2UpO1xuICB9XG5cbiAgdHJhY2tQcm9ncmVzcygpIHtcbiAgICB0aGlzLnByb2dyZXNzSW50ZXJ2YWwgPSB0aGlzLnNldEludGVydmFsKExpYi5iaW5kKHRoaXMsIGZ1bmN0aW9uKCl7XG4gICAgICAvLyBEb24ndCB0cmlnZ2VyIHVubGVzcyBidWZmZXJlZCBhbW91bnQgaXMgZ3JlYXRlciB0aGFuIGxhc3QgdGltZVxuXG4gICAgICBsZXQgYnVmZmVyZWRQZXJjZW50ID0gdGhpcy5idWZmZXJlZFBlcmNlbnQoKTtcblxuICAgICAgaWYgKHRoaXMuYnVmZmVyZWRQZXJjZW50XyAhPT0gYnVmZmVyZWRQZXJjZW50KSB7XG4gICAgICAgIHRoaXMudHJpZ2dlcigncHJvZ3Jlc3MnKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5idWZmZXJlZFBlcmNlbnRfID0gYnVmZmVyZWRQZXJjZW50O1xuXG4gICAgICBpZiAoYnVmZmVyZWRQZXJjZW50ID09PSAxKSB7XG4gICAgICAgIHRoaXMuc3RvcFRyYWNraW5nUHJvZ3Jlc3MoKTtcbiAgICAgIH1cbiAgICB9KSwgNTAwKTtcbiAgfVxuXG4gIG9uRHVyYXRpb25DaGFuZ2UoKSB7XG4gICAgdGhpcy5kdXJhdGlvbl8gPSB0aGlzLmR1cmF0aW9uKCk7XG4gIH1cblxuICBidWZmZXJlZFBlcmNlbnQoKSB7XG4gICAgbGV0IGJ1ZmZlcmVkRHVyYXRpb24gPSAwLFxuICAgICAgICBzdGFydCwgZW5kO1xuXG4gICAgaWYgKCF0aGlzLmR1cmF0aW9uXykge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgbGV0IGJ1ZmZlcmVkID0gdGhpcy5idWZmZXJlZCgpO1xuXG4gICAgaWYgKCFidWZmZXJlZCB8fCAhYnVmZmVyZWQubGVuZ3RoKSB7XG4gICAgICBidWZmZXJlZCA9IExpYi5jcmVhdGVUaW1lUmFuZ2UoMCwwKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpPTA7IGk8YnVmZmVyZWQubGVuZ3RoOyBpKyspe1xuICAgICAgc3RhcnQgPSBidWZmZXJlZC5zdGFydChpKTtcbiAgICAgIGVuZCAgID0gYnVmZmVyZWQuZW5kKGkpO1xuXG4gICAgICAvLyBidWZmZXJlZCBlbmQgY2FuIGJlIGJpZ2dlciB0aGFuIGR1cmF0aW9uIGJ5IGEgdmVyeSBzbWFsbCBmcmFjdGlvblxuICAgICAgaWYgKGVuZCA+IHRoaXMuZHVyYXRpb25fKSB7XG4gICAgICAgIGVuZCA9IHRoaXMuZHVyYXRpb25fO1xuICAgICAgfVxuXG4gICAgICBidWZmZXJlZER1cmF0aW9uICs9IGVuZCAtIHN0YXJ0O1xuICAgIH1cblxuICAgIHJldHVybiBidWZmZXJlZER1cmF0aW9uIC8gdGhpcy5kdXJhdGlvbl87XG4gIH1cblxuICBzdG9wVHJhY2tpbmdQcm9ncmVzcygpIHtcbiAgICB0aGlzLmNsZWFySW50ZXJ2YWwodGhpcy5wcm9ncmVzc0ludGVydmFsKTtcbiAgfVxuXG4gIC8qISBUaW1lIFRyYWNraW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG4gIG1hbnVhbFRpbWVVcGRhdGVzT24oKSB7XG4gICAgdGhpcy5tYW51YWxUaW1lVXBkYXRlcyA9IHRydWU7XG5cbiAgICB0aGlzLm9uKCdwbGF5JywgdGhpcy50cmFja0N1cnJlbnRUaW1lKTtcbiAgICB0aGlzLm9uKCdwYXVzZScsIHRoaXMuc3RvcFRyYWNraW5nQ3VycmVudFRpbWUpO1xuICAgIC8vIHRpbWV1cGRhdGUgaXMgYWxzbyBjYWxsZWQgYnkgLmN1cnJlbnRUaW1lIHdoZW5ldmVyIGN1cnJlbnQgdGltZSBpcyBzZXRcblxuICAgIC8vIFdhdGNoIGZvciBuYXRpdmUgdGltZXVwZGF0ZSBldmVudCBvbmx5XG4gICAgdmFyIG9uVGltZVVwZGF0ZSA9IGZ1bmN0aW9uKGUpe1xuICAgICAgaWYgKGUubWFudWFsbHlUcmlnZ2VyZWQpIHJldHVybjtcblxuICAgICAgdGhpcy5vZmYoJ3RpbWV1cGRhdGUnLCBvblRpbWVVcGRhdGUpO1xuXG4gICAgICAvLyBVcGRhdGUga25vd24gcHJvZ3Jlc3Mgc3VwcG9ydCBmb3IgdGhpcyBwbGF5YmFjayB0ZWNobm9sb2d5XG4gICAgICB0aGlzLmZlYXR1cmVzVGltZXVwZGF0ZUV2ZW50cyA9IHRydWU7XG4gICAgICAvLyBUdXJuIG9mZiBtYW51YWwgcHJvZ3Jlc3MgdHJhY2tpbmdcbiAgICAgIHRoaXMubWFudWFsVGltZVVwZGF0ZXNPZmYoKTtcbiAgICB9O1xuXG4gICAgdGhpcy5vbigndGltZXVwZGF0ZScsIG9uVGltZVVwZGF0ZSk7XG4gIH1cblxuICBtYW51YWxUaW1lVXBkYXRlc09mZigpIHtcbiAgICB0aGlzLm1hbnVhbFRpbWVVcGRhdGVzID0gZmFsc2U7XG4gICAgdGhpcy5zdG9wVHJhY2tpbmdDdXJyZW50VGltZSgpO1xuICAgIHRoaXMub2ZmKCdwbGF5JywgdGhpcy50cmFja0N1cnJlbnRUaW1lKTtcbiAgICB0aGlzLm9mZigncGF1c2UnLCB0aGlzLnN0b3BUcmFja2luZ0N1cnJlbnRUaW1lKTtcbiAgfVxuXG4gIHRyYWNrQ3VycmVudFRpbWUoKSB7XG4gICAgaWYgKHRoaXMuY3VycmVudFRpbWVJbnRlcnZhbCkgeyB0aGlzLnN0b3BUcmFja2luZ0N1cnJlbnRUaW1lKCk7IH1cbiAgICB0aGlzLmN1cnJlbnRUaW1lSW50ZXJ2YWwgPSB0aGlzLnNldEludGVydmFsKGZ1bmN0aW9uKCl7XG4gICAgICB0aGlzLnRyaWdnZXIoeyB0eXBlOiAndGltZXVwZGF0ZScsIHRhcmdldDogdGhpcywgbWFudWFsbHlUcmlnZ2VyZWQ6IHRydWUgfSk7XG4gICAgfSwgMjUwKTsgLy8gNDIgPSAyNCBmcHMgLy8gMjUwIGlzIHdoYXQgV2Via2l0IHVzZXMgLy8gRkYgdXNlcyAxNVxuICB9XG5cbiAgLy8gVHVybiBvZmYgcGxheSBwcm9ncmVzcyB0cmFja2luZyAod2hlbiBwYXVzZWQgb3IgZHJhZ2dpbmcpXG4gIHN0b3BUcmFja2luZ0N1cnJlbnRUaW1lKCkge1xuICAgIHRoaXMuY2xlYXJJbnRlcnZhbCh0aGlzLmN1cnJlbnRUaW1lSW50ZXJ2YWwpO1xuXG4gICAgLy8gIzEwMDIgLSBpZiB0aGUgdmlkZW8gZW5kcyByaWdodCBiZWZvcmUgdGhlIG5leHQgdGltZXVwZGF0ZSB3b3VsZCBoYXBwZW4sXG4gICAgLy8gdGhlIHByb2dyZXNzIGJhciB3b24ndCBtYWtlIGl0IGFsbCB0aGUgd2F5IHRvIHRoZSBlbmRcbiAgICB0aGlzLnRyaWdnZXIoeyB0eXBlOiAndGltZXVwZGF0ZScsIHRhcmdldDogdGhpcywgbWFudWFsbHlUcmlnZ2VyZWQ6IHRydWUgfSk7XG4gIH1cblxuICBkaXNwb3NlKCkge1xuICAgIC8vIFR1cm4gb2ZmIGFueSBtYW51YWwgcHJvZ3Jlc3Mgb3IgdGltZXVwZGF0ZSB0cmFja2luZ1xuICAgIGlmICh0aGlzLm1hbnVhbFByb2dyZXNzKSB7IHRoaXMubWFudWFsUHJvZ3Jlc3NPZmYoKTsgfVxuXG4gICAgaWYgKHRoaXMubWFudWFsVGltZVVwZGF0ZXMpIHsgdGhpcy5tYW51YWxUaW1lVXBkYXRlc09mZigpOyB9XG5cbiAgICBzdXBlci5kaXNwb3NlKCk7XG4gIH1cblxuICBzZXRDdXJyZW50VGltZSgpIHtcbiAgICAvLyBpbXByb3ZlIHRoZSBhY2N1cmFjeSBvZiBtYW51YWwgdGltZXVwZGF0ZXNcbiAgICBpZiAodGhpcy5tYW51YWxUaW1lVXBkYXRlcykgeyB0aGlzLnRyaWdnZXIoeyB0eXBlOiAndGltZXVwZGF0ZScsIHRhcmdldDogdGhpcywgbWFudWFsbHlUcmlnZ2VyZWQ6IHRydWUgfSk7IH1cbiAgfVxuXG4gIGluaXRUZXh0VHJhY2tMaXN0ZW5lcnMoKSB7XG4gICAgbGV0IHRleHRUcmFja0xpc3RDaGFuZ2VzID0gTGliLmJpbmQodGhpcywgZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLnRyaWdnZXIoJ3RleHR0cmFja2NoYW5nZScpO1xuICAgIH0pO1xuXG4gICAgbGV0IHRyYWNrcyA9IHRoaXMudGV4dFRyYWNrcygpO1xuXG4gICAgaWYgKCF0cmFja3MpIHJldHVybjtcblxuICAgIHRyYWNrcy5hZGRFdmVudExpc3RlbmVyKCdyZW1vdmV0cmFjaycsIHRleHRUcmFja0xpc3RDaGFuZ2VzKTtcbiAgICB0cmFja3MuYWRkRXZlbnRMaXN0ZW5lcignYWRkdHJhY2snLCB0ZXh0VHJhY2tMaXN0Q2hhbmdlcyk7XG5cbiAgICB0aGlzLm9uKCdkaXNwb3NlJywgTGliLmJpbmQodGhpcywgZnVuY3Rpb24oKSB7XG4gICAgICB0cmFja3MucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVtb3ZldHJhY2snLCB0ZXh0VHJhY2tMaXN0Q2hhbmdlcyk7XG4gICAgICB0cmFja3MucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWRkdHJhY2snLCB0ZXh0VHJhY2tMaXN0Q2hhbmdlcyk7XG4gICAgfSkpO1xuICB9XG5cbiAgZW11bGF0ZVRleHRUcmFja3MoKSB7XG4gICAgaWYgKCF3aW5kb3dbJ1dlYlZUVCddICYmIHRoaXMuZWwoKS5wYXJlbnROb2RlICE9IG51bGwpIHtcbiAgICAgIGxldCBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICAgIHNjcmlwdC5zcmMgPSB0aGlzLm9wdGlvbnNfWyd2dHQuanMnXSB8fCAnLi4vbm9kZV9tb2R1bGVzL3Z0dC5qcy9kaXN0L3Z0dC5qcyc7XG4gICAgICB0aGlzLmVsKCkucGFyZW50Tm9kZS5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgICAgd2luZG93WydXZWJWVFQnXSA9IHRydWU7XG4gICAgfVxuXG4gICAgbGV0IHRyYWNrcyA9IHRoaXMudGV4dFRyYWNrcygpO1xuICAgIGlmICghdHJhY2tzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IHRleHRUcmFja3NDaGFuZ2VzID0gZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdXBkYXRlRGlzcGxheSA9IExpYi5iaW5kKHRoaXMsIGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLnRyaWdnZXIoJ3RleHR0cmFja2NoYW5nZScpO1xuICAgICAgfSk7XG5cbiAgICAgIHRoaXMudHJpZ2dlcigndGV4dHRyYWNrY2hhbmdlJyk7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgdHJhY2sgPSB0aGlzW2ldO1xuICAgICAgICB0cmFjay5yZW1vdmVFdmVudExpc3RlbmVyKCdjdWVjaGFuZ2UnLCB1cGRhdGVEaXNwbGF5KTtcbiAgICAgICAgaWYgKHRyYWNrLm1vZGUgPT09ICdzaG93aW5nJykge1xuICAgICAgICAgIHRyYWNrLmFkZEV2ZW50TGlzdGVuZXIoJ2N1ZWNoYW5nZScsIHVwZGF0ZURpc3BsYXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRyYWNrcy5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB0ZXh0VHJhY2tzQ2hhbmdlcyk7XG5cbiAgICB0aGlzLm9uKCdkaXNwb3NlJywgTGliLmJpbmQodGhpcywgZnVuY3Rpb24oKSB7XG4gICAgICB0cmFja3MucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGV4dFRyYWNrc0NoYW5nZXMpO1xuICAgIH0pKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQcm92aWRlIGRlZmF1bHQgbWV0aG9kcyBmb3IgdGV4dCB0cmFja3MuXG4gICAqXG4gICAqIEh0bWw1IHRlY2ggb3ZlcnJpZGVzIHRoZXNlLlxuICAgKi9cblxuICB0ZXh0VHJhY2tzKCkge1xuICAgIHRoaXMudGV4dFRyYWNrc18gPSB0aGlzLnRleHRUcmFja3NfIHx8IG5ldyBUZXh0VHJhY2tMaXN0KCk7XG4gICAgcmV0dXJuIHRoaXMudGV4dFRyYWNrc187XG4gIH1cblxuICByZW1vdGVUZXh0VHJhY2tzKCkge1xuICAgIHRoaXMucmVtb3RlVGV4dFRyYWNrc18gPSB0aGlzLnJlbW90ZVRleHRUcmFja3NfIHx8IG5ldyBUZXh0VHJhY2tMaXN0KCk7XG4gICAgcmV0dXJuIHRoaXMucmVtb3RlVGV4dFRyYWNrc187XG4gIH1cblxuICBhZGRUZXh0VHJhY2soa2luZCwgbGFiZWwsIGxhbmd1YWdlKSB7XG4gICAgaWYgKCFraW5kKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RleHRUcmFjayBraW5kIGlzIHJlcXVpcmVkIGJ1dCB3YXMgbm90IHByb3ZpZGVkJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNyZWF0ZVRyYWNrSGVscGVyKHRoaXMsIGtpbmQsIGxhYmVsLCBsYW5ndWFnZSk7XG4gIH1cblxuICBhZGRSZW1vdGVUZXh0VHJhY2sob3B0aW9ucykge1xuICAgIGxldCB0cmFjayA9IGNyZWF0ZVRyYWNrSGVscGVyKHRoaXMsIG9wdGlvbnMua2luZCwgb3B0aW9ucy5sYWJlbCwgb3B0aW9ucy5sYW5ndWFnZSwgb3B0aW9ucyk7XG4gICAgdGhpcy5yZW1vdGVUZXh0VHJhY2tzKCkuYWRkVHJhY2tfKHRyYWNrKTtcbiAgICByZXR1cm4ge1xuICAgICAgdHJhY2s6IHRyYWNrXG4gICAgfTtcbiAgfVxuXG4gIHJlbW92ZVJlbW90ZVRleHRUcmFjayh0cmFjaykge1xuICAgIHRoaXMudGV4dFRyYWNrcygpLnJlbW92ZVRyYWNrXyh0cmFjayk7XG4gICAgdGhpcy5yZW1vdGVUZXh0VHJhY2tzKCkucmVtb3ZlVHJhY2tfKHRyYWNrKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQcm92aWRlIGEgZGVmYXVsdCBzZXRQb3N0ZXIgbWV0aG9kIGZvciB0ZWNoc1xuICAgKlxuICAgKiBQb3N0ZXIgc3VwcG9ydCBmb3IgdGVjaHMgc2hvdWxkIGJlIG9wdGlvbmFsLCBzbyB3ZSBkb24ndCB3YW50IHRlY2hzIHRvXG4gICAqIGJyZWFrIGlmIHRoZXkgZG9uJ3QgaGF2ZSBhIHdheSB0byBzZXQgYSBwb3N0ZXIuXG4gICAqL1xuICBzZXRQb3N0ZXIoKSB7fVxuXG59XG5cbi8qKlxuICogTGlzdCBvZiBhc3NvY2lhdGVkIHRleHQgdHJhY2tzXG4gKiBAdHlwZSB7QXJyYXl9XG4gKiBAcHJpdmF0ZVxuICovXG5UZWNoLnByb3RvdHlwZS50ZXh0VHJhY2tzXztcblxudmFyIGNyZWF0ZVRyYWNrSGVscGVyID0gZnVuY3Rpb24oc2VsZiwga2luZCwgbGFiZWwsIGxhbmd1YWdlLCBvcHRpb25zPXt9KSB7XG4gIGxldCB0cmFja3MgPSBzZWxmLnRleHRUcmFja3MoKTtcblxuICBvcHRpb25zLmtpbmQgPSBraW5kO1xuXG4gIGlmIChsYWJlbCkge1xuICAgIG9wdGlvbnMubGFiZWwgPSBsYWJlbDtcbiAgfVxuICBpZiAobGFuZ3VhZ2UpIHtcbiAgICBvcHRpb25zLmxhbmd1YWdlID0gbGFuZ3VhZ2U7XG4gIH1cbiAgb3B0aW9ucy50ZWNoID0gc2VsZjtcblxuICBsZXQgdHJhY2sgPSBuZXcgVGV4dFRyYWNrKG9wdGlvbnMpO1xuICB0cmFja3MuYWRkVHJhY2tfKHRyYWNrKTtcblxuICByZXR1cm4gdHJhY2s7XG59O1xuXG5UZWNoLnByb3RvdHlwZS5mZWF0dXJlc1ZvbHVtZUNvbnRyb2wgPSB0cnVlO1xuXG4vLyBSZXNpemluZyBwbHVnaW5zIHVzaW5nIHJlcXVlc3QgZnVsbHNjcmVlbiByZWxvYWRzIHRoZSBwbHVnaW5cblRlY2gucHJvdG90eXBlLmZlYXR1cmVzRnVsbHNjcmVlblJlc2l6ZSA9IGZhbHNlO1xuVGVjaC5wcm90b3R5cGUuZmVhdHVyZXNQbGF5YmFja1JhdGUgPSBmYWxzZTtcblxuLy8gT3B0aW9uYWwgZXZlbnRzIHRoYXQgd2UgY2FuIG1hbnVhbGx5IG1pbWljIHdpdGggdGltZXJzXG4vLyBjdXJyZW50bHkgbm90IHRyaWdnZXJlZCBieSB2aWRlby1qcy1zd2ZcblRlY2gucHJvdG90eXBlLmZlYXR1cmVzUHJvZ3Jlc3NFdmVudHMgPSBmYWxzZTtcblRlY2gucHJvdG90eXBlLmZlYXR1cmVzVGltZXVwZGF0ZUV2ZW50cyA9IGZhbHNlO1xuXG5UZWNoLnByb3RvdHlwZS5mZWF0dXJlc05hdGl2ZVRleHRUcmFja3MgPSBmYWxzZTtcblxuLyoqXG4gKiBBIGZ1bmN0aW9uYWwgbWl4aW4gZm9yIHRlY2hzIHRoYXQgd2FudCB0byB1c2UgdGhlIFNvdXJjZSBIYW5kbGVyIHBhdHRlcm4uXG4gKlxuICogIyMjIyMgRVhBTVBMRTpcbiAqXG4gKiAgIFRlY2gud2l0aFNvdXJjZUhhbmRsZXJzLmNhbGwoTXlUZWNoKTtcbiAqXG4gKi9cblRlY2gud2l0aFNvdXJjZUhhbmRsZXJzID0gZnVuY3Rpb24oX1RlY2gpe1xuICAvKipcbiAgICogUmVnaXN0ZXIgYSBzb3VyY2UgaGFuZGxlclxuICAgKiBTb3VyY2UgaGFuZGxlcnMgYXJlIHNjcmlwdHMgZm9yIGhhbmRsaW5nIHNwZWNpZmljIGZvcm1hdHMuXG4gICAqIFRoZSBzb3VyY2UgaGFuZGxlciBwYXR0ZXJuIGlzIHVzZWQgZm9yIGFkYXB0aXZlIGZvcm1hdHMgKEhMUywgREFTSCkgdGhhdFxuICAgKiBtYW51YWxseSBsb2FkIHZpZGVvIGRhdGEgYW5kIGZlZWQgaXQgaW50byBhIFNvdXJjZSBCdWZmZXIgKE1lZGlhIFNvdXJjZSBFeHRlbnNpb25zKVxuICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gaGFuZGxlciAgVGhlIHNvdXJjZSBoYW5kbGVyXG4gICAqIEBwYXJhbSAge0Jvb2xlYW59ICBmaXJzdCAgICBSZWdpc3RlciBpdCBiZWZvcmUgYW55IGV4aXN0aW5nIGhhbmRsZXJzXG4gICAqL1xuICAgX1RlY2gucmVnaXN0ZXJTb3VyY2VIYW5kbGVyID0gZnVuY3Rpb24oaGFuZGxlciwgaW5kZXgpe1xuICAgIGxldCBoYW5kbGVycyA9IF9UZWNoLnNvdXJjZUhhbmRsZXJzO1xuXG4gICAgaWYgKCFoYW5kbGVycykge1xuICAgICAgaGFuZGxlcnMgPSBfVGVjaC5zb3VyY2VIYW5kbGVycyA9IFtdO1xuICAgIH1cblxuICAgIGlmIChpbmRleCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBhZGQgdG8gdGhlIGVuZCBvZiB0aGUgbGlzdFxuICAgICAgaW5kZXggPSBoYW5kbGVycy5sZW5ndGg7XG4gICAgfVxuXG4gICAgaGFuZGxlcnMuc3BsaWNlKGluZGV4LCAwLCBoYW5kbGVyKTtcbiAgfTtcblxuICAvKipcbiAgICogUmV0dXJuIHRoZSBmaXJzdCBzb3VyY2UgaGFuZGxlciB0aGF0IHN1cHBvcnRzIHRoZSBzb3VyY2VcbiAgICogVE9ETzogQW5zd2VyIHF1ZXN0aW9uOiBzaG91bGQgJ3Byb2JhYmx5JyBiZSBwcmlvcml0aXplZCBvdmVyICdtYXliZSdcbiAgICogQHBhcmFtICB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3RcbiAgICogQHJldHVybnMge09iamVjdH0gICAgICAgVGhlIGZpcnN0IHNvdXJjZSBoYW5kbGVyIHRoYXQgc3VwcG9ydHMgdGhlIHNvdXJjZVxuICAgKiBAcmV0dXJucyB7bnVsbH0gICAgICAgICBOdWxsIGlmIG5vIHNvdXJjZSBoYW5kbGVyIGlzIGZvdW5kXG4gICAqL1xuICAgX1RlY2guc2VsZWN0U291cmNlSGFuZGxlciA9IGZ1bmN0aW9uKHNvdXJjZSl7XG4gICAgbGV0IGhhbmRsZXJzID0gX1RlY2guc291cmNlSGFuZGxlcnMgfHwgW107XG4gICAgbGV0IGNhbjtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaGFuZGxlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNhbiA9IGhhbmRsZXJzW2ldLmNhbkhhbmRsZVNvdXJjZShzb3VyY2UpO1xuXG4gICAgICBpZiAoY2FuKSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVyc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICAvKipcbiAgKiBDaGVjayBpZiB0aGUgdGVjaCBjYW4gc3VwcG9ydCB0aGUgZ2l2ZW4gc291cmNlXG4gICogQHBhcmFtICB7T2JqZWN0fSBzcmNPYmogIFRoZSBzb3VyY2Ugb2JqZWN0XG4gICogQHJldHVybiB7U3RyaW5nfSAgICAgICAgICdwcm9iYWJseScsICdtYXliZScsIG9yICcnIChlbXB0eSBzdHJpbmcpXG4gICovXG4gIF9UZWNoLmNhblBsYXlTb3VyY2UgPSBmdW5jdGlvbihzcmNPYmope1xuICAgIGxldCBzaCA9IF9UZWNoLnNlbGVjdFNvdXJjZUhhbmRsZXIoc3JjT2JqKTtcblxuICAgIGlmIChzaCkge1xuICAgICAgcmV0dXJuIHNoLmNhbkhhbmRsZVNvdXJjZShzcmNPYmopO1xuICAgIH1cblxuICAgIHJldHVybiAnJztcbiAgfTtcblxuICAvKipcbiAgICogQ3JlYXRlIGEgZnVuY3Rpb24gZm9yIHNldHRpbmcgdGhlIHNvdXJjZSB1c2luZyBhIHNvdXJjZSBvYmplY3RcbiAgICogYW5kIHNvdXJjZSBoYW5kbGVycy5cbiAgICogU2hvdWxkIG5ldmVyIGJlIGNhbGxlZCB1bmxlc3MgYSBzb3VyY2UgaGFuZGxlciB3YXMgZm91bmQuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgIEEgc291cmNlIG9iamVjdCB3aXRoIHNyYyBhbmQgdHlwZSBrZXlzXG4gICAqIEByZXR1cm4ge1RlY2h9IHNlbGZcbiAgICovXG4gICBfVGVjaC5wcm90b3R5cGUuc2V0U291cmNlID0gZnVuY3Rpb24oc291cmNlKXtcbiAgICBsZXQgc2ggPSBfVGVjaC5zZWxlY3RTb3VyY2VIYW5kbGVyKHNvdXJjZSk7XG5cbiAgICBpZiAoIXNoKSB7XG4gICAgICAvLyBGYWxsIGJhY2sgdG8gYSBuYXRpdmUgc291cmNlIGhhbmRlciB3aGVuIHVuc3VwcG9ydGVkIHNvdXJjZXMgYXJlXG4gICAgICAvLyBkZWxpYmVyYXRlbHkgc2V0XG4gICAgICBpZiAoX1RlY2gubmF0aXZlU291cmNlSGFuZGxlcikge1xuICAgICAgICBzaCA9IF9UZWNoLm5hdGl2ZVNvdXJjZUhhbmRsZXI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBMaWIubG9nLmVycm9yKCdObyBzb3VyY2UgaGFuZGVyIGZvdW5kIGZvciB0aGUgY3VycmVudCBzb3VyY2UuJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRGlzcG9zZSBhbnkgZXhpc3Rpbmcgc291cmNlIGhhbmRsZXJcbiAgICB0aGlzLmRpc3Bvc2VTb3VyY2VIYW5kbGVyKCk7XG4gICAgdGhpcy5vZmYoJ2Rpc3Bvc2UnLCB0aGlzLmRpc3Bvc2VTb3VyY2VIYW5kbGVyKTtcblxuICAgIHRoaXMuY3VycmVudFNvdXJjZV8gPSBzb3VyY2U7XG4gICAgdGhpcy5zb3VyY2VIYW5kbGVyXyA9IHNoLmhhbmRsZVNvdXJjZShzb3VyY2UsIHRoaXMpO1xuICAgIHRoaXMub24oJ2Rpc3Bvc2UnLCB0aGlzLmRpc3Bvc2VTb3VyY2VIYW5kbGVyKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8qKlxuICAgKiBDbGVhbiB1cCBhbnkgZXhpc3Rpbmcgc291cmNlIGhhbmRsZXJcbiAgICovXG4gICBfVGVjaC5wcm90b3R5cGUuZGlzcG9zZVNvdXJjZUhhbmRsZXIgPSBmdW5jdGlvbigpe1xuICAgIGlmICh0aGlzLnNvdXJjZUhhbmRsZXJfICYmIHRoaXMuc291cmNlSGFuZGxlcl8uZGlzcG9zZSkge1xuICAgICAgdGhpcy5zb3VyY2VIYW5kbGVyXy5kaXNwb3NlKCk7XG4gICAgfVxuICB9O1xuXG59O1xuXG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ1RlY2gnLCBUZWNoKTtcbi8vIE9sZCBuYW1lIGZvciBUZWNoXG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ01lZGlhVGVjaENvbnRyb2xsZXInLCBUZWNoKTtcbmV4cG9ydCBkZWZhdWx0IFRlY2g7XG4iLCJpbXBvcnQgKiBhcyBMaWIgZnJvbSAnLi4vbGliJztcbmltcG9ydCBkb2N1bWVudCBmcm9tICdnbG9iYWwvZG9jdW1lbnQnO1xuXG4vKlxuICogaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZW1iZWRkZWQtY29udGVudC5odG1sI3RleHR0cmFja2N1ZWxpc3RcbiAqXG4gKiBpbnRlcmZhY2UgVGV4dFRyYWNrQ3VlTGlzdCB7XG4gKiAgIHJlYWRvbmx5IGF0dHJpYnV0ZSB1bnNpZ25lZCBsb25nIGxlbmd0aDtcbiAqICAgZ2V0dGVyIFRleHRUcmFja0N1ZSAodW5zaWduZWQgbG9uZyBpbmRleCk7XG4gKiAgIFRleHRUcmFja0N1ZT8gZ2V0Q3VlQnlJZChET01TdHJpbmcgaWQpO1xuICogfTtcbiAqL1xuXG5sZXQgVGV4dFRyYWNrQ3VlTGlzdCA9IGZ1bmN0aW9uKGN1ZXMpIHtcbiAgbGV0IGxpc3QgPSB0aGlzO1xuXG4gIGlmIChMaWIuSVNfSUU4KSB7XG4gICAgbGlzdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2N1c3RvbScpO1xuXG4gICAgZm9yIChsZXQgcHJvcCBpbiBUZXh0VHJhY2tDdWVMaXN0LnByb3RvdHlwZSkge1xuICAgICAgbGlzdFtwcm9wXSA9IFRleHRUcmFja0N1ZUxpc3QucHJvdG90eXBlW3Byb3BdO1xuICAgIH1cbiAgfVxuXG4gIFRleHRUcmFja0N1ZUxpc3QucHJvdG90eXBlLnNldEN1ZXNfLmNhbGwobGlzdCwgY3Vlcyk7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGxpc3QsICdsZW5ndGgnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmxlbmd0aF87XG4gICAgfVxuICB9KTtcblxuICBpZiAoTGliLklTX0lFOCkge1xuICAgIHJldHVybiBsaXN0O1xuICB9XG59O1xuXG5UZXh0VHJhY2tDdWVMaXN0LnByb3RvdHlwZS5zZXRDdWVzXyA9IGZ1bmN0aW9uKGN1ZXMpIHtcbiAgbGV0IG9sZExlbmd0aCA9IHRoaXMubGVuZ3RoIHx8IDA7XG4gIGxldCBpID0gMDtcbiAgbGV0IGwgPSBjdWVzLmxlbmd0aDtcblxuICB0aGlzLmN1ZXNfID0gY3VlcztcbiAgdGhpcy5sZW5ndGhfID0gY3Vlcy5sZW5ndGg7XG5cbiAgbGV0IGRlZmluZVByb3AgPSBmdW5jdGlvbihpKSB7XG4gICAgaWYgKCEoJycraSBpbiB0aGlzKSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICcnICsgaSwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmN1ZXNfW2ldO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgaWYgKG9sZExlbmd0aCA8IGwpIHtcbiAgICBpID0gb2xkTGVuZ3RoO1xuXG4gICAgZm9yKDsgaSA8IGw7IGkrKykge1xuICAgICAgZGVmaW5lUHJvcC5jYWxsKHRoaXMsIGkpO1xuICAgIH1cbiAgfVxufTtcblxuVGV4dFRyYWNrQ3VlTGlzdC5wcm90b3R5cGUuZ2V0Q3VlQnlJZCA9IGZ1bmN0aW9uKGlkKSB7XG4gIGxldCByZXN1bHQgPSBudWxsO1xuICBmb3IgKGxldCBpID0gMCwgbCA9IHRoaXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgbGV0IGN1ZSA9IHRoaXNbaV07XG4gICAgaWYgKGN1ZS5pZCA9PT0gaWQpIHtcbiAgICAgIHJlc3VsdCA9IGN1ZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBUZXh0VHJhY2tDdWVMaXN0O1xuIiwiaW1wb3J0IENvbXBvbmVudCBmcm9tICcuLi9jb21wb25lbnQnO1xuaW1wb3J0IE1lbnUgZnJvbSAnLi4vbWVudS9tZW51LmpzJztcbmltcG9ydCBNZW51SXRlbSBmcm9tICcuLi9tZW51L21lbnUtaXRlbS5qcyc7XG5pbXBvcnQgTWVudUJ1dHRvbiBmcm9tICcuLi9tZW51L21lbnUtYnV0dG9uLmpzJztcbmltcG9ydCAqIGFzIExpYiBmcm9tICcuLi9saWIuanMnO1xuaW1wb3J0IGRvY3VtZW50IGZyb20gJ2dsb2JhbC9kb2N1bWVudCc7XG5pbXBvcnQgd2luZG93IGZyb20gJ2dsb2JhbC93aW5kb3cnO1xuXG5jb25zdCBkYXJrR3JheSA9ICcjMjIyJztcbmNvbnN0IGxpZ2h0R3JheSA9ICcjY2NjJztcbmNvbnN0IGZvbnRNYXAgPSB7XG4gIG1vbm9zcGFjZTogICAgICAgICAgICAgJ21vbm9zcGFjZScsXG4gIHNhbnNTZXJpZjogICAgICAgICAgICAgJ3NhbnMtc2VyaWYnLFxuICBzZXJpZjogICAgICAgICAgICAgICAgICdzZXJpZicsXG4gIG1vbm9zcGFjZVNhbnNTZXJpZjogICAgJ1wiQW5kYWxlIE1vbm9cIiwgXCJMdWNpZGEgQ29uc29sZVwiLCBtb25vc3BhY2UnLFxuICBtb25vc3BhY2VTZXJpZjogICAgICAgICdcIkNvdXJpZXIgTmV3XCIsIG1vbm9zcGFjZScsXG4gIHByb3BvcnRpb25hbFNhbnNTZXJpZjogJ3NhbnMtc2VyaWYnLFxuICBwcm9wb3J0aW9uYWxTZXJpZjogICAgICdzZXJpZicsXG4gIGNhc3VhbDogICAgICAgICAgICAgICAgJ1wiQ29taWMgU2FucyBNU1wiLCBJbXBhY3QsIGZhbnRhc3knLFxuICBzY3JpcHQ6ICAgICAgICAgICAgICAgICdcIk1vbm90eXBlIENvcnNpdmFcIiwgY3Vyc2l2ZScsXG4gIHNtYWxsY2FwczogICAgICAgICAgICAgJ1wiQW5kYWxlIE1vbm9cIiwgXCJMdWNpZGEgQ29uc29sZVwiLCBtb25vc3BhY2UsIHNhbnMtc2VyaWYnXG59O1xuXG4vKipcbiAqIFRoZSBjb21wb25lbnQgZm9yIGRpc3BsYXlpbmcgdGV4dCB0cmFjayBjdWVzXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmNsYXNzIFRleHRUcmFja0Rpc3BsYXkgZXh0ZW5kcyBDb21wb25lbnQge1xuXG4gIGNvbnN0cnVjdG9yKHBsYXllciwgb3B0aW9ucywgcmVhZHkpe1xuICAgIHN1cGVyKHBsYXllciwgb3B0aW9ucywgcmVhZHkpO1xuXG4gICAgcGxheWVyLm9uKCdsb2Fkc3RhcnQnLCBMaWIuYmluZCh0aGlzLCB0aGlzLnRvZ2dsZURpc3BsYXkpKTtcbiAgICBwbGF5ZXIub24oJ3RleHR0cmFja2NoYW5nZScsIExpYi5iaW5kKHRoaXMsIHRoaXMudG9nZ2xlRGlzcGxheSkpO1xuXG4gICAgLy8gVGhpcyB1c2VkIHRvIGJlIGNhbGxlZCBkdXJpbmcgcGxheWVyIGluaXQsIGJ1dCB3YXMgY2F1c2luZyBhbiBlcnJvclxuICAgIC8vIGlmIGEgdHJhY2sgc2hvdWxkIHNob3cgYnkgZGVmYXVsdCBhbmQgdGhlIGRpc3BsYXkgaGFkbid0IGxvYWRlZCB5ZXQuXG4gICAgLy8gU2hvdWxkIHByb2JhYmx5IGJlIG1vdmVkIHRvIGFuIGV4dGVybmFsIHRyYWNrIGxvYWRlciB3aGVuIHdlIHN1cHBvcnRcbiAgICAvLyB0cmFja3MgdGhhdCBkb24ndCBuZWVkIGEgZGlzcGxheS5cbiAgICBwbGF5ZXIucmVhZHkoTGliLmJpbmQodGhpcywgZnVuY3Rpb24oKSB7XG4gICAgICBpZiAocGxheWVyLnRlY2ggJiYgcGxheWVyLnRlY2hbJ2ZlYXR1cmVzTmF0aXZlVGV4dFRyYWNrcyddKSB7XG4gICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHBsYXllci5vbignZnVsbHNjcmVlbmNoYW5nZScsIExpYi5iaW5kKHRoaXMsIHRoaXMudXBkYXRlRGlzcGxheSkpO1xuXG4gICAgICBsZXQgdHJhY2tzID0gcGxheWVyLm9wdGlvbnNfWyd0cmFja3MnXSB8fCBbXTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCB0cmFjayA9IHRyYWNrc1tpXTtcbiAgICAgICAgdGhpcy5wbGF5ZXJfLmFkZFJlbW90ZVRleHRUcmFjayh0cmFjayk7XG4gICAgICB9XG4gICAgfSkpO1xuICB9XG5cbiAgdG9nZ2xlRGlzcGxheSgpIHtcbiAgICBpZiAodGhpcy5wbGF5ZXJfLnRlY2ggJiYgdGhpcy5wbGF5ZXJfLnRlY2hbJ2ZlYXR1cmVzTmF0aXZlVGV4dFRyYWNrcyddKSB7XG4gICAgICB0aGlzLmhpZGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zaG93KCk7XG4gICAgfVxuICB9XG5cbiAgY3JlYXRlRWwoKSB7XG4gICAgcmV0dXJuIHN1cGVyLmNyZWF0ZUVsKCdkaXYnLCB7XG4gICAgICBjbGFzc05hbWU6ICd2anMtdGV4dC10cmFjay1kaXNwbGF5J1xuICAgIH0pO1xuICB9XG5cbiAgY2xlYXJEaXNwbGF5KCkge1xuICAgIGlmICh0eXBlb2Ygd2luZG93WydXZWJWVFQnXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgd2luZG93WydXZWJWVFQnXVsncHJvY2Vzc0N1ZXMnXSh3aW5kb3csIFtdLCB0aGlzLmVsXyk7XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlRGlzcGxheSgpIHtcbiAgICB2YXIgdHJhY2tzID0gdGhpcy5wbGF5ZXJfLnRleHRUcmFja3MoKTtcblxuICAgIHRoaXMuY2xlYXJEaXNwbGF5KCk7XG5cbiAgICBpZiAoIXRyYWNrcykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAobGV0IGk9MDsgaSA8IHRyYWNrcy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IHRyYWNrID0gdHJhY2tzW2ldO1xuICAgICAgaWYgKHRyYWNrWydtb2RlJ10gPT09ICdzaG93aW5nJykge1xuICAgICAgICB0aGlzLnVwZGF0ZUZvclRyYWNrKHRyYWNrKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB1cGRhdGVGb3JUcmFjayh0cmFjaykge1xuICAgIGlmICh0eXBlb2Ygd2luZG93WydXZWJWVFQnXSAhPT0gJ2Z1bmN0aW9uJyB8fCAhdHJhY2tbJ2FjdGl2ZUN1ZXMnXSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBvdmVycmlkZXMgPSB0aGlzLnBsYXllcl9bJ3RleHRUcmFja1NldHRpbmdzJ10uZ2V0VmFsdWVzKCk7XG5cbiAgICBsZXQgY3VlcyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHJhY2tbJ2FjdGl2ZUN1ZXMnXS5sZW5ndGg7IGkrKykge1xuICAgICAgY3Vlcy5wdXNoKHRyYWNrWydhY3RpdmVDdWVzJ11baV0pO1xuICAgIH1cblxuICAgIHdpbmRvd1snV2ViVlRUJ11bJ3Byb2Nlc3NDdWVzJ10od2luZG93LCB0cmFja1snYWN0aXZlQ3VlcyddLCB0aGlzLmVsXyk7XG5cbiAgICBsZXQgaSA9IGN1ZXMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGxldCBjdWVEaXYgPSBjdWVzW2ldLmRpc3BsYXlTdGF0ZTtcbiAgICAgIGlmIChvdmVycmlkZXMuY29sb3IpIHtcbiAgICAgICAgY3VlRGl2LmZpcnN0Q2hpbGQuc3R5bGUuY29sb3IgPSBvdmVycmlkZXMuY29sb3I7XG4gICAgICB9XG4gICAgICBpZiAob3ZlcnJpZGVzLnRleHRPcGFjaXR5KSB7XG4gICAgICAgIHRyeVVwZGF0ZVN0eWxlKGN1ZURpdi5maXJzdENoaWxkLFxuICAgICAgICAgICAgICAgICAgICAgICAnY29sb3InLFxuICAgICAgICAgICAgICAgICAgICAgICBjb25zdHJ1Y3RDb2xvcihvdmVycmlkZXMuY29sb3IgfHwgJyNmZmYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVycmlkZXMudGV4dE9wYWNpdHkpKTtcbiAgICAgIH1cbiAgICAgIGlmIChvdmVycmlkZXMuYmFja2dyb3VuZENvbG9yKSB7XG4gICAgICAgIGN1ZURpdi5maXJzdENoaWxkLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IG92ZXJyaWRlcy5iYWNrZ3JvdW5kQ29sb3I7XG4gICAgICB9XG4gICAgICBpZiAob3ZlcnJpZGVzLmJhY2tncm91bmRPcGFjaXR5KSB7XG4gICAgICAgIHRyeVVwZGF0ZVN0eWxlKGN1ZURpdi5maXJzdENoaWxkLFxuICAgICAgICAgICAgICAgICAgICAgICAnYmFja2dyb3VuZENvbG9yJyxcbiAgICAgICAgICAgICAgICAgICAgICAgY29uc3RydWN0Q29sb3Iob3ZlcnJpZGVzLmJhY2tncm91bmRDb2xvciB8fCAnIzAwMCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJyaWRlcy5iYWNrZ3JvdW5kT3BhY2l0eSkpO1xuICAgICAgfVxuICAgICAgaWYgKG92ZXJyaWRlcy53aW5kb3dDb2xvcikge1xuICAgICAgICBpZiAob3ZlcnJpZGVzLndpbmRvd09wYWNpdHkpIHtcbiAgICAgICAgICB0cnlVcGRhdGVTdHlsZShjdWVEaXYsXG4gICAgICAgICAgICAgICAgICAgICAgICAgJ2JhY2tncm91bmRDb2xvcicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgY29uc3RydWN0Q29sb3Iob3ZlcnJpZGVzLndpbmRvd0NvbG9yLCBvdmVycmlkZXMud2luZG93T3BhY2l0eSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGN1ZURpdi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBvdmVycmlkZXMud2luZG93Q29sb3I7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChvdmVycmlkZXMuZWRnZVN0eWxlKSB7XG4gICAgICAgIGlmIChvdmVycmlkZXMuZWRnZVN0eWxlID09PSAnZHJvcHNoYWRvdycpIHtcbiAgICAgICAgICBjdWVEaXYuZmlyc3RDaGlsZC5zdHlsZS50ZXh0U2hhZG93ID0gYDJweCAycHggM3B4ICR7ZGFya0dyYXl9LCAycHggMnB4IDRweCAke2RhcmtHcmF5fSwgMnB4IDJweCA1cHggJHtkYXJrR3JheX1gO1xuICAgICAgICB9IGVsc2UgaWYgKG92ZXJyaWRlcy5lZGdlU3R5bGUgPT09ICdyYWlzZWQnKSB7XG4gICAgICAgICAgY3VlRGl2LmZpcnN0Q2hpbGQuc3R5bGUudGV4dFNoYWRvdyA9IGAxcHggMXB4ICR7ZGFya0dyYXl9LCAycHggMnB4ICR7ZGFya0dyYXl9LCAzcHggM3B4ICR7ZGFya0dyYXl9YDtcbiAgICAgICAgfSBlbHNlIGlmIChvdmVycmlkZXMuZWRnZVN0eWxlID09PSAnZGVwcmVzc2VkJykge1xuICAgICAgICAgIGN1ZURpdi5maXJzdENoaWxkLnN0eWxlLnRleHRTaGFkb3cgPSBgMXB4IDFweCAke2xpZ2h0R3JheX0sIDAgMXB4ICR7bGlnaHRHcmF5fSwgLTFweCAtMXB4ICR7ZGFya0dyYXl9LCAwIC0xcHggJHtkYXJrR3JheX1gO1xuICAgICAgICB9IGVsc2UgaWYgKG92ZXJyaWRlcy5lZGdlU3R5bGUgPT09ICd1bmlmb3JtJykge1xuICAgICAgICAgIGN1ZURpdi5maXJzdENoaWxkLnN0eWxlLnRleHRTaGFkb3cgPSBgMCAwIDRweCAke2RhcmtHcmF5fSwgMCAwIDRweCAke2RhcmtHcmF5fSwgMCAwIDRweCAke2RhcmtHcmF5fSwgMCAwIDRweCAke2RhcmtHcmF5fWA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChvdmVycmlkZXMuZm9udFBlcmNlbnQgJiYgb3ZlcnJpZGVzLmZvbnRQZXJjZW50ICE9PSAxKSB7XG4gICAgICAgIGNvbnN0IGZvbnRTaXplID0gd2luZG93LnBhcnNlRmxvYXQoY3VlRGl2LnN0eWxlLmZvbnRTaXplKTtcbiAgICAgICAgY3VlRGl2LnN0eWxlLmZvbnRTaXplID0gKGZvbnRTaXplICogb3ZlcnJpZGVzLmZvbnRQZXJjZW50KSArICdweCc7XG4gICAgICAgIGN1ZURpdi5zdHlsZS5oZWlnaHQgPSAnYXV0byc7XG4gICAgICAgIGN1ZURpdi5zdHlsZS50b3AgPSAnYXV0byc7XG4gICAgICAgIGN1ZURpdi5zdHlsZS5ib3R0b20gPSAnMnB4JztcbiAgICAgIH1cbiAgICAgIGlmIChvdmVycmlkZXMuZm9udEZhbWlseSAmJiBvdmVycmlkZXMuZm9udEZhbWlseSAhPT0gJ2RlZmF1bHQnKSB7XG4gICAgICAgIGlmIChvdmVycmlkZXMuZm9udEZhbWlseSA9PT0gJ3NtYWxsLWNhcHMnKSB7XG4gICAgICAgICAgY3VlRGl2LmZpcnN0Q2hpbGQuc3R5bGUuZm9udFZhcmlhbnQgPSAnc21hbGwtY2Fwcyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY3VlRGl2LmZpcnN0Q2hpbGQuc3R5bGUuZm9udEZhbWlseSA9IGZvbnRNYXBbb3ZlcnJpZGVzLmZvbnRGYW1pbHldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbn1cblxuLy8gQWRkIGN1ZSBIVE1MIHRvIGRpc3BsYXlcbmZ1bmN0aW9uIGNvbnN0cnVjdENvbG9yKGNvbG9yLCBvcGFjaXR5KSB7XG4gIHJldHVybiAncmdiYSgnICtcbiAgICAvLyBjb2xvciBsb29rcyBsaWtlIFwiI2YwZVwiXG4gICAgcGFyc2VJbnQoY29sb3JbMV0gKyBjb2xvclsxXSwgMTYpICsgJywnICtcbiAgICBwYXJzZUludChjb2xvclsyXSArIGNvbG9yWzJdLCAxNikgKyAnLCcgK1xuICAgIHBhcnNlSW50KGNvbG9yWzNdICsgY29sb3JbM10sIDE2KSArICcsJyArXG4gICAgb3BhY2l0eSArICcpJztcbn1cblxuZnVuY3Rpb24gdHJ5VXBkYXRlU3R5bGUoZWwsIHN0eWxlLCBydWxlKSB7XG4gIC8vIHNvbWUgc3R5bGUgY2hhbmdlcyB3aWxsIHRocm93IGFuIGVycm9yLCBwYXJ0aWN1bGFybHkgaW4gSUU4LiBUaG9zZSBzaG91bGQgYmUgbm9vcHMuXG4gIHRyeSB7XG4gICAgZWwuc3R5bGVbc3R5bGVdID0gcnVsZTtcbiAgfSBjYXRjaCAoZSkge31cbn1cblxuQ29tcG9uZW50LnJlZ2lzdGVyQ29tcG9uZW50KCdUZXh0VHJhY2tEaXNwbGF5JywgVGV4dFRyYWNrRGlzcGxheSk7XG5leHBvcnQgZGVmYXVsdCBUZXh0VHJhY2tEaXNwbGF5O1xuIiwiLypcbiAqIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2VtYmVkZGVkLWNvbnRlbnQuaHRtbCN0ZXh0dHJhY2ttb2RlXG4gKlxuICogZW51bSBUZXh0VHJhY2tNb2RlIHsgXCJkaXNhYmxlZFwiLCAgXCJoaWRkZW5cIiwgIFwic2hvd2luZ1wiIH07XG4gKi9cbnZhciBUZXh0VHJhY2tNb2RlID0ge1xuICAnZGlzYWJsZWQnOiAnZGlzYWJsZWQnLFxuICAnaGlkZGVuJzogJ2hpZGRlbicsXG4gICdzaG93aW5nJzogJ3Nob3dpbmcnXG59O1xuXG4vKlxuICogaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZW1iZWRkZWQtY29udGVudC5odG1sI3RleHR0cmFja2tpbmRcbiAqXG4gKiBlbnVtIFRleHRUcmFja0tpbmQgeyBcInN1YnRpdGxlc1wiLCAgXCJjYXB0aW9uc1wiLCAgXCJkZXNjcmlwdGlvbnNcIiwgIFwiY2hhcHRlcnNcIiwgIFwibWV0YWRhdGFcIiB9O1xuICovXG52YXIgVGV4dFRyYWNrS2luZCA9IHtcbiAgJ3N1YnRpdGxlcyc6ICdzdWJ0aXRsZXMnLFxuICAnY2FwdGlvbnMnOiAnY2FwdGlvbnMnLFxuICAnZGVzY3JpcHRpb25zJzogJ2Rlc2NyaXB0aW9ucycsXG4gICdjaGFwdGVycyc6ICdjaGFwdGVycycsXG4gICdtZXRhZGF0YSc6ICdtZXRhZGF0YSdcbn07XG5cbmV4cG9ydCB7IFRleHRUcmFja01vZGUsIFRleHRUcmFja0tpbmQgfTtcbiIsImltcG9ydCBFdmVudEVtaXR0ZXIgZnJvbSAnLi4vZXZlbnQtZW1pdHRlcic7XG5pbXBvcnQgKiBhcyBMaWIgZnJvbSAnLi4vbGliJztcbmltcG9ydCBkb2N1bWVudCBmcm9tICdnbG9iYWwvZG9jdW1lbnQnO1xuXG4vKlxuICogaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZW1iZWRkZWQtY29udGVudC5odG1sI3RleHR0cmFja2xpc3RcbiAqXG4gKiBpbnRlcmZhY2UgVGV4dFRyYWNrTGlzdCA6IEV2ZW50VGFyZ2V0IHtcbiAqICAgcmVhZG9ubHkgYXR0cmlidXRlIHVuc2lnbmVkIGxvbmcgbGVuZ3RoO1xuICogICBnZXR0ZXIgVGV4dFRyYWNrICh1bnNpZ25lZCBsb25nIGluZGV4KTtcbiAqICAgVGV4dFRyYWNrPyBnZXRUcmFja0J5SWQoRE9NU3RyaW5nIGlkKTtcbiAqXG4gKiAgIGF0dHJpYnV0ZSBFdmVudEhhbmRsZXIgb25jaGFuZ2U7XG4gKiAgIGF0dHJpYnV0ZSBFdmVudEhhbmRsZXIgb25hZGR0cmFjaztcbiAqICAgYXR0cmlidXRlIEV2ZW50SGFuZGxlciBvbnJlbW92ZXRyYWNrO1xuICogfTtcbiAqL1xubGV0IFRleHRUcmFja0xpc3QgPSBmdW5jdGlvbih0cmFja3MpIHtcbiAgbGV0IGxpc3QgPSB0aGlzO1xuXG4gIGlmIChMaWIuSVNfSUU4KSB7XG4gICAgbGlzdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2N1c3RvbScpO1xuXG4gICAgZm9yIChsZXQgcHJvcCBpbiBUZXh0VHJhY2tMaXN0LnByb3RvdHlwZSkge1xuICAgICAgbGlzdFtwcm9wXSA9IFRleHRUcmFja0xpc3QucHJvdG90eXBlW3Byb3BdO1xuICAgIH1cbiAgfVxuXG4gIHRyYWNrcyA9IHRyYWNrcyB8fCBbXTtcbiAgbGlzdC50cmFja3NfID0gW107XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGxpc3QsICdsZW5ndGgnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnRyYWNrc18ubGVuZ3RoO1xuICAgIH1cbiAgfSk7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0cmFja3MubGVuZ3RoOyBpKyspIHtcbiAgICBsaXN0LmFkZFRyYWNrXyh0cmFja3NbaV0pO1xuICB9XG5cbiAgaWYgKExpYi5JU19JRTgpIHtcbiAgICByZXR1cm4gbGlzdDtcbiAgfVxufTtcblxuVGV4dFRyYWNrTGlzdC5wcm90b3R5cGUgPSBMaWIub2JqLmNyZWF0ZShFdmVudEVtaXR0ZXIucHJvdG90eXBlKTtcblRleHRUcmFja0xpc3QucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVGV4dFRyYWNrTGlzdDtcblxuLypcbiAqIGNoYW5nZSAtIE9uZSBvciBtb3JlIHRyYWNrcyBpbiB0aGUgdHJhY2sgbGlzdCBoYXZlIGJlZW4gZW5hYmxlZCBvciBkaXNhYmxlZC5cbiAqIGFkZHRyYWNrIC0gQSB0cmFjayBoYXMgYmVlbiBhZGRlZCB0byB0aGUgdHJhY2sgbGlzdC5cbiAqIHJlbW92ZXRyYWNrIC0gQSB0cmFjayBoYXMgYmVlbiByZW1vdmVkIGZyb20gdGhlIHRyYWNrIGxpc3QuXG4qL1xuVGV4dFRyYWNrTGlzdC5wcm90b3R5cGUuYWxsb3dlZEV2ZW50c18gPSB7XG4gICdjaGFuZ2UnOiAnY2hhbmdlJyxcbiAgJ2FkZHRyYWNrJzogJ2FkZHRyYWNrJyxcbiAgJ3JlbW92ZXRyYWNrJzogJ3JlbW92ZXRyYWNrJ1xufTtcblxuLy8gZW11bGF0ZSBhdHRyaWJ1dGUgRXZlbnRIYW5kbGVyIHN1cHBvcnQgdG8gYWxsb3cgZm9yIGZlYXR1cmUgZGV0ZWN0aW9uXG5mb3IgKGxldCBldmVudCBpbiBUZXh0VHJhY2tMaXN0LnByb3RvdHlwZS5hbGxvd2VkRXZlbnRzXykge1xuICBUZXh0VHJhY2tMaXN0LnByb3RvdHlwZVsnb24nICsgZXZlbnRdID0gbnVsbDtcbn1cblxuVGV4dFRyYWNrTGlzdC5wcm90b3R5cGUuYWRkVHJhY2tfID0gZnVuY3Rpb24odHJhY2spIHtcbiAgbGV0IGluZGV4ID0gdGhpcy50cmFja3NfLmxlbmd0aDtcbiAgaWYgKCEoJycraW5kZXggaW4gdGhpcykpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgaW5kZXgsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRyYWNrc19baW5kZXhdO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgdHJhY2suYWRkRXZlbnRMaXN0ZW5lcignbW9kZWNoYW5nZScsIExpYi5iaW5kKHRoaXMsIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMudHJpZ2dlcignY2hhbmdlJyk7XG4gIH0pKTtcbiAgdGhpcy50cmFja3NfLnB1c2godHJhY2spO1xuXG4gIHRoaXMudHJpZ2dlcih7XG4gICAgdHlwZTogJ2FkZHRyYWNrJyxcbiAgICB0cmFjazogdHJhY2tcbiAgfSk7XG59O1xuXG5UZXh0VHJhY2tMaXN0LnByb3RvdHlwZS5yZW1vdmVUcmFja18gPSBmdW5jdGlvbihydHJhY2spIHtcbiAgbGV0IHJlc3VsdCA9IG51bGw7XG4gIGxldCB0cmFjaztcblxuICBmb3IgKGxldCBpID0gMCwgbCA9IHRoaXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdHJhY2sgPSB0aGlzW2ldO1xuICAgIGlmICh0cmFjayA9PT0gcnRyYWNrKSB7XG4gICAgICB0aGlzLnRyYWNrc18uc3BsaWNlKGksIDEpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgdGhpcy50cmlnZ2VyKHtcbiAgICB0eXBlOiAncmVtb3ZldHJhY2snLFxuICAgIHRyYWNrOiB0cmFja1xuICB9KTtcbn07XG5cblRleHRUcmFja0xpc3QucHJvdG90eXBlLmdldFRyYWNrQnlJZCA9IGZ1bmN0aW9uKGlkKSB7XG4gIGxldCByZXN1bHQgPSBudWxsO1xuXG4gIGZvciAobGV0IGkgPSAwLCBsID0gdGhpcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBsZXQgdHJhY2sgPSB0aGlzW2ldO1xuICAgIGlmICh0cmFjay5pZCA9PT0gaWQpIHtcbiAgICAgIHJlc3VsdCA9IHRyYWNrO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFRleHRUcmFja0xpc3Q7XG4iLCJpbXBvcnQgQ29tcG9uZW50IGZyb20gJy4uL2NvbXBvbmVudCc7XG5pbXBvcnQgKiBhcyBMaWIgZnJvbSAnLi4vbGliJztcbmltcG9ydCAqIGFzIEV2ZW50cyBmcm9tICcuLi9ldmVudHMnO1xuaW1wb3J0IHNhZmVQYXJzZVR1cGxlIGZyb20gJ3NhZmUtanNvbi1wYXJzZS90dXBsZSc7XG5pbXBvcnQgd2luZG93IGZyb20gJ2dsb2JhbC93aW5kb3cnO1xuXG5jbGFzcyBUZXh0VHJhY2tTZXR0aW5ncyBleHRlbmRzIENvbXBvbmVudCB7XG5cbiAgY29uc3RydWN0b3IocGxheWVyLCBvcHRpb25zKSB7XG4gICAgc3VwZXIocGxheWVyLCBvcHRpb25zKTtcbiAgICB0aGlzLmhpZGUoKTtcblxuICAgIEV2ZW50cy5vbih0aGlzLmVsKCkucXVlcnlTZWxlY3RvcignLnZqcy1kb25lLWJ1dHRvbicpLCAnY2xpY2snLCBMaWIuYmluZCh0aGlzLCBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuc2F2ZVNldHRpbmdzKCk7XG4gICAgICB0aGlzLmhpZGUoKTtcbiAgICB9KSk7XG5cbiAgICBFdmVudHMub24odGhpcy5lbCgpLnF1ZXJ5U2VsZWN0b3IoJy52anMtZGVmYXVsdC1idXR0b24nKSwgJ2NsaWNrJywgTGliLmJpbmQodGhpcywgZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmVsKCkucXVlcnlTZWxlY3RvcignLnZqcy1mZy1jb2xvciA+IHNlbGVjdCcpLnNlbGVjdGVkSW5kZXggPSAwO1xuICAgICAgdGhpcy5lbCgpLnF1ZXJ5U2VsZWN0b3IoJy52anMtYmctY29sb3IgPiBzZWxlY3QnKS5zZWxlY3RlZEluZGV4ID0gMDtcbiAgICAgIHRoaXMuZWwoKS5xdWVyeVNlbGVjdG9yKCcud2luZG93LWNvbG9yID4gc2VsZWN0Jykuc2VsZWN0ZWRJbmRleCA9IDA7XG4gICAgICB0aGlzLmVsKCkucXVlcnlTZWxlY3RvcignLnZqcy10ZXh0LW9wYWNpdHkgPiBzZWxlY3QnKS5zZWxlY3RlZEluZGV4ID0gMDtcbiAgICAgIHRoaXMuZWwoKS5xdWVyeVNlbGVjdG9yKCcudmpzLWJnLW9wYWNpdHkgPiBzZWxlY3QnKS5zZWxlY3RlZEluZGV4ID0gMDtcbiAgICAgIHRoaXMuZWwoKS5xdWVyeVNlbGVjdG9yKCcudmpzLXdpbmRvdy1vcGFjaXR5ID4gc2VsZWN0Jykuc2VsZWN0ZWRJbmRleCA9IDA7XG4gICAgICB0aGlzLmVsKCkucXVlcnlTZWxlY3RvcignLnZqcy1lZGdlLXN0eWxlIHNlbGVjdCcpLnNlbGVjdGVkSW5kZXggPSAwO1xuICAgICAgdGhpcy5lbCgpLnF1ZXJ5U2VsZWN0b3IoJy52anMtZm9udC1mYW1pbHkgc2VsZWN0Jykuc2VsZWN0ZWRJbmRleCA9IDA7XG4gICAgICB0aGlzLmVsKCkucXVlcnlTZWxlY3RvcignLnZqcy1mb250LXBlcmNlbnQgc2VsZWN0Jykuc2VsZWN0ZWRJbmRleCA9IDI7XG4gICAgICB0aGlzLnVwZGF0ZURpc3BsYXkoKTtcbiAgICB9KSk7XG5cbiAgICBFdmVudHMub24odGhpcy5lbCgpLnF1ZXJ5U2VsZWN0b3IoJy52anMtZmctY29sb3IgPiBzZWxlY3QnKSwgJ2NoYW5nZScsIExpYi5iaW5kKHRoaXMsIHRoaXMudXBkYXRlRGlzcGxheSkpO1xuICAgIEV2ZW50cy5vbih0aGlzLmVsKCkucXVlcnlTZWxlY3RvcignLnZqcy1iZy1jb2xvciA+IHNlbGVjdCcpLCAnY2hhbmdlJywgTGliLmJpbmQodGhpcywgdGhpcy51cGRhdGVEaXNwbGF5KSk7XG4gICAgRXZlbnRzLm9uKHRoaXMuZWwoKS5xdWVyeVNlbGVjdG9yKCcud2luZG93LWNvbG9yID4gc2VsZWN0JyksICdjaGFuZ2UnLCBMaWIuYmluZCh0aGlzLCB0aGlzLnVwZGF0ZURpc3BsYXkpKTtcbiAgICBFdmVudHMub24odGhpcy5lbCgpLnF1ZXJ5U2VsZWN0b3IoJy52anMtdGV4dC1vcGFjaXR5ID4gc2VsZWN0JyksICdjaGFuZ2UnLCBMaWIuYmluZCh0aGlzLCB0aGlzLnVwZGF0ZURpc3BsYXkpKTtcbiAgICBFdmVudHMub24odGhpcy5lbCgpLnF1ZXJ5U2VsZWN0b3IoJy52anMtYmctb3BhY2l0eSA+IHNlbGVjdCcpLCAnY2hhbmdlJywgTGliLmJpbmQodGhpcywgdGhpcy51cGRhdGVEaXNwbGF5KSk7XG4gICAgRXZlbnRzLm9uKHRoaXMuZWwoKS5xdWVyeVNlbGVjdG9yKCcudmpzLXdpbmRvdy1vcGFjaXR5ID4gc2VsZWN0JyksICdjaGFuZ2UnLCBMaWIuYmluZCh0aGlzLCB0aGlzLnVwZGF0ZURpc3BsYXkpKTtcbiAgICBFdmVudHMub24odGhpcy5lbCgpLnF1ZXJ5U2VsZWN0b3IoJy52anMtZm9udC1wZXJjZW50IHNlbGVjdCcpLCAnY2hhbmdlJywgTGliLmJpbmQodGhpcywgdGhpcy51cGRhdGVEaXNwbGF5KSk7XG4gICAgRXZlbnRzLm9uKHRoaXMuZWwoKS5xdWVyeVNlbGVjdG9yKCcudmpzLWVkZ2Utc3R5bGUgc2VsZWN0JyksICdjaGFuZ2UnLCBMaWIuYmluZCh0aGlzLCB0aGlzLnVwZGF0ZURpc3BsYXkpKTtcbiAgICBFdmVudHMub24odGhpcy5lbCgpLnF1ZXJ5U2VsZWN0b3IoJy52anMtZm9udC1mYW1pbHkgc2VsZWN0JyksICdjaGFuZ2UnLCBMaWIuYmluZCh0aGlzLCB0aGlzLnVwZGF0ZURpc3BsYXkpKTtcblxuICAgIGlmIChwbGF5ZXIub3B0aW9ucygpWydwZXJzaXN0VGV4dFRyYWNrU2V0dGluZ3MnXSkge1xuICAgICAgdGhpcy5yZXN0b3JlU2V0dGluZ3MoKTtcbiAgICB9XG4gIH1cblxuICBjcmVhdGVFbCgpIHtcbiAgICByZXR1cm4gc3VwZXIuY3JlYXRlRWwoJ2RpdicsIHtcbiAgICAgIGNsYXNzTmFtZTogJ3Zqcy1jYXB0aW9uLXNldHRpbmdzIHZqcy1tb2RhbC1vdmVybGF5JyxcbiAgICAgIGlubmVySFRNTDogY2FwdGlvbk9wdGlvbnNNZW51VGVtcGxhdGUoKVxuICAgIH0pO1xuICB9XG5cbiAgZ2V0VmFsdWVzKCkge1xuICAgIGNvbnN0IGVsID0gdGhpcy5lbCgpO1xuXG4gICAgY29uc3QgdGV4dEVkZ2UgPSBnZXRTZWxlY3RlZE9wdGlvblZhbHVlKGVsLnF1ZXJ5U2VsZWN0b3IoJy52anMtZWRnZS1zdHlsZSBzZWxlY3QnKSk7XG4gICAgY29uc3QgZm9udEZhbWlseSA9IGdldFNlbGVjdGVkT3B0aW9uVmFsdWUoZWwucXVlcnlTZWxlY3RvcignLnZqcy1mb250LWZhbWlseSBzZWxlY3QnKSk7XG4gICAgY29uc3QgZmdDb2xvciA9IGdldFNlbGVjdGVkT3B0aW9uVmFsdWUoZWwucXVlcnlTZWxlY3RvcignLnZqcy1mZy1jb2xvciA+IHNlbGVjdCcpKTtcbiAgICBjb25zdCB0ZXh0T3BhY2l0eSA9IGdldFNlbGVjdGVkT3B0aW9uVmFsdWUoZWwucXVlcnlTZWxlY3RvcignLnZqcy10ZXh0LW9wYWNpdHkgPiBzZWxlY3QnKSk7XG4gICAgY29uc3QgYmdDb2xvciA9IGdldFNlbGVjdGVkT3B0aW9uVmFsdWUoZWwucXVlcnlTZWxlY3RvcignLnZqcy1iZy1jb2xvciA+IHNlbGVjdCcpKTtcbiAgICBjb25zdCBiZ09wYWNpdHkgPSBnZXRTZWxlY3RlZE9wdGlvblZhbHVlKGVsLnF1ZXJ5U2VsZWN0b3IoJy52anMtYmctb3BhY2l0eSA+IHNlbGVjdCcpKTtcbiAgICBjb25zdCB3aW5kb3dDb2xvciA9IGdldFNlbGVjdGVkT3B0aW9uVmFsdWUoZWwucXVlcnlTZWxlY3RvcignLndpbmRvdy1jb2xvciA+IHNlbGVjdCcpKTtcbiAgICBjb25zdCB3aW5kb3dPcGFjaXR5ID0gZ2V0U2VsZWN0ZWRPcHRpb25WYWx1ZShlbC5xdWVyeVNlbGVjdG9yKCcudmpzLXdpbmRvdy1vcGFjaXR5ID4gc2VsZWN0JykpO1xuICAgIGNvbnN0IGZvbnRQZXJjZW50ID0gd2luZG93WydwYXJzZUZsb2F0J10oZ2V0U2VsZWN0ZWRPcHRpb25WYWx1ZShlbC5xdWVyeVNlbGVjdG9yKCcudmpzLWZvbnQtcGVyY2VudCA+IHNlbGVjdCcpKSk7XG5cbiAgICBsZXQgcmVzdWx0ID0ge1xuICAgICAgJ2JhY2tncm91bmRPcGFjaXR5JzogYmdPcGFjaXR5LFxuICAgICAgJ3RleHRPcGFjaXR5JzogdGV4dE9wYWNpdHksXG4gICAgICAnd2luZG93T3BhY2l0eSc6IHdpbmRvd09wYWNpdHksXG4gICAgICAnZWRnZVN0eWxlJzogdGV4dEVkZ2UsXG4gICAgICAnZm9udEZhbWlseSc6IGZvbnRGYW1pbHksXG4gICAgICAnY29sb3InOiBmZ0NvbG9yLFxuICAgICAgJ2JhY2tncm91bmRDb2xvcic6IGJnQ29sb3IsXG4gICAgICAnd2luZG93Q29sb3InOiB3aW5kb3dDb2xvcixcbiAgICAgICdmb250UGVyY2VudCc6IGZvbnRQZXJjZW50XG4gICAgfTtcbiAgICBmb3IgKGxldCBuYW1lIGluIHJlc3VsdCkge1xuICAgICAgaWYgKHJlc3VsdFtuYW1lXSA9PT0gJycgfHwgcmVzdWx0W25hbWVdID09PSAnbm9uZScgfHwgKG5hbWUgPT09ICdmb250UGVyY2VudCcgJiYgcmVzdWx0W25hbWVdID09PSAxLjAwKSkge1xuICAgICAgICBkZWxldGUgcmVzdWx0W25hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgc2V0VmFsdWVzKHZhbHVlcykge1xuICAgIGNvbnN0IGVsID0gdGhpcy5lbCgpO1xuXG4gICAgc2V0U2VsZWN0ZWRPcHRpb24oZWwucXVlcnlTZWxlY3RvcignLnZqcy1lZGdlLXN0eWxlIHNlbGVjdCcpLCB2YWx1ZXMuZWRnZVN0eWxlKTtcbiAgICBzZXRTZWxlY3RlZE9wdGlvbihlbC5xdWVyeVNlbGVjdG9yKCcudmpzLWZvbnQtZmFtaWx5IHNlbGVjdCcpLCB2YWx1ZXMuZm9udEZhbWlseSk7XG4gICAgc2V0U2VsZWN0ZWRPcHRpb24oZWwucXVlcnlTZWxlY3RvcignLnZqcy1mZy1jb2xvciA+IHNlbGVjdCcpLCB2YWx1ZXMuY29sb3IpO1xuICAgIHNldFNlbGVjdGVkT3B0aW9uKGVsLnF1ZXJ5U2VsZWN0b3IoJy52anMtdGV4dC1vcGFjaXR5ID4gc2VsZWN0JyksIHZhbHVlcy50ZXh0T3BhY2l0eSk7XG4gICAgc2V0U2VsZWN0ZWRPcHRpb24oZWwucXVlcnlTZWxlY3RvcignLnZqcy1iZy1jb2xvciA+IHNlbGVjdCcpLCB2YWx1ZXMuYmFja2dyb3VuZENvbG9yKTtcbiAgICBzZXRTZWxlY3RlZE9wdGlvbihlbC5xdWVyeVNlbGVjdG9yKCcudmpzLWJnLW9wYWNpdHkgPiBzZWxlY3QnKSwgdmFsdWVzLmJhY2tncm91bmRPcGFjaXR5KTtcbiAgICBzZXRTZWxlY3RlZE9wdGlvbihlbC5xdWVyeVNlbGVjdG9yKCcud2luZG93LWNvbG9yID4gc2VsZWN0JyksIHZhbHVlcy53aW5kb3dDb2xvcik7XG4gICAgc2V0U2VsZWN0ZWRPcHRpb24oZWwucXVlcnlTZWxlY3RvcignLnZqcy13aW5kb3ctb3BhY2l0eSA+IHNlbGVjdCcpLCB2YWx1ZXMud2luZG93T3BhY2l0eSk7XG5cbiAgICBsZXQgZm9udFBlcmNlbnQgPSB2YWx1ZXMuZm9udFBlcmNlbnQ7XG5cbiAgICBpZiAoZm9udFBlcmNlbnQpIHtcbiAgICAgIGZvbnRQZXJjZW50ID0gZm9udFBlcmNlbnQudG9GaXhlZCgyKTtcbiAgICB9XG5cbiAgICBzZXRTZWxlY3RlZE9wdGlvbihlbC5xdWVyeVNlbGVjdG9yKCcudmpzLWZvbnQtcGVyY2VudCA+IHNlbGVjdCcpLCBmb250UGVyY2VudCk7XG4gIH1cblxuICByZXN0b3JlU2V0dGluZ3MoKSB7XG4gICAgbGV0IFtlcnIsIHZhbHVlc10gPSBzYWZlUGFyc2VUdXBsZSh3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Zqcy10ZXh0LXRyYWNrLXNldHRpbmdzJykpO1xuXG4gICAgaWYgKGVycikge1xuICAgICAgTGliLmxvZy5lcnJvcihlcnIpO1xuICAgIH1cblxuICAgIGlmICh2YWx1ZXMpIHtcbiAgICAgIHRoaXMuc2V0VmFsdWVzKHZhbHVlcyk7XG4gICAgfVxuICB9XG5cbiAgc2F2ZVNldHRpbmdzKCkge1xuICAgIGlmICghdGhpcy5wbGF5ZXJfLm9wdGlvbnMoKVsncGVyc2lzdFRleHRUcmFja1NldHRpbmdzJ10pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgdmFsdWVzID0gdGhpcy5nZXRWYWx1ZXMoKTtcbiAgICB0cnkge1xuICAgICAgaWYgKCFMaWIuaXNFbXB0eSh2YWx1ZXMpKSB7XG4gICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndmpzLXRleHQtdHJhY2stc2V0dGluZ3MnLCBKU09OLnN0cmluZ2lmeSh2YWx1ZXMpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgndmpzLXRleHQtdHJhY2stc2V0dGluZ3MnKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG5cbiAgdXBkYXRlRGlzcGxheSgpIHtcbiAgICBsZXQgdHREaXNwbGF5ID0gdGhpcy5wbGF5ZXJfLmdldENoaWxkKCd0ZXh0VHJhY2tEaXNwbGF5Jyk7XG4gICAgaWYgKHR0RGlzcGxheSkge1xuICAgICAgdHREaXNwbGF5LnVwZGF0ZURpc3BsYXkoKTtcbiAgICB9XG4gIH1cblxufVxuXG5Db21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQoJ1RleHRUcmFja1NldHRpbmdzJywgVGV4dFRyYWNrU2V0dGluZ3MpO1xuXG5mdW5jdGlvbiBnZXRTZWxlY3RlZE9wdGlvblZhbHVlKHRhcmdldCkge1xuICBsZXQgc2VsZWN0ZWRPcHRpb247XG4gIC8vIG5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCBzZWxlY3RlZE9wdGlvbnMsIHNvLCBmYWxsYmFjayB0byBvcHRpb25zXG4gIGlmICh0YXJnZXQuc2VsZWN0ZWRPcHRpb25zKSB7XG4gICAgc2VsZWN0ZWRPcHRpb24gPSB0YXJnZXQuc2VsZWN0ZWRPcHRpb25zWzBdO1xuICB9IGVsc2UgaWYgKHRhcmdldC5vcHRpb25zKSB7XG4gICAgc2VsZWN0ZWRPcHRpb24gPSB0YXJnZXQub3B0aW9uc1t0YXJnZXQub3B0aW9ucy5zZWxlY3RlZEluZGV4XTtcbiAgfVxuXG4gIHJldHVybiBzZWxlY3RlZE9wdGlvbi52YWx1ZTtcbn1cblxuZnVuY3Rpb24gc2V0U2VsZWN0ZWRPcHRpb24odGFyZ2V0LCB2YWx1ZSkge1xuICBpZiAoIXZhbHVlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbGV0IGk7XG4gIGZvciAoaSA9IDA7IGkgPCB0YXJnZXQub3B0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IG9wdGlvbiA9IHRhcmdldC5vcHRpb25zW2ldO1xuICAgIGlmIChvcHRpb24udmFsdWUgPT09IHZhbHVlKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICB0YXJnZXQuc2VsZWN0ZWRJbmRleCA9IGk7XG59XG5cbmZ1bmN0aW9uIGNhcHRpb25PcHRpb25zTWVudVRlbXBsYXRlKCkge1xuICBsZXQgdGVtcGxhdGUgPSBgPGRpdiBjbGFzcz1cInZqcy10cmFja3NldHRpbmdzXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwidmpzLXRyYWNrc2V0dGluZ3MtY29sb3JzXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJ2anMtZmctY29sb3IgdmpzLXRyYWNrc2V0dGluZ1wiPlxuICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwidmpzLWxhYmVsXCI+Rm9yZWdyb3VuZDwvbGFiZWw+XG4gICAgICAgICAgICA8c2VsZWN0PlxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiXCI+LS0tPC9vcHRpb24+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCIjRkZGXCI+V2hpdGU8L29wdGlvbj5cbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIiMwMDBcIj5CbGFjazwvb3B0aW9uPlxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiI0YwMFwiPlJlZDwvb3B0aW9uPlxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiIzBGMFwiPkdyZWVuPC9vcHRpb24+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCIjMDBGXCI+Qmx1ZTwvb3B0aW9uPlxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiI0ZGMFwiPlllbGxvdzwvb3B0aW9uPlxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiI0YwRlwiPk1hZ2VudGE8L29wdGlvbj5cbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIiMwRkZcIj5DeWFuPC9vcHRpb24+XG4gICAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidmpzLXRleHQtb3BhY2l0eSB2anMtb3BhY2l0eVwiPlxuICAgICAgICAgICAgICA8c2VsZWN0PlxuICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJcIj4tLS08L29wdGlvbj5cbiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiMVwiPk9wYXF1ZTwvb3B0aW9uPlxuICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCIwLjVcIj5TZW1pLU9wYXF1ZTwvb3B0aW9uPlxuICAgICAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPC9kaXY+IDwhLS0gdmpzLWZnLWNvbG9yIC0tPlxuICAgICAgICA8ZGl2IGNsYXNzPVwidmpzLWJnLWNvbG9yIHZqcy10cmFja3NldHRpbmdcIj5cbiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cInZqcy1sYWJlbFwiPkJhY2tncm91bmQ8L2xhYmVsPlxuICAgICAgICAgICAgPHNlbGVjdD5cbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIlwiPi0tLTwvb3B0aW9uPlxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiI0ZGRlwiPldoaXRlPC9vcHRpb24+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCIjMDAwXCI+QmxhY2s8L29wdGlvbj5cbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIiNGMDBcIj5SZWQ8L29wdGlvbj5cbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIiMwRjBcIj5HcmVlbjwvb3B0aW9uPlxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiIzAwRlwiPkJsdWU8L29wdGlvbj5cbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIiNGRjBcIj5ZZWxsb3c8L29wdGlvbj5cbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIiNGMEZcIj5NYWdlbnRhPC9vcHRpb24+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCIjMEZGXCI+Q3lhbjwvb3B0aW9uPlxuICAgICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInZqcy1iZy1vcGFjaXR5IHZqcy1vcGFjaXR5XCI+XG4gICAgICAgICAgICAgICAgPHNlbGVjdD5cbiAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJcIj4tLS08L29wdGlvbj5cbiAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCIxXCI+T3BhcXVlPC9vcHRpb24+XG4gICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiMC41XCI+U2VtaS1UcmFuc3BhcmVudDwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIjBcIj5UcmFuc3BhcmVudDwvb3B0aW9uPlxuICAgICAgICAgICAgICAgIDwvc2VsZWN0PlxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICA8L2Rpdj4gPCEtLSB2anMtYmctY29sb3IgLS0+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJ3aW5kb3ctY29sb3IgdmpzLXRyYWNrc2V0dGluZ1wiPlxuICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwidmpzLWxhYmVsXCI+V2luZG93PC9sYWJlbD5cbiAgICAgICAgICAgIDxzZWxlY3Q+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJcIj4tLS08L29wdGlvbj5cbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIiNGRkZcIj5XaGl0ZTwvb3B0aW9uPlxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiIzAwMFwiPkJsYWNrPC9vcHRpb24+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCIjRjAwXCI+UmVkPC9vcHRpb24+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCIjMEYwXCI+R3JlZW48L29wdGlvbj5cbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIiMwMEZcIj5CbHVlPC9vcHRpb24+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCIjRkYwXCI+WWVsbG93PC9vcHRpb24+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCIjRjBGXCI+TWFnZW50YTwvb3B0aW9uPlxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiIzBGRlwiPkN5YW48L29wdGlvbj5cbiAgICAgICAgICAgIDwvc2VsZWN0PlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ2anMtd2luZG93LW9wYWNpdHkgdmpzLW9wYWNpdHlcIj5cbiAgICAgICAgICAgICAgICA8c2VsZWN0PlxuICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIlwiPi0tLTwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIjFcIj5PcGFxdWU8L29wdGlvbj5cbiAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCIwLjVcIj5TZW1pLVRyYW5zcGFyZW50PC9vcHRpb24+XG4gICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiMFwiPlRyYW5zcGFyZW50PC9vcHRpb24+XG4gICAgICAgICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgIDwvZGl2PiA8IS0tIHZqcy13aW5kb3ctY29sb3IgLS0+XG4gICAgICA8L2Rpdj4gPCEtLSB2anMtdHJhY2tzZXR0aW5ncyAtLT5cbiAgICAgIDxkaXYgY2xhc3M9XCJ2anMtdHJhY2tzZXR0aW5ncy1mb250XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJ2anMtZm9udC1wZXJjZW50IHZqcy10cmFja3NldHRpbmdcIj5cbiAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJ2anMtbGFiZWxcIj5Gb250IFNpemU8L2xhYmVsPlxuICAgICAgICAgIDxzZWxlY3Q+XG4gICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiMC41MFwiPjUwJTwvb3B0aW9uPlxuICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIjAuNzVcIj43NSU8L29wdGlvbj5cbiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCIxLjAwXCIgc2VsZWN0ZWQ+MTAwJTwvb3B0aW9uPlxuICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIjEuMjVcIj4xMjUlPC9vcHRpb24+XG4gICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiMS41MFwiPjE1MCU8L29wdGlvbj5cbiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCIxLjc1XCI+MTc1JTwvb3B0aW9uPlxuICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIjIuMDBcIj4yMDAlPC9vcHRpb24+XG4gICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiMy4wMFwiPjMwMCU8L29wdGlvbj5cbiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCI0LjAwXCI+NDAwJTwvb3B0aW9uPlxuICAgICAgICAgIDwvc2VsZWN0PlxuICAgICAgICA8L2Rpdj4gPCEtLSB2anMtZm9udC1wZXJjZW50IC0tPlxuICAgICAgICA8ZGl2IGNsYXNzPVwidmpzLWVkZ2Utc3R5bGUgdmpzLXRyYWNrc2V0dGluZ1wiPlxuICAgICAgICAgIDxsYWJlbCBjbGFzcz1cInZqcy1sYWJlbFwiPlRleHQgRWRnZSBTdHlsZTwvbGFiZWw+XG4gICAgICAgICAgPHNlbGVjdD5cbiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJub25lXCI+Tm9uZTwvb3B0aW9uPlxuICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cInJhaXNlZFwiPlJhaXNlZDwvb3B0aW9uPlxuICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cImRlcHJlc3NlZFwiPkRlcHJlc3NlZDwvb3B0aW9uPlxuICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cInVuaWZvcm1cIj5Vbmlmb3JtPC9vcHRpb24+XG4gICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiZHJvcHNoYWRvd1wiPkRyb3BzaGFkb3c8L29wdGlvbj5cbiAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgPC9kaXY+IDwhLS0gdmpzLWVkZ2Utc3R5bGUgLS0+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJ2anMtZm9udC1mYW1pbHkgdmpzLXRyYWNrc2V0dGluZ1wiPlxuICAgICAgICAgIDxsYWJlbCBjbGFzcz1cInZqcy1sYWJlbFwiPkZvbnQgRmFtaWx5PC9sYWJlbD5cbiAgICAgICAgICA8c2VsZWN0PlxuICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIlwiPkRlZmF1bHQ8L29wdGlvbj5cbiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJtb25vc3BhY2VTZXJpZlwiPk1vbm9zcGFjZSBTZXJpZjwvb3B0aW9uPlxuICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cInByb3BvcnRpb25hbFNlcmlmXCI+UHJvcG9ydGlvbmFsIFNlcmlmPC9vcHRpb24+XG4gICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwibW9ub3NwYWNlU2Fuc1NlcmlmXCI+TW9ub3NwYWNlIFNhbnMtU2VyaWY8L29wdGlvbj5cbiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJwcm9wb3J0aW9uYWxTYW5zU2VyaWZcIj5Qcm9wb3J0aW9uYWwgU2Fucy1TZXJpZjwvb3B0aW9uPlxuICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cImNhc3VhbFwiPkNhc3VhbDwvb3B0aW9uPlxuICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cInNjcmlwdFwiPlNjcmlwdDwvb3B0aW9uPlxuICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cInNtYWxsLWNhcHNcIj5TbWFsbCBDYXBzPC9vcHRpb24+XG4gICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgIDwvZGl2PiA8IS0tIHZqcy1mb250LWZhbWlseSAtLT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJ2anMtdHJhY2tzZXR0aW5ncy1jb250cm9sc1wiPlxuICAgICAgPGJ1dHRvbiBjbGFzcz1cInZqcy1kZWZhdWx0LWJ1dHRvblwiPkRlZmF1bHRzPC9idXR0b24+XG4gICAgICA8YnV0dG9uIGNsYXNzPVwidmpzLWRvbmUtYnV0dG9uXCI+RG9uZTwvYnV0dG9uPlxuICAgIDwvZGl2PmA7XG5cbiAgICByZXR1cm4gdGVtcGxhdGU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFRleHRUcmFja1NldHRpbmdzO1xuIiwiaW1wb3J0IFRleHRUcmFja0N1ZUxpc3QgZnJvbSAnLi90ZXh0LXRyYWNrLWN1ZS1saXN0JztcbmltcG9ydCAqIGFzIExpYiBmcm9tICcuLi9saWInO1xuaW1wb3J0ICogYXMgVGV4dFRyYWNrRW51bSBmcm9tICcuL3RleHQtdHJhY2stZW51bXMnO1xuaW1wb3J0IEV2ZW50RW1pdHRlciBmcm9tICcuLi9ldmVudC1lbWl0dGVyJztcbmltcG9ydCBkb2N1bWVudCBmcm9tICdnbG9iYWwvZG9jdW1lbnQnO1xuaW1wb3J0IHdpbmRvdyBmcm9tICdnbG9iYWwvd2luZG93JztcbmltcG9ydCBYSFIgZnJvbSAnLi4veGhyLmpzJztcblxuLypcbiAqIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2VtYmVkZGVkLWNvbnRlbnQuaHRtbCN0ZXh0dHJhY2tcbiAqXG4gKiBpbnRlcmZhY2UgVGV4dFRyYWNrIDogRXZlbnRUYXJnZXQge1xuICogICByZWFkb25seSBhdHRyaWJ1dGUgVGV4dFRyYWNrS2luZCBraW5kO1xuICogICByZWFkb25seSBhdHRyaWJ1dGUgRE9NU3RyaW5nIGxhYmVsO1xuICogICByZWFkb25seSBhdHRyaWJ1dGUgRE9NU3RyaW5nIGxhbmd1YWdlO1xuICpcbiAqICAgcmVhZG9ubHkgYXR0cmlidXRlIERPTVN0cmluZyBpZDtcbiAqICAgcmVhZG9ubHkgYXR0cmlidXRlIERPTVN0cmluZyBpbkJhbmRNZXRhZGF0YVRyYWNrRGlzcGF0Y2hUeXBlO1xuICpcbiAqICAgYXR0cmlidXRlIFRleHRUcmFja01vZGUgbW9kZTtcbiAqXG4gKiAgIHJlYWRvbmx5IGF0dHJpYnV0ZSBUZXh0VHJhY2tDdWVMaXN0PyBjdWVzO1xuICogICByZWFkb25seSBhdHRyaWJ1dGUgVGV4dFRyYWNrQ3VlTGlzdD8gYWN0aXZlQ3VlcztcbiAqXG4gKiAgIHZvaWQgYWRkQ3VlKFRleHRUcmFja0N1ZSBjdWUpO1xuICogICB2b2lkIHJlbW92ZUN1ZShUZXh0VHJhY2tDdWUgY3VlKTtcbiAqXG4gKiAgIGF0dHJpYnV0ZSBFdmVudEhhbmRsZXIgb25jdWVjaGFuZ2U7XG4gKiB9O1xuICovXG5sZXQgVGV4dFRyYWNrID0gZnVuY3Rpb24ob3B0aW9ucz17fSkge1xuICBpZiAoIW9wdGlvbnMudGVjaCkge1xuICAgIHRocm93IG5ldyBFcnJvcignQSB0ZWNoIHdhcyBub3QgcHJvdmlkZWQuJyk7XG4gIH1cblxuICBsZXQgdHQgPSB0aGlzO1xuICBpZiAoTGliLklTX0lFOCkge1xuICAgIHR0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY3VzdG9tJyk7XG5cbiAgICBmb3IgKGxldCBwcm9wIGluIFRleHRUcmFjay5wcm90b3R5cGUpIHtcbiAgICAgIHR0W3Byb3BdID0gVGV4dFRyYWNrLnByb3RvdHlwZVtwcm9wXTtcbiAgICB9XG4gIH1cblxuICB0dC50ZWNoXyA9IG9wdGlvbnMudGVjaDtcblxuICBsZXQgbW9kZSA9IFRleHRUcmFja0VudW0uVGV4dFRyYWNrTW9kZVtvcHRpb25zWydtb2RlJ11dIHx8ICdkaXNhYmxlZCc7XG4gIGxldCBraW5kID0gVGV4dFRyYWNrRW51bS5UZXh0VHJhY2tLaW5kW29wdGlvbnNbJ2tpbmQnXV0gfHwgJ3N1YnRpdGxlcyc7XG4gIGxldCBsYWJlbCA9IG9wdGlvbnNbJ2xhYmVsJ10gfHwgJyc7XG4gIGxldCBsYW5ndWFnZSA9IG9wdGlvbnNbJ2xhbmd1YWdlJ10gfHwgb3B0aW9uc1snc3JjbGFuZyddIHx8ICcnO1xuICBsZXQgaWQgPSBvcHRpb25zWydpZCddIHx8ICd2anNfdGV4dF90cmFja18nICsgTGliLmd1aWQrKztcblxuICBpZiAoa2luZCA9PT0gJ21ldGFkYXRhJyB8fCBraW5kID09PSAnY2hhcHRlcnMnKSB7XG4gICAgbW9kZSA9ICdoaWRkZW4nO1xuICB9XG5cbiAgdHQuY3Vlc18gPSBbXTtcbiAgdHQuYWN0aXZlQ3Vlc18gPSBbXTtcblxuICBsZXQgY3VlcyA9IG5ldyBUZXh0VHJhY2tDdWVMaXN0KHR0LmN1ZXNfKTtcbiAgbGV0IGFjdGl2ZUN1ZXMgPSBuZXcgVGV4dFRyYWNrQ3VlTGlzdCh0dC5hY3RpdmVDdWVzXyk7XG5cbiAgbGV0IGNoYW5nZWQgPSBmYWxzZTtcbiAgbGV0IHRpbWV1cGRhdGVIYW5kbGVyID0gTGliLmJpbmQodHQsIGZ1bmN0aW9uKCkge1xuICAgIHRoaXNbJ2FjdGl2ZUN1ZXMnXTtcbiAgICBpZiAoY2hhbmdlZCkge1xuICAgICAgdGhpc1sndHJpZ2dlciddKCdjdWVjaGFuZ2UnKTtcbiAgICAgIGNoYW5nZWQgPSBmYWxzZTtcbiAgICB9XG4gIH0pO1xuICBpZiAobW9kZSAhPT0gJ2Rpc2FibGVkJykge1xuICAgIHR0LnRlY2hfLm9uKCd0aW1ldXBkYXRlJywgdGltZXVwZGF0ZUhhbmRsZXIpO1xuICB9XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHR0LCAna2luZCcsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGtpbmQ7XG4gICAgfSxcbiAgICBzZXQ6IEZ1bmN0aW9uLnByb3RvdHlwZVxuICB9KTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodHQsICdsYWJlbCcsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGxhYmVsO1xuICAgIH0sXG4gICAgc2V0OiBGdW5jdGlvbi5wcm90b3R5cGVcbiAgfSk7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHR0LCAnbGFuZ3VhZ2UnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBsYW5ndWFnZTtcbiAgICB9LFxuICAgIHNldDogRnVuY3Rpb24ucHJvdG90eXBlXG4gIH0pO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0dCwgJ2lkJywge1xuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gaWQ7XG4gICAgfSxcbiAgICBzZXQ6IEZ1bmN0aW9uLnByb3RvdHlwZVxuICB9KTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodHQsICdtb2RlJywge1xuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gbW9kZTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24obmV3TW9kZSkge1xuICAgICAgaWYgKCFUZXh0VHJhY2tFbnVtLlRleHRUcmFja01vZGVbbmV3TW9kZV0pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbW9kZSA9IG5ld01vZGU7XG4gICAgICBpZiAobW9kZSA9PT0gJ3Nob3dpbmcnKSB7XG4gICAgICAgIHRoaXMudGVjaF8ub24oJ3RpbWV1cGRhdGUnLCB0aW1ldXBkYXRlSGFuZGxlcik7XG4gICAgICB9XG4gICAgICB0aGlzLnRyaWdnZXIoJ21vZGVjaGFuZ2UnKTtcbiAgICB9XG4gIH0pO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0dCwgJ2N1ZXMnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICghdGhpcy5sb2FkZWRfKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY3VlcztcbiAgICB9LFxuICAgIHNldDogRnVuY3Rpb24ucHJvdG90eXBlXG4gIH0pO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0dCwgJ2FjdGl2ZUN1ZXMnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICghdGhpcy5sb2FkZWRfKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpc1snY3VlcyddLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gYWN0aXZlQ3VlczsgLy8gbm90aGluZyB0byBkb1xuICAgICAgfVxuXG4gICAgICBsZXQgY3QgPSB0aGlzLnRlY2hfLmN1cnJlbnRUaW1lKCk7XG4gICAgICBsZXQgYWN0aXZlID0gW107XG5cbiAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gdGhpc1snY3VlcyddLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBsZXQgY3VlID0gdGhpc1snY3VlcyddW2ldO1xuICAgICAgICBpZiAoY3VlWydzdGFydFRpbWUnXSA8PSBjdCAmJiBjdWVbJ2VuZFRpbWUnXSA+PSBjdCkge1xuICAgICAgICAgIGFjdGl2ZS5wdXNoKGN1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoY3VlWydzdGFydFRpbWUnXSA9PT0gY3VlWydlbmRUaW1lJ10gJiYgY3VlWydzdGFydFRpbWUnXSA8PSBjdCAmJiBjdWVbJ3N0YXJ0VGltZSddICsgMC41ID49IGN0KSB7XG4gICAgICAgICAgYWN0aXZlLnB1c2goY3VlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjaGFuZ2VkID0gZmFsc2U7XG5cbiAgICAgIGlmIChhY3RpdmUubGVuZ3RoICE9PSB0aGlzLmFjdGl2ZUN1ZXNfLmxlbmd0aCkge1xuICAgICAgICBjaGFuZ2VkID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWN0aXZlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKGluZGV4T2YuY2FsbCh0aGlzLmFjdGl2ZUN1ZXNfLCBhY3RpdmVbaV0pID09PSAtMSkge1xuICAgICAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuYWN0aXZlQ3Vlc18gPSBhY3RpdmU7XG4gICAgICBhY3RpdmVDdWVzLnNldEN1ZXNfKHRoaXMuYWN0aXZlQ3Vlc18pO1xuXG4gICAgICByZXR1cm4gYWN0aXZlQ3VlcztcbiAgICB9LFxuICAgIHNldDogRnVuY3Rpb24ucHJvdG90eXBlXG4gIH0pO1xuXG4gIGlmIChvcHRpb25zLnNyYykge1xuICAgIGxvYWRUcmFjayhvcHRpb25zLnNyYywgdHQpO1xuICB9IGVsc2Uge1xuICAgIHR0LmxvYWRlZF8gPSB0cnVlO1xuICB9XG5cbiAgaWYgKExpYi5JU19JRTgpIHtcbiAgICByZXR1cm4gdHQ7XG4gIH1cbn07XG5cblRleHRUcmFjay5wcm90b3R5cGUgPSBMaWIub2JqLmNyZWF0ZShFdmVudEVtaXR0ZXIucHJvdG90eXBlKTtcblRleHRUcmFjay5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBUZXh0VHJhY2s7XG5cbi8qXG4gKiBjdWVjaGFuZ2UgLSBPbmUgb3IgbW9yZSBjdWVzIGluIHRoZSB0cmFjayBoYXZlIGJlY29tZSBhY3RpdmUgb3Igc3RvcHBlZCBiZWluZyBhY3RpdmUuXG4gKi9cblRleHRUcmFjay5wcm90b3R5cGUuYWxsb3dlZEV2ZW50c18gPSB7XG4gICdjdWVjaGFuZ2UnOiAnY3VlY2hhbmdlJ1xufTtcblxuVGV4dFRyYWNrLnByb3RvdHlwZS5hZGRDdWUgPSBmdW5jdGlvbihjdWUpIHtcbiAgbGV0IHRyYWNrcyA9IHRoaXMudGVjaF8udGV4dFRyYWNrcygpO1xuXG4gIGlmICh0cmFja3MpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRyYWNrcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHRyYWNrc1tpXSAhPT0gdGhpcykge1xuICAgICAgICB0cmFja3NbaV0ucmVtb3ZlQ3VlKGN1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdGhpcy5jdWVzXy5wdXNoKGN1ZSk7XG4gIHRoaXNbJ2N1ZXMnXS5zZXRDdWVzXyh0aGlzLmN1ZXNfKTtcbn07XG5cblRleHRUcmFjay5wcm90b3R5cGUucmVtb3ZlQ3VlID0gZnVuY3Rpb24ocmVtb3ZlQ3VlKSB7XG4gIGxldCByZW1vdmVkID0gZmFsc2U7XG5cbiAgZm9yIChsZXQgaSA9IDAsIGwgPSB0aGlzLmN1ZXNfLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGxldCBjdWUgPSB0aGlzLmN1ZXNfW2ldO1xuICAgIGlmIChjdWUgPT09IHJlbW92ZUN1ZSkge1xuICAgICAgdGhpcy5jdWVzXy5zcGxpY2UoaSwgMSk7XG4gICAgICByZW1vdmVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBpZiAocmVtb3ZlZCkge1xuICAgIHRoaXMuY3Vlcy5zZXRDdWVzXyh0aGlzLmN1ZXNfKTtcbiAgfVxufTtcblxuLypcbiAqIERvd25sb2FkaW5nIHN0dWZmIGhhcHBlbnMgYmVsb3cgdGhpcyBwb2ludFxuICovXG52YXIgcGFyc2VDdWVzID0gZnVuY3Rpb24oc3JjQ29udGVudCwgdHJhY2spIHtcbiAgaWYgKHR5cGVvZiB3aW5kb3dbJ1dlYlZUVCddICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgLy90cnkgYWdhaW4gYSBiaXQgbGF0ZXJcbiAgICByZXR1cm4gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICBwYXJzZUN1ZXMoc3JjQ29udGVudCwgdHJhY2spO1xuICAgIH0sIDI1KTtcbiAgfVxuXG4gIGxldCBwYXJzZXIgPSBuZXcgd2luZG93WydXZWJWVFQnXVsnUGFyc2VyJ10od2luZG93LCB3aW5kb3dbJ3Z0dGpzJ10sIHdpbmRvd1snV2ViVlRUJ11bJ1N0cmluZ0RlY29kZXInXSgpKTtcblxuICBwYXJzZXJbJ29uY3VlJ10gPSBmdW5jdGlvbihjdWUpIHtcbiAgICB0cmFjay5hZGRDdWUoY3VlKTtcbiAgfTtcbiAgcGFyc2VyWydvbnBhcnNpbmdlcnJvciddID0gZnVuY3Rpb24oZXJyb3IpIHtcbiAgICBMaWIubG9nLmVycm9yKGVycm9yKTtcbiAgfTtcblxuICBwYXJzZXJbJ3BhcnNlJ10oc3JjQ29udGVudCk7XG4gIHBhcnNlclsnZmx1c2gnXSgpO1xufTtcblxudmFyIGxvYWRUcmFjayA9IGZ1bmN0aW9uKHNyYywgdHJhY2spIHtcbiAgWEhSKHNyYywgTGliLmJpbmQodGhpcywgZnVuY3Rpb24oZXJyLCByZXNwb25zZSwgcmVzcG9uc2VCb2R5KXtcbiAgICBpZiAoZXJyKSB7XG4gICAgICByZXR1cm4gTGliLmxvZy5lcnJvcihlcnIpO1xuICAgIH1cblxuXG4gICAgdHJhY2subG9hZGVkXyA9IHRydWU7XG4gICAgcGFyc2VDdWVzKHJlc3BvbnNlQm9keSwgdHJhY2spO1xuICB9KSk7XG59O1xuXG52YXIgaW5kZXhPZiA9IGZ1bmN0aW9uKHNlYXJjaEVsZW1lbnQsIGZyb21JbmRleCkge1xuICBpZiAodGhpcyA9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJ0aGlzXCIgaXMgbnVsbCBvciBub3QgZGVmaW5lZCcpO1xuICB9XG5cbiAgbGV0IE8gPSBPYmplY3QodGhpcyk7XG5cbiAgbGV0IGxlbiA9IE8ubGVuZ3RoID4+PiAwO1xuXG4gIGlmIChsZW4gPT09IDApIHtcbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICBsZXQgbiA9ICtmcm9tSW5kZXggfHwgMDtcblxuICBpZiAoTWF0aC5hYnMobikgPT09IEluZmluaXR5KSB7XG4gICAgbiA9IDA7XG4gIH1cblxuICBpZiAobiA+PSBsZW4pIHtcbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICBsZXQgayA9IE1hdGgubWF4KG4gPj0gMCA/IG4gOiBsZW4gLSBNYXRoLmFicyhuKSwgMCk7XG5cbiAgd2hpbGUgKGsgPCBsZW4pIHtcbiAgICBpZiAoayBpbiBPICYmIE9ba10gPT09IHNlYXJjaEVsZW1lbnQpIHtcbiAgICAgIHJldHVybiBrO1xuICAgIH1cbiAgICBrKys7XG4gIH1cbiAgcmV0dXJuIC0xO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgVGV4dFRyYWNrO1xuIiwiaW1wb3J0IHsgb2JqIH0gZnJvbSAnLi9saWInO1xuXG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb25zIG5hbWVzcGFjZVxuICogQG5hbWVzcGFjZVxuICogQHR5cGUge09iamVjdH1cbiAqL1xudmFyIHV0aWwgPSB7fTtcblxuLyoqXG4gKiBNZXJnZSB0d28gb3B0aW9ucyBvYmplY3RzLCByZWN1cnNpdmVseSBtZXJnaW5nIGFueSBwbGFpbiBvYmplY3QgcHJvcGVydGllcyBhc1xuICogd2VsbC4gIFByZXZpb3VzbHkgYGRlZXBNZXJnZWBcbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG92ZXJyaWRlIHZhbHVlcyBpblxuICogQHBhcmFtICB7T2JqZWN0fSBvYmoyIE92ZXJyaWRpbmcgb2JqZWN0XG4gKiBAcmV0dXJuIHtPYmplY3R9ICAgICAgTmV3IG9iamVjdCAtLSBvYmoxIGFuZCBvYmoyIHdpbGwgYmUgdW50b3VjaGVkXG4gKi9cbnZhciBtZXJnZU9wdGlvbnMgPSBmdW5jdGlvbihvYmoxLCBvYmoyKXtcbiAgdmFyIGtleSwgdmFsMSwgdmFsMjtcblxuICAvLyBtYWtlIGEgY29weSBvZiBvYmoxIHNvIHdlJ3JlIG5vdCBvdmVyd3JpdGluZyBvcmlnaW5hbCB2YWx1ZXMuXG4gIC8vIGxpa2UgcHJvdG90eXBlLm9wdGlvbnNfIGFuZCBhbGwgc3ViIG9wdGlvbnMgb2JqZWN0c1xuICBvYmoxID0gb2JqLmNvcHkob2JqMSk7XG5cbiAgZm9yIChrZXkgaW4gb2JqMil7XG4gICAgaWYgKG9iajIuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgdmFsMSA9IG9iajFba2V5XTtcbiAgICAgIHZhbDIgPSBvYmoyW2tleV07XG5cbiAgICAgIC8vIENoZWNrIGlmIGJvdGggcHJvcGVydGllcyBhcmUgcHVyZSBvYmplY3RzIGFuZCBkbyBhIGRlZXAgbWVyZ2UgaWYgc29cbiAgICAgIGlmIChvYmouaXNQbGFpbih2YWwxKSAmJiBvYmouaXNQbGFpbih2YWwyKSkge1xuICAgICAgICBvYmoxW2tleV0gPSBtZXJnZU9wdGlvbnModmFsMSwgdmFsMik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvYmoxW2tleV0gPSBvYmoyW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBvYmoxO1xufTtcblxuZXhwb3J0IHsgbWVyZ2VPcHRpb25zIH07XG4iLCJpbXBvcnQgZG9jdW1lbnQgZnJvbSAnZ2xvYmFsL2RvY3VtZW50JztcblxuaW1wb3J0IE1lZGlhTG9hZGVyIGZyb20gJy4vdGVjaC9sb2FkZXIuanMnO1xuaW1wb3J0IEh0bWw1IGZyb20gJy4vdGVjaC9odG1sNS5qcyc7XG5pbXBvcnQgRmxhc2ggZnJvbSAnLi90ZWNoL2ZsYXNoLmpzJztcbmltcG9ydCBQb3N0ZXJJbWFnZSBmcm9tICcuL3Bvc3Rlci1pbWFnZS5qcyc7XG5pbXBvcnQgVGV4dFRyYWNrRGlzcGxheSBmcm9tICcuL3RyYWNrcy90ZXh0LXRyYWNrLWRpc3BsYXkuanMnO1xuaW1wb3J0IExvYWRpbmdTcGlubmVyIGZyb20gJy4vbG9hZGluZy1zcGlubmVyLmpzJztcbmltcG9ydCBCaWdQbGF5QnV0dG9uIGZyb20gJy4vYmlnLXBsYXktYnV0dG9uLmpzJztcbmltcG9ydCBDb250cm9sQmFyIGZyb20gJy4vY29udHJvbC1iYXIvY29udHJvbC1iYXIuanMnO1xuaW1wb3J0IEVycm9yRGlzcGxheSBmcm9tICcuL2Vycm9yLWRpc3BsYXkuanMnO1xuXG5pbXBvcnQgdmlkZW9qcyBmcm9tICcuL2NvcmUnO1xuaW1wb3J0ICogYXMgc2V0dXAgZnJvbSAnLi9zZXR1cCc7XG5pbXBvcnQgQ29tcG9uZW50IGZyb20gJy4vY29tcG9uZW50JztcbmltcG9ydCAqIGFzIExpYiBmcm9tICcuL2xpYic7XG5pbXBvcnQgKiBhcyBVdGlsIGZyb20gJy4vdXRpbC5qcyc7XG5pbXBvcnQgUGxheWVyIGZyb20gJy4vcGxheWVyJztcbmltcG9ydCBleHRlbmRzRm4gZnJvbSAnLi9leHRlbmRzLmpzJztcbmltcG9ydCBwbHVnaW4gZnJvbSAnLi9wbHVnaW5zLmpzJztcbmltcG9ydCBvcHRpb25zIGZyb20gJy4vb3B0aW9ucy5qcyc7XG5cbmlmICh0eXBlb2YgSFRNTFZpZGVvRWxlbWVudCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndmlkZW8nKTtcbiAgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYXVkaW8nKTtcbiAgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndHJhY2snKTtcbn1cblxuLy8gUnVuIEF1dG8tbG9hZCBwbGF5ZXJzXG4vLyBZb3UgaGF2ZSB0byB3YWl0IGF0IGxlYXN0IG9uY2UgaW4gY2FzZSB0aGlzIHNjcmlwdCBpcyBsb2FkZWQgYWZ0ZXIgeW91ciB2aWRlbyBpbiB0aGUgRE9NICh3ZWlyZCBiZWhhdmlvciBvbmx5IHdpdGggbWluaWZpZWQgdmVyc2lvbilcbnNldHVwLmF1dG9TZXR1cFRpbWVvdXQoMSwgdmlkZW9qcyk7XG5cbnZpZGVvanMuZ2V0Q29tcG9uZW50ID0gQ29tcG9uZW50LmdldENvbXBvbmVudDtcbnZpZGVvanMucmVnaXN0ZXJDb21wb25lbnQgPSBDb21wb25lbnQucmVnaXN0ZXJDb21wb25lbnQ7XG5cbi8vIEFQSXMgdGhhdCB3aWxsIGJlIHJlbW92ZWQgd2l0aCA1LjAsIGJ1dCBuZWVkIHRoZW0gdG8gZ2V0IHRlc3RzIHBhc3Npbmdcbi8vIGluIEVTNiB0cmFuc2l0aW9uXG52aWRlb2pzLlRPVUNIX0VOQUJMRUQgPSBMaWIuVE9VQ0hfRU5BQkxFRDtcbnZpZGVvanMudXRpbCA9IFV0aWw7XG5cbi8vIFByb2JhYmx5IHdhbnQgdG8ga2VlcCB0aGlzIG9uZSBmb3IgNS4wP1xudmlkZW9qcy5wbGF5ZXJzID0gUGxheWVyLnBsYXllcnM7XG5cbnZpZGVvanMuZXh0ZW5kcyA9IGV4dGVuZHNGbjtcblxudmlkZW9qcy5nZXRHbG9iYWxPcHRpb25zID0gKCkgPT4gb3B0aW9ucztcbnZpZGVvanMuc2V0R2xvYmFsT3B0aW9ucyA9IGZ1bmN0aW9uKG5ld09wdGlvbnMpIHtcbiAgTGliLnV0aWwubWVyZ2VPcHRpb25zKG9wdGlvbnMsIG5ld09wdGlvbnMpO1xufTtcblxudmlkZW9qcy5wbHVnaW4gPSBwbHVnaW47XG5cbi8vIFJFTU9WSU5HOiBXZSBwcm9iYWJseSBzaG91bGQgbm90IGluY2x1ZGUgdGhpcyBpbiA1LjAgdGhvdWdodCBpdCB3b3VsZCBtYWtlIGl0XG4vLyBtb3JlIGJhY2t3YXJkcyBjb21wYXRpYmxlXG4vLyAvLyBFeHBvc2UgYnV0IGRlcHJlY2F0ZSB0aGUgd2luZG93W2NvbXBvbmVudE5hbWVdIG1ldGhvZCBmb3IgYWNjZXNzaW5nIGNvbXBvbmVudHNcbi8vIExpYi5vYmouZWFjaChDb21wb25lbnQuY29tcG9uZW50cywgZnVuY3Rpb24obmFtZSwgY29tcG9uZW50KXtcbi8vICAgLy8gQSBkZXByZWNhdGlvbiB3YXJuaW5nIGFzIHRoZSBjb25zdHVjdG9yXG4vLyAgIG1vZHVsZS5leHBvcnRzW25hbWVdID0gZnVuY3Rpb24ocGxheWVyLCBvcHRpb25zLCByZWFkeSl7XG4vLyAgICAgTGliLmxvZy53YXJuKCdVc2luZyB2aWRlb2pzLicrbmFtZSsnIHRvIGFjY2VzcyB0aGUgJytuYW1lKycgY29tcG9uZW50IGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgdmlkZW9qcy5nZXRDb21wb25lbnQoXCJjb21wb25lbnROYW1lXCIpJyk7XG4vL1xuLy8gICAgIHJldHVybiBuZXcgQ29tcG9uZW50KHBsYXllciwgb3B0aW9ucywgcmVhZHkpO1xuLy8gICB9O1xuLy9cbi8vICAgLy8gQWxsb3cgdGhlIHByb3RvdHlwZSBhbmQgY2xhc3MgbWV0aG9kcyB0byBiZSBhY2Nlc3NpYmxlIHN0aWxsIHRoaXMgd2F5XG4vLyAgIC8vIFRob3VnaCBhbnl0aGluZyB0aGF0IGF0dGVtcHRzIHRvIG92ZXJyaWRlIGNsYXNzIG1ldGhvZHMgd2lsbCBubyBsb25nZXIgd29ya1xuLy8gICBMaWIub2JqLm1lcmdlKG1vZHVsZS5leHBvcnRzW25hbWVdLCBjb21wb25lbnQpO1xuLy8gfSk7XG5cbmV4cG9ydCBkZWZhdWx0IHZpZGVvanM7XG4iLCJpbXBvcnQgKiBhcyBWanNVdGlscyBmcm9tICcuL3V0aWwnO1xuaW1wb3J0ICogYXMgTGliIGZyb20gJy4vbGliJztcbmltcG9ydCB3aW5kb3cgZnJvbSAnZ2xvYmFsL3dpbmRvdyc7XG5cbi8qKlxuICogU2ltcGxlIGh0dHAgcmVxdWVzdCBmb3IgcmV0cmlldmluZyBleHRlcm5hbCBmaWxlcyAoZS5nLiB0ZXh0IHRyYWNrcylcbiAqXG4gKiAjIyMjIyBFeGFtcGxlXG4gKlxuICogICAgIC8vIHVzaW5nIHVybCBzdHJpbmdcbiAqICAgICB2aWRlb2pzLnhocignaHR0cDovL2V4YW1wbGUuY29tL215ZmlsZS52dHQnLCBmdW5jdGlvbihlcnJvciwgcmVzcG9uc2UsIHJlc3BvbnNlQm9keSl7fSk7XG4gKlxuICogICAgIC8vIG9yIG9wdGlvbnMgYmxvY2tcbiAqICAgICB2aWRlb2pzLnhocih7XG4gKiAgICAgICB1cmk6ICdodHRwOi8vZXhhbXBsZS5jb20vbXlmaWxlLnZ0dCcsXG4gKiAgICAgICBtZXRob2Q6ICdHRVQnLFxuICogICAgICAgcmVzcG9uc2VUeXBlOiAndGV4dCdcbiAqICAgICB9LCBmdW5jdGlvbihlcnJvciwgcmVzcG9uc2UsIHJlc3BvbnNlQm9keSl7XG4gKiAgICAgICBpZiAoZXJyb3IpIHtcbiAqICAgICAgICAgLy8gbG9nIHRoZSBlcnJvclxuICogICAgICAgfSBlbHNlIHtcbiAqICAgICAgICAgLy8gc3VjY2Vzc2Z1bCwgZG8gc29tZXRoaW5nIHdpdGggdGhlIHJlc3BvbnNlXG4gKiAgICAgICB9XG4gKiAgICAgfSk7XG4gKlxuICpcbiAqIEFQSSBpcyBtb2RlbGVkIGFmdGVyIHRoZSBSYXlub3MveGhyLCB3aGljaCB3ZSBob3BlIHRvIHVzZSBhZnRlclxuICogZ2V0dGluZyBicm93c2VyaWZ5IGltcGxlbWVudGVkLlxuICogaHR0cHM6Ly9naXRodWIuY29tL1JheW5vcy94aHIvYmxvYi9tYXN0ZXIvaW5kZXguanNcbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R8U3RyaW5nfSAgb3B0aW9ucyAgIE9wdGlvbnMgYmxvY2sgb3IgVVJMIHN0cmluZ1xuICogQHBhcmFtICB7RnVuY3Rpb259ICAgICAgIGNhbGxiYWNrICBUaGUgY2FsbGJhY2sgZnVuY3Rpb25cbiAqIEByZXR1cm5zIHtPYmplY3R9ICAgICAgICAgICAgICAgICAgVGhlIHJlcXVlc3RcbiAqL1xudmFyIHhociA9IGZ1bmN0aW9uKG9wdGlvbnMsIGNhbGxiYWNrKXtcbiAgbGV0IGFib3J0VGltZW91dDtcblxuICAvLyBJZiBvcHRpb25zIGlzIGEgc3RyaW5nIGl0J3MgdGhlIHVybFxuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnKSB7XG4gICAgb3B0aW9ucyA9IHtcbiAgICAgIHVyaTogb3B0aW9uc1xuICAgIH07XG4gIH1cblxuICAvLyBNZXJnZSB3aXRoIGRlZmF1bHQgb3B0aW9uc1xuICBWanNVdGlscy5tZXJnZU9wdGlvbnMoe1xuICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgdGltZW91dDogNDUgKiAxMDAwXG4gIH0sIG9wdGlvbnMpO1xuXG4gIGNhbGxiYWNrID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24oKXt9O1xuXG4gIGxldCBYSFIgPSB3aW5kb3cuWE1MSHR0cFJlcXVlc3Q7XG5cbiAgaWYgKHR5cGVvZiBYSFIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gU2hpbSBYTUxIdHRwUmVxdWVzdCBmb3Igb2xkZXIgSUVzXG4gICAgWEhSID0gZnVuY3Rpb24gKCkge1xuICAgICAgdHJ5IHsgcmV0dXJuIG5ldyB3aW5kb3cuQWN0aXZlWE9iamVjdCgnTXN4bWwyLlhNTEhUVFAuNi4wJyk7IH0gY2F0Y2ggKGUpIHt9XG4gICAgICB0cnkgeyByZXR1cm4gbmV3IHdpbmRvdy5BY3RpdmVYT2JqZWN0KCdNc3htbDIuWE1MSFRUUC4zLjAnKTsgfSBjYXRjaCAoZikge31cbiAgICAgIHRyeSB7IHJldHVybiBuZXcgd2luZG93LkFjdGl2ZVhPYmplY3QoJ01zeG1sMi5YTUxIVFRQJyk7IH0gY2F0Y2ggKGcpIHt9XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoaXMgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IFhNTEh0dHBSZXF1ZXN0LicpO1xuICAgIH07XG4gIH1cblxuICBsZXQgcmVxdWVzdCA9IG5ldyBYSFIoKTtcbiAgLy8gU3RvcmUgYSByZWZlcmVuY2UgdG8gdGhlIHVybCBvbiB0aGUgcmVxdWVzdCBpbnN0YW5jZVxuICByZXF1ZXN0LnVyaSA9IG9wdGlvbnMudXJpO1xuXG4gIGxldCB1cmxJbmZvID0gTGliLnBhcnNlVXJsKG9wdGlvbnMudXJpKTtcbiAgbGV0IHdpbkxvYyA9IHdpbmRvdy5sb2NhdGlvbjtcblxuICBsZXQgc3VjY2Vzc0hhbmRsZXIgPSBmdW5jdGlvbigpe1xuICAgIHdpbmRvdy5jbGVhclRpbWVvdXQoYWJvcnRUaW1lb3V0KTtcbiAgICBjYWxsYmFjayhudWxsLCByZXF1ZXN0LCByZXF1ZXN0LnJlc3BvbnNlIHx8IHJlcXVlc3QucmVzcG9uc2VUZXh0KTtcbiAgfTtcblxuICBsZXQgZXJyb3JIYW5kbGVyID0gZnVuY3Rpb24oZXJyKXtcbiAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KGFib3J0VGltZW91dCk7XG5cbiAgICBpZiAoIWVyciB8fCB0eXBlb2YgZXJyID09PSAnc3RyaW5nJykge1xuICAgICAgZXJyID0gbmV3IEVycm9yKGVycik7XG4gICAgfVxuXG4gICAgY2FsbGJhY2soZXJyLCByZXF1ZXN0KTtcbiAgfTtcblxuICAvLyBDaGVjayBpZiB1cmwgaXMgZm9yIGFub3RoZXIgZG9tYWluL29yaWdpblxuICAvLyBJRTggZG9lc24ndCBrbm93IGxvY2F0aW9uLm9yaWdpbiwgc28gd2Ugd29uJ3QgcmVseSBvbiBpdCBoZXJlXG4gIGNvbnN0IGNyb3NzT3JpZ2luID0gKHVybEluZm8ucHJvdG9jb2wgKyB1cmxJbmZvLmhvc3QpICE9PSAod2luTG9jLnByb3RvY29sICsgd2luTG9jLmhvc3QpO1xuXG4gIC8vIFhEb21haW5SZXF1ZXN0IC0tIFVzZSBmb3IgSUUgaWYgWE1MSFRUUFJlcXVlc3QyIGlzbid0IGF2YWlsYWJsZVxuICAvLyAnd2l0aENyZWRlbnRpYWxzJyBpcyBvbmx5IGF2YWlsYWJsZSBpbiBYTUxIVFRQUmVxdWVzdDJcbiAgLy8gQWxzbyBYRG9tYWluUmVxdWVzdCBoYXMgYSBsb3Qgb2YgZ290Y2hhcywgc28gb25seSB1c2UgaWYgY3Jvc3MgZG9tYWluXG4gIGlmIChjcm9zc09yaWdpbiAmJiB3aW5kb3cuWERvbWFpblJlcXVlc3QgJiYgISgnd2l0aENyZWRlbnRpYWxzJyBpbiByZXF1ZXN0KSkge1xuICAgIHJlcXVlc3QgPSBuZXcgd2luZG93LlhEb21haW5SZXF1ZXN0KCk7XG4gICAgcmVxdWVzdC5vbmxvYWQgPSBzdWNjZXNzSGFuZGxlcjtcbiAgICByZXF1ZXN0Lm9uZXJyb3IgPSBlcnJvckhhbmRsZXI7XG4gICAgLy8gVGhlc2UgYmxhbmsgaGFuZGxlcnMgbmVlZCB0byBiZSBzZXQgdG8gZml4IGllOVxuICAgIC8vIGh0dHA6Ly9jeXByZXNzbm9ydGguY29tL3Byb2dyYW1taW5nL2ludGVybmV0LWV4cGxvcmVyLWFib3J0aW5nLWFqYXgtcmVxdWVzdHMtZml4ZWQvXG4gICAgcmVxdWVzdC5vbnByb2dyZXNzID0gZnVuY3Rpb24oKXt9O1xuICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24oKXt9O1xuXG4gIC8vIFhNTEhUVFBSZXF1ZXN0XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgZmlsZVVybCA9ICh1cmxJbmZvLnByb3RvY29sID09PSAnZmlsZTonIHx8IHdpbkxvYy5wcm90b2NvbCA9PT0gJ2ZpbGU6Jyk7XG5cbiAgICByZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHJlcXVlc3QucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICBpZiAocmVxdWVzdC50aW1lZG91dCkge1xuICAgICAgICAgIHJldHVybiBlcnJvckhhbmRsZXIoJ3RpbWVvdXQnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMjAwIHx8IGZpbGVVcmwgJiYgcmVxdWVzdC5zdGF0dXMgPT09IDApIHtcbiAgICAgICAgICBzdWNjZXNzSGFuZGxlcigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVycm9ySGFuZGxlcigpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmIChvcHRpb25zLnRpbWVvdXQpIHtcbiAgICAgIGFib3J0VGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAocmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSB7XG4gICAgICAgICAgcmVxdWVzdC50aW1lZG91dCA9IHRydWU7XG4gICAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICB9XG4gICAgICB9LCBvcHRpb25zLnRpbWVvdXQpO1xuICAgIH1cbiAgfVxuXG4gIC8vIG9wZW4gdGhlIGNvbm5lY3Rpb25cbiAgdHJ5IHtcbiAgICAvLyBUaGlyZCBhcmcgaXMgYXN5bmMsIG9yIGlnbm9yZWQgYnkgWERvbWFpblJlcXVlc3RcbiAgICByZXF1ZXN0Lm9wZW4ob3B0aW9ucy5tZXRob2QgfHwgJ0dFVCcsIG9wdGlvbnMudXJpLCB0cnVlKTtcbiAgfSBjYXRjaChlcnIpIHtcbiAgICByZXR1cm4gZXJyb3JIYW5kbGVyKGVycik7XG4gIH1cblxuICAvLyB3aXRoQ3JlZGVudGlhbHMgb25seSBzdXBwb3J0ZWQgYnkgWE1MSHR0cFJlcXVlc3QyXG4gIGlmKG9wdGlvbnMud2l0aENyZWRlbnRpYWxzKSB7XG4gICAgcmVxdWVzdC53aXRoQ3JlZGVudGlhbHMgPSB0cnVlO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMucmVzcG9uc2VUeXBlKSB7XG4gICAgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSBvcHRpb25zLnJlc3BvbnNlVHlwZTtcbiAgfVxuXG4gIC8vIHNlbmQgdGhlIHJlcXVlc3RcbiAgdHJ5IHtcbiAgICByZXF1ZXN0LnNlbmQoKTtcbiAgfSBjYXRjaChlcnIpIHtcbiAgICByZXR1cm4gZXJyb3JIYW5kbGVyKGVycik7XG4gIH1cblxuICByZXR1cm4gcmVxdWVzdDtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHhocjtcbiJdfQ==
