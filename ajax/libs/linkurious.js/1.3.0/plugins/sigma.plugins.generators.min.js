(function(){"use strict";function a(a){return a===a&&"[object Number]"===Object.prototype.toString.call(a)}function b(a){return"object"==typeof a&&!!a}if("undefined"==typeof sigma)throw new Error("sigma is not declared");sigma.utils.pkg("sigma.plugins"),sigma.plugins.generators={},sigma.plugins.generators.random=function(c){if(!c)throw new Error("Missing argument: options");if(!b(c))throw new TypeError("Invalid argument: options is not an object, was "+c);if(!a(c.nbNodes)||c.nbNodes<1)throw new TypeError("Invalid argument: options.nbNodes is not a positive number, was "+c.nbNodes);if(!a(c.nbEdges)||c.nbEdges<1)throw new TypeError("Invalid argument: options.nbEdges is not a number, was "+c.nbEdges);var d,e=c.nbNodes,f=c.nbEdges,g={nodes:[],edges:[]};for(d=0;e>d;d++)g.nodes.push({id:"n"+d,label:"Node "+d,x:Math.random(),y:Math.random(),size:1});for(d=0;f>d;d++)g.edges.push({id:"e"+d,label:"Edge "+d,source:"n"+(Math.random()*e|0),target:"n"+(Math.random()*e|0)});return g},sigma.plugins.generators.balancedTree=function(c){if(!c)throw new Error("Missing argument: options");if(!b(c))throw new TypeError("Invalid argument: options is not an object, was "+c);if(!a(c.nbChildren)||c.nbChildren<1)throw new TypeError("Invalid argument: options.nbChildren is not a positive number, was "+c.nbChildren);if(!a(c.height)||c.height<1)throw new TypeError("Invalid argument: options.height is not a positive number, was "+c.height);var d,e,f,g,h,i=0,j=0,k=c.nbChildren,l=c.height,m={nodes:[{id:"n0",label:"Node 0",x:Math.random(),y:Math.random(),size:1,index:0}],edges:[]},n=[];for(d=0;k>d;d++)g={id:"n"+ ++i,label:"Node "+i,x:Math.random(),y:Math.random(),size:1,index:i-1},m.nodes.push(g),n.push(g),m.edges.push({id:"e"+j++,label:"Edge "+j,source:"n0",target:"n"+i});for(f=1;l>f;f++)for(h=n,n=[],e=0;e<h.length;e++)for(d=0;k>d;d++)g={id:"n"+ ++i,label:"Node "+i,x:Math.random(),y:Math.random(),size:1,index:i-1},n.push(g),m.nodes.push(g),m.edges.push({id:"e"+j++,label:"Edge "+j,source:"n"+h[e].index,target:"n"+i});return m},sigma.plugins.generators.erdosRenyi=function(c){if(!c)throw new Error("Missing argument: options");if(!b(c))throw new TypeError("Invalid argument: options is not an object, was "+c);if(!a(c.nbNodes)||c.nbNodes<1)throw new TypeError("Invalid argument: options.nbNodes is not a positive number, was "+c.nbNodes);if(c.nbNodes<3)throw new TypeError("Invalid argument: options.nbNodes is smaller than 3, was "+c.nbNodes);if("nbEdges"in c&&"p"in c)throw new TypeError("Invalid argument: choose between options.nbEdges and options.p");var d,e,f,g={nodes:[],edges:[]},h=0,i=c.nbNodes,j=c.p;if(c.p>=0){if(!a(c.p)||c.p<0)throw new TypeError("Invalid argument: options.p is not a positive number, was "+c.p);for(e=0;i>e;e++)for(g.nodes.push({id:"n"+e,label:"Node "+e,x:Math.random(),y:Math.random(),size:1}),f=0;e>f;f++)Math.random()<j&&g.edges.push({id:"e"+h++,label:"Edge "+h,source:"n"+e,target:"n"+f})}else{if(!a(c.nbEdges)||c.nbEdges<1)throw new TypeError("Invalid argument: options.nbEdges is not a positive number, was "+c.nbEdges);var h,k=[],l=c.nbEdges;for(e=0;i>e;e++)for(g.nodes.push({id:"n"+e,label:"Node "+e,x:Math.random(),y:Math.random(),size:1}),f=e+1;i>f;f++)k.push({source:"n"+e,target:"n"+f});for(h=k.length-1,e=0;l>e;e++)d=k.splice(Math.floor(Math.random()*h),1)[0],d.id="e"+e,d.label="Edge "+e,g.edges.push(d),h--}return g},sigma.plugins.generators.barabasiAlbert=function(c){if(!c)throw new Error("Missing argument: options");if(!b(c))throw new TypeError("Invalid argument: options is not an object, was "+c);if(!a(c.nbNodes)||c.nbNodes<1)throw new TypeError("Invalid argument: options.nbNodes is not a positive number, was "+c.nbNodes);if(c.nbNodes<3)throw new TypeError("Invalid argument: options.nbNodes is smaller than 3, was "+c.nbNodes);if(!a(c.m0)||c.m0<=0)throw new TypeError("Invalid argument: options.m0 is not a positive number, was "+c.m0);if(!a(c.m)||c.m<=0)throw new TypeError("Invalid argument: options.m is not a positive number, was "+c.m);if(c.m0>=c.nbNode)throw new TypeError("Invalid argument: options.m0 is greater than options.nbNodes, was "+c.m0);if(c.m>c.m0)throw new TypeError("Invalid argument: options.m is strictly greater than options.m0, was "+c.m);var d,e,f,g,h,i,j,k,l={nodes:[],edges:[]},m={},n=[],o=0,p=c.nbNodes,q=c.m0,r=c.m;for(d=0;q>d;d++)l.nodes.push({id:"n"+d,label:"node "+d,x:Math.random(),y:Math.random(),size:1}),n[d]=0;for(d=0;q>d;d++)for(e=d+1;q>e;e++)f={id:"e"+o++,label:"Edge "+o,source:"n"+d,target:"n"+e},m[f.source+"-"+f.target]=f,l.edges.push(f),n[d]++,n[e]++;for(d=q;p>d;d++){for(l.nodes.push({id:"n"+d,label:"node "+d,x:Math.random(),y:Math.random(),size:1}),n[d]=0,g=0,e=0;d>e;e++)g+=n[e];for(h=0,i=0;r>i;i++)for(j=Math.random(),k=0,e=0;d>e;e++)if(!m[d+"-"+e]&&!m[e+"-"+d]&&(1==d?k=1:k+=n[e]/g+h/(d-i),k>=j)){h+=n[e]/g,f={id:"e"+o++,label:"Edge "+o,source:"n"+d,target:"n"+e},m[f.source+"-"+f.target]=f,l.edges.push(f),n[d]++,n[e]++;break}}return l},sigma.plugins.generators.wattsStrogatz=function(c){function d(a,b){if(a==b||k[a+"-"+b])return 0;var d=e(a,b);return d>=m?1:0===d?r:Math.pow(d/m,c.alpha)*(1-r)+r}function e(a,b){var c,d=0;for(c=0;l>c;c++)c!=a&&c!=b&&k[a+"-"+c]&&k[b+"-"+c]&&d++;return d}if(!c)throw new Error("Missing argument: options");if(!b(c))throw new TypeError("Invalid argument: options is not an object, was "+c);if(!a(c.nbNodes)||c.nbNodes<1)throw new TypeError("Invalid argument: options.nbNodes is not a positive number, was "+c.nbNodes);if(c.nbNodes<3)throw new TypeError("Invalid argument: options.nbNodes is smaller than 3, was "+c.nbNodes);if(!a(c.k)||c.k%2!=0)throw new TypeError("Invalid argument: options.k is not an even integer, was "+c.k);var f,g,h,i={nodes:[],edges:[]},j=0,k={},l=c.nbNodes,m=c.k;if("alpha"in c){if(!a(c.alpha)||c.alpha<0||c.alpha>1)throw new TypeError("Invalid argument: options.alpha is not a number between [0,1], was "+c.alpha);var n,o,p,q,r=Math.pow(10,-10),s=0,t=[],u=l*m/2;for(f=0;l>f;f++)i.nodes.push({id:"n"+f,label:"Node "+f,x:Math.random(),y:Math.random(),size:1}),h={id:"e"+j++,label:"Edge "+j,source:"n"+f,target:"n"+(f+1)%l},k[h.source+"-"+h.target]=h,i.edges.push(h),s++;for(;u>s;){for(f=0;l>f;f++)t.push(f);for(;u>s&&t.length>0;){for(f=t.splice(Math.floor(Math.random()*t.length),1)[0],n=[],o=0,g=0;l>g;g++)n[g]=d(f,g),o+=n[g];for(p=Math.random(),q=0,g=0;l>g;g++)f!=g&&(q+=n[g]/o,q>=p&&(h={id:"e"+j++,label:"Edge "+j,source:"n"+f,target:"n"+g},i.edges.push(h),s++,k[h.source+"-"+h.target]=h))}}}else{if(!a(c.beta)||c.beta<0||c.beta>1)throw new TypeError("Invalid argument: options.beta is not a number between [0,1], was "+c.beta);var v;for(m>>=1,f=0;l>f;f++)for(i.nodes.push({id:"n"+f,label:"node "+f,x:Math.random(),y:Math.random(),size:1}),g=1;m>=g;g++)h={id:"e"+j++,label:"Edge "+j,source:"n"+f,target:"n"+(f+g)%l},k[h.source+"-"+h.target]=h,i.edges.push(h);for(f=0;l>f;f++)for(g=1;m>=g;g++)if(Math.random()<=c.beta){do v=Math.floor(Math.random()*(l-1));while(v==f||k["n"+f+"-n"+v]);var w=(f+g)%l;k["n"+f+"-n"+w].target="n"+v,k["n"+f+"-n"+v]=k["n"+f+"-n"+w],delete k["n"+f+"-n"+w]}}return i},sigma.plugins.generators.path=function(a){if(!a||0>a)throw new TypeError('Invalid argument: "length" is not a positive number, was '+a);for(var b={nodes:[{id:"n0",label:"Node 0",x:Math.random(),y:Math.random(),size:1}],edges:[]},c=1;a>c;++c)b.nodes.push({id:"n"+c,label:"Node "+c,x:Math.random(),y:Math.random(),size:1}),b.edges.push({id:"e"+c,label:"Edge "+c,source:"n"+(c-1),target:"n"+c});return b},sigma.plugins.generators.grid=function(a,b){if(1>a)throw new TypeError('Invalid argument: "n" is not a positive integer, was '+a);if(1>b)throw new TypeError('Invalid argument: "m" is not a positive integer, was '+b);var c,d,e,f,g={nodes:[],edges:[]},h=0,i=[];if(i.length=a*b,1===a&&1===b)return g.nodes.push({id:"n0",label:"Node 0",x:Math.random(),y:Math.random(),size:1}),g;for(c=0;a>c;++c)for(d=0;b>d;++d)e=c+d*a,i[e]||(g.nodes.push({id:"n"+e,label:"Node "+e,x:Math.random(),y:Math.random(),size:1}),i[e]=!0),c>0&&(f=c-1+d*a,i[f]||(g.nodes.push({id:"n"+f,label:"Node "+f,x:Math.random(),y:Math.random(),size:1}),i[f]=!0),g.edges.push({id:"e"+h++,label:"Edge "+h,source:"n"+e,target:"n"+f})),d>0&&(f=c+(d-1)*a,i[f]||(g.nodes.push({id:"n"+f,label:"Node "+f,x:Math.random(),y:Math.random(),size:1}),i[f]=!0),g.edges.push({id:"e"+h++,label:"Edge "+h,source:"n"+e,target:"n"+f}));return g}}).call(this);
//# sourceMappingURL=sigma.plugins.generators.min.js.map