angular.module("multi-select",["ng"]).directive("multiSelect",["$sce","$filter",function($sce,$filter){return{restrict:"AE",replace:true,scope:{inputModel:"=",outputModel:"=",buttonLabel:"@",selectionMode:"@",itemLabel:"@",tickProperty:"@",disableProperty:"@",orientation:"@",defaultLabel:"@",maxLabels:"@",isDisabled:"=",directiveId:"@",helperElements:"@",onOpen:"&",onClose:"&",onBlur:"&",onFocus:"&"},template:'<span class="multiSelect inlineBlock" >'+'<button type="button" class="multiSelect button multiSelectButton" ng-click="toggleCheckboxes( $event ); refreshSelectedItems();" ng-bind-html="varButtonLabel" ng-focus="onFocus()" ng-blur="onBlur()">'+"</button>"+'<div class="multiSelect checkboxLayer hide">'+"<div class=\"multiSelect line\" ng-show=\"displayHelper( 'all' ) || displayHelper( 'none' ) || displayHelper( 'reset' )\">"+"<span ng-if=\"!isDisabled && ( displayHelper( 'all' ) || displayHelper( 'none' ) || displayHelper( 'reset' ))\">Select: &nbsp;</span>"+'<button type="button" ng-click="select( \'all\' )"    class="multiSelect helperButton" ng-if="!isDisabled && displayHelper( \'all\' )">All</button> '+'<button type="button" ng-click="select( \'none\' )"   class="multiSelect helperButton" ng-if="!isDisabled && displayHelper( \'none\' )">None</button> '+'<button type="button" ng-click="select( \'reset\' )"  class="multiSelect helperButton" ng-if="!isDisabled && displayHelper( \'reset\' )">Reset</button>'+"</div>"+'<div class="multiSelect line" ng-show="displayHelper( \'filter\' )">'+'Filter: <input class="multiSelect" type="text" ng-model="labelFilter" />'+'&nbsp;<button type="button" class="multiSelect helperButton" ng-click="labelFilter=\'\'">Clear</button>'+"</div>"+'<div ng-repeat="item in (filteredModel = (inputModel | filter:labelFilter ))" ng-class="orientation" class="multiSelect multiSelectItem">'+'<div class="multiSelect acol">'+'<div class="multiSelect" ng-show="item[ tickProperty ]">&#10004;</div>'+"</div>"+'<div class="multiSelect acol">'+'<label class="multiSelect" ng-class="{checkboxSelected:item[ tickProperty ]}">'+'<input class="multiSelect checkbox" type="checkbox" ng-disabled="itemIsDisabled( item )" ng-checked="item[ tickProperty ]" ng-click="syncItems( item, $event )"/>'+'<span class="multiSelect" ng-class="{disabled:itemIsDisabled( item )}" ng-bind-html="writeLabel( item, \'itemLabel\' )"></span>'+"</label>&nbsp;&nbsp;"+"</div>"+"</div>"+"</div>"+"</span>",link:function($scope,element,attrs){$scope.selectedItems=[];$scope.backUp=[];$scope.varButtonLabel="";$scope.currentButton=null;$scope.scrolled=false;$scope.displayHelper=function(elementString){if(typeof attrs.helperElements==="undefined"){return true}switch(elementString.toUpperCase()){case"ALL":if(attrs.selectionMode&&$scope.selectionMode.toUpperCase()==="SINGLE"){return false}else{if(attrs.helperElements&&$scope.helperElements.toUpperCase().indexOf("ALL")>=0){return true}}break;case"NONE":if(attrs.selectionMode&&$scope.selectionMode.toUpperCase()==="SINGLE"){return false}else{if(attrs.helperElements&&$scope.helperElements.toUpperCase().indexOf("NONE")>=0){return true}}break;case"RESET":if(attrs.helperElements&&$scope.helperElements.toUpperCase().indexOf("RESET")>=0){return true}break;case"FILTER":if(attrs.helperElements&&$scope.helperElements.toUpperCase().indexOf("FILTER")>=0){return true}break;default:break}$scope};$scope.syncItems=function(item,e){index=$scope.inputModel.indexOf(item);$scope.inputModel[index][$scope.tickProperty]=!$scope.inputModel[index][$scope.tickProperty];if(attrs.selectionMode&&$scope.selectionMode.toUpperCase()==="SINGLE"){$scope.inputModel[index][$scope.tickProperty]=true;for(i=0;i<$scope.inputModel.length;i++){if(i!==index){$scope.inputModel[i][$scope.tickProperty]=false}}$scope.toggleCheckboxes(e)}$scope.refreshSelectedItems();e.target.focus()};$scope.refreshSelectedItems=function(){$scope.varButtonLabel="";$scope.selectedItems=[];ctr=0;angular.forEach($scope.inputModel,function(value,key){if(typeof value!=="undefined"){if(value[$scope.tickProperty]===true||value[$scope.tickProperty]==="true"){$scope.selectedItems.push(value)}}});if(typeof attrs.outputModel!=="undefined"){$scope.outputModel=angular.copy($scope.selectedItems)}if($scope.selectedItems.length===0){$scope.varButtonLabel=$scope.defaultLabel?$scope.defaultLabel:"None selected"}else{var tempMaxLabels=$scope.selectedItems.length;if(typeof $scope.maxLabels!=="undefined"&&$scope.maxLabels!==""){tempMaxLabels=$scope.maxLabels}if($scope.selectedItems.length>tempMaxLabels){$scope.more=true}else{$scope.more=false}angular.forEach($scope.selectedItems,function(value,key){if(typeof value!=="undefined"){if(ctr<tempMaxLabels){$scope.varButtonLabel+=($scope.varButtonLabel.length>0?", ":"")+$scope.writeLabel(value,"buttonLabel")}ctr++}});if($scope.more===true){if(tempMaxLabels>0){$scope.varButtonLabel+=", ... "}$scope.varButtonLabel+="(Total: "+$scope.selectedItems.length+")"}}$scope.varButtonLabel=$sce.trustAsHtml($scope.varButtonLabel+'<span class="multiSelect caret"></span>')};$scope.itemIsDisabled=function(item){if(item[$scope.disableProperty]===true){return true}else{$scope;if($scope.isDisabled===true){return true}else{return false}}};$scope.writeLabel=function(item,type){var label="";var temp=$scope[type].split(" ");angular.forEach(temp,function(value2,key2){if(typeof value2!=="undefined"){angular.forEach(item,function(value1,key1){if(key1==value2){label+=" "+value1}})}});return $sce.trustAsHtml(label)};$scope.toggleCheckboxes=function(e){if(e.target){if(e.target.tagName.toUpperCase()!=="BUTTON"&&e.target.className.indexOf("multiSelectButton")<0){if(attrs.selectionMode&&$scope.selectionMode.toUpperCase()==="SINGLE"){if(e.target.tagName.toUpperCase()==="INPUT"){e=$scope.findUpTag(e.target,"div","checkboxLayer");e=e.previousSibling}}else{e=$scope.findUpTag(e.target,"button","multiSelectButton")}}else{e=e.target}}$scope.labelFilter="";var multiSelectIndex=-1;var checkboxes=document.querySelectorAll(".checkboxLayer");var multiSelectButtons=document.querySelectorAll(".multiSelectButton");for(i=0;i<multiSelectButtons.length;i++){if(e===multiSelectButtons[i]){multiSelectIndex=i;break}}if(multiSelectIndex>-1){for(i=0;i<checkboxes.length;i++){if(i!=multiSelectIndex){checkboxes[i].className="multiSelect checkboxLayer hide"}}if(checkboxes[multiSelectIndex].className=="multiSelect checkboxLayer hide"){$scope.currentButton=multiSelectButtons[multiSelectIndex];checkboxes[multiSelectIndex].className="multiSelect checkboxLayer show";$scope.onOpen()}else if(checkboxes[multiSelectIndex].className=="multiSelect checkboxLayer show"){checkboxes[multiSelectIndex].className="multiSelect checkboxLayer hide";$scope.onClose()}}};$scope.findUpTag=function(el,tag,className){while(el.parentNode){el=el.parentNode;if(typeof el.tagName!=="undefined"){if(el.tagName.toUpperCase()===tag.toUpperCase()&&el.className.indexOf(className)>-1){return el}}}return null};$scope.select=function(type){var temp=[];switch(type.toUpperCase()){case"ALL":angular.forEach($scope.inputModel,function(value,key){if(typeof value!=="undefined"&&value[$scope.disableProperty]!==true){value[$scope.tickProperty]=true}});break;case"NONE":angular.forEach($scope.inputModel,function(value,key){if(typeof value!=="undefined"&&value[$scope.disableProperty]!==true){value[$scope.tickProperty]=false}});break;case"RESET":$scope.inputModel=angular.copy($scope.backUp);break;default:}$scope.refreshSelectedItems()};validate=function(){if(!("inputModel"in attrs)){console.log("Multi-select error: input-model is not defined! (ID: "+$scope.directiveId+")")}if(!("buttonLabel"in attrs)){console.log("Multi-select error: button-label is not defined! (ID: "+$scope.directiveId+")")}if(!("itemLabel"in attrs)){console.log("Multi-select error: item-label is not defined! (ID: "+$scope.directiveId+")")}if(!("tickProperty"in attrs)){console.log("Multi-select error: tick-property is not defined! (ID: "+$scope.directiveId+")")}};validateProperties=function(arrProperties,arrObject){var notThere=false;var missingProperty="";angular.forEach(arrProperties,function(value1,key1){if(typeof value1!=="undefined"){var keepGoing=true;angular.forEach(arrObject,function(value2,key2){if(typeof value2!=="undefined"&&keepGoing){if(!(value1 in value2)){notThere=true;keepGoing=false;missingLabel=value1}}})}});if(notThere===true){console.log('Multi-select error: property "'+missingLabel+'" is not available in the input model. (Name: '+$scope.directiveId+")")}};validate();$scope.refreshSelectedItems();$scope.$watch("inputModel",function(oldVal,newVal){if($scope.newVal!=="undefined"){validateProperties($scope.itemLabel.split(" "),$scope.inputModel);validateProperties(new Array($scope.tickProperty),$scope.inputModel)}$scope.refreshSelectedItems()},true);$scope.$watch("inputModel",function(oldVal,newVal){if($scope.newVal!=="undefined"){validateProperties($scope.itemLabel.split(" "),$scope.inputModel);validateProperties(new Array($scope.tickProperty),$scope.inputModel)}$scope.backUp=angular.copy($scope.inputModel);$scope.refreshSelectedItems()});$scope.$watch("isDisabled",function(newVal){$scope.isDisabled=newVal});angular.element(document).bind("touchstart",function(e){$scope.$apply(function(){$scope.scrolled=false})});angular.element(document).bind("touchmove",function(e){$scope.$apply(function(){$scope.scrolled=true})});angular.element(document).bind("click touchend",function(e){if(e.type==="click"||e.type==="touchend"&&$scope.scrolled===false){var checkboxes=document.querySelectorAll(".checkboxLayer");if(e.target.className.indexOf===undefined||e.target.className.indexOf("multiSelect")){for(i=0;i<checkboxes.length;i++){checkboxes[i].className="multiSelect checkboxLayer hide"}e.stopPropagation()}}});if(!Array.prototype.indexOf){Array.prototype.indexOf=function(what,i){i=i||0;var L=this.length;while(i<L){if(this[i]===what)return i;++i}return-1}}}}}]);
