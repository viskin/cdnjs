if(typeof module!=="undefined"&&typeof exports!=="undefined"&&module.exports===exports){module.exports="ui.date"}(function(angular){"use strict";angular.module("ui.date",[]).constant("uiDateConfig",{}).constant("uiDateFormatConfig","").factory("uiDateConverter",["uiDateFormatConfig",function(uiDateFormatConfig){return{stringToDate:stringToDate,dateToString:dateToString};function dateToString(dateFormat,value){dateFormat=dateFormat||uiDateFormatConfig;if(value){if(dateFormat){return jQuery.datepicker.formatDate(dateFormat,value)}if(value.toISOString){return value.toISOString()}}return null}function stringToDate(dateFormat,value){dateFormat=dateFormat||uiDateFormatConfig;if(angular.isString(value)){if(dateFormat){return jQuery.datepicker.parseDate(dateFormat,value)}var isoDate=new Date(value);return isNaN(isoDate.getTime())?null:isoDate}return null}}]).directive("uiDate",["uiDateConfig","uiDateConverter",function(uiDateConfig,uiDateConverter){angular.extend({},uiDateConfig);return{require:"?ngModel",link:function(scope,element,attrs,controller){var getOptions=function(){return angular.extend({},uiDateConfig,scope.$eval(attrs.uiDate))};var initDateWidget=function(){var showing=false;var opts=getOptions();function setVal(){var keys=["Hours","Minutes","Seconds","Milliseconds"];var isDate=angular.isDate(controller.$modelValue);var preserve={};if(isDate&&controller.$modelValue.toDateString()===element.datepicker("getDate").toDateString()){return}if(isDate){angular.forEach(keys,function(key){preserve[key]=controller.$modelValue["get"+key]()})}controller.$setViewValue(element.datepicker("getDate"));if(isDate){angular.forEach(keys,function(key){controller.$viewValue["set"+key](preserve[key])})}}if(controller){var _onSelect=opts.onSelect||angular.noop;opts.onSelect=function(value,picker){scope.$apply(function(){showing=true;setVal();_onSelect(value,picker);element.blur()})};var _beforeShow=opts.beforeShow||angular.noop;opts.beforeShow=function(input,picker){showing=true;_beforeShow(input,picker)};var _onClose=opts.onClose||angular.noop;opts.onClose=function(value,picker){showing=false;_onClose(value,picker)};element.off("blur.datepicker").on("blur.datepicker",function(){if(!showing){scope.$apply(function(){element.datepicker("setDate",element.datepicker("getDate"));setVal()})}});controller.$render=function(){var date=controller.$modelValue;if(angular.isDefined(date)&&date!==null&&!angular.isDate(date)){if(angular.isString(controller.$modelValue)){date=uiDateConverter.stringToDate(attrs.uiDateFormat,controller.$modelValue)}else{throw new Error("ng-Model value must be a Date, or a String object with a date formatter - currently it is a "+typeof date+" - use ui-date-format to convert it from a string")}}element.datepicker("setDate",date)}}if(element.data("datepicker")){element.datepicker("option",opts);element.datepicker("refresh")}else{element.datepicker(opts);element.on("$destroy",function(){element.datepicker("hide");element.datepicker("destroy")})}if(controller){controller.$render()}};scope.$watch(getOptions,initDateWidget,true)}}}]).directive("uiDateFormat",["uiDateConverter",function(uiDateConverter){return{require:"ngModel",link:function(scope,element,attrs,modelCtrl){var dateFormat=attrs.uiDateFormat;modelCtrl.$formatters.unshift(function(value){return uiDateConverter.stringToDate(dateFormat,value)});modelCtrl.$parsers.push(function(value){return uiDateConverter.dateToString(dateFormat,value)})}}}])})(angular);
