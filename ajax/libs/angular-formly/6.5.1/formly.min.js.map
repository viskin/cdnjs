{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///formly.min.js","webpack:///webpack/bootstrap 444e93e49149bd679ed0","webpack:///./index.js","webpack:///./angular-fix/index.js","webpack:///./other/utils.js","webpack:///./directives/formly-custom-validation.js","webpack:///./directives/formly-field.js","webpack:///./directives/formly-focus.js","webpack:///./directives/formly-form.js","webpack:///./index.common.js","webpack:///./providers/formlyApiCheck.js","webpack:///./providers/formlyConfig.js","webpack:///./providers/formlyUsability.js","webpack:///./providers/formlyValidationMessages.js","webpack:///./run/formlyCustomTags.js","webpack:///./run/formlyNgModelAttrsManipulator.js","webpack:///./services/formlyUtil.js","webpack:///./services/formlyWarn.js","webpack:///external \"angular\"","webpack:///external {\"root\":\"apiCheck\",\"amd\":\"api-check\",\"commonjs2\":\"api-check\",\"commonjs\":\"api-check\"}"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_17__","__WEBPACK_EXTERNAL_MODULE_18__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequire","obj","__esModule","index","angular","version","window","formlyEval","scope","expression","$modelValue","$viewValue","extraLocals","isFunction","$eval","extend","getFieldId","formId","options","type","template","templateUrl","key","join","reverseDeepMerge","dest","forEach","arguments","src","val","prop","isDefined","objAndSameType","copy","obj1","obj2","isObject","Object","getPrototypeOf","findByNodeName","el","nodeName","element","toUpperCase","children","i","length","node","arrayify","isArray","extendFunction","_len","fns","Array","_key","args","fn","apply","formlyCustomValidation","formlyUtil","$q","isPromiseLike","then","checkValidators","validators","allowedProperties","validatorsWithExtraProps","validator","name","isString","extraProps","v","indexOf","push","keys","Error","JSON","stringify","restrict","link","attrs","ctrl","opts","validation","messages","message","useNewValidatorsApi","hasOwnProperty","setupWithValidators","validatorCollection","isPossiblyAsync","modelValue","viewValue","value","when","reject","setupWithParsers","inFlightValidator","undefined","$parsers","unshift","isValid","$pending","$setValidity","$inject","formlyField","$http","$compile","$templateCache","formlyConfig","formlyValidationMessages","formlyApiCheck","formlyUsability","formlyWarn","FormlyFieldController","$scope","$timeout","$parse","$controller","runExpressions","field","currentValue","valueGetterSetter","expressionProperties","setter","assign","promise","newVal","model","simplifyLife","data","templateOptions","to","setDefaultValue","defaultValue","setInitialValue","initialValue","mergeFieldOptionsWithTypeDefaults","mergeOptions","defaultOptions","properOrder","optionsTypes","reverse","typeName","getType","extraOptions","extendOptionsWithDefaults","resetModel","updateInitialValue","addModelWatcher","$watch","formControl","$setViewValue","$render","$setUntouched","$setPristine","addValidationMessages","invokeControllers","controller","setupFieldGroup","formState","fieldGroup","fieldType","getFieldType","checkApi","fieldLink","setFieldGroupTemplate","checkFieldGroupApi","addClass","extraAttributes","elementAttributes","map","setElementTemplate","className","addAttributes","attr","addClasses","templateString","html","asHtml","contents","watchFormControl","watchFieldNameOrExistence","nameExpressionRegex","nameExpression","exec","watchFieldName","watchFieldExistence","stopWatchingField","fc","stopWatchingShowError","addShowMessagesWatcher","customExpression","extras","errorExistsAndShouldBeVisibleExpression","$invalid","show","noTouchedButDirty","isUndefined","$touched","$dirty","errorExistsAndShouldBeVisible","showError","noop","noFormControl","templateEl","ngModelNode","querySelector","getAttribute","callLinkFunctions","thusly","runManipulators","manipulators","chain","manipulator","newTemplate","getFieldTemplate","templateManipulators","preWrapper","transcludeInWrappers","postWrapper","error","wrapper","append","fromOptionsOrType","getFieldError","getTemplate","isUrl","templatePromise","_ret","httpOptions","cache","url","get","response","getWrapperOption","checkWrapper","validateOptions","runApiCheck","promises","w","all","wrappersTemplates","wrapperTemplate","checkWrapperTemplate","totalWrapper","shift","doTransclusion","superWrapper","transcludeEl","find","replaceWith","getWrapper","getWrapperByType","typeWrappers","concat","defaultWrapper","formlyFieldOptions","prefix","_ref","apiCheck","apiCheckInstance","apiCheckFunction","apiCheckOptions","instance","shape","config","output","docsBaseUrl","transclude","fields","form","formlyFocus","$document","previousEl","doc","$observe","activeElement","focus","focusWait","blur","formlyForm","currentFormId","getRootEl","rootEl","getFieldRootEl","fieldRootEl","getHideDirective","hideDirective","defaultHideDirective","getTrackBy","trackBy","getFormName","formName","bindName","minor","getFormlyError","copyAttributes","attributes","excluded","arrayAttrs","nodeValue","toKebabCase","string","replace","$1","toLowerCase","parentFormAttributes","parent","hasClass","onModelOrFormStateChange","hideExpression","hide","setupOptions","formOptionsApi","optional","isFieldGroup","attachKey","setupWatchers","watcher","watchers","listener","watchExpression","getWatchExpression","watchListener","getWatchListener","stopWatching","watchDeep","originalExpression","modifyArgs","_slice","_toConsumableArray","displayName","originalListener","originalArgs","$parent","global","removeChromeAutoComplete","offInstance","onInstance","input","document","createElement","setAttribute","appendChild","arr","arr2","from","prototype","slice","formlyErrorAndWarningsUrlPrefix","formlyNgModelAttrsManipulator","formlyCustomTags","ngModuleName","ngModule","constant","provider","directive","run","shapeRequiredIfNot","otherProps","propChecker","shapeRequiredIfNotDefinition","propName","location","propExists","otherPropsExist","some","otherProp","utils","getError","checkerHelpers","setupChecker","apiCheckFactory","formlyExpression","oneOfType","func","specifyWrapperType","oneOf","typeOrArrayOf","apiCheckProperty","objectOf","apiCheckInstanceProperty","onlyIf","withProperties","warn","throw","apiCheckFunctionProperty","formlyWrapperType","ifNot","types","overwriteOk","bool","object","strict","fieldOptionsApiShape","$$hashKey","any","number","modelOptions","updateOn","debounce","allowInvalid","getterSetter","timezone","ngModelAttrs","attribute","bound","array","arrayOf","typeOptionsDefaultOptions","formlyTypeOptions","extends","formlyUsabilityProvider","setType","checkType","extendTypeOptions","typeMap","checkOverwrite","extendsType","extendTypeControllerFunction","extendTypeLinkFunction","extendTypeValidateOptionsFunction","extendTypeDefaultOptions","extendTemplate","extendsCtrl","optionsCtrl","extendsFn","optionsFn","originalDefaultOptions","mergedOptions","extendsDO","optionsDO","optionsDOIsFn","extendsDOIsFn","extendsDefaultOptions","mergedDefaultOptions","extenderOptionsDefaultOptions","newDefaultOptions","throwError","errorContext","setWrapper","_x","_x2","_again","wrapperOptions","getOptionsTypes","getOptionsName","checkWrapperAPI","templateWrappersMap","defaultWrapperName","checkWrapperTypes","shouldThrow","every","property","newValue","objectName","wrappers","removeWrapperByName","removeWrappersForType","_this","disableWarnings","console","_this2","disableNgModelAttrsManipulator","ngModelAttrsManipulatorPreferUnbound","$get","errorInfoSlug","getErrorMessage","toJson","urlSuffix","additionalInfo","formlyTransclude","addTemplateOptionValueMessage","suffix","alternate","validationMessages","templateOptionValue","addStringMessage","addCustomTags","div","innerHTML","isIeLessThan9","getElementsByTagName","customElements","addFormlyNgModelAttrsManipulator","ngModelAttrsManipulator","addValidation","addIfNotPresent","modelNodes","addModelOptions","addTemplateOptionsAttrs","ep","ngModelAttributes","getBuiltInAttributes","attrVal","attrName","ref","toVal","epVal","getEpValue","inTo","inEp","skipNgModelAttrsManipulator","querySelectorAll","boundOnly","bothBooleanAndBound","bothAttributeAndBound","expressionOnly","attributeOnly","item","boolean","substr","nodes","$log","warnInfoSlug"],"mappings":"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","file":"formly.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"angular\"), require(\"api-check\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"angular\", \"api-check\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ngFormly\"] = factory(require(\"angular\"), require(\"api-check\"));\n\telse\n\t\troot[\"ngFormly\"] = factory(root[\"angular\"], root[\"apiCheck\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_17__, __WEBPACK_EXTERNAL_MODULE_18__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"angular\"), require(\"api-check\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"angular\", \"api-check\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ngFormly\"] = factory(require(\"angular\"), require(\"api-check\"));\n\telse\n\t\troot[\"ngFormly\"] = factory(root[\"angular\"], root[\"apiCheck\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_17__, __WEBPACK_EXTERNAL_MODULE_18__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _interopRequire = function (obj) { return obj && obj.__esModule ? obj[\"default\"] : obj; };\n\t\n\tvar index = _interopRequire(__webpack_require__(8));\n\t\n\tmodule.exports = index;\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _interopRequire = function (obj) { return obj && obj.__esModule ? obj[\"default\"] : obj; };\n\t\n\t// some versions of angular don't export the angular module properly,\n\t// so we get it from window in this case.\n\t\n\tvar angular = _interopRequire(__webpack_require__(17));\n\t\n\tif (!angular.version) {\n\t  angular = window.angular;\n\t}\n\tmodule.exports = angular;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = \"https://github.com/formly-js/angular-formly/blob/\" + (\"6.5.1\") + \"/other/ERRORS_AND_WARNINGS.md#\";\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _interopRequire = function (obj) { return obj && obj.__esModule ? obj[\"default\"] : obj; };\n\t\n\tvar angular = _interopRequire(__webpack_require__(1));\n\t\n\tmodule.exports = { formlyEval: formlyEval, getFieldId: getFieldId, reverseDeepMerge: reverseDeepMerge, findByNodeName: findByNodeName, arrayify: arrayify, extendFunction: extendFunction };\n\t\n\tfunction formlyEval(scope, expression, $modelValue, $viewValue, extraLocals) {\n\t  if (angular.isFunction(expression)) {\n\t    return expression($viewValue, $modelValue, scope, extraLocals);\n\t  } else {\n\t    return scope.$eval(expression, angular.extend({ $viewValue: $viewValue, $modelValue: $modelValue }, extraLocals));\n\t  }\n\t}\n\t\n\tfunction getFieldId(formId, options, index) {\n\t  var type = options.type;\n\t  if (!type && options.template) {\n\t    type = \"template\";\n\t  } else if (!type && options.templateUrl) {\n\t    type = \"templateUrl\";\n\t  }\n\t\n\t  return [formId, type, options.key, index].join(\"_\");\n\t}\n\t\n\tfunction reverseDeepMerge(dest) {\n\t  angular.forEach(arguments, function (src, index) {\n\t    if (!index) {\n\t      return;\n\t    }\n\t    angular.forEach(src, function (val, prop) {\n\t      if (!angular.isDefined(dest[prop])) {\n\t        dest[prop] = angular.copy(val);\n\t      } else if (objAndSameType(dest[prop], val)) {\n\t        reverseDeepMerge(dest[prop], val);\n\t      }\n\t    });\n\t  });\n\t}\n\t\n\tfunction objAndSameType(obj1, obj2) {\n\t  return angular.isObject(obj1) && angular.isObject(obj2) && Object.getPrototypeOf(obj1) === Object.getPrototypeOf(obj2);\n\t}\n\t\n\t//recurse down a node tree to find a node with matching nodeName, for custom tags jQuery.find doesn't work in IE8\n\tfunction findByNodeName(el, nodeName) {\n\t  if (!el.prop) {\n\t    // not a jQuery or jqLite object -> wrap it\n\t    el = angular.element(el);\n\t  }\n\t\n\t  if (el.prop(\"nodeName\") === nodeName.toUpperCase()) {\n\t    return el;\n\t  }\n\t\n\t  var c = el.children();\n\t  for (var i = 0; c && i < c.length; i++) {\n\t    var node = findByNodeName(c[i], nodeName);\n\t    if (node) {\n\t      return node;\n\t    }\n\t  }\n\t}\n\t\n\tfunction arrayify(obj) {\n\t  if (obj && !angular.isArray(obj)) {\n\t    obj = [obj];\n\t  } else if (!obj) {\n\t    obj = [];\n\t  }\n\t  return obj;\n\t}\n\t\n\tfunction extendFunction() {\n\t  for (var _len = arguments.length, fns = Array(_len), _key = 0; _key < _len; _key++) {\n\t    fns[_key] = arguments[_key];\n\t  }\n\t\n\t  return function extendedFunction() {\n\t    var args = arguments;\n\t    fns.forEach(function (fn) {\n\t      return fn.apply(null, args);\n\t    });\n\t  };\n\t}\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = formlyCustomValidation;\n\t\n\t// @ngInject\n\tfunction formlyCustomValidation(formlyUtil, $q) {\n\t  return {\n\t    restrict: \"A\",\n\t    require: \"ngModel\",\n\t    link: function formlyCustomValidationLink(scope, el, attrs, ctrl) {\n\t      var opts = scope.options;\n\t      if (opts.validators) {\n\t        checkValidators(opts.validators);\n\t      }\n\t      opts.validation.messages = opts.validation.messages || {};\n\t      angular.forEach(opts.validation.messages, function (message, key) {\n\t        opts.validation.messages[key] = function () {\n\t          return formlyUtil.formlyEval(scope, message, ctrl.$modelValue, ctrl.$viewValue);\n\t        };\n\t      });\n\t\n\t      var useNewValidatorsApi = ctrl.hasOwnProperty(\"$validators\") && !attrs.hasOwnProperty(\"useParsers\");\n\t      angular.forEach(opts.validators, function addValidatorToPipeline(validator, name) {\n\t        var message = validator.message;\n\t        if (message) {\n\t          opts.validation.messages[name] = function () {\n\t            return formlyUtil.formlyEval(scope, message, ctrl.$modelValue, ctrl.$viewValue);\n\t          };\n\t        }\n\t        validator = angular.isObject(validator) ? validator.expression : validator;\n\t        var isPossiblyAsync = !angular.isString(validator);\n\t        if (useNewValidatorsApi) {\n\t          setupWithValidators();\n\t        } else {\n\t          setupWithParsers();\n\t        }\n\t\n\t        function setupWithValidators() {\n\t          var validatorCollection = isPossiblyAsync ? \"$asyncValidators\" : \"$validators\";\n\t          ctrl[validatorCollection][name] = function evalValidity(modelValue, viewValue) {\n\t            var value = formlyUtil.formlyEval(scope, validator, modelValue, viewValue);\n\t            if (isPossiblyAsync) {\n\t              return isPromiseLike(value) ? value : value ? $q.when(value) : $q.reject(value);\n\t            } else {\n\t              return value;\n\t            }\n\t          };\n\t        }\n\t\n\t        function setupWithParsers() {\n\t          var inFlightValidator = undefined;\n\t          ctrl.$parsers.unshift(function evalValidityOfParser(viewValue) {\n\t            var isValid = formlyUtil.formlyEval(scope, validator, ctrl.$modelValue, viewValue);\n\t            if (isPromiseLike(isValid)) {\n\t              ctrl.$pending = ctrl.$pending || {};\n\t              ctrl.$pending[name] = true;\n\t              inFlightValidator = isValid;\n\t              isValid.then(function () {\n\t                if (inFlightValidator === isValid) {\n\t                  ctrl.$setValidity(name, true);\n\t                }\n\t              })[\"catch\"](function () {\n\t                if (inFlightValidator === isValid) {\n\t                  ctrl.$setValidity(name, false);\n\t                }\n\t              })[\"finally\"](function () {\n\t                if (Object.keys(ctrl.$pending).length === 1) {\n\t                  delete ctrl.$pending;\n\t                } else {\n\t                  delete ctrl.$pending[name];\n\t                }\n\t              });\n\t            } else {\n\t              ctrl.$setValidity(name, isValid);\n\t            }\n\t            return viewValue;\n\t          });\n\t        }\n\t      });\n\t    }\n\t  };\n\t\n\t  function isPromiseLike(obj) {\n\t    return obj && angular.isFunction(obj.then);\n\t  }\n\t\n\t  function checkValidators(validators) {\n\t    var allowedProperties = [\"expression\", \"message\"];\n\t    var validatorsWithExtraProps = {};\n\t    angular.forEach(validators, function (validator, name) {\n\t      if (angular.isString(validator)) {\n\t        return;\n\t      }\n\t      var extraProps = [];\n\t      angular.forEach(validator, function (v, key) {\n\t        if (allowedProperties.indexOf(key) === -1) {\n\t          extraProps.push(key);\n\t        }\n\t      });\n\t      if (extraProps.length) {\n\t        validatorsWithExtraProps[name] = extraProps;\n\t      }\n\t    });\n\t    if (Object.keys(validatorsWithExtraProps).length) {\n\t      throw new Error([\"Validators are only allowed to be functions or objects that have \" + allowedProperties.join(\", \") + \".\", \"You provided some extra properties: \" + JSON.stringify(validatorsWithExtraProps)].join(\" \"));\n\t    }\n\t  }\n\t}\n\tformlyCustomValidation.$inject = [\"formlyUtil\", \"$q\"];\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _interopRequire = function (obj) { return obj && obj.__esModule ? obj[\"default\"] : obj; };\n\t\n\tvar angular = _interopRequire(__webpack_require__(1));\n\t\n\tmodule.exports = formlyField;\n\t\n\t/**\n\t * @ngdoc directive\n\t * @name formlyField\n\t * @restrict AE\n\t */\n\t// @ngInject\n\tfunction formlyField($http, $q, $compile, $templateCache, formlyConfig, formlyValidationMessages, formlyApiCheck, formlyUtil, formlyUsability, formlyWarn) {\n\t  var arrayify = formlyUtil.arrayify;\n\t\n\t  FormlyFieldController.$inject = [\"$scope\", \"$timeout\", \"$parse\", \"$controller\"];\n\t  return {\n\t    restrict: \"AE\",\n\t    transclude: true,\n\t    scope: {\n\t      options: \"=\",\n\t      model: \"=\",\n\t      formId: \"@\",\n\t      index: \"=?\",\n\t      fields: \"=?\",\n\t      formState: \"=?\",\n\t      form: \"=?\"\n\t    },\n\t    controller: FormlyFieldController,\n\t    link: fieldLink\n\t  };\n\t\n\t  // @ngInject\n\t  function FormlyFieldController($scope, $timeout, $parse, $controller) {\n\t    /* jshint maxstatements:31 */\n\t    if ($scope.options.fieldGroup) {\n\t      setupFieldGroup();\n\t      return;\n\t    }\n\t\n\t    var fieldType = getFieldType($scope.options);\n\t    simplifyLife($scope.options);\n\t    mergeFieldOptionsWithTypeDefaults($scope.options, fieldType);\n\t    extendOptionsWithDefaults($scope.options, $scope.index);\n\t    checkApi($scope.options);\n\t    // set field id to link labels and fields\n\t    $scope.id = formlyUtil.getFieldId($scope.formId, $scope.options, $scope.index);\n\t\n\t    // initalization\n\t    setDefaultValue();\n\t    setInitialValue();\n\t    runExpressions();\n\t    addModelWatcher($scope, $scope.options);\n\t    addValidationMessages($scope.options);\n\t    invokeControllers($scope, $scope.options, fieldType);\n\t\n\t    // function definitions\n\t    function runExpressions() {\n\t      // must run on next tick to make sure that the current value is correct.\n\t      $timeout(function runExpressionsOnNextTick() {\n\t        var field = $scope.options;\n\t        var currentValue = valueGetterSetter();\n\t        angular.forEach(field.expressionProperties, function runExpression(expression, prop) {\n\t          var setter = $parse(prop).assign;\n\t          var promise = $q.when(formlyUtil.formlyEval($scope, expression, currentValue));\n\t          promise.then(function setFieldValue(value) {\n\t            setter(field, value);\n\t          });\n\t        });\n\t      });\n\t    }\n\t\n\t    function valueGetterSetter(newVal) {\n\t      if (!$scope.model || !$scope.options.key) {\n\t        return;\n\t      }\n\t      if (angular.isDefined(newVal)) {\n\t        $scope.model[$scope.options.key] = newVal;\n\t      }\n\t      return $scope.model[$scope.options.key];\n\t    }\n\t\n\t    function simplifyLife(options) {\n\t      // add a few empty objects (if they don't already exist) so you don't have to undefined check everywhere\n\t      formlyUtil.reverseDeepMerge(options, {\n\t        data: {},\n\t        templateOptions: {},\n\t        validation: {}\n\t      });\n\t      // create $scope.to so template authors can reference to instead of $scope.options.templateOptions\n\t      $scope.to = $scope.options.templateOptions;\n\t    }\n\t\n\t    function setDefaultValue() {\n\t      if (angular.isDefined($scope.options.defaultValue) && !angular.isDefined($scope.model[$scope.options.key])) {\n\t        $scope.model[$scope.options.key] = $scope.options.defaultValue;\n\t      }\n\t    }\n\t\n\t    function setInitialValue() {\n\t      $scope.options.initialValue = $scope.model && $scope.model[$scope.options.key];\n\t    }\n\t\n\t    function mergeFieldOptionsWithTypeDefaults(options, type) {\n\t      if (type) {\n\t        mergeOptions(options, type.defaultOptions);\n\t      }\n\t      var properOrder = arrayify(options.optionsTypes).reverse(); // so the right things are overridden\n\t      angular.forEach(properOrder, function (typeName) {\n\t        mergeOptions(options, formlyConfig.getType(typeName, true, options).defaultOptions);\n\t      });\n\t    }\n\t\n\t    function mergeOptions(options, extraOptions) {\n\t      if (extraOptions) {\n\t        if (angular.isFunction(extraOptions)) {\n\t          extraOptions = extraOptions(options);\n\t        }\n\t        formlyUtil.reverseDeepMerge(options, extraOptions);\n\t      }\n\t    }\n\t\n\t    function extendOptionsWithDefaults(options, index) {\n\t      var key = options.key || index || 0;\n\t      angular.extend(options, {\n\t        // attach the key in case the formly-field directive is used directly\n\t        key: key,\n\t        value: valueGetterSetter,\n\t        runExpressions: runExpressions,\n\t        resetModel: resetModel,\n\t        updateInitialValue: updateInitialValue\n\t      });\n\t    }\n\t\n\t    // initialization functions\n\t    function addModelWatcher(scope, options) {\n\t      if (options.model) {\n\t        scope.$watch(\"options.model\", runExpressions, true);\n\t      }\n\t    }\n\t\n\t    function resetModel() {\n\t      $scope.model[$scope.options.key] = $scope.options.initialValue;\n\t      if ($scope.options.formControl) {\n\t        $scope.options.formControl.$setViewValue($scope.model[$scope.options.key]);\n\t        $scope.options.formControl.$render();\n\t        $scope.options.formControl.$setUntouched();\n\t        $scope.options.formControl.$setPristine();\n\t      }\n\t    }\n\t\n\t    function updateInitialValue() {\n\t      $scope.options.initialValue = $scope.model[$scope.options.key];\n\t    }\n\t\n\t    function addValidationMessages(options) {\n\t      options.validation.messages = options.validation.messages || {};\n\t      angular.forEach(formlyValidationMessages.messages, function createFunctionForMessage(expression, name) {\n\t        if (!options.validation.messages[name]) {\n\t          options.validation.messages[name] = function evaluateMessage(viewValue, modelValue, scope) {\n\t            return formlyUtil.formlyEval(scope, expression, modelValue, viewValue);\n\t          };\n\t        }\n\t      });\n\t    }\n\t\n\t    function invokeControllers(scope) {\n\t      var options = arguments[1] === undefined ? {} : arguments[1];\n\t      var type = arguments[2] === undefined ? {} : arguments[2];\n\t\n\t      angular.forEach([type.controller, options.controller], function (controller) {\n\t        if (controller) {\n\t          $controller(controller, { $scope: scope });\n\t        }\n\t      });\n\t    }\n\t\n\t    function setupFieldGroup() {\n\t      $scope.options.options = $scope.options.options || {};\n\t      $scope.options.options.formState = $scope.formState;\n\t    }\n\t  }\n\t\n\t  // link function\n\t  function fieldLink(scope, el) {\n\t    if (scope.options.fieldGroup) {\n\t      setFieldGroupTemplate();\n\t      return;\n\t    }\n\t\n\t    addAttributes();\n\t    addClasses();\n\t\n\t    var type = getFieldType(scope.options);\n\t    var args = arguments;\n\t    var thusly = this;\n\t    getFieldTemplate(scope.options).then(runManipulators(formlyConfig.templateManipulators.preWrapper)).then(transcludeInWrappers(scope.options)).then(runManipulators(formlyConfig.templateManipulators.postWrapper)).then(setElementTemplate).then(watchFormControl).then(callLinkFunctions)[\"catch\"](function (error) {\n\t      formlyWarn(\"there-was-a-problem-setting-the-template-for-this-field\", \"There was a problem setting the template for this field \", scope.options, error);\n\t    });\n\t\n\t    function setFieldGroupTemplate() {\n\t      checkFieldGroupApi(scope.options);\n\t      el.addClass(\"formly-field-group\");\n\t      var extraAttributes = \"\";\n\t      if (scope.options.elementAttributes) {\n\t        extraAttributes = Object.keys(scope.options.elementAttributes).map(function (key) {\n\t          return \"\" + key + \"=\\\"\" + scope.options.elementAttributes[key] + \"\\\"\";\n\t        }).join(\" \");\n\t      }\n\t      setElementTemplate(\"\\n          <formly-form model=\\\"model\\\"\\n                       fields=\\\"options.fieldGroup\\\"\\n                       options=\\\"options.options\\\"\\n                       form=\\\"options.form\\\"\\n                       class=\\\"\" + scope.options.className + \"\\\"\\n                       \" + extraAttributes + \"\\n                       is-field-group>\\n          </formly-form>\\n        \");\n\t    }\n\t\n\t    function addAttributes() {\n\t      if (scope.options.elementAttributes) {\n\t        el.attr(scope.options.elementAttributes);\n\t      }\n\t    }\n\t\n\t    function addClasses() {\n\t      if (scope.options.className) {\n\t        el.addClass(scope.options.className);\n\t      }\n\t      if (scope.options.type) {\n\t        el.addClass(\"formly-field-\" + scope.options.type);\n\t      }\n\t    }\n\t\n\t    function setElementTemplate(templateString) {\n\t      el.html(asHtml(templateString));\n\t      $compile(el.contents())(scope);\n\t      return templateString;\n\t    }\n\t\n\t    function watchFormControl(templateString) {\n\t      var stopWatchingField = angular.noop;\n\t      var stopWatchingShowError = angular.noop;\n\t      if (scope.options.noFormControl) {\n\t        return;\n\t      }\n\t      var templateEl = angular.element(\"<div>\" + templateString + \"</div>\");\n\t      var ngModelNode = templateEl[0].querySelector(\"[ng-model],[data-ng-model]\");\n\t      if (ngModelNode && ngModelNode.getAttribute(\"name\")) {\n\t        watchFieldNameOrExistence(ngModelNode.getAttribute(\"name\"));\n\t      }\n\t\n\t      function watchFieldNameOrExistence(name) {\n\t        var nameExpressionRegex = /\\{\\{(.*?)}}/;\n\t        var nameExpression = nameExpressionRegex.exec(name);\n\t        if (nameExpression) {\n\t          watchFieldName(nameExpression[1]);\n\t        } else {\n\t          watchFieldExistence(name);\n\t        }\n\t      }\n\t\n\t      function watchFieldName(expression) {\n\t        scope.$watch(expression, function oneFieldNameChange(name) {\n\t          if (name) {\n\t            stopWatchingField();\n\t            watchFieldExistence(name);\n\t          }\n\t        });\n\t      }\n\t\n\t      function watchFieldExistence(name) {\n\t        stopWatchingField = scope.$watch(\"form[\\\"\" + name + \"\\\"]\", function formControlChange(formControl) {\n\t          if (formControl) {\n\t            scope.fc = formControl; // shortcut for template authors\n\t            scope.options.formControl = formControl;\n\t            stopWatchingShowError();\n\t            addShowMessagesWatcher();\n\t          }\n\t        });\n\t      }\n\t\n\t      function addShowMessagesWatcher() {\n\t        stopWatchingShowError = scope.$watch(function watchShowValidationChange() {\n\t          var customExpression = formlyConfig.extras.errorExistsAndShouldBeVisibleExpression;\n\t          var options = scope.options;\n\t          var fc = scope.fc;\n\t\n\t          if (!fc.$invalid) {\n\t            return false;\n\t          } else if (typeof options.validation.show === \"boolean\") {\n\t            return options.validation.show;\n\t          } else if (customExpression) {\n\t            return formlyUtil.formlyEval(scope, customExpression, fc.$modelValue, fc.$viewValue);\n\t          } else {\n\t            var noTouchedButDirty = angular.isUndefined(fc.$touched) && fc.$dirty;\n\t            return scope.fc.$touched || noTouchedButDirty;\n\t          }\n\t        }, function onShowValidationChange(show) {\n\t          scope.options.validation.errorExistsAndShouldBeVisible = show;\n\t          scope.showError = show; // shortcut for template authors\n\t        });\n\t      }\n\t    }\n\t\n\t    function callLinkFunctions() {\n\t      if (type && type.link) {\n\t        type.link.apply(thusly, args);\n\t      }\n\t      if (scope.options.link) {\n\t        scope.options.link.apply(thusly, args);\n\t      }\n\t    }\n\t\n\t    function runManipulators(manipulators) {\n\t      return function runManipulatorsOnTemplate(template) {\n\t        var chain = $q.when(template);\n\t        angular.forEach(manipulators, function (manipulator) {\n\t          chain = chain.then(function (template) {\n\t            return $q.when(manipulator(template, scope.options, scope)).then(function (newTemplate) {\n\t              return angular.isString(newTemplate) ? newTemplate : asHtml(newTemplate);\n\t            });\n\t          });\n\t        });\n\t        return chain;\n\t      };\n\t    }\n\t  }\n\t\n\t  // stateless util functions\n\t  function asHtml(el) {\n\t    var wrapper = angular.element(\"<a></a>\");\n\t    return wrapper.append(el).html();\n\t  }\n\t\n\t  function getFieldType(options) {\n\t    return options.type && formlyConfig.getType(options.type);\n\t  }\n\t\n\t  function getFieldTemplate(options) {\n\t    function fromOptionsOrType(key, type) {\n\t      if (angular.isDefined(options[key])) {\n\t        return options[key];\n\t      } else if (type && angular.isDefined(type[key])) {\n\t        return type[key];\n\t      }\n\t    }\n\t\n\t    var type = formlyConfig.getType(options.type, true, options);\n\t    var template = fromOptionsOrType(\"template\", type);\n\t    var templateUrl = fromOptionsOrType(\"templateUrl\", type);\n\t    if (angular.isUndefined(template) && !templateUrl) {\n\t      throw formlyUsability.getFieldError(\"type-type-has-no-template\", \"Type '\" + options.type + \"' has not template. On element:\", options);\n\t    }\n\t\n\t    return getTemplate(templateUrl || template, angular.isUndefined(template), options);\n\t  }\n\t\n\t  function getTemplate(template, isUrl, options) {\n\t    var templatePromise = undefined;\n\t    if (angular.isFunction(template)) {\n\t      templatePromise = $q.when(template(options));\n\t    } else {\n\t      templatePromise = $q.when(template);\n\t    }\n\t\n\t    if (!isUrl) {\n\t      return templatePromise;\n\t    } else {\n\t      var _ret = (function () {\n\t        var httpOptions = { cache: $templateCache };\n\t        return {\n\t          v: templatePromise.then(function (url) {\n\t            return $http.get(url, httpOptions);\n\t          }).then(function (response) {\n\t            return response.data;\n\t          })[\"catch\"](function handleErrorGettingATemplate(error) {\n\t            formlyWarn(\"problem-loading-template-for-templateurl\", \"Problem loading template for \" + template, error);\n\t          })\n\t        };\n\t      })();\n\t\n\t      if (typeof _ret === \"object\") {\n\t        return _ret.v;\n\t      }\n\t    }\n\t  }\n\t\n\t  function transcludeInWrappers(options) {\n\t    var wrapper = getWrapperOption(options);\n\t\n\t    return function transcludeTemplate(template) {\n\t      if (!wrapper.length) {\n\t        return $q.when(template);\n\t      }\n\t\n\t      wrapper.forEach(function (wrapper) {\n\t        formlyUsability.checkWrapper(wrapper, options);\n\t        wrapper.validateOptions && wrapper.validateOptions(options);\n\t        runApiCheck(wrapper, options);\n\t      });\n\t      var promises = wrapper.map(function (w) {\n\t        return getTemplate(w.template || w.templateUrl, !w.template);\n\t      });\n\t      return $q.all(promises).then(function (wrappersTemplates) {\n\t        wrappersTemplates.forEach(function (wrapperTemplate, index) {\n\t          formlyUsability.checkWrapperTemplate(wrapperTemplate, wrapper[index]);\n\t        });\n\t        wrappersTemplates.reverse(); // wrapper 0 is wrapped in wrapper 1 and so on...\n\t        var totalWrapper = wrappersTemplates.shift();\n\t        wrappersTemplates.forEach(function (wrapperTemplate) {\n\t          totalWrapper = doTransclusion(totalWrapper, wrapperTemplate);\n\t        });\n\t        return doTransclusion(totalWrapper, template);\n\t      });\n\t    };\n\t  }\n\t\n\t  function doTransclusion(wrapper, template) {\n\t    var superWrapper = angular.element(\"<a></a>\"); // this allows people not have to have a single root in wrappers\n\t    superWrapper.append(wrapper);\n\t    var transcludeEl = superWrapper.find(\"formly-transclude\");\n\t    if (!transcludeEl.length) {\n\t      //try it using our custom find function\n\t      transcludeEl = formlyUtil.findByNodeName(superWrapper, \"formly-transclude\");\n\t    }\n\t    transcludeEl.replaceWith(template);\n\t    return superWrapper.html();\n\t  }\n\t\n\t  function getWrapperOption(options) {\n\t    var wrapper = options.wrapper;\n\t    // explicit null means no wrapper\n\t    if (wrapper === null) {\n\t      return [];\n\t    }\n\t\n\t    // nothing specified means use the default wrapper for the type\n\t    if (!wrapper) {\n\t      // get all wrappers that specify they apply to this type\n\t      wrapper = arrayify(formlyConfig.getWrapperByType(options.type));\n\t    } else {\n\t      wrapper = arrayify(wrapper).map(formlyConfig.getWrapper);\n\t    }\n\t\n\t    // get all wrappers for that this type specified that it uses.\n\t    var type = formlyConfig.getType(options.type, true, options);\n\t    if (type && type.wrapper) {\n\t      var typeWrappers = arrayify(type.wrapper).map(formlyConfig.getWrapper);\n\t      wrapper = wrapper.concat(typeWrappers);\n\t    }\n\t\n\t    // add the default wrapper last\n\t    var defaultWrapper = formlyConfig.getWrapper();\n\t    if (defaultWrapper) {\n\t      wrapper.push(defaultWrapper);\n\t    }\n\t    return wrapper;\n\t  }\n\t\n\t  function checkApi(options) {\n\t    formlyApiCheck[\"throw\"](formlyApiCheck.formlyFieldOptions, options, {\n\t      prefix: \"formly-field directive\",\n\t      url: \"formly-field-directive-validation-failed\"\n\t    });\n\t    // validate with the type\n\t    var type = options.type && formlyConfig.getType(options.type);\n\t    if (type) {\n\t      if (type.validateOptions) {\n\t        type.validateOptions(options);\n\t      }\n\t      runApiCheck(type, options);\n\t    }\n\t  }\n\t\n\t  function checkFieldGroupApi(options) {\n\t    formlyApiCheck[\"throw\"](formlyApiCheck.fieldGroup, options, {\n\t      prefix: \"formly-field directive\",\n\t      url: \"formly-field-directive-validation-failed\"\n\t    });\n\t  }\n\t\n\t  function runApiCheck(_ref, options) {\n\t    var apiCheck = _ref.apiCheck;\n\t    var apiCheckInstance = _ref.apiCheckInstance;\n\t    var apiCheckFunction = _ref.apiCheckFunction;\n\t    var apiCheckOptions = _ref.apiCheckOptions;\n\t\n\t    if (!apiCheck) {\n\t      return;\n\t    }\n\t    var instance = apiCheckInstance || formlyApiCheck;\n\t    var fn = apiCheckFunction || \"warn\";\n\t    var shape = instance.shape(apiCheck);\n\t    instance[fn](shape, options, apiCheckOptions || {\n\t      prefix: \"formly-field \" + name,\n\t      url: formlyApiCheck.config.output.docsBaseUrl + \"formly-field-type-apicheck-failed\"\n\t    });\n\t  }\n\t}\n\tformlyField.$inject = [\"$http\", \"$q\", \"$compile\", \"$templateCache\", \"formlyConfig\", \"formlyValidationMessages\", \"formlyApiCheck\", \"formlyUtil\", \"formlyUsability\", \"formlyWarn\"];\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = formlyFocus;\n\t\n\t// @ngInject\n\tfunction formlyFocus($timeout, $document) {\n\t  /* jshint -W052 */\n\t  return {\n\t    restrict: \"A\",\n\t    link: function formlyFocusLink(scope, element, attrs) {\n\t      var previousEl = null;\n\t      var el = element[0];\n\t      var doc = $document[0];\n\t      attrs.$observe(\"formlyFocus\", function respondToFocusExpressionChange(value) {\n\t        if (value === \"true\") {\n\t          $timeout(function setElementFocus() {\n\t            previousEl = doc.activeElement;\n\t            el.focus();\n\t          }, ~ ~attrs.focusWait);\n\t        } else if (value === \"false\") {\n\t          if (doc.activeElement === el) {\n\t            el.blur();\n\t            if (attrs.hasOwnProperty(\"refocus\") && previousEl) {\n\t              previousEl.focus();\n\t            }\n\t          }\n\t        }\n\t      });\n\t    }\n\t  };\n\t}\n\tformlyFocus.$inject = [\"$timeout\", \"$document\"];\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _interopRequire = function (obj) { return obj && obj.__esModule ? obj[\"default\"] : obj; };\n\t\n\tvar _toConsumableArray = function (arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } };\n\t\n\tvar _slice = Array.prototype.slice;\n\t\n\tvar angular = _interopRequire(__webpack_require__(1));\n\t\n\tmodule.exports = formlyForm;\n\t\n\t/**\n\t * @ngdoc directive\n\t * @name formlyForm\n\t * @restrict E\n\t */\n\t// @ngInject\n\tfunction formlyForm(formlyUsability, $parse, formlyApiCheck, formlyConfig) {\n\t  var currentFormId = 1;\n\t  return {\n\t    restrict: \"E\",\n\t    template: function formlyFormGetTemplate(el, attrs) {\n\t      /* jshint -W033 */ // this because jshint is broken I guess...\n\t      var rootEl = getRootEl();\n\t      var fieldRootEl = getFieldRootEl();\n\t      var formId = \"formly_\" + currentFormId++;\n\t      var parentFormAttributes = undefined;\n\t      if (attrs.hasOwnProperty(\"isFieldGroup\") && el.parent().parent().hasClass(\"formly\")) {\n\t        parentFormAttributes = copyAttributes(el.parent().parent()[0].attributes);\n\t      }\n\t      return \"\\n        <\" + rootEl + \" class=\\\"formly\\\"\\n                 name=\\\"\" + getFormName() + \"\\\"\\n                 role=\\\"form\\\" \" + parentFormAttributes + \">\\n          <\" + fieldRootEl + \" formly-field\\n               ng-repeat=\\\"field in fields \" + getTrackBy() + \"\\\"\\n               \" + getHideDirective() + \"=\\\"!field.hide\\\"\\n               class=\\\"formly-field\\\"\\n               options=\\\"field\\\"\\n               model=\\\"field.model || model\\\"\\n               fields=\\\"fields\\\"\\n               form=\\\"\" + formId + \"\\\"\\n               form-id=\\\"\" + formId + \"\\\"\\n               form-state=\\\"options.formState\\\"\\n               index=\\\"$index\\\">\\n          </\" + fieldRootEl + \">\\n          <div ng-transclude></div>\\n        </\" + rootEl + \">\\n      \";\n\t\n\t      function getRootEl() {\n\t        return attrs.rootEl || \"ng-form\";\n\t      }\n\t\n\t      function getFieldRootEl() {\n\t        return attrs.fieldRootEl || \"div\";\n\t      }\n\t\n\t      function getHideDirective() {\n\t        return attrs.hideDirective || formlyConfig.extras.defaultHideDirective || \"ng-if\";\n\t      }\n\t\n\t      function getTrackBy() {\n\t        if (!attrs.trackBy) {\n\t          return \"\";\n\t        } else {\n\t          return \"track by \" + attrs.trackBy;\n\t        }\n\t      }\n\t\n\t      function getFormName() {\n\t        var formName = formId;\n\t        var bindName = attrs.bindName;\n\t        if (bindName) {\n\t          if (angular.version.minor < 3) {\n\t            throw formlyUsability.getFormlyError(\"bind-name attribute on formly-form not allowed in > angular 1.3\");\n\t          }\n\t          // we can do a one-time binding here because we know we're in 1.3.x territory\n\t          formName = \"{{::'formly_' + \" + bindName + \"}}\";\n\t        }\n\t        return formName;\n\t      }\n\t\n\t      function copyAttributes(attributes) {\n\t        var excluded = [\"model\", \"form\", \"fields\", \"options\", \"name\", \"role\", \"class\"];\n\t        var arrayAttrs = [];\n\t        angular.forEach(attributes, function (_ref) {\n\t          var nodeName = _ref.nodeName;\n\t          var nodeValue = _ref.nodeValue;\n\t\n\t          if (nodeName !== \"undefined\" && excluded.indexOf(nodeName) === -1) {\n\t            arrayAttrs.push(\"\" + toKebabCase(nodeName) + \"=\\\"\" + nodeValue + \"\\\"\");\n\t          }\n\t        });\n\t        return arrayAttrs.join(\" \");\n\t      }\n\t\n\t      function toKebabCase(string) {\n\t        if (string) {\n\t          return string.replace(/([A-Z])/g, function ($1) {\n\t            return \"-\" + $1.toLowerCase();\n\t          });\n\t        } else {\n\t          return \"\";\n\t        }\n\t      }\n\t    },\n\t    replace: true,\n\t    transclude: true,\n\t    scope: {\n\t      fields: \"=\",\n\t      model: \"=\",\n\t      form: \"=?\",\n\t      options: \"=?\"\n\t    },\n\t    controller: /* @ngInject */[\"$scope\", \"formlyUtil\", function FormlyFormController($scope, formlyUtil) {\n\t      setupOptions();\n\t      $scope.model = $scope.model || {};\n\t      $scope.fields = $scope.fields || [];\n\t\n\t      angular.forEach($scope.fields, attachKey); // attaches a key based on the index if a key isn't specified\n\t      angular.forEach($scope.fields, setupWatchers); // setup watchers for all fields\n\t\n\t      // watch the model and evaluate watch expressions that depend on it.\n\t      $scope.$watch(\"model\", onModelOrFormStateChange, true);\n\t      if ($scope.options.formState) {\n\t        $scope.$watch(\"options.formState\", onModelOrFormStateChange, true);\n\t      }\n\t\n\t      function onModelOrFormStateChange() {\n\t        angular.forEach($scope.fields, function runFieldExpressionProperties(field, index) {\n\t          /*jshint -W030 */\n\t          var model = field.model || $scope.model;\n\t          field.runExpressions && field.runExpressions(model);\n\t          if (field.hideExpression) {\n\t            // can't use hide with expressionProperties reliably\n\t            var val = model[field.key];\n\t            // this makes it closer to what a regular expressionProperty would be\n\t            var extraLocals = {\n\t              options: field,\n\t              index: index,\n\t              formState: $scope.options.formState,\n\t              formId: $scope.formId\n\t            };\n\t            field.hide = formlyUtil.formlyEval($scope, field.hideExpression, val, val, extraLocals);\n\t          }\n\t        });\n\t      }\n\t\n\t      function setupOptions() {\n\t        formlyApiCheck[\"throw\"]([formlyApiCheck.formOptionsApi.optional], [$scope.options], { prefix: \"formly-form options check\" });\n\t        $scope.options = $scope.options || {};\n\t        $scope.options.formState = $scope.options.formState || {};\n\t\n\t        angular.extend($scope.options, {\n\t          updateInitialValue: updateInitialValue,\n\t          resetModel: resetModel\n\t        });\n\t      }\n\t\n\t      function updateInitialValue() {\n\t        angular.forEach($scope.fields, function (field) {\n\t          if (isFieldGroup(field)) {\n\t            field.options.updateInitialValue();\n\t          } else {\n\t            field.updateInitialValue();\n\t          }\n\t        });\n\t      }\n\t\n\t      function resetModel() {\n\t        angular.forEach($scope.fields, function (field) {\n\t          if (isFieldGroup(field)) {\n\t            field.options.resetModel();\n\t          } else {\n\t            field.resetModel();\n\t          }\n\t        });\n\t      }\n\t\n\t      function attachKey(field, index) {\n\t        if (!isFieldGroup(field)) {\n\t          field.key = field.key || index || 0;\n\t        }\n\t      }\n\t\n\t      function setupWatchers(field, index) {\n\t        if (isFieldGroup(field) || !angular.isDefined(field.watcher)) {\n\t          return;\n\t        }\n\t        var watchers = field.watcher;\n\t        if (!angular.isArray(watchers)) {\n\t          watchers = [watchers];\n\t        }\n\t        angular.forEach(watchers, function setupWatcher(watcher) {\n\t          if (!angular.isDefined(watcher.listener)) {\n\t            throw formlyUsability.getFieldError(\"all-field-watchers-must-have-a-listener\", \"All field watchers must have a listener\", field);\n\t          }\n\t          var watchExpression = getWatchExpression(watcher, field, index);\n\t          var watchListener = getWatchListener(watcher, field, index);\n\t\n\t          var type = watcher.type || \"$watch\";\n\t          watcher.stopWatching = $scope[type](watchExpression, watchListener, watcher.watchDeep);\n\t        });\n\t      }\n\t\n\t      function getWatchExpression(watcher, field, index) {\n\t        var watchExpression = watcher.expression || \"model['\" + field.key + \"']\";\n\t        if (angular.isFunction(watchExpression)) {\n\t          // wrap the field's watch expression so we can call it with the field as the first arg\n\t          // and the stop function as the last arg as a helper\n\t          var originalExpression = watchExpression;\n\t          watchExpression = function formlyWatchExpression() {\n\t            var args = modifyArgs.apply(undefined, [watcher, index].concat(_slice.call(arguments)));\n\t            return originalExpression.apply(undefined, _toConsumableArray(args));\n\t          };\n\t          watchExpression.displayName = \"Formly Watch Expression for field for \" + field.key;\n\t        }\n\t        return watchExpression;\n\t      }\n\t\n\t      function getWatchListener(watcher, field, index) {\n\t        var watchListener = watcher.listener;\n\t        if (angular.isFunction(watchListener)) {\n\t          // wrap the field's watch listener so we can call it with the field as the first arg\n\t          // and the stop function as the last arg as a helper\n\t          var originalListener = watchListener;\n\t          watchListener = function formlyWatchListener() {\n\t            var args = modifyArgs.apply(undefined, [watcher, index].concat(_slice.call(arguments)));\n\t            return originalListener.apply(undefined, _toConsumableArray(args));\n\t          };\n\t          watchListener.displayName = \"Formly Watch Listener for field for \" + field.key;\n\t        }\n\t        return watchListener;\n\t      }\n\t\n\t      function modifyArgs(watcher, index) {\n\t        for (var _len = arguments.length, originalArgs = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n\t          originalArgs[_key - 2] = arguments[_key];\n\t        }\n\t\n\t        return [$scope.fields[index]].concat(originalArgs, [watcher.stopWatching]);\n\t      }\n\t\n\t      function isFieldGroup(field) {\n\t        return field && !!field.fieldGroup;\n\t      }\n\t    }],\n\t    link: function link(scope, el, attrs) {\n\t      if (attrs.form) {\n\t        var formId = attrs.name;\n\t        scope.formId = formId;\n\t        $parse(attrs.form).assign(scope.$parent, scope[formId]);\n\t      }\n\t\n\t      // chrome autocomplete lameness\n\t      // see https://code.google.com/p/chromium/issues/detail?id=468153#c14\n\t      // ლ(ಠ益ಠლ)   (╯°□°)╯︵ ┻━┻    (◞‸◟；)\n\t      var global = formlyConfig.extras.removeChromeAutoComplete === true;\n\t      var offInstance = scope.options && scope.options.removeChromeAutoComplete === false;\n\t      var onInstance = scope.options && scope.options.removeChromeAutoComplete === true;\n\t      if (global && !offInstance || onInstance) {\n\t        var input = document.createElement(\"input\");\n\t        input.setAttribute(\"autocomplete\", \"address-level4\");\n\t        input.setAttribute(\"hidden\", true);\n\t        el[0].appendChild(input);\n\t      }\n\t    }\n\t  };\n\t}\n\tformlyForm.$inject = [\"formlyUsability\", \"$parse\", \"formlyApiCheck\", \"formlyConfig\"];\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _interopRequire = function (obj) { return obj && obj.__esModule ? obj[\"default\"] : obj; };\n\t\n\tvar angular = _interopRequire(__webpack_require__(1));\n\t\n\tvar formlyApiCheck = _interopRequire(__webpack_require__(9));\n\t\n\tvar formlyErrorAndWarningsUrlPrefix = _interopRequire(__webpack_require__(2));\n\t\n\tvar formlyUsability = _interopRequire(__webpack_require__(11));\n\t\n\tvar formlyConfig = _interopRequire(__webpack_require__(10));\n\t\n\tvar formlyValidationMessages = _interopRequire(__webpack_require__(12));\n\t\n\tvar formlyUtil = _interopRequire(__webpack_require__(15));\n\t\n\tvar formlyWarn = _interopRequire(__webpack_require__(16));\n\t\n\tvar formlyCustomValidation = _interopRequire(__webpack_require__(4));\n\t\n\tvar formlyField = _interopRequire(__webpack_require__(5));\n\t\n\tvar formlyFocus = _interopRequire(__webpack_require__(6));\n\t\n\tvar formlyForm = _interopRequire(__webpack_require__(7));\n\t\n\tvar formlyNgModelAttrsManipulator = _interopRequire(__webpack_require__(14));\n\t\n\tvar formlyCustomTags = _interopRequire(__webpack_require__(13));\n\t\n\tvar ngModuleName = \"formly\";\n\t\n\tmodule.exports = ngModuleName;\n\t\n\tvar ngModule = angular.module(ngModuleName, []);\n\t\n\tngModule.constant(\"formlyApiCheck\", formlyApiCheck);\n\tngModule.constant(\"formlyErrorAndWarningsUrlPrefix\", formlyErrorAndWarningsUrlPrefix);\n\tngModule.constant(\"formlyVersion\", (\"6.5.1\")); // <-- webpack variable\n\t\n\tngModule.provider(\"formlyUsability\", formlyUsability);\n\tngModule.provider(\"formlyConfig\", formlyConfig);\n\t\n\tngModule.factory(\"formlyValidationMessages\", formlyValidationMessages);\n\tngModule.factory(\"formlyUtil\", formlyUtil);\n\tngModule.factory(\"formlyWarn\", formlyWarn);\n\t\n\tngModule.directive(\"formlyCustomValidation\", formlyCustomValidation);\n\tngModule.directive(\"formlyField\", formlyField);\n\tngModule.directive(\"formlyFocus\", formlyFocus);\n\tngModule.directive(\"formlyForm\", formlyForm);\n\t\n\tngModule.run(formlyNgModelAttrsManipulator);\n\tngModule.run(formlyCustomTags);\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _interopRequire = function (obj) { return obj && obj.__esModule ? obj[\"default\"] : obj; };\n\t\n\tvar apiCheckFactory = _interopRequire(__webpack_require__(18));\n\t\n\tvar apiCheck = apiCheckFactory({\n\t  output: {\n\t    prefix: \"angular-formly:\",\n\t    docsBaseUrl: __webpack_require__(2)\n\t  }\n\t});\n\t\n\tfunction shapeRequiredIfNot(otherProps, propChecker) {\n\t  if (!angular.isArray(otherProps)) {\n\t    otherProps = [otherProps];\n\t  }\n\t  var type = \"specified if these are not specified: `\" + otherProps.join(\", \") + \"` (otherwise it's optional)\";\n\t  function shapeRequiredIfNotDefinition(prop, propName, location, obj) {\n\t    var propExists = obj && obj.hasOwnProperty(propName);\n\t    var otherPropsExist = otherProps.some(function (otherProp) {\n\t      return obj && obj.hasOwnProperty(otherProp);\n\t    });\n\t    if (!otherPropsExist && !propExists) {\n\t      return apiCheck.utils.getError(propName, location, type);\n\t    } else if (propExists) {\n\t      return propChecker(prop, propName, location, obj);\n\t    }\n\t  }\n\t  shapeRequiredIfNotDefinition.type = type;\n\t  return apiCheck.utils.checkerHelpers.setupChecker(shapeRequiredIfNotDefinition);\n\t}\n\t\n\tvar formlyExpression = apiCheck.oneOfType([apiCheck.string, apiCheck.func]);\n\tvar specifyWrapperType = apiCheck.oneOfType([apiCheck.oneOf([null]), apiCheck.typeOrArrayOf(apiCheck.string)]);\n\t\n\tvar apiCheckProperty = apiCheck.objectOf(apiCheck.func);\n\t\n\tvar apiCheckInstanceProperty = apiCheck.shape.onlyIf(\"apiCheck\", apiCheck.func.withProperties({\n\t  warn: apiCheck.func,\n\t  \"throw\": apiCheck.func,\n\t  shape: apiCheck.func\n\t}));\n\t\n\tvar apiCheckFunctionProperty = apiCheck.shape.onlyIf(\"apiCheck\", apiCheck.oneOf([\"throw\", \"warn\"]));\n\t\n\tvar formlyWrapperType = apiCheck.shape({\n\t  name: shapeRequiredIfNot(\"types\", apiCheck.string).optional,\n\t  template: apiCheck.shape.ifNot(\"templateUrl\", apiCheck.string).optional,\n\t  templateUrl: apiCheck.shape.ifNot(\"template\", apiCheck.string).optional,\n\t  types: apiCheck.typeOrArrayOf(apiCheck.string).optional,\n\t  overwriteOk: apiCheck.bool.optional,\n\t  validateOptions: apiCheck.func.optional,\n\t  apiCheck: apiCheckProperty.optional,\n\t  apiCheckInstance: apiCheckInstanceProperty.optional,\n\t  apiCheckFunction: apiCheckFunctionProperty.optional,\n\t  apiCheckOptions: apiCheck.object.optional\n\t}).strict;\n\t\n\tvar expressionProperties = apiCheck.objectOf(apiCheck.oneOfType([formlyExpression, apiCheck.shape({\n\t  expression: formlyExpression,\n\t  message: formlyExpression.optional\n\t}).strict]));\n\t\n\tvar fieldOptionsApiShape = {\n\t  $$hashKey: apiCheck.any.optional,\n\t  type: apiCheck.shape.ifNot([\"template\", \"templateUrl\"], apiCheck.string).optional,\n\t  template: apiCheck.shape.ifNot([\"type\", \"templateUrl\"], apiCheck.oneOfType([apiCheck.string, apiCheck.func])).optional,\n\t  templateUrl: apiCheck.shape.ifNot([\"type\", \"template\"], apiCheck.oneOfType([apiCheck.string, apiCheck.func])).optional,\n\t  key: apiCheck.oneOfType([apiCheck.string, apiCheck.number]).optional,\n\t  model: apiCheck.object.optional,\n\t  className: apiCheck.string.optional,\n\t  expressionProperties: expressionProperties.optional,\n\t  data: apiCheck.object.optional,\n\t  templateOptions: apiCheck.object.optional,\n\t  wrapper: specifyWrapperType.optional,\n\t  modelOptions: apiCheck.shape({\n\t    updateOn: apiCheck.string.optional,\n\t    debounce: apiCheck.oneOfType([apiCheck.object, apiCheck.string]).optional,\n\t    allowInvalid: apiCheck.bool.optional,\n\t    getterSetter: apiCheck.bool.optional,\n\t    timezone: apiCheck.string.optional\n\t  }).optional,\n\t  watcher: apiCheck.typeOrArrayOf(apiCheck.shape({\n\t    expression: formlyExpression.optional,\n\t    listener: formlyExpression\n\t  })).optional,\n\t  validators: apiCheck.objectOf(apiCheck.oneOfType([formlyExpression, apiCheck.shape({\n\t    expression: formlyExpression,\n\t    message: formlyExpression.optional\n\t  }).strict])).optional,\n\t  noFormControl: apiCheck.bool.optional,\n\t  hide: apiCheck.bool.optional,\n\t  hideExpression: formlyExpression.optional,\n\t  ngModelAttrs: apiCheck.objectOf(apiCheck.shape({\n\t    expression: apiCheck.shape.ifNot([\"value\", \"attribute\", \"bound\"], apiCheck.any).optional,\n\t    value: apiCheck.shape.ifNot(\"expression\", apiCheck.any).optional,\n\t    attribute: apiCheck.shape.ifNot(\"expression\", apiCheck.any).optional,\n\t    bound: apiCheck.shape.ifNot(\"expression\", apiCheck.any).optional\n\t  }).strict).optional,\n\t  elementAttributes: apiCheck.objectOf(apiCheck.string).optional,\n\t  optionsTypes: apiCheck.typeOrArrayOf(apiCheck.string).optional,\n\t  link: apiCheck.func.optional,\n\t  controller: apiCheck.oneOfType([apiCheck.string, apiCheck.func, apiCheck.array]).optional,\n\t  validation: apiCheck.shape({\n\t    show: apiCheck.oneOfType([apiCheck.bool, apiCheck.oneOf([null])]).optional,\n\t    messages: apiCheck.objectOf(formlyExpression).optional,\n\t    errorExistsAndShouldBeVisible: apiCheck.bool.optional\n\t  }).optional,\n\t  formControl: apiCheck.object.optional,\n\t  value: apiCheck.func.optional,\n\t  runExpressions: apiCheck.func.optional,\n\t  resetModel: apiCheck.func.optional,\n\t  updateInitialValue: apiCheck.func.optional,\n\t  initialValue: apiCheck.any.optional,\n\t  defaultValue: apiCheck.any.optional\n\t};\n\t\n\tvar formlyFieldOptions = apiCheck.shape(fieldOptionsApiShape).strict;\n\t\n\tvar formOptionsApi = apiCheck.shape({\n\t  formState: apiCheck.object.optional,\n\t  resetModel: apiCheck.func.optional,\n\t  updateInitialValue: apiCheck.func.optional,\n\t  removeChromeAutoComplete: apiCheck.bool.optional\n\t}).strict;\n\t\n\tvar fieldGroup = apiCheck.shape({\n\t  $$hashKey: apiCheck.any.optional,\n\t  fieldGroup: apiCheck.arrayOf(formlyFieldOptions),\n\t  className: apiCheck.string.optional,\n\t  options: formOptionsApi.optional,\n\t  hide: apiCheck.bool.optional,\n\t  hideExpression: formlyExpression.optional,\n\t  model: apiCheck.object.optional,\n\t  form: apiCheck.object.optional,\n\t  elementAttributes: apiCheck.objectOf(apiCheck.string).optional\n\t}).strict;\n\t\n\tvar typeOptionsDefaultOptions = angular.copy(fieldOptionsApiShape);\n\ttypeOptionsDefaultOptions.key = apiCheck.string.optional;\n\t\n\tvar formlyTypeOptions = apiCheck.shape({\n\t  name: apiCheck.string,\n\t  template: apiCheck.shape.ifNot(\"templateUrl\", apiCheck.oneOfType([apiCheck.string, apiCheck.func])).optional,\n\t  templateUrl: apiCheck.shape.ifNot(\"template\", apiCheck.oneOfType([apiCheck.string, apiCheck.func])).optional,\n\t  controller: apiCheck.oneOfType([apiCheck.func, apiCheck.string, apiCheck.array]).optional,\n\t  link: apiCheck.func.optional,\n\t  defaultOptions: apiCheck.oneOfType([apiCheck.func, apiCheck.shape(typeOptionsDefaultOptions)]).optional,\n\t  \"extends\": apiCheck.string.optional,\n\t  wrapper: specifyWrapperType.optional,\n\t  data: apiCheck.object.optional,\n\t  validateOptions: apiCheck.func.optional,\n\t  apiCheck: apiCheckProperty.optional,\n\t  apiCheckInstance: apiCheckInstanceProperty.optional,\n\t  apiCheckFunction: apiCheckFunctionProperty.optional,\n\t  apiCheckOptions: apiCheck.object.optional,\n\t  overwriteOk: apiCheck.bool.optional\n\t}).strict;\n\tangular.extend(apiCheck, {\n\t  formlyTypeOptions: formlyTypeOptions, formlyFieldOptions: formlyFieldOptions, formlyExpression: formlyExpression, formlyWrapperType: formlyWrapperType, fieldGroup: fieldGroup, formOptionsApi: formOptionsApi\n\t});\n\t\n\tmodule.exports = apiCheck;\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _interopRequire = function (obj) { return obj && obj.__esModule ? obj[\"default\"] : obj; };\n\t\n\tvar angular = _interopRequire(__webpack_require__(1));\n\t\n\tvar utils = _interopRequire(__webpack_require__(3));\n\t\n\tmodule.exports = formlyConfig;\n\t\n\t// @ngInject\n\tfunction formlyConfig(formlyUsabilityProvider, formlyApiCheck) {\n\t  var _this2 = this;\n\t\n\t  var typeMap = {};\n\t  var templateWrappersMap = {};\n\t  var defaultWrapperName = \"default\";\n\t  var _this = this;\n\t  var getError = formlyUsabilityProvider.getFormlyError;\n\t\n\t  angular.extend(this, {\n\t    setType: setType,\n\t    getType: getType,\n\t    setWrapper: setWrapper,\n\t    getWrapper: getWrapper,\n\t    getWrapperByType: getWrapperByType,\n\t    removeWrapperByName: removeWrapperByName,\n\t    removeWrappersForType: removeWrappersForType,\n\t    disableWarnings: false,\n\t    extras: {\n\t      disableNgModelAttrsManipulator: false,\n\t      ngModelAttrsManipulatorPreferUnbound: false,\n\t      removeChromeAutoComplete: false,\n\t      defaultHideDirective: \"ng-if\"\n\t    },\n\t    templateManipulators: {\n\t      preWrapper: [],\n\t      postWrapper: []\n\t    },\n\t    $get: function () {\n\t      return _this2;\n\t    }\n\t  });\n\t\n\t  function setType(options) {\n\t    if (angular.isArray(options)) {\n\t      angular.forEach(options, setType);\n\t    } else if (angular.isObject(options)) {\n\t      checkType(options);\n\t      if (options[\"extends\"]) {\n\t        extendTypeOptions(options);\n\t      }\n\t      typeMap[options.name] = options;\n\t    } else {\n\t      throw getError(\"You must provide an object or array for setType. You provided: \" + JSON.stringify(arguments));\n\t    }\n\t  }\n\t\n\t  function checkType(options) {\n\t    formlyApiCheck[\"throw\"](formlyApiCheck.formlyTypeOptions, options, {\n\t      prefix: \"formlyConfig.setType\",\n\t      url: \"settype-validation-failed\"\n\t    });\n\t    if (!options.overwriteOk) {\n\t      checkOverwrite(options.name, typeMap, options, \"types\");\n\t    } else {\n\t      options.overwriteOk = undefined;\n\t    }\n\t  }\n\t\n\t  function extendTypeOptions(options) {\n\t    var extendsType = getType(options[\"extends\"], true, options);\n\t    extendTypeControllerFunction(options, extendsType);\n\t    extendTypeLinkFunction(options, extendsType);\n\t    extendTypeValidateOptionsFunction(options, extendsType);\n\t    extendTypeDefaultOptions(options, extendsType);\n\t    utils.reverseDeepMerge(options, extendsType);\n\t    extendTemplate(options, extendsType);\n\t  }\n\t\n\t  function extendTemplate(options, extendsType) {\n\t    if (options.template && extendsType.templateUrl) {\n\t      delete options.templateUrl;\n\t    } else if (options.templateUrl && extendsType.template) {\n\t      delete options.template;\n\t    }\n\t  }\n\t\n\t  function extendTypeControllerFunction(options, extendsType) {\n\t    var extendsCtrl = extendsType.controller;\n\t    if (!angular.isDefined(extendsCtrl)) {\n\t      return;\n\t    }\n\t    var optionsCtrl = options.controller;\n\t    if (angular.isDefined(optionsCtrl)) {\n\t      options.controller = function ($scope, $controller) {\n\t        $controller(extendsCtrl, { $scope: $scope });\n\t        $controller(optionsCtrl, { $scope: $scope });\n\t      };\n\t      options.controller.$inject = [\"$scope\", \"$controller\"];\n\t    } else {\n\t      options.controller = extendsCtrl;\n\t    }\n\t  }\n\t\n\t  function extendTypeLinkFunction(options, extendsType) {\n\t    var extendsFn = extendsType.link;\n\t    if (!angular.isDefined(extendsFn)) {\n\t      return;\n\t    }\n\t    var optionsFn = options.link;\n\t    if (angular.isDefined(optionsFn)) {\n\t      options.link = function () {\n\t        extendsFn.apply(undefined, arguments);\n\t        optionsFn.apply(undefined, arguments);\n\t      };\n\t    } else {\n\t      options.link = extendsFn;\n\t    }\n\t  }\n\t\n\t  function extendTypeValidateOptionsFunction(options, extendsType) {\n\t    var extendsFn = extendsType.validateOptions;\n\t    if (!angular.isDefined(extendsFn)) {\n\t      return;\n\t    }\n\t    var optionsFn = options.validateOptions;\n\t    var originalDefaultOptions = options.defaultOptions;\n\t    if (angular.isDefined(optionsFn)) {\n\t      options.validateOptions = function (options) {\n\t        optionsFn(options);\n\t        var mergedOptions = angular.copy(options);\n\t        var defaultOptions = originalDefaultOptions;\n\t        if (defaultOptions) {\n\t          if (angular.isFunction(defaultOptions)) {\n\t            defaultOptions = defaultOptions(mergedOptions);\n\t          }\n\t          utils.reverseDeepMerge(mergedOptions, defaultOptions);\n\t        }\n\t        extendsFn(mergedOptions);\n\t      };\n\t    } else {\n\t      options.validateOptions = extendsFn;\n\t    }\n\t  }\n\t\n\t  function extendTypeDefaultOptions(options, extendsType) {\n\t    var extendsDO = extendsType.defaultOptions;\n\t    if (!angular.isDefined(extendsDO)) {\n\t      return;\n\t    }\n\t    var optionsDO = options.defaultOptions;\n\t    var optionsDOIsFn = angular.isFunction(optionsDO);\n\t    var extendsDOIsFn = angular.isFunction(extendsDO);\n\t    if (extendsDOIsFn) {\n\t      options.defaultOptions = function defaultOptions(options) {\n\t        var extendsDefaultOptions = extendsDO(options);\n\t        var mergedDefaultOptions = {};\n\t        utils.reverseDeepMerge(mergedDefaultOptions, options, extendsDefaultOptions);\n\t        var extenderOptionsDefaultOptions = optionsDO;\n\t        if (optionsDOIsFn) {\n\t          extenderOptionsDefaultOptions = extenderOptionsDefaultOptions(mergedDefaultOptions);\n\t        }\n\t        utils.reverseDeepMerge(extendsDefaultOptions, extenderOptionsDefaultOptions);\n\t        return extendsDefaultOptions;\n\t      };\n\t    } else if (optionsDOIsFn) {\n\t      options.defaultOptions = function defaultOptions(options) {\n\t        var newDefaultOptions = {};\n\t        utils.reverseDeepMerge(newDefaultOptions, options, extendsDO);\n\t        return optionsDO(newDefaultOptions);\n\t      };\n\t    }\n\t  }\n\t\n\t  function getType(name, throwError, errorContext) {\n\t    if (!name) {\n\t      return undefined;\n\t    }\n\t    var type = typeMap[name];\n\t    if (!type && throwError === true) {\n\t      throw getError(\"There is no type by the name of \\\"\" + name + \"\\\": \" + JSON.stringify(errorContext));\n\t    } else {\n\t      return type;\n\t    }\n\t  }\n\t\n\t  function setWrapper(_x, _x2) {\n\t    var _again = true;\n\t\n\t    _function: while (_again) {\n\t      _again = false;\n\t      var options = _x,\n\t          name = _x2;\n\t\n\t      if (angular.isArray(options)) {\n\t        return options.map(function (wrapperOptions) {\n\t          return setWrapper(wrapperOptions);\n\t        });\n\t      } else if (angular.isObject(options)) {\n\t        options.types = getOptionsTypes(options);\n\t        options.name = getOptionsName(options, name);\n\t        checkWrapperAPI(options);\n\t        templateWrappersMap[options.name] = options;\n\t        return options;\n\t      } else if (angular.isString(options)) {\n\t        _x = {\n\t          template: options,\n\t          name: name\n\t        };\n\t        _again = true;\n\t        continue _function;\n\t      }\n\t    }\n\t  }\n\t\n\t  function getOptionsTypes(options) {\n\t    if (angular.isString(options.types)) {\n\t      return [options.types];\n\t    }\n\t    if (!angular.isDefined(options.types)) {\n\t      return [];\n\t    } else {\n\t      return options.types;\n\t    }\n\t  }\n\t\n\t  function getOptionsName(options, name) {\n\t    return options.name || name || options.types.join(\" \") || defaultWrapperName;\n\t  }\n\t\n\t  function checkWrapperAPI(options) {\n\t    formlyUsabilityProvider.checkWrapper(options);\n\t    if (options.template) {\n\t      formlyUsabilityProvider.checkWrapperTemplate(options.template, options);\n\t    }\n\t    if (!options.overwriteOk) {\n\t      checkOverwrite(options.name, templateWrappersMap, options, \"templateWrappers\");\n\t    } else {\n\t      delete options.overwriteOk;\n\t    }\n\t    checkWrapperTypes(options);\n\t  }\n\t\n\t  function checkWrapperTypes(options) {\n\t    var shouldThrow = !angular.isArray(options.types) || !options.types.every(angular.isString);\n\t    if (shouldThrow) {\n\t      throw getError(\"Attempted to create a template wrapper with types that is not a string or an array of strings\");\n\t    }\n\t  }\n\t\n\t  function checkOverwrite(property, object, newValue, objectName) {\n\t    if (object.hasOwnProperty(property)) {\n\t      warn([\"Attempting to overwrite \" + property + \" on \" + objectName + \" which is currently\", \"\" + JSON.stringify(object[property]) + \" with \" + JSON.stringify(newValue), \"To supress this warning, specify the property \\\"overwriteOk: true\\\"\"].join(\" \"));\n\t    }\n\t  }\n\t\n\t  function getWrapper(name) {\n\t    return templateWrappersMap[name || defaultWrapperName];\n\t  }\n\t\n\t  function getWrapperByType(type) {\n\t    /* jshint maxcomplexity:6 */\n\t    var wrappers = [];\n\t    for (var name in templateWrappersMap) {\n\t      if (templateWrappersMap.hasOwnProperty(name)) {\n\t        if (templateWrappersMap[name].types && templateWrappersMap[name].types.indexOf(type) !== -1) {\n\t          wrappers.push(templateWrappersMap[name]);\n\t        }\n\t      }\n\t    }\n\t    return wrappers;\n\t  }\n\t\n\t  function removeWrapperByName(name) {\n\t    var wrapper = templateWrappersMap[name];\n\t    delete templateWrappersMap[name];\n\t    return wrapper;\n\t  }\n\t\n\t  function removeWrappersForType(type) {\n\t    var wrappers = getWrapperByType(type);\n\t    if (!wrappers) {\n\t      return;\n\t    }\n\t    if (!angular.isArray(wrappers)) {\n\t      return removeWrapperByName(wrappers.name);\n\t    } else {\n\t      wrappers.forEach(function (wrapper) {\n\t        return removeWrapperByName(wrapper.name);\n\t      });\n\t      return wrappers;\n\t    }\n\t  }\n\t\n\t  function warn() {\n\t    if (!_this.disableWarnings) {\n\t      console.warn.apply(console, arguments);\n\t    }\n\t  }\n\t}\n\tformlyConfig.$inject = [\"formlyUsabilityProvider\", \"formlyApiCheck\"];\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _interopRequire = function (obj) { return obj && obj.__esModule ? obj[\"default\"] : obj; };\n\t\n\tvar angular = _interopRequire(__webpack_require__(1));\n\t\n\tmodule.exports = formlyUsability;\n\t\n\t// @ngInject\n\tfunction formlyUsability(formlyApiCheck, formlyErrorAndWarningsUrlPrefix) {\n\t  var _this = this;\n\t\n\t  angular.extend(this, {\n\t    getFormlyError: getFormlyError,\n\t    getFieldError: getFieldError,\n\t    checkWrapper: checkWrapper,\n\t    checkWrapperTemplate: checkWrapperTemplate,\n\t    $get: function () {\n\t      return _this;\n\t    }\n\t  });\n\t\n\t  function getFieldError(errorInfoSlug, message, field) {\n\t    if (arguments.length < 3) {\n\t      field = message;\n\t      message = errorInfoSlug;\n\t      errorInfoSlug = null;\n\t    }\n\t    return new Error(getErrorMessage(errorInfoSlug, message) + (\" Field definition: \" + angular.toJson(field)));\n\t  }\n\t\n\t  function getFormlyError(errorInfoSlug, message) {\n\t    if (!message) {\n\t      message = errorInfoSlug;\n\t      errorInfoSlug = null;\n\t    }\n\t    return new Error(getErrorMessage(errorInfoSlug, message));\n\t  }\n\t\n\t  function getErrorMessage(errorInfoSlug, message) {\n\t    var url = \"\";\n\t    if (errorInfoSlug !== null) {\n\t      url = \"\" + formlyErrorAndWarningsUrlPrefix + \"\" + errorInfoSlug;\n\t    }\n\t    return \"Formly Error: \" + message + \". \" + url;\n\t  }\n\t\n\t  function checkWrapper(wrapper) {\n\t    formlyApiCheck[\"throw\"](formlyApiCheck.formlyWrapperType, wrapper, {\n\t      prefix: \"formlyConfig.setWrapper\",\n\t      urlSuffix: \"setwrapper-validation-failed\"\n\t    });\n\t  }\n\t\n\t  function checkWrapperTemplate(template, additionalInfo) {\n\t    var formlyTransclude = \"<formly-transclude></formly-transclude>\";\n\t    if (template.indexOf(formlyTransclude) === -1) {\n\t      throw getFormlyError(\"Template wrapper templates must use \\\"\" + formlyTransclude + \"\\\" somewhere in them. \" + (\"This one does not have \\\"<formly-transclude></formly-transclude>\\\" in it: \" + template) + \"\\n\" + (\"Additional information: \" + JSON.stringify(additionalInfo)));\n\t    }\n\t  }\n\t}\n\tformlyUsability.$inject = [\"formlyApiCheck\", \"formlyErrorAndWarningsUrlPrefix\"];\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = formlyValidationMessages;\n\t\n\t// @ngInject\n\tfunction formlyValidationMessages() {\n\t\n\t  var validationMessages = {\n\t    addTemplateOptionValueMessage: addTemplateOptionValueMessage,\n\t    addStringMessage: addStringMessage,\n\t    messages: {}\n\t  };\n\t\n\t  return validationMessages;\n\t\n\t  function addTemplateOptionValueMessage(name, prop, prefix, suffix, alternate) {\n\t    validationMessages.messages[name] = templateOptionValue(prop, prefix, suffix, alternate);\n\t  }\n\t\n\t  function addStringMessage(name, string) {\n\t    validationMessages.messages[name] = function () {\n\t      return string;\n\t    };\n\t  }\n\t\n\t  function templateOptionValue(prop, prefix, suffix, alternate) {\n\t    return function getValidationMessage(viewValue, modelValue, scope) {\n\t      if (scope.options.templateOptions[prop]) {\n\t        return \"\" + prefix + \" \" + scope.options.templateOptions[prop] + \" \" + suffix;\n\t      } else {\n\t        return alternate;\n\t      }\n\t    };\n\t  }\n\t}\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = addCustomTags;\n\t\n\t// @ngInject\n\tfunction addCustomTags($document) {\n\t  if ($document && $document.get) {\n\t    (function () {\n\t      //IE8 check ->\n\t      // http://stackoverflow.com/questions/10964966/detect-ie-version-prior-to-v9-in-javascript/10965203#10965203\n\t      var document = $document.get(0);\n\t      var div = document.createElement(\"div\");\n\t      div.innerHTML = \"<!--[if lt IE 9]><i></i><![endif]-->\";\n\t      var isIeLessThan9 = div.getElementsByTagName(\"i\").length === 1;\n\t\n\t      if (isIeLessThan9) {\n\t        //add the custom elements that we need for formly\n\t        var customElements = [\"formly-field\", \"formly-form\", \"formly-custom-validation\", \"formly-focus\", \"formly-transpose\"];\n\t        angular.forEach(customElements, function (el) {\n\t          document.createElement(el);\n\t        });\n\t      }\n\t    })();\n\t  }\n\t}\n\taddCustomTags.$inject = [\"$document\"];\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _interopRequire = function (obj) { return obj && obj.__esModule ? obj[\"default\"] : obj; };\n\t\n\tvar angular = _interopRequire(__webpack_require__(1));\n\t\n\tmodule.exports = addFormlyNgModelAttrsManipulator;\n\t\n\t// @ngInject\n\tfunction addFormlyNgModelAttrsManipulator(formlyConfig) {\n\t  if (formlyConfig.extras.disableNgModelAttrsManipulator) {\n\t    return;\n\t  }\n\t  formlyConfig.templateManipulators.preWrapper.push(ngModelAttrsManipulator);\n\t\n\t  function ngModelAttrsManipulator(template, options, scope) {\n\t    /* jshint maxcomplexity:6 */\n\t    var el = document.createElement(\"div\");\n\t    var data = options.data;\n\t    if (data.skipNgModelAttrsManipulator === true) {\n\t      return template;\n\t    }\n\t    el.innerHTML = template;\n\t    var modelNodes = el.querySelectorAll(\"[ng-model], [data-ng-model]\");\n\t    if (!modelNodes || !modelNodes.length) {\n\t      return template;\n\t    }\n\t\n\t    addIfNotPresent(modelNodes, \"id\", scope.id);\n\t    addIfNotPresent(modelNodes, \"name\", scope.id);\n\t\n\t    addValidation();\n\t    addModelOptions();\n\t    addTemplateOptionsAttrs();\n\t\n\t    return el.innerHTML;\n\t\n\t    function addValidation() {\n\t      if (angular.isDefined(options.validators) || angular.isDefined(options.validation.messages)) {\n\t        addIfNotPresent(modelNodes, \"formly-custom-validation\", \"\");\n\t      }\n\t    }\n\t\n\t    function addModelOptions() {\n\t      if (angular.isDefined(options.modelOptions)) {\n\t        addIfNotPresent(modelNodes, \"ng-model-options\", \"options.modelOptions\");\n\t        if (options.modelOptions.getterSetter) {\n\t          angular.forEach(modelNodes, function (node) {\n\t            node.setAttribute(\"ng-model\", \"options.value\");\n\t          });\n\t        }\n\t      }\n\t    }\n\t\n\t    function addTemplateOptionsAttrs() {\n\t      if (!options.templateOptions && !options.expressionProperties) {\n\t        // no need to run these if there are no templateOptions or expressionProperties\n\t        return;\n\t      }\n\t      var to = options.templateOptions || {};\n\t      var ep = options.expressionProperties || {};\n\t\n\t      var ngModelAttributes = getBuiltInAttributes();\n\t\n\t      // extend with the user's specifications winning\n\t      angular.extend(ngModelAttributes, options.ngModelAttrs);\n\t\n\t      // Feel free to make this more simple :-)\n\t      angular.forEach(ngModelAttributes, function (val, name) {\n\t        /* jshint maxcomplexity:14 */\n\t        var attrVal = undefined;\n\t        var attrName = undefined;\n\t        var ref = \"options.templateOptions['\" + name + \"']\";\n\t        var toVal = to[name];\n\t        var epVal = getEpValue(ep, name);\n\t\n\t        var inTo = angular.isDefined(toVal);\n\t        var inEp = angular.isDefined(epVal);\n\t        if (val.value) {\n\t          // I realize this looks backwards, but it's right, trust me...\n\t          attrName = val.value;\n\t          attrVal = name;\n\t        } else if (val.expression && inTo) {\n\t          attrName = val.expression;\n\t          if (angular.isString(to[name])) {\n\t            attrVal = \"$eval(\" + ref + \")\";\n\t          } else if (angular.isFunction(to[name])) {\n\t            attrVal = \"\" + ref + \"(model[options.key], options, this, $event)\";\n\t          } else {\n\t            throw new Error(\"options.templateOptions.\" + name + \" must be a string or function: \" + JSON.stringify(options));\n\t          }\n\t        } else if (val.bound && inEp) {\n\t          attrName = val.bound;\n\t          attrVal = ref;\n\t        } else if ((val.attribute || val.boolean) && inEp) {\n\t          attrName = val.attribute || val.boolean;\n\t          attrVal = \"{{\" + ref + \"}}\";\n\t        } else if (val.attribute && inTo) {\n\t          attrName = val.attribute;\n\t          attrVal = toVal;\n\t        } else if (val.boolean) {\n\t          if (inTo && !inEp && toVal) {\n\t            attrName = val.boolean;\n\t            attrVal = true;\n\t          } else {}\n\t        } else if (val.bound && inTo) {\n\t          attrName = val.bound;\n\t          attrVal = ref;\n\t        }\n\t\n\t        if (angular.isDefined(attrName) && angular.isDefined(attrVal)) {\n\t          addIfNotPresent(modelNodes, attrName, attrVal);\n\t        }\n\t      });\n\t    }\n\t  }\n\t\n\t  // Utility functions\n\t  function getBuiltInAttributes() {\n\t    var ngModelAttributes = {\n\t      focus: {\n\t        attribute: \"formly-focus\"\n\t      }\n\t    };\n\t    var boundOnly = [];\n\t    var bothBooleanAndBound = [\"required\", \"disabled\"];\n\t    var bothAttributeAndBound = [\"pattern\", \"minlength\"];\n\t    var expressionOnly = [\"change\", \"keydown\", \"keyup\", \"keypress\", \"click\", \"focus\", \"blur\"];\n\t    var attributeOnly = [\"placeholder\", \"min\", \"max\", \"tabindex\", \"type\"];\n\t    if (formlyConfig.extras.ngModelAttrsManipulatorPreferUnbound) {\n\t      bothAttributeAndBound.push(\"maxlength\");\n\t    } else {\n\t      boundOnly.push(\"maxlength\");\n\t    }\n\t\n\t    angular.forEach(boundOnly, function (item) {\n\t      ngModelAttributes[item] = { bound: \"ng-\" + item };\n\t    });\n\t\n\t    angular.forEach(bothBooleanAndBound, function (item) {\n\t      ngModelAttributes[item] = { boolean: item, bound: \"ng-\" + item };\n\t    });\n\t\n\t    angular.forEach(bothAttributeAndBound, function (item) {\n\t      ngModelAttributes[item] = { attribute: item, bound: \"ng-\" + item };\n\t    });\n\t\n\t    angular.forEach(expressionOnly, function (item) {\n\t      var propName = \"on\" + item.substr(0, 1).toUpperCase() + item.substr(1);\n\t      ngModelAttributes[propName] = { expression: \"ng-\" + item };\n\t    });\n\t\n\t    angular.forEach(attributeOnly, function (item) {\n\t      ngModelAttributes[item] = { attribute: item };\n\t    });\n\t    return ngModelAttributes;\n\t  }\n\t\n\t  function getEpValue(ep, name) {\n\t    return ep[\"templateOptions.\" + name] || ep[\"templateOptions['\" + name + \"']\"] || ep[\"templateOptions[\\\"\" + name + \"\\\"]\"];\n\t  }\n\t\n\t  function addIfNotPresent(nodes, attr, val) {\n\t    angular.forEach(nodes, function (node) {\n\t      if (!node.getAttribute(attr)) {\n\t        node.setAttribute(attr, val);\n\t      }\n\t    });\n\t  }\n\t}\n\taddFormlyNgModelAttrsManipulator.$inject = [\"formlyConfig\"];\n\n\t// jshint -W035\n\t// empty to illustrate that a boolean will not be added via val.bound\n\t// if you want it added via val.bound, then put it in expressionProperties\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _interopRequire = function (obj) { return obj && obj.__esModule ? obj[\"default\"] : obj; };\n\t\n\tvar utils = _interopRequire(__webpack_require__(3));\n\t\n\tmodule.exports = formlyUtil;\n\t\n\t// @ngInject\n\tfunction formlyUtil() {\n\t  return utils;\n\t}\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _toConsumableArray = function (arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } };\n\t\n\tmodule.exports = formlyWarn;\n\t\n\t// @ngInject\n\tfunction formlyWarn(formlyConfig, formlyErrorAndWarningsUrlPrefix, $log) {\n\t  return function warn() {\n\t    if (!formlyConfig.disableWarnings) {\n\t      var args = Array.prototype.slice.call(arguments);\n\t      var warnInfoSlug = args.shift();\n\t      args.unshift(\"Formly Warning:\");\n\t      args.push(\"\" + formlyErrorAndWarningsUrlPrefix + \"\" + warnInfoSlug);\n\t      $log.warn.apply($log, _toConsumableArray(args));\n\t    }\n\t  };\n\t}\n\tformlyWarn.$inject = [\"formlyConfig\", \"formlyErrorAndWarningsUrlPrefix\", \"$log\"];\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_17__;\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_18__;\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** formly.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 444e93e49149bd679ed0\n **/","import index from './index.common';\nexport default index;\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./index.js\n **/","// some versions of angular don't export the angular module properly,\n// so we get it from window in this case.\nimport angular from 'angular';\nif (!angular.version) {\n  angular = window.angular;\n}\nexport default angular;\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./angular-fix/index.js\n **/","import angular from 'angular-fix';\n\nexport default {formlyEval, getFieldId, reverseDeepMerge, findByNodeName, arrayify, extendFunction};\n\nfunction formlyEval(scope, expression, $modelValue, $viewValue, extraLocals) {\n  if (angular.isFunction(expression)) {\n    return expression($viewValue, $modelValue, scope, extraLocals);\n  } else {\n    return scope.$eval(expression, angular.extend({$viewValue, $modelValue}, extraLocals));\n  }\n}\n\nfunction getFieldId(formId, options, index) {\n  var type = options.type;\n  if (!type && options.template) {\n    type = 'template';\n  } else if (!type && options.templateUrl) {\n    type = 'templateUrl';\n  }\n\n  return [formId, type, options.key, index].join('_');\n}\n\n\nfunction reverseDeepMerge(dest) {\n  angular.forEach(arguments, (src, index) => {\n    if (!index) {\n      return;\n    }\n    angular.forEach(src, (val, prop) => {\n      if (!angular.isDefined(dest[prop])) {\n        dest[prop] = angular.copy(val);\n      } else if (objAndSameType(dest[prop], val)) {\n        reverseDeepMerge(dest[prop], val);\n      }\n    });\n  });\n}\n\nfunction objAndSameType(obj1, obj2) {\n  return angular.isObject(obj1) && angular.isObject(obj2) &&\n    Object.getPrototypeOf(obj1) === Object.getPrototypeOf(obj2);\n}\n\n//recurse down a node tree to find a node with matching nodeName, for custom tags jQuery.find doesn't work in IE8\nfunction findByNodeName(el, nodeName) {\n  if (!el.prop) { // not a jQuery or jqLite object -> wrap it\n    el = angular.element(el);\n  }\n\n  if (el.prop('nodeName') === nodeName.toUpperCase()) {\n    return el;\n  }\n\n  var c = el.children();\n  for(var i = 0; c && i < c.length; i++) {\n    var node = findByNodeName(c[i], nodeName);\n    if (node) {\n      return node;\n    }\n  }\n}\n\n\nfunction arrayify(obj) {\n  if (obj && !angular.isArray(obj)) {\n    obj = [obj];\n  } else if (!obj) {\n    obj = [];\n  }\n  return obj;\n}\n\n\nfunction extendFunction(...fns) {\n  return function extendedFunction() {\n    var args = arguments;\n    fns.forEach(fn => fn.apply(null, args));\n  };\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./other/utils.js\n **/","export default formlyCustomValidation;\n\n// @ngInject\nfunction formlyCustomValidation(formlyUtil, $q) {\n  return {\n    restrict: 'A',\n    require: 'ngModel',\n    link: function formlyCustomValidationLink(scope, el, attrs, ctrl) {\n      const opts = scope.options;\n      if (opts.validators) {\n        checkValidators(opts.validators);\n      }\n      opts.validation.messages = opts.validation.messages || {};\n      angular.forEach(opts.validation.messages, (message, key) => {\n        opts.validation.messages[key] = () => {\n          return formlyUtil.formlyEval(scope, message, ctrl.$modelValue, ctrl.$viewValue);\n        };\n      });\n\n\n      var useNewValidatorsApi = ctrl.hasOwnProperty('$validators') && !attrs.hasOwnProperty('useParsers');\n      angular.forEach(opts.validators, function addValidatorToPipeline(validator, name) {\n        var message = validator.message;\n        if (message) {\n          opts.validation.messages[name] = () => {\n            return formlyUtil.formlyEval(scope, message, ctrl.$modelValue, ctrl.$viewValue);\n          };\n        }\n        validator = angular.isObject(validator) ? validator.expression : validator;\n        var isPossiblyAsync = !angular.isString(validator);\n        if (useNewValidatorsApi) {\n          setupWithValidators();\n        } else {\n          setupWithParsers();\n        }\n\n        function setupWithValidators() {\n          var validatorCollection = isPossiblyAsync ? '$asyncValidators' : '$validators';\n          ctrl[validatorCollection][name] = function evalValidity(modelValue, viewValue) {\n            var value = formlyUtil.formlyEval(scope, validator, modelValue, viewValue);\n            if (isPossiblyAsync) {\n              return isPromiseLike(value) ? value : value ? $q.when(value) : $q.reject(value);\n            } else {\n              return value;\n            }\n          };\n        }\n\n        function setupWithParsers() {\n          let inFlightValidator;\n          ctrl.$parsers.unshift(function evalValidityOfParser(viewValue) {\n            var isValid = formlyUtil.formlyEval(scope, validator, ctrl.$modelValue, viewValue);\n            if (isPromiseLike(isValid)) {\n              ctrl.$pending = ctrl.$pending || {};\n              ctrl.$pending[name] = true;\n              inFlightValidator = isValid;\n              isValid.then(() => {\n                if (inFlightValidator === isValid) {\n                  ctrl.$setValidity(name, true);\n                }\n              }).catch(() => {\n                if (inFlightValidator === isValid) {\n                  ctrl.$setValidity(name, false);\n                }\n              }).finally(() => {\n                if (Object.keys(ctrl.$pending).length === 1) {\n                  delete ctrl.$pending;\n                } else {\n                  delete ctrl.$pending[name];\n                }\n              });\n            } else {\n              ctrl.$setValidity(name, isValid);\n            }\n            return viewValue;\n          });\n        }\n      });\n    }\n  };\n\n  function isPromiseLike(obj) {\n    return obj && angular.isFunction(obj.then);\n  }\n\n  function checkValidators(validators) {\n    var allowedProperties = ['expression', 'message'];\n    var validatorsWithExtraProps = {};\n    angular.forEach(validators, (validator, name) => {\n      if (angular.isString(validator)) {\n        return;\n      }\n      var extraProps = [];\n      angular.forEach(validator, (v, key) => {\n        if (allowedProperties.indexOf(key) === -1) {\n          extraProps.push(key);\n        }\n      });\n      if (extraProps.length) {\n        validatorsWithExtraProps[name] = extraProps;\n      }\n    });\n    if (Object.keys(validatorsWithExtraProps).length) {\n      throw new Error([\n        `Validators are only allowed to be functions or objects that have ${allowedProperties.join(', ')}.`,\n        `You provided some extra properties: ${JSON.stringify(validatorsWithExtraProps)}`\n      ].join(' '));\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./directives/formly-custom-validation.js\n **/","import angular from 'angular-fix';\n\nexport default formlyField;\n\n/**\n * @ngdoc directive\n * @name formlyField\n * @restrict AE\n */\n// @ngInject\nfunction formlyField($http, $q, $compile, $templateCache, formlyConfig, formlyValidationMessages, formlyApiCheck,\n                     formlyUtil, formlyUsability, formlyWarn) {\n  const {arrayify} = formlyUtil;\n\n  return {\n    restrict: 'AE',\n    transclude: true,\n    scope: {\n      options: '=',\n      model: '=',\n      formId: '@',\n      index: '=?',\n      fields: '=?',\n      formState: '=?',\n      form: '=?'\n    },\n    controller: FormlyFieldController,\n    link: fieldLink\n  };\n\n\n  // @ngInject\n  function FormlyFieldController($scope, $timeout, $parse, $controller) {\n    /* jshint maxstatements:31 */\n    if ($scope.options.fieldGroup) {\n      setupFieldGroup();\n      return;\n    }\n\n    var fieldType = getFieldType($scope.options);\n    simplifyLife($scope.options);\n    mergeFieldOptionsWithTypeDefaults($scope.options, fieldType);\n    extendOptionsWithDefaults($scope.options, $scope.index);\n    checkApi($scope.options);\n    // set field id to link labels and fields\n    $scope.id = formlyUtil.getFieldId($scope.formId, $scope.options, $scope.index);\n\n    // initalization\n    setDefaultValue();\n    setInitialValue();\n    runExpressions();\n    addModelWatcher($scope, $scope.options);\n    addValidationMessages($scope.options);\n    invokeControllers($scope, $scope.options, fieldType);\n\n    // function definitions\n    function runExpressions() {\n      // must run on next tick to make sure that the current value is correct.\n      $timeout(function runExpressionsOnNextTick() {\n        var field = $scope.options;\n        var currentValue = valueGetterSetter();\n        angular.forEach(field.expressionProperties, function runExpression(expression, prop) {\n          var setter = $parse(prop).assign;\n          var promise = $q.when(formlyUtil.formlyEval($scope, expression, currentValue));\n          promise.then(function setFieldValue(value) {\n            setter(field, value);\n          });\n        });\n      });\n    }\n\n    function valueGetterSetter(newVal) {\n      if (!$scope.model || !$scope.options.key) {\n        return;\n      }\n      if (angular.isDefined(newVal)) {\n        $scope.model[$scope.options.key] = newVal;\n      }\n      return $scope.model[$scope.options.key];\n    }\n\n    function simplifyLife(options) {\n      // add a few empty objects (if they don't already exist) so you don't have to undefined check everywhere\n      formlyUtil.reverseDeepMerge(options, {\n        data: {},\n        templateOptions: {},\n        validation: {}\n      });\n      // create $scope.to so template authors can reference to instead of $scope.options.templateOptions\n      $scope.to = $scope.options.templateOptions;\n    }\n\n    function setDefaultValue() {\n      if (angular.isDefined($scope.options.defaultValue) && !angular.isDefined($scope.model[$scope.options.key])) {\n        $scope.model[$scope.options.key] = $scope.options.defaultValue;\n      }\n    }\n\n    function setInitialValue() {\n      $scope.options.initialValue = $scope.model && $scope.model[$scope.options.key];\n    }\n\n    function mergeFieldOptionsWithTypeDefaults(options, type) {\n      if (type) {\n        mergeOptions(options, type.defaultOptions);\n      }\n      var properOrder = arrayify(options.optionsTypes).reverse(); // so the right things are overridden\n      angular.forEach(properOrder, typeName => {\n        mergeOptions(options, formlyConfig.getType(typeName, true, options).defaultOptions);\n      });\n    }\n\n    function mergeOptions(options, extraOptions) {\n      if (extraOptions) {\n        if (angular.isFunction(extraOptions)) {\n          extraOptions = extraOptions(options);\n        }\n        formlyUtil.reverseDeepMerge(options, extraOptions);\n      }\n    }\n\n    function extendOptionsWithDefaults(options, index) {\n      const key = options.key || index || 0;\n      angular.extend(options, {\n        // attach the key in case the formly-field directive is used directly\n        key,\n        value: valueGetterSetter,\n        runExpressions,\n        resetModel,\n        updateInitialValue\n      });\n    }\n\n    // initialization functions\n    function addModelWatcher(scope, options) {\n      if (options.model) {\n        scope.$watch('options.model', runExpressions, true);\n      }\n    }\n\n    function resetModel() {\n      $scope.model[$scope.options.key] = $scope.options.initialValue;\n      if ($scope.options.formControl) {\n        $scope.options.formControl.$setViewValue($scope.model[$scope.options.key]);\n        $scope.options.formControl.$render();\n        $scope.options.formControl.$setUntouched();\n        $scope.options.formControl.$setPristine();\n      }\n    }\n\n    function updateInitialValue() {\n      $scope.options.initialValue = $scope.model[$scope.options.key];\n    }\n\n    function addValidationMessages(options) {\n      options.validation.messages = options.validation.messages || {};\n      angular.forEach(formlyValidationMessages.messages, function createFunctionForMessage(expression, name) {\n        if (!options.validation.messages[name]) {\n          options.validation.messages[name] = function evaluateMessage(viewValue, modelValue, scope) {\n            return formlyUtil.formlyEval(scope, expression, modelValue, viewValue);\n          };\n        }\n      });\n    }\n\n    function invokeControllers(scope, options = {}, type = {}) {\n      angular.forEach([type.controller, options.controller], controller => {\n        if (controller) {\n          $controller(controller, {$scope: scope});\n        }\n      });\n    }\n\n    function setupFieldGroup() {\n      $scope.options.options = $scope.options.options || {};\n      $scope.options.options.formState = $scope.formState;\n    }\n  }\n\n\n\n  // link function\n  function fieldLink(scope, el) {\n    if (scope.options.fieldGroup) {\n      setFieldGroupTemplate();\n      return;\n    }\n\n    addAttributes();\n    addClasses();\n\n    var type = getFieldType(scope.options);\n    var args = arguments;\n    var thusly = this;\n    getFieldTemplate(scope.options)\n      .then(runManipulators(formlyConfig.templateManipulators.preWrapper))\n      .then(transcludeInWrappers(scope.options))\n      .then(runManipulators(formlyConfig.templateManipulators.postWrapper))\n      .then(setElementTemplate)\n      .then(watchFormControl)\n      .then(callLinkFunctions)\n      .catch(error => {\n        formlyWarn(\n          'there-was-a-problem-setting-the-template-for-this-field',\n          'There was a problem setting the template for this field ',\n          scope.options,\n          error\n        );\n      });\n\n    function setFieldGroupTemplate() {\n      checkFieldGroupApi(scope.options);\n      el.addClass('formly-field-group');\n      let extraAttributes = '';\n      if (scope.options.elementAttributes) {\n        extraAttributes = Object.keys(scope.options.elementAttributes).map(key => {\n          return `${key}=\"${scope.options.elementAttributes[key]}\"`;\n        }).join(' ');\n      }\n      setElementTemplate(`\n          <formly-form model=\"model\"\n                       fields=\"options.fieldGroup\"\n                       options=\"options.options\"\n                       form=\"options.form\"\n                       class=\"${scope.options.className}\"\n                       ${extraAttributes}\n                       is-field-group>\n          </formly-form>\n        `);\n    }\n\n    function addAttributes() {\n      if (scope.options.elementAttributes) {\n        el.attr(scope.options.elementAttributes);\n      }\n    }\n\n    function addClasses() {\n      if (scope.options.className) {\n        el.addClass(scope.options.className);\n      }\n      if (scope.options.type) {\n        el.addClass(`formly-field-${scope.options.type}`);\n      }\n    }\n\n    function setElementTemplate(templateString) {\n      el.html(asHtml(templateString));\n      $compile(el.contents())(scope);\n      return templateString;\n    }\n\n    function watchFormControl(templateString) {\n      let stopWatchingField = angular.noop;\n      let stopWatchingShowError = angular.noop;\n      if (scope.options.noFormControl) {\n        return;\n      }\n      const templateEl = angular.element(`<div>${templateString}</div>`);\n      const ngModelNode = templateEl[0].querySelector('[ng-model],[data-ng-model]');\n      if (ngModelNode && ngModelNode.getAttribute('name')) {\n        watchFieldNameOrExistence(ngModelNode.getAttribute('name'));\n      }\n\n      function watchFieldNameOrExistence(name) {\n        const nameExpressionRegex = /\\{\\{(.*?)}}/;\n        const nameExpression = nameExpressionRegex.exec(name);\n        if (nameExpression) {\n          watchFieldName(nameExpression[1]);\n        } else {\n          watchFieldExistence(name);\n        }\n      }\n\n      function watchFieldName(expression) {\n        scope.$watch(expression, function oneFieldNameChange(name) {\n          if (name) {\n            stopWatchingField();\n            watchFieldExistence(name);\n          }\n        });\n      }\n\n      function watchFieldExistence(name) {\n        stopWatchingField = scope.$watch(`form[\"${name}\"]`, function formControlChange(formControl) {\n          if (formControl) {\n            scope.fc = formControl; // shortcut for template authors\n            scope.options.formControl = formControl;\n            stopWatchingShowError();\n            addShowMessagesWatcher();\n          }\n        });\n      }\n\n      function addShowMessagesWatcher() {\n        stopWatchingShowError = scope.$watch(function watchShowValidationChange() {\n          const customExpression = formlyConfig.extras.errorExistsAndShouldBeVisibleExpression;\n          const {options, fc} = scope;\n          if (!fc.$invalid) {\n            return false;\n          } else if (typeof options.validation.show === 'boolean') {\n            return options.validation.show;\n          } else if (customExpression) {\n            return formlyUtil.formlyEval(scope, customExpression, fc.$modelValue, fc.$viewValue);\n          } else {\n            let noTouchedButDirty = (angular.isUndefined(fc.$touched) && fc.$dirty);\n            return (scope.fc.$touched || noTouchedButDirty);\n          }\n        }, function onShowValidationChange(show) {\n          scope.options.validation.errorExistsAndShouldBeVisible = show;\n          scope.showError = show; // shortcut for template authors\n        });\n      }\n    }\n\n    function callLinkFunctions() {\n      if (type && type.link) {\n        type.link.apply(thusly, args);\n      }\n      if (scope.options.link) {\n        scope.options.link.apply(thusly, args);\n      }\n    }\n\n\n    function runManipulators(manipulators) {\n      return function runManipulatorsOnTemplate(template) {\n        var chain = $q.when(template);\n        angular.forEach(manipulators, manipulator => {\n          chain = chain.then(template => {\n            return $q.when(manipulator(template, scope.options, scope)).then(newTemplate => {\n              return angular.isString(newTemplate) ? newTemplate : asHtml(newTemplate);\n            });\n          });\n        });\n        return chain;\n      };\n    }\n  }\n\n  // stateless util functions\n  function asHtml(el) {\n    var wrapper = angular.element('<a></a>');\n    return wrapper.append(el).html();\n  }\n\n  function getFieldType(options) {\n    return options.type && formlyConfig.getType(options.type);\n  }\n\n  function getFieldTemplate(options) {\n    function fromOptionsOrType(key, type){\n      if(angular.isDefined(options[key])){\n        return options[key];\n      } else if(type && angular.isDefined(type[key])){\n        return type[key];\n      }\n    }\n\n    let type = formlyConfig.getType(options.type, true, options);\n    let template = fromOptionsOrType('template', type);\n    let templateUrl = fromOptionsOrType('templateUrl', type);\n    if (angular.isUndefined(template) && !templateUrl) {\n      throw formlyUsability.getFieldError(\n        'type-type-has-no-template',\n        `Type '${options.type}' has not template. On element:`, options\n      );\n    }\n\n    return getTemplate(templateUrl || template, angular.isUndefined(template), options);\n  }\n\n\n  function getTemplate(template, isUrl, options) {\n    let templatePromise;\n    if (angular.isFunction(template)) {\n      templatePromise = $q.when(template(options));\n    } else {\n      templatePromise = $q.when(template);\n    }\n\n    if (!isUrl) {\n      return templatePromise;\n    } else {\n      let httpOptions = {cache: $templateCache};\n      return templatePromise\n        .then((url) => $http.get(url, httpOptions))\n        .then((response) => response.data)\n        .catch(function handleErrorGettingATemplate(error) {\n          formlyWarn(\n            'problem-loading-template-for-templateurl',\n            'Problem loading template for ' + template,\n            error\n          );\n        });\n    }\n  }\n\n  function transcludeInWrappers(options) {\n    let wrapper = getWrapperOption(options);\n\n    return function transcludeTemplate(template) {\n      if (!wrapper.length) {\n        return $q.when(template);\n      }\n\n      wrapper.forEach((wrapper) => {\n        formlyUsability.checkWrapper(wrapper, options);\n        wrapper.validateOptions && wrapper.validateOptions(options);\n        runApiCheck(wrapper, options);\n      });\n      let promises = wrapper.map(w => getTemplate(w.template || w.templateUrl, !w.template));\n      return $q.all(promises).then(wrappersTemplates => {\n        wrappersTemplates.forEach((wrapperTemplate, index) => {\n          formlyUsability.checkWrapperTemplate(wrapperTemplate, wrapper[index]);\n        });\n        wrappersTemplates.reverse(); // wrapper 0 is wrapped in wrapper 1 and so on...\n        let totalWrapper = wrappersTemplates.shift();\n        wrappersTemplates.forEach(wrapperTemplate => {\n          totalWrapper = doTransclusion(totalWrapper, wrapperTemplate);\n        });\n        return doTransclusion(totalWrapper, template);\n      });\n    };\n  }\n\n  function doTransclusion(wrapper, template) {\n    let superWrapper = angular.element('<a></a>'); // this allows people not have to have a single root in wrappers\n    superWrapper.append(wrapper);\n    let transcludeEl = superWrapper.find('formly-transclude');\n    if (!transcludeEl.length) {\n      //try it using our custom find function\n      transcludeEl = formlyUtil.findByNodeName(superWrapper, 'formly-transclude');\n    }\n    transcludeEl.replaceWith(template);\n    return superWrapper.html();\n  }\n\n  function getWrapperOption(options) {\n    let wrapper = options.wrapper;\n    // explicit null means no wrapper\n    if (wrapper === null) {\n      return [];\n    }\n\n    // nothing specified means use the default wrapper for the type\n    if (!wrapper) {\n      // get all wrappers that specify they apply to this type\n      wrapper = arrayify(formlyConfig.getWrapperByType(options.type));\n    } else {\n      wrapper = arrayify(wrapper).map(formlyConfig.getWrapper);\n    }\n\n    // get all wrappers for that this type specified that it uses.\n    var type = formlyConfig.getType(options.type, true, options);\n    if (type && type.wrapper) {\n      let typeWrappers = arrayify(type.wrapper).map(formlyConfig.getWrapper);\n      wrapper = wrapper.concat(typeWrappers);\n    }\n\n    // add the default wrapper last\n    var defaultWrapper = formlyConfig.getWrapper();\n    if (defaultWrapper) {\n      wrapper.push(defaultWrapper);\n    }\n    return wrapper;\n  }\n\n  function checkApi(options) {\n    formlyApiCheck.throw(formlyApiCheck.formlyFieldOptions, options, {\n      prefix: 'formly-field directive',\n      url: 'formly-field-directive-validation-failed'\n    });\n    // validate with the type\n    const type = options.type && formlyConfig.getType(options.type);\n    if (type) {\n      if (type.validateOptions) {\n        type.validateOptions(options);\n      }\n      runApiCheck(type, options);\n    }\n  }\n\n  function checkFieldGroupApi(options) {\n    formlyApiCheck.throw(formlyApiCheck.fieldGroup, options, {\n      prefix: 'formly-field directive',\n      url: 'formly-field-directive-validation-failed'\n    });\n  }\n\n  function runApiCheck({apiCheck, apiCheckInstance, apiCheckFunction, apiCheckOptions}, options) {\n    if (!apiCheck) {\n      return;\n    }\n    const instance = apiCheckInstance || formlyApiCheck;\n    const fn = apiCheckFunction || 'warn';\n    const shape = instance.shape(apiCheck);\n    instance[fn](shape, options, apiCheckOptions || {\n        prefix: `formly-field ${name}`,\n        url: formlyApiCheck.config.output.docsBaseUrl + 'formly-field-type-apicheck-failed'\n      });\n  }\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./directives/formly-field.js\n **/","export default formlyFocus;\n\n// @ngInject\nfunction formlyFocus($timeout, $document) {\n  /* jshint -W052 */\n  return {\n    restrict: 'A',\n    link: function formlyFocusLink(scope, element, attrs) {\n      var previousEl = null;\n      var el = element[0];\n      var doc = $document[0];\n      attrs.$observe('formlyFocus', function respondToFocusExpressionChange(value) {\n        if (value === 'true') {\n          $timeout(function setElementFocus() {\n            previousEl = doc.activeElement;\n            el.focus();\n          }, ~~attrs.focusWait);\n        } else if (value === 'false') {\n          if (doc.activeElement === el) {\n            el.blur();\n            if (attrs.hasOwnProperty('refocus') && previousEl) {\n              previousEl.focus();\n            }\n          }\n        }\n      });\n    }\n  };\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./directives/formly-focus.js\n **/","import angular from 'angular-fix';\n\nexport default formlyForm;\n\n/**\n * @ngdoc directive\n * @name formlyForm\n * @restrict E\n */\n// @ngInject\nfunction formlyForm(formlyUsability, $parse, formlyApiCheck, formlyConfig) {\n  var currentFormId = 1;\n  return {\n    restrict: 'E',\n    template: function formlyFormGetTemplate(el, attrs) {\n      /* jshint -W033 */ // this because jshint is broken I guess...\n      const rootEl = getRootEl();\n      const fieldRootEl = getFieldRootEl();\n      const formId = `formly_${currentFormId++}`;\n      let parentFormAttributes;\n      if (attrs.hasOwnProperty('isFieldGroup') && el.parent().parent().hasClass('formly')) {\n        parentFormAttributes = copyAttributes(el.parent().parent()[0].attributes);\n      }\n      return `\n        <${rootEl} class=\"formly\"\n                 name=\"${getFormName()}\"\n                 role=\"form\" ${parentFormAttributes}>\n          <${fieldRootEl} formly-field\n               ng-repeat=\"field in fields ${getTrackBy()}\"\n               ${getHideDirective()}=\"!field.hide\"\n               class=\"formly-field\"\n               options=\"field\"\n               model=\"field.model || model\"\n               fields=\"fields\"\n               form=\"${formId}\"\n               form-id=\"${formId}\"\n               form-state=\"options.formState\"\n               index=\"$index\">\n          </${fieldRootEl}>\n          <div ng-transclude></div>\n        </${rootEl}>\n      `;\n\n      function getRootEl() {\n        return attrs.rootEl || 'ng-form';\n      }\n\n      function getFieldRootEl() {\n        return attrs.fieldRootEl || 'div';\n      }\n\n      function getHideDirective() {\n        return attrs.hideDirective || formlyConfig.extras.defaultHideDirective || 'ng-if';\n      }\n\n      function getTrackBy() {\n        if (!attrs.trackBy) {\n          return '';\n        } else {\n          return `track by ${attrs.trackBy}`;\n        }\n      }\n\n      function getFormName() {\n        let formName = formId;\n        const bindName = attrs.bindName;\n        if (bindName) {\n          if (angular.version.minor < 3) {\n            throw formlyUsability.getFormlyError('bind-name attribute on formly-form not allowed in > angular 1.3');\n          }\n          // we can do a one-time binding here because we know we're in 1.3.x territory\n          formName = `{{::'formly_' + ${bindName}}}`;\n        }\n        return formName;\n      }\n\n      function copyAttributes(attributes) {\n        const excluded = ['model', 'form', 'fields', 'options', 'name', 'role', 'class'];\n        const arrayAttrs = [];\n        angular.forEach(attributes, ({nodeName, nodeValue}) => {\n          if (nodeName !== 'undefined' && excluded.indexOf(nodeName) === -1) {\n            arrayAttrs.push(`${toKebabCase(nodeName)}=\"${nodeValue}\"`);\n          }\n        });\n        return arrayAttrs.join(' ');\n      }\n\n      function toKebabCase(string) {\n        if (string) {\n          return string.replace(/([A-Z])/g, $1 => '-' + $1.toLowerCase());\n        } else {\n          return '';\n        }\n      }\n    },\n    replace: true,\n    transclude: true,\n    scope: {\n      fields: '=',\n      model: '=',\n      form: '=?',\n      options: '=?'\n    },\n    controller: /* @ngInject */ function FormlyFormController($scope, formlyUtil) {\n      setupOptions();\n      $scope.model = $scope.model || {};\n      $scope.fields = $scope.fields || [];\n\n      angular.forEach($scope.fields, attachKey); // attaches a key based on the index if a key isn't specified\n      angular.forEach($scope.fields, setupWatchers); // setup watchers for all fields\n\n      // watch the model and evaluate watch expressions that depend on it.\n      $scope.$watch('model', onModelOrFormStateChange, true);\n      if ($scope.options.formState) {\n        $scope.$watch('options.formState', onModelOrFormStateChange, true);\n      }\n\n      function onModelOrFormStateChange() {\n        angular.forEach($scope.fields, function runFieldExpressionProperties(field, index) {\n          /*jshint -W030 */\n          const model = field.model || $scope.model;\n          field.runExpressions && field.runExpressions(model);\n          if (field.hideExpression) { // can't use hide with expressionProperties reliably\n            const val = model[field.key];\n            // this makes it closer to what a regular expressionProperty would be\n            const extraLocals = {\n              options: field,\n              index: index,\n              formState: $scope.options.formState,\n              formId: $scope.formId\n            };\n            field.hide = formlyUtil.formlyEval($scope, field.hideExpression, val, val, extraLocals);\n          }\n        });\n      }\n\n      function setupOptions() {\n        formlyApiCheck.throw(\n          [formlyApiCheck.formOptionsApi.optional], [$scope.options], {prefix: 'formly-form options check'}\n        );\n        $scope.options = $scope.options || {};\n        $scope.options.formState = $scope.options.formState || {};\n\n        angular.extend($scope.options, {\n          updateInitialValue,\n          resetModel\n        });\n\n      }\n\n      function updateInitialValue() {\n        angular.forEach($scope.fields, field => {\n          if (isFieldGroup(field)) {\n            field.options.updateInitialValue();\n          } else {\n            field.updateInitialValue();\n          }\n        });\n      }\n\n      function resetModel() {\n        angular.forEach($scope.fields, field => {\n          if (isFieldGroup(field)) {\n            field.options.resetModel();\n          } else {\n            field.resetModel();\n          }\n        });\n      }\n\n      function attachKey(field, index) {\n        if (!isFieldGroup(field)) {\n          field.key = field.key || index || 0;\n        }\n      }\n\n      function setupWatchers(field, index) {\n        if (isFieldGroup(field) || !angular.isDefined(field.watcher)) {\n          return;\n        }\n        var watchers = field.watcher;\n        if (!angular.isArray(watchers)) {\n          watchers = [watchers];\n        }\n        angular.forEach(watchers, function setupWatcher(watcher) {\n          if (!angular.isDefined(watcher.listener)) {\n            throw formlyUsability.getFieldError(\n              'all-field-watchers-must-have-a-listener',\n              'All field watchers must have a listener', field\n            );\n          }\n          var watchExpression = getWatchExpression(watcher, field, index);\n          var watchListener = getWatchListener(watcher, field, index);\n\n          var type = watcher.type || '$watch';\n          watcher.stopWatching = $scope[type](watchExpression, watchListener, watcher.watchDeep);\n        });\n      }\n\n      function getWatchExpression(watcher, field, index) {\n        var watchExpression = watcher.expression || `model['${field.key}']`;\n        if (angular.isFunction(watchExpression)) {\n          // wrap the field's watch expression so we can call it with the field as the first arg\n          // and the stop function as the last arg as a helper\n          var originalExpression = watchExpression;\n          watchExpression = function formlyWatchExpression() {\n            var args = modifyArgs(watcher, index, ...arguments);\n            return originalExpression(...args);\n          };\n          watchExpression.displayName = `Formly Watch Expression for field for ${field.key}`;\n        }\n        return watchExpression;\n      }\n\n      function getWatchListener(watcher, field, index) {\n        var watchListener = watcher.listener;\n        if (angular.isFunction(watchListener)) {\n          // wrap the field's watch listener so we can call it with the field as the first arg\n          // and the stop function as the last arg as a helper\n          var originalListener = watchListener;\n          watchListener = function formlyWatchListener() {\n            var args = modifyArgs(watcher, index, ...arguments);\n            return originalListener(...args);\n          };\n          watchListener.displayName = `Formly Watch Listener for field for ${field.key}`;\n        }\n        return watchListener;\n      }\n\n      function modifyArgs(watcher, index, ...originalArgs) {\n        return [$scope.fields[index], ...originalArgs, watcher.stopWatching];\n      }\n\n      function isFieldGroup(field) {\n        return field && !!field.fieldGroup;\n      }\n    },\n    link(scope, el, attrs) {\n      if (attrs.form) {\n        const formId = attrs.name;\n        scope.formId = formId;\n        $parse(attrs.form).assign(scope.$parent, scope[formId]);\n      }\n\n      // chrome autocomplete lameness\n      // see https://code.google.com/p/chromium/issues/detail?id=468153#c14\n      // ლ(ಠ益ಠლ)   (╯°□°)╯︵ ┻━┻    (◞‸◟；)\n      const global = formlyConfig.extras.removeChromeAutoComplete === true;\n      const offInstance = scope.options && scope.options.removeChromeAutoComplete === false;\n      const onInstance = scope.options && scope.options.removeChromeAutoComplete === true;\n      if ((global && !offInstance) || onInstance) {\n        const input = document.createElement('input');\n        input.setAttribute('autocomplete', 'address-level4');\n        input.setAttribute('hidden', true);\n        el[0].appendChild(input);\n      }\n    }\n  };\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./directives/formly-form.js\n **/","import angular from 'angular-fix';\n\nimport formlyApiCheck from './providers/formlyApiCheck';\nimport formlyErrorAndWarningsUrlPrefix from './other/docsBaseUrl';\nimport formlyUsability from './providers/formlyUsability';\nimport formlyConfig from './providers/formlyConfig';\nimport formlyValidationMessages from './providers/formlyValidationMessages';\nimport formlyUtil from './services/formlyUtil';\nimport formlyWarn from './services/formlyWarn';\n\nimport formlyCustomValidation from './directives/formly-custom-validation';\nimport formlyField from './directives/formly-field';\nimport formlyFocus from './directives/formly-focus';\nimport formlyForm from './directives/formly-form';\n\nimport formlyNgModelAttrsManipulator from './run/formlyNgModelAttrsManipulator';\nimport formlyCustomTags from './run/formlyCustomTags';\n\nconst ngModuleName = 'formly';\n\nexport default ngModuleName;\n\nconst ngModule = angular.module(ngModuleName, []);\n\nngModule.constant('formlyApiCheck', formlyApiCheck);\nngModule.constant('formlyErrorAndWarningsUrlPrefix', formlyErrorAndWarningsUrlPrefix);\nngModule.constant('formlyVersion', VERSION); // <-- webpack variable\n\nngModule.provider('formlyUsability', formlyUsability);\nngModule.provider('formlyConfig', formlyConfig);\n\nngModule.factory('formlyValidationMessages', formlyValidationMessages);\nngModule.factory('formlyUtil', formlyUtil);\nngModule.factory('formlyWarn', formlyWarn);\n\nngModule.directive('formlyCustomValidation', formlyCustomValidation);\nngModule.directive('formlyField', formlyField);\nngModule.directive('formlyFocus', formlyFocus);\nngModule.directive('formlyForm', formlyForm);\n\nngModule.run(formlyNgModelAttrsManipulator);\nngModule.run(formlyCustomTags);\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./index.common.js\n **/","import apiCheckFactory from 'api-check';\n\nlet apiCheck = apiCheckFactory({\n  output: {\n    prefix: 'angular-formly:',\n    docsBaseUrl: require('../other/docsBaseUrl')\n  }\n});\n\nfunction shapeRequiredIfNot(otherProps, propChecker) {\n  if (!angular.isArray(otherProps)) {\n    otherProps = [otherProps];\n  }\n  const type = `specified if these are not specified: \\`${otherProps.join(', ')}\\` (otherwise it's optional)`;\n  function shapeRequiredIfNotDefinition(prop, propName, location, obj) {\n    var propExists = obj && obj.hasOwnProperty(propName);\n    var otherPropsExist = otherProps.some(function (otherProp) {\n      return obj && obj.hasOwnProperty(otherProp);\n    });\n    if (!otherPropsExist && !propExists) {\n      return apiCheck.utils.getError(propName, location, type);\n    } else if (propExists) {\n      return propChecker(prop, propName, location, obj);\n    }\n  }\n  shapeRequiredIfNotDefinition.type = type;\n  return apiCheck.utils.checkerHelpers.setupChecker(shapeRequiredIfNotDefinition);\n}\n\nlet formlyExpression = apiCheck.oneOfType([apiCheck.string, apiCheck.func]);\nlet specifyWrapperType = apiCheck.oneOfType([\n  apiCheck.oneOf([null]), apiCheck.typeOrArrayOf(apiCheck.string)\n]);\n\nconst apiCheckProperty = apiCheck.objectOf(apiCheck.func);\n\nconst apiCheckInstanceProperty = apiCheck.shape.onlyIf('apiCheck', apiCheck.func.withProperties({\n  warn: apiCheck.func,\n  throw: apiCheck.func,\n  shape: apiCheck.func\n}));\n\nconst apiCheckFunctionProperty = apiCheck.shape.onlyIf('apiCheck', apiCheck.oneOf(['throw', 'warn']));\n\nconst formlyWrapperType = apiCheck.shape({\n  name: shapeRequiredIfNot('types', apiCheck.string).optional,\n  template: apiCheck.shape.ifNot('templateUrl', apiCheck.string).optional,\n  templateUrl: apiCheck.shape.ifNot('template', apiCheck.string).optional,\n  types: apiCheck.typeOrArrayOf(apiCheck.string).optional,\n  overwriteOk: apiCheck.bool.optional,\n  validateOptions: apiCheck.func.optional,\n  apiCheck: apiCheckProperty.optional,\n  apiCheckInstance: apiCheckInstanceProperty.optional,\n  apiCheckFunction: apiCheckFunctionProperty.optional,\n  apiCheckOptions: apiCheck.object.optional\n}).strict;\n\nconst expressionProperties = apiCheck.objectOf(apiCheck.oneOfType([\n  formlyExpression,\n  apiCheck.shape({\n    expression: formlyExpression,\n    message: formlyExpression.optional\n  }).strict\n]));\n\nlet fieldOptionsApiShape = {\n  $$hashKey: apiCheck.any.optional,\n  type: apiCheck.shape.ifNot(['template', 'templateUrl'], apiCheck.string).optional,\n  template: apiCheck.shape.ifNot(\n    ['type', 'templateUrl'],\n    apiCheck.oneOfType([apiCheck.string, apiCheck.func])\n  ).optional,\n  templateUrl: apiCheck.shape.ifNot(\n    ['type', 'template'],\n    apiCheck.oneOfType([apiCheck.string, apiCheck.func])\n  ).optional,\n  key: apiCheck.oneOfType([apiCheck.string, apiCheck.number]).optional,\n  model: apiCheck.object.optional,\n  className: apiCheck.string.optional,\n  expressionProperties: expressionProperties.optional,\n  data: apiCheck.object.optional,\n  templateOptions: apiCheck.object.optional,\n  wrapper: specifyWrapperType.optional,\n  modelOptions: apiCheck.shape({\n    updateOn: apiCheck.string.optional,\n    debounce: apiCheck.oneOfType([\n      apiCheck.object, apiCheck.string\n    ]).optional,\n    allowInvalid: apiCheck.bool.optional,\n    getterSetter: apiCheck.bool.optional,\n    timezone: apiCheck.string.optional\n  }).optional,\n  watcher: apiCheck.typeOrArrayOf(\n    apiCheck.shape({\n      expression: formlyExpression.optional,\n      listener: formlyExpression\n    })\n  ).optional,\n  validators: apiCheck.objectOf(apiCheck.oneOfType([\n    formlyExpression, apiCheck.shape({\n      expression: formlyExpression,\n      message: formlyExpression.optional\n    }).strict\n  ])).optional,\n  noFormControl: apiCheck.bool.optional,\n  hide: apiCheck.bool.optional,\n  hideExpression: formlyExpression.optional,\n  ngModelAttrs: apiCheck.objectOf(apiCheck.shape({\n    expression: apiCheck.shape.ifNot(['value', 'attribute', 'bound'], apiCheck.any).optional,\n    value: apiCheck.shape.ifNot('expression', apiCheck.any).optional,\n    attribute: apiCheck.shape.ifNot('expression', apiCheck.any).optional,\n    bound: apiCheck.shape.ifNot('expression', apiCheck.any).optional\n  }).strict).optional,\n  elementAttributes: apiCheck.objectOf(apiCheck.string).optional,\n  optionsTypes: apiCheck.typeOrArrayOf(apiCheck.string).optional,\n  link: apiCheck.func.optional,\n  controller: apiCheck.oneOfType([\n    apiCheck.string, apiCheck.func, apiCheck.array\n  ]).optional,\n  validation: apiCheck.shape({\n    show: apiCheck.oneOfType([\n      apiCheck.bool, apiCheck.oneOf([null])\n    ]).optional,\n    messages: apiCheck.objectOf(formlyExpression).optional,\n    errorExistsAndShouldBeVisible: apiCheck.bool.optional\n  }).optional,\n  formControl: apiCheck.object.optional,\n  value: apiCheck.func.optional,\n  runExpressions: apiCheck.func.optional,\n  resetModel: apiCheck.func.optional,\n  updateInitialValue: apiCheck.func.optional,\n  initialValue: apiCheck.any.optional,\n  defaultValue: apiCheck.any.optional\n};\n\n\nlet formlyFieldOptions = apiCheck.shape(fieldOptionsApiShape).strict;\n\n\nconst formOptionsApi = apiCheck.shape({\n  formState: apiCheck.object.optional,\n  resetModel: apiCheck.func.optional,\n  updateInitialValue: apiCheck.func.optional,\n  removeChromeAutoComplete: apiCheck.bool.optional\n}).strict;\n\n\nconst fieldGroup = apiCheck.shape({\n  $$hashKey: apiCheck.any.optional,\n  fieldGroup: apiCheck.arrayOf(formlyFieldOptions),\n  className: apiCheck.string.optional,\n  options: formOptionsApi.optional,\n  hide: apiCheck.bool.optional,\n  hideExpression: formlyExpression.optional,\n  model: apiCheck.object.optional,\n  form: apiCheck.object.optional,\n  elementAttributes: apiCheck.objectOf(apiCheck.string).optional\n}).strict;\n\nlet typeOptionsDefaultOptions = angular.copy(fieldOptionsApiShape);\ntypeOptionsDefaultOptions.key = apiCheck.string.optional;\n\nlet formlyTypeOptions = apiCheck.shape({\n  name: apiCheck.string,\n  template: apiCheck.shape.ifNot('templateUrl', apiCheck.oneOfType([apiCheck.string, apiCheck.func])).optional,\n  templateUrl: apiCheck.shape.ifNot('template', apiCheck.oneOfType([apiCheck.string, apiCheck.func])).optional,\n  controller: apiCheck.oneOfType([\n    apiCheck.func, apiCheck.string, apiCheck.array\n  ]).optional,\n  link: apiCheck.func.optional,\n  defaultOptions: apiCheck.oneOfType([\n    apiCheck.func, apiCheck.shape(typeOptionsDefaultOptions)\n  ]).optional,\n  extends: apiCheck.string.optional,\n  wrapper: specifyWrapperType.optional,\n  data: apiCheck.object.optional,\n  validateOptions: apiCheck.func.optional,\n  apiCheck: apiCheckProperty.optional,\n  apiCheckInstance: apiCheckInstanceProperty.optional,\n  apiCheckFunction: apiCheckFunctionProperty.optional,\n  apiCheckOptions: apiCheck.object.optional,\n  overwriteOk: apiCheck.bool.optional\n}).strict;\nangular.extend(apiCheck, {\n  formlyTypeOptions, formlyFieldOptions, formlyExpression, formlyWrapperType, fieldGroup, formOptionsApi\n});\n\nexport default apiCheck;\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./providers/formlyApiCheck.js\n **/","import angular from 'angular-fix';\nimport utils from '../other/utils';\n\nexport default formlyConfig;\n\n// @ngInject\nfunction formlyConfig(formlyUsabilityProvider, formlyApiCheck) {\n\n  var typeMap = {};\n  var templateWrappersMap = {};\n  var defaultWrapperName = 'default';\n  var _this = this;\n  var getError = formlyUsabilityProvider.getFormlyError;\n\n  angular.extend(this, {\n    setType,\n    getType,\n    setWrapper,\n    getWrapper,\n    getWrapperByType,\n    removeWrapperByName,\n    removeWrappersForType,\n    disableWarnings: false,\n    extras: {\n      disableNgModelAttrsManipulator: false,\n      ngModelAttrsManipulatorPreferUnbound: false,\n      removeChromeAutoComplete: false,\n      defaultHideDirective: 'ng-if'\n    },\n    templateManipulators: {\n      preWrapper: [],\n      postWrapper: []\n    },\n    $get: () => this\n  });\n\n  function setType(options) {\n    if (angular.isArray(options)) {\n      angular.forEach(options, setType);\n    } else if (angular.isObject(options)) {\n      checkType(options);\n      if (options.extends) {\n        extendTypeOptions(options);\n      }\n      typeMap[options.name] = options;\n    } else {\n      throw getError(`You must provide an object or array for setType. You provided: ${JSON.stringify(arguments)}`);\n    }\n  }\n\n  function checkType(options) {\n    formlyApiCheck.throw(formlyApiCheck.formlyTypeOptions, options, {\n      prefix: 'formlyConfig.setType',\n      url: 'settype-validation-failed'\n    });\n    if (!options.overwriteOk) {\n      checkOverwrite(options.name, typeMap, options, 'types');\n    } else {\n      options.overwriteOk = undefined;\n    }\n  }\n\n  function extendTypeOptions(options) {\n    const extendsType = getType(options.extends, true, options);\n    extendTypeControllerFunction(options, extendsType);\n    extendTypeLinkFunction(options, extendsType);\n    extendTypeValidateOptionsFunction(options, extendsType);\n    extendTypeDefaultOptions(options, extendsType);\n    utils.reverseDeepMerge(options, extendsType);\n    extendTemplate(options, extendsType);\n  }\n\n  function extendTemplate(options, extendsType){\n    if(options.template && extendsType.templateUrl){\n      delete options.templateUrl;\n    } else if(options.templateUrl && extendsType.template){\n      delete options.template;\n    }\n  }\n\n  function extendTypeControllerFunction(options, extendsType) {\n    const extendsCtrl = extendsType.controller;\n    if (!angular.isDefined(extendsCtrl)) {\n      return;\n    }\n    const optionsCtrl = options.controller;\n    if (angular.isDefined(optionsCtrl)) {\n      options.controller = function ($scope, $controller) {\n        $controller(extendsCtrl, {$scope});\n        $controller(optionsCtrl, {$scope});\n      };\n      options.controller.$inject = ['$scope', '$controller'];\n    } else {\n      options.controller = extendsCtrl;\n    }\n  }\n\n  function extendTypeLinkFunction(options, extendsType) {\n    const extendsFn = extendsType.link;\n    if (!angular.isDefined(extendsFn)) {\n      return;\n    }\n    const optionsFn = options.link;\n    if (angular.isDefined(optionsFn)) {\n      options.link = function () {\n        extendsFn(...arguments);\n        optionsFn(...arguments);\n      };\n    } else {\n      options.link = extendsFn;\n    }\n  }\n\n  function extendTypeValidateOptionsFunction(options, extendsType) {\n    const extendsFn = extendsType.validateOptions;\n    if (!angular.isDefined(extendsFn)) {\n      return;\n    }\n    const optionsFn = options.validateOptions;\n    const originalDefaultOptions = options.defaultOptions;\n    if (angular.isDefined(optionsFn)) {\n      options.validateOptions = function (options) {\n        optionsFn(options);\n        let mergedOptions = angular.copy(options);\n        let defaultOptions = originalDefaultOptions;\n        if (defaultOptions) {\n          if (angular.isFunction(defaultOptions)) {\n            defaultOptions = defaultOptions(mergedOptions);\n          }\n          utils.reverseDeepMerge(mergedOptions, defaultOptions);\n        }\n        extendsFn(mergedOptions);\n      };\n    } else {\n      options.validateOptions = extendsFn;\n    }\n  }\n\n  function extendTypeDefaultOptions(options, extendsType) {\n    const extendsDO = extendsType.defaultOptions;\n    if (!angular.isDefined(extendsDO)) {\n      return;\n    }\n    const optionsDO = options.defaultOptions;\n    const optionsDOIsFn = angular.isFunction(optionsDO);\n    const extendsDOIsFn = angular.isFunction(extendsDO);\n    if (extendsDOIsFn) {\n      options.defaultOptions = function defaultOptions(options) {\n        const extendsDefaultOptions = extendsDO(options);\n        const mergedDefaultOptions = {};\n        utils.reverseDeepMerge(mergedDefaultOptions, options, extendsDefaultOptions);\n        let extenderOptionsDefaultOptions = optionsDO;\n        if (optionsDOIsFn) {\n          extenderOptionsDefaultOptions = extenderOptionsDefaultOptions(mergedDefaultOptions);\n        }\n        utils.reverseDeepMerge(extendsDefaultOptions, extenderOptionsDefaultOptions);\n        return extendsDefaultOptions;\n      };\n    } else if (optionsDOIsFn) {\n      options.defaultOptions = function defaultOptions(options) {\n        let newDefaultOptions = {};\n        utils.reverseDeepMerge(newDefaultOptions, options, extendsDO);\n        return optionsDO(newDefaultOptions);\n      };\n    }\n  }\n\n  function getType(name, throwError, errorContext) {\n    if (!name) {\n      return undefined;\n    }\n    var type = typeMap[name];\n    if (!type && throwError === true) {\n      throw getError(\n        `There is no type by the name of \"${name}\": ${JSON.stringify(errorContext)}`\n      );\n    } else {\n      return type;\n    }\n  }\n\n  function setWrapper(options, name) {\n    if (angular.isArray(options)) {\n      return options.map(wrapperOptions => setWrapper(wrapperOptions));\n    } else if (angular.isObject(options)) {\n      options.types = getOptionsTypes(options);\n      options.name = getOptionsName(options, name);\n      checkWrapperAPI(options);\n      templateWrappersMap[options.name] = options;\n      return options;\n    } else if (angular.isString(options)) {\n      return setWrapper({\n        template: options,\n        name\n      });\n    }\n  }\n\n  function getOptionsTypes(options) {\n    if (angular.isString(options.types)) {\n      return [options.types];\n    }\n    if (!angular.isDefined(options.types)) {\n      return [];\n    } else {\n      return options.types;\n    }\n  }\n\n  function getOptionsName(options, name) {\n    return options.name || name || options.types.join(' ') || defaultWrapperName;\n  }\n\n  function checkWrapperAPI(options) {\n    formlyUsabilityProvider.checkWrapper(options);\n    if (options.template) {\n      formlyUsabilityProvider.checkWrapperTemplate(options.template, options);\n    }\n    if (!options.overwriteOk) {\n      checkOverwrite(options.name, templateWrappersMap, options, 'templateWrappers');\n    } else {\n      delete options.overwriteOk;\n    }\n    checkWrapperTypes(options);\n  }\n\n  function checkWrapperTypes(options) {\n    let shouldThrow = !angular.isArray(options.types) || !options.types.every(angular.isString);\n    if (shouldThrow) {\n      throw getError(`Attempted to create a template wrapper with types that is not a string or an array of strings`);\n    }\n  }\n\n  function checkOverwrite(property, object, newValue, objectName) {\n    if (object.hasOwnProperty(property)) {\n      warn([\n        `Attempting to overwrite ${property} on ${objectName} which is currently`,\n        `${JSON.stringify(object[property])} with ${JSON.stringify(newValue)}`,\n        `To supress this warning, specify the property \"overwriteOk: true\"`\n      ].join(' '));\n    }\n  }\n\n  function getWrapper(name) {\n    return templateWrappersMap[name || defaultWrapperName];\n  }\n\n  function getWrapperByType(type) {\n    /* jshint maxcomplexity:6 */\n    var wrappers = [];\n    for (var name in templateWrappersMap) {\n      if (templateWrappersMap.hasOwnProperty(name)) {\n        if (templateWrappersMap[name].types && templateWrappersMap[name].types.indexOf(type) !== -1) {\n          wrappers.push(templateWrappersMap[name]);\n        }\n      }\n    }\n    return wrappers;\n  }\n\n  function removeWrapperByName(name) {\n    var wrapper = templateWrappersMap[name];\n    delete templateWrappersMap[name];\n    return wrapper;\n  }\n\n  function removeWrappersForType(type) {\n    var wrappers = getWrapperByType(type);\n    if (!wrappers) {\n      return;\n    }\n    if (!angular.isArray(wrappers)) {\n      return removeWrapperByName(wrappers.name);\n    } else {\n      wrappers.forEach((wrapper) => removeWrapperByName(wrapper.name));\n      return wrappers;\n    }\n  }\n\n\n  function warn() {\n    if (!_this.disableWarnings) {\n      console.warn(...arguments);\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./providers/formlyConfig.js\n **/","import angular from 'angular-fix';\n\nexport default formlyUsability;\n\n// @ngInject\nfunction formlyUsability(formlyApiCheck, formlyErrorAndWarningsUrlPrefix) {\n  angular.extend(this, {\n    getFormlyError: getFormlyError,\n    getFieldError: getFieldError,\n    checkWrapper: checkWrapper,\n    checkWrapperTemplate: checkWrapperTemplate,\n    $get: () => this\n  });\n\n  function getFieldError(errorInfoSlug, message, field) {\n    if (arguments.length < 3) {\n      field = message;\n      message = errorInfoSlug;\n      errorInfoSlug = null;\n    }\n    return new Error(getErrorMessage(errorInfoSlug, message) + ` Field definition: ${angular.toJson(field)}`);\n  }\n\n  function getFormlyError(errorInfoSlug, message) {\n    if (!message) {\n      message = errorInfoSlug;\n      errorInfoSlug = null;\n    }\n    return new Error(getErrorMessage(errorInfoSlug, message));\n  }\n\n  function getErrorMessage(errorInfoSlug, message) {\n    let url = '';\n    if (errorInfoSlug !== null) {\n      url = `${formlyErrorAndWarningsUrlPrefix}${errorInfoSlug}`;\n    }\n    return `Formly Error: ${message}. ${url}`;\n  }\n\n  function checkWrapper(wrapper) {\n    formlyApiCheck.throw(formlyApiCheck.formlyWrapperType, wrapper, {\n      prefix: 'formlyConfig.setWrapper',\n      urlSuffix: 'setwrapper-validation-failed'\n    });\n  }\n\n  function checkWrapperTemplate(template, additionalInfo) {\n    var formlyTransclude = '<formly-transclude></formly-transclude>';\n    if (template.indexOf(formlyTransclude) === -1) {\n      throw getFormlyError(\n        `Template wrapper templates must use \"${formlyTransclude}\" somewhere in them. ` +\n        `This one does not have \"<formly-transclude></formly-transclude>\" in it: ${template}` + '\\n' +\n        `Additional information: ${JSON.stringify(additionalInfo)}`\n      );\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./providers/formlyUsability.js\n **/","export default formlyValidationMessages;\n\n\n// @ngInject\nfunction formlyValidationMessages() {\n\n  var validationMessages = {\n    addTemplateOptionValueMessage,\n    addStringMessage,\n    messages: {}\n  };\n\n  return validationMessages;\n\n  function addTemplateOptionValueMessage(name, prop, prefix, suffix, alternate) {\n    validationMessages.messages[name] = templateOptionValue(prop, prefix, suffix, alternate);\n  }\n\n  function addStringMessage(name, string) {\n    validationMessages.messages[name] = () => string;\n  }\n\n\n  function templateOptionValue(prop, prefix, suffix, alternate) {\n    return function getValidationMessage(viewValue, modelValue, scope) {\n      if (scope.options.templateOptions[prop]) {\n        return `${prefix} ${scope.options.templateOptions[prop]} ${suffix}`;\n      } else {\n        return alternate;\n      }\n    };\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./providers/formlyValidationMessages.js\n **/","export default addCustomTags;\n\n// @ngInject\nfunction addCustomTags($document) {\n  if ($document && $document.get) {\n    //IE8 check ->\n    // http://stackoverflow.com/questions/10964966/detect-ie-version-prior-to-v9-in-javascript/10965203#10965203\n    const document = $document.get(0);\n    const div = document.createElement('div');\n    div.innerHTML = '<!--[if lt IE 9]><i></i><![endif]-->';\n    const isIeLessThan9 = (div.getElementsByTagName('i').length === 1);\n\n    if (isIeLessThan9) {\n      //add the custom elements that we need for formly\n      const customElements = [\n        'formly-field', 'formly-form', 'formly-custom-validation', 'formly-focus', 'formly-transpose'\n      ];\n      angular.forEach(customElements, el => {\n        document.createElement(el);\n      });\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./run/formlyCustomTags.js\n **/","import angular from 'angular-fix';\n\nexport default addFormlyNgModelAttrsManipulator;\n\n// @ngInject\nfunction addFormlyNgModelAttrsManipulator(formlyConfig) {\n  if (formlyConfig.extras.disableNgModelAttrsManipulator) {\n    return;\n  }\n  formlyConfig.templateManipulators.preWrapper.push(ngModelAttrsManipulator);\n\n\n  function ngModelAttrsManipulator(template, options, scope) {\n    /* jshint maxcomplexity:6 */\n    var el = document.createElement('div');\n    var data = options.data;\n    if (data.skipNgModelAttrsManipulator === true) {\n      return template;\n    }\n    el.innerHTML = template;\n    var modelNodes = el.querySelectorAll('[ng-model], [data-ng-model]');\n    if (!modelNodes || !modelNodes.length) {\n      return template;\n    }\n\n    addIfNotPresent(modelNodes, 'id', scope.id);\n    addIfNotPresent(modelNodes, 'name', scope.id);\n\n    addValidation();\n    addModelOptions();\n    addTemplateOptionsAttrs();\n\n\n    return el.innerHTML;\n\n\n    function addValidation() {\n      if (angular.isDefined(options.validators) || angular.isDefined(options.validation.messages)) {\n        addIfNotPresent(modelNodes, 'formly-custom-validation', '');\n      }\n    }\n\n    function addModelOptions() {\n      if (angular.isDefined(options.modelOptions)) {\n        addIfNotPresent(modelNodes, 'ng-model-options', 'options.modelOptions');\n        if (options.modelOptions.getterSetter) {\n          angular.forEach(modelNodes, node => {\n            node.setAttribute('ng-model', 'options.value');\n          });\n        }\n      }\n    }\n\n    function addTemplateOptionsAttrs() {\n      if (!options.templateOptions && !options.expressionProperties) {\n        // no need to run these if there are no templateOptions or expressionProperties\n        return;\n      }\n      const to = options.templateOptions || {};\n      const ep = options.expressionProperties || {};\n\n      let ngModelAttributes = getBuiltInAttributes();\n\n      // extend with the user's specifications winning\n      angular.extend(ngModelAttributes, options.ngModelAttrs);\n\n      // Feel free to make this more simple :-)\n      angular.forEach(ngModelAttributes, (val, name) => {\n        /* jshint maxcomplexity:14 */\n        let attrVal;\n        let attrName;\n        const ref = `options.templateOptions['${name}']`;\n        const toVal = to[name];\n        const epVal = getEpValue(ep, name);\n\n        const inTo = angular.isDefined(toVal);\n        const inEp = angular.isDefined(epVal);\n        if (val.value) {\n          // I realize this looks backwards, but it's right, trust me...\n          attrName = val.value;\n          attrVal = name;\n        } else if (val.expression && inTo) {\n          attrName = val.expression;\n          if (angular.isString(to[name])) {\n            attrVal = `$eval(${ref})`;\n          } else if (angular.isFunction(to[name])) {\n            attrVal = `${ref}(model[options.key], options, this, $event)`;\n          } else {\n            throw new Error(\n              `options.templateOptions.${name} must be a string or function: ${JSON.stringify(options)}`\n            );\n          }\n        } else if (val.bound && inEp) {\n          attrName = val.bound;\n          attrVal = ref;\n        } else if ((val.attribute || val.boolean) && inEp) {\n          attrName = val.attribute || val.boolean;\n          attrVal = `{{${ref}}}`;\n        } else if (val.attribute && inTo) {\n          attrName = val.attribute;\n          attrVal = toVal;\n        } else if (val.boolean) {\n          if (inTo && !inEp && toVal) {\n            attrName = val.boolean;\n            attrVal = true;\n          } else {\n            // jshint -W035\n            // empty to illustrate that a boolean will not be added via val.bound\n            // if you want it added via val.bound, then put it in expressionProperties\n          }\n        } else if (val.bound && inTo) {\n          attrName = val.bound;\n          attrVal = ref;\n        }\n\n        if (angular.isDefined(attrName) && angular.isDefined(attrVal)) {\n          addIfNotPresent(modelNodes, attrName, attrVal);\n        }\n      });\n    }\n  }\n\n  // Utility functions\n  function getBuiltInAttributes() {\n    let ngModelAttributes = {\n      focus: {\n        attribute: 'formly-focus'\n      }\n    };\n    const boundOnly = [];\n    const bothBooleanAndBound = ['required', 'disabled'];\n    const bothAttributeAndBound = ['pattern', 'minlength'];\n    const expressionOnly = ['change', 'keydown', 'keyup', 'keypress', 'click', 'focus', 'blur'];\n    const attributeOnly = ['placeholder', 'min', 'max', 'tabindex', 'type'];\n    if (formlyConfig.extras.ngModelAttrsManipulatorPreferUnbound) {\n      bothAttributeAndBound.push('maxlength');\n    } else {\n      boundOnly.push('maxlength');\n    }\n\n    angular.forEach(boundOnly, item => {\n      ngModelAttributes[item] = {bound: 'ng-' + item};\n    });\n\n    angular.forEach(bothBooleanAndBound, item => {\n      ngModelAttributes[item] = {boolean: item, bound: 'ng-' + item};\n    });\n\n    angular.forEach(bothAttributeAndBound, item => {\n      ngModelAttributes[item] = {attribute: item, bound: 'ng-' + item};\n    });\n\n    angular.forEach(expressionOnly, item => {\n      var propName = 'on' + item.substr(0, 1).toUpperCase() + item.substr(1);\n      ngModelAttributes[propName] = {expression: 'ng-' + item};\n    });\n\n    angular.forEach(attributeOnly, item => {\n      ngModelAttributes[item] = {attribute: item};\n    });\n    return ngModelAttributes;\n  }\n\n  function getEpValue(ep, name) {\n    return ep['templateOptions.' + name] ||\n      ep[`templateOptions['${name}']`] ||\n      ep[`templateOptions[\"${name}\"]`];\n  }\n\n  function addIfNotPresent(nodes, attr, val) {\n    angular.forEach(nodes, node => {\n      if (!node.getAttribute(attr)) {\n        node.setAttribute(attr, val);\n      }\n    });\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./run/formlyNgModelAttrsManipulator.js\n **/","import utils from '../other/utils';\n\nexport default formlyUtil;\n\n// @ngInject\nfunction formlyUtil() {\n  return utils;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./services/formlyUtil.js\n **/","export default formlyWarn;\n\n// @ngInject\nfunction formlyWarn(formlyConfig, formlyErrorAndWarningsUrlPrefix, $log) {\n  return function warn() {\n    if (!formlyConfig.disableWarnings) {\n      var args = Array.prototype.slice.call(arguments);\n      var warnInfoSlug = args.shift();\n      args.unshift('Formly Warning:');\n      args.push(`${formlyErrorAndWarningsUrlPrefix}${warnInfoSlug}`);\n      $log.warn(...args);\n    }\n  };\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/jshint-loader!./services/formlyWarn.js\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_17__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"angular\"\n ** module id = 17\n ** module chunks = 0\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_18__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external {\"root\":\"apiCheck\",\"amd\":\"api-check\",\"commonjs2\":\"api-check\",\"commonjs\":\"api-check\"}\n ** module id = 18\n ** module chunks = 0\n **/"],"sourceRoot":""}