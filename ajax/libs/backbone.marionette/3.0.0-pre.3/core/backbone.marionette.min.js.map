{"version":3,"sources":["backbone.marionette.min.js","/source/src/trigger-method.js","/source/src/monitor-view-events.js","/source/src/bind-entity-events.js","/source/src/bind-radio-requests.js","/source/src/mixins/behaviors.js","/source/src/utils/getUniqueEventName.js","/source/src/mixins/triggers.js","/source/src/utils/destroyBackboneView.js","/source/src/config/behaviors-lookup.js","/source/src/config/features.js","/source/src/utils/_proxy.js","/source/src/utils/extend.js","/source/src/utils/isNodeAttached.js","/source/src/utils/mergeOptions.js","/source/src/utils/getOption.js","/source/src/utils/normalizeMethods.js","/source/src/utils/deprecate.js","/source/src/utils/getValue.js","/source/src/utils/_setOptions.js","/source/src/error.js","/source/src/mixins/common.js","/source/src/mixins/radio.js","/source/src/object.js","/source/src/template-cache.js","/source/src/renderer.js","/source/src/utils/_invoke.js","/source/src/mixins/delegate-entity-events.js","/source/src/mixins/ui.js","/source/src/mixins/view.js","/source/src/region.js","/source/src/mixins/regions.js","/source/src/view.js","/source/src/collection-view.js","/source/src/composite-view.js","/source/src/behavior.js","/source/src/application.js","/source/src/app-router.js","/source/src/backbone.marionette.js"],"names":["global","factory","exports","module","require","define","amd","Marionette","Backbone","_","Radio","ChildViewContainer","this","getEventName","match","prefix","eventName","toUpperCase","triggerMethod","event","result","methodName","replace","splitter","method","getOption","call","_len","arguments","length","args","Array","_key","isFunction","apply","trigger","concat","triggerMethodOn","context","fnc","_len2","_key2","triggerMethodChildren","view","beforeEachTrigger","_getImmediateChildren","each","child","setIsAttached","_isAttached","unsetIsAttached","monitorViewEvents","handleBeforeAttach","handleAttach","triggerDOMRefresh","handleBeforeDetach","handleDetach","handleRender","_isRendered","_areViewEventsMonitored","on","before:attach","attach","before:detach","detach","render","bindFromStrings","target","entity","evt","methods","actionName","methodNames","split","MarionetteError","iterateEvents","bindings","isObject","message","url","isString","bindEntityEvents","unbindEntityEvents","iterateReplies","channel","normalizedRadioRequests","normalizeMethods","bindRadioRequests","unbindRadioRequests","getBehaviorClass","options","key","behaviorClass","getValue","Behaviors","behaviorsLookup","parseBehaviors","behaviors","chain","map","BehaviorClass","_options","behavior","nestedBehaviors","flatten","value","uniqueName","selector","uniqueId","join","buildViewTrigger","triggerDef","shouldPreventDefault","preventDefault","shouldStopPropagation","stopPropagation","e","destroyBackboneView","supportsDestroyLifecycle","shouldTriggerDetach","remove","_isDestroyed","isEnabled","name","FEATURES","setEnabled","state","babelHelpers","toConsumableArray","arr","isArray","i","arr2","from","version","proxy","extend","Model","isNodeAttached","el","$","contains","document","documentElement","mergeOptions","keys","pick","optionName","undefined","hash","_this","reduce","normalizedHash","deprecate","test","prev","next","DEV_MODE","_cache","_warn","_console","console","warn","log","_setOptions","errorProps","Error","urlRoot","constructor","error","captureStackTrace","toString","CommonMixin","RadioMixin","_initRadio","channelName","_channel","radioEvents","bindRadioEvents","radioRequests","_destroyRadio","stopReplying","getChannel","unbindRadioEvents","MarionetteObject","cid","cidPrefix","initialize","prototype","Events","isDestroyed","destroy","stopListening","TemplateCache","templateId","templateCaches","get","cachedTemplate","load","clear","compiledTemplate","template","loadTemplate","compileTemplate","$template","html","rawTemplate","Renderer","data","templateFunc","_invoke","invokeMap","invoke","BehaviorsMixin","_initBehaviors","_behaviors","_getBehaviorTriggers","triggers","_getBehaviorEvents","events","_proxyBehaviorViewProperties","_delegateBehaviorEntityEvents","_undelegateBehaviorEntityEvents","_destroyBehaviors","_bindBehaviorUIElements","_unbindBehaviorUIElements","_triggerEventOnBehaviors","DelegateEntityEventsMixin","_delegateEntityEvents","model","collection","_undelegateEntityEvents","modelEvents","collectionEvents","delegateEventSplitter","getUniqueEventName","TriggersMixin","_getViewTriggers","_normalizeUIKeys","ui","memo","val","normalizedKey","normalizeUIString","uiString","r","slice","_normalizeUIValues","properties","property","propertyVal","UIMixin","normalizeUIKeys","uiBindings","_getUIBindings","normalizeUIValues","_bindUIElements","_uiBindings","_ui","_unbindUIElements","_this2","$el","_getUI","ViewMixin","supportsRenderLifecycle","isRendered","isAttached","mixinTemplateContext","templateContext","delegateEvents","eventsArg","_buildEventProxies","viewEvents","_getEvents","combinedEvents","getTriggers","View","delegateEntityEvents","undelegateEntityEvents","_ensureViewIsIntact","unbindUIElements","_removeElement","_removeChildren","bindUIElements","getUI","childViewEventPrefix","ret","_triggerMethod","_triggerEventOnParentLayout","_childViewEvents","_childViewTriggers","layoutView","_parentView","eventPrefix","prefixedEventName","_len3","_key3","childViewEvents","childViewTriggers","parent","_parent","Region","replaceElement","_isReplaced","_initEl","getEl","show","_ensureElement","_ensureView","currentView","empty","_renderView","_attachView","shouldTriggerAttach","shouldReplaceEl","attachHtml","allowMissingEl","_replaceEl","_restoreEl","parentNode","replaceChild","isReplaced","shouldReplace","appendChild","off","_removeView","_ref","preventDestroy","shouldPreventDestroy","_detachView","contents","hasView","reset","RegionsMixin","regionClass","_initRegions","regions","_regions","addRegions","_reInitRegions","addRegion","definition","isEmpty","_addRegions","regionDefinitions","_buildRegion","_addRegion","_buildRegionFromDefinition","_buildRegionFromObject","_buildRegionFromRegionClass","RegionClass","omit","defaults","parentEl","partial","region","removeRegion","_removeRegion","removeRegions","getRegions","bind","emptyRegions","hasRegion","getRegion","clone","showChildView","getChildView","serializeData","serializeModel","items","serializeCollection","attributes","_renderTemplate","getTemplate","attachElContent","compact","CollectionView","sort","once","_initialEvents","_initChildViewStorage","_bufferedChildren","_startBuffering","_isBuffering","_endBuffering","triggerOnChildren","attachBuffer","_createBuffer","listenTo","_onCollectionAdd","_onCollectionRemove","_sortViews","opts","index","at","indexOf","_filteredSortedModels","_shouldAddChild","_destroyEmptyView","ChildView","_getChildView","_addChild","children","findByModel","_removeChildView","_checkEmpty","_renderChildren","setFilter","filter","preventRender","canBeRendered","filterChanged","shouldRender","previousModels","models","_applyModelDeltas","removeFilter","currentIds","addedChildNotExists","prevModel","removedChildExists","reorder","anyModelsAdded","some","elsToReorder","_index","filteredOutViews","_appendReorderedChildren","resortView","_this3","orderChanged","find","item","_emptyViewIndex","append","_destroyChildren","checkEmpty","processedModels","_showEmptyView","_showCollection","_this4","addedAt","viewComparator","getViewComparator","Math","min","max","addedModel","_sortModelsBy","splice","_filterModels","_this5","comparator","sortBy","EmptyView","getEmptyView","_showingEmptyView","emptyViewOptions","_buildChildView","_addChildView","childView","childViewOptions","_updateIndices","increment","laterView","_proxyChildEvents","add","ChildViewClass","collectionView","buffer","elBuffer","createDocumentFragment","b","_insertBefore","_insertAfter","findPosition","before","_ref2","shouldCheckEmpty","childViews","identity","childEventName","values","_views","CompositeView","renderChildren","_isRendering","resetChildViewContainer","compositeView","$container","getChildViewContainer","containerView","$childViewContainer","container","childViewContainer","charAt","substr","MixinFromView","Behavior","proxyViewProperties","getEvents","behaviorEvents","behaviorHandler","behaviorTriggers","Application","_initRegion","_region","showView","getView","start","AppRouter","Router","appRoutes","controller","_getController","processAppRoutes","_processOnRoute","appRoute","route","_addAppRoute","routeName","routeArgs","onRoute","routePath","invert","routeNames","reverse","previousMarionette","noConflict","Object","VERSION"],"mappings":"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","file":"backbone.marionette.min.js","sourcesContent":["// MarionetteJS (Backbone.Marionette)\n// ----------------------------------\n// v3.0.0-pre.3\n//\n// Copyright (c)2016 Derick Bailey, Muted Solutions, LLC.\n// Distributed under MIT license\n//\n// http://marionettejs.com\n\n\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('backbone'), require('underscore'), require('backbone.radio'), require('backbone.babysitter')) :\n\ttypeof define === 'function' && define.amd ? define(['backbone', 'underscore', 'backbone.radio', 'backbone.babysitter'], factory) :\n\t(global.Marionette  = global['Mn'] = factory(global.Backbone,global._,global.Backbone.Radio,global.Backbone.ChildViewContainer));\n}(this, function (Backbone,_,Radio,ChildViewContainer) { 'use strict';\n\n\tBackbone = 'default' in Backbone ? Backbone['default'] : Backbone;\n\t_ = 'default' in _ ? _['default'] : _;\n\tRadio = 'default' in Radio ? Radio['default'] : Radio;\n\tChildViewContainer = 'default' in ChildViewContainer ? ChildViewContainer['default'] : ChildViewContainer;\n\n\tvar babelHelpers = {};\n\n\tbabelHelpers.toConsumableArray = function (arr) {\n\t  if (Array.isArray(arr)) {\n\t    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n\t    return arr2;\n\t  } else {\n\t    return Array.from(arr);\n\t  }\n\t};\n\n\tbabelHelpers;\n\n\tvar version = \"3.0.0-pre.3\";\n\n\t//Internal utility for creating context style global utils\n\tvar proxy = function proxy(method) {\n\t  return function (context) {\n\t    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n\t      args[_key - 1] = arguments[_key];\n\t    }\n\n\t    return method.apply(context, args);\n\t  };\n\t};\n\n\t// Borrow the Backbone `extend` method so we can use it as needed\n\tvar extend = Backbone.Model.extend;\n\n\t// Determine if `el` is a child of the document\n\tvar isNodeAttached = function isNodeAttached(el) {\n\t  return Backbone.$.contains(document.documentElement, el);\n\t};\n\n\t// Merge `keys` from `options` onto `this`\n\tvar mergeOptions = function mergeOptions(options, keys) {\n\t  if (!options) {\n\t    return;\n\t  }\n\t  _.extend(this, _.pick(options, keys));\n\t};\n\n\t// Marionette.getOption\n\t// --------------------\n\n\t// Retrieve an object, function or other value from the\n\t// object or its `options`, with `options` taking precedence.\n\tvar getOption = function getOption(optionName) {\n\t  if (!optionName) {\n\t    return;\n\t  }\n\t  if (this.options && this.options[optionName] !== undefined) {\n\t    return this.options[optionName];\n\t  } else {\n\t    return this[optionName];\n\t  }\n\t};\n\n\t// Marionette.normalizeMethods\n\t// ----------------------\n\n\t// Pass in a mapping of events => functions or function names\n\t// and return a mapping of events => functions\n\tvar normalizeMethods = function normalizeMethods(hash) {\n\t  var _this = this;\n\n\t  return _.reduce(hash, function (normalizedHash, method, name) {\n\t    if (!_.isFunction(method)) {\n\t      method = _this[method];\n\t    }\n\t    if (method) {\n\t      normalizedHash[name] = method;\n\t    }\n\t    return normalizedHash;\n\t  }, {});\n\t};\n\n\tvar deprecate = function deprecate(message, test) {\n\t  if (_.isObject(message)) {\n\t    message = message.prev + ' is going to be removed in the future. ' + 'Please use ' + message.next + ' instead.' + (message.url ? ' See: ' + message.url : '');\n\t  }\n\n\t  if (!Marionette.DEV_MODE) {\n\t    return;\n\t  }\n\n\t  if ((test === undefined || !test) && !deprecate._cache[message]) {\n\t    deprecate._warn('Deprecation warning: ' + message);\n\t    deprecate._cache[message] = true;\n\t  }\n\t};\n\n\tdeprecate._console = typeof console !== 'undefined' ? console : {};\n\tdeprecate._warn = function () {\n\t  var warn = deprecate._console.warn || deprecate._console.log || function () {};\n\t  return warn.apply(deprecate._console, arguments);\n\t};\n\tdeprecate._cache = {};\n\n\t// split the event name on the \":\"\n\tvar splitter = /(^|:)(\\w)/gi;\n\n\t// take the event section (\"section1:section2:section3\")\n\t// and turn it in to uppercase name onSection1Section2Section3\n\tfunction getEventName(match, prefix, eventName) {\n\t  return eventName.toUpperCase();\n\t}\n\n\t// Trigger an event and/or a corresponding method name. Examples:\n\t//\n\t// `this.triggerMethod(\"foo\")` will trigger the \"foo\" event and\n\t// call the \"onFoo\" method.\n\t//\n\t// `this.triggerMethod(\"foo:bar\")` will trigger the \"foo:bar\" event and\n\t// call the \"onFooBar\" method.\n\tfunction triggerMethod(event) {\n\t  // get the method name from the event name\n\t  var methodName = 'on' + event.replace(splitter, getEventName);\n\t  var method = getOption.call(this, methodName);\n\t  var result;\n\n\t  // call the onMethodName if it exists\n\n\t  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n\t    args[_key - 1] = arguments[_key];\n\t  }\n\n\t  if (_.isFunction(method)) {\n\t    // pass all args, except the event name\n\t    result = method.apply(this, args);\n\t  }\n\n\t  // trigger the event\n\t  this.trigger.apply(this, [event].concat(args));\n\n\t  return result;\n\t}\n\n\t// triggerMethodOn invokes triggerMethod on a specific context\n\t//\n\t// e.g. `Marionette.triggerMethodOn(view, 'show')`\n\t// will trigger a \"show\" event or invoke onShow the view.\n\tfunction triggerMethodOn(context) {\n\t  var fnc = _.isFunction(context.triggerMethod) ? context.triggerMethod : triggerMethod;\n\n\t  for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n\t    args[_key2 - 1] = arguments[_key2];\n\t  }\n\n\t  return fnc.apply(context, args);\n\t}\n\n\t// Trigger method on children unless a pure Backbone.View\n\tfunction triggerMethodChildren(view, event, beforeEachTrigger) {\n\t  if (!view._getImmediateChildren) {\n\t    return;\n\t  }\n\t  _.each(view._getImmediateChildren(), function (child) {\n\t    if (beforeEachTrigger) {\n\t      beforeEachTrigger(child);\n\t    }\n\t    triggerMethodOn(child, event, child);\n\t  });\n\t}\n\n\tfunction setIsAttached(view) {\n\t  view._isAttached = true;\n\t}\n\n\tfunction unsetIsAttached(view) {\n\t  view._isAttached = false;\n\t}\n\n\t// Monitor a view's state, propagating attach/detach events to children and firing dom:refresh\n\t// whenever a rendered view is attached or an attached view is rendered.\n\tfunction monitorViewEvents(view) {\n\t  if (view._areViewEventsMonitored) {\n\t    return;\n\t  }\n\n\t  view._areViewEventsMonitored = true;\n\n\t  function handleBeforeAttach() {\n\t    triggerMethodChildren(view, 'before:attach');\n\t  }\n\n\t  function handleAttach() {\n\t    triggerMethodChildren(view, 'attach', setIsAttached);\n\t    triggerDOMRefresh();\n\t  }\n\n\t  function handleBeforeDetach() {\n\t    triggerMethodChildren(view, 'before:detach');\n\t  }\n\n\t  function handleDetach() {\n\t    triggerMethodChildren(view, 'detach', unsetIsAttached);\n\t  }\n\n\t  function handleRender() {\n\t    triggerDOMRefresh();\n\t  }\n\n\t  function triggerDOMRefresh() {\n\t    if (view._isAttached && view._isRendered) {\n\t      triggerMethodOn(view, 'dom:refresh', view);\n\t    }\n\t  }\n\n\t  view.on({\n\t    'before:attach': handleBeforeAttach,\n\t    'attach': handleAttach,\n\t    'before:detach': handleBeforeDetach,\n\t    'detach': handleDetach,\n\t    'render': handleRender\n\t  });\n\t}\n\n\t// Similar to `_.result`, this is a simple helper\n\t// If a function is provided we call it with context\n\t// otherwise just return the value. If the value is\n\t// undefined return a default value\n\tvar getValue = function getValue(value) {\n\t  if (_.isFunction(value)) {\n\t    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n\t      args[_key - 1] = arguments[_key];\n\t    }\n\n\t    return value.apply(this, args);\n\t  }\n\t  return value;\n\t};\n\n\t// Internal utility for setting options consistently across Mn\n\tvar _setOptions = function _setOptions() {\n\t  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t    args[_key] = arguments[_key];\n\t  }\n\n\t  this.options = _.extend.apply(_, [{}, _.result(this, 'options')].concat(args));\n\t};\n\n\tvar errorProps = ['description', 'fileName', 'lineNumber', 'name', 'message', 'number'];\n\n\tvar MarionetteError = extend.call(Error, {\n\t  urlRoot: 'http://marionettejs.com/docs/v' + version + '/',\n\n\t  constructor: function MarionetteError(message, options) {\n\t    if (_.isObject(message)) {\n\t      options = message;\n\t      message = options.message;\n\t    } else if (!options) {\n\t      options = {};\n\t    }\n\n\t    var error = Error.call(this, message);\n\t    _.extend(this, _.pick(error, errorProps), _.pick(options, errorProps));\n\n\t    this.captureStackTrace();\n\n\t    if (options.url) {\n\t      this.url = this.urlRoot + options.url;\n\t    }\n\t  },\n\n\t  captureStackTrace: function captureStackTrace() {\n\t    if (Error.captureStackTrace) {\n\t      Error.captureStackTrace(this, MarionetteError);\n\t    }\n\t  },\n\n\t  toString: function toString() {\n\t    return this.name + ': ' + this.message + (this.url ? ' See: ' + this.url : '');\n\t  }\n\t});\n\n\tMarionetteError.extend = extend;\n\n\t// Bind/unbind the event to handlers specified as a string of\n\t// handler names on the target object\n\tfunction bindFromStrings(target, entity, evt, methods, actionName) {\n\t  var methodNames = methods.split(/\\s+/);\n\n\t  _.each(methodNames, function (methodName) {\n\t    var method = target[methodName];\n\t    if (!method) {\n\t      throw new MarionetteError('Method \"' + methodName + '\" was configured as an event handler, but does not exist.');\n\t    }\n\n\t    target[actionName](entity, evt, method);\n\t  });\n\t}\n\n\t// generic looping function\n\tfunction iterateEvents(target, entity, bindings, actionName) {\n\t  if (!entity || !bindings) {\n\t    return;\n\t  }\n\n\t  // type-check bindings\n\t  if (!_.isObject(bindings)) {\n\t    throw new MarionetteError({\n\t      message: 'Bindings must be an object.',\n\t      url: 'marionette.functions.html#marionettebindentityevents'\n\t    });\n\t  }\n\n\t  // iterate the bindings and bind/unbind them\n\t  _.each(bindings, function (method, evt) {\n\n\t    // allow for a list of method names as a string\n\t    if (_.isString(method)) {\n\t      bindFromStrings(target, entity, evt, method, actionName);\n\t      return;\n\t    }\n\n\t    target[actionName](entity, evt, method);\n\t  });\n\t}\n\n\tfunction bindEntityEvents(entity, bindings) {\n\t  iterateEvents(this, entity, bindings, 'listenTo');\n\t}\n\n\tfunction unbindEntityEvents(entity, bindings) {\n\t  iterateEvents(this, entity, bindings, 'stopListening');\n\t}\n\n\tvar CommonMixin = {\n\t  getValue: getValue,\n\n\t  // Imports the \"normalizeMethods\" to transform hashes of\n\t  // events=>function references/names to a hash of events=>function references\n\t  normalizeMethods: normalizeMethods,\n\n\t  _setOptions: _setOptions,\n\n\t  // A handy way to merge passed-in options onto the instance\n\t  mergeOptions: mergeOptions,\n\n\t  // Enable getting options from this or this.options by name.\n\t  getOption: getOption,\n\n\t  // Enable binding view's events from another entity.\n\t  bindEntityEvents: bindEntityEvents,\n\n\t  // Enable unbinding view's events from another entity.\n\t  unbindEntityEvents: unbindEntityEvents\n\t};\n\n\tfunction iterateReplies(target, channel, bindings, actionName) {\n\t  if (!channel || !bindings) {\n\t    return;\n\t  }\n\n\t  // type-check bindings\n\t  if (!_.isObject(bindings)) {\n\t    throw new MarionetteError({\n\t      message: 'Bindings must be an object.',\n\t      url: 'marionette.functions.html#marionettebindradiorequests'\n\t    });\n\t  }\n\n\t  var normalizedRadioRequests = normalizeMethods.call(target, bindings);\n\n\t  channel[actionName](normalizedRadioRequests, target);\n\t}\n\n\tfunction bindRadioRequests(channel, bindings) {\n\t  iterateReplies(this, channel, bindings, 'reply');\n\t}\n\n\tfunction unbindRadioRequests(channel, bindings) {\n\t  iterateReplies(this, channel, bindings, 'stopReplying');\n\t}\n\n\tvar RadioMixin = {\n\n\t  _initRadio: function _initRadio() {\n\t    var channelName = this.getValue(this.getOption('channelName'));\n\n\t    if (!channelName) {\n\t      return;\n\t    }\n\n\t    var channel = this._channel = Radio.channel(channelName);\n\n\t    var radioEvents = this.getValue(this.getOption('radioEvents'));\n\t    this.bindRadioEvents(channel, radioEvents);\n\n\t    var radioRequests = this.getValue(this.getOption('radioRequests'));\n\t    this.bindRadioRequests(channel, radioRequests);\n\n\t    this.on('destroy', this._destroyRadio);\n\t  },\n\n\t  _destroyRadio: function _destroyRadio() {\n\t    this._channel.stopReplying(null, null, this);\n\t  },\n\n\t  getChannel: function getChannel() {\n\t    return this._channel;\n\t  },\n\n\t  // Proxy `bindRadioEvents`\n\t  bindRadioEvents: bindEntityEvents,\n\n\t  // Proxy `unbindRadioEvents`\n\t  unbindRadioEvents: unbindEntityEvents,\n\n\t  // Proxy `bindRadioRequests`\n\t  bindRadioRequests: bindRadioRequests,\n\n\t  // Proxy `unbindRadioRequests`\n\t  unbindRadioRequests: unbindRadioRequests\n\n\t};\n\n\t// A Base Class that other Classes should descend from.\n\t// Object borrows many conventions and utilities from Backbone.\n\tvar MarionetteObject = function MarionetteObject(options) {\n\t  this._setOptions(options);\n\t  this.cid = _.uniqueId(this.cidPrefix);\n\t  this._initRadio();\n\t  this.initialize.apply(this, arguments);\n\t};\n\n\tMarionetteObject.extend = extend;\n\n\t// Object Methods\n\t// --------------\n\n\t// Ensure it can trigger events with Backbone.Events\n\t_.extend(MarionetteObject.prototype, Backbone.Events, CommonMixin, RadioMixin, {\n\t  cidPrefix: 'mno',\n\n\t  // for parity with Marionette.AbstractView lifecyle\n\t  _isDestroyed: false,\n\n\t  isDestroyed: function isDestroyed() {\n\t    return this._isDestroyed;\n\t  },\n\n\t  //this is a noop method intended to be overridden by classes that extend from this base\n\t  initialize: function initialize() {},\n\n\t  destroy: function destroy() {\n\t    if (this._isDestroyed) {\n\t      return this;\n\t    }\n\n\t    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t      args[_key] = arguments[_key];\n\t    }\n\n\t    this.triggerMethod.apply(this, ['before:destroy'].concat(args));\n\n\t    // mark as destroyed before doing the actual destroy, to\n\t    // prevent infinite loops within \"destroy\" event handlers\n\t    this._isDestroyed = true;\n\t    this.triggerMethod.apply(this, ['destroy'].concat(args));\n\t    this.stopListening();\n\n\t    return this;\n\t  },\n\n\t  triggerMethod: triggerMethod\n\t});\n\n\t// Manage templates stored in `<script>` blocks,\n\t// caching them for faster access.\n\tvar TemplateCache = function TemplateCache(templateId) {\n\t  this.templateId = templateId;\n\t};\n\n\t// TemplateCache object-level methods. Manage the template\n\t// caches from these method calls instead of creating\n\t// your own TemplateCache instances\n\t_.extend(TemplateCache, {\n\t  templateCaches: {},\n\n\t  // Get the specified template by id. Either\n\t  // retrieves the cached version, or loads it\n\t  // from the DOM.\n\t  get: function get(templateId, options) {\n\t    var cachedTemplate = this.templateCaches[templateId];\n\n\t    if (!cachedTemplate) {\n\t      cachedTemplate = new TemplateCache(templateId);\n\t      this.templateCaches[templateId] = cachedTemplate;\n\t    }\n\n\t    return cachedTemplate.load(options);\n\t  },\n\n\t  // Clear templates from the cache. If no arguments\n\t  // are specified, clears all templates:\n\t  // `clear()`\n\t  //\n\t  // If arguments are specified, clears each of the\n\t  // specified templates from the cache:\n\t  // `clear(\"#t1\", \"#t2\", \"...\")`\n\t  clear: function clear() {\n\t    var i;\n\n\t    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t      args[_key] = arguments[_key];\n\t    }\n\n\t    var length = args.length;\n\n\t    if (length > 0) {\n\t      for (i = 0; i < length; i++) {\n\t        delete this.templateCaches[args[i]];\n\t      }\n\t    } else {\n\t      this.templateCaches = {};\n\t    }\n\t  }\n\t});\n\n\t// TemplateCache instance methods, allowing each\n\t// template cache object to manage its own state\n\t// and know whether or not it has been loaded\n\t_.extend(TemplateCache.prototype, {\n\n\t  // Internal method to load the template\n\t  load: function load(options) {\n\t    // Guard clause to prevent loading this template more than once\n\t    if (this.compiledTemplate) {\n\t      return this.compiledTemplate;\n\t    }\n\n\t    // Load the template and compile it\n\t    var template = this.loadTemplate(this.templateId, options);\n\t    this.compiledTemplate = this.compileTemplate(template, options);\n\n\t    return this.compiledTemplate;\n\t  },\n\n\t  // Load a template from the DOM, by default. Override\n\t  // this method to provide your own template retrieval\n\t  // For asynchronous loading with AMD/RequireJS, consider\n\t  // using a template-loader plugin as described here:\n\t  // https://github.com/marionettejs/backbone.marionette/wiki/Using-marionette-with-requirejs\n\t  loadTemplate: function loadTemplate(templateId, options) {\n\t    var $template = Backbone.$(templateId);\n\n\t    if (!$template.length) {\n\t      throw new MarionetteError({\n\t        name: 'NoTemplateError',\n\t        message: 'Could not find template: \"' + templateId + '\"'\n\t      });\n\t    }\n\t    return $template.html();\n\t  },\n\n\t  // Pre-compile the template before caching it. Override\n\t  // this method if you do not need to pre-compile a template\n\t  // (JST / RequireJS for example) or if you want to change\n\t  // the template engine used (Handebars, etc).\n\t  compileTemplate: function compileTemplate(rawTemplate, options) {\n\t    return _.template(rawTemplate, options);\n\t  }\n\t});\n\n\t// Render a template with data by passing in the template\n\t// selector and the data to render.\n\tvar Renderer = {\n\n\t  // Render a template with data. The `template` parameter is\n\t  // passed to the `TemplateCache` object to retrieve the\n\t  // template function. Override this method to provide your own\n\t  // custom rendering and template handling for all of Marionette.\n\t  render: function render(template, data) {\n\t    if (!template) {\n\t      throw new MarionetteError({\n\t        name: 'TemplateNotFoundError',\n\t        message: 'Cannot render the template since its false, null or undefined.'\n\t      });\n\t    }\n\n\t    var templateFunc = _.isFunction(template) ? template : TemplateCache.get(template);\n\n\t    return templateFunc(data);\n\t  }\n\t};\n\n\tvar _invoke = _.invokeMap || _.invoke;\n\n\t// Takes care of getting the behavior class\n\t// given options and a key.\n\t// If a user passes in options.behaviorClass\n\t// default to using that.\n\t// If a user passes in a Behavior Class directly, use that\n\t// Otherwise delegate the lookup to the users `behaviorsLookup` implementation.\n\tfunction getBehaviorClass(options, key) {\n\t  if (options.behaviorClass) {\n\t    return options.behaviorClass;\n\t    //treat functions as a Behavior constructor\n\t  } else if (_.isFunction(options)) {\n\t      return options;\n\t    }\n\n\t  // behaviorsLookup can be either a flat object or a method\n\t  return getValue(Marionette.Behaviors.behaviorsLookup, options, key)[key];\n\t}\n\n\t// Iterate over the behaviors object, for each behavior\n\t// instantiate it and get its grouped behaviors.\n\t// This accepts a list of behaviors in either an object or array form\n\tfunction parseBehaviors(view, behaviors) {\n\t  return _.chain(behaviors).map(function (options, key) {\n\t    var BehaviorClass = getBehaviorClass(options, key);\n\t    //if we're passed a class directly instead of an object\n\t    var _options = options === BehaviorClass ? {} : options;\n\t    var behavior = new BehaviorClass(_options, view);\n\t    var nestedBehaviors = parseBehaviors(view, _.result(behavior, 'behaviors'));\n\n\t    return [behavior].concat(nestedBehaviors);\n\t  }).flatten().value();\n\t}\n\n\tvar BehaviorsMixin = {\n\t  _initBehaviors: function _initBehaviors() {\n\t    var behaviors = this.getValue(this.getOption('behaviors'));\n\n\t    // Behaviors defined on a view can be a flat object literal\n\t    // or it can be a function that returns an object.\n\t    this._behaviors = _.isObject(behaviors) ? parseBehaviors(this, behaviors) : {};\n\t  },\n\n\t  _getBehaviorTriggers: function _getBehaviorTriggers() {\n\t    var triggers = _invoke(this._behaviors, 'getTriggers');\n\t    return _.extend.apply(_, [{}].concat(babelHelpers.toConsumableArray(triggers)));\n\t  },\n\n\t  _getBehaviorEvents: function _getBehaviorEvents() {\n\t    var events = _invoke(this._behaviors, 'getEvents');\n\t    return _.extend.apply(_, [{}].concat(babelHelpers.toConsumableArray(events)));\n\t  },\n\n\t  // proxy behavior $el to the view's $el.\n\t  _proxyBehaviorViewProperties: function _proxyBehaviorViewProperties() {\n\t    _invoke(this._behaviors, 'proxyViewProperties');\n\t  },\n\n\t  // delegate modelEvents and collectionEvents\n\t  _delegateBehaviorEntityEvents: function _delegateBehaviorEntityEvents() {\n\t    _invoke(this._behaviors, 'delegateEntityEvents');\n\t  },\n\n\t  // undelegate modelEvents and collectionEvents\n\t  _undelegateBehaviorEntityEvents: function _undelegateBehaviorEntityEvents() {\n\t    _invoke(this._behaviors, 'undelegateEntityEvents');\n\t  },\n\n\t  _destroyBehaviors: function _destroyBehaviors(args) {\n\t    // Call destroy on each behavior after\n\t    // destroying the view.\n\t    // This unbinds event listeners\n\t    // that behaviors have registered for.\n\t    _invoke.apply(undefined, [this._behaviors, 'destroy'].concat(babelHelpers.toConsumableArray(args)));\n\t  },\n\n\t  _bindBehaviorUIElements: function _bindBehaviorUIElements() {\n\t    _invoke(this._behaviors, 'bindUIElements');\n\t  },\n\n\t  _unbindBehaviorUIElements: function _unbindBehaviorUIElements() {\n\t    _invoke(this._behaviors, 'unbindUIElements');\n\t  },\n\n\t  _triggerEventOnBehaviors: function _triggerEventOnBehaviors() {\n\t    var behaviors = this._behaviors;\n\t    // Use good ol' for as this is a very hot function\n\n\t    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t      args[_key] = arguments[_key];\n\t    }\n\n\t    for (var i = 0, length = behaviors && behaviors.length; i < length; i++) {\n\t      triggerMethod.apply(behaviors[i], args);\n\t    }\n\t  }\n\t};\n\n\tvar DelegateEntityEventsMixin = {\n\t  // Handle `modelEvents`, and `collectionEvents` configuration\n\t  _delegateEntityEvents: function _delegateEntityEvents(model, collection) {\n\t    this._undelegateEntityEvents(model, collection);\n\n\t    var modelEvents = this.getValue(this.getOption('modelEvents'));\n\t    bindEntityEvents.call(this, model, modelEvents);\n\n\t    var collectionEvents = this.getValue(this.getOption('collectionEvents'));\n\t    bindEntityEvents.call(this, collection, collectionEvents);\n\t  },\n\n\t  _undelegateEntityEvents: function _undelegateEntityEvents(model, collection) {\n\t    var modelEvents = this.getValue(this.getOption('modelEvents'));\n\t    unbindEntityEvents.call(this, model, modelEvents);\n\n\t    var collectionEvents = this.getValue(this.getOption('collectionEvents'));\n\t    unbindEntityEvents.call(this, collection, collectionEvents);\n\t  }\n\t};\n\n\t// Borrow event splitter from Backbone\n\tvar delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\n\n\tfunction uniqueName(eventName, selector) {\n\t  return [eventName + _.uniqueId('.evt'), selector].join(' ');\n\t}\n\n\t// Set event name to be namespaced using a unique index\n\t// to generate a non colliding event namespace\n\t// http://api.jquery.com/event.namespace/\n\tvar getUniqueEventName = function getUniqueEventName(eventName) {\n\t  var match = eventName.match(delegateEventSplitter);\n\t  return uniqueName(match[1], match[2]);\n\t};\n\n\t// Internal method to create an event handler for a given `triggerDef` like\n\t// 'click:foo'\n\tfunction buildViewTrigger(view, triggerDef) {\n\t  if (_.isString(triggerDef)) {\n\t    triggerDef = { event: triggerDef };\n\t  }\n\n\t  var eventName = triggerDef.event;\n\t  var shouldPreventDefault = triggerDef.preventDefault !== false;\n\t  var shouldStopPropagation = triggerDef.stopPropagation !== false;\n\n\t  return function (e) {\n\t    if (shouldPreventDefault) {\n\t      e.preventDefault();\n\t    }\n\n\t    if (shouldStopPropagation) {\n\t      e.stopPropagation();\n\t    }\n\n\t    view.triggerMethod(eventName, view);\n\t  };\n\t}\n\n\tvar TriggersMixin = {\n\n\t  // Configure `triggers` to forward DOM events to view\n\t  // events. `triggers: {\"click .foo\": \"do:foo\"}`\n\t  _getViewTriggers: function _getViewTriggers(view, triggers) {\n\t    // Configure the triggers, prevent default\n\t    // action and stop propagation of DOM events\n\t    return _.reduce(triggers, function (events, value, key) {\n\t      key = getUniqueEventName(key);\n\t      events[key] = buildViewTrigger(view, value);\n\t      return events;\n\t    }, {});\n\t  }\n\n\t};\n\n\t// allows for the use of the @ui. syntax within\n\t// a given key for triggers and events\n\t// swaps the @ui with the associated selector.\n\t// Returns a new, non-mutated, parsed events hash.\n\tvar _normalizeUIKeys = function _normalizeUIKeys(hash, ui) {\n\t  return _.reduce(hash, function (memo, val, key) {\n\t    var normalizedKey = normalizeUIString(key, ui);\n\t    memo[normalizedKey] = val;\n\t    return memo;\n\t  }, {});\n\t};\n\n\t// utility method for parsing @ui. syntax strings\n\t// into associated selector\n\tvar normalizeUIString = function normalizeUIString(uiString, ui) {\n\t  return uiString.replace(/@ui\\.[a-zA-Z_$0-9]*/g, function (r) {\n\t    return ui[r.slice(4)];\n\t  });\n\t};\n\n\t// allows for the use of the @ui. syntax within\n\t// a given value for regions\n\t// swaps the @ui with the associated selector\n\tvar _normalizeUIValues = function _normalizeUIValues(hash, ui, properties) {\n\t  _.each(hash, function (val, key) {\n\t    if (_.isString(val)) {\n\t      hash[key] = normalizeUIString(val, ui);\n\t    } else if (_.isObject(val) && _.isArray(properties)) {\n\t      _.extend(val, _normalizeUIValues(_.pick(val, properties), ui));\n\t      /* Value is an object, and we got an array of embedded property names to normalize. */\n\t      _.each(properties, function (property) {\n\t        var propertyVal = val[property];\n\t        if (_.isString(propertyVal)) {\n\t          val[property] = normalizeUIString(propertyVal, ui);\n\t        }\n\t      });\n\t    }\n\t  });\n\t  return hash;\n\t};\n\n\tvar UIMixin = {\n\n\t  // normalize the keys of passed hash with the views `ui` selectors.\n\t  // `{\"@ui.foo\": \"bar\"}`\n\t  normalizeUIKeys: function normalizeUIKeys(hash) {\n\t    var uiBindings = this._getUIBindings();\n\t    return _normalizeUIKeys(hash, uiBindings);\n\t  },\n\n\t  // normalize the values of passed hash with the views `ui` selectors.\n\t  // `{foo: \"@ui.bar\"}`\n\t  normalizeUIValues: function normalizeUIValues(hash, properties) {\n\t    var uiBindings = this._getUIBindings();\n\t    return _normalizeUIValues(hash, uiBindings, properties);\n\t  },\n\n\t  _getUIBindings: function _getUIBindings() {\n\t    var uiBindings = _.result(this, '_uiBindings');\n\t    var ui = _.result(this, 'ui');\n\t    return uiBindings || ui;\n\t  },\n\n\t  // This method binds the elements specified in the \"ui\" hash inside the view's code with\n\t  // the associated jQuery selectors.\n\t  _bindUIElements: function _bindUIElements() {\n\t    var _this = this;\n\n\t    if (!this.ui) {\n\t      return;\n\t    }\n\n\t    // store the ui hash in _uiBindings so they can be reset later\n\t    // and so re-rendering the view will be able to find the bindings\n\t    if (!this._uiBindings) {\n\t      this._uiBindings = this.ui;\n\t    }\n\n\t    // get the bindings result, as a function or otherwise\n\t    var bindings = _.result(this, '_uiBindings');\n\n\t    // empty the ui so we don't have anything to start with\n\t    this._ui = {};\n\n\t    // bind each of the selectors\n\t    _.each(bindings, function (selector, key) {\n\t      _this._ui[key] = _this.$(selector);\n\t    });\n\n\t    this.ui = this._ui;\n\t  },\n\n\t  _unbindUIElements: function _unbindUIElements() {\n\t    var _this2 = this;\n\n\t    if (!this.ui || !this._uiBindings) {\n\t      return;\n\t    }\n\n\t    // delete all of the existing ui bindings\n\t    _.each(this.ui, function ($el, name) {\n\t      delete _this2.ui[name];\n\t    });\n\n\t    // reset the ui element to the original bindings configuration\n\t    this.ui = this._uiBindings;\n\t    delete this._uiBindings;\n\t    delete this._ui;\n\t  },\n\n\t  _getUI: function _getUI(name) {\n\t    return this._ui[name];\n\t  }\n\t};\n\n\tvar ViewMixin = {\n\t  supportsRenderLifecycle: true,\n\t  supportsDestroyLifecycle: true,\n\n\t  _isDestroyed: false,\n\n\t  isDestroyed: function isDestroyed() {\n\t    return !!this._isDestroyed;\n\t  },\n\n\t  _isRendered: false,\n\n\t  isRendered: function isRendered() {\n\t    return !!this._isRendered;\n\t  },\n\n\t  _isAttached: false,\n\n\t  isAttached: function isAttached() {\n\t    return !!this._isAttached;\n\t  },\n\n\n\t  // Mix in template context methods. Looks for a\n\t  // `templateContext` attribute, which can either be an\n\t  // object literal, or a function that returns an object\n\t  // literal. All methods and attributes from this object\n\t  // are copies to the object passed in.\n\t  mixinTemplateContext: function mixinTemplateContext() {\n\t    var target = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n\t    var templateContext = this.getValue(this.getOption('templateContext'));\n\t    return _.extend(target, templateContext);\n\t  },\n\n\t  // Overriding Backbone.View's `delegateEvents` to handle\n\t  // `events` and `triggers`\n\t  delegateEvents: function delegateEvents(eventsArg) {\n\n\t    this._proxyBehaviorViewProperties();\n\t    this._buildEventProxies();\n\n\t    var viewEvents = this._getEvents(eventsArg);\n\n\t    if (typeof eventsArg === 'undefined') {\n\t      this.events = viewEvents;\n\t    }\n\n\t    var combinedEvents = _.extend({}, this._getBehaviorEvents(), viewEvents, this._getBehaviorTriggers(), this.getTriggers());\n\n\t    Backbone.View.prototype.delegateEvents.call(this, combinedEvents);\n\n\t    return this;\n\t  },\n\n\t  _getEvents: function _getEvents(eventsArg) {\n\t    var events = this.getValue(eventsArg || this.events);\n\n\t    return this.normalizeUIKeys(events);\n\t  },\n\n\t  // Configure `triggers` to forward DOM events to view\n\t  // events. `triggers: {\"click .foo\": \"do:foo\"}`\n\t  getTriggers: function getTriggers() {\n\t    if (!this.triggers) {\n\t      return;\n\t    }\n\n\t    // Allow `triggers` to be configured as a function\n\t    var triggers = this.normalizeUIKeys(_.result(this, 'triggers'));\n\n\t    // Configure the triggers, prevent default\n\t    // action and stop propagation of DOM events\n\t    return this._getViewTriggers(this, triggers);\n\t  },\n\n\t  // Handle `modelEvents`, and `collectionEvents` configuration\n\t  delegateEntityEvents: function delegateEntityEvents() {\n\t    this._delegateEntityEvents(this.model, this.collection);\n\n\t    // bind each behaviors model and collection events\n\t    this._delegateBehaviorEntityEvents();\n\n\t    return this;\n\t  },\n\n\t  // Handle unbinding `modelEvents`, and `collectionEvents` configuration\n\t  undelegateEntityEvents: function undelegateEntityEvents() {\n\t    this._undelegateEntityEvents(this.model, this.collection);\n\n\t    // unbind each behaviors model and collection events\n\t    this._undelegateBehaviorEntityEvents();\n\n\t    return this;\n\t  },\n\n\t  // Internal helper method to verify whether the view hasn't been destroyed\n\t  _ensureViewIsIntact: function _ensureViewIsIntact() {\n\t    if (this._isDestroyed) {\n\t      throw new MarionetteError({\n\t        name: 'ViewDestroyedError',\n\t        message: 'View (cid: \"' + this.cid + '\") has already been destroyed and cannot be used.'\n\t      });\n\t    }\n\t  },\n\n\t  // Handle destroying the view and its children.\n\t  destroy: function destroy() {\n\t    if (this._isDestroyed) {\n\t      return this;\n\t    }\n\t    var shouldTriggerDetach = !!this._isAttached;\n\n\t    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t      args[_key] = arguments[_key];\n\t    }\n\n\t    this.triggerMethod.apply(this, ['before:destroy'].concat(args));\n\t    if (shouldTriggerDetach) {\n\t      this.triggerMethod('before:detach', this);\n\t    }\n\n\t    // unbind UI elements\n\t    this.unbindUIElements();\n\n\t    // remove the view from the DOM\n\t    // https://github.com/jashkenas/backbone/blob/1.2.3/backbone.js#L1235\n\t    this._removeElement();\n\n\t    if (shouldTriggerDetach) {\n\t      this._isAttached = false;\n\t      this.triggerMethod('detach', this);\n\t    }\n\n\t    // remove children after the remove to prevent extra paints\n\t    this._removeChildren();\n\n\t    this._destroyBehaviors(args);\n\n\t    this._isDestroyed = true;\n\t    this._isRendered = false;\n\t    this.triggerMethod.apply(this, ['destroy'].concat(args));\n\n\t    this.stopListening();\n\n\t    return this;\n\t  },\n\n\t  bindUIElements: function bindUIElements() {\n\t    this._bindUIElements();\n\t    this._bindBehaviorUIElements();\n\n\t    return this;\n\t  },\n\n\t  // This method unbinds the elements specified in the \"ui\" hash\n\t  unbindUIElements: function unbindUIElements() {\n\t    this._unbindUIElements();\n\t    this._unbindBehaviorUIElements();\n\n\t    return this;\n\t  },\n\n\t  getUI: function getUI(name) {\n\t    this._ensureViewIsIntact();\n\t    return this._getUI(name);\n\t  },\n\n\t  // used as the prefix for child view events\n\t  // that are forwarded through the layoutview\n\t  childViewEventPrefix: 'childview',\n\n\t  // import the `triggerMethod` to trigger events with corresponding\n\t  // methods if the method exists\n\t  triggerMethod: function triggerMethod$$() {\n\t    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n\t      args[_key2] = arguments[_key2];\n\t    }\n\n\t    var ret = triggerMethod.apply(this, args);\n\n\t    this._triggerEventOnBehaviors.apply(this, args);\n\t    this._triggerEventOnParentLayout.apply(this, args);\n\n\t    return ret;\n\t  },\n\n\t  // Cache `childViewEvents` and `childViewTriggers`\n\t  _buildEventProxies: function _buildEventProxies() {\n\t    this._childViewEvents = this.getValue(this.getOption('childViewEvents'));\n\t    this._childViewTriggers = this.getValue(this.getOption('childViewTriggers'));\n\t  },\n\n\t  _triggerEventOnParentLayout: function _triggerEventOnParentLayout(eventName) {\n\t    var layoutView = this._parentView();\n\t    if (!layoutView) {\n\t      return;\n\t    }\n\n\t    // invoke triggerMethod on parent view\n\t    var eventPrefix = layoutView.getOption('childViewEventPrefix');\n\t    var prefixedEventName = eventPrefix + ':' + eventName;\n\n\t    for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n\t      args[_key3 - 1] = arguments[_key3];\n\t    }\n\n\t    layoutView.triggerMethod.apply(layoutView, [prefixedEventName].concat(args));\n\n\t    // use the parent view's childViewEvents handler\n\t    var childViewEvents = layoutView.normalizeMethods(layoutView._childViewEvents);\n\n\t    if (!!childViewEvents && _.isFunction(childViewEvents[eventName])) {\n\t      childViewEvents[eventName].apply(layoutView, args);\n\t    }\n\n\t    // use the parent view's proxyEvent handlers\n\t    var childViewTriggers = layoutView._childViewTriggers;\n\n\t    // Call the event with the proxy name on the parent layout\n\t    if (childViewTriggers && _.isString(childViewTriggers[eventName])) {\n\t      layoutView.triggerMethod.apply(layoutView, [childViewTriggers[eventName]].concat(args));\n\t    }\n\t  },\n\n\t  // Walk the _parent tree until we find a view (if one exists).\n\t  // Returns the parent view hierarchically closest to this view.\n\t  _parentView: function _parentView() {\n\t    var parent = this._parent;\n\n\t    while (parent) {\n\t      if (parent instanceof View) {\n\t        return parent;\n\t      }\n\t      parent = parent._parent;\n\t    }\n\t  }\n\t};\n\n\t_.extend(ViewMixin, BehaviorsMixin, CommonMixin, DelegateEntityEventsMixin, TriggersMixin, UIMixin);\n\n\tfunction destroyBackboneView(view) {\n\t  if (!view.supportsDestroyLifecycle) {\n\t    triggerMethodOn(view, 'before:destroy', view);\n\t  }\n\n\t  var shouldTriggerDetach = !!view._isAttached;\n\n\t  if (shouldTriggerDetach) {\n\t    triggerMethodOn(view, 'before:detach', view);\n\t  }\n\n\t  view.remove();\n\n\t  if (shouldTriggerDetach) {\n\t    view._isAttached = false;\n\t    triggerMethodOn(view, 'detach', view);\n\t  }\n\n\t  view._isDestroyed = true;\n\n\t  if (!view.supportsDestroyLifecycle) {\n\t    triggerMethodOn(view, 'destroy', view);\n\t  }\n\t}\n\n\tvar Region = MarionetteObject.extend({\n\t  cidPrefix: 'mnr',\n\t  replaceElement: false,\n\t  _isReplaced: false,\n\n\t  constructor: function constructor(options) {\n\t    this._setOptions(options);\n\t    this._initEl = this.el = this.getOption('el');\n\n\t    // Handle when this.el is passed in as a $ wrapped element.\n\t    this.el = this.el instanceof Backbone.$ ? this.el[0] : this.el;\n\n\t    if (!this.el) {\n\t      throw new MarionetteError({\n\t        name: 'NoElError',\n\t        message: 'An \"el\" must be specified for a region.'\n\t      });\n\t    }\n\n\t    this.$el = this.getEl(this.el);\n\t    MarionetteObject.call(this, options);\n\t  },\n\n\n\t  // Displays a backbone view instance inside of the region. Handles calling the `render`\n\t  // method for you. Reads content directly from the `el` attribute. The `preventDestroy`\n\t  // option can be used to prevent a view from the old view being destroyed on show.\n\t  show: function show(view, options) {\n\t    if (!this._ensureElement(options)) {\n\t      return;\n\t    }\n\t    this._ensureView(view);\n\t    if (view === this.currentView) {\n\t      return this;\n\t    }\n\n\t    this.triggerMethod('before:show', this, view, options);\n\n\t    monitorViewEvents(view);\n\n\t    this.empty(options);\n\n\t    // We need to listen for if a view is destroyed in a way other than through the region.\n\t    // If this happens we need to remove the reference to the currentView since once a view\n\t    // has been destroyed we can not reuse it.\n\t    view.on('destroy', this.empty, this);\n\n\t    // Make this region the view's parent.\n\t    // It's important that this parent binding happens before rendering so that any events\n\t    // the child may trigger during render can also be triggered on the child's ancestor views.\n\t    view._parent = this;\n\n\t    this._renderView(view);\n\n\t    this._attachView(view, options);\n\n\t    this.triggerMethod('show', this, view, options);\n\t    return this;\n\t  },\n\t  _renderView: function _renderView(view) {\n\t    if (view._isRendered) {\n\t      return;\n\t    }\n\n\t    if (!view.supportsRenderLifecycle) {\n\t      triggerMethodOn(view, 'before:render', view);\n\t    }\n\n\t    view.render();\n\n\t    if (!view.supportsRenderLifecycle) {\n\t      view._isRendered = true;\n\t      triggerMethodOn(view, 'render', view);\n\t    }\n\t  },\n\t  _attachView: function _attachView(view) {\n\t    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n\t    var shouldTriggerAttach = !view._isAttached && isNodeAttached(this.el);\n\t    var shouldReplaceEl = typeof options.replaceElement === 'undefined' ? !!this.getOption('replaceElement') : !!options.replaceElement;\n\n\t    if (shouldTriggerAttach) {\n\t      triggerMethodOn(view, 'before:attach', view);\n\t    }\n\n\t    this.attachHtml(view, shouldReplaceEl);\n\n\t    if (shouldTriggerAttach) {\n\t      view._isAttached = true;\n\t      triggerMethodOn(view, 'attach', view);\n\t    }\n\n\t    this.currentView = view;\n\t  },\n\t  _ensureElement: function _ensureElement() {\n\t    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n\t    if (!_.isObject(this.el)) {\n\t      this.$el = this.getEl(this.el);\n\t      this.el = this.$el[0];\n\t    }\n\n\t    if (!this.$el || this.$el.length === 0) {\n\t      var allowMissingEl = typeof options.allowMissingEl === 'undefined' ? !!this.getOption('allowMissingEl') : !!options.allowMissingEl;\n\n\t      if (allowMissingEl) {\n\t        return false;\n\t      } else {\n\t        throw new MarionetteError('An \"el\" must exist in DOM for this region ' + this.cid);\n\t      }\n\t    }\n\t    return true;\n\t  },\n\t  _ensureView: function _ensureView(view) {\n\t    if (!view) {\n\t      throw new MarionetteError({\n\t        name: 'ViewNotValid',\n\t        message: 'The view passed is undefined and therefore invalid. You must pass a view instance to show.'\n\t      });\n\t    }\n\n\t    if (view._isDestroyed) {\n\t      throw new MarionetteError({\n\t        name: 'ViewDestroyedError',\n\t        message: 'View (cid: \"' + view.cid + '\") has already been destroyed and cannot be used.'\n\t      });\n\t    }\n\t  },\n\n\n\t  // Override this method to change how the region finds the DOM element that it manages. Return\n\t  // a jQuery selector object scoped to a provided parent el or the document if none exists.\n\t  getEl: function getEl(el) {\n\t    return Backbone.$(el, this.getValue(this.getOption('parentEl')));\n\t  },\n\t  _replaceEl: function _replaceEl(view) {\n\t    // always restore the el to ensure the regions el is present before replacing\n\t    this._restoreEl();\n\n\t    var parent = this.el.parentNode;\n\n\t    parent.replaceChild(view.el, this.el);\n\t    this._isReplaced = true;\n\t  },\n\n\n\t  // Restore the region's element in the DOM.\n\t  _restoreEl: function _restoreEl() {\n\t    if (!this.currentView) {\n\t      return;\n\t    }\n\n\t    var view = this.currentView;\n\t    var parent = view.el.parentNode;\n\n\t    if (!parent) {\n\t      return;\n\t    }\n\n\t    parent.replaceChild(this.el, view.el);\n\t    this._isReplaced = false;\n\t  },\n\t  isReplaced: function isReplaced() {\n\t    return !!this._isReplaced;\n\t  },\n\n\n\t  // Override this method to change how the new view is appended to the `$el` that the\n\t  // region is managing\n\t  attachHtml: function attachHtml(view, shouldReplace) {\n\t    if (shouldReplace) {\n\t      // replace the region's node with the view's node\n\t      this._replaceEl(view);\n\t    } else {\n\t      this.el.appendChild(view.el);\n\t    }\n\t  },\n\n\n\t  // Destroy the current view, if there is one. If there is no current view, it does\n\t  // nothing and returns immediately.\n\t  empty: function empty(options) {\n\t    var view = this.currentView;\n\n\t    // If there is no view in the region we should not remove anything\n\t    if (!view) {\n\t      return this;\n\t    }\n\n\t    view.off('destroy', this.empty, this);\n\t    this.triggerMethod('before:empty', this, view);\n\n\t    if (this._isReplaced) {\n\t      this._restoreEl();\n\t    }\n\n\t    if (!view._isDestroyed) {\n\t      this._removeView(view, options);\n\t    }\n\n\t    delete this.currentView._parent;\n\t    delete this.currentView;\n\n\t    this.triggerMethod('empty', this, view);\n\t    return this;\n\t  },\n\t  _removeView: function _removeView(view) {\n\t    var _ref = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n\t    var preventDestroy = _ref.preventDestroy;\n\n\t    var shouldPreventDestroy = !!preventDestroy;\n\n\t    if (shouldPreventDestroy) {\n\t      this._detachView(view);\n\t      return;\n\t    }\n\n\t    if (view.destroy) {\n\t      view.destroy();\n\t    } else {\n\t      destroyBackboneView(view);\n\t    }\n\t  },\n\t  _detachView: function _detachView(view) {\n\t    var shouldTriggerDetach = !!view._isAttached;\n\n\t    if (shouldTriggerDetach) {\n\t      triggerMethodOn(view, 'before:detach', view);\n\t    }\n\n\t    this.$el.contents().detach();\n\n\t    if (shouldTriggerDetach) {\n\t      view._isAttached = false;\n\t      triggerMethodOn(view, 'detach', view);\n\t    }\n\t  },\n\n\n\t  // Checks whether a view is currently present within the region. Returns `true` if there is\n\t  // and `false` if no view is present.\n\t  hasView: function hasView() {\n\t    return !!this.currentView;\n\t  },\n\n\n\t  // Reset the region by destroying any existing view and clearing out the cached `$el`.\n\t  // The next time a view is shown via this region, the region will re-query the DOM for\n\t  // the region's `el`.\n\t  reset: function reset() {\n\t    this.empty();\n\n\t    if (this.$el) {\n\t      this.el = this._initEl;\n\t    }\n\n\t    delete this.$el;\n\t    return this;\n\t  },\n\n\n\t  destroy: function destroy() {\n\t    this.reset();\n\t    return MarionetteObject.prototype.destroy.apply(this, arguments);\n\t  }\n\t});\n\n\tvar RegionsMixin = {\n\t  regionClass: Region,\n\n\t  // Internal method to initialize the regions that have been defined in a\n\t  // `regions` attribute on this View.\n\t  _initRegions: function _initRegions() {\n\n\t    // init regions hash\n\t    this.regions = this.regions || {};\n\t    this._regions = {};\n\n\t    this.addRegions(this.getValue(this.getOption('regions')));\n\t  },\n\n\t  // Internal method to re-initialize all of the regions by updating\n\t  // the `el` that they point to\n\t  _reInitRegions: function _reInitRegions() {\n\t    _invoke(this._regions, 'reset');\n\t  },\n\n\t  // Add a single region, by name, to the View\n\t  addRegion: function addRegion(name, definition) {\n\t    var regions = {};\n\t    regions[name] = definition;\n\t    return this.addRegions(regions)[name];\n\t  },\n\n\t  // Add multiple regions as a {name: definition, name2: def2} object literal\n\t  addRegions: function addRegions(regions) {\n\t    // If there's nothing to add, stop here.\n\t    if (_.isEmpty(regions)) {\n\t      return;\n\t    }\n\n\t    // Normalize region selectors hash to allow\n\t    // a user to use the @ui. syntax.\n\t    regions = this.normalizeUIValues(regions, ['selector', 'el']);\n\n\t    // Add the regions definitions to the regions property\n\t    this.regions = _.extend({}, this.regions, regions);\n\n\t    return this._addRegions(regions);\n\t  },\n\n\t  // internal method to build and add regions\n\t  _addRegions: function _addRegions(regionDefinitions) {\n\t    var _this = this;\n\n\t    return _.reduce(regionDefinitions, function (regions, definition, name) {\n\t      regions[name] = _this._buildRegion(definition);\n\t      _this._addRegion(regions[name], name);\n\t      return regions;\n\t    }, {});\n\t  },\n\n\t  // return the region instance from the definition\n\t  _buildRegion: function _buildRegion(definition) {\n\t    if (definition instanceof Region) {\n\t      return definition;\n\t    }\n\n\t    return this._buildRegionFromDefinition(definition);\n\t  },\n\n\t  _buildRegionFromDefinition: function _buildRegionFromDefinition(definition) {\n\t    if (_.isString(definition)) {\n\t      return this._buildRegionFromObject({ el: definition });\n\t    }\n\n\t    if (_.isFunction(definition)) {\n\t      return this._buildRegionFromRegionClass(definition);\n\t    }\n\n\t    if (_.isObject(definition)) {\n\t      return this._buildRegionFromObject(definition);\n\t    }\n\n\t    throw new MarionetteError({\n\t      message: 'Improper region configuration type.',\n\t      url: 'marionette.region.html#region-configuration-types'\n\t    });\n\t  },\n\n\t  _buildRegionFromObject: function _buildRegionFromObject(definition) {\n\t    var RegionClass = definition.regionClass || this.getOption('regionClass');\n\n\t    var options = _.omit(definition, 'regionClass');\n\n\t    _.defaults(options, {\n\t      el: definition.selector,\n\t      parentEl: _.partial(_.result, this, 'el')\n\t    });\n\n\t    return new RegionClass(options);\n\t  },\n\n\t  // Build the region directly from a given `RegionClass`\n\t  _buildRegionFromRegionClass: function _buildRegionFromRegionClass(RegionClass) {\n\t    return new RegionClass({\n\t      parentEl: _.partial(_.result, this, 'el')\n\t    });\n\t  },\n\n\t  _addRegion: function _addRegion(region, name) {\n\t    this.triggerMethod('before:add:region', name, region);\n\n\t    region._parent = this;\n\n\t    this._regions[name] = region;\n\n\t    this.triggerMethod('add:region', name, region);\n\t  },\n\n\t  // Remove a single region from the View, by name\n\t  removeRegion: function removeRegion(name) {\n\t    var region = this._regions[name];\n\n\t    this._removeRegion(region, name);\n\n\t    return region;\n\t  },\n\n\t  // Remove all regions from the View\n\t  removeRegions: function removeRegions() {\n\t    var regions = this.getRegions();\n\n\t    _.each(this._regions, _.bind(this._removeRegion, this));\n\n\t    return regions;\n\t  },\n\n\t  _removeRegion: function _removeRegion(region, name) {\n\t    this.triggerMethod('before:remove:region', name, region);\n\n\t    region.empty();\n\t    region.stopListening();\n\n\t    delete this.regions[name];\n\t    delete this._regions[name];\n\n\t    this.triggerMethod('remove:region', name, region);\n\t  },\n\n\t  // Empty all regions in the region manager, but\n\t  // leave them attached\n\t  emptyRegions: function emptyRegions() {\n\t    var regions = this.getRegions();\n\t    _invoke(regions, 'empty');\n\t    return regions;\n\t  },\n\n\t  // Checks to see if view contains region\n\t  // Accepts the region name\n\t  // hasRegion('main')\n\t  hasRegion: function hasRegion(name) {\n\t    return !!this.getRegion(name);\n\t  },\n\n\t  // Provides access to regions\n\t  // Accepts the region name\n\t  // getRegion('main')\n\t  getRegion: function getRegion(name) {\n\t    return this._regions[name];\n\t  },\n\n\t  // Get all regions\n\t  getRegions: function getRegions() {\n\t    return _.clone(this._regions);\n\t  },\n\n\t  showChildView: function showChildView(name, view) {\n\t    var region = this.getRegion(name);\n\n\t    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n\t      args[_key - 2] = arguments[_key];\n\t    }\n\n\t    return region.show.apply(region, [view].concat(args));\n\t  },\n\n\t  getChildView: function getChildView(name) {\n\t    return this.getRegion(name).currentView;\n\t  }\n\n\t};\n\n\t// The standard view. Includes view events, automatic rendering\n\t// of Underscore templates, nested views, and more.\n\tvar View = Backbone.View.extend({\n\t  constructor: function constructor(options) {\n\t    this.render = _.bind(this.render, this);\n\n\t    this._setOptions(options);\n\n\t    monitorViewEvents(this);\n\n\t    this._initBehaviors();\n\t    this._initRegions();\n\n\t    Backbone.View.prototype.constructor.call(this, this.options);\n\n\t    this.delegateEntityEvents();\n\t  },\n\n\n\t  // Serialize the view's model *or* collection, if\n\t  // it exists, for the template\n\t  serializeData: function serializeData() {\n\t    if (!this.model && !this.collection) {\n\t      return {};\n\t    }\n\n\t    // If we have a model, we serialize that\n\t    if (this.model) {\n\t      return this.serializeModel();\n\t    }\n\n\t    // Otherwise, we serialize the collection,\n\t    // making it available under the `items` property\n\t    return {\n\t      items: this.serializeCollection()\n\t    };\n\t  },\n\n\n\t  // Prepares the special `model` property of a view\n\t  // for being displayed in the template. By default\n\t  // we simply clone the attributes. Override this if\n\t  // you need a custom transformation for your view's model\n\t  serializeModel: function serializeModel() {\n\t    if (!this.model) {\n\t      return {};\n\t    }\n\t    return _.clone(this.model.attributes);\n\t  },\n\n\n\t  // Serialize a collection by cloning each of\n\t  // its model's attributes\n\t  serializeCollection: function serializeCollection() {\n\t    if (!this.collection) {\n\t      return {};\n\t    }\n\t    return this.collection.map(function (model) {\n\t      return _.clone(model.attributes);\n\t    });\n\t  },\n\n\n\t  // Render the view, defaulting to underscore.js templates.\n\t  // You can override this in your view definition to provide\n\t  // a very specific rendering for your view. In general, though,\n\t  // you should override the `Marionette.Renderer` object to\n\t  // change how Marionette renders views.\n\t  // Subsequent renders after the first will re-render all nested\n\t  // views.\n\t  render: function render() {\n\t    this._ensureViewIsIntact();\n\n\t    this.triggerMethod('before:render', this);\n\n\t    // If this is not the first render call, then we need to\n\t    // re-initialize the `el` for each region\n\t    if (this._isRendered) {\n\t      this._reInitRegions();\n\t    }\n\n\t    this._renderTemplate();\n\t    this.bindUIElements();\n\n\t    this._isRendered = true;\n\t    this.triggerMethod('render', this);\n\n\t    return this;\n\t  },\n\n\n\t  // Internal method to render the template with the serialized data\n\t  // and template context via the `Marionette.Renderer` object.\n\t  _renderTemplate: function _renderTemplate() {\n\t    var template = this.getTemplate();\n\n\t    // Allow template-less views\n\t    if (template === false) {\n\t      return;\n\t    }\n\n\t    // Add in entity data and template context\n\t    var data = this.mixinTemplateContext(this.serializeData());\n\n\t    // Render and add to el\n\t    var html = Renderer.render(template, data, this);\n\t    this.attachElContent(html);\n\t  },\n\n\n\t  // Get the template for this view\n\t  // instance. You can set a `template` attribute in the view\n\t  // definition or pass a `template: \"whatever\"` parameter in\n\t  // to the constructor options.\n\t  getTemplate: function getTemplate() {\n\t    return this.getOption('template');\n\t  },\n\n\n\t  // Attaches the content of a given view.\n\t  // This method can be overridden to optimize rendering,\n\t  // or to render in a non standard way.\n\t  //\n\t  // For example, using `innerHTML` instead of `$el.html`\n\t  //\n\t  // ```js\n\t  // attachElContent(html) {\n\t  //   this.el.innerHTML = html;\n\t  //   return this;\n\t  // }\n\t  // ```\n\t  attachElContent: function attachElContent(html) {\n\t    this.$el.html(html);\n\n\t    return this;\n\t  },\n\n\n\t  // called by ViewMixin destroy\n\t  _removeChildren: function _removeChildren() {\n\t    this.removeRegions();\n\t  },\n\n\n\t  _getImmediateChildren: function _getImmediateChildren() {\n\t    return _.chain(this.getRegions()).map('currentView').compact().value();\n\t  }\n\t});\n\n\t_.extend(View.prototype, ViewMixin, RegionsMixin);\n\n\t// A view that iterates over a Backbone.Collection\n\t// and renders an individual child view for each model.\n\tvar CollectionView = Backbone.View.extend({\n\n\t  // flag for maintaining the sorted order of the collection\n\t  sort: true,\n\n\t  // constructor\n\t  // option to pass `{sort: false}` to prevent the `CollectionView` from\n\t  // maintaining the sorted order of the collection.\n\t  // This will fallback onto appending childView's to the end.\n\t  //\n\t  // option to pass `{comparator: compFunction()}` to allow the `CollectionView`\n\t  // to use a custom sort order for the collection.\n\t  constructor: function constructor(options) {\n\t    this.render = _.bind(this.render, this);\n\n\t    this._setOptions(options);\n\n\t    monitorViewEvents(this);\n\n\t    this._initBehaviors();\n\t    this.once('render', this._initialEvents);\n\t    this._initChildViewStorage();\n\t    this._bufferedChildren = [];\n\n\t    Backbone.View.prototype.constructor.call(this, this.options);\n\n\t    this.delegateEntityEvents();\n\t  },\n\n\n\t  // Instead of inserting elements one by one into the page, it's much more performant to insert\n\t  // elements into a document fragment and then insert that document fragment into the page\n\t  _startBuffering: function _startBuffering() {\n\t    this._isBuffering = true;\n\t  },\n\t  _endBuffering: function _endBuffering() {\n\t    var shouldTriggerAttach = !!this._isAttached;\n\t    var triggerOnChildren = shouldTriggerAttach ? this._getImmediateChildren() : [];\n\n\t    this._isBuffering = false;\n\n\t    _.each(triggerOnChildren, function (child) {\n\t      triggerMethodOn(child, 'before:attach', child);\n\t    });\n\n\t    this.attachBuffer(this, this._createBuffer());\n\n\t    _.each(triggerOnChildren, function (child) {\n\t      child._isAttached = true;\n\t      triggerMethodOn(child, 'attach', child);\n\t    });\n\n\t    this._bufferedChildren = [];\n\t  },\n\n\n\t  // Configured the initial events that the collection view binds to.\n\t  _initialEvents: function _initialEvents() {\n\t    if (this.collection) {\n\t      this.listenTo(this.collection, 'add', this._onCollectionAdd);\n\t      this.listenTo(this.collection, 'remove', this._onCollectionRemove);\n\t      this.listenTo(this.collection, 'reset', this.render);\n\n\t      if (this.getOption('sort')) {\n\t        this.listenTo(this.collection, 'sort', this._sortViews);\n\t      }\n\t    }\n\t  },\n\n\n\t  // Handle a child added to the collection\n\t  _onCollectionAdd: function _onCollectionAdd(child, collection, opts) {\n\t    // `index` is present when adding with `at` since BB 1.2; indexOf fallback for < 1.2\n\t    var index = opts.at !== undefined && (opts.index || collection.indexOf(child));\n\n\t    // When filtered or when there is no initial index, calculate index.\n\t    if (this.getOption('filter') || index === false) {\n\t      index = _.indexOf(this._filteredSortedModels(index), child);\n\t    }\n\n\t    if (this._shouldAddChild(child, index)) {\n\t      this._destroyEmptyView();\n\t      var ChildView = this._getChildView(child);\n\t      this._addChild(child, ChildView, index);\n\t    }\n\t  },\n\n\n\t  // get the child view by model it holds, and remove it\n\t  _onCollectionRemove: function _onCollectionRemove(model) {\n\t    var view = this.children.findByModel(model);\n\t    this._removeChildView(view);\n\t    this._checkEmpty();\n\t  },\n\n\n\t  // Render children views. Override this method to provide your own implementation of a\n\t  // render function for the collection view.\n\t  render: function render() {\n\t    this._ensureViewIsIntact();\n\t    this.triggerMethod('before:render', this);\n\t    this._renderChildren();\n\t    this._isRendered = true;\n\t    this.triggerMethod('render', this);\n\t    return this;\n\t  },\n\n\n\t  // An efficient rendering used for filtering. Instead of modifying the whole DOM for the\n\t  // collection view, we are only adding or removing the related childrenViews.\n\t  setFilter: function setFilter(filter) {\n\t    var _ref = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n\t    var preventRender = _ref.preventRender;\n\n\t    var canBeRendered = this._isRendered && !this._isDestroyed;\n\t    var filterChanged = this.filter !== filter;\n\t    var shouldRender = canBeRendered && filterChanged && !preventRender;\n\n\t    if (shouldRender) {\n\t      this.triggerMethod('before:apply:filter', this);\n\t      var previousModels = this._filteredSortedModels();\n\t      this.filter = filter;\n\t      var models = this._filteredSortedModels();\n\t      this._applyModelDeltas(models, previousModels);\n\t      this.triggerMethod('apply:filter', this);\n\t    } else {\n\t      this.filter = filter;\n\t    }\n\t  },\n\n\n\t  // `removeFilter` is actually an alias for removing filters.\n\t  removeFilter: function removeFilter(options) {\n\t    this.setFilter(null, options);\n\t  },\n\n\n\t  // Calculate and apply difference by cid between `models` and `previousModels`.\n\t  _applyModelDeltas: function _applyModelDeltas(models, previousModels) {\n\t    var _this = this;\n\n\t    var currentIds = {};\n\t    _.each(models, function (model, index) {\n\t      var addedChildNotExists = !_this.children.findByModel(model);\n\t      if (addedChildNotExists) {\n\t        _this._onCollectionAdd(model, _this.collection, { at: index });\n\t      }\n\t      currentIds[model.cid] = true;\n\t    });\n\t    _.each(previousModels, function (prevModel) {\n\t      var removedChildExists = !currentIds[prevModel.cid] && _this.children.findByModel(prevModel);\n\t      if (removedChildExists) {\n\t        _this._onCollectionRemove(prevModel);\n\t      }\n\t    });\n\t  },\n\n\n\t  // Reorder DOM after sorting. When your element's rendering do not use their index,\n\t  // you can pass reorderOnSort: true to only reorder the DOM after a sort instead of\n\t  // rendering all the collectionView.\n\t  reorder: function reorder() {\n\t    var _this2 = this;\n\n\t    var children = this.children;\n\t    var models = this._filteredSortedModels();\n\t    var anyModelsAdded = _.some(models, function (model) {\n\t      return !children.findByModel(model);\n\t    });\n\n\t    // If there are any new models added due to filtering we need to add child views,\n\t    // so render as normal.\n\t    if (anyModelsAdded) {\n\t      this.render();\n\t    } else {\n\t      (function () {\n\t        // Get the DOM nodes in the same order as the models.\n\t        var elsToReorder = _.map(models, function (model, index) {\n\t          var view = children.findByModel(model);\n\t          view._index = index;\n\t          return view.el;\n\t        });\n\n\t        // Find the views that were children before but aren't in this new ordering.\n\t        var filteredOutViews = children.filter(function (view) {\n\t          return !_.contains(elsToReorder, view.el);\n\t        });\n\n\t        _this2.triggerMethod('before:reorder', _this2);\n\n\t        // Since append moves elements that are already in the DOM, appending the elements\n\t        // will effectively reorder them.\n\t        _this2._appendReorderedChildren(elsToReorder);\n\n\t        // remove any views that have been filtered out\n\t        _.each(filteredOutViews, _.bind(_this2._removeChildView, _this2));\n\t        _this2._checkEmpty();\n\n\t        _this2.triggerMethod('reorder', _this2);\n\t      })();\n\t    }\n\t  },\n\n\n\t  // Render view after sorting. Override this method to change how the view renders\n\t  // after a `sort` on the collection.\n\t  resortView: function resortView() {\n\t    if (this.getOption('reorderOnSort')) {\n\t      this.reorder();\n\t    } else {\n\t      this._renderChildren();\n\t    }\n\t  },\n\n\n\t  // Internal method. This checks for any changes in the order of the collection.\n\t  // If the index of any view doesn't match, it will render.\n\t  _sortViews: function _sortViews() {\n\t    var _this3 = this;\n\n\t    var models = this._filteredSortedModels();\n\n\t    // check for any changes in sort order of views\n\t    var orderChanged = _.find(models, function (item, index) {\n\t      var view = _this3.children.findByModel(item);\n\t      return !view || view._index !== index;\n\t    });\n\n\t    if (orderChanged) {\n\t      this.resortView();\n\t    }\n\t  },\n\n\n\t  // Internal reference to what index a `emptyView` is.\n\t  _emptyViewIndex: -1,\n\n\t  // Internal method. Separated so that CompositeView can append to the childViewContainer\n\t  // if necessary\n\t  _appendReorderedChildren: function _appendReorderedChildren(children) {\n\t    this.$el.append(children);\n\t  },\n\n\n\t  // Internal method. Separated so that CompositeView can have more control over events\n\t  // being triggered, around the rendering process\n\t  _renderChildren: function _renderChildren() {\n\t    this._destroyEmptyView();\n\t    this._destroyChildren({ checkEmpty: false });\n\n\t    var models = this._filteredSortedModels();\n\t    if (this.isEmpty({ processedModels: models })) {\n\t      this._showEmptyView();\n\t    } else {\n\t      this.triggerMethod('before:render:children', this);\n\t      this._startBuffering();\n\t      this._showCollection(models);\n\t      this._endBuffering();\n\t      this.triggerMethod('render:children', this);\n\t    }\n\t  },\n\n\n\t  // Internal method to loop through collection and show each child view.\n\t  _showCollection: function _showCollection(models) {\n\t    var _this4 = this;\n\n\t    _.each(models, function (child, index) {\n\t      var ChildView = _this4._getChildView(child);\n\t      _this4._addChild(child, ChildView, index);\n\t    });\n\t  },\n\n\n\t  // Allow the collection to be sorted by a custom view comparator\n\t  _filteredSortedModels: function _filteredSortedModels(addedAt) {\n\t    if (!this.collection) {\n\t      return [];\n\t    }\n\n\t    var viewComparator = this.getViewComparator();\n\t    var models = this.collection.models;\n\t    addedAt = Math.min(Math.max(addedAt, 0), models.length - 1);\n\n\t    if (viewComparator) {\n\t      var addedModel = void 0;\n\t      // Preserve `at` location, even for a sorted view\n\t      if (addedAt) {\n\t        addedModel = models[addedAt];\n\t        models = models.slice(0, addedAt).concat(models.slice(addedAt + 1));\n\t      }\n\t      models = this._sortModelsBy(models, viewComparator);\n\t      if (addedModel) {\n\t        models.splice(addedAt, 0, addedModel);\n\t      }\n\t    }\n\n\t    // Filter after sorting in case the filter uses the index\n\t    models = this._filterModels(models);\n\n\t    return models;\n\t  },\n\n\n\t  // Filter an array of models, if a filter exists\n\t  _filterModels: function _filterModels(models) {\n\t    var _this5 = this;\n\n\t    if (this.getOption('filter')) {\n\t      models = _.filter(models, function (model, index) {\n\t        return _this5._shouldAddChild(model, index);\n\t      });\n\t    }\n\t    return models;\n\t  },\n\t  _sortModelsBy: function _sortModelsBy(models, comparator) {\n\t    if (typeof comparator === 'string') {\n\t      return _.sortBy(models, function (model) {\n\t        return model.get(comparator);\n\t      });\n\t    } else if (comparator.length === 1) {\n\t      return _.sortBy(models, _.bind(comparator, this));\n\t    } else {\n\t      return models.sort(_.bind(comparator, this));\n\t    }\n\t  },\n\n\n\t  // Internal method to show an empty view in place of a collection of child views,\n\t  // when the collection is empty\n\t  _showEmptyView: function _showEmptyView() {\n\t    var EmptyView = this.getEmptyView();\n\n\t    if (EmptyView && !this._showingEmptyView) {\n\t      this._showingEmptyView = true;\n\n\t      var model = new Backbone.Model();\n\t      var emptyViewOptions = this.getOption('emptyViewOptions') || this.getOption('childViewOptions');\n\t      if (_.isFunction(emptyViewOptions)) {\n\t        emptyViewOptions = emptyViewOptions.call(this, model, this._emptyViewIndex);\n\t      }\n\n\t      var view = this._buildChildView(model, EmptyView, emptyViewOptions);\n\n\t      this.triggerMethod('before:render:empty', this, view);\n\t      this._addChildView(view, 0);\n\t      this.triggerMethod('render:empty', this, view);\n\n\t      view._parent = this;\n\t    }\n\t  },\n\n\n\t  // Internal method to destroy an existing emptyView instance if one exists. Called when\n\t  // a collection view has been rendered empty, and then a child is added to the collection.\n\t  _destroyEmptyView: function _destroyEmptyView() {\n\t    if (this._showingEmptyView) {\n\t      this.triggerMethod('before:remove:empty', this);\n\n\t      this._destroyChildren();\n\t      delete this._showingEmptyView;\n\n\t      this.triggerMethod('remove:empty', this);\n\t    }\n\t  },\n\n\n\t  // Retrieve the empty view class\n\t  getEmptyView: function getEmptyView() {\n\t    return this.getOption('emptyView');\n\t  },\n\n\n\t  // Retrieve the `childView` class, either from `this.options.childView` or from\n\t  // the `childView` in the object definition. The \"options\" takes precedence.\n\t  // The `childView` property can be either a view class or a function that\n\t  // returns a view class. If it is a function, it will receive the model that\n\t  // will be passed to the view instance (created from the returned view class)\n\t  _getChildView: function _getChildView(child) {\n\t    var childView = this.getOption('childView');\n\n\t    if (!childView) {\n\t      throw new MarionetteError({\n\t        name: 'NoChildViewError',\n\t        message: 'A \"childView\" must be specified'\n\t      });\n\t    }\n\n\t    // first check if the `childView` is a view class (the common case)\n\t    // then check if it's a function (which we assume that returns a view class)\n\t    if (childView.prototype instanceof Backbone.View || childView === Backbone.View) {\n\t      return childView;\n\t    } else if (_.isFunction(childView)) {\n\t      return childView.call(this, child);\n\t    } else {\n\t      throw new MarionetteError({\n\t        name: 'InvalidChildViewError',\n\t        message: '\"childView\" must be a view class or a function that returns a view class'\n\t      });\n\t    }\n\t  },\n\n\n\t  // Render the child's view and add it to the HTML for the collection view at a given index.\n\t  // This will also update the indices of later views in the collection in order to keep the\n\t  // children in sync with the collection.\n\t  _addChild: function _addChild(child, ChildView, index) {\n\t    var childViewOptions = this.getValue(this.getOption('childViewOptions'), child, index);\n\n\t    var view = this._buildChildView(child, ChildView, childViewOptions);\n\n\t    // increment indices of views after this one\n\t    this._updateIndices(view, true, index);\n\n\t    this.triggerMethod('before:add:child', this, view);\n\t    this._addChildView(view, index);\n\t    this.triggerMethod('add:child', this, view);\n\n\t    view._parent = this;\n\n\t    return view;\n\t  },\n\n\n\t  // Internal method. This decrements or increments the indices of views after the added/removed\n\t  // view to keep in sync with the collection.\n\t  _updateIndices: function _updateIndices(view, increment, index) {\n\t    if (!this.getOption('sort')) {\n\t      return;\n\t    }\n\n\t    if (increment) {\n\t      // assign the index to the view\n\t      view._index = index;\n\t    }\n\n\t    // update the indexes of views after this one\n\t    this.children.each(function (laterView) {\n\t      if (laterView._index >= view._index) {\n\t        laterView._index += increment ? 1 : -1;\n\t      }\n\t    });\n\t  },\n\n\n\t  // Internal Method. Add the view to children and render it at the given index.\n\t  _addChildView: function _addChildView(view, index) {\n\t    // Only trigger attach if already attached and not buffering,\n\t    // otherwise _endBuffering() or Region#show() handles this.\n\t    var shouldTriggerAttach = !this._isBuffering && this._isAttached;\n\n\t    // set up the child view event forwarding\n\t    this._proxyChildEvents(view);\n\n\t    // Store the child view itself so we can properly remove and/or destroy it later\n\t    this.children.add(view);\n\n\t    if (!view.supportsRenderLifecycle) {\n\t      triggerMethodOn(view, 'before:render', view);\n\t    }\n\n\t    // Render view\n\t    view.render();\n\n\t    if (!view.supportsRenderLifecycle) {\n\t      view._isRendered = true;\n\t      triggerMethodOn(view, 'render', view);\n\t    }\n\n\t    if (shouldTriggerAttach) {\n\t      triggerMethodOn(view, 'before:attach', view);\n\t    }\n\n\t    // Attach view\n\t    this.attachHtml(this, view, index);\n\n\t    if (shouldTriggerAttach) {\n\t      view._isAttached = true;\n\t      triggerMethodOn(view, 'attach', view);\n\t    }\n\t  },\n\n\n\t  // Build a `childView` for a model in the collection.\n\t  _buildChildView: function _buildChildView(child, ChildViewClass, childViewOptions) {\n\t    var options = _.extend({ model: child }, childViewOptions);\n\t    var childView = new ChildViewClass(options);\n\t    monitorViewEvents(childView);\n\t    return childView;\n\t  },\n\n\n\t  // Remove the child view and destroy it. This function also updates the indices of later views\n\t  // in the collection in order to keep the children in sync with the collection.\n\t  _removeChildView: function _removeChildView(view) {\n\t    if (!view || view._isDestroyed) {\n\t      return;\n\t    }\n\n\t    this.triggerMethod('before:remove:child', this, view);\n\n\t    if (view.destroy) {\n\t      view.destroy();\n\t    } else {\n\t      destroyBackboneView(view);\n\t    }\n\n\t    delete view._parent;\n\t    this.stopListening(view);\n\t    this.children.remove(view);\n\t    this.triggerMethod('remove:child', this, view);\n\n\t    // decrement the index of views after this one\n\t    this._updateIndices(view, false);\n\t  },\n\n\n\t  // check if the collection is empty or optionally whether an array of pre-processed models is empty\n\t  isEmpty: function isEmpty(options) {\n\t    var models = void 0;\n\t    if (_.result(options, 'processedModels')) {\n\t      models = options.processedModels;\n\t    } else {\n\t      models = this.collection ? this.collection.models : [];\n\t      models = this._filterModels(models);\n\t    }\n\t    return models.length === 0;\n\t  },\n\n\n\t  // If empty, show the empty view\n\t  _checkEmpty: function _checkEmpty() {\n\t    if (this.isEmpty()) {\n\t      this._showEmptyView();\n\t    }\n\t  },\n\n\n\t  // You might need to override this if you've overridden attachHtml\n\t  attachBuffer: function attachBuffer(collectionView, buffer) {\n\t    collectionView.$el.append(buffer);\n\t  },\n\n\n\t  // Create a fragment buffer from the currently buffered children\n\t  _createBuffer: function _createBuffer() {\n\t    var elBuffer = document.createDocumentFragment();\n\t    _.each(this._bufferedChildren, function (b) {\n\t      elBuffer.appendChild(b.el);\n\t    });\n\t    return elBuffer;\n\t  },\n\n\n\t  // Append the HTML to the collection's `el`. Override this method to do something other\n\t  // than `.append`.\n\t  attachHtml: function attachHtml(collectionView, childView, index) {\n\t    if (collectionView._isBuffering) {\n\t      // buffering happens on reset events and initial renders\n\t      // in order to reduce the number of inserts into the\n\t      // document, which are expensive.\n\t      collectionView._bufferedChildren.splice(index, 0, childView);\n\t    } else {\n\t      // If we've already rendered the main collection, append\n\t      // the new child into the correct order if we need to. Otherwise\n\t      // append to the end.\n\t      if (!collectionView._insertBefore(childView, index)) {\n\t        collectionView._insertAfter(childView);\n\t      }\n\t    }\n\t  },\n\n\n\t  // Internal method. Check whether we need to insert the view into the correct position.\n\t  _insertBefore: function _insertBefore(childView, index) {\n\t    var currentView = void 0;\n\t    var findPosition = this.getOption('sort') && index < this.children.length - 1;\n\t    if (findPosition) {\n\t      // Find the view after this one\n\t      currentView = this.children.find(function (view) {\n\t        return view._index === index + 1;\n\t      });\n\t    }\n\n\t    if (currentView) {\n\t      currentView.$el.before(childView.el);\n\t      return true;\n\t    }\n\n\t    return false;\n\t  },\n\n\n\t  // Internal method. Append a view to the end of the $el\n\t  _insertAfter: function _insertAfter(childView) {\n\t    this.$el.append(childView.el);\n\t  },\n\n\n\t  // Internal method to set up the `children` object for storing all of the child views\n\t  _initChildViewStorage: function _initChildViewStorage() {\n\t    this.children = new ChildViewContainer();\n\t  },\n\n\n\t  // called by ViewMixin destroy\n\t  _removeChildren: function _removeChildren() {\n\t    this._destroyChildren({ checkEmpty: false });\n\t  },\n\n\n\t  // Destroy the child views that this collection view is holding on to, if any\n\t  _destroyChildren: function _destroyChildren() {\n\t    var _ref2 = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n\t    var checkEmpty = _ref2.checkEmpty;\n\n\t    this.triggerMethod('before:destroy:children', this);\n\t    var shouldCheckEmpty = checkEmpty !== false;\n\t    var childViews = this.children.map(_.identity);\n\n\t    this.children.each(_.bind(this._removeChildView, this));\n\n\t    if (shouldCheckEmpty) {\n\t      this._checkEmpty();\n\t    }\n\n\t    this.triggerMethod('destroy:children', this);\n\t    return childViews;\n\t  },\n\n\n\t  // Return true if the given child should be shown. Return false otherwise.\n\t  // The filter will be passed (child, index, collection), where\n\t  //  'child' is the given model\n\t  //  'index' is the index of that model in the collection\n\t  //  'collection' is the collection referenced by this CollectionView\n\t  _shouldAddChild: function _shouldAddChild(child, index) {\n\t    var filter = this.getOption('filter');\n\t    return !_.isFunction(filter) || filter.call(this, child, index, this.collection);\n\t  },\n\n\n\t  // Set up the child view event forwarding. Uses a \"childview:\" prefix in front of all forwarded events.\n\t  _proxyChildEvents: function _proxyChildEvents(view) {\n\t    var prefix = this.getOption('childViewEventPrefix');\n\n\t    // Forward all child view events through the parent,\n\t    // prepending \"childview:\" to the event name\n\t    this.listenTo(view, 'all', function (eventName) {\n\n\t      var childEventName = prefix + ':' + eventName;\n\n\t      var childViewEvents = this.normalizeMethods(this._childViewEvents);\n\n\t      // call collectionView childViewEvent if defined\n\n\t      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n\t        args[_key - 1] = arguments[_key];\n\t      }\n\n\t      if (typeof childViewEvents !== 'undefined' && _.isFunction(childViewEvents[eventName])) {\n\t        childViewEvents[eventName].apply(this, args);\n\t      }\n\n\t      // use the parent view's proxyEvent handlers\n\t      var childViewTriggers = this._childViewTriggers;\n\n\t      // Call the event with the proxy name on the parent layout\n\t      if (childViewTriggers && _.isString(childViewTriggers[eventName])) {\n\t        this.triggerMethod.apply(this, [childViewTriggers[eventName]].concat(args));\n\t      }\n\n\t      this.triggerMethod.apply(this, [childEventName].concat(args));\n\t    });\n\t  },\n\t  _getImmediateChildren: function _getImmediateChildren() {\n\t    return _.values(this.children._views);\n\t  },\n\t  getViewComparator: function getViewComparator() {\n\t    return this.getOption('viewComparator');\n\t  }\n\t});\n\n\t_.extend(CollectionView.prototype, ViewMixin);\n\n\t// Used for rendering a branch-leaf, hierarchical structure.\n\t// Extends directly from CollectionView and also renders an\n\t// a child view as `modelView`, for the top leaf\n\t// @deprecated\n\tvar CompositeView = CollectionView.extend({\n\n\t  // Setting up the inheritance chain which allows changes to\n\t  // Marionette.CollectionView.prototype.constructor which allows overriding\n\t  // option to pass '{sort: false}' to prevent the CompositeView from\n\t  // maintaining the sorted order of the collection.\n\t  // This will fallback onto appending childView's to the end.\n\n\t  constructor: function constructor() {\n\t    deprecate('CompositeView is deprecated. Convert to View at your earliest convenience');\n\t    CollectionView.prototype.constructor.apply(this, arguments);\n\t  },\n\n\n\t  // Configured the initial events that the composite view\n\t  // binds to. Override this method to prevent the initial\n\t  // events, or to add your own initial events.\n\t  _initialEvents: function _initialEvents() {\n\n\t    // Bind only after composite view is rendered to avoid adding child views\n\t    // to nonexistent childViewContainer\n\n\t    if (this.collection) {\n\t      this.listenTo(this.collection, 'add', this._onCollectionAdd);\n\t      this.listenTo(this.collection, 'remove', this._onCollectionRemove);\n\t      this.listenTo(this.collection, 'reset', this.renderChildren);\n\n\t      if (this.getOption('sort')) {\n\t        this.listenTo(this.collection, 'sort', this._sortViews);\n\t      }\n\t    }\n\t  },\n\n\n\t  // Retrieve the `childView` to be used when rendering each of\n\t  // the items in the collection. The default is to return\n\t  // `this.childView` or Marionette.CompositeView if no `childView`\n\t  // has been defined. As happens in CollectionView, `childView` can\n\t  // be a function (which should return a view class).\n\t  _getChildView: function _getChildView(child) {\n\t    var childView = this.getOption('childView');\n\n\t    // for CompositeView, if `childView` is not specified, we'll get the same\n\t    // composite view class rendered for each child in the collection\n\t    // then check if the `childView` is a view class (the common case)\n\t    // finally check if it's a function (which we assume that returns a view class)\n\t    if (!childView) {\n\t      return this.constructor;\n\t    } else if (childView.prototype instanceof Backbone.View || childView === Backbone.View) {\n\t      return childView;\n\t    } else if (_.isFunction(childView)) {\n\t      return childView.call(this, child);\n\t    } else {\n\t      throw new MarionetteError({\n\t        name: 'InvalidChildViewError',\n\t        message: '\"childView\" must be a view class or a function that returns a view class'\n\t      });\n\t    }\n\t  },\n\n\n\t  // Return the serialized model\n\t  serializeData: function serializeData() {\n\t    return this.serializeModel();\n\t  },\n\n\n\t  // Renders the model and the collection.\n\t  render: function render() {\n\t    this._ensureViewIsIntact();\n\t    this._isRendering = true;\n\t    this.resetChildViewContainer();\n\n\t    this.triggerMethod('before:render', this);\n\n\t    this._renderTemplate();\n\t    this.bindUIElements();\n\t    this.renderChildren();\n\n\t    this._isRendering = false;\n\t    this._isRendered = true;\n\t    this.triggerMethod('render', this);\n\t    return this;\n\t  },\n\t  renderChildren: function renderChildren() {\n\t    if (this._isRendered || this._isRendering) {\n\t      CollectionView.prototype._renderChildren.call(this);\n\t    }\n\t  },\n\n\n\t  // You might need to override this if you've overridden attachHtml\n\t  attachBuffer: function attachBuffer(compositeView, buffer) {\n\t    var $container = this.getChildViewContainer(compositeView);\n\t    $container.append(buffer);\n\t  },\n\n\n\t  // Internal method. Append a view to the end of the $el.\n\t  // Overidden from CollectionView to ensure view is appended to\n\t  // childViewContainer\n\t  _insertAfter: function _insertAfter(childView) {\n\t    var $container = this.getChildViewContainer(this, childView);\n\t    $container.append(childView.el);\n\t  },\n\n\n\t  // Internal method. Append reordered childView'.\n\t  // Overidden from CollectionView to ensure reordered views\n\t  // are appended to childViewContainer\n\t  _appendReorderedChildren: function _appendReorderedChildren(children) {\n\t    var $container = this.getChildViewContainer(this);\n\t    $container.append(children);\n\t  },\n\n\n\t  // Internal method to ensure an `$childViewContainer` exists, for the\n\t  // `attachHtml` method to use.\n\t  getChildViewContainer: function getChildViewContainer(containerView, childView) {\n\t    if (!!containerView.$childViewContainer) {\n\t      return containerView.$childViewContainer;\n\t    }\n\n\t    var container = void 0;\n\t    var childViewContainer = getOption.call(containerView, 'childViewContainer');\n\t    if (childViewContainer) {\n\n\t      var selector = getValue.call(containerView, childViewContainer);\n\n\t      if (selector.charAt(0) === '@' && containerView.ui) {\n\t        container = containerView.ui[selector.substr(4)];\n\t      } else {\n\t        container = containerView.$(selector);\n\t      }\n\n\t      if (container.length <= 0) {\n\t        throw new MarionetteError({\n\t          name: 'ChildViewContainerMissingError',\n\t          message: 'The specified \"childViewContainer\" was not found: ' + containerView.childViewContainer\n\t        });\n\t      }\n\t    } else {\n\t      container = containerView.$el;\n\t    }\n\n\t    containerView.$childViewContainer = container;\n\t    return container;\n\t  },\n\n\n\t  // Internal method to reset the `$childViewContainer` on render\n\t  resetChildViewContainer: function resetChildViewContainer() {\n\t    if (this.$childViewContainer) {\n\t      this.$childViewContainer = undefined;\n\t    }\n\t  }\n\t});\n\n\t// To prevent duplication but allow the best View organization\n\t// Certain View methods are mixed directly into the deprecated CompositeView\n\tvar MixinFromView = _.pick(View.prototype, 'serializeModel', 'getTemplate', '_renderTemplate', 'attachElContent');\n\t_.extend(CompositeView.prototype, MixinFromView);\n\n\tvar Behavior = MarionetteObject.extend({\n\t  cidPrefix: 'mnb',\n\n\t  constructor: function constructor(options, view) {\n\t    // Setup reference to the view.\n\t    // this comes in handle when a behavior\n\t    // wants to directly talk up the chain\n\t    // to the view.\n\t    this.view = view;\n\t    this.defaults = _.clone(_.result(this, 'defaults', {}));\n\t    this._setOptions(this.defaults, options);\n\t    // Construct an internal UI hash using\n\t    // the behaviors UI hash and then the view UI hash.\n\t    // This allows the user to use UI hash elements\n\t    // defined in the parent view as well as those\n\t    // defined in the given behavior.\n\t    // This order will help the reuse and share of a behavior\n\t    // between multiple views, while letting a view override a\n\t    // selector under an UI key.\n\t    this.ui = _.extend({}, _.result(this, 'ui'), _.result(view, 'ui'));\n\n\t    MarionetteObject.apply(this, arguments);\n\t  },\n\n\t  // proxy behavior $ method to the view\n\t  // this is useful for doing jquery DOM lookups\n\t  // scoped to behaviors view.\n\t  $: function $() {\n\t    return this.view.$.apply(this.view, arguments);\n\t  },\n\n\t  // Stops the behavior from listening to events.\n\t  // Overrides Object#destroy to prevent additional events from being triggered.\n\t  destroy: function destroy() {\n\t    this.stopListening();\n\n\t    return this;\n\t  },\n\n\t  proxyViewProperties: function proxyViewProperties() {\n\t    this.$el = this.view.$el;\n\t    this.el = this.view.el;\n\n\t    return this;\n\t  },\n\n\t  bindUIElements: function bindUIElements() {\n\t    this._bindUIElements();\n\n\t    return this;\n\t  },\n\n\t  unbindUIElements: function unbindUIElements() {\n\t    this._unbindUIElements();\n\n\t    return this;\n\t  },\n\n\t  getUI: function getUI(name) {\n\t    this.view._ensureViewIsIntact();\n\t    return this._getUI(name);\n\t  },\n\n\t  // Handle `modelEvents`, and `collectionEvents` configuration\n\t  delegateEntityEvents: function delegateEntityEvents() {\n\t    this._delegateEntityEvents(this.view.model, this.view.collection);\n\n\t    return this;\n\t  },\n\n\t  undelegateEntityEvents: function undelegateEntityEvents() {\n\t    this._undelegateEntityEvents(this.view.model, this.view.collection);\n\n\t    return this;\n\t  },\n\n\t  getEvents: function getEvents() {\n\t    // Normalize behavior events hash to allow\n\t    // a user to use the @ui. syntax.\n\t    var behaviorEvents = this.normalizeUIKeys(_.result(this, 'events'));\n\n\t    // binds the handler to the behavior and builds a unique eventName\n\t    return _.reduce(behaviorEvents, function (events, behaviorHandler, key) {\n\t      if (!_.isFunction(behaviorHandler)) {\n\t        behaviorHandler = this[behaviorHandler];\n\t      }\n\t      if (!behaviorHandler) {\n\t        return;\n\t      }\n\t      key = getUniqueEventName(key);\n\t      events[key] = _.bind(behaviorHandler, this);\n\t      return events;\n\t    }, {}, this);\n\t  },\n\n\t  // Internal method to build all trigger handlers for a given behavior\n\t  getTriggers: function getTriggers() {\n\t    if (!this.triggers) {\n\t      return;\n\t    }\n\n\t    // Normalize behavior triggers hash to allow\n\t    // a user to use the @ui. syntax.\n\t    var behaviorTriggers = this.normalizeUIKeys(_.result(this, 'triggers'));\n\n\t    return this._getViewTriggers(this.view, behaviorTriggers);\n\t  }\n\n\t});\n\n\t_.extend(Behavior.prototype, DelegateEntityEventsMixin, TriggersMixin, UIMixin);\n\n\t// A container for a Marionette application.\n\tvar Application = MarionetteObject.extend({\n\t  cidPrefix: 'mna',\n\n\t  constructor: function constructor(options) {\n\t    this._setOptions(options);\n\n\t    this._initRegion();\n\n\t    MarionetteObject.prototype.constructor.apply(this, arguments);\n\t  },\n\n\t  regionClass: Region,\n\n\t  _initRegion: function _initRegion(options) {\n\t    var region = this.getOption('region');\n\t    var RegionClass = this.getOption('regionClass');\n\n\t    // if the region is a string expect an el or selector\n\t    // and instantiate a region\n\t    if (_.isString(region)) {\n\t      this._region = new RegionClass({\n\t        el: region\n\t      });\n\t      return;\n\t    }\n\n\t    this._region = region;\n\t  },\n\n\t  getRegion: function getRegion() {\n\t    return this._region;\n\t  },\n\n\t  showView: function showView(view) {\n\t    var region = this.getRegion();\n\n\t    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n\t      args[_key - 1] = arguments[_key];\n\t    }\n\n\t    return region.show.apply(region, [view].concat(args));\n\t  },\n\n\t  getView: function getView() {\n\t    return this.getRegion().currentView;\n\t  },\n\n\t  // kick off all of the application's processes.\n\t  start: function start(options) {\n\t    this.triggerMethod('before:start', options);\n\t    this.triggerMethod('start', options);\n\t  }\n\n\t});\n\n\tvar AppRouter = Backbone.Router.extend({\n\n\t  constructor: function constructor(options) {\n\t    this._setOptions(options);\n\n\t    Backbone.Router.apply(this, arguments);\n\n\t    var appRoutes = this.getOption('appRoutes');\n\t    var controller = this._getController();\n\t    this.processAppRoutes(controller, appRoutes);\n\t    this.on('route', this._processOnRoute, this);\n\t  },\n\n\t  // Similar to route method on a Backbone Router but\n\t  // method is called on the controller\n\t  appRoute: function appRoute(route, methodName) {\n\t    var controller = this._getController();\n\t    this._addAppRoute(controller, route, methodName);\n\t  },\n\n\t  // process the route event and trigger the onRoute\n\t  // method call, if it exists\n\t  _processOnRoute: function _processOnRoute(routeName, routeArgs) {\n\t    // make sure an onRoute before trying to call it\n\t    if (_.isFunction(this.onRoute)) {\n\t      // find the path that matches the current route\n\t      var routePath = _.invert(this.getOption('appRoutes'))[routeName];\n\t      this.onRoute(routeName, routePath, routeArgs);\n\t    }\n\t  },\n\n\t  // Internal method to process the `appRoutes` for the\n\t  // router, and turn them in to routes that trigger the\n\t  // specified method on the specified `controller`.\n\t  processAppRoutes: function processAppRoutes(controller, appRoutes) {\n\t    var _this = this;\n\n\t    if (!appRoutes) {\n\t      return;\n\t    }\n\n\t    var routeNames = _.keys(appRoutes).reverse(); // Backbone requires reverted order of routes\n\n\t    _.each(routeNames, function (route) {\n\t      _this._addAppRoute(controller, route, appRoutes[route]);\n\t    });\n\t  },\n\n\t  _getController: function _getController() {\n\t    return this.getOption('controller');\n\t  },\n\n\t  _addAppRoute: function _addAppRoute(controller, route, methodName) {\n\t    var method = controller[methodName];\n\n\t    if (!method) {\n\t      throw new MarionetteError('Method \"' + methodName + '\" was not found on the controller');\n\t    }\n\n\t    this.route(route, methodName, _.bind(method, controller));\n\t  },\n\n\t  triggerMethod: triggerMethod\n\t});\n\n\t_.extend(AppRouter.prototype, CommonMixin);\n\n\t// Placeholder method to be extended by the user.\n\t// The method should define the object that stores the behaviors.\n\t// i.e.\n\t//\n\t// ```js\n\t// Marionette.Behaviors.behaviorsLookup: function() {\n\t//   return App.Behaviors\n\t// }\n\t// ```\n\tfunction behaviorsLookup() {\n\t  throw new MarionetteError({\n\t    message: 'You must define where your behaviors are stored.',\n\t    url: 'marionette.behaviors.md#behaviorslookup'\n\t  });\n\t}\n\n\t// Add Feature flags here\n\t// e.g. 'class' => false\n\tvar FEATURES = {};\n\n\tfunction isEnabled(name) {\n\t  return !!FEATURES[name];\n\t}\n\n\tfunction setEnabled(name, state) {\n\t  return FEATURES[name] = state;\n\t}\n\n\tvar previousMarionette = Backbone.Marionette;\n\tvar Marionette = Backbone.Marionette = {};\n\n\t// This allows you to run multiple instances of Marionette on the same\n\t// webapp. After loading the new version, call `noConflict()` to\n\t// get a reference to it. At the same time the old version will be\n\t// returned to Backbone.Marionette.\n\tMarionette.noConflict = function () {\n\t  Backbone.Marionette = previousMarionette;\n\t  return this;\n\t};\n\n\t// Utilities\n\tMarionette.bindEntityEvents = proxy(bindEntityEvents);\n\tMarionette.unbindEntityEvents = proxy(unbindEntityEvents);\n\tMarionette.bindRadioEvents = proxy(bindEntityEvents);\n\tMarionette.unbindRadioEvents = proxy(unbindEntityEvents);\n\tMarionette.bindRadioRequests = proxy(bindRadioRequests);\n\tMarionette.unbindRadioRequests = proxy(unbindRadioRequests);\n\tMarionette.mergeOptions = proxy(mergeOptions);\n\tMarionette.getOption = proxy(getOption);\n\tMarionette.normalizeMethods = proxy(normalizeMethods);\n\tMarionette.extend = extend;\n\tMarionette.isNodeAttached = isNodeAttached;\n\tMarionette.deprecate = deprecate;\n\tMarionette.triggerMethod = proxy(triggerMethod);\n\tMarionette.triggerMethodOn = triggerMethodOn;\n\tMarionette.isEnabled = isEnabled;\n\tMarionette.setEnabled = setEnabled;\n\tMarionette.monitorViewEvents = monitorViewEvents;\n\n\tMarionette.Behaviors = {};\n\tMarionette.Behaviors.behaviorsLookup = behaviorsLookup;\n\n\t// Classes\n\tMarionette.Application = Application;\n\tMarionette.AppRouter = AppRouter;\n\tMarionette.Renderer = Renderer;\n\tMarionette.TemplateCache = TemplateCache;\n\tMarionette.View = View;\n\tMarionette.CollectionView = CollectionView;\n\tMarionette.CompositeView = CompositeView;\n\tMarionette.Behavior = Behavior;\n\tMarionette.Region = Region;\n\tMarionette.Error = MarionetteError;\n\tMarionette.Object = MarionetteObject;\n\n\t// Configuration\n\tMarionette.DEV_MODE = false;\n\tMarionette.FEATURES = FEATURES;\n\tMarionette.VERSION = version;\n\n\treturn Marionette;\n\n}));\n\n//# sourceMappingURL=backbone.marionette.js.map\n","/* jshint maxstatements: 14, maxcomplexity: 7 */\n\n// Trigger Method\n// --------------\n\nimport _         from 'underscore';\nimport getOption from './utils/getOption';\n\n// split the event name on the \":\"\nvar splitter = /(^|:)(\\w)/gi;\n\n// take the event section (\"section1:section2:section3\")\n// and turn it in to uppercase name onSection1Section2Section3\nfunction getEventName(match, prefix, eventName) {\n  return eventName.toUpperCase();\n}\n\n// Trigger an event and/or a corresponding method name. Examples:\n//\n// `this.triggerMethod(\"foo\")` will trigger the \"foo\" event and\n// call the \"onFoo\" method.\n//\n// `this.triggerMethod(\"foo:bar\")` will trigger the \"foo:bar\" event and\n// call the \"onFooBar\" method.\nexport function triggerMethod(event, ...args) {\n  // get the method name from the event name\n  var methodName = 'on' + event.replace(splitter, getEventName);\n  var method = getOption.call(this, methodName);\n  var result;\n\n  // call the onMethodName if it exists\n  if (_.isFunction(method)) {\n    // pass all args, except the event name\n    result = method.apply(this, args);\n  }\n\n  // trigger the event\n  this.trigger(event, ...args);\n\n  return result;\n}\n\n// triggerMethodOn invokes triggerMethod on a specific context\n//\n// e.g. `Marionette.triggerMethodOn(view, 'show')`\n// will trigger a \"show\" event or invoke onShow the view.\nexport function triggerMethodOn(context, ...args) {\n  var fnc = _.isFunction(context.triggerMethod) ? context.triggerMethod : triggerMethod;\n  return fnc.apply(context, args);\n}\n","// DOM Refresh\n// -----------\n\nimport { triggerMethodOn } from './trigger-method';\nimport _ from 'underscore';\n\n// Trigger method on children unless a pure Backbone.View\nfunction triggerMethodChildren(view, event, beforeEachTrigger) {\n  if (!view._getImmediateChildren) { return; }\n  _.each(view._getImmediateChildren(), child => {\n    if (beforeEachTrigger) {\n      beforeEachTrigger(child);\n    }\n    triggerMethodOn(child, event, child);\n  });\n}\n\nfunction setIsAttached(view) {\n  view._isAttached = true;\n}\n\nfunction unsetIsAttached(view) {\n  view._isAttached = false;\n}\n\n// Monitor a view's state, propagating attach/detach events to children and firing dom:refresh\n// whenever a rendered view is attached or an attached view is rendered.\nfunction monitorViewEvents(view) {\n  if (view._areViewEventsMonitored) { return; }\n\n  view._areViewEventsMonitored = true;\n\n  function handleBeforeAttach() {\n    triggerMethodChildren(view, 'before:attach');\n  }\n\n  function handleAttach() {\n    triggerMethodChildren(view, 'attach', setIsAttached);\n    triggerDOMRefresh();\n  }\n\n  function handleBeforeDetach() {\n    triggerMethodChildren(view, 'before:detach');\n  }\n\n  function handleDetach() {\n    triggerMethodChildren(view, 'detach', unsetIsAttached);\n  }\n\n  function handleRender() {\n    triggerDOMRefresh();\n  }\n\n  function triggerDOMRefresh() {\n    if (view._isAttached && view._isRendered) {\n      triggerMethodOn(view, 'dom:refresh', view);\n    }\n  }\n\n  view.on({\n    'before:attach': handleBeforeAttach,\n    'attach':        handleAttach,\n    'before:detach': handleBeforeDetach,\n    'detach':        handleDetach,\n    'render':        handleRender\n  });\n}\n\nexport default monitorViewEvents;\n","// Bind Entity Events & Unbind Entity Events\n// -----------------------------------------\n//\n// These methods are used to bind/unbind a backbone \"entity\" (e.g. collection/model)\n// to methods on a target object.\n//\n// The first parameter, `target`, must have the Backbone.Events module mixed in.\n//\n// The second parameter is the `entity` (Backbone.Model, Backbone.Collection or\n// any object that has Backbone.Events mixed in) to bind the events from.\n//\n// The third parameter is a hash of { \"event:name\": \"eventHandler\" }\n// configuration. Multiple handlers can be separated by a space. A\n// function can be supplied instead of a string handler name.\n\nimport _               from 'underscore';\nimport MarionetteError from './error';\n\n// Bind/unbind the event to handlers specified as a string of\n// handler names on the target object\nfunction bindFromStrings(target, entity, evt, methods, actionName) {\n  var methodNames = methods.split(/\\s+/);\n\n  _.each(methodNames, function(methodName) {\n    var method = target[methodName];\n    if (!method) {\n      throw new MarionetteError(`Method \"${methodName}\" was configured as an event handler, but does not exist.`);\n    }\n\n    target[actionName](entity, evt, method);\n  });\n}\n\n// generic looping function\nfunction iterateEvents(target, entity, bindings, actionName) {\n  if (!entity || !bindings) { return; }\n\n  // type-check bindings\n  if (!_.isObject(bindings)) {\n    throw new MarionetteError({\n      message: 'Bindings must be an object.',\n      url: 'marionette.functions.html#marionettebindentityevents'\n    });\n  }\n\n  // iterate the bindings and bind/unbind them\n  _.each(bindings, function(method, evt) {\n\n    // allow for a list of method names as a string\n    if (_.isString(method)) {\n      bindFromStrings(target, entity, evt, method, actionName);\n      return;\n    }\n\n    target[actionName](entity, evt, method);\n  });\n}\n\nfunction bindEntityEvents(entity, bindings) {\n  iterateEvents(this, entity, bindings, 'listenTo');\n}\n\nfunction unbindEntityEvents(entity, bindings) {\n  iterateEvents(this, entity, bindings, 'stopListening');\n}\n\n// Export Public API\nexport {\n  bindEntityEvents,\n  unbindEntityEvents\n};\n","// Bind/Unbind Radio Requests\n// -----------------------------------------\n//\n// These methods are used to bind/unbind a backbone.radio request\n// to methods on a target object.\n//\n// The first parameter, `target`, will set the context of the reply method\n//\n// The second parameter is the `Radio.channel` to bind the reply to.\n//\n// The third parameter is a hash of { \"request:name\": \"replyHandler\" }\n// configuration. A function can be supplied instead of a string handler name.\n\nimport _ from 'underscore';\nimport normalizeMethods from './utils/normalizeMethods';\nimport MarionetteError from './error';\n\nfunction iterateReplies(target, channel, bindings, actionName) {\n  if (!channel || !bindings) { return; }\n\n  // type-check bindings\n  if (!_.isObject(bindings)) {\n    throw new MarionetteError({\n      message: 'Bindings must be an object.',\n      url: 'marionette.functions.html#marionettebindradiorequests'\n    });\n  }\n\n  var normalizedRadioRequests = normalizeMethods.call(target, bindings);\n\n  channel[actionName](normalizedRadioRequests, target);\n}\n\nfunction bindRadioRequests(channel, bindings) {\n  iterateReplies(this, channel, bindings, 'reply');\n}\n\nfunction unbindRadioRequests(channel, bindings) {\n  iterateReplies(this, channel, bindings, 'stopReplying');\n}\n\nexport {\n  bindRadioRequests,\n  unbindRadioRequests\n};\n","import _                        from 'underscore';\nimport getValue                 from '../utils/getValue';\nimport _invoke                  from '../utils/_invoke';\nimport { triggerMethod }        from '../trigger-method';\nimport Marionette               from '../backbone.marionette';\n\n// Takes care of getting the behavior class\n// given options and a key.\n// If a user passes in options.behaviorClass\n// default to using that.\n// If a user passes in a Behavior Class directly, use that\n// Otherwise delegate the lookup to the users `behaviorsLookup` implementation.\nfunction getBehaviorClass(options, key) {\n  if (options.behaviorClass) {\n    return options.behaviorClass;\n    //treat functions as a Behavior constructor\n  } else if (_.isFunction(options)) {\n    return options;\n  }\n\n  // behaviorsLookup can be either a flat object or a method\n  return getValue(Marionette.Behaviors.behaviorsLookup, options, key)[key];\n}\n\n// Iterate over the behaviors object, for each behavior\n// instantiate it and get its grouped behaviors.\n// This accepts a list of behaviors in either an object or array form\nfunction parseBehaviors(view, behaviors) {\n  return _.chain(behaviors).map(function(options, key) {\n    var BehaviorClass = getBehaviorClass(options, key);\n    //if we're passed a class directly instead of an object\n    var _options = options === BehaviorClass ? {} : options;\n    var behavior = new BehaviorClass(_options, view);\n    var nestedBehaviors = parseBehaviors(view, _.result(behavior, 'behaviors'));\n\n    return [behavior].concat(nestedBehaviors);\n  }).flatten().value();\n}\n\nexport default {\n  _initBehaviors: function() {\n    var behaviors = this.getValue(this.getOption('behaviors'));\n\n    // Behaviors defined on a view can be a flat object literal\n    // or it can be a function that returns an object.\n    this._behaviors = _.isObject(behaviors) ? parseBehaviors(this, behaviors) : {};\n  },\n\n  _getBehaviorTriggers: function() {\n    var triggers = _invoke(this._behaviors, 'getTriggers');\n    return _.extend({}, ...triggers);\n  },\n\n  _getBehaviorEvents: function() {\n    var events = _invoke(this._behaviors, 'getEvents');\n    return _.extend({}, ...events);\n  },\n\n  // proxy behavior $el to the view's $el.\n  _proxyBehaviorViewProperties: function() {\n    _invoke(this._behaviors, 'proxyViewProperties');\n  },\n\n  // delegate modelEvents and collectionEvents\n  _delegateBehaviorEntityEvents: function() {\n    _invoke(this._behaviors, 'delegateEntityEvents');\n  },\n\n  // undelegate modelEvents and collectionEvents\n  _undelegateBehaviorEntityEvents: function() {\n    _invoke(this._behaviors, 'undelegateEntityEvents');\n  },\n\n  _destroyBehaviors: function(args) {\n    // Call destroy on each behavior after\n    // destroying the view.\n    // This unbinds event listeners\n    // that behaviors have registered for.\n    _invoke(this._behaviors, 'destroy', ...args);\n  },\n\n  _bindBehaviorUIElements: function() {\n    _invoke(this._behaviors, 'bindUIElements');\n  },\n\n  _unbindBehaviorUIElements: function() {\n    _invoke(this._behaviors, 'unbindUIElements');\n  },\n\n  _triggerEventOnBehaviors: function(...args) {\n    var behaviors = this._behaviors;\n    // Use good ol' for as this is a very hot function\n    for (var i = 0, length = behaviors && behaviors.length; i < length; i++) {\n      triggerMethod.apply(behaviors[i], args);\n    }\n  }\n};\n","import _ from 'underscore';\n\n// Borrow event splitter from Backbone\nvar delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\n\nfunction uniqueName(eventName, selector) {\n  return [eventName + _.uniqueId('.evt'), selector].join(' ');\n}\n\n// Set event name to be namespaced using a unique index\n// to generate a non colliding event namespace\n// http://api.jquery.com/event.namespace/\nvar getUniqueEventName = function(eventName) {\n  var match = eventName.match(delegateEventSplitter);\n  return uniqueName(match[1], match[2]);\n};\n\nexport default getUniqueEventName;\n","import _ from 'underscore';\nimport getUniqueEventName from '../utils/getUniqueEventName';\n\n// Internal method to create an event handler for a given `triggerDef` like\n// 'click:foo'\nfunction buildViewTrigger(view, triggerDef) {\n  if (_.isString(triggerDef)) {\n    triggerDef = {event: triggerDef};\n  }\n\n  const eventName = triggerDef.event;\n  const shouldPreventDefault = triggerDef.preventDefault !== false;\n  const shouldStopPropagation = triggerDef.stopPropagation !== false;\n\n  return function(e) {\n    if (shouldPreventDefault) {\n      e.preventDefault();\n    }\n\n    if (shouldStopPropagation) {\n      e.stopPropagation();\n    }\n\n    view.triggerMethod(eventName, view);\n  };\n}\n\nexport default {\n\n  // Configure `triggers` to forward DOM events to view\n  // events. `triggers: {\"click .foo\": \"do:foo\"}`\n  _getViewTriggers: function(view, triggers) {\n    // Configure the triggers, prevent default\n    // action and stop propagation of DOM events\n    return _.reduce(triggers, (events, value, key) => {\n      key = getUniqueEventName(key);\n      events[key] = buildViewTrigger(view, value);\n      return events;\n    }, {});\n  }\n\n};\n","import { triggerMethodOn } from '../trigger-method';\n\nexport default function destroyBackboneView(view) {\n  if (!view.supportsDestroyLifecycle) {\n    triggerMethodOn(view, 'before:destroy', view);\n  }\n\n  const shouldTriggerDetach = !!view._isAttached;\n\n  if (shouldTriggerDetach) {\n    triggerMethodOn(view, 'before:detach', view);\n  }\n\n  view.remove();\n\n  if (shouldTriggerDetach) {\n    view._isAttached = false;\n    triggerMethodOn(view, 'detach', view);\n  }\n\n  view._isDestroyed = true;\n\n  if (!view.supportsDestroyLifecycle) {\n    triggerMethodOn(view, 'destroy', view);\n  }\n}\n","import MarionetteError          from '../error';\n\n// Placeholder method to be extended by the user.\n// The method should define the object that stores the behaviors.\n// i.e.\n//\n// ```js\n// Marionette.Behaviors.behaviorsLookup: function() {\n//   return App.Behaviors\n// }\n// ```\nexport default function behaviorsLookup() {\n  throw new MarionetteError({\n    message: 'You must define where your behaviors are stored.',\n    url: 'marionette.behaviors.md#behaviorslookup'\n  });\n}\n","// Add Feature flags here\n// e.g. 'class' => false\nvar FEATURES = {\n};\n\nfunction isEnabled(name) {\n  return !!FEATURES[name];\n}\n\nfunction setEnabled(name, state) {\n  return FEATURES[name] = state;\n}\n\nexport {\n  FEATURES,\n  setEnabled,\n  isEnabled\n};\n","//Internal utility for creating context style global utils\nvar proxy = function(method) {\n  return function(context, ...args) {\n    return method.apply(context, args);\n  };\n};\n\nexport default proxy;\n","// Marionette.extend\n// -----------------\n\nimport Backbone from 'backbone';\n\n// Borrow the Backbone `extend` method so we can use it as needed\nvar extend = Backbone.Model.extend;\n\nexport default extend;\n","// Marionette.isNodeAttached\n// -------------------------\n\nimport Backbone from 'backbone';\n\n// Determine if `el` is a child of the document\nvar isNodeAttached = function(el) {\n  return Backbone.$.contains(document.documentElement, el);\n};\n\nexport default isNodeAttached;\n","import _ from 'underscore';\n\n// Merge `keys` from `options` onto `this`\nvar mergeOptions = function(options, keys) {\n  if (!options) { return; }\n  _.extend(this, _.pick(options, keys));\n};\n\nexport default mergeOptions;\n","// Marionette.getOption\n// --------------------\n\n// Retrieve an object, function or other value from the\n// object or its `options`, with `options` taking precedence.\nvar getOption = function(optionName) {\n  if (!optionName) { return; }\n  if (this.options && (this.options[optionName] !== undefined)) {\n    return this.options[optionName];\n  } else {\n    return this[optionName];\n  }\n};\n\nexport default getOption;\n","import _ from 'underscore';\n\n// Marionette.normalizeMethods\n// ----------------------\n\n// Pass in a mapping of events => functions or function names\n// and return a mapping of events => functions\nvar normalizeMethods = function(hash) {\n  return _.reduce(hash, (normalizedHash, method, name) => {\n    if (!_.isFunction(method)) {\n      method = this[method];\n    }\n    if (method) {\n      normalizedHash[name] = method;\n    }\n    return normalizedHash;\n  }, {});\n};\n\nexport default normalizeMethods;\n","/* global console */\n\nimport _ from 'underscore';\n\nimport Marionette from '../backbone.marionette';\n\nvar deprecate = function(message, test) {\n  if (_.isObject(message)) {\n    message = (\n      message.prev + ' is going to be removed in the future. ' +\n      'Please use ' + message.next + ' instead.' +\n      (message.url ? ' See: ' + message.url : '')\n    );\n  }\n\n  if (!Marionette.DEV_MODE) {\n    return;\n  }\n\n  if ((test === undefined || !test) && !deprecate._cache[message]) {\n    deprecate._warn('Deprecation warning: ' + message);\n    deprecate._cache[message] = true;\n  }\n};\n\ndeprecate._console = typeof console !== 'undefined' ? console : {};\ndeprecate._warn = function() {\n  var warn = deprecate._console.warn || deprecate._console.log || function() {};\n  return warn.apply(deprecate._console, arguments);\n};\ndeprecate._cache = {};\n\nexport default deprecate;\n","import _ from 'underscore';\n\n// Similar to `_.result`, this is a simple helper\n// If a function is provided we call it with context\n// otherwise just return the value. If the value is\n// undefined return a default value\nvar getValue = function(value, ...args) {\n  if (_.isFunction(value)) {\n    return value.apply(this, args);\n  }\n  return value;\n};\n\nexport default getValue;\n","import _ from 'underscore';\n\n// Internal utility for setting options consistently across Mn\nvar _setOptions = function(...args) {\n  this.options = _.extend({}, _.result(this, 'options'), ...args);\n};\n\nexport default _setOptions;\n","// Error\n// -----\n\nimport _      from 'underscore';\nimport extend from './utils/extend';\nimport {version} from '../package.json';\n\nvar errorProps = ['description', 'fileName', 'lineNumber', 'name', 'message', 'number'];\n\nvar MarionetteError = extend.call(Error, {\n  urlRoot: 'http://marionettejs.com/docs/v' + version + '/',\n\n  constructor: function MarionetteError(message, options) {\n    if (_.isObject(message)) {\n      options = message;\n      message = options.message;\n    } else if (!options) {\n      options = {};\n    }\n\n    var error = Error.call(this, message);\n    _.extend(this, _.pick(error, errorProps), _.pick(options, errorProps));\n\n    this.captureStackTrace();\n\n    if (options.url) {\n      this.url = this.urlRoot + options.url;\n    }\n  },\n\n  captureStackTrace: function() {\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, MarionetteError);\n    }\n  },\n\n  toString: function() {\n    return this.name + ': ' + this.message + (this.url ? ' See: ' + this.url : '');\n  }\n});\n\nMarionetteError.extend = extend;\n\nexport default MarionetteError;\n","import getOption                from '../utils/getOption';\nimport getValue                 from '../utils/getValue';\nimport mergeOptions             from '../utils/mergeOptions';\nimport normalizeMethods         from '../utils/normalizeMethods';\nimport _setOptions              from '../utils/_setOptions';\nimport {\n  bindEntityEvents,\n  unbindEntityEvents\n}                               from '../bind-entity-events';\n\nexport default {\n  getValue: getValue,\n\n  // Imports the \"normalizeMethods\" to transform hashes of\n  // events=>function references/names to a hash of events=>function references\n  normalizeMethods: normalizeMethods,\n\n  _setOptions: _setOptions,\n\n  // A handy way to merge passed-in options onto the instance\n  mergeOptions: mergeOptions,\n\n  // Enable getting options from this or this.options by name.\n  getOption: getOption,\n\n  // Enable binding view's events from another entity.\n  bindEntityEvents: bindEntityEvents,\n\n  // Enable unbinding view's events from another entity.\n  unbindEntityEvents: unbindEntityEvents\n};\n","import Radio from 'backbone.radio';\n\nimport {\n  bindRadioRequests,\n  unbindRadioRequests\n} from '../bind-radio-requests';\n\nimport {\n  bindEntityEvents as bindRadioEvents,\n  unbindEntityEvents as unbindRadioEvents\n} from '../bind-entity-events';\n\nexport default {\n\n  _initRadio: function() {\n    var channelName = this.getValue(this.getOption('channelName'));\n\n    if (!channelName) {\n      return;\n    }\n\n    var channel = this._channel = Radio.channel(channelName);\n\n    var radioEvents = this.getValue(this.getOption('radioEvents'));\n    this.bindRadioEvents(channel, radioEvents);\n\n    var radioRequests = this.getValue(this.getOption('radioRequests'));\n    this.bindRadioRequests(channel, radioRequests);\n\n    this.on('destroy', this._destroyRadio);\n  },\n\n  _destroyRadio: function() {\n    this._channel.stopReplying(null, null, this);\n  },\n\n  getChannel: function() {\n    return this._channel;\n  },\n\n  // Proxy `bindRadioEvents`\n  bindRadioEvents: bindRadioEvents,\n\n  // Proxy `unbindRadioEvents`\n  unbindRadioEvents: unbindRadioEvents,\n\n  // Proxy `bindRadioRequests`\n  bindRadioRequests: bindRadioRequests,\n\n  // Proxy `unbindRadioRequests`\n  unbindRadioRequests: unbindRadioRequests\n\n};\n","// Object\n// ------\n\nimport _ from 'underscore';\nimport Backbone from 'backbone';\nimport extend from './utils/extend';\nimport CommonMixin from './mixins/common';\nimport RadioMixin from './mixins/radio';\nimport { triggerMethod } from './trigger-method';\n\n// A Base Class that other Classes should descend from.\n// Object borrows many conventions and utilities from Backbone.\nvar MarionetteObject = function(options) {\n  this._setOptions(options);\n  this.cid = _.uniqueId(this.cidPrefix);\n  this._initRadio();\n  this.initialize.apply(this, arguments);\n};\n\nMarionetteObject.extend = extend;\n\n// Object Methods\n// --------------\n\n// Ensure it can trigger events with Backbone.Events\n_.extend(MarionetteObject.prototype, Backbone.Events, CommonMixin, RadioMixin, {\n  cidPrefix: 'mno',\n\n  // for parity with Marionette.AbstractView lifecyle\n  _isDestroyed: false,\n\n  isDestroyed: function() {\n    return this._isDestroyed;\n  },\n\n  //this is a noop method intended to be overridden by classes that extend from this base\n  initialize: function() {},\n\n  destroy: function(...args) {\n    if (this._isDestroyed) { return this; }\n\n    this.triggerMethod('before:destroy', ...args);\n\n    // mark as destroyed before doing the actual destroy, to\n    // prevent infinite loops within \"destroy\" event handlers\n    this._isDestroyed = true;\n    this.triggerMethod('destroy', ...args);\n    this.stopListening();\n\n    return this;\n  },\n\n  triggerMethod: triggerMethod\n});\n\nexport default MarionetteObject;\n","// Template Cache\n// --------------\n\nimport _               from 'underscore';\nimport Backbone        from 'backbone';\nimport MarionetteError from './error';\n\n// Manage templates stored in `<script>` blocks,\n// caching them for faster access.\nvar TemplateCache = function(templateId) {\n  this.templateId = templateId;\n};\n\n// TemplateCache object-level methods. Manage the template\n// caches from these method calls instead of creating\n// your own TemplateCache instances\n_.extend(TemplateCache, {\n  templateCaches: {},\n\n  // Get the specified template by id. Either\n  // retrieves the cached version, or loads it\n  // from the DOM.\n  get: function(templateId, options) {\n    var cachedTemplate = this.templateCaches[templateId];\n\n    if (!cachedTemplate) {\n      cachedTemplate = new TemplateCache(templateId);\n      this.templateCaches[templateId] = cachedTemplate;\n    }\n\n    return cachedTemplate.load(options);\n  },\n\n  // Clear templates from the cache. If no arguments\n  // are specified, clears all templates:\n  // `clear()`\n  //\n  // If arguments are specified, clears each of the\n  // specified templates from the cache:\n  // `clear(\"#t1\", \"#t2\", \"...\")`\n  clear: function(...args) {\n    var i;\n    var length = args.length;\n\n    if (length > 0) {\n      for (i = 0; i < length; i++) {\n        delete this.templateCaches[args[i]];\n      }\n    } else {\n      this.templateCaches = {};\n    }\n  }\n});\n\n// TemplateCache instance methods, allowing each\n// template cache object to manage its own state\n// and know whether or not it has been loaded\n_.extend(TemplateCache.prototype, {\n\n  // Internal method to load the template\n  load: function(options) {\n    // Guard clause to prevent loading this template more than once\n    if (this.compiledTemplate) {\n      return this.compiledTemplate;\n    }\n\n    // Load the template and compile it\n    var template = this.loadTemplate(this.templateId, options);\n    this.compiledTemplate = this.compileTemplate(template, options);\n\n    return this.compiledTemplate;\n  },\n\n  // Load a template from the DOM, by default. Override\n  // this method to provide your own template retrieval\n  // For asynchronous loading with AMD/RequireJS, consider\n  // using a template-loader plugin as described here:\n  // https://github.com/marionettejs/backbone.marionette/wiki/Using-marionette-with-requirejs\n  loadTemplate: function(templateId, options) {\n    var $template = Backbone.$(templateId);\n\n    if (!$template.length) {\n      throw new MarionetteError({\n        name: 'NoTemplateError',\n        message: 'Could not find template: \"' + templateId + '\"'\n      });\n    }\n    return $template.html();\n  },\n\n  // Pre-compile the template before caching it. Override\n  // this method if you do not need to pre-compile a template\n  // (JST / RequireJS for example) or if you want to change\n  // the template engine used (Handebars, etc).\n  compileTemplate: function(rawTemplate, options) {\n    return _.template(rawTemplate, options);\n  }\n});\n\nexport default TemplateCache;\n","// Renderer\n// --------\n\nimport _               from 'underscore';\nimport MarionetteError from './error';\nimport TemplateCache   from './template-cache';\n\n// Render a template with data by passing in the template\n// selector and the data to render.\nvar Renderer = {\n\n  // Render a template with data. The `template` parameter is\n  // passed to the `TemplateCache` object to retrieve the\n  // template function. Override this method to provide your own\n  // custom rendering and template handling for all of Marionette.\n  render: function(template, data) {\n    if (!template) {\n      throw new MarionetteError({\n        name: 'TemplateNotFoundError',\n        message: 'Cannot render the template since its false, null or undefined.'\n      });\n    }\n\n    var templateFunc = _.isFunction(template) ? template : TemplateCache.get(template);\n\n    return templateFunc(data);\n  }\n};\n\nexport default Renderer;\n","// Implementation of the invoke method (http://underscorejs.org/#invoke) with support for\n// lodash v3, v4, and underscore.js\nimport _ from 'underscore';\n\nexport default _.invokeMap || _.invoke;\n","import {\n  bindEntityEvents,\n  unbindEntityEvents\n} from '../bind-entity-events';\n\nexport default {\n  // Handle `modelEvents`, and `collectionEvents` configuration\n  _delegateEntityEvents: function(model, collection) {\n    this._undelegateEntityEvents(model, collection);\n\n    var modelEvents = this.getValue(this.getOption('modelEvents'));\n    bindEntityEvents.call(this, model, modelEvents);\n\n    var collectionEvents = this.getValue(this.getOption('collectionEvents'));\n    bindEntityEvents.call(this, collection, collectionEvents);\n  },\n\n  _undelegateEntityEvents: function(model, collection) {\n    var modelEvents = this.getValue(this.getOption('modelEvents'));\n    unbindEntityEvents.call(this, model, modelEvents);\n\n    var collectionEvents = this.getValue(this.getOption('collectionEvents'));\n    unbindEntityEvents.call(this, collection, collectionEvents);\n  }\n};\n","import _ from 'underscore';\n// allows for the use of the @ui. syntax within\n// a given key for triggers and events\n// swaps the @ui with the associated selector.\n// Returns a new, non-mutated, parsed events hash.\nvar normalizeUIKeys = function(hash, ui) {\n  return _.reduce(hash, function(memo, val, key) {\n    var normalizedKey = normalizeUIString(key, ui);\n    memo[normalizedKey] = val;\n    return memo;\n  }, {});\n};\n\n// utility method for parsing @ui. syntax strings\n// into associated selector\nvar normalizeUIString = function(uiString, ui) {\n  return uiString.replace(/@ui\\.[a-zA-Z_$0-9]*/g, function(r) {\n    return ui[r.slice(4)];\n  });\n};\n\n// allows for the use of the @ui. syntax within\n// a given value for regions\n// swaps the @ui with the associated selector\nvar normalizeUIValues = function(hash, ui, properties) {\n  _.each(hash, function(val, key) {\n    if (_.isString(val)) {\n      hash[key] = normalizeUIString(val, ui);\n    } else if (_.isObject(val) && _.isArray(properties)) {\n      _.extend(val, normalizeUIValues(_.pick(val, properties), ui));\n      /* Value is an object, and we got an array of embedded property names to normalize. */\n      _.each(properties, function(property) {\n        var propertyVal = val[property];\n        if (_.isString(propertyVal)) {\n          val[property] = normalizeUIString(propertyVal, ui);\n        }\n      });\n    }\n  });\n  return hash;\n};\n\nexport default {\n\n  // normalize the keys of passed hash with the views `ui` selectors.\n  // `{\"@ui.foo\": \"bar\"}`\n  normalizeUIKeys: function(hash) {\n    var uiBindings = this._getUIBindings();\n    return normalizeUIKeys(hash, uiBindings);\n  },\n\n  // normalize the values of passed hash with the views `ui` selectors.\n  // `{foo: \"@ui.bar\"}`\n  normalizeUIValues: function(hash, properties) {\n    var uiBindings = this._getUIBindings();\n    return normalizeUIValues(hash, uiBindings, properties);\n  },\n\n  _getUIBindings: function() {\n    var uiBindings = _.result(this, '_uiBindings');\n    var ui = _.result(this, 'ui');\n    return uiBindings || ui;\n  },\n\n  // This method binds the elements specified in the \"ui\" hash inside the view's code with\n  // the associated jQuery selectors.\n  _bindUIElements: function() {\n    if (!this.ui) { return; }\n\n    // store the ui hash in _uiBindings so they can be reset later\n    // and so re-rendering the view will be able to find the bindings\n    if (!this._uiBindings) {\n      this._uiBindings = this.ui;\n    }\n\n    // get the bindings result, as a function or otherwise\n    var bindings = _.result(this, '_uiBindings');\n\n    // empty the ui so we don't have anything to start with\n    this._ui = {};\n\n    // bind each of the selectors\n    _.each(bindings, (selector, key) => {\n      this._ui[key] = this.$(selector);\n    });\n\n    this.ui = this._ui;\n  },\n\n  _unbindUIElements: function() {\n    if (!this.ui || !this._uiBindings) { return; }\n\n    // delete all of the existing ui bindings\n    _.each(this.ui, ($el, name) => {\n      delete this.ui[name];\n    });\n\n    // reset the ui element to the original bindings configuration\n    this.ui = this._uiBindings;\n    delete this._uiBindings;\n    delete this._ui;\n  },\n\n  _getUI: function(name) {\n    return this._ui[name];\n  }\n};\n","// ViewMixin\n//  ---------\n\nimport Backbone from 'backbone';\nimport _ from 'underscore';\nimport MarionetteError from '../error';\nimport BehaviorsMixin from './behaviors';\nimport CommonMixin from './common';\nimport DelegateEntityEventsMixin from './delegate-entity-events';\nimport TriggersMixin from './triggers';\nimport UIMixin from './ui';\nimport View from '../view';\nimport { triggerMethod } from '../trigger-method';\n\nvar ViewMixin = {\n  supportsRenderLifecycle: true,\n  supportsDestroyLifecycle: true,\n\n  _isDestroyed: false,\n\n  isDestroyed: function() {\n    return !!this._isDestroyed;\n  },\n\n  _isRendered: false,\n\n  isRendered: function() {\n    return !!this._isRendered;\n  },\n\n  _isAttached: false,\n\n  isAttached() {\n    return !!this._isAttached;\n  },\n\n  // Mix in template context methods. Looks for a\n  // `templateContext` attribute, which can either be an\n  // object literal, or a function that returns an object\n  // literal. All methods and attributes from this object\n  // are copies to the object passed in.\n  mixinTemplateContext: function(target = {}) {\n    const templateContext = this.getValue(this.getOption('templateContext'));\n    return _.extend(target, templateContext);\n  },\n\n  // Overriding Backbone.View's `delegateEvents` to handle\n  // `events` and `triggers`\n  delegateEvents: function(eventsArg) {\n\n    this._proxyBehaviorViewProperties();\n    this._buildEventProxies();\n\n    const viewEvents = this._getEvents(eventsArg);\n\n    if (typeof eventsArg === 'undefined') {\n      this.events = viewEvents;\n    }\n\n    const combinedEvents = _.extend({},\n      this._getBehaviorEvents(),\n      viewEvents,\n      this._getBehaviorTriggers(),\n      this.getTriggers()\n    );\n\n    Backbone.View.prototype.delegateEvents.call(this, combinedEvents);\n\n    return this;\n  },\n\n  _getEvents: function(eventsArg) {\n    const events = this.getValue(eventsArg || this.events);\n\n    return this.normalizeUIKeys(events);\n  },\n\n  // Configure `triggers` to forward DOM events to view\n  // events. `triggers: {\"click .foo\": \"do:foo\"}`\n  getTriggers: function() {\n    if (!this.triggers) { return; }\n\n    // Allow `triggers` to be configured as a function\n    const triggers = this.normalizeUIKeys(_.result(this, 'triggers'));\n\n    // Configure the triggers, prevent default\n    // action and stop propagation of DOM events\n    return this._getViewTriggers(this, triggers);\n  },\n\n  // Handle `modelEvents`, and `collectionEvents` configuration\n  delegateEntityEvents: function() {\n    this._delegateEntityEvents(this.model, this.collection);\n\n    // bind each behaviors model and collection events\n    this._delegateBehaviorEntityEvents();\n\n    return this;\n  },\n\n  // Handle unbinding `modelEvents`, and `collectionEvents` configuration\n  undelegateEntityEvents: function() {\n    this._undelegateEntityEvents(this.model, this.collection);\n\n    // unbind each behaviors model and collection events\n    this._undelegateBehaviorEntityEvents();\n\n    return this;\n  },\n\n  // Internal helper method to verify whether the view hasn't been destroyed\n  _ensureViewIsIntact: function() {\n    if (this._isDestroyed) {\n      throw new MarionetteError({\n        name: 'ViewDestroyedError',\n        message: 'View (cid: \"' + this.cid + '\") has already been destroyed and cannot be used.'\n      });\n    }\n  },\n\n  // Handle destroying the view and its children.\n  destroy: function(...args) {\n    if (this._isDestroyed) { return this; }\n    const shouldTriggerDetach = !!this._isAttached;\n\n    this.triggerMethod('before:destroy', ...args);\n    if (shouldTriggerDetach) {\n      this.triggerMethod('before:detach', this);\n    }\n\n    // unbind UI elements\n    this.unbindUIElements();\n\n    // remove the view from the DOM\n    // https://github.com/jashkenas/backbone/blob/1.2.3/backbone.js#L1235\n    this._removeElement();\n\n    if (shouldTriggerDetach) {\n      this._isAttached = false;\n      this.triggerMethod('detach', this);\n    }\n\n    // remove children after the remove to prevent extra paints\n    this._removeChildren();\n\n    this._destroyBehaviors(args);\n\n    this._isDestroyed = true;\n    this._isRendered = false;\n    this.triggerMethod('destroy', ...args);\n\n    this.stopListening();\n\n    return this;\n  },\n\n  bindUIElements: function() {\n    this._bindUIElements();\n    this._bindBehaviorUIElements();\n\n    return this;\n  },\n\n  // This method unbinds the elements specified in the \"ui\" hash\n  unbindUIElements: function() {\n    this._unbindUIElements();\n    this._unbindBehaviorUIElements();\n\n    return this;\n  },\n\n  getUI: function(name) {\n    this._ensureViewIsIntact();\n    return this._getUI(name);\n  },\n\n  // used as the prefix for child view events\n  // that are forwarded through the layoutview\n  childViewEventPrefix: 'childview',\n\n  // import the `triggerMethod` to trigger events with corresponding\n  // methods if the method exists\n  triggerMethod: function(...args) {\n    const ret = triggerMethod.apply(this, args);\n\n    this._triggerEventOnBehaviors(...args);\n    this._triggerEventOnParentLayout(...args);\n\n    return ret;\n  },\n\n  // Cache `childViewEvents` and `childViewTriggers`\n  _buildEventProxies: function() {\n    this._childViewEvents = this.getValue(this.getOption('childViewEvents'));\n    this._childViewTriggers = this.getValue(this.getOption('childViewTriggers'));\n  },\n\n  _triggerEventOnParentLayout: function(eventName, ...args) {\n    const layoutView = this._parentView();\n    if (!layoutView) {\n      return;\n    }\n\n    // invoke triggerMethod on parent view\n    const eventPrefix = layoutView.getOption('childViewEventPrefix');\n    const prefixedEventName = eventPrefix + ':' + eventName;\n\n    layoutView.triggerMethod(prefixedEventName, ...args);\n\n    // use the parent view's childViewEvents handler\n    const childViewEvents = layoutView.normalizeMethods(layoutView._childViewEvents);\n\n    if (!!childViewEvents && _.isFunction(childViewEvents[eventName])) {\n      childViewEvents[eventName].apply(layoutView, args);\n    }\n\n    // use the parent view's proxyEvent handlers\n    const childViewTriggers = layoutView._childViewTriggers;\n\n    // Call the event with the proxy name on the parent layout\n    if (childViewTriggers && _.isString(childViewTriggers[eventName])) {\n      layoutView.triggerMethod(childViewTriggers[eventName], ...args);\n    }\n  },\n\n  // Walk the _parent tree until we find a view (if one exists).\n  // Returns the parent view hierarchically closest to this view.\n  _parentView: function() {\n    let parent = this._parent;\n\n    while (parent) {\n      if (parent instanceof View) {\n        return parent;\n      }\n      parent = parent._parent;\n    }\n  }\n};\n\n_.extend(ViewMixin, BehaviorsMixin, CommonMixin, DelegateEntityEventsMixin, TriggersMixin,  UIMixin);\n\nexport default ViewMixin;\n","// Region\n// ------\n\nimport _ from 'underscore';\nimport Backbone from 'backbone';\nimport isNodeAttached from './utils/isNodeAttached';\nimport MarionetteObject from './object';\nimport MarionetteError from './error';\nimport monitorViewEvents from './monitor-view-events';\nimport destroyBackboneView from './utils/destroyBackboneView';\nimport { triggerMethodOn } from './trigger-method';\n\nconst Region = MarionetteObject.extend({\n  cidPrefix: 'mnr',\n  replaceElement: false,\n  _isReplaced: false,\n\n  constructor(options) {\n    this._setOptions(options);\n    this._initEl = this.el = this.getOption('el');\n\n    // Handle when this.el is passed in as a $ wrapped element.\n    this.el = this.el instanceof Backbone.$ ? this.el[0] : this.el;\n\n    if (!this.el) {\n      throw new MarionetteError({\n        name: 'NoElError',\n        message: 'An \"el\" must be specified for a region.'\n      });\n    }\n\n    this.$el = this.getEl(this.el);\n    MarionetteObject.call(this, options);\n  },\n\n  // Displays a backbone view instance inside of the region. Handles calling the `render`\n  // method for you. Reads content directly from the `el` attribute. The `preventDestroy`\n  // option can be used to prevent a view from the old view being destroyed on show.\n  show(view, options) {\n    if (!this._ensureElement(options)) {\n      return;\n    }\n    this._ensureView(view);\n    if (view === this.currentView) { return this; }\n\n    this.triggerMethod('before:show', this, view, options);\n\n    monitorViewEvents(view);\n\n    this.empty(options);\n\n    // We need to listen for if a view is destroyed in a way other than through the region.\n    // If this happens we need to remove the reference to the currentView since once a view\n    // has been destroyed we can not reuse it.\n    view.on('destroy', this.empty, this);\n\n    // Make this region the view's parent.\n    // It's important that this parent binding happens before rendering so that any events\n    // the child may trigger during render can also be triggered on the child's ancestor views.\n    view._parent = this;\n\n    this._renderView(view);\n\n    this._attachView(view, options);\n\n    this.triggerMethod('show', this, view, options);\n    return this;\n  },\n\n  _renderView(view) {\n    if (view._isRendered) {\n      return;\n    }\n\n    if (!view.supportsRenderLifecycle) {\n      triggerMethodOn(view, 'before:render', view);\n    }\n\n    view.render();\n\n    if (!view.supportsRenderLifecycle) {\n      view._isRendered = true;\n      triggerMethodOn(view, 'render', view);\n    }\n  },\n\n  _attachView(view, options = {}) {\n    const shouldTriggerAttach = !view._isAttached && isNodeAttached(this.el);\n    const shouldReplaceEl = typeof options.replaceElement === 'undefined' ? !!this.getOption('replaceElement') : !!options.replaceElement;\n\n    if (shouldTriggerAttach) {\n      triggerMethodOn(view, 'before:attach', view);\n    }\n\n    this.attachHtml(view, shouldReplaceEl);\n\n    if (shouldTriggerAttach) {\n      view._isAttached = true;\n      triggerMethodOn(view, 'attach', view);\n    }\n\n    this.currentView = view;\n  },\n\n  _ensureElement(options = {}) {\n    if (!_.isObject(this.el)) {\n      this.$el = this.getEl(this.el);\n      this.el = this.$el[0];\n    }\n\n    if (!this.$el || this.$el.length === 0) {\n      const allowMissingEl = typeof options.allowMissingEl === 'undefined' ? !!this.getOption('allowMissingEl') : !!options.allowMissingEl;\n\n      if (allowMissingEl) {\n        return false;\n      } else {\n        throw new MarionetteError(`An \"el\" must exist in DOM for this region ${this.cid}`);\n      }\n    }\n    return true;\n  },\n\n  _ensureView(view) {\n    if (!view) {\n      throw new MarionetteError({\n        name: 'ViewNotValid',\n        message: 'The view passed is undefined and therefore invalid. You must pass a view instance to show.'\n      });\n    }\n\n    if (view._isDestroyed) {\n      throw new MarionetteError({\n        name: 'ViewDestroyedError',\n        message: 'View (cid: \"' + view.cid + '\") has already been destroyed and cannot be used.'\n      });\n    }\n  },\n\n  // Override this method to change how the region finds the DOM element that it manages. Return\n  // a jQuery selector object scoped to a provided parent el or the document if none exists.\n  getEl(el) {\n    return Backbone.$(el, this.getValue(this.getOption('parentEl')));\n  },\n\n  _replaceEl(view) {\n    // always restore the el to ensure the regions el is present before replacing\n    this._restoreEl();\n\n    const parent = this.el.parentNode;\n\n    parent.replaceChild(view.el, this.el);\n    this._isReplaced = true;\n  },\n\n  // Restore the region's element in the DOM.\n  _restoreEl() {\n    if (!this.currentView) {\n      return;\n    }\n\n    const view = this.currentView;\n    const parent = view.el.parentNode;\n\n    if (!parent) {\n      return;\n    }\n\n    parent.replaceChild(this.el, view.el);\n    this._isReplaced = false;\n  },\n\n  isReplaced() {\n    return !!this._isReplaced;\n  },\n\n  // Override this method to change how the new view is appended to the `$el` that the\n  // region is managing\n  attachHtml(view, shouldReplace) {\n    if (shouldReplace) {\n      // replace the region's node with the view's node\n      this._replaceEl(view);\n    } else {\n      this.el.appendChild(view.el);\n    }\n  },\n\n  // Destroy the current view, if there is one. If there is no current view, it does\n  // nothing and returns immediately.\n  empty(options) {\n    const view = this.currentView;\n\n    // If there is no view in the region we should not remove anything\n    if (!view) { return this; }\n\n    view.off('destroy', this.empty, this);\n    this.triggerMethod('before:empty', this, view);\n\n    if (this._isReplaced) {\n      this._restoreEl();\n    }\n\n    if (!view._isDestroyed) {\n      this._removeView(view, options);\n    }\n\n    delete this.currentView._parent;\n    delete this.currentView;\n\n    this.triggerMethod('empty', this, view);\n    return this;\n  },\n\n  _removeView(view, {preventDestroy} = {}) {\n    const shouldPreventDestroy = !!preventDestroy;\n\n    if (shouldPreventDestroy) {\n      this._detachView(view);\n      return;\n    }\n\n    if (view.destroy) {\n      view.destroy();\n    } else {\n      destroyBackboneView(view);\n    }\n  },\n\n  _detachView(view) {\n    const shouldTriggerDetach = !!view._isAttached;\n\n    if (shouldTriggerDetach) {\n      triggerMethodOn(view, 'before:detach', view);\n    }\n\n    this.$el.contents().detach();\n\n    if (shouldTriggerDetach) {\n      view._isAttached = false;\n      triggerMethodOn(view, 'detach', view);\n    }\n  },\n\n  // Checks whether a view is currently present within the region. Returns `true` if there is\n  // and `false` if no view is present.\n  hasView() {\n    return !!this.currentView;\n  },\n\n  // Reset the region by destroying any existing view and clearing out the cached `$el`.\n  // The next time a view is shown via this region, the region will re-query the DOM for\n  // the region's `el`.\n  reset() {\n    this.empty();\n\n    if (this.$el) {\n      this.el = this._initEl;\n    }\n\n    delete this.$el;\n    return this;\n  },\n\n  destroy: function() {\n    this.reset();\n    return MarionetteObject.prototype.destroy.apply(this, arguments);\n  }\n});\n\nexport default Region;\n","import _                    from 'underscore';\nimport _invoke              from '../utils/_invoke';\nimport Region               from '../region';\nimport MarionetteError      from '../error';\n\nexport default {\n  regionClass: Region,\n\n  // Internal method to initialize the regions that have been defined in a\n  // `regions` attribute on this View.\n  _initRegions: function() {\n\n    // init regions hash\n    this.regions =  this.regions || {};\n    this._regions = {};\n\n    this.addRegions(this.getValue(this.getOption('regions')));\n  },\n\n  // Internal method to re-initialize all of the regions by updating\n  // the `el` that they point to\n  _reInitRegions: function() {\n    _invoke(this._regions, 'reset');\n  },\n\n  // Add a single region, by name, to the View\n  addRegion: function(name, definition) {\n    var regions = {};\n    regions[name] = definition;\n    return this.addRegions(regions)[name];\n  },\n\n  // Add multiple regions as a {name: definition, name2: def2} object literal\n  addRegions: function(regions) {\n    // If there's nothing to add, stop here.\n    if (_.isEmpty(regions)) {\n      return;\n    }\n\n    // Normalize region selectors hash to allow\n    // a user to use the @ui. syntax.\n    regions = this.normalizeUIValues(regions, ['selector', 'el']);\n\n    // Add the regions definitions to the regions property\n    this.regions = _.extend({}, this.regions, regions);\n\n    return this._addRegions(regions);\n  },\n\n  // internal method to build and add regions\n  _addRegions: function(regionDefinitions) {\n    return _.reduce(regionDefinitions, (regions, definition, name) => {\n      regions[name] = this._buildRegion(definition);\n      this._addRegion(regions[name], name);\n      return regions;\n    }, {});\n  },\n\n  // return the region instance from the definition\n  _buildRegion: function(definition) {\n    if (definition instanceof Region) {\n      return definition;\n    }\n\n    return this._buildRegionFromDefinition(definition);\n  },\n\n  _buildRegionFromDefinition: function(definition) {\n    if (_.isString(definition)) {\n      return this._buildRegionFromObject({el: definition});\n    }\n\n    if (_.isFunction(definition)) {\n      return this._buildRegionFromRegionClass(definition);\n    }\n\n    if (_.isObject(definition)) {\n      return this._buildRegionFromObject(definition);\n    }\n\n    throw new MarionetteError({\n      message: 'Improper region configuration type.',\n      url: 'marionette.region.html#region-configuration-types'\n    });\n  },\n\n  _buildRegionFromObject: function(definition) {\n    var RegionClass = definition.regionClass || this.getOption('regionClass');\n\n    var options = _.omit(definition, 'regionClass');\n\n    _.defaults(options, {\n      el: definition.selector,\n      parentEl: _.partial(_.result, this, 'el')\n    });\n\n    return new RegionClass(options);\n  },\n\n  // Build the region directly from a given `RegionClass`\n  _buildRegionFromRegionClass: function(RegionClass) {\n    return new RegionClass({\n      parentEl: _.partial(_.result, this, 'el')\n    });\n  },\n\n  _addRegion: function(region, name) {\n    this.triggerMethod('before:add:region', name, region);\n\n    region._parent = this;\n\n    this._regions[name] = region;\n\n    this.triggerMethod('add:region', name, region);\n  },\n\n  // Remove a single region from the View, by name\n  removeRegion: function(name) {\n    var region = this._regions[name];\n\n    this._removeRegion(region, name);\n\n    return region;\n  },\n\n  // Remove all regions from the View\n  removeRegions: function() {\n    var regions = this.getRegions();\n\n    _.each(this._regions, _.bind(this._removeRegion, this));\n\n    return regions;\n  },\n\n  _removeRegion: function(region, name) {\n    this.triggerMethod('before:remove:region', name, region);\n\n    region.empty();\n    region.stopListening();\n\n    delete this.regions[name];\n    delete this._regions[name];\n\n    this.triggerMethod('remove:region', name, region);\n  },\n\n  // Empty all regions in the region manager, but\n  // leave them attached\n  emptyRegions: function() {\n    var regions = this.getRegions();\n    _invoke(regions, 'empty');\n    return regions;\n  },\n\n  // Checks to see if view contains region\n  // Accepts the region name\n  // hasRegion('main')\n  hasRegion: function(name) {\n    return !!this.getRegion(name);\n  },\n\n  // Provides access to regions\n  // Accepts the region name\n  // getRegion('main')\n  getRegion: function(name) {\n    return this._regions[name];\n  },\n\n  // Get all regions\n  getRegions: function() {\n    return _.clone(this._regions);\n  },\n\n  showChildView: function(name, view, ...args) {\n    var region = this.getRegion(name);\n    return region.show(view, ...args);\n  },\n\n  getChildView: function(name) {\n    return this.getRegion(name).currentView;\n  }\n\n};\n","// View\n// ---------\n\nimport _                  from 'underscore';\nimport Backbone           from 'backbone';\nimport ViewMixin          from './mixins/view';\nimport RegionsMixin       from './mixins/regions';\nimport monitorViewEvents  from './monitor-view-events';\nimport Renderer           from './renderer';\n\n// The standard view. Includes view events, automatic rendering\n// of Underscore templates, nested views, and more.\nconst View = Backbone.View.extend({\n\n  constructor(options) {\n    this.render = _.bind(this.render, this);\n\n    this._setOptions(options);\n\n    monitorViewEvents(this);\n\n    this._initBehaviors();\n    this._initRegions();\n\n    Backbone.View.prototype.constructor.call(this, this.options);\n\n    this.delegateEntityEvents();\n  },\n\n  // Serialize the view's model *or* collection, if\n  // it exists, for the template\n  serializeData() {\n    if (!this.model && !this.collection) {\n      return {};\n    }\n\n    // If we have a model, we serialize that\n    if (this.model) {\n      return this.serializeModel();\n    }\n\n    // Otherwise, we serialize the collection,\n    // making it available under the `items` property\n    return {\n      items: this.serializeCollection()\n    };\n  },\n\n  // Prepares the special `model` property of a view\n  // for being displayed in the template. By default\n  // we simply clone the attributes. Override this if\n  // you need a custom transformation for your view's model\n  serializeModel() {\n    if (!this.model) { return {}; }\n    return _.clone(this.model.attributes);\n  },\n\n  // Serialize a collection by cloning each of\n  // its model's attributes\n  serializeCollection() {\n    if (!this.collection) { return {}; }\n    return this.collection.map(function(model) { return _.clone(model.attributes); });\n  },\n\n  // Render the view, defaulting to underscore.js templates.\n  // You can override this in your view definition to provide\n  // a very specific rendering for your view. In general, though,\n  // you should override the `Marionette.Renderer` object to\n  // change how Marionette renders views.\n  // Subsequent renders after the first will re-render all nested\n  // views.\n  render() {\n    this._ensureViewIsIntact();\n\n    this.triggerMethod('before:render', this);\n\n    // If this is not the first render call, then we need to\n    // re-initialize the `el` for each region\n    if (this._isRendered) {\n      this._reInitRegions();\n    }\n\n    this._renderTemplate();\n    this.bindUIElements();\n\n    this._isRendered = true;\n    this.triggerMethod('render', this);\n\n    return this;\n  },\n\n  // Internal method to render the template with the serialized data\n  // and template context via the `Marionette.Renderer` object.\n  _renderTemplate() {\n    const template = this.getTemplate();\n\n    // Allow template-less views\n    if (template === false) {\n      return;\n    }\n\n    // Add in entity data and template context\n    const data = this.mixinTemplateContext(this.serializeData());\n\n    // Render and add to el\n    const html = Renderer.render(template, data, this);\n    this.attachElContent(html);\n  },\n\n  // Get the template for this view\n  // instance. You can set a `template` attribute in the view\n  // definition or pass a `template: \"whatever\"` parameter in\n  // to the constructor options.\n  getTemplate() {\n    return this.getOption('template');\n  },\n\n  // Attaches the content of a given view.\n  // This method can be overridden to optimize rendering,\n  // or to render in a non standard way.\n  //\n  // For example, using `innerHTML` instead of `$el.html`\n  //\n  // ```js\n  // attachElContent(html) {\n  //   this.el.innerHTML = html;\n  //   return this;\n  // }\n  // ```\n  attachElContent(html) {\n    this.$el.html(html);\n\n    return this;\n  },\n\n  // called by ViewMixin destroy\n  _removeChildren() {\n    this.removeRegions();\n  },\n\n  _getImmediateChildren: function() {\n    return _.chain(this.getRegions())\n      .map('currentView')\n      .compact()\n      .value();\n  }\n});\n\n_.extend(View.prototype, ViewMixin, RegionsMixin);\n\nexport default View;\n","// Collection View\n// ---------------\n\nimport _                  from 'underscore';\nimport Backbone           from 'backbone';\nimport ChildViewContainer from 'backbone.babysitter';\nimport MarionetteError    from './error';\nimport ViewMixin          from './mixins/view';\nimport monitorViewEvents  from './monitor-view-events';\nimport destroyBackboneView from './utils/destroyBackboneView';\nimport { triggerMethodOn } from './trigger-method';\n\n// A view that iterates over a Backbone.Collection\n// and renders an individual child view for each model.\nconst CollectionView = Backbone.View.extend({\n\n  // flag for maintaining the sorted order of the collection\n  sort: true,\n\n  // constructor\n  // option to pass `{sort: false}` to prevent the `CollectionView` from\n  // maintaining the sorted order of the collection.\n  // This will fallback onto appending childView's to the end.\n  //\n  // option to pass `{comparator: compFunction()}` to allow the `CollectionView`\n  // to use a custom sort order for the collection.\n  constructor(options) {\n    this.render = _.bind(this.render, this);\n\n    this._setOptions(options);\n\n    monitorViewEvents(this);\n\n    this._initBehaviors();\n    this.once('render', this._initialEvents);\n    this._initChildViewStorage();\n    this._bufferedChildren = [];\n\n    Backbone.View.prototype.constructor.call(this, this.options);\n\n    this.delegateEntityEvents();\n  },\n\n  // Instead of inserting elements one by one into the page, it's much more performant to insert\n  // elements into a document fragment and then insert that document fragment into the page\n  _startBuffering() {\n    this._isBuffering = true;\n  },\n\n  _endBuffering() {\n    const shouldTriggerAttach = !!this._isAttached;\n    const triggerOnChildren = shouldTriggerAttach ? this._getImmediateChildren() : [];\n\n    this._isBuffering = false;\n\n    _.each(triggerOnChildren, child => {\n      triggerMethodOn(child, 'before:attach', child);\n    });\n\n    this.attachBuffer(this, this._createBuffer());\n\n    _.each(triggerOnChildren, child => {\n      child._isAttached = true;\n      triggerMethodOn(child, 'attach', child);\n    });\n\n    this._bufferedChildren = [];\n  },\n\n  // Configured the initial events that the collection view binds to.\n  _initialEvents() {\n    if (this.collection) {\n      this.listenTo(this.collection, 'add', this._onCollectionAdd);\n      this.listenTo(this.collection, 'remove', this._onCollectionRemove);\n      this.listenTo(this.collection, 'reset', this.render);\n\n      if (this.getOption('sort')) {\n        this.listenTo(this.collection, 'sort', this._sortViews);\n      }\n    }\n  },\n\n  // Handle a child added to the collection\n  _onCollectionAdd(child, collection, opts) {\n    // `index` is present when adding with `at` since BB 1.2; indexOf fallback for < 1.2\n    let index = opts.at !== undefined && (opts.index || collection.indexOf(child));\n\n    // When filtered or when there is no initial index, calculate index.\n    if (this.getOption('filter') || index === false) {\n      index = _.indexOf(this._filteredSortedModels(index), child);\n    }\n\n    if (this._shouldAddChild(child, index)) {\n      this._destroyEmptyView();\n      const ChildView = this._getChildView(child);\n      this._addChild(child, ChildView, index);\n    }\n  },\n\n  // get the child view by model it holds, and remove it\n  _onCollectionRemove(model) {\n    const view = this.children.findByModel(model);\n    this._removeChildView(view);\n    this._checkEmpty();\n  },\n\n  // Render children views. Override this method to provide your own implementation of a\n  // render function for the collection view.\n  render() {\n    this._ensureViewIsIntact();\n    this.triggerMethod('before:render', this);\n    this._renderChildren();\n    this._isRendered = true;\n    this.triggerMethod('render', this);\n    return this;\n  },\n\n  // An efficient rendering used for filtering. Instead of modifying the whole DOM for the\n  // collection view, we are only adding or removing the related childrenViews.\n  setFilter(filter, {preventRender} = {}) {\n    const canBeRendered = this._isRendered && !this._isDestroyed;\n    const filterChanged = this.filter !== filter;\n    const shouldRender = canBeRendered && filterChanged && !preventRender;\n\n    if (shouldRender) {\n      this.triggerMethod('before:apply:filter', this);\n      const previousModels = this._filteredSortedModels();\n      this.filter = filter;\n      const models = this._filteredSortedModels();\n      this._applyModelDeltas(models, previousModels);\n      this.triggerMethod('apply:filter', this);\n    } else {\n      this.filter = filter;\n    }\n  },\n\n  // `removeFilter` is actually an alias for removing filters.\n  removeFilter(options) {\n    this.setFilter(null, options);\n  },\n\n  // Calculate and apply difference by cid between `models` and `previousModels`.\n  _applyModelDeltas(models, previousModels) {\n    const currentIds = {};\n    _.each(models, (model, index) => {\n      const addedChildNotExists = !this.children.findByModel(model);\n      if (addedChildNotExists) {\n        this._onCollectionAdd(model, this.collection, {at: index});\n      }\n      currentIds[model.cid] = true;\n    });\n    _.each(previousModels, (prevModel) => {\n      const removedChildExists = !currentIds[prevModel.cid] && this.children.findByModel(prevModel);\n      if (removedChildExists) {\n        this._onCollectionRemove(prevModel);\n      }\n    });\n  },\n\n  // Reorder DOM after sorting. When your element's rendering do not use their index,\n  // you can pass reorderOnSort: true to only reorder the DOM after a sort instead of\n  // rendering all the collectionView.\n  reorder() {\n    const children = this.children;\n    const models = this._filteredSortedModels();\n    const anyModelsAdded = _.some(models, function(model) {\n      return !children.findByModel(model);\n    });\n\n    // If there are any new models added due to filtering we need to add child views,\n    // so render as normal.\n    if (anyModelsAdded) {\n      this.render();\n    } else {\n      // Get the DOM nodes in the same order as the models.\n      const elsToReorder = _.map(models, function(model, index) {\n        const view = children.findByModel(model);\n        view._index = index;\n        return view.el;\n      });\n\n      // Find the views that were children before but aren't in this new ordering.\n      const filteredOutViews = children.filter(function(view) {\n        return !_.contains(elsToReorder, view.el);\n      });\n\n      this.triggerMethod('before:reorder', this);\n\n      // Since append moves elements that are already in the DOM, appending the elements\n      // will effectively reorder them.\n      this._appendReorderedChildren(elsToReorder);\n\n      // remove any views that have been filtered out\n      _.each(filteredOutViews, _.bind(this._removeChildView, this));\n      this._checkEmpty();\n\n      this.triggerMethod('reorder', this);\n    }\n  },\n\n  // Render view after sorting. Override this method to change how the view renders\n  // after a `sort` on the collection.\n  resortView() {\n    if (this.getOption('reorderOnSort')) {\n      this.reorder();\n    } else {\n      this._renderChildren();\n    }\n  },\n\n  // Internal method. This checks for any changes in the order of the collection.\n  // If the index of any view doesn't match, it will render.\n  _sortViews() {\n    const models = this._filteredSortedModels();\n\n    // check for any changes in sort order of views\n    const orderChanged = _.find(models, (item, index) => {\n      const view = this.children.findByModel(item);\n      return !view || view._index !== index;\n    });\n\n    if (orderChanged) {\n      this.resortView();\n    }\n  },\n\n  // Internal reference to what index a `emptyView` is.\n  _emptyViewIndex: -1,\n\n  // Internal method. Separated so that CompositeView can append to the childViewContainer\n  // if necessary\n  _appendReorderedChildren(children) {\n    this.$el.append(children);\n  },\n\n  // Internal method. Separated so that CompositeView can have more control over events\n  // being triggered, around the rendering process\n  _renderChildren() {\n    this._destroyEmptyView();\n    this._destroyChildren({checkEmpty: false});\n\n    const models = this._filteredSortedModels();\n    if (this.isEmpty({processedModels: models})) {\n      this._showEmptyView();\n    } else {\n      this.triggerMethod('before:render:children', this);\n      this._startBuffering();\n      this._showCollection(models);\n      this._endBuffering();\n      this.triggerMethod('render:children', this);\n    }\n  },\n\n  // Internal method to loop through collection and show each child view.\n  _showCollection(models) {\n    _.each(models, (child, index) => {\n      const ChildView = this._getChildView(child);\n      this._addChild(child, ChildView, index);\n    });\n  },\n\n  // Allow the collection to be sorted by a custom view comparator\n  _filteredSortedModels(addedAt) {\n    if (!this.collection) { return []; }\n\n    const viewComparator = this.getViewComparator();\n    let models = this.collection.models;\n    addedAt = Math.min(Math.max(addedAt, 0), models.length - 1);\n\n    if (viewComparator) {\n      let addedModel;\n      // Preserve `at` location, even for a sorted view\n      if (addedAt) {\n        addedModel = models[addedAt];\n        models = models.slice(0, addedAt).concat(models.slice(addedAt + 1));\n      }\n      models = this._sortModelsBy(models, viewComparator);\n      if (addedModel) {\n        models.splice(addedAt, 0, addedModel);\n      }\n    }\n\n    // Filter after sorting in case the filter uses the index\n    models = this._filterModels(models);\n\n    return models;\n  },\n\n  // Filter an array of models, if a filter exists\n  _filterModels(models) {\n    if (this.getOption('filter')) {\n      models = _.filter(models, (model, index) => {\n        return this._shouldAddChild(model, index);\n      });\n    }\n    return models;\n  },\n\n  _sortModelsBy(models, comparator) {\n    if (typeof comparator === 'string') {\n      return _.sortBy(models, function(model) {\n        return model.get(comparator);\n      });\n    } else if (comparator.length === 1) {\n      return _.sortBy(models, _.bind(comparator, this));\n    } else {\n      return models.sort(_.bind(comparator, this));\n    }\n  },\n\n  // Internal method to show an empty view in place of a collection of child views,\n  // when the collection is empty\n  _showEmptyView() {\n    const EmptyView = this.getEmptyView();\n\n    if (EmptyView && !this._showingEmptyView) {\n      this._showingEmptyView = true;\n\n      const model = new Backbone.Model();\n      let emptyViewOptions =\n        this.getOption('emptyViewOptions') || this.getOption('childViewOptions');\n      if (_.isFunction(emptyViewOptions)) {\n        emptyViewOptions = emptyViewOptions.call(this, model, this._emptyViewIndex);\n      }\n\n      const view = this._buildChildView(model, EmptyView, emptyViewOptions);\n\n      this.triggerMethod('before:render:empty', this, view);\n      this._addChildView(view, 0);\n      this.triggerMethod('render:empty', this, view);\n\n      view._parent = this;\n    }\n  },\n\n  // Internal method to destroy an existing emptyView instance if one exists. Called when\n  // a collection view has been rendered empty, and then a child is added to the collection.\n  _destroyEmptyView() {\n    if (this._showingEmptyView) {\n      this.triggerMethod('before:remove:empty', this);\n\n      this._destroyChildren();\n      delete this._showingEmptyView;\n\n      this.triggerMethod('remove:empty', this);\n    }\n  },\n\n  // Retrieve the empty view class\n  getEmptyView() {\n    return this.getOption('emptyView');\n  },\n\n  // Retrieve the `childView` class, either from `this.options.childView` or from\n  // the `childView` in the object definition. The \"options\" takes precedence.\n  // The `childView` property can be either a view class or a function that\n  // returns a view class. If it is a function, it will receive the model that\n  // will be passed to the view instance (created from the returned view class)\n  _getChildView(child) {\n    const childView = this.getOption('childView');\n\n    if (!childView) {\n      throw new MarionetteError({\n        name: 'NoChildViewError',\n        message: 'A \"childView\" must be specified'\n      });\n    }\n\n    // first check if the `childView` is a view class (the common case)\n    // then check if it's a function (which we assume that returns a view class)\n    if (childView.prototype instanceof Backbone.View || childView === Backbone.View) {\n      return childView;\n    } else if (_.isFunction(childView)) {\n      return childView.call(this, child);\n    } else {\n      throw new MarionetteError({\n        name: 'InvalidChildViewError',\n        message: '\"childView\" must be a view class or a function that returns a view class'\n      });\n    }\n  },\n\n  // Render the child's view and add it to the HTML for the collection view at a given index.\n  // This will also update the indices of later views in the collection in order to keep the\n  // children in sync with the collection.\n  _addChild(child, ChildView, index) {\n    const childViewOptions = this.getValue(this.getOption('childViewOptions'), child, index);\n\n    const view = this._buildChildView(child, ChildView, childViewOptions);\n\n    // increment indices of views after this one\n    this._updateIndices(view, true, index);\n\n    this.triggerMethod('before:add:child', this, view);\n    this._addChildView(view, index);\n    this.triggerMethod('add:child', this, view);\n\n    view._parent = this;\n\n    return view;\n  },\n\n  // Internal method. This decrements or increments the indices of views after the added/removed\n  // view to keep in sync with the collection.\n  _updateIndices(view, increment, index) {\n    if (!this.getOption('sort')) {\n      return;\n    }\n\n    if (increment) {\n      // assign the index to the view\n      view._index = index;\n    }\n\n    // update the indexes of views after this one\n    this.children.each(function(laterView) {\n      if (laterView._index >= view._index) {\n        laterView._index += increment ? 1 : -1;\n      }\n    });\n  },\n\n  // Internal Method. Add the view to children and render it at the given index.\n  _addChildView(view, index) {\n    // Only trigger attach if already attached and not buffering,\n    // otherwise _endBuffering() or Region#show() handles this.\n    const shouldTriggerAttach = !this._isBuffering && this._isAttached;\n\n    // set up the child view event forwarding\n    this._proxyChildEvents(view);\n\n    // Store the child view itself so we can properly remove and/or destroy it later\n    this.children.add(view);\n\n    if (!view.supportsRenderLifecycle) {\n      triggerMethodOn(view, 'before:render', view);\n    }\n\n    // Render view\n    view.render();\n\n    if (!view.supportsRenderLifecycle) {\n      view._isRendered = true;\n      triggerMethodOn(view, 'render', view);\n    }\n\n    if (shouldTriggerAttach) {\n      triggerMethodOn(view, 'before:attach', view);\n    }\n\n    // Attach view\n    this.attachHtml(this, view, index);\n\n    if (shouldTriggerAttach) {\n      view._isAttached = true;\n      triggerMethodOn(view, 'attach', view);\n    }\n  },\n\n  // Build a `childView` for a model in the collection.\n  _buildChildView(child, ChildViewClass, childViewOptions) {\n    const options = _.extend({model: child}, childViewOptions);\n    const childView = new ChildViewClass(options);\n    monitorViewEvents(childView);\n    return childView;\n  },\n\n  // Remove the child view and destroy it. This function also updates the indices of later views\n  // in the collection in order to keep the children in sync with the collection.\n  _removeChildView(view) {\n    if (!view || view._isDestroyed) {\n      return;\n    }\n\n    this.triggerMethod('before:remove:child', this, view);\n\n    if (view.destroy) {\n      view.destroy();\n    } else {\n      destroyBackboneView(view);\n    }\n\n    delete view._parent;\n    this.stopListening(view);\n    this.children.remove(view);\n    this.triggerMethod('remove:child', this, view);\n\n    // decrement the index of views after this one\n    this._updateIndices(view, false);\n  },\n\n  // check if the collection is empty or optionally whether an array of pre-processed models is empty\n  isEmpty(options) {\n    let models;\n    if (_.result(options, 'processedModels')) {\n      models = options.processedModels;\n    } else {\n      models = this.collection ? this.collection.models : [];\n      models = this._filterModels(models);\n    }\n    return models.length === 0;\n  },\n\n  // If empty, show the empty view\n  _checkEmpty() {\n    if (this.isEmpty()) {\n      this._showEmptyView();\n    }\n  },\n\n  // You might need to override this if you've overridden attachHtml\n  attachBuffer(collectionView, buffer) {\n    collectionView.$el.append(buffer);\n  },\n\n  // Create a fragment buffer from the currently buffered children\n  _createBuffer() {\n    const elBuffer = document.createDocumentFragment();\n    _.each(this._bufferedChildren, function(b) {\n      elBuffer.appendChild(b.el);\n    });\n    return elBuffer;\n  },\n\n  // Append the HTML to the collection's `el`. Override this method to do something other\n  // than `.append`.\n  attachHtml(collectionView, childView, index) {\n    if (collectionView._isBuffering) {\n      // buffering happens on reset events and initial renders\n      // in order to reduce the number of inserts into the\n      // document, which are expensive.\n      collectionView._bufferedChildren.splice(index, 0, childView);\n    } else {\n      // If we've already rendered the main collection, append\n      // the new child into the correct order if we need to. Otherwise\n      // append to the end.\n      if (!collectionView._insertBefore(childView, index)) {\n        collectionView._insertAfter(childView);\n      }\n    }\n  },\n\n  // Internal method. Check whether we need to insert the view into the correct position.\n  _insertBefore(childView, index) {\n    let currentView;\n    const findPosition = this.getOption('sort') && (index < this.children.length - 1);\n    if (findPosition) {\n      // Find the view after this one\n      currentView = this.children.find(function(view) {\n        return view._index === index + 1;\n      });\n    }\n\n    if (currentView) {\n      currentView.$el.before(childView.el);\n      return true;\n    }\n\n    return false;\n  },\n\n  // Internal method. Append a view to the end of the $el\n  _insertAfter(childView) {\n    this.$el.append(childView.el);\n  },\n\n  // Internal method to set up the `children` object for storing all of the child views\n  _initChildViewStorage() {\n    this.children = new ChildViewContainer();\n  },\n\n  // called by ViewMixin destroy\n  _removeChildren() {\n    this._destroyChildren({checkEmpty: false});\n  },\n\n  // Destroy the child views that this collection view is holding on to, if any\n  _destroyChildren({checkEmpty} = {}) {\n    this.triggerMethod('before:destroy:children', this);\n    const shouldCheckEmpty = checkEmpty !== false;\n    const childViews = this.children.map(_.identity);\n\n    this.children.each(_.bind(this._removeChildView, this));\n\n    if (shouldCheckEmpty) {\n      this._checkEmpty();\n    }\n\n    this.triggerMethod('destroy:children', this);\n    return childViews;\n  },\n\n  // Return true if the given child should be shown. Return false otherwise.\n  // The filter will be passed (child, index, collection), where\n  //  'child' is the given model\n  //  'index' is the index of that model in the collection\n  //  'collection' is the collection referenced by this CollectionView\n  _shouldAddChild(child, index) {\n    const filter = this.getOption('filter');\n    return !_.isFunction(filter) || filter.call(this, child, index, this.collection);\n  },\n\n  // Set up the child view event forwarding. Uses a \"childview:\" prefix in front of all forwarded events.\n  _proxyChildEvents(view) {\n    const prefix = this.getOption('childViewEventPrefix');\n\n    // Forward all child view events through the parent,\n    // prepending \"childview:\" to the event name\n    this.listenTo(view, 'all', function(eventName, ...args) {\n\n      const childEventName = prefix + ':' + eventName;\n\n      const childViewEvents = this.normalizeMethods(this._childViewEvents);\n\n      // call collectionView childViewEvent if defined\n      if (typeof childViewEvents !== 'undefined' && _.isFunction(childViewEvents[eventName])) {\n        childViewEvents[eventName].apply(this, args);\n      }\n\n      // use the parent view's proxyEvent handlers\n      const childViewTriggers = this._childViewTriggers;\n\n      // Call the event with the proxy name on the parent layout\n      if (childViewTriggers && _.isString(childViewTriggers[eventName])) {\n        this.triggerMethod(childViewTriggers[eventName], ...args);\n      }\n\n      this.triggerMethod(childEventName, ...args);\n    });\n  },\n\n  _getImmediateChildren() {\n    return _.values(this.children._views);\n  },\n\n  getViewComparator() {\n    return this.getOption('viewComparator');\n  }\n});\n\n_.extend(CollectionView.prototype, ViewMixin);\n\nexport default CollectionView;\n","// Composite View\n// --------------\n\nimport _               from 'underscore';\nimport Backbone        from 'backbone';\nimport deprecate       from './utils/deprecate';\nimport getValue        from './utils/getValue';\nimport getOption       from './utils/getOption';\nimport MarionetteError from './error';\nimport CollectionView  from './collection-view';\nimport View            from './view';\n\n// Used for rendering a branch-leaf, hierarchical structure.\n// Extends directly from CollectionView and also renders an\n// a child view as `modelView`, for the top leaf\n// @deprecated\nconst CompositeView = CollectionView.extend({\n\n  // Setting up the inheritance chain which allows changes to\n  // Marionette.CollectionView.prototype.constructor which allows overriding\n  // option to pass '{sort: false}' to prevent the CompositeView from\n  // maintaining the sorted order of the collection.\n  // This will fallback onto appending childView's to the end.\n  constructor() {\n    deprecate('CompositeView is deprecated. Convert to View at your earliest convenience');\n    CollectionView.prototype.constructor.apply(this, arguments);\n  },\n\n  // Configured the initial events that the composite view\n  // binds to. Override this method to prevent the initial\n  // events, or to add your own initial events.\n  _initialEvents() {\n\n    // Bind only after composite view is rendered to avoid adding child views\n    // to nonexistent childViewContainer\n\n    if (this.collection) {\n      this.listenTo(this.collection, 'add', this._onCollectionAdd);\n      this.listenTo(this.collection, 'remove', this._onCollectionRemove);\n      this.listenTo(this.collection, 'reset', this.renderChildren);\n\n      if (this.getOption('sort')) {\n        this.listenTo(this.collection, 'sort', this._sortViews);\n      }\n    }\n  },\n\n  // Retrieve the `childView` to be used when rendering each of\n  // the items in the collection. The default is to return\n  // `this.childView` or Marionette.CompositeView if no `childView`\n  // has been defined. As happens in CollectionView, `childView` can\n  // be a function (which should return a view class).\n  _getChildView(child) {\n    var childView = this.getOption('childView');\n\n    // for CompositeView, if `childView` is not specified, we'll get the same\n    // composite view class rendered for each child in the collection\n    // then check if the `childView` is a view class (the common case)\n    // finally check if it's a function (which we assume that returns a view class)\n    if (!childView) {\n      return this.constructor;\n    } else if (childView.prototype instanceof Backbone.View || childView === Backbone.View) {\n      return childView;\n    } else if (_.isFunction(childView)) {\n      return childView.call(this, child);\n    } else {\n      throw new MarionetteError({\n        name: 'InvalidChildViewError',\n        message: '\"childView\" must be a view class or a function that returns a view class'\n      });\n    }\n\n  },\n\n  // Return the serialized model\n  serializeData() {\n    return this.serializeModel();\n  },\n\n  // Renders the model and the collection.\n  render() {\n    this._ensureViewIsIntact();\n    this._isRendering = true;\n    this.resetChildViewContainer();\n\n    this.triggerMethod('before:render', this);\n\n    this._renderTemplate();\n    this.bindUIElements();\n    this.renderChildren();\n\n    this._isRendering = false;\n    this._isRendered = true;\n    this.triggerMethod('render', this);\n    return this;\n  },\n\n  renderChildren() {\n    if (this._isRendered || this._isRendering) {\n      CollectionView.prototype._renderChildren.call(this);\n    }\n  },\n\n  // You might need to override this if you've overridden attachHtml\n  attachBuffer(compositeView, buffer) {\n    const $container = this.getChildViewContainer(compositeView);\n    $container.append(buffer);\n  },\n\n  // Internal method. Append a view to the end of the $el.\n  // Overidden from CollectionView to ensure view is appended to\n  // childViewContainer\n  _insertAfter(childView) {\n    const $container = this.getChildViewContainer(this, childView);\n    $container.append(childView.el);\n  },\n\n  // Internal method. Append reordered childView'.\n  // Overidden from CollectionView to ensure reordered views\n  // are appended to childViewContainer\n  _appendReorderedChildren(children) {\n    const $container = this.getChildViewContainer(this);\n    $container.append(children);\n  },\n\n  // Internal method to ensure an `$childViewContainer` exists, for the\n  // `attachHtml` method to use.\n  getChildViewContainer(containerView, childView) {\n    if (!!containerView.$childViewContainer) {\n      return containerView.$childViewContainer;\n    }\n\n    let container;\n    const childViewContainer = getOption.call(containerView, 'childViewContainer');\n    if (childViewContainer) {\n\n      const selector = getValue.call(containerView, childViewContainer);\n\n      if (selector.charAt(0) === '@' && containerView.ui) {\n        container = containerView.ui[selector.substr(4)];\n      } else {\n        container = containerView.$(selector);\n      }\n\n      if (container.length <= 0) {\n        throw new MarionetteError({\n          name: 'ChildViewContainerMissingError',\n          message: 'The specified \"childViewContainer\" was not found: ' + containerView.childViewContainer\n        });\n      }\n\n    } else {\n      container = containerView.$el;\n    }\n\n    containerView.$childViewContainer = container;\n    return container;\n  },\n\n  // Internal method to reset the `$childViewContainer` on render\n  resetChildViewContainer() {\n    if (this.$childViewContainer) {\n      this.$childViewContainer = undefined;\n    }\n  }\n});\n\n// To prevent duplication but allow the best View organization\n// Certain View methods are mixed directly into the deprecated CompositeView\nconst MixinFromView = _.pick(View.prototype, 'serializeModel', 'getTemplate', '_renderTemplate', 'attachElContent');\n_.extend(CompositeView.prototype, MixinFromView);\n\nexport default CompositeView;\n","// Behavior\n// --------\n\n// A Behavior is an isolated set of DOM /\n// user interactions that can be mixed into any View.\n// Behaviors allow you to blackbox View specific interactions\n// into portable logical chunks, keeping your views simple and your code DRY.\n\nimport _                  from 'underscore';\nimport MarionetteObject   from './object';\nimport DelegateEntityEventsMixin      from './mixins/delegate-entity-events';\nimport TriggersMixin      from './mixins/triggers';\nimport UIMixin            from './mixins/ui';\nimport getUniqueEventName from './utils/getUniqueEventName';\n\nvar Behavior = MarionetteObject.extend({\n  cidPrefix: 'mnb',\n\n  constructor: function(options, view) {\n    // Setup reference to the view.\n    // this comes in handle when a behavior\n    // wants to directly talk up the chain\n    // to the view.\n    this.view = view;\n    this.defaults = _.clone(_.result(this, 'defaults', {}));\n    this._setOptions(this.defaults, options);\n    // Construct an internal UI hash using\n    // the behaviors UI hash and then the view UI hash.\n    // This allows the user to use UI hash elements\n    // defined in the parent view as well as those\n    // defined in the given behavior.\n    // This order will help the reuse and share of a behavior\n    // between multiple views, while letting a view override a\n    // selector under an UI key.\n    this.ui = _.extend({}, _.result(this, 'ui'), _.result(view, 'ui'));\n\n    MarionetteObject.apply(this, arguments);\n  },\n\n  // proxy behavior $ method to the view\n  // this is useful for doing jquery DOM lookups\n  // scoped to behaviors view.\n  $: function() {\n    return this.view.$.apply(this.view, arguments);\n  },\n\n  // Stops the behavior from listening to events.\n  // Overrides Object#destroy to prevent additional events from being triggered.\n  destroy: function() {\n    this.stopListening();\n\n    return this;\n  },\n\n  proxyViewProperties: function() {\n    this.$el = this.view.$el;\n    this.el = this.view.el;\n\n    return this;\n  },\n\n  bindUIElements: function() {\n    this._bindUIElements();\n\n    return this;\n  },\n\n  unbindUIElements: function() {\n    this._unbindUIElements();\n\n    return this;\n  },\n\n  getUI: function(name) {\n    this.view._ensureViewIsIntact();\n    return this._getUI(name);\n  },\n\n  // Handle `modelEvents`, and `collectionEvents` configuration\n  delegateEntityEvents: function() {\n    this._delegateEntityEvents(this.view.model, this.view.collection);\n\n    return this;\n  },\n\n  undelegateEntityEvents: function() {\n    this._undelegateEntityEvents(this.view.model, this.view.collection);\n\n    return this;\n  },\n\n  getEvents: function() {\n    // Normalize behavior events hash to allow\n    // a user to use the @ui. syntax.\n    var behaviorEvents = this.normalizeUIKeys(_.result(this, 'events'));\n\n    // binds the handler to the behavior and builds a unique eventName\n    return _.reduce(behaviorEvents, function(events, behaviorHandler, key) {\n      if (!_.isFunction(behaviorHandler)) {\n        behaviorHandler = this[behaviorHandler];\n      }\n      if (!behaviorHandler) { return; }\n      key = getUniqueEventName(key);\n      events[key] = _.bind(behaviorHandler, this);\n      return events;\n    } , {}, this);\n  },\n\n  // Internal method to build all trigger handlers for a given behavior\n  getTriggers: function() {\n    if (!this.triggers) { return; }\n\n    // Normalize behavior triggers hash to allow\n    // a user to use the @ui. syntax.\n    var behaviorTriggers = this.normalizeUIKeys(_.result(this, 'triggers'));\n\n    return this._getViewTriggers(this.view, behaviorTriggers);\n  }\n\n});\n\n_.extend(Behavior.prototype, DelegateEntityEventsMixin, TriggersMixin, UIMixin);\n\nexport default Behavior;\n","// Application\n// -----------\nimport _                from 'underscore';\nimport MarionetteObject from './object';\nimport Region           from './region';\n\n// A container for a Marionette application.\nvar Application = MarionetteObject.extend({\n  cidPrefix: 'mna',\n\n  constructor: function(options) {\n    this._setOptions(options);\n\n    this._initRegion();\n\n    MarionetteObject.prototype.constructor.apply(this, arguments);\n  },\n\n  regionClass: Region,\n\n  _initRegion: function(options) {\n    var region = this.getOption('region');\n    var RegionClass = this.getOption('regionClass');\n\n    // if the region is a string expect an el or selector\n    // and instantiate a region\n    if (_.isString(region)) {\n      this._region = new RegionClass({\n        el: region\n      });\n      return;\n    }\n\n    this._region = region;\n  },\n\n  getRegion: function() {\n    return this._region;\n  },\n\n  showView: function(view, ...args) {\n    var region = this.getRegion();\n    return region.show(view, ...args);\n  },\n\n  getView: function() {\n    return this.getRegion().currentView;\n  },\n\n  // kick off all of the application's processes.\n  start: function(options) {\n    this.triggerMethod('before:start', options);\n    this.triggerMethod('start', options);\n  }\n\n});\n\nexport default Application;\n","// App Router\n// ----------\n\n// Reduce the boilerplate code of handling route events\n// and then calling a single method on another object,\n// called a controller.\n// Have your routers configured to call the method on\n// your controller, directly.\n//\n// Configure an AppRouter with `appRoutes`.\n//\n// App routers can only take one `controller` object.\n// It is recommended that you divide your controller\n// objects in to smaller pieces of related functionality\n// and have multiple routers / controllers, instead of\n// just one giant router and controller.\n//\n// You can also add standard routes to an AppRouter.\n\nimport Backbone                from 'backbone';\nimport _                       from 'underscore';\nimport MarionetteError         from './error';\nimport CommonMixin             from './mixins/common';\nimport { triggerMethod }       from './trigger-method';\n\nvar AppRouter = Backbone.Router.extend({\n\n  constructor: function(options) {\n    this._setOptions(options);\n\n    Backbone.Router.apply(this, arguments);\n\n    var appRoutes = this.getOption('appRoutes');\n    var controller = this._getController();\n    this.processAppRoutes(controller, appRoutes);\n    this.on('route', this._processOnRoute, this);\n  },\n\n  // Similar to route method on a Backbone Router but\n  // method is called on the controller\n  appRoute: function(route, methodName) {\n    var controller = this._getController();\n    this._addAppRoute(controller, route, methodName);\n  },\n\n  // process the route event and trigger the onRoute\n  // method call, if it exists\n  _processOnRoute: function(routeName, routeArgs) {\n    // make sure an onRoute before trying to call it\n    if (_.isFunction(this.onRoute)) {\n      // find the path that matches the current route\n      var routePath = _.invert(this.getOption('appRoutes'))[routeName];\n      this.onRoute(routeName, routePath, routeArgs);\n    }\n  },\n\n  // Internal method to process the `appRoutes` for the\n  // router, and turn them in to routes that trigger the\n  // specified method on the specified `controller`.\n  processAppRoutes: function(controller, appRoutes) {\n    if (!appRoutes) { return; }\n\n    var routeNames = _.keys(appRoutes).reverse(); // Backbone requires reverted order of routes\n\n    _.each(routeNames, route => {\n      this._addAppRoute(controller, route, appRoutes[route]);\n    });\n  },\n\n  _getController: function() {\n    return this.getOption('controller');\n  },\n\n  _addAppRoute: function(controller, route, methodName) {\n    var method = controller[methodName];\n\n    if (!method) {\n      throw new MarionetteError('Method \"' + methodName + '\" was not found on the controller');\n    }\n\n    this.route(route, methodName, _.bind(method, controller));\n  },\n\n  triggerMethod: triggerMethod\n});\n\n_.extend(AppRouter.prototype, CommonMixin);\n\nexport default AppRouter;\n","import Backbone           from 'backbone';\nimport {version}          from '../package.json';\n\nimport proxy              from './utils/_proxy';\nimport extend             from './utils/extend';\nimport isNodeAttached     from './utils/isNodeAttached';\nimport mergeOptions       from './utils/mergeOptions';\nimport getOption          from './utils/getOption';\nimport normalizeMethods   from './utils/normalizeMethods';\nimport deprecate          from './utils/deprecate';\n\nimport monitorViewEvents  from './monitor-view-events';\nimport MarionetteObject   from './object';\nimport Renderer           from './renderer';\nimport TemplateCache      from './template-cache';\nimport View               from './view';\nimport CollectionView     from './collection-view';\nimport CompositeView      from './composite-view';\nimport Behavior           from './behavior';\nimport Region             from './region';\nimport Application        from './application';\nimport AppRouter          from './app-router';\nimport MarionetteError    from './error';\n\nimport behaviorsLookup    from './config/behaviors-lookup';\n\nimport {\n  FEATURES,\n  isEnabled,\n  setEnabled\n} from './config/features';\n\nimport {\n  bindEntityEvents,\n  unbindEntityEvents\n} from './bind-entity-events';\n\nimport {\n  bindRadioRequests,\n  unbindRadioRequests\n} from './bind-radio-requests';\n\nimport {\n  triggerMethod,\n  triggerMethodOn\n} from './trigger-method';\n\nvar previousMarionette = Backbone.Marionette;\nvar Marionette = Backbone.Marionette = {};\n\n// This allows you to run multiple instances of Marionette on the same\n// webapp. After loading the new version, call `noConflict()` to\n// get a reference to it. At the same time the old version will be\n// returned to Backbone.Marionette.\nMarionette.noConflict = function() {\n  Backbone.Marionette = previousMarionette;\n  return this;\n};\n\n// Utilities\nMarionette.bindEntityEvents = proxy(bindEntityEvents);\nMarionette.unbindEntityEvents = proxy(unbindEntityEvents);\nMarionette.bindRadioEvents = proxy(bindEntityEvents);\nMarionette.unbindRadioEvents = proxy(unbindEntityEvents);\nMarionette.bindRadioRequests = proxy(bindRadioRequests);\nMarionette.unbindRadioRequests = proxy(unbindRadioRequests);\nMarionette.mergeOptions = proxy(mergeOptions);\nMarionette.getOption = proxy(getOption);\nMarionette.normalizeMethods = proxy(normalizeMethods);\nMarionette.extend = extend;\nMarionette.isNodeAttached = isNodeAttached;\nMarionette.deprecate = deprecate;\nMarionette.triggerMethod = proxy(triggerMethod);\nMarionette.triggerMethodOn = triggerMethodOn;\nMarionette.isEnabled = isEnabled;\nMarionette.setEnabled = setEnabled;\nMarionette.monitorViewEvents = monitorViewEvents;\n\nMarionette.Behaviors = {};\nMarionette.Behaviors.behaviorsLookup = behaviorsLookup;\n\n// Classes\nMarionette.Application = Application;\nMarionette.AppRouter = AppRouter;\nMarionette.Renderer = Renderer;\nMarionette.TemplateCache = TemplateCache;\nMarionette.View = View;\nMarionette.CollectionView = CollectionView;\nMarionette.CompositeView = CompositeView;\nMarionette.Behavior = Behavior;\nMarionette.Region = Region;\nMarionette.Error = MarionetteError;\nMarionette.Object = MarionetteObject;\n\n// Configuration\nMarionette.DEV_MODE = false;\nMarionette.FEATURES = FEATURES;\nMarionette.VERSION = version;\n\nexport default Marionette;\n"],"sourceRoot":"/source/"}